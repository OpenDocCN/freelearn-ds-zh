- en: Designing Data Visualization Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have the data living in the Hadoop ecosystem and it's been processed,
    the next logical step is to build the analytics that drive the business decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Druid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Superset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is the process of understanding the relationships between
    various entities in the raw data via graphical means. This is a very powerful
    technique because it enables end users to get the message in a very easy form
    without even knowing anything about the underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization plays a very important role in visual communication of insights
    from big data. Its both an art and a science, and requires some effort in terms
    of understanding the data; at the same time we need some understanding of the
    target audience as well.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen that any type of data can be stored in the **Hadoop filesystem**
    (**HDFS**). In order to convert complex data structures into a visual form, we
    need to understand the standard techniques that are used to represent the data.
  prefs: []
  type: TYPE_NORMAL
- en: In data visualization, the message is conveyed to the end users in the form
    of graphics which can be in 1D, 2D, 3D, or even higher dimensions. This purely
    depends on the meaning we are trying to convey.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the standard graphics that are used to convey visual
    messages to users:'
  prefs: []
  type: TYPE_NORMAL
- en: Bar/column chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line/area chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter/bubble chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubble chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar/column chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a 2D graphical representation of data where the data points are shown
    as vertical/horizontal bars. Each bar represents one data point. When there is
    no time dimension involved with reference to the data points, the order in which
    these points are shown might not make any difference. When we deal with time series
    data for representing bar charts, we generally follow the chronological order
    of display along the X (horizontal) axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a sample chart that is generated with four data points.
    The data represents the amount each user has:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a5e0f63-0700-430c-873e-dbeeb2c09d0b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Interpretation**: The graph has both text data in rows and columns, and also
    visuals. If you observe carefully, the textual data is smaller in size and has
    only four records. But the visual graphic conveys the message straightaway without
    knowing anything about the data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The message the graph conveys is that:'
  prefs: []
  type: TYPE_NORMAL
- en: Sita has more money than everyone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gita has the least money
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other interpretations are also possible. They are left to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Line/area chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is also typically a 2D chart where each data point is represented as a
    point on canvas and all these points belonging to the same dataset are connected
    using a line. This chart becomes an area chart when the region from the horizontal/vertical
    axis is completely covered up to the line.
  prefs: []
  type: TYPE_NORMAL
- en: There can be more than one line in the same graph, which indicates multiple
    series of data for the same entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the sample of this area chart based on the same data
    as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9849529-fcc2-488a-8c2d-02fadaba8876.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the properties of the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: The *x* axis has the list of all the people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *y* axis indicates the amount from **0** to **100**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Points are drawn on the graph at four places, corresponding to the values in
    tabular form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Points are connected with straight lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The area is filled below the line to make it an area chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is also a 2D chart drawn as multiple sectors in a circle. This chart is
    useful when we want to highlight the relative importance of all the data points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the example chart that is drawn with the same dataset
    as before to understand it better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffa15300-a402-41d1-9baf-d4caae0188a9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it's easy to understand the relative importance of the amounts
    owned by each of the persons using this chart.
  prefs: []
  type: TYPE_NORMAL
- en: The conclusions that are drawn are similar to the previous charts. But the graph
    is a simple circle and there are no multiple dimensions here to burden the user.
  prefs: []
  type: TYPE_NORMAL
- en: Radar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is also a 2D graphic where the data axes are the edges of equidistant sectors
    (like a pie chart's edges). This graph is useful when there are multiple dimensions
    in which we want to understand the relative significance of each data point.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this graph better, let''s take a look at this sample data and
    the graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/436900d2-ca59-4ff0-a579-c8a69ab9b5a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The data consists of eight columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First column**: List of all users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Second to Eighth column**: Days in a week and the dollars owned by each person
    on that day'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We want to draw a graph that shows us the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Total dollars per day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dollars owned by every person every day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have drawn all this information in the radar chart, where the axes are the
    sectors (days) and are capped at a maximum value of **400**. Each user's worth
    is drawn one on top of another so that we will know the total worth instead of
    relative worth (this is similar to area stacking).
  prefs: []
  type: TYPE_NORMAL
- en: Scatter/bubble chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scatter chart can be a multi-dimensional graphic. This is one of the simpler
    graphics to understand as we render each data point on the canvas corresponding
    to the numeric value along the axis. This graph is useful to understand the relative
    importance of each point along the axes.
  prefs: []
  type: TYPE_NORMAL
- en: A bubble chart is a variant of a scatter chart, where the points on the canvas
    show the values as big bubbles (to signify their importance).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at both these graphics with this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15f06c51-ebce-4863-935b-8485c89f33e4.png)'
  prefs: []
  type: TYPE_IMG
- en: The graphic on the left-hand side is a bubble chart and the right one is a scatter
    plot.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the data and the charts that are generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input data:'
  prefs: []
  type: TYPE_NORMAL
- en: Consists of five rows, whereas we have **Sales** and **Number of Products**
    in columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With a bubble chart:'
  prefs: []
  type: TYPE_NORMAL
- en: The *y* axis shows the number of products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *x* axis is just positional and doesn't reflect the value from the input
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each point on the canvas shows the sales corresponding to the number of products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the scatter chart:'
  prefs: []
  type: TYPE_NORMAL
- en: The *y* axis shows the sales done
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *x* axis shows the products sold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each point on the canvas shows each row in the input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many other types of graphics possible that are not covered in this
    section but are worth exploring on the [https://d3js.org](https://d3js.org) website.
    This will give you an understanding of how data can be represented to convey a
    very good message to the users.
  prefs: []
  type: TYPE_NORMAL
- en: Practical data visualization in Hadoop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hadoop has a rich ecosystem of data sources and applications that help us build
    rich visualizations. In the coming sections, we will understand two such applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Druid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Superset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also learn how to use Apache Superset with data in RDBMSes such as MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Druid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Druid is a distributed, high-performance columnar store. Its official
    website is [https://druid.io](https://druid.io).
  prefs: []
  type: TYPE_NORMAL
- en: Druid allows us to store both real-time and historical data that is time series
    in nature. It also provides fast data aggregation and flexible data exploration.
    The architecture supports storing trillions of data points on petabyte sizes.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand more about the Druid architecture, please refer to this
    white paper at [http://static.druid.io/docs/druid.pdf](http://static.druid.io/docs/druid.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Druid components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at the different components of the Druid cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Druid Broker | These are the nodes that are aware of where the data lies
    in the cluster. These nodes are contacted by the applications/clients to get the
    data within Druid. |'
  prefs: []
  type: TYPE_TB
- en: '| Druid Coordinator | These nodes manage the data (they load, drop, and load-balance
    it) on the historical nodes. |'
  prefs: []
  type: TYPE_TB
- en: '| Druid Overlord | This component is responsible for accepting tasks and returning
    the statuses of the tasks. |'
  prefs: []
  type: TYPE_TB
- en: '| Druid Router | These nodes are needed when the data volume is in terabytes
    or higher range. These nodes route the requests to the brokers. |'
  prefs: []
  type: TYPE_TB
- en: '| Druid Historical | These nodes store immutable segments and are the backbone
    of the Druid cluster. They serve load segments, drop segments, and serve queries
    on segments'' requests. |'
  prefs: []
  type: TYPE_TB
- en: Other required components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table presents a couple of other required components:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component**  | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Zookeeper | Apache Zookeeper is a highly reliable distributed coordination
    service |'
  prefs: []
  type: TYPE_TB
- en: '| Metadata Storage | MySQL and PostgreSQL are the popular RDBMSes used to keep
    track of all segments, supervisors, tasks, and configurations |'
  prefs: []
  type: TYPE_TB
- en: Apache Druid installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Druid can be installed either in standalone mode or as part of a Hadoop
    cluster. In this section, we will see how to install Druid via Apache Ambari.
  prefs: []
  type: TYPE_NORMAL
- en: Add service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we invoke the Actions drop-down below the list of services in the Hadoop
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56f10c5f-97bf-40c1-b098-83a1f671e5ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Druid and Superset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this setup, we will install both Druid and Superset at the same time. Superset
    is the visualization application that we will learn about in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The selection screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0086078-bf64-45a7-af90-00f00093b19f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Next when both the services are selected.
  prefs: []
  type: TYPE_NORMAL
- en: Service placement on servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this step, we will be given a choice to select the servers on which the application
    has to be installed. I have selected node 3 for this purpose. You can select any
    node you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e573a6f3-105c-45a7-a56b-b903cd89c4a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Next when when the changes are done.
  prefs: []
  type: TYPE_NORMAL
- en: Choose Slaves and Clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we are given a choice to select the nodes on which we need the Slaves
    and Clients for the installed components. I have left the options that are already
    selected for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23b2b7f5-6540-421e-8a95-2a3a0a3dcf83.png)'
  prefs: []
  type: TYPE_IMG
- en: Service configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this step, we need to select the databases, usernames, and passwords for
    the metadata store used by the Druid and Superset applications. Feel free to choose
    the default ones. I have given MySQL as the backend store for both of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72b59851-5564-4c73-8143-b34a002282ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the changes look good, click on the Next button at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Service installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this step, the applications will be installed automatically and the status
    will be shown at the end of the plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Next once the installation is complete. Changes to the current screen
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d03751d-b4f0-4879-bbc8-ef7ba50c9a27.png)'
  prefs: []
  type: TYPE_IMG
- en: Installation summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once everything is successfully completed, we are shown a summary of what has
    been done. Click on Complete when done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02790068-b2da-4efd-a4b5-2afc1dfdb055.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample data ingestion into Druid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have all the Druid-related applications running in our Hadoop cluster,
    we need a sample dataset that we must load in order to run some analytics tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to load sample data. Download the Druid archive from the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the sample Wikipedia data to Hadoop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Submit the import request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After this step, Druid will automatically import the data into the Druid cluster
    and the progress can be seen in the overlord console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface is accessible via `http://<overlord-ip>:8090/console.html`. The
    screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8df1b469-ba70-4646-a81f-bfe2cce4267c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the ingestion is complete, we will see the status of the job as SUCCESS.
  prefs: []
  type: TYPE_NORMAL
- en: In case of `FAILED` imports, please make sure that the backend that is configured
    to store the Metadata for the Druid cluster is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Even though Druid works well with the OpenJDK installation, I have faced a problem
    with a few classes not being available at runtime. In order to overcome this,
    I have had to use Oracle Java version 1.8 to run all Druid applications.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to start using Druid for our visualization tasks.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Superset also allows us to read the data present in an RDBMS system such
    as MySQL. We will also create a sample database in this section, which we can
    use later with Superset to create visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Sample database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The employees database is a standard dataset that has a sample organization
    and their employee, salary, and department data. We will see how to set it up
    for our tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This section assumes that the MySQL database is already configured and running.
  prefs: []
  type: TYPE_NORMAL
- en: Download the sample dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the sample dataset from GitHub with the following command on any server
    that has access to the MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Copy the data to MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this step, we will import the contents of the data in the files to the MySQL
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Verify integrity of the tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an important step, just to make sure that all of the data we have imported
    is correctly stored in the database. The summary of the integrity check is shown
    as the verification happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now the data is correctly loaded in the MySQL database called **employees**.
  prefs: []
  type: TYPE_NORMAL
- en: Single Normalized Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In data warehouses, its a standard practice to have normalized tables when compared
    to many small related tables. Lets create a single normalized table that contains
    details of employees, salaries, departments
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once we have normalized data, we will see how to use the data from this table
    to generate rich visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Superset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Superset is a modern, enterprise-grade business intelligence application. The
    important feature of this application is that we can run all analyses directly
    from the browser. There is no need to install any special software for this.
  prefs: []
  type: TYPE_NORMAL
- en: If you remember, we have already installed Superset along with Druid in the
    previous sections. Now we need to learn how to use Superset to build rich visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Superset application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `http://<SERVER-IP>:9088/` in your web browser. If everything is running
    fine, we will see a login screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb4e68e7-e99a-4f3d-956f-ac74a506fe67.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter `admin` as the username and the password as chosen during the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Superset dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dashboards are important pieces of the Superset application. They let us showcase
    the results of the analytics computation in a graphical form. Dashboards are created
    from Slices, which in turn are built from the various data sources configured
    in the Superset application.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful login, there won’t be any dashboards created automatically
    for us. We will see a blank list of dashboards, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cfcf69f-da70-4dc1-a4ff-b74154a0cfdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to build dashboards, we first need to configure the data sources.
    So, let''s click on the Sources menu from the top navigation and click on Refresh
    Druid Metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ca5bc92-fdeb-48ec-90cb-1e1b41350655.png)'
  prefs: []
  type: TYPE_IMG
- en: After this step, we are taken to the data sources page and a new data source
    automatically appears here. Remember we uploaded this dataset to Druid before?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/186e1e1f-b1d8-4348-9b89-d65bc8e27621.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can click on the data source name (in green), which will take us to
    the data source exploration page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/721f4f3e-09d5-4153-aa95-0e04aec73401.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, this page is divided into multiple sections.
  prefs: []
  type: TYPE_NORMAL
- en: '**Left Side UI**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datasource and Chart Type**: In this column, we can select the data source
    that we need to use and also the type of graphic we want to see on the right.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time**: This is the column where we can restrict the data from the data source
    to a given time range. Beginners tend to make a mistake with this column as they
    won’t see any data on the right side. So, choose a start time value (a relative
    value like 100 years ago is recommended for better results).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group By**: This column is used to group data based on the dimensions of
    the input data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other Options**: There are other options that are available below Group By,
    which we will explore in the coming steps.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Side UI**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This UI contains the results of the options that we have selected on the left-hand
    side.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Wikipedia edits data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into building visualizations. Let''s take a closer look at the
    data we have ingested into Druid and what types of graphics we can render from
    that data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Metric/Dimension** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `delta` | `LONG` | Change represented in numeric form |'
  prefs: []
  type: TYPE_TB
- en: '| `deleted` | `LONG` | Deleted data from the article in numeric form |'
  prefs: []
  type: TYPE_TB
- en: '| `added` | `LONG` | Added data, measured in numeric form |'
  prefs: []
  type: TYPE_TB
- en: '| `isMinor` | `STRING` | Boolean, indicating whether this is a minor edit or
    not |'
  prefs: []
  type: TYPE_TB
- en: '| `page` | `STRING` | The page where the change has happened in Wikipedia |'
  prefs: []
  type: TYPE_TB
- en: '| `isRobot` | `STRING` | Is the change done by a robot (not a human but some
    form of program) |'
  prefs: []
  type: TYPE_TB
- en: '| `channel` | `STRING` | Wikipedia channel where the change has happened |'
  prefs: []
  type: TYPE_TB
- en: '| `regionName` | `STRING` | Geographical region name from which the change
    has been done |'
  prefs: []
  type: TYPE_TB
- en: '| `cityName` | `STRING` | City name from which the change has been done |'
  prefs: []
  type: TYPE_TB
- en: '| `countryIsoCode` | `STRING` | ISO code of the country from which the change
    has been done |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | `STRING` | Wikipedia user or IP address that has made the change
    |'
  prefs: []
  type: TYPE_TB
- en: '| `countryName` | `STRING` | Name of the country from which the change has
    been made |'
  prefs: []
  type: TYPE_TB
- en: '| `isAnonymous` | `STRING` | Has the change been done by a anonymous user (not
    logged-in state)? |'
  prefs: []
  type: TYPE_TB
- en: '| `regionIsoCode` | `STRING` | ISO code of the geographical region from which
    the change has been done |'
  prefs: []
  type: TYPE_TB
- en: '| `metroCode` | `STRING` | This is similar to ZIP code in the United States
    (see [http://www.nlsinfo.org/usersvc/NLSY97/NLSY97Rnd9geocodeCodebookSupplement/gatt101.html](http://www.nlsinfo.org/usersvc/NLSY97/NLSY97Rnd9geocodeCodebookSupplement/gatt101.html))
    |'
  prefs: []
  type: TYPE_TB
- en: '| `namespace` | `STRING` | Wikipedia article/page namespace |'
  prefs: []
  type: TYPE_TB
- en: '| `comment` | `STRING` | Comment that was added for this change |'
  prefs: []
  type: TYPE_TB
- en: '| `isNew` | `STRING` | `true` if this is a new page (see [https://en.wikipedia.org/wiki/Wikipedia:Glossary#N](https://en.wikipedia.org/wiki/Wikipedia:Glossary#N))
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isUnpatrolled` | `STRING` | `true` if the change is not a patrolled one
    (see [https://en.wikipedia.org/wiki/Wikipedia:New_pages_patrol](https://en.wikipedia.org/wiki/Wikipedia:New_pages_patrol))
    |'
  prefs: []
  type: TYPE_TB
- en: 'So, we have listed all the attributes of the data. Let''s take a look at the
    sample one to get a better understanding of what we are talking about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once we have some understanding of the data dimensions, we need to see what
    types of questions we can answer from this data. These questions are the insights
    that are readily available to us. Later, we can represent these in the graphical
    form that best suits us.
  prefs: []
  type: TYPE_NORMAL
- en: So let's see some of the questions we can answer from this data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uni-dimensional insights**:'
  prefs: []
  type: TYPE_NORMAL
- en: Which are the cities from which changes were made?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which pages were changed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which are the countries from which changes were made?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many new pages were created?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Counts along the dimension**:'
  prefs: []
  type: TYPE_NORMAL
- en: How many changes were made from each city?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which are the top cities from which changes were made?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which are the top users who have contributed to the changes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the namespaces that were changed frequently?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-dimensional insights**:'
  prefs: []
  type: TYPE_NORMAL
- en: How many changes were made between 9.00 am to 10.00 am across all countries?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the wall clock hours when the edits are made by robots?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which country has the most origin of changes that are targeted by robots and
    at what times?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks interesting, right? Why don't we try to use Apache Superset to create
    a dashboard with some of these insights?
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this we need to follow this simple workflow in the Superset
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define new data sources from supported databases
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Refresh the Apache Druid data sources
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create Slices
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Slices to make a dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we recollect, we have already done *Step 1* in previous sections. So, we
    can go right away to the second and third steps.
  prefs: []
  type: TYPE_NORMAL
- en: Create Superset Slices using Wikipedia data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see what types of graphics we can generate using the Slices feature in
    the Superset application.
  prefs: []
  type: TYPE_NORMAL
- en: Unique users count
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this Slice, we see how to generate a graphic to find unique users who have
    contributed to the edits in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to go to the Slices page from the top navigation. After this,
    the screen looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/178cfd0e-a1c9-4260-80b8-b8e5e6b76a58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this page, click on the plus icon (+) to add a new slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35366e2f-997f-4366-84b8-3755677d28fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, we see a list of data sources that are configured in the system.
    We have to click on the data source name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9667e719-7831-48fc-9d87-4667320f76de.png)'
  prefs: []
  type: TYPE_IMG
- en: After we click on wikiticker, we are taken to the visualization page, where
    we define the dimensions that we want to render as a graphic.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the current use case, let''s choose the following options from the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/dfd162c5-4692-4ee4-865a-b17419505a33.png) | Choose the
    **Datasource** as [druid-ambari].[wikiticker] and the graphic type as Big Number*. *In
    the Time section, choose the value for since as 5 years ago and leave the rest
    of the values to their defaults. In the Metric section. Choose COUNT(DISTINCT
    user_unique) from the autocomplete. In the Subheader Section, add Unique User
    Count, which is displayed on the screen. After this, click on the Query button
    at the top. |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/800cad03-8066-4307-9252-a685b878591e.png) | We see
    the result of the query in this graphic. |'
  prefs: []
  type: TYPE_TB
- en: '| Save Slice | ![](img/798a6ed3-139e-4199-9f06-951316752e77.png) | Clicking
    on the Save As button on top will show a pop-up window like this, where we need
    to add the corresponding values. Save the slice as `Unique Users` and add it to
    a new dashboard with the name `My Dashboard 1`. |'
  prefs: []
  type: TYPE_TB
- en: Sounds so simple, right? Let's not hurry to see the dashboard yet. Let's create
    some more analytics from the data in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Word Cloud for top US regions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to build a word cloud for the top US regions
    that have contributed to the Wikipedia edits in the datasource we have in Druid.
    We can continue editing the same Slice from the previous section or go to a blank
    Slice, as mentioned in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s concentrate on the values that we need to select for generating a word
    cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/0ad3f384-ff61-47a6-aa8e-db2a4eae0ef6.png) | Choose the
    Datasource as [druid-ambari].[wikiticker] and the graphic type as Word Cloud. In
    the Time section, choose the value for Since as 5 years ago and leave the rest
    of the values to their defaults. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/4c1ceee1-5973-450a-972b-4988d1920fc8.png) | In the Series section.
    Choose the regionName from the dropdown. In Metric, choose COUNT(*), which is
    the total edit count. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/c8882e1f-fd08-4647-b59d-91b4b4463747.png) | In the Filters section,
    choose countryIsoCode; it should be in US. Add another filter to select only valid
    regions (skip null codes). Add the values as shown here in the graphic. |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/92a36d97-f891-40f6-b609-7846c7ede83b.png) | After
    clicking on Query, we see this beautiful word cloud. |'
  prefs: []
  type: TYPE_TB
- en: '| Save Slice | ![](img/690e8348-71ec-4532-9bf3-586060cd9bbf.png) | Clicking
    on the Save As button at the top will show a pop-up window like this, where we
    need to add the corresponding values. Save the Slice as `Word Cloud - Top US Regions` and
    add it to a new dashboard named `My Dashboard 1`*.* |'
  prefs: []
  type: TYPE_TB
- en: The significance of the word cloud is that we can see the top words according
    to their relative sizes. This type of visualization is helpful when there are
    fewer words for which we want to see the relative significance.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to generate another graphic from the data.
  prefs: []
  type: TYPE_NORMAL
- en: Sunburst chart – top 10 cities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about a different type of chart that we have
    not seen so far in this chapter. But first, let's put forward the use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to find the unique users per channel, city name, and namespace at all
    three levels; that is, the graphic should be able to show us the:'
  prefs: []
  type: TYPE_NORMAL
- en: Unique users per channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique users per channel/city name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique users per channel/city name/namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to show this kind of hierarchical data, we can use a sunburst chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check out what type of values we need to select to render this type
    of chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/0329cb06-5945-445b-8893-b5e9f2f69255.png) | Choose the
    Datasource as [druid-ambari].[wikiticker] and the graphic type as Sunburst. In
    the Time section, choose the value for Since as 5 years ago and leave the rest
    of the values to their defaults. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/c4970db4-b189-470b-9e03-fa0488452a60.png) | In the Hierarchy section,
    choose the `channel`, `cityName`, and `namespace` from the dropdown. In the Primary
    Metric and Secondary Metric, choose COUNT(DISTINCT user_unique), which is the
    total user count. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/11a6a4bc-0a09-4e22-b301-2d32bab56027.png) | In the **Filters**
    section, choose cityName and add the not null condition using regex matching |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/e6b4b21e-6e88-43fa-a7b8-d49c731e309e.png) | Clicking on the Save
    As button at the top will show a pop-up window like this. We need to add the corresponding
    values here. Save the Slice as `Sunburst - Top 10 Cities` and add it to a new
    dashboard named `My Dashboard 1`*.* |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/fa393586-c43c-442b-8b17-0a69a61a1835.png) | After
    clicking on Query, we see this beautiful graphic. |'
  prefs: []
  type: TYPE_TB
- en: 'As we can see there are three concentric rings in the graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: The innermost ring is the `channel` dimension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The middle ring shows the `cityName` dimension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The outermost ring is the `namespace` dimension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we hover over the innermost ring, we can see how it spreads out into the
    outermost circles. The same thing happens with the other rings as well.
  prefs: []
  type: TYPE_NORMAL
- en: This type of graphic is very helpful when we want to do funnel analysis on our
    data. Let's take a look at another type of analysis in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Top 50 channels and namespaces via directed force layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Directed force layout** (**DFL**) is a network layout with points that are
    interconnected to each other. Since it''s a force layout, we can see the points
    moving on the screen as `d3.js` applies the physics engine.'
  prefs: []
  type: TYPE_NORMAL
- en: In this network graph, we want to understand the connectivity between the namespace
    and channel over the unique users count metric. Since this is a network graph,
    we will see the nodes getting repeated in different paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can arrive at this graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/d0bacbf9-fbe8-4b9a-868d-afb3fead3ed0.png) | Choose the
    Datasource as [druid-ambari].[wikiticker] and the Graphic type as Directed Force
    Layout*. *In the Time section, choose the value for since as 5 years ago and leave
    the rest of the values to their defaults. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/e5b3cdcf-eebf-45d9-a9b0-89d3ed63f1e8.png) | In the Source / Target
    section, choose the `channel` and `namespace` from the dropdown. In the Metric
    section, choose COUNT(DISTINCT user_unique) which is the total user count. We
    keep the Row limit at 50 so that we will see only the top 50*.* |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/540474de-0c35-4f68-b0f7-3004dfc034c1.png) | Clicking on the Save
    As button at the top will show a pop up window like this, where we need to add
    the corresponding values. Save the Slice as `DFL - Top 50 Channels & Namespaces`.
    Add it to a new dashboard with the name `My Dashboard 1`. |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/a2c1210d-ffd7-48ac-896f-a7f1ed5dc218.png) | After
    clicking on Query, we see this beautiful graphic. |'
  prefs: []
  type: TYPE_TB
- en: Feel free to drag the nodes in the graphic to learn more about how they are
    interconnected to each other. The size of the nodes indicates the unique user
    count and its breakdown (similar to a sunburst chart).
  prefs: []
  type: TYPE_NORMAL
- en: Let's spend some time learning another visualization and business use case in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Top 25 countries/channels distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will learn the Sankey chart, a waterfall-like way of representing of
    breakdown and interconnectivity between data. In this case, we want to find out
    how the channelName and countryName dimensions are related when it comes to the
    unique users metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/b7bc7cbf-4167-49e8-b6e4-758a9813b6e1.png) | Choose the
    **Datasource** as [druid-ambari].[wikiticker] and the **Graphic Type** as Sankey.In
    the **Time** section, choose the value for Since as 5 years ago and leave the
    rest as default. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/c11d0b06-6547-4392-b8d3-a1aa54e98eb0.png) | In the **Source /
    Target** section, choose `channel` and `countryName` from the drop-down. In the
    Metric, choose COUNT(*), which is the total edit count. Keep the row limit at
    25; so we will see only the top 25 items*.* |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/1eaf35b3-357d-4876-a6b9-cb61601ac660.png) | In the **Filters**
    section, choose countryName and enable the regex filter so as to choose only those
    records that have a valid country name. |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![](img/42a3d617-7a02-4545-8ef9-674f23fce62b.png) | Clicking on the **Save
    As** button at the top will show a pop-up window. We need to add the corresponding
    values here. Save the Slice as `Top 25 Countries/Channels Distribution` and add
    it to a new dashboard with the name `My Dashboard 1`. |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/0efcc190-641e-49dc-946c-0bddf1cba3fe.png) | After
    clicking on Query, we see this beautiful graphic. |'
  prefs: []
  type: TYPE_TB
- en: This completes the list of all the analytics that we can generate so far. Now
    in the next section, we will see how to use this in the dashboard (which was our
    original goal anyway).
  prefs: []
  type: TYPE_NORMAL
- en: Creating wikipedia edits dashboard from Slices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen how to create slices in the Apache Superset application
    for the wikipedia edits data, that is stored in the Apache Druid database. Its
    now time for us to see how to create a dashboard so that we can share it with
    the Business Teams or any other teams for which we want to share the insights.
  prefs: []
  type: TYPE_NORMAL
- en: In this process, the first step would be to click on the Dashboard menu on the
    top navigation bar. Which will take us to Add New Dashboard Page, where we need
    to fill the following details.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Element** | **Description** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| Title | This is the name of the dashboard that we want to create | My Dashboard
    1 |'
  prefs: []
  type: TYPE_TB
- en: '| Slug | Short alias for the dashboard | dash1 |'
  prefs: []
  type: TYPE_TB
- en: '| Slices | List of Slices that we want to add to the dashboard. |'
  prefs: []
  type: TYPE_TB
- en: Sunburst - Top 10 Cities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DFL - Top 50 Channels & Namespaces
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Top 25 Countries / Channels Contribution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Word Cloud - Top US Regions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unique Users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Other Fields | We can leave the other fields as empty as they are not mandatory
    to create the dashboard |  |'
  prefs: []
  type: TYPE_TB
- en: 'Here is the graphic for this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91059ba0-71e3-47ab-adf9-6752f0d7b4a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save button at the bottom of the screen once the changes look good.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take us to the next step where we can see that the dashboard is successfully
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33f7bb5a-fc17-4a85-977e-bc84f3c69250.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the My Dashboard 1 in the list of dashboards. In order to access
    this dashboard click on it, Where we are taken to the dashboard screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f258abd-6893-4f4d-9e83-bfa0e4cab0eb.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see we have a very powerful way of representing all the raw data.
    This will definitely have an impact on the end users in making sure that the message
    is conveyed.
  prefs: []
  type: TYPE_NORMAL
- en: So far we have learned how to create slices and Dashboards from the data that
    is stored in the Apache Druid Columnar Database. In the next section we will see
    how to connect to RDBMS and generate slices and dashboards from that data.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Superset with RDBMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Superset is built using Python programming language and supports many
    relational databases as it uses SQLAlchemy as the database driver. The installation
    of these drivers are out of scope in this section. But, it should be very easy
    to install those. Most of the time the Operating system vendors package them for
    us. So, we need not worry about the manual installation of these.
  prefs: []
  type: TYPE_NORMAL
- en: Supported databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the database that are supported by Apache Superset:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Database Name** | **Python Package Name** | **Driver URI Prefix** | **Details**
    |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL | `mysqlclient` | `mysql://` | Oracle MySQL Database |'
  prefs: []
  type: TYPE_TB
- en: '| PostgreSQL | `psycopg2` | `postgresql+psycopg2://` | The worlds most advanced
    opensource database |'
  prefs: []
  type: TYPE_TB
- en: '| Presto | `pyhive` | `presto://` | Opensource distributed query Engine |'
  prefs: []
  type: TYPE_TB
- en: '| Oracle | `cx_Oracle` | `oracle://` | Multi-model Database management system
    created by Oracle Corporation. |'
  prefs: []
  type: TYPE_TB
- en: '| Sqlite |  | `sqlite://` | Fast, Scalable Embedded Database Library |'
  prefs: []
  type: TYPE_TB
- en: '| Redshift | `sqlalchemy-redshift` | `postgresql+psycopg2://` | Amazon Redshift
    is Columnar database built on PostgreSQL |'
  prefs: []
  type: TYPE_TB
- en: '| MSSQL | `pymssql` | `mssql://` | Microsoft SQL Server |'
  prefs: []
  type: TYPE_TB
- en: '| Impala | `impyla` | `impala://` | Apache Impala is Massively Parallel Processing
    SQL Engine that runs on Hadoop |'
  prefs: []
  type: TYPE_TB
- en: '| SparkSQL | `pyhive` | `jdbc+hive://` | Apache Spark Module for writing SQL
    in Spark Programs. |'
  prefs: []
  type: TYPE_TB
- en: '| Greenplum | `psycopg2` | `postgresql+psycopg2://` | Greenplum is advanced
    , fully featured opensource data platform |'
  prefs: []
  type: TYPE_TB
- en: '| Athena | `PyAthenaJDBC` | `awsathena+jdbc://` | Amazon Athena is Serverless
    Interactive Query Service |'
  prefs: []
  type: TYPE_TB
- en: '| Vertica | `sqlalchemy-vertica-python` | `vertica+vertica_python://` | Vertica
    is Bigdata analytics software |'
  prefs: []
  type: TYPE_TB
- en: '| ClickHouse | `sqlalchemy-clickhouse` | `clickhouse://` | Opensource distributed,
    columnar datastore |'
  prefs: []
  type: TYPE_TB
- en: Portions of the above table is extracted from the official documentation of
    Apache Superset ([https://superset.incubator.apache.org/installation.html#database-dependencies](https://superset.incubator.apache.org/installation.html#database-dependencies))
  prefs: []
  type: TYPE_NORMAL
- en: Understanding employee database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you remember, in the previous sections we have imported a sample database
    called Employees and loaded it into the MySQL Database. We will dig further into
    this sample datastore so that we will learn what types of analytics we can generate
    from this.
  prefs: []
  type: TYPE_NORMAL
- en: Employees table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `employees` table contains details of Employees (randomly generated data)
    with the following properties
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INTEGER` | Employee Number |'
  prefs: []
  type: TYPE_TB
- en: '| `birth_date` | `DATE` | Employee Date Of Birth |'
  prefs: []
  type: TYPE_TB
- en: '| `first_name` | `STRING` | First Name of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `last_name` | `STRING` | Last Name of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `gender` | `STRING` | Gender of Employee, M if Male, F if Female |'
  prefs: []
  type: TYPE_TB
- en: '| `hire_date` | `STRING` | Latest Joining date of Employee |'
  prefs: []
  type: TYPE_TB
- en: Departments table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `departments` table consists of basic details of every department in the
    organisation. This is further understood with this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `dept_no` | `STRING` | Department Number |'
  prefs: []
  type: TYPE_TB
- en: '| `dept_name` | `STRING` | Department Name |'
  prefs: []
  type: TYPE_TB
- en: Department manager table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `dept_manager` table has records about Employee acting as manager for a
    given department. More details are in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Dataype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INT` | Employee ID who is acting as manager for this department
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dept_no` | `STRING` | Department ID |'
  prefs: []
  type: TYPE_TB
- en: '| `from_date` | `DATE` | Starting date from which Employee is acting as Manager
    for this department. |'
  prefs: []
  type: TYPE_TB
- en: '| `to_date` | `DATE` | Ending date till where the Employee has acted as Manager
    for this department. |'
  prefs: []
  type: TYPE_TB
- en: Department Employees Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dept_emp` table consists of all the records which show how long each employee
    belonged to a department.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INT` | Employee ID |'
  prefs: []
  type: TYPE_TB
- en: '| `dept_no` | `STRING` | Department ID |'
  prefs: []
  type: TYPE_TB
- en: '| `from_date` | `DATE` | Starting date from which employee belongs to this
    department |'
  prefs: []
  type: TYPE_TB
- en: '| `to_date` | `DATE` | Last date of employee in this department |'
  prefs: []
  type: TYPE_TB
- en: Titles table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **titles** table consists of all the roles of employees from a given date
    to end date. More details are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INT` | Employee Id |'
  prefs: []
  type: TYPE_TB
- en: '| `title` | `STRING` | Designation of the employee |'
  prefs: []
  type: TYPE_TB
- en: '| `from_date` | `DATE` | Starting date from which employee has assumed this
    role |'
  prefs: []
  type: TYPE_TB
- en: '| `to_date` | `DATE` | Last date where the employee has performed this role
    |'
  prefs: []
  type: TYPE_TB
- en: Salaries table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `salaries` table consists of salary history of a given employee. More details
    are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INT` | Employee Id |'
  prefs: []
  type: TYPE_TB
- en: '| `salary` | `INT` | Salary of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `from_date` | `DATE` | Starting day for which salary is calculated |'
  prefs: []
  type: TYPE_TB
- en: '| `to_date` | `DATE` | Last day for which salary is calculated. |'
  prefs: []
  type: TYPE_TB
- en: Normalized employees table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `employee_norm` table consists of data from employees, salaries, departments,
    `dept_emp` and titles table. Lets look at this table in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Table Column** | **Datatype** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `emp_no` | `INT` | Employee ID |'
  prefs: []
  type: TYPE_TB
- en: '| `birth_date` | `DATE` | Date of Birth of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `full_name` | `STRING` | Employee Full Name |'
  prefs: []
  type: TYPE_TB
- en: '| `gender` | `STRING` | Gender of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `hire_date` | `DATE` | Joining date of Employee |'
  prefs: []
  type: TYPE_TB
- en: '| `salary` | `INT` | Salary of Employee for the period |'
  prefs: []
  type: TYPE_TB
- en: '| `from_date` | `DATE` | Salary period start |'
  prefs: []
  type: TYPE_TB
- en: '| `to_date` | `DATE` | Salary period end |'
  prefs: []
  type: TYPE_TB
- en: '| `dept_name` | `STRING` | Department where the employee is working during
    this salary period |'
  prefs: []
  type: TYPE_TB
- en: '| `title` | `STRING` | Designation of the employee during this time period
    |'
  prefs: []
  type: TYPE_TB
- en: With this knowledge of various tables in the Employee database we now have some
    understanding of the data we have so far. Now, the next task is to find out what
    types of analytics we can generate from this data. We will learn this in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Superset Slices for employees database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have some basic understanding of the type of data that is stored in
    the MySQL database. We will now see what types of we can answer from this data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uni-dimensional insights:**'
  prefs: []
  type: TYPE_NORMAL
- en: How many employees are there in the organisation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the total salary paid for all employees in the organisation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many departments are there?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi dimensional insights**'
  prefs: []
  type: TYPE_NORMAL
- en: What is the total salary paid for every year?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the total salary per department?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is the top paid employee for every year?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we think along these lines we should be able to answer very important questions
    regarding the data and should be able generate nice graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Lets take few examples of what types of visualisations we can generate in the
    coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Register MySQL database/table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start generating Slices for the employee tables, We should first register
    it. The registration process includes the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Databases by clicking on the Databases dropdown from the Sources menu
    in the top navigation bar as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ddfbcc9-a012-48e3-b287-5ba19ec18e8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this we need to click on the plus (+) icon from the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cac387f0-9a8d-4256-ac05-21b6ec2616b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take us to a page where we can register the new database. The screen
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32fa6696-267f-43c4-af46-86e6b86b2745.png)'
  prefs: []
  type: TYPE_IMG
- en: We will fill the following details as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Value** | **Description** |  |'
  prefs: []
  type: TYPE_TB
- en: '| Database | `employees` | Name of the database that we want to register. (Enter
    the same name as its in the MySQL Database) |  |'
  prefs: []
  type: TYPE_TB
- en: '| SQLAlchemy URI | `mysql+pymysql://superset:superset@master:3306/employees`
    | URI to access this database programatically. This will include the protocol/driver,
    username, password, hostname & dbname |  |'
  prefs: []
  type: TYPE_TB
- en: '| Other Fields |  | Keep them as default |  |'
  prefs: []
  type: TYPE_TB
- en: 'After this click on Save Button, which will save the database details with
    Apache Superset. We are taken to the list of tables page which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96399df1-4b77-4313-84ed-669d011ddb85.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we have the employees database registered with MySQL backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step we need to chose the tables from the top menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d624d6e5-a390-494e-9a63-9213dff650b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we do not have any tables registered, we will see a empty page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55176447-b183-47af-b93c-c208d6ed065f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to register a new table we have to click on the plus (icon) in the
    UI, Which takes us to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a54b67c3-3d25-4ca9-8727-71335bf1a2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the values for the fields as shown below and click Save once done:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Table name | `employee_norm` | Name of the table that we want to register.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Database | `employees` | Select the database that is already registered with
    Superset. |'
  prefs: []
  type: TYPE_TB
- en: 'Now we can see that the table is successfully registered as shown in the screen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81790eb0-b29e-4aa1-9927-35e994db7b02.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the important features of Superset is that it will automatically select
    the different types of operations that we can perform on the columns of the table
    according to the datatype. This drives what types of dimensions, metrics we are
    shown in the rest of the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to select these options, we need to edit the table by clicking on
    the edit icon and we are shown this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/793aa239-22f3-4b32-8810-9b5bd6c9e791.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, Apache Superset has automatically recognized the datatype of
    each and every field and it also provided us with an option to chose these dimensions
    for various activities. These activities are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Activity** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Groupable | If the checkbox is selected, then the field can be used as part
    of Grouping operations (`GROUP BY` in SQL). |'
  prefs: []
  type: TYPE_TB
- en: '| Filterable | If the checkbox is selected, then the field can be used as part
    of Conditional operations (`WHERE` clause). |'
  prefs: []
  type: TYPE_TB
- en: '| Count Distinct | If the checkbox is selected, then the field can be used
    as part of count (`DISTINCT`) operation on the field. |'
  prefs: []
  type: TYPE_TB
- en: '| Sum | If the checkbox is selected, then the field can be used as part of
    `SUM()` function. |'
  prefs: []
  type: TYPE_TB
- en: '| Min/Max | Indicates that the field can be used as part of finding minimum
    and maximum value. |'
  prefs: []
  type: TYPE_TB
- en: '| Is Temporal | Indicates the field is a time dimension. |'
  prefs: []
  type: TYPE_TB
- en: Make changes as shown above and click on Save button.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to start creating slices and dashboard in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Slices and Dashboard creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the previous sections, In order to create Dashboards we first
    need to create slices. In this section we will learn to create few slices.
  prefs: []
  type: TYPE_NORMAL
- en: Department salary breakup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this slice we will learn how to create a visualization that will show the
    percentage of salary breakdown per department:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic ** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/767c4c8e-67d2-4cb9-a705-2d344b10d236.png) | **Datasource
    & Chart Type**: select [employees].[employee_norm] as the **datasource** and Distribution
    - NVD3 - Pie Chart as chart typeIn the **Time** section, select birth_date as
    Time Column and 100 years ago as **Since** column.In the **Metrics** section,
    select sum_salary as the value from dropdown and dept_name as **Group By.** |'
  prefs: []
  type: TYPE_TB
- en: '| Graphic Output | ![](img/665462dd-38a7-469b-a8bd-ecfb036cec2e.png) | Clicking
    on Query button will render this good liking chart. Save it with the name Department
    Salary Breakup. |'
  prefs: []
  type: TYPE_TB
- en: Just like in the previous section, See how easy it is to create good looking
    graphic without any programming knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we will learn about another type of graphic from the same
    employees database.
  prefs: []
  type: TYPE_NORMAL
- en: Salary Diversity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a important graphic, where we identify how the salary diversity is between
    genders across the history of organisation. Here we use average salary as a basis
    for the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/87174669-baa2-45d8-8df5-c407e6a5d63e.png) | **Datasource
    & Chart Type**: select [employees].[employee_norm] as the datasource and Time
    Series - line chart as chart typeIn the Time section, select birth_date as Time
    Column & 100 years ago as since column.In the Metrics section, select avg_salary
    as the Metric and gender as `Group By`. |'
  prefs: []
  type: TYPE_TB
- en: '| Output | ![](img/c15c7256-324e-4b28-aea1-0c5935ffec73.png) | Graphic showing
    the average salary per Gender for every Year. Save this with the title **Salary
    Diversity** |'
  prefs: []
  type: TYPE_TB
- en: As we can see from the graphic, the salary breakup is even between genders and
    are very close. There is also a similar increase in the average salary over the
    period.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we will learn to generate another type of graphic that will
    give us different insight into the data.
  prefs: []
  type: TYPE_NORMAL
- en: Salary Change Per Role Per Year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a important statistic where we want to find out how much salary change
    is there for different Titles in the organisation across years.
  prefs: []
  type: TYPE_NORMAL
- en: '| **UI Location** | **Graphic** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Sidebar | ![](img/77e45d70-7738-40c3-9598-52ab46387de3.png) | Datasource
    & Chart Type: select [employees].[employee_norm] as the datasource and Time Series
    - Percentage Change as chart type In the Time section, Select from_date as **Time**
    column , Year as **Time Granularity** & 100 years ago as **Since** column.In the
    **Metrics** Section, select sum_salary as the **Metric** and title as **Group**
    By. |'
  prefs: []
  type: TYPE_TB
- en: '| Output | ![](img/e78d9c2b-5723-4430-9238-abfc62336bc1.png) | Clicking on
    Query, yields us the following graphic. Save this with the name **Salary Change
    Per Role Per Year**. |'
  prefs: []
  type: TYPE_TB
- en: From this graphic we can find out that few roles have very large difference
    in the total salary within the organisation.
  prefs: []
  type: TYPE_NORMAL
- en: So far we have created three slices, we will create a new dashboard with the
    slices created so far.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this step we will create a new dashboard by going to the dashboards page
    and clicking on the Add Dashboard icon (as shown in previous sections).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are presented with the following screen where we select the three slices
    we have created so far and click Save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66ae3349-1abb-46f8-a9c4-81e993e1b2ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the dashboard is saved successfully we can see it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b410d0cb-ad1e-4d4b-a76e-f519e88db039.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, Dashboards are very powerful way to express large amounts of
    data in a simple fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about data visualization and how it helps the users
    to receive the required message without any knowledge of the underlying data.
    We then saw the different ways to visualize our data graphically.
  prefs: []
  type: TYPE_NORMAL
- en: We walked through Hadoop applications such as Apache Druid and Apache Superset
    that are used to visualize data and learned how to use them with RDBMses such
    as MySQL. We also saw a sample database to help us understand the application
    better.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to build our Hadoop cluster on the cloud.
  prefs: []
  type: TYPE_NORMAL
