["```py\nconda install -c esri arcgis\n```", "```py\nconda upgrade -c esri arcgis\n```", "```py\njupyter notebook\n```", "```py\nIn: from arcgis.gis import GIS\n    my_gis = GIS()\n    my_gis.map()\n```", "```py\nIn:   import arcgis\nIn:   from arcgis.gis import GIS\n```", "```py\nIn:   gis = GIS()\n```", "```py\nIn:   map1 = gis.map('San Francisco')\n      map1\n```", "```py\nIn:   map1.zoom = 5\n```", "```py\nIn:   map1.basemap\n\nOut: 'topo'\n```", "```py\nIn:   map1.basemaps?\n```", "```py\nIn:   map1.basemaps\n\nOut: ['dark-gray',\n    'dark-gray-vector',\n    'gray', ...\n```", "```py\nIn: map1.basemap = 'satellite'\n    map1\n```", "```py\nIn: map1.extent\n\nOut: {'spatialReference': {'latestWkid': 3857, 'wkid': 102100},\n 'type': 'extent',\n 'xmax': -13505086.994526163,\n 'xmin': -13658266.799209714,\n 'ymax': 4578600.169423444,\n 'ymin': 4517450.546795281}\n```", "```py\nIn:   import arcgis\nIn:   from arcgis.gis import GIS\n      gis = GIS()\n```", "```py\nIn:   map = gis.map(\"Solano County, USA\")\n      map.zoom = 10\n      map\n```", "```py\nIn: search_result = gis.content.search(query=\"san francisco trail\", \n    item_type=\"Feature Layer\", outside_org=True)\n    search_result\n```", "```py\nOut: [<Item title:\"National Park Service - Park Unit Boundaries\"       \n     type:Feature\n     Layer Collection owner:imrgis_nps>,\n\n     <Item title:\"National Park Service - Park Unit Centroids\" \n     type:Feature Layer\n     Collection owner:imrgis_nps>,\n\n     <Item title:\"JUBA_HistoricTrail_ln\" type:Feature Layer Collection \n      owner:bweldon@nps.gov_nps>,â€¦\n```", "```py\nIn:   from IPython.display import display\n      for item in search_result:\n          display(item)\n```", "```py\nIn:   bike_trails_item = search_result[8]\n      bike_trails_item.layers\n```", "```py\nIn:   for lyr in bike_trails_item.layers:\n          print(lyr.properties.name)\n\nOut:  BikeTrails\n      Parks\n```", "```py\nIn: bike_trails_layer = bike_trails_item.layers[0]\nIn: bike_trails_layer\n```", "```py\nIn:   bike_df = bike_trails_layer.query().df\nIn:   bike_df.head()\n```", "```py\nIn:   map.add_layer(bike_trails_layer)\n      map\n```", "```py\nIn:   from arcgis.mapping import WebMap\n      wm = WebMap()\n      web_map_properties = {'title':'Bike Trails ', \n      'snippet':'This map service shows bike trails in Solano County', \n      'tags':'ArcGIS Python API'}\n      web_map_item = wm.save(item_properties=web_map_properties)\n      web_map_item\n```", "```py\nIn:   bike_trails_layer.properties\n```", "```py\nIn:   for field in bike_trails_layer.properties['fields']:\n          print(field['name'])\n\nOut: OBJECTID\n     SHAPESTLen\n     STRNAME\n      ...\n```", "```py\nIn:   bike_trails_layer.properties.extent\n\nOut:  {\n     \"xmin\": 6485543.788552672,\n     \"ymin\": 1777984.1018305123,\n     \"xmax\": 6634421.269668501,\n     \"ymax\": 1958537.218413841,\n     \"spatialReference\": {\n     \"wkid\": 102642,\n     \"latestWkid\": 2226\n      }\n    }\n```", "```py\nIn: import arcgis\n    from arcgis.gis import GIS\n    from IPython.display import display\n    gis = GIS()\n```", "```py\nIn: items = gis.content.search(\"Landsat 8 Views\", item_type=\"Imagery \n    Layer\",\n    max_items=2)\n```", "```py\nIn: for item in items:\n        display(item)\n```", "```py\nIn: l8_view = items[0]\n```", "```py\nIn: l8_view.layers\n```", "```py\nIn: l8_lyr = l8_view.layers[0]\n    l8_lyr\n```", "```py\nIn: l8_lyr.properties\n```", "```py\nIn: from IPython.display import HTML\nIn: HTML(l8_lyr.properties.description)\n```", "```py\nIn:   import pandas as pd\nIn:   pd.DataFrame(l8_lyr.key_properties()['BandProperties'])\n```", "```py\nIn: for fn in l8_lyr.properties.rasterFunctionInfos: \n        print(fn['name'])\n```", "```py\nIn: map = gis.map('Madrid, Spain')\n```", "```py\nIn: map.add_layer(l8_lyr)\n    map\n```", "```py\nIn: from arcgis.raster.functions import apply\n```", "```py\nIn: natural_color = apply(l8_lyr, 'Natural Color with DRA')\n```", "```py\nIn: map.add_layer(natural_color)\n```", "```py\nIn: agric = apply(l8_lyr, 'Agriculture')\nIn: map.add_layer(agric)\n```"]