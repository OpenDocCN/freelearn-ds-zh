["```py\nIn: import geopandas as gpd\n    df = gpd.read_file(r'C:\\data\\gdal\\NE\\10m_cultural\n    \\ne_10m_admin_0_boundary_lines_land.shp')\n    df.head()\n```", "```py\nIn: %matplotlib inline\n    df.plot(color='black')\n```", "```py\nIn: df.geom_type.head()\n\nOut: 0 LineString\n     1 LineString\n     2 MultiLineString\n     3 LineString\n     4 LineString\n     dtype: object\n```", "```py\nIn: df.crs\n\nOut: {'init': 'epsg:4326'}\n```", "```py\nIn: merc = df.to_crs({'init': 'epsg:3395'})\n    merc.plot(color='black')\n```", "```py\nIn: df.to_json()\n```", "```py\nIn: df.to_file(driver='GeoJSON',filename=r'C:\\data\\world.geojson')\n```", "```py\nIn: import fiona; fiona.supported_drivers\n```", "```py\nIn: !ogrinfo â€“-formats\n```", "```py\nIn: !ogrinfo -so \"pts\" mtbs_fod_pts_20170501\n```", "```py\nIn: !ogrinfo \"pts\" mtbs_fod_pts_20170501\n```", "```py\nIn: !ogr2ogr -f \"GeoJSON\" \"C:\\data\\output.json\"                                 \n    \"C:\\data\\mtbs_fod_pts_data\\mtbs_fod_pts_20170501.shp\"\n```", "```py\nIn:   !ogrinfo \"C:\\Users\\UserName\\Downloads\\KML_Samples.kml\" -summary\n\nOut:  Had to open data source read-only.INFO: Open of                              \n      `C:\\Users\\UserName\\Downloads\\KML_Samples.kml' using driver             \n     `KML' successful.\n        1: Placemarks (3D Point)\n        2: Highlighted Icon (3D Point)\n        3: Paths (3D Line String)\n        4: Google Campus (3D Polygon)\n        5: Extruded Polygon (3D Polygon)\n        6: Absolute and Relative (3D Polygon)\n```", "```py\nIn: from osgeo import ogr\n    source = ogr.Open(r\"C:\\data\\mtbs_fod_pts_data\\\n    mtbs_fod_pts_20170501.shp\")\n    layer = source.GetLayer()\n    schema = []\n    ldefn = layer.GetLayerDefn()\n    for n in range(ldefn.GetFieldCount()):\n        fdefn = ldefn.GetFieldDefn(n)\n        schema.append(fdefn.name)\n    print(schema)\n\nOut: ['FIRE_ID', 'FIRENAME', 'ASMNT_TYPE', 'PRE_ID', 'POST_ID', 'ND_T',      \n    'IG_T', 'LOW_T',\n    'MOD_T', 'HIGH_T', 'FIRE_YEAR', 'FIRE_MON', 'FIRE_DAY', 'LAT',          \n    'LONG', 'WRS_PATH',\n    'WRS_ROW', 'P_ACRES', 'R_ACRES', 'STATE', 'ADMIN', 'MTBS_ZONE',      \n    'GACC', \n    'HUC4_CODE','HUC4_NAME', 'Version', 'RevCode', 'RelDate',              \n    'Fire_Type']\n```", "```py\nIn: from osgeo import ogr\n  import os\n  shapefile = r\"C:\\data\\mtbs_fod_pts_data\\mtbs_fod_pts_20170501.shp\"\n  driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n  dataSource = driver.Open(shapefile, 0)\n  layer = dataSource.GetLayer()\n  for feature in layer:\n      print(feature.GetField(\"STATE\"))\n```", "```py\nIn: import os\n    from osgeo import ogr\n    daShapefile = r\"C:\\data\\mtbs_fod_pts_data\\\n    mtbs_fod_pts_20170501.shp\"\n    driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n    dataSource = driver.Open(daShapefile, 0)\n    layer = dataSource.GetLayer()\n    featureCount = layer.GetFeatureCount()\n    print(\"Number of features in %s: %d\" %                                    \n    (os.path.basename(daShapefile), featureCount))\n\nOut: Number of features in mtbs_fod_pts_20170501.shp: 20340\n```", "```py\nIn: from osgeo import ogr, osr\n   driver = ogr.GetDriverByName('ESRI Shapefile')\n    dataset = driver.Open(r\"C:\\data\\mtbs_fod_pts_data\\\n    mtbs_fod_pts_20170501.shp\")\n    # Option 1: from Layer\n    layer = dataset.GetLayer()\n    spatialRef = layer.GetSpatialRef()\n    print(spatialRef)\n    # Option 2: from Geometry\n    feature = layer.GetNextFeature()\n    geom = feature.GetGeometryRef()\n    spatialRef2 = geom.GetSpatialReference()\n    print(spatialRef2)\n\nOut: GEOGCS[\"GCS_North_American_1983\",                                                       \n     DATUM[\"North_American_Datum_1983\",                                             \n     SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],                                   \n     PRIMEM[\"Greenwich\",0.0],\n     UNIT[\"Degree\",0.0174532925199433]]\n```", "```py\nIn: from osgeo import ogr\n    import os\n    shapefile = r\"C:\\data\\mtbs_fod_pts_data\\mtbs_fod_pts_20170501.shp\"\n    driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n    dataSource = driver.Open(shapefile, 0)\n    layer = dataSource.GetLayer()\n    for feature in layer:\n        geom = feature.GetGeometryRef()                                    \n    print(geom.Centroid().ExportToWkt())\n```", "```py\nIn: import rasterio    \n    dataset = rasterio.open(r\"C:\\data\\gdal\\NE\\50m_raster\\NE1_50M_SR_W\n    \\NE1_50M_SR_W.tif\")\n```", "```py\nIn: dataset.count\nOut: 3\n```", "```py\nIn: dataset.width\nOut: 10800\n```", "```py\nIn:  dataset.height\nOut: 5400\n```", "```py\nIn:  dataset.bounds\nOut: BoundingBox(left=-179.99999999999997, bottom=-89.99999999998201,\n     right=179.99999999996405, top=90.0)\n```", "```py\nIn:  dataset.crs\nOut: CRS({'init': 'epsg:4326'})\n```", "```py\nIn:   band1 = dataset.read(1)\n      band1\nOut:  array([[124, 124, 124, ..., 124, 124, 124], ...\n```", "```py\nIn: %matplotlib inline\n    from matplotlib import pyplot\n    pyplot.imshow(dataset.read(1))\n    pyplot.show()\n```", "```py\nIn: !gdalinfo --formats\n```", "```py\nIn: !gdalinfo \"C:\\data\\gdal\\NE\\50m_raster\\NE1_50M_SR_W\n    \\NE1_50M_SR_W.tif\"\n\nOut: Driver: GTiff/GeoTIFF\n     Files: C:\\data\\gdal\\NE\\50m_raster\\NE1_50M_SR_W\\NE1_50M_SR_W.tif\n     Size is 10800, 5400\n     Coordinate System is:\n     GEOGCS[\"WGS 84\",\n     DATUM[\"WGS_1984\", ...\n```", "```py\nIn: !gdal_translate -of JPEG \n    \"C:\\data\\gdal\\NE\\50m_raster\\NE1_50M_SR_W\\NE1_50M_SR_W.tif\" \n    NE1_50M_SR_W.jpg\n\nOut: Input file size is 10800, 5400\n     0...10...20...30...40...50...60...70...80...90...100 - done.\n```", "```py\nIn: !gdalinfo                                                             \n    \"C:\\Users\\UserName\\Downloads\\gdal_sample_v1.2_no_extensions.gpkg\"\n\nOut: Driver: GPKG/GeoPackageFiles:\n     C:\\Users\\UserName\\Downloads\\gdal_sample_v1.2_no_extensions.gpkg\n    Size is 512, 512\n    Coordinate System is''\n   ...\n```", "```py\nIn: !gdalinfo http://server.arcgisonline.com/ArcGIS/rest/services/\n    World_Imagery/MapServer?f=json&pretty=true\n```"]