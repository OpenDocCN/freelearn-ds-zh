["```py\n    jupyter notebook\n\n    ```", "```py\n    >>> imdb_ratings = pd.read_csv('movies.csv')\n\n    ```", "```py\n    >>> imdb_ratings.head()\n\n    ```", "```py\n    >>> imdb_ratings.tail(15)\n\n    ```", "```py\n    >>> imdb_ratings.describe()\n\n    ```", "```py\n    >>> imdb_ratings.columns\n\n    ```", "```py\n    >>> imdb_ratings.dtypes\n\n    ```", "```py\n    >>> imdb_ratings.year.head()\n\n    ```", "```py\n    >>> imdb_ratings['year'].head()\n\n    ```", "```py\n>>> imdb_ratings.value_counts()\n\n```", "```py\n>>> imdb_ratings.year.value_counts().sort_index(ascending=False)\n\n```", "```py\n>>> imdb_ratings[(imdb_ratings.year > 1999) & (imdb_ratings.mpaa == 'R')].head()\n\n```", "```py\n>>> imdb_ratings.groupby('year').rating.aggregate([np.mean,np.std])\n\n```", "```py\n>>>imdb_ratings['genre']=imdb_ratings[['Action','Animation','Comedy','Drama','Documentary','Romance']].idxmax(1)\n\n```", "```py\n>>> imdb_ratings['genre'].head()\n\n```", "```py\n>>> genres_map = {\"Action\": 'red', \"Animation\": 'blue', \"Comedy\": 'yellow', \"Drama\": 'green', \"Documentary\": 'orange', \"Romance\": 'purple'}\n>>> imdb_ratings['genre_color'] = imdb_ratings['genre'].apply(lambda x: genres_map[x])\n\n```", "```py\n>>> imdb_ratings['genre_color'].head()\n\n```", "```py\n>>>pd.pivot_table(imdb_ratings,values='rating',index='year',columns=['genre'],aggfunc=np.mean)\n\n```", "```py\n>>> imdb_ratings.length.plot()\n\n```", "```py\n>>> matplotlib.style.use('ggplot')\n>>> imdb_ratings.length.plot()\n\n```", "```py\n>>> plot1 = imdb_ratings.groupby('genre').length.plot(kind='kde',xlim=(0,120),legend='genre')\n>>>plot1[0].set_xlabel('Number of Minutes')\n>>>plot1[0].set_title('Distribution of Films by Runtime Minutes')\n\n```", "```py\n>>> plot2 = imdb_ratings.groupby('genre').rating.plot(kind='kde',xlim=(0,10),legend='genre')\n>>> plot2[0].set_xlabel('Ratings')\n>>> plot2[0].set_title('Distribution of Ratings')\n\n```", "```py\n>>> pd.pivot_table(imdb_ratings,values='rating',index='title',columns=['genre']).\\\nplot(kind='box',by='genre').\\\nset_ylabel('Rating')\n\n```", "```py\n>>> from pandas.tools.plotting import scatter_matrix\n>>> scatter_matrix(imdb_ratings[['year','length','budget','rating','votes']], alpha=0.2, figsize=(6, 6), diagonal='kde')\n\n```", "```py\n>>> fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(15,15))\n>>> row = 0\n>>> col = 0\n>>> for index, genre in imdb_ratings.groupby('genre'):\n…    if row > 2:\n…        row = 0\n…       col += 1\n…    genre.groupby('genre').\\\n....plot(ax=axes[row,col],kind='scatter',x='length',y='rating',s=np.sqrt(genre['votes']),c=genre['genre_color'],xlim=(0,120),ylim=(0,10),alpha=0.5,label=index)\n…    row += 1\n\n```", "```py\n>>> oil_prices = pd.read_csv('oil.csv')\n>>> oil_prices.tail()\n\n```", "```py\n>>> oil_prices = oil_prices[~np.isnan(oil_prices[oil_prices.columns[1]])] \n\n```", "```py\n>>> oil_prices.dtypes\n\n```", "```py\n>>> oil_prices = oil_prices.convert_objects(convert_dates='coerce')\n\n```", "```py\n>>> oil_prices.rename(columns = {oil_prices.columns[1]: 'Oil_Price_1997_Dollars'},inplace=True)\n\n```", "```py\n>>> oil_prices.plot(x='Year',y='Oil_Price_1997_Dollars')\n\n```", "```py\n>>> from pandas.tools.plotting import lag_plot\n>>> lag_plot(oil_prices.Oil_Price_1997_Dollars)\n\n```", "```py\n>>> from pandas.tools.plotting import autocorrelation_plot\n>>> autocorrelation_plot(oil_prices['Oil_Price_1997_Dollars'])\n\n```", "```py\n>>> car_crashes=pd.read_csv(\"car_crashes.csv\")\n>>> car_crashes.Year=car_crashes.Year.astype(str)\n>>> car_crashes=car_crashes.convert_objects(convert_dates='coerce') \n\n```", "```py\n>>> car_crashes['Car_Crash_Fatalities_US']=car_crashes['Car_Crash_Fatalities_US']/1000\n\n```", "```py\n>>> oil_prices_car_crashes = pd.merge(oil_prices,car_crashes,on='Year')\n>>> oil_prices_car_crashes.plot(x='Year')\n\n```", "```py\n>>> autocorrelation_plot(oil_prices_car_crashes[['Car_Crash_Fatalities_US','Oil_Price_1997_Dollars']])\n\n```", "```py\n>>> import GeoPandas as geo.\n\n```", "```py\n>>> africa_map = geo.GeoDataFrame.from_file('Africa_SHP/Africa.shp')\n\n```", "```py\n>>> africa_map.plot(column='CODE')\n\n```", "```py\n>>> africa_populations = pd.read_csv('Africa_populations.tsv',sep='\\t')\n\n```", "```py\n>>> africa_map = pd.merge(africa_map,africa_populations,left_on='COUNTRY',right_on='Country_Name')\n\n```", "```py\n>>> africa_map.plot(column='Population',colormap='hot')\n\n```", "```py\n>>> sc = SparkContext('local','job_.{0}'.format(uuid.uuid4()))\n\n```", "```py\n>>> sc.stop()\n\n```", "```py\n>>> sqlContext = SQLContext(sc)\n\n```", "```py\n>>> data = pd.read_csv(\"movies.csv\")\n>>> rdd_data = sc.parallelize([ list(r)[2:-1] for r in data.itertuples()])\n\n```", "```py\n>>> rdd_data.getNumPartitions()\n\n```", "```py\n>>> rdd_data.repartition(10).getNumPartitions() \n>>> rdd_data.coalesce(2).getNumPartitions()\n\n```", "```py\nrdd_data.take(5)\n\n```", "```py\n>>> rdd_data.map( lambda x: json.JSONEncoder().encode({ str(k):str(v) for (k,v) in zip(data.columns[2:-1],x)})).\\\n>>> saveAsTextFile('movies.json')\n\n```", "```py\n>>> df = sqlContext.read.json(\"movies.json\")\n\n```", "```py\n>>> df.cache()\n\n```", "```py\n>>> df.registerTempTable('movies')\n\n```", "```py\n>>> sqlContext.sql(' select * from movies limit 5 ').show()\n\n```", "```py\n>>> df.groupby('year').count().collect()\n\n```", "```py\n>>> df.year\n\n```", "```py\n>>> df.collect()[0].get(0)\n\n```", "```py\n>>> rdd_data = df.rdd\n\n```", "```py\n>>> df.toPandas()\n\n```"]