["```py\n    dist, index = mp(ta, windowSize)\n    print(dist)\n    print(index)\n```", "```py\ndef mp(ts, window):\n    l = len(ts) - window + 1\n    dist = [None] * l\n    index = [None] * l\n    for i1 in range(l):\n        t1 = ts[i1:i1+window]\n        min = None\n        minIndex = 0\n        exclusionMin = i1 - window // 4\n        if exclusionMin < 0:\n            exclusionMin = 0\n        exclusionMax = i1 + window // 4\n        if exclusionMax > l-1:\n            exclusionMax = l-1\n```", "```py\n        for i2 in range(l):\n            # Exclusion zone\n            if i2 >= exclusionMin and i2 <= exclusionMax:\n                continue\n            t2 = ts[i2:i2+window]\n            temp = round(euclidean(t1, t2), 3)\n            if min == None:\n                min = temp\n                minIndex = i2\n            elif min > temp:\n                min = temp\n                minIndex = i2\n        dist[i1] = min\n        index[i1] = minIndex\n    return dist, index\n```", "```py\n$ ./mp.py ../ch06/ts.gz -w 16\nTS: ../ch06/ts.gz Sliding Window size: 16\n[3.294, 3.111, 3.321, 3.535, 3.285, 3.373, 3.332, 3.693, 4.066, 4.065, 3.898, 3.484, 3.372, 3.1, 3.047, 3.299, 3.056, 3.361, 3.766, 3.759, 3.871, 3.884, 3.619, 3.035, 2.358, 3.012, 3.052, 3.136, 3.161, 3.219, 3.309, 3.526, 3.386, 3.973, 4.207, 4.101, 4.249, 4.498, 4.492, 4.255, 4.241, 3.285, 3.517, 3.494, 3.257, 3.316, 3.526, 4.183, 4.011, 3.294, 3.111, 3.321, 3.535, 3.1, 3.047, 3.332, 3.035, 2.358, 3.012, 3.052, 3.136, 3.161, 3.219, 3.201, 3.187, 3.017, 2.676, 2.763, 2.959, 3.952, 3.865, 3.678, 3.687, 3.201, 3.187, 3.017, 2.676, 2.763, 2.959, 3.316, 3.526, 3.899, 3.651, 3.664, 3.885]\n[49, 50, 51, 52, 53, 54, 55, 56, 57, 46, 65, 27, 28, 53, 54, 74, 75, 76, 77, 59, 60, 61, 55, 56, 57, 58, 59, 60, 61, 62, 14, 15, 16, 66, 71, 68, 69, 56, 20, 63, 26, 75, 66, 67, 78, 79, 80, 81, 82, 0, 1, 2, 3, 13, 14, 6, 23, 24, 25, 26, 27, 28, 29, 73, 74, 75, 76, 77, 78, 79, 80, 61, 62, 63, 64, 65, 66, 67, 68, 45, 46, 62, 63, 64, 65]\n--- 0.36465 seconds ---\n```", "```py\n$ ./mp.py ../ch06/ts.gz -w 32\nTS: ../ch06/ts.gz Sliding Window size: 32\n[4.976, 5.131, 5.38, 5.485, 5.636, 5.75, 5.87, 6.076, 6.502, 6.705, 6.552, 6.145, 6.279, 6.599, 6.766, 6.667, 6.577, 6.429, 6.358, 6.358, 5.978, 5.804, 5.588, 5.092, 4.976, 5.01, 5.35, 5.456, 6.036, 6.082, 6.258, 6.513, 6.556, 6.553, 6.672, 6.745, 6.767, 6.777, 7.018, 7.12, 6.564, 6.203, 6.291, 6.118, 6.048, 5.869, 6.142, 6.431, 6.646, 4.976, 5.131, 5.38, 5.485, 5.636, 5.75, 5.588, 5.092, 4.976, 5.01, 5.35, 5.456, 6.036, 6.082, 6.258, 6.513, 6.556, 6.598, 6.518, 6.473]\n[49, 50, 51, 52, 53, 54, 55, 56, 24, 58, 24, 25, 26, 27, 63, 64, 65, 55, 56, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 62, 63, 0, 65, 67, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17, 57, 59]\n--- 0.22118 seconds ---\n```", "```py\n$ ./mp.py ../ch06/ts.gz -w 64\nTS: ../ch06/ts.gz Sliding Window size: 64\n[10.529, 10.406, 10.475, 10.377, 10.702, 10.869, 10.793, 10.827, 10.743, 11.14, 10.865, 10.819, 10.876, 10.808, 10.802, 10.73, 10.713, 10.67, 11.288, 11.296, 11.113, 11.202, 11.196, 11.121, 11.033, 11.145, 11.228, 11.125, 11.108, 10.865, 10.819, 10.671, 10.702, 10.529, 10.406, 10.475, 10.377]\n[33, 34, 35, 36, 32, 33, 34, 35, 36, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 0, 10, 11, 3, 4, 0, 1, 2, 3]\n--- 0.03179 seconds ---\n```", "```py\n$ ../ch01/synthetic_data.py 25000 -5 5 > 25k\n$ gzip 25k\n```", "```py\n$ ./mp.py -w 16 25k.gz\n--- 43707.95353 seconds ---\n$ ./mp.py -w 32 25k.gz\n--- 44162.44419 seconds ---\n$ ./mp.py -w 64 25k.gz\n--- 45113.62417 seconds ---\n```", "```py\n$ ./mp.py -w 2048 25k.gz\n--- 46271.63763 seconds ---\n```", "```py\n#!/usr/bin/env python\nimport pandas as pd\nimport argparse\nimport time\nimport stumpy\nimport numpy as np\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-w\", \"--window\", dest = \"window\",\n        default = \"16\", help=\"Sliding Window\", type=int)\n    parser.add_argument(\"TS\")\n    args = parser.parse_args()\n    windowSize = args.window\n    inputTS = args.TS\n    print(\"TS:\", inputTS, \"Sliding Window size:\",\n        windowSize)\n    start_time = time.time()\n    ts = pd.read_csv(inputTS, names=['values'],\n        compression='gzip')\n    ts_numpy = ts.to_numpy()\n    ta = ts_numpy.reshape(len(ts_numpy))\n    realMP = stumpy.stump(ta, windowSize)\n    realDistances = realMP[:,0]\n    realIndexes = realMP[:,1]\n    print(\"--- %.5f seconds ---\" % (time.time() –\n        start_time))\n    print(realDistances)\n    print(realIndexes)\nif __name__ == '__main__':\n    main()\n```", "```py\n$ ./realMP.py ../ch06/ts.gz -w 64\nTS: ../ch06/ts.gz Sliding Window size: 64\n--- 11.31371 seconds ---\n[10.5292 10.40594 10.47460 10.3770 10.7024 10.8689 10.7928\n 10.8274 10.74260 11.140 10.864 10.818 10.8757 10.8078\n 10.8017 10.7296 10.7129 10.6704\n 11.2882 11.2963 11.1125 11.2019 11.19556 11.1206\n 11.0330 11.14458 11.22779 11.12475\n 11.10825 10.864619 10.8186 10.6714\n 10.7024 10.52926 10.40594 10.4746 10.3770]\n[33 34 35 36 32 33 34 35 36 28 29 30 31 32 33 34 35 36 0 1 2 3 4 5 6 7 8 8 0 10 11 3 4 0 1 2 3]\n```", "```py\n$ taskset --cpu-list 0 ./realMP.py 25k.gz -w 1024\nTS: 25k.gz Sliding Window size: 1024\n--- 11.19547 seconds ---\n[42.41325061659 42.4212959655 42.45021115618 ...\n 42.64248908665 42.64380072599 42.6591584368]\n[10218 10219 10220 ... 7240 7241 20243]\n```", "```py\n$ ./realMP.py 25k.gz -w 1024\nTS: 25k.gz Sliding Window size: 1024\n--- 9.68259 seconds ---\n[42.41325061659 42.4212959655 42.45021115618 ...\n 42.64248908665 42.64380072599 42.6591584368]\n[10218 10219 10220 ... 7240 7241 20243]\n```", "```py\n$ taskset --cpu-list 0 ./realMP.py ../ch06/100k.gz -w 1024\nTS: ../ch06/100k.gz Sliding Window size: 1024\n--- 44.45451 seconds ---\n[42.0661718111 42.044733861 42.050637591 ...\n 42.252694931 42.225343182 42.2147590858]\n[51861 51862 51863 ... 13502 13503 13504]\n```", "```py\n$ taskset --cpu-list 0 ./realMP.py ../ch04/500k.gz -w 1024\nTS: ../ch04/500k.gz Sliding Window size: 1024\n--- 1229.49608 seconds ---\n[41.691930926 41.689248432 41.642429848 ...\n 41.712625718 41.6520521157 41.636642904]\n[446724 446725 446726 ... 260568 260569 260570]\n```", "```py\ndef approximateMP(ts_numpy):\n    ISAX = isax.iSAX()\n    length = len(ts_numpy)\n    windowSize = variables.slidingWindowSize\n    segments = variables.segments\n    # Split sequence into subsequences\n    for i in range(length - windowSize + 1):\n        ts = ts_numpy[i:i+windowSize]\n        ts_node = isax.TS(ts, segments)\n        ts_node.index = i\n        ISAX.insert(ts_node)\n    vDist = [None] * (length - windowSize + 1)\n    vIndex = [None] * (length - windowSize + 1)\n    nSubsequences = length - windowSize + 1\n```", "```py\nfor k in ISAX.ht:\n        t = ISAX.ht[k]\n        if t.terminalNode == False:\n            continue\n        # I is the index of the subsequence\n        # in the terminal node\n        for i in range(t.nTimeSeries()):\n            # This is the REAL index of the subsequence\n            # in the time series\n            idx = t.children[i].index\n            # This is the subsequence that we are examining\n            currentTS = t.children[i].ts\n            exclusionMin = idx–- windowSize // 4\n            if exclusionMin < 0:\n                exclusionMin = 0\n            exclusionMax = idx + windowSize // 4\n            if exclusionMax > nSubsequences-1:\n                exclusionMax = nSubsequences-1\n            min = None\n            minIndex = 0\n```", "```py\n           for sub in range(t.nTimeSeries()):\n                # This is the REAL index of the subsequence\n                # we are examining in the time series\n                currentIdx = t.children[sub].index\n                if currentIdx >= exclusionMin and currentIdx <= exclusionMax:\n                    continue\n                temp = round(tools.euclidean(currentTS,\n                    t.children[sub].ts), 3)\n                if min == None:\n                    min = temp\n                    minIndex = currentIdx\n                elif min > temp:\n                    min = temp\n                    minIndex = currentIdx\n```", "```py\n            # Pick left limit first, then the right limit\n            if min == None:\n                if exclusionMin-1 > 0:\n                    randomSub = ts_numpy[exclusionMin-\n                        1:exclusionMin+windowSize-1]\n                    vDist[idx] = round(tools.euclidean(\n                        currentTS, randomSub), 3)\n                    vIndex[idx] = exclusionMin - 1\n                else:\n                    randomSub = ts_numpy[exclusionMax+\n                        1:exclusionMax+windowSize+1]\n                    vDist[idx] = round(tools.euclidean(\n                        currentTS, randomSub), 3)\n                    vIndex[idx] = exclusionMax + 1\n            else:\n                vDist[idx] = min\n                vIndex[idx] = minIndex\n    return vIndex, vDist\n```", "```py\ndef RMSE(realV, approximateV):\n    diffrnce = np.subtract(realV, approximateV)\n    sqre_err = np.square(diffrnce)\n    rslt_meansqre_err = sqre_err.mean()\n    error = math.sqrt(rslt_meansqre_err)\n    return error\n```", "```py\n    # Real Matrix Profile\n    TSreshape = ts_numpy.reshape(len(ts_numpy))\n    realMP = stumpy.stump(TSreshape, windowSize)\n    realDistances = realMP[:,0]\n    # Approximate Matrix Profile\n    _, vDist = approximateMP(ts_numpy)\n    rmseError = RMSE(realDistances, vDist)\n    print(\"Error =\", rmseError)\n```", "```py\n$ ./rmse.py -w 32 -s 4 -t 500 -c 16 25k.gz\nMax Cardinality: 16 Segments: 4 Sliding Window: 32 Threshold: 500 Default Promotion: False\nError = 10.70823863253679\n```", "```py\n$ ./rmse.py -w 32 -s 4 -t 1500 -c 16 25k.gz\nMax Cardinality: 16 Segments: 4 Sliding Window: 32 Threshold: 1500 Default Promotion: False\nError = 9.996114543048341\n```", "```py\nTypeError: unsupported operand type(s) for -: 'float' and 'NoneType'\n```", "```py\ndef mpdist(ts1, ts2, window):\n    L_AB = JOIN(ts1, ts2, window)\n    L_BA = JOIN(ts2, ts1, window)\n    JABBA = L_AB + L_BA\n    JABBA.sort()\n    index = int(0.05 * (len(JABBA) + 2 * window)) + 1\n    return JABBA[index]\n```", "```py\ndef JOIN(ts1, ts2, window):\n    LIST = []\n    l1 = len(ts1) - window + 1\n    l2 = len(ts2) - window + 1\n    for i1 in range(l1):\n        t1 = ts1[i1:i1+window]\n        min = round(euclidean(t1, ts2[0:window]), 4)\n        for i2 in range(1, l2):\n            t2 = ts2[i2:i2+window]\n            temp = round(euclidean(t1, t2), 4)\n            if min > temp:\n                min = temp\n        LIST.append(min)\n    return LIST\n```", "```py\n$ ../ch01/synthetic_data.py 10000 -5 5 > 10k1\n$ ../ch01/synthetic_data.py 10000 -5 5 > 10k2\n$ gzip 10k1; gzip 10k2\n```", "```py\n$ ./mpdist.py 10k1.gz 10k2.gz -w 128\n--- 12026.64167 seconds ---\nMPdist: 12.5796\n```", "```py\n$ ./mpdist.py 10k1.gz 10k2.gz -w 2048\n--- 9154.55179 seconds ---\nMPdist: 60.7277\n```", "```py\n$ taskset --cpu-list 0 ../ch01/mpdistance.py 10k1.gz 10k2.gz 128\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 128\n--- 10.28342 seconds ---\nMPdist: 12.5790\n$ taskset --cpu-list 0 ../ch01/mpdistance.py 10k1.gz 10k2.gz 2048\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 2048\n--- 10.03479 seconds ---\nMPdist: 60.7277\n```", "```py\n$ taskset --cpu-list 0,1,2,3 ../ch01/mpdistance.py 10k1.gz 10k2.gz 128\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 128\n--- 9.42861 seconds ---\nMPdist: 12.5790\n$ taskset --cpu-list 0,1,2,3 ../ch01/mpdistance.py 10k1.gz 10k2.gz 2048\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 2048\n--- 9.33578 seconds ---\nMPdist: 60.7277\n```", "```py\n$ ../ch01/mpdistance.py 10k1.gz 10k2.gz 128\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 128\n--- 9.54642 seconds ---\nMPdist: 12.5790\n$ ../ch01/mpdistance.py 10k1.gz 10k2.gz 2048\nTS1: 10k1.gz TS2: 10k2.gz Window Size: 2048\n--- 9.33648 seconds ---\nMPdist: 60.7277\n```", "```py\n    # We search iSAX2 for the NN of the\n    # subsequences from TS1\n    for idx in range(0, len(ts1)-windowSize+1):\n        currentQuery = ts1[idx:idx+windowSize]\n        t = NN(i2, currentQuery)\n        if t != None:\n            ED.append(t)\n    # We search iSAX1 for the NN of the\n    # subsequences from TS2\n    for idx in range(0, len(ts2)-windowSize+1):\n        currentQuery = ts2[idx:idx+windowSize]\n        t = NN(i1, currentQuery)\n        if t != None:\n            ED.append(t)\n    ED.sort()\n    idx = int(0.05 * ( len(ED) + 2 * windowSize)) + 1\n    print(\"Approximate MPdist:\", round(ED[idx], 3))\n```", "```py\ndef NN(ISAX, q):\n    ED = None\n    segments = variables.segments\n    threshold = variables.threshold\n    # Create TS Node\n    qTS = isax.TS(q, segments)\n    segs = [1] * segments\n    # If the relevant child of root is not there\n    # we have a miss\n    lower_cardinality = tools.lowerCardinality(segs, qTS)\n    lower_cardinality_str = \"\"\n    for i in lower_cardinality:\n        lower_cardinality_str=lower_cardinality_str+\"_\"+i\n    lower_cardinality_str = lower_cardinality_str[1:len(\n        lower_cardinality_str)]\n    if ISAX.ht.get(lower_cardinality_str) == None:\n        return None\n```", "```py\n    # Otherwise, we have a hit\n    n = ISAX.ht.get(lower_cardinality_str)\n    while n.terminalNode == False:\n        left = n.left\n        right = n.right\n        leftSegs = left.word.split('_')\n        # Promote\n        tempCard = tools.promote(qTS, leftSegs)\n        if tempCard == left.word:\n            n = left\n        elif tempCard == right.word:\n            n = right\n```", "```py\n    # Iterate over the subsequences of the terminal node\n    for i in range(0, threshold):\n        child = n.children[i]\n        if type(child) == isax.TS:\n            distance = tools.euclidean(normalize(child.ts),\n                normalize(qTS.ts))\n            if ED == None:\n                ED = distance\n            if ED > distance:\n                ED = distance\n        else:\n            break\n    return ED\n```", "```py\n    # Join the two iSAX indexes\n    Join(i1, i2)\n    variables.ED.sort()\n    print(\"variables.ED length:\", len(variables.ED))\n    # Index\n    idx = int(0.05*(len(variables.ED) + 2*windowSize))+1\n    print(\"Approximate MPdist:\", variables.ED[idx])\n```", "```py\n$ ./apprMPdist.py 10k1.gz 10k2.gz -s 3 -c 64 -t 500 -w 120\nMax Cardinality: 64 Segments: 3 Sliding Window: 120 Threshold: 500 Default Promotion: False\nMPdist: 351.27 seconds\nApproximate MPdist: 12.603\n```", "```py\n$ ./apprMPdist.py 10k1.gz 10k2.gz -s 3 -c 64 -t 500 -w 300\nMax Cardinality: 64 Segments: 3 Sliding Window: 300 Threshold: 500 Default Promotion: False\nMPdist: 384.74 seconds\nApproximate MPdist: 21.757\n```", "```py\n$ ./joinMPdist.py 10k1.gz 10k2.gz -s 3 -c 64 -t 500 -w 120\nMax Cardinality: 64 Segments: 3 Sliding Window: 120 Threshold: 500 Default Promotion: False\nMPdist: 37.70 seconds\nvariables.ED length: 17605\nApproximate MPdist: 12.60282\n```", "```py\n$ ./joinMPdist.py 10k1.gz 10k2.gz -s 3 -c 64 -t 500 -w 300\nMax Cardinality: 64 Segments: 3 Sliding Window: 300 Threshold: 500 Default Promotion: False\nMPdist: 31.24 seconds\nvariables.ED length: 13972\nApproximate MPdist: 21.76263\n```", "```py\n$ ./apprMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 120\nMax Cardinality: 32 Segments: 6 Sliding Window: 120 Threshold: 500 Default Promotion: False\nMPdist: 19329.64 seconds\nApproximate MPdist: 12.405\n$ ./apprMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 600\nMax Cardinality: 64 Segments: 6 Sliding Window: 600 Threshold: 500 Default Promotion: False\nMPdist: 21219.60 seconds\nApproximate MPdist: 31.871\n$ ./apprMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 1200\nMax Cardinality: 64 Segments: 6 Sliding Window: 1200 Threshold: 500 Default Promotion: False\nMPdist: 23120.07 seconds\nApproximate MPdist: 46.279\n```", "```py\n$ ./joinMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 120\nMax Cardinality: 64 Segments: 6 Sliding Window: 120 Threshold: 500 Default Promotion: False\nMPdist: 2595.92 seconds\nvariables.ED length: 910854\nApproximate MPdist: 12.40684\n$ ./joinMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 600;\nMax Cardinality: 64 Segments: 6 Sliding Window: 600 Threshold: 500 Default Promotion: False\nMPdist: 2270.72 seconds\nvariables.ED length: 798022\nApproximate MPdist: 31.88064\n$ ./joinMPdist.py ../ch05/500k.gz ../ch05/506k.gz -s 6 -c 64 -t 500 -w 1200\nMax Cardinality: 64 Segments: 6 Sliding Window: 1200 Threshold: 500 Default Promotion: False\nMPdist: 2145.76 seconds\nvariables.ED length: 674777\nApproximate MPdist: 46.29538\n```", "```py\n$ taskset --cpu-list 0 ../ch01/mpdistance.py ../ch05/500k.gz ../ch05/506k.gz 120\nTS1: ../ch05/500k.gz TS2: ../ch05/506k.gz Window Size: 120\n500000 506218\n--- 4052.73237 seconds ---\nMPdist: 11.4175\n$ taskset --cpu-list 0 ../ch01/mpdistance.py ../ch05/500k.gz ../ch05/506k.gz 600\nTS1: ../ch05/500k.gz TS2: ../ch05/506k.gz Window Size: 600\n500000 506218\n--- 4042.52154 seconds ---\nMPdist: 30.7796\n$ taskset --cpu-list 0 ../ch01/mpdistance.py ../ch05/500k.gz ../ch05/506k.gz 1200\nTS1: ../ch05/500k.gz TS2: ../ch05/506k.gz Window Size: 1200\n500000 506218\n--- 4045.72392 seconds ---\nMPdist: 45.1887\n```"]