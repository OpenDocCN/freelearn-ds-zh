["```py\ndocker run -p 8888:8888 -v 'pwd':/notebooks -it rcshubhadeep/packt-data-wrangling-base:latest\n```", "```py\n    big_list_of_numbers = [1 for x in range(0, 10000000)]\n    ```", "```py\n    from sys import getsizeof\n    getsizeof(big_list_of_numbers)\n    ```", "```py\n    from itertools import repeat\n    small_list_of_numbers = repeat(1, times=10000000)\n    getsizeof(small_list_of_numbers)\n    ```", "```py\n    for i, x in enumerate(small_list_of_numbers): \n        print(x)\n        if i > 10:\n            break\n    ```", "```py\n    from itertools import (permutations, combinations, dropwhile, repeat,\n    zip_longest)\n    permutations?\n    combinations?\n    dropwhile?\n    repeat?\n    zip_longest?\n    ```", "```py\n    stack = []\n    ```", "```py\n    stack.append(25)\n    stack\n    ```", "```py\n    [25]\n    ```", "```py\n    stack.append(-12)\n    stack\n    ```", "```py\n    [25, -12]\n    ```", "```py\n    tos = stack.pop()tos\n    ```", "```py\n    -12\n    ```", "```py\n    stack.append(\"Hello\")\n    stack\n    ```", "```py\n    [25, 'Hello']\n    ```", "```py\n    def stack_push(s, value):\n        return s + [value]\n    def stack_pop(s):\n        tos = s[-1]\n        del s[-1]\n        return tos\n    url_stack = []\n    ```", "```py\n    wikipedia_datascience = \"Data science is an interdisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge [https://en.wikipedia.org/wiki/Knowledge] and insights from data [https://en.wikipedia.org/wiki/Data] in various forms, both structured and unstructured,similar to data mining [https://en.wikipedia.org/wiki/Data_mining]\"\n    ```", "```py\n    len(wikipedia_datascience)\n    ```", "```py\n    347\n    ```", "```py\n    wd_list = wikipedia_datascience.split()\n    len(wd_list)\n    ```", "```py\n    34\n    ```", "```py\n    for word in wd_list:\n        if word.startswith(\"[https://\"):\n            url_stack = stack_push(url_stack, word[1:-1])  \n    # Notice the clever use of string slicing\n    ```", "```py\n    url_stack\n    ```", "```py\n    ['https://en.wikipedia.org/wiki/Knowledge',\n     'https://en.wikipedia.org/wiki/Data',\n     'https://en.wikipedia.org/wiki/Data_mining']\n    ```", "```py\n    for i in range(0, len(url_stack)):\n        print(stack_pop(url_stack))\n    ```", "```py\n    print(url_stack)\n    ```", "```py\n    []\n    ```", "```py\n    import math\n    ```", "```py\n    def my_sine():\n        return lambda x: math.sin(math.radians(x))\n    def my_cosine():\n        return lambda x: math.cos(math.radians(x))\n    ```", "```py\n    sine = my_sine()\n    cosine = my_cosine()\n    math.pow(sine(30), 2) + math.pow(cosine(30), 2)\n    ```", "```py\n    1.0\n    ```", "```py\n    capitals = [(\"USA\", \"Washington\"), (\"India\", \"Delhi\"), (\"France\", \"Paris\"), (\"UK\", \"London\")]\n    capitals\n    ```", "```py\n    [('USA', 'Washington'),\n     ('India', 'Delhi'),\n     ('France', 'Paris'),\n     ('UK', 'London')]\n    ```", "```py\n    capitals.sort(key=lambda item: item[1])\n    capitals\n    ```", "```py\n    [('India', 'Delhi'),\n     ('UK', 'London'),\n     ('France', 'Paris'),\n     ('USA', 'Washington')]\n    ```", "```py\n    list_of_words = [\"Hello\", \"there.\", \"How\", \"are\", \"you\", \"doing?\"]\n    ```", "```py\n    check_for = [\"How\", \"are\"]\n    ```", "```py\n    all(w in list_of_words for w in check_for)\n    ```", "```py\n    True\n    ```", "```py\n    %%time\n    queue = []\n    for i in range(0, 100000):\n        queue.append(i)\n    print(\"Queue created\")\n    ```", "```py\n    Queue created\n    Wall time: 11 ms\n    ```", "```py\n    for i in range(0, 100000):\n        queue.pop(0)\n    print(\"Queue emptied\")\n    ```", "```py\n    Queue emptied\n    ```", "```py\n    %%time\n    from collections import deque\n    queue2 = deque()\n    for i in range(0, 100000):\n        queue2.append(i)\n    print(\"Queue created\")\n    for i in range(0, 100000):\n        queue2.popleft()\n    print(\"Queue emptied\")\n    ```", "```py\n    Queue created\n    Queue emptied\n    Wall time: 23 ms\n    ```", "```py\n    import os\n    ```", "```py\n    os.environ['MY_KEY'] = \"MY_VAL\"\n    os.getenv('MY_KEY')\n    ```", "```py\n    'MY_VAL'\n    ```", "```py\n    print(os.getenv('MY_KEY_NOT_SET'))\n    ```", "```py\n    None\n    ```", "```py\n    print(os.environ)\n    ```", "```py\nfd = open(\"Alice’s Adventures in Wonderland, by Lewis Carroll\")\n```", "```py\nfd = open(\"Alice’s Adventures in Wonderland, by Lewis Carroll\",\n          \"rb\")\nfd\n```", "```py\n<_io.BufferedReader name='Alice's Adventures in Wonderland, by Lewis Carroll'>\n```", "```py\nfd = open(\"interesting_data.txt\", \"w\")\nfd\n```", "```py\n<_io.TextIOWrapper name='interesting_data.txt' mode='w' encoding='cp1252'>\n```", "```py\n    fd = open(\"Alice's Adventures in Wonderland, by Lewis Carroll\",\n              \"rb\")\n    ```", "```py\n    fd.close()\n    ```", "```py\nwith open(\"Alice’s Adventures in Wonderland, by Lewis Carroll\")as fd:\n    print(fd.closed)\nprint(fd.closed)\n```", "```py\nFalse\nTrue\n```", "```py\n    with open(\"Alice’s Adventures in Wonderland, by Lewis Carroll\",\n              encoding=\"utf8\") as fd:\n        for line in fd:\n                print(line)\n    ```", "```py\n    with open(\"Alice’s Adventures in Wonderland, by Lewis Carroll\",\n              encoding=\"utf8\") as fd:\n        for line in fd:\n            print(line)\n        print(\"Ended first loop\")\n        for line in fd:\n            print(line)\n    ```", "```py\n    data_dict = {\"India\": \"Delhi\", \"France\": \"Paris\", \"UK\": \"London\",\n                 \"USA\": \"Washington\"}\n    with open(\"data_temporary_files.txt\", \"w\") as fd:\n        for country, capital in data_dict.items():\n            fd.write(\"The capital of {} is {}\\n\".format(\n                country, capital))\n    ```", "```py\n    with open(\"data_temporary_files.txt\", \"r\") as fd:\n        for line in fd:\n            print(line)\n    ```", "```py\n    The capital of India is Delhi\n    The capital of France is Paris\n    The capital of UK is London\n    The capital of USA is Washington\n    ```", "```py\n    data_dict_2 = {\"China\": \"Beijing\", \"Japan\": \"Tokyo\"}\n    with open(\"data_temporary_files.txt\", \"a\") as fd:\n        for country, capital in data_dict_2.items():\n            print(\"The capital of {} is {}\".format(\n                country, capital), file=fd)\n    ```", "```py\n    with open(\"data_temporary_files.txt\", \"r\") as fd:\n        for line in fd:\n            print(line)\n    ```", "```py\n    The capital of India is Delhi\n    The capital of France is Paris\n    The capital of UK is London\n    The capital of USA is Washington\n    The capital of China is Beijing\n    The capital of Japan is Tokyo\n    ```"]