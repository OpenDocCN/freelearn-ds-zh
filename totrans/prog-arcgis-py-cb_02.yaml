- en: Chapter 2. Managing Map Documents and Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the current map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing map documents on a disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of layers in a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the list of layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zooming in to selected features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the map extent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding layers to a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting layers into a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating layer symbology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating layer properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with time-enabled layers in a data frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcPy mapping module provides some really exciting features for mapping
    automation, including the ability to manage map documents and layer files, as
    well as the data within these files. Support is provided to automate map export
    and print, to create PDF map books, and publish map documents to ArcGIS Server
    map services. This is an incredibly useful module for accomplishing many of the
    day-to-day tasks performed by GIS analysts.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the ArcPy mapping module to manage
    map documents and layer files. You will also learn how to add and remove geographic
    layers and tables from map document files, insert layers into data frames, and
    move layers around within the map document. Finally, you will learn how to update
    layer properties and symbology.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the current map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a geoprocessing script from the ArcGIS Python window or a custom
    script tool, you will often need to make a reference to the map document which
    is currently loaded in ArcMap. This is typically the first step in your script
    before you perform geoprocessing operations against layers and tables in a map
    document. In this recipe, you will learn how to reference the current map document
    from your Python geoprocessing script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can actually perform any operations on a map document file, you
    need to make a reference to it in your Python script. This is done by calling
    the `MapDocument()` method on the `arcpy.mapping` module. You can reference either
    the currently running document or a document at a specific location on disk. To
    reference the currently active document, you simply supply the keyword `CURRENT`
    as a parameter to the `MapDocument()` function. This loads the currently active
    document in ArcMap. The following code example shows how a reference to the current
    active document is obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can only use the `CURRENT` keyword when running a script from the ArcGIS
    Python window or a custom script tool in ArcToolbox. If you attempt to use this
    keyword when running a script from IDLE or any other development environment,
    it won't have access to the map document file that is currently loaded in ArcGIS.
    I should also point out that the `CURRENT` keyword is not case sensitive. You
    could just as easily use `"current"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reference a map document on a local or remote drive, simply supply the path
    to the map document as well as the map document name as a parameter to `MapDocument()`.
    For example, you would reference the `crime.mxd` file in the `c:\data` folder
    with the following reference: `arcpy.mapping.MapDocument("C:/data/crime.mxd")`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to access the currently active map document
    in ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button located on the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `arcpy.mapping` module by typing the following into the Python window.
    Here, and in future recipes, we'll assign the `arcpy.mapping` module to a variable
    called `mapping`. This will make your code easier to read and cut down on the
    amount of code you have to write. Instead of having to prefix all your code with
    `arcpy.mapping`, you can just refer to it as mapping. It is not required that
    you follow this form, but it does make your code cleaner and faster to write.
    Furthermore, you can name the variable as you wish. For example, instead of calling
    it `mapping` you may call it `MAP` or `mp` or whatever makes sense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable by typing the following into the Python Window below the first line
    of code that you added in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a title for map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save a copy of the map document file with the `saveACopy()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **File** | **Map Document Properties**, in order to view the new
    title you gave to the map document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch2\ReferenceCurrentMapDocument.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MapDocument` class has a constructor that creates an instance of this class.
    In object-oriented programming, an **instance** is also known as an **object**.
    The constructor for `MapDocument` can accept either the `CURRENT` keyword or a
    path to a map document file on a local or remote drive. The constructor creates
    an object and assigns it to the variable `mxd`. You can then access the properties
    and methods available on this object using dot notation. In this particular case,
    we printed out the title of the map document file using the `MapDocument.title`
    property and we also used the `MapDocument.saveACopy()` method to save a copy
    of the map document file.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing map documents on a disk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to reference the currently active map document file
    in ArcMap, you can also access map document files that are stored on a local or
    remote drive by using the `MapDocument()` constructor. In this recipe, you'll
    learn how to access these map documents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned earlier, you can also reference a map document file that resides
    somewhere on your computer or a shared server. This is done simply by providing
    a path to the file. This is a more versatile way of obtaining a reference to a
    map document because it can be run outside the ArcGIS Python window. Later, when
    we will discuss parameters in a script, you'll understand that you can make this
    path a parameter so that the script is even more versatile, with the ability to
    input a new path each time it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to access a map document stored on a local
    or remote drive:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the IDLE development environment from **Start** | **All Programs** | **ArcGIS**
    | **Python 2.7** | **IDLE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new IDLE script window by navigating to **File** | **New Window** from
    the IDLE shell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `arcpy.mapping`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the copy of the `crime` map document that you created in the last
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the title of the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch2\ReferenceMapDocumentOnDisk.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only difference between this recipe and the last one is that we provided
    a reference to a map document file on a local or remote drive rather than using
    the `CURRENT` keyword. This is the recommended way of referencing a map document
    file unless you know for sure that your geoprocessing script will be run inside
    ArcGIS, either in the Python window or as a custom script tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of layers in a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frequently, one of the first steps in a geoprocessing script is to obtain a
    list of layers in the map document. Once obtained, your script may then cycle
    through each of the layers and perform some type of processing. The mapping module
    contains a `ListLayers()` function, which provides the capability of obtaining
    this list of layers. In this recipe, you will learn how to get a list of layers
    contained within a map document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module contains various list functions to return lists of
    layers, data frames, broken data sources, table views, and layout elements. These
    list functions normally function as the first step in a multistep process, in
    which the script needs to get one or more items from a list for further processing.
    Each of these list functions returns a Python list, which, as you know from earlier
    in the book, is a highly functional data structure for storing information.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the list functions are used as a part of a multistep process, in which
    creating a list is only the first step. Subsequent processing in the script will
    iterate over one or more of the items in this list. For example, you might obtain
    a list of layers in a map document and then iterate through each layer looking
    for a specific layer name, which will then be subjected to further geoprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to obtain a list of layers from a map document
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListLayers()` function and pass a reference to the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `for` loop and print out the name of each layer in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output (you can check your work by examining
    the `c:\ArcpyBook\code\Ch2\GetListLayers.py` solution file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListLayers()` function retrieves a list of layers in a map document, specific
    data frame, or layer file. In this case, we passed a reference to the current
    map document to the `ListLayers()` function, which should retrieve a list of all
    the layers in the map document. The results are stored in a variable called `layers`,
    which is a Python list that can be iterated with a `for` loop. This Python list
    contains one or more `Layer` objects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListLayers()` function is only one of the many list functions provided
    by the `arcpy.mapping` module. Each of these functions returns a Python list containing
    data of some type. Some of the other list functions include `ListTableViews()`,
    which returns a list of `Table` objects; `ListDataFrames()`, which returns a list
    of `DataFrame` objects; and `ListBoomarks()`, which returns a list of bookmarks
    in a map document. There are additional list functions, many of which we'll cover
    later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the list of layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to get a list of layers by using the
    `ListLayers()` function. There will be times when you will not want a list of
    all the layers in a map document, but rather only a subset of the layers. The
    `ListLayers()` function allows you to restrict the list of layers that is generated.
    In this recipe, you will learn how to restrict the layers returned using a wildcard
    and a specific data frame from the ArcMap table of contents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, if you only pass a reference to the map document or layer file,
    the `ListLayers()` function will return a list of all the layers in these files.
    However, you can restrict the list of layers returned by this function by using
    an optional wildcard parameter or by passing in a reference to a specific data
    frame. A wildcard is a character that will match any character or sequence of
    characters in a search. This will be demonstrated in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're working with a layer file (`.lyr`), you can't restrict layers with
    a data frame. Layer files don't support data frames.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to restrict the list of layers returned by
    `ListLayers()` through the use of a wildcard and data frame.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to restrict a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of data frames in the map document and search for a specific data
    frame named `Crime` (please note that text strings can be surrounded by either
    single or double quotation marks):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListLayers()` function and pass a reference to the map document,
    a wildcard to restrict the search, and the data frame found in the last step to
    further restrict the search. The `ListLayers()` function should be indented inside
    the `if` statement you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a for loop and print out the name of each layer in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete script should appear as follows or you can consult the solution
    file at `c:\ArcpyBook\code\Ch2\RestrictLayers.py`:![How to do it…](img/B04314_02_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListDataFrames()` function is another list function that is provided by
    `arcpy.mapping`. This function returns a list of all the data frames in a map
    document. We then loop through each of the data frames returned by this function,
    looking for a data frame that has the name `Crime`. If we do find a data frame
    that has this name, we call the `ListLayers()` function, passing in the optional
    wildcard value of `Burg*` as the second parameter, and a reference to the `Crime`
    data frame. The wildcard value passed in as the second parameter accepts any number
    of characters and an optional wildcard character (`*`).
  prefs: []
  type: TYPE_NORMAL
- en: In this particular recipe, we searched for all the layers that begin with the
    characters `Burg` and have a data frame named `Crime`. Any layers found matching
    these restrictions were then printed. Keep in mind that all we did in this case
    was print the layer names, but in most cases, you would be performing additional
    geoprocessing with the use of tools or other functions, and having a shorter list
    will speed up your script and will keep things neat and tidy.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming in to selected features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating selection sets in ArcMap is a common task. Selection sets are often
    created as the result of an attribute or spatial query, but they can also occur
    when a user manually selects features and sometimes, under some additional circumstances.
    To better visualize selection sets, users often zoom to the extent of the selected
    feature. This can be accomplished programmatically with Python in several ways.
    In this recipe, you will learn how to zoom to all the selected features in a data
    frame as well as an individual layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DataFrame.zoomToSelectedFeatures` property zooms to the extent of all the
    selected features from all the layers in the data frame. Essentially, it performs
    the same operation as the **Selection** | **Zoom to Selected Features** operation.
    One difference is that it will zoom to the full extent of all the layers if no
    features are selected.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming to the extent of selected features in an individual layer requires you
    to use the `Layer` object. The `Layer` object includes a `getSelectedExtent()`
    method that you can call to zoom to the extent of the selected records. This returns
    an `Extent` object, which you can then use as a parameter that is passed into
    the `DataFrame.panToExtent()` method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get and set the active data frame and active
    view ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the ArcMap **Table Of Contents** pane, make sure that `Crime` is the active
    data frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Table Of Contents** pane, click on the **List By Selection** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the **Bexar County Boundaries** layer unselectable by clicking on the toggle
    button just to the right of the layer name:![How to do it…](img/B04314_02_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **List By Source** button in the **Table Of Contents** pane. Using
    the **Select Features** tool, drag a box around the cluster of burglaries inside
    the **Northside ISD** boundary. This should select the boundaries of a specific
    school district along with some burglaries as shown in the following diagram:![How
    to do it…](img/B04314_02_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the active data frame (`Crime`) and zoom to the selected features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If no records have been selected, a call to `zoomToSelectedFeatures()` will
    zoom to the extent of all the records in the data frame. Clear the selected features
    by navigating to **Selection** | **Clear Selected Features**. This will clear
    the selection set. Now, execute the same line of code again to see how this affects
    the operation of the `zoomToSelectedFeatures()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we'll zoom to the extent of the selected features in a specific layer.
    Using the **Select Features** tool, drag a box around the cluster of burglaries
    inside the **Northside ISD** boundary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, get a reference to the `Crime` data frame. Calling the `ListDataFrames()`
    function and passing in a wildcard of `Crime` will return a Python list containing
    a single item. We pull this item out using `[0]`, which returns the first and
    only item in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''ll get a reference to the `Burglaries` layer, which contains some
    selected features. The following code uses a wildcard `*` to search for the **Burglaries
    in 2009** layer within the data frame that we referenced in the last line of code.
    The `ListLayers()` function returns a Python list and we use `[0]` to pull out
    the first and only layer containing the word `Burglaries`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll set the extent of the data frame by getting the extent of the
    selected features in the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete script for zooming to the selected features of a layer should
    appear as follows or you can consult the solution file at `c:\ArcpyBook\code\Ch2\ZoomSelectedExtent.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you learned how to zoom to the extent of all the selected records
    from all the layers in a data frame as well as how to zoom to the extent of all
    the selected records from a specific layer in a data frame. Zooming to the extent
    of all the selected records from all the layers in a data frame simply requires
    that you get a reference to the active data frame and then call `zoomToSelectedFeatures()`.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming to the extent of the selected records within a specific layer requires
    a little more coding. After importing the `arcpy.mapping` module and getting a
    reference to the map document, we then got a reference to the `Crime` data frame.
    Using the `ListLayers()` function we passed in a reference to the data frame as
    well as a wildcard that searched for the layers that begin with the text `Burglaries`.
    The `ListLayers()` function returned a Python list and since we knew that we only
    had one layer that matched the wildcard search, we pulled out the first layer
    and assigned it to a variable called `layer`. Finally, we set the extent of the
    data frame using `layer.getSelectedExtent`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the map extent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many occasions when you will need to change the map extent. This
    is frequently the case when you are automating the map production process and
    need to create many maps of different areas or features. There are a number of
    ways that the map extent can be changed with `arcpy`. However, for this recipe,
    we'll concentrate on using a definition expression to change the extent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DataFrame` class has an `extent` property that you can use to set the geographic
    extent. This is often used in conjunction with the `Layer.definitionQuery` property
    that is used to define a definition query for a layer. In this recipe, you will
    learn how to use these objects and properties to change the map extent.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop that will loop through all the data frames in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the data frame called `Crime` and a specific layer that we''ll apply the
    definition query against:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop that will loop through the layers. There will only be one,
    but we''ll create the loop anyway. In the `for` loop, create a definition query
    and set the new extent of the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entire script should appear as follows or you can consult the solution file
    at `c:\ArcpyBook\code\Ch2\ChangeMapExtent.py`:![How to do it...](img/B04314_02_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run the script. The extent of the data view should update so that it
    visualizes only the features matching the definition expression, as shown in the
    following screenshot:![How to do it...](img/B04314_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe used a definition query on a layer to update the map extent. Near
    the end of the script, you created a new variable called `query` that held the
    definition expression. The definition expression was set up to find school districts
    with a name of **Lackland ISD**. This query string was then applied to the `definitionQuery`
    property. Finally, the `df.extent` property was set to the returned value of `layer.getExtent()`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding layers to a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many situations where you will need to add a layer to a map document.
    The mapping module provides this functionality through the `AddLayer()` function.
    In this recipe, you will learn how to add a layer to a map document using this
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module provides the ability to add layers or group layers
    into an existing map document file. You can take advantage of the ArcMap *auto-arrange*
    functionality, which automatically places a layer in the data frame for visibility.
    This is essentially the same functionality as is provided by the **Add Data**
    button in ArcMap, which positions a layer in the data frame based on geometry
    type and layer weight rules.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Layers can't be added to a layer file (`.lyr`).
  prefs: []
  type: TYPE_NORMAL
- en: When adding a layer to a map document, the layer must reference an existing
    layer found in a layer file on disk, the same map document and data frame, the
    same map document with a different data frame, or a completely separate map document.
    A layer can be either a layer in a map document or a layer in a `.lyr` file. To
    add a layer to a map document, you must first create an instance of the `Layer`
    class and then call the `AddLayer()` function, passing in the new layer along
    with the data frame where it should be placed and rules for how it is positioned.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to add a layer to a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame, which is the first data frame in
    the list returned by `ListDataFrames()`. The `[0]` value, specified at the end
    of the code, gets the first data frame returned from the `ListDataFrames()` method,
    which returns a list of data frames. Lists are 0-based, so in order to retrieve
    the first data frame, we provide an index of `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Layer` object that references a `.lyr` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the layer to the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can consult the solution file at `c:\ArcpyBook\code\Ch2\AddLayersMapDocument.py`.
    Run the script. The `School_Districts.lyr` file will be added to the data frame,
    as shown in the following screenshot:![How to do it…](img/B04314_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first two lines, we simply referenced the `arcpy.mapping` module and
    got a reference to the currently active map document. Next, we created a new variable
    called `df`, which held a reference to the `Crime` data frame. This was obtained
    through the `ListDataFrames()` function that returned a list of data frame objects.
    We then used list access to return the first item in the list, which is the `Crime`
    data frame. A new `Layer` instance, called `layer`, was then created from a `layer`
    file stored on disk. This `layer` file was called `School_Districts.lyr`. Finally,
    we called the `AddLayer()` function, passing in the data frame where the layer
    should ideally reside along with a reference to the layer, and a parameter indicating
    that we wanted to use the **auto-arrange** feature. In addition to allowing ArcMap
    to automatically place the layer into the data frame using auto-arrange, you can
    also specifically place the layer at either the top or bottom of the data frame
    or a group layer using the `BOTTOM` or `TOP` position.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing the capability of adding a layer to a map document,
    `arcpy.mapping` also provides an `AddLayerToGroup()` function, which can be used
    to add a layer to a group layer. The layer can be added to the top or bottom of
    the group layer or you can use auto-arrange for placement. You may also add layers
    to an empty group layer. However, just as with regular layer objects, group layers
    cannot be added to a layer file.
  prefs: []
  type: TYPE_NORMAL
- en: Layers can also be removed from a data frame or group layer. `RemoveLayer()`
    is the function used to remove a layer or group layer. In the event that two layers
    have the same name, only the first is removed, unless your script is set up to
    iterate.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting layers into a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `AddLayer()` function can be used to add a layer to a map document either
    through auto-arrange or as the first or last layer in a data frame. However, it
    doesn't provide the control you need for inserting a layer in a specific position
    within a data frame. For this added control, you can use the `InsertLayer()` function.
    In this recipe, you will learn how to control the placement of layers that are
    added to a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AddLayer()` function simply adds a layer into a data frame or a group
    layer and places the layer automatically using auto-arrange. You can choose to
    have the layer placed at the top or bottom of either. The `InsertLayer()` method
    allows you to have more precise positioning of a new layer into a data frame or
    a group layer. It uses a reference layer to specify a location and the layer is
    added either before or after the reference layer, as specified in your code. Since
    `InsertLayer()` requires the use of a reference layer, you can''t use this method
    on an empty data frame. This is illustrated in the following screenshot, where
    **District_Crime_Join** is the reference layer and **School_Districts** is the
    layer to be added. The **School_Districts** layer can be placed either before
    or after the reference layer using `InsertLayer()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use `InsertLayer()` to insert a layer into
    a data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the reference layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer to be inserted relative to the reference layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the layer into the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can consult the solution file at `c:\ArcpyBook\code\Ch2\InsertLayerMapDocument.py`
    to verify the accuracy of your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script. The **Crimes2009** feature class will be added as a layer to
    the data frame, as seen in the following screenshot:![How to do it…](img/B04314_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After obtaining references to the `arcpy.mapping` module, current map document
    file, and the **Crime** data frame, our script then defines a reference layer.
    In this case, we used the `ListLayers()` function with a wildcard of `Burglaries*`,
    and the **Crime** data frame to restrict the list of layers returned to only one
    item. This item should be the **Burglaries in 2009** layer. We used Python list
    access with a value of `0` to retrieve this layer from the list and assigned it
    to a Layer object. Next, we defined the `insert` layer, a new `Layer` object that
    references the **Crimes2009** feature class from the `CityOfSanAntonio` geodatabase.
    Finally, we called the `InsertLayer()` function passing in the data frame, reference
    layer, layer to be inserted, and keyword indicating that the layer to be inserted
    should be placed before the reference layer. This is illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/B04314_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also reposition a layer that is already in a data frame or a group layer.
    The `MoveLayer()` function provides the ability to reposition the layer within
    a data frame or a group layer. Movement of a layer must be within the same data
    frame. You can't move a layer from one data frame to another. Just as with `InsertLayer()`,
    `MoveLayer()` uses a reference layer to reposition the layer.
  prefs: []
  type: TYPE_NORMAL
- en: Updating layer symbology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you will want to change the symbology of a layer in
    a map document. This can be accomplished through the use of the `UpdateLayer()`
    function, which can be used to change the symbology of a layer as well as various
    properties of a layer. In this recipe, you will use the `UpdateLayer()` function
    to update the symbology of a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `arcpy.mapping` module also gives you the capability of updating layer
    symbology from your scripts by using the `UpdateLayer()` function. For example,
    you might want your script to update a layer''s symbology from a graduated color
    to a graduated symbol, as illustrated in the following screenshot. `UpdateLayer()`
    can also be used to update various layer properties, but the default functionality
    is to update the symbology. Since `UpdateLayer()` is a robust function that is
    capable of altering both symbology and properties, you do need to understand the
    various parameters that can be supplied as an input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update the symbology of a layer using `UpdateLayer()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be used to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `UpdateLayer()` function to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can consult the solution file at `c:\ArcpyBook\code\Ch2\UpdateLayerSymbology.py`
    to verify the accuracy of your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script. The **Crime Density by School District** layer will now be symbolized
    with graduated symbols instead of graduated colors, as shown in the following
    screenshot:![How to do it…](img/B04314_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the `UpdateLayer()` function to update the symbology
    of a layer. We didn't update any properties, but we'll do so in the next recipe.
    The `UpdateLayer()` function requires that you pass several parameters including
    a data frame, layer to be updated, and a reference layer from which the symbology
    will be pulled and applied to update the layer. In our code, the `updateLayer`
    variable holds a reference to the **Crime Density by School District** layer,
    which will have its symbology updated. The source layer from which the symbology
    will be pulled and applied to the updated layer is a layer file (`CrimeDensityGradSym.lyr`),
    containing graduated symbols.
  prefs: []
  type: TYPE_NORMAL
- en: To update the symbology for a layer, you must first ensure that the update layer
    and the source layer have the same geometry (point, line, or polygon). You also
    need to check that the attribute definitions are the same in some cases, depending
    upon the renderer. For example, graduated color symbology and graduated symbols
    are based on a particular attribute. In this case, both the layers had polygon
    geometry and a `CrimeDens` field containing crime density information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we had references to both the layers, we called the `UpdateLayer()` function,
    passing in the data frame and layers along with a fourth parameter that indicated
    that we''re updating symbology only. We supplied a `True` value as this fourth
    parameter, indicating that we were only updating the symbology and not properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UpdateLayer()` function also provides the ability to remove one layer and
    add another layer in its place. The layers can be completely unrelated, so there
    is no need to ensure that the geometry type and attribute field are the same as
    you would when redefining the symbology of a layer. This switching of layers essentially
    executes a call to `RemoveLayer()` and then a call to `AddLayer()` as one operation.
    To take advantage of this functionality, you must set the `symbology_only` parameter
    to `False`.
  prefs: []
  type: TYPE_NORMAL
- en: Updating layer properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to update the symbology of a layer.
    As I mentioned, `UpdateLayer()` can also be used to update various properties
    of a layer, such as field aliases, query definitions, and others. In this recipe,
    you will use `UpdateLayer()` to alter various properties of a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use the `UpdateLayer()` function to update a limited number of
    layer properties. Specific layer properties, such as field aliases, selection
    symbology, query definitions, label fields, and others, can be updated using `UpdateLayer()`.
    A common scenario is to have a layer in many map documents that needs to have
    a specific property changed across all the instances of the layer in all map documents.
    To accomplish this, you will have to use ArcMap to modify the layer with the appropriate
    properties and save it to a layer file. This layer file then becomes the source
    layer, which will be used to update the properties of another layer called `update_layer`.
    In this recipe, you'll use ArcMap to alter the properties of a layer, save to
    a layer file (`.lyr`) and then use Python to write a script that uses `UpdateLayer()`
    to apply the properties to another layer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update layer properties with `UpdateLayer()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap. For this recipe, you will
    be working with the **Burglaries in 2009** feature class, as shown in the following
    screenshot:![How to do it…](img/B04314_02_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Burglaries in 2009** feature class in the **Crime** data
    frame to display the **Layer Properties** window, as shown in the following screenshot.
    Each of the tabs represents properties that can be set for this layer:![How to
    do it…](img/B04314_02_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **General** tab and change the value in the **Layer Name:** textbox
    to the name, as shown in the following screenshot:![How to do it…](img/B04314_02_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Definition Query** tab and define the query, as shown in the
    following screenshot. You can use the **Query Builder…** button to define the
    query or simply type in the query:![How to do it…](img/B04314_02_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the alias of the `OFFDESC` field to `Offense Description`, as shown in
    the next screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fields** tab in **Layer Properties** and make visible only those
    fields that are selected with a checkmark in the following screenshot. This is
    done by unchecking the fields that you see in the following screenshot:![How to
    do it…](img/B04314_02_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to dismiss the **Layer Properties** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the data frame, right-click on **Burglaries – No Forced Entry** and select
    **Save as Layer File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file as `c:\ArcpyBook\data\BurglariesNoForcedEntry.lyr`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Burglaries – No Forced Entry** layer and select **Remove**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **Add Data** button in ArcMap, add the `Crimes2009` feature class
    from the `CityOfSanAntonio` geodatabase. The feature class will be added to the
    data frame, as shown in the following screenshot:![How to do it…](img/B04314_02_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be used to update the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `UpdateLayer()` function to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can consult the solution file at `c:\ArcpyBook\code\Ch2\UpdateLayerProperties.py`
    to verify the accuracy of your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Crimes2009** layer will be updated with the properties associated with
    the `BurglariesNoForcedEntry.lyr` file. This is illustrated in the following screenshot.
    Turn on the layer to view the definition query that has been applied. You can
    also open the **Layer Properties** dialog to view the property changes that have
    been applied to the **Crimes2009** feature class:![How to do it…](img/B04314_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with time-enabled layers in a data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to time-enable a layer and data frame. You
    will then write a script that cycles through the time range for the layer and
    exports a PDF map showing crimes through time in seven-day intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DataFrameTime` object provides access to time management operations for
    time-enabled layers in a data frame. This object is returned when you reference
    the `DataFrame.time` property, and includes properties for retrieving the current
    time, end time, start time, time step interval, and others that are established
    by using the **Time Slider Options** dialog box and then saved with the map document.
    One or more layers in a data frame must be time-enabled for this functionality
    to be operational.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to work with time-enabled layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the ArcMap **Table Of Contents** make sure `Crime` is the active data frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Layer Properties** dialog box for **Burglaries in 2009** by right-clicking
    on the layer and selecting **Properties**. Select the **Time** tab, as shown in
    the following screenshot:![How to do it...](img/B04314_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable time for the layer by clicking on the **Enable time on this layer** checkbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Under **Time properties**, select **Each feature has a single time field** for
    **Layer Time:**. Select the **SPLITDT** field for the **Time Field:**. Define
    a **Time Step Interval:** of **7.00 Days**, as shown in the following screenshot:![How
    to do it...](img/B04314_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the **Layer Time Extent:** by clicking the **Calculate** button, circled
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04314_02_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check the **Time Step Interval:** field. You may need to reset that to **7 Days**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Apply** and then **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the ArcMap **Tools** toolbar, select the time slider options button to display
    the **Time Slider Options** dialog as shown in the following screenshot:![How
    to do it...](img/B04314_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Time Display** tab of the **Time Slider Options** dialog, make sure
    **Time step interval:** is set to **7.0 days.** If not, set it to **7.0 days**.
    Do the same for the **Time window:** option.![How to do it...](img/B04314_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your map document. It's very important that you save the time-enabled data
    with your map document. The code you write next won't work unless you do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch2.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the `DataFrameTime` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `DataFrameTime.currentTime` property to the `DataFrameTime.startTime`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `while` loop that will loop through the time while the `currentTime`
    is less than or equal to the `endTime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the while loop, create a file for each PDF that will be created, export
    the PDF, and reset the `currentTime` property. The entire `while` loop should
    appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entire script should appear as follows. You can consult the solution file
    at `c:\ArcpyBook\code\Ch2\TimeEnabledLayers.py` to verify the accuracy of your
    code:![How to do it...](img/B04314_02_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DataFrameTime` object provides access to time management operations in
    a data frame. Several properties of `DataFrameTime`, including `currentTime`,
    `startTime`, `endTime`, and `timeStepInterval`, are used in this recipe. Initially,
    we set the `currentTime` property equal to the `startTime` property. The initial
    `startTime` was calculated when you set the **Time Step Interval:** properties
    in ArcMap. The `while` loop was set up to loop as long as the `currentTime` property
    is greater than the `endTime` property. Inside the loop, we created a `fileName`
    variable that is set to the `currentTime` property, plus an extension of `.pdf`.
    We then called the `ExportToPDF()` function, passing in a path and the filename.
    This should ideally export the page layout view to the PDF file. Finally, we updated
    the `currentTime` property by the `timeStepInterval` property that was set to
    **7.0 days** in in the **Time Step Interval:** properties dialog.
  prefs: []
  type: TYPE_NORMAL
