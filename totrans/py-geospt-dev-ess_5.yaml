- en: Chapter 5. Managing and Organizing Geographic Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an up-and-running explorative application, we can move on
    to developing some more day-to-day practical features. A common task for users
    of geographic data is to prepare, clean, restructure, and organize data. In this
    chapter, you will do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Create a window for inspecting the basic properties of each layer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build some convenience functions for commonly needed management tasks, and
    later add them to the user interface. These functions are as follows:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations on individual layers being available when the user right-clicks on
    each layer in the LayersPane widget (splitting, geometry cleaning, and resampling)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch operations on multiple layers available as buttons in the top ribbon area
    (merging and mosaicking)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign dialogue windows to set the parameters when running each tool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the management module
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start by creating a separate submodule to contain the functionality, one
    for vector, and one for raster. First, create the `vector/manager.py` file and
    start it up with the following imports:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create the file `raster/manager.py` as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To make these manager modules available to their respective `vector` and `raster`
    parent package, add the following import statement to both `vector/__init__.py`
    and `raster/__init__.py`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Inspecting files
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the most basic way to organize and troubleshoot one's files, one often needs
    to inspect the properties and details of one's data and loaded layers. This information
    is usually available in a separate layer options window. Later in this chapter,
    we will make this window accessible by right-clicking on a layer, and clicking
    on **Properties** under the **Layer-specific right-click functions** subheading.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'We define a template class for this type of window, with support for tabbed
    windows using our ribbon class, and create a convenience method for adding information
    in a nicely formatted way. This is done in the `app/dialogues.py` module. Since
    we have not yet set up the contents of `app/dialogues.py`, we also have to set
    up its imports and styling, as shown in the following code snippet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Vector and raster data will typically have very different properties, so we
    make a separate window for each. First, for vector layers:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspecting files](img/5407OS_05_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code for the same:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, for raster layers:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspecting files](img/5407OS_05_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code for the same:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Organizing files
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, when working in a GIS application, one first seeks out the data
    files one wishes to use from various organizational websites. Ideally, one stores
    these in some logically organized folder structure on the local computer, and
    from there, one can load the data into the GIS application. In this section, we
    add functionality to help the user manage their files and access and alter basic
    file contents.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For some great examples of the varied types and sources of GIS data available
    online, see the list at [http://freegisdata.rtwilson.com/](http://freegisdata.rtwilson.com/).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Vector data
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vector data is very versatile; its table-like data structure means that it can
    contain data on a wide variety of concepts in a single file, or contain data for
    only a very specific concept. For practical usage, it is easier if each file is
    tailored exactly to the data one needs, since these are represented as layers
    when loaded in the application. There are therefore many cases where the user
    may wish to reorganize the data to better fit their needs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will implement three specific operations for organizing and maintaining
    vector data: splitting, merging, and cleaning. The following illustration gives
    a preview of the inputs and outputs of each:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Vector data](img/5407OS_05_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Splitting
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For instance, the user may have a file that groups a diverse set of concepts,
    but is only interested in working with certain types separately. In such cases,
    it will be easier to just split the data for each unique occurrence of a field—known
    as splitting. In terms of data structure, this means slicing the height of the
    table into multiple tables along with their associated geometries. We do this
    conveniently using Python''s built-in `sorted()` and `itertools groupby()` functions.
    A `splitfields` option defines a list of one or more field names to split on so
    that each unique value combination defines a new split. So, head to the `manager.py`
    file for vector data and write the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Merging
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One can also face the opposite scenario, where one wishes to group together
    a series of data files spread across multiple files. This is called a **merge
    operation**. A merge operation stacks the rows from multiple tables into one big
    one, and generally increases the spatial coverage, since it leads to a bigger
    collection of geometries. The output attribute table from this operation also
    expands horizontally to include all of the variables/fields from its input files.
    Finally, remember that the `VectorData` instances can only contain one type of
    geometry (points, lines, or polygons), so trying to merge layers of different
    geometry types will result in an error. We implement it in the following way:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Geometry cleaning
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Geographic data can come from a very wide variety of sources, and this means
    that their levels of integrity can vary greatly. For instance, there are many
    rules that govern what is and is not allowed for each geometry type, but not all
    data producers (including both software and individuals) use the same rules or
    follow them to the same degree. This can be a problem for GIS processing, analysis
    applications, and programming libraries if the data is corrupted or not formatted
    in the way that is expected. Data may also contain unnecessary junk information
    that doesn't add anything useful (depending on the level of detail needed), making
    the file size overly large. Geometry cleaning can therefore be a useful feature
    as a first step when gathering one's data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 地理数据可以来自非常广泛的来源，这意味着它们的完整性水平可能会有很大差异。例如，有许多规则规定了每种几何类型允许或不允许的内容，但并非所有数据生产者（包括软件和个人）都使用相同的规则或以相同程度遵循这些规则。如果数据损坏或未以预期的方式格式化，这可能会成为GIS处理、分析应用程序和编程库的问题。数据还可能包含不必要的垃圾信息，这些信息不会增加任何有用的内容（根据所需细节水平而定），从而使文件大小过大。因此，在收集数据时，几何清理可以作为第一步的一个有用功能。
- en: 'To do this, we make a function that loops the geometries of our features. With
    the help of the Shapely library, we fix "bowtie" errors (polygons only), remove
    repeat points, and exclude any remaining geometries deemed to be invalid according
    to the GeoJSON specification. The tolerance argument can be set to higher than
    zero to reduce file size, but note that this alters the shape of the geometries
    and decreases the level of detail and precision in the output. Refer to the following
    code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们创建了一个循环我们特征几何体的函数。借助Shapely库的帮助，我们修复“蝴蝶结”错误（仅限多边形），删除重复的点，并排除任何根据GeoJSON规范被认为无效的剩余几何体。容差参数可以设置为一个大于零的值以减小文件大小，但请注意，这会改变几何体的形状，并降低输出中的细节和精度水平。请参考以下代码：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more on polygon bowtie errors, visit:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于多边形蝴蝶结错误的信息，请访问：
- en: '[http://stackoverflow.com/questions/20833344/fix-invalid-polygon-python-shapely](http://stackoverflow.com/questions/20833344/fix-invalid-polygon-python-shapely)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://stackoverflow.com/questions/20833344/fix-invalid-polygon-python-shapely](http://stackoverflow.com/questions/20833344/fix-invalid-polygon-python-shapely)'
- en: Raster data
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栅格数据
- en: 'There are many common raster file management functionalities that you may wish
    to implement. Here, we will only focus on two of them: mosaicking and resampling,
    as seen in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望实现许多常见的栅格文件管理功能。在这里，我们只关注其中两个：拼接和重采样，如以下截图所示：
- en: '![Raster data](img/5407OS_05_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![栅格数据](img/5407OS_05_04.jpg)'
- en: To implement these functionalities, we will take advantage of the image processing
    functionality from the PIL library. Since we are using an imaging library not
    primarily intended for geospatial data, the following code should be considered
    highly experimental and mostly for demonstration purposes; you may have to troubleshoot
    and improve on these methods on your own.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些功能，我们将利用PIL库的图像处理功能。由于我们使用的是一个并非主要用于地理空间数据的图像库，以下代码应被视为高度实验性的，主要用于演示目的；您可能需要自行调试和改进这些方法。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the main purpose of your application is to process satellite, imagery, and
    raster data, and you don't have time or feel comfortable finding your own solution
    using PIL, you may be better off just adding NumPy, GDAL, and related tools as
    dependencies.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您应用程序的主要目的是处理卫星图像、影像和栅格数据，而且您没有时间或感到不舒服自己寻找解决方案使用PIL，那么您可能最好只是将NumPy、GDAL和相关工具作为依赖项添加。
- en: 'For a list of GDAL''s broad range of functionality for handling raster data,
    see:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GDAL处理栅格数据广泛功能的列表，请参阅：
- en: '[https://pcjericks.github.io/py-gdalogr-cookbook/](https://pcjericks.github.io/py-gdalogr-cookbook/)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pcjericks.github.io/py-gdalogr-cookbook/](https://pcjericks.github.io/py-gdalogr-cookbook/)'
- en: Mosaicking
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拼接
- en: 'Similar to how vector data can be merged together, it is also possible to mosaic
    multiple adjacent raster datasets into a single larger raster data. The way we
    implement it here is by creating an `align_rasters()` function, which takes any
    number of rasters, automatically finds the coordinate bounding box that contains
    all, as well as the required pixel dimensions (though we should probably allow
    some user control here), and uses this information to position each raster to
    their respective location in a region that bounds all of our rasters. We add this
    as a function in the `raster/manager.py` file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Since we now have a way to align and properly position the rasters in space,
    we can easily mosaic them into a new raster by simply creating a new grid with
    dimensions that bound all rasters and pasting each raster into it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that unlike a vector merge, where overlapping geometries are kept in their
    original form, raster mosaicking needs a rule for choosing a value when there
    are overlapping cells. In the previous code, we didn't support any customization
    of the overlap rule, but instead just pasted each raster on top of each other
    so that any overlapping cells hold the value of the last raster to be pasted-a
    so-called "last" rule. You may implement other overlap-rules by looking at the
    tools available in the PIL library, such as `average` value with `PIL.Image.blend()`,
    or `min` or `max` with the functions found in the `PIL.ImageOps` submodule.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Resampling
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For raster data, the equivalent to vector cleaning is the removal of unnecessary
    detail and file size reduction, which can be done by resampling the size and frequency
    of the grid cells. Such resampling involves algorithms for smoothing out and redistributing
    the old cell values to the new cell structure. A lot of the same principles apply
    to resizing an image. Fortunately for us, our raster data values are stored in
    a PIL `Image` class, so we simply use its `resize` method with the nearest neighbor
    algorithm, which asks for a size in terms of pixels (or number of grid cells in
    our case). For the convenience of the user, we also give them the alternative
    to, instead specify the desired geographic width and height of each cell (for
    instance, degrees or meters, depending on the data's coordinate reference system),
    with our program calculating the necessary grid resolution behind the scenes.
    If specified, remember that the *y* axis of geographic coordinates tend to run
    in the opposite direction to that of raster coordinates, so `cellheight` must
    be given as a negative number. If the user is curious about the grid dimensions
    or cell size of their existing raster, remember that this can be found in the
    layer properties window we created earlier this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative library for raster resampling here will be PyResample. I chose
    not to use it in our lightweight application due to its NumPy and SciPy dependence.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Other useful libraries for raster management functionality that you may wish
    to explore are GDAL as mentioned earlier or Rasterio which depends on GDAL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Weaving functionality into the user interface
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we get to the part where we can make the management functionality created
    earlier accessible to the user in the visual user interface.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Layer-specific right-click functions
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the functionality we created in this chapter is intrinsically bound
    to only one layer, so it makes sense to make these available directly by right-clicking
    on the desired layer to operate on. Such a feature is only specific to the application
    we are currently making, so let's define this right-click menu in the `app/dialogues.py`
    module. Since Tkinter already has such a nicely formatted popup menu widget, with
    easy methods for adding items and commands, all we need to do is subclass it.
    Vector and raster layers will each get their own menu, but both will have in common
    items called as **Rename**, **Save as**, and **Properties**. To give them better
    visuals, find the three `.png` images with the same names as each of these items
    so we can assign them to the menu items, saving them inside the `app/icons` folder.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we make the options menu for vector layers. We give it the `split` and
    `clean` functions we created earlier, and assign them icons, which you must find
    and save as `app/icons/split.png` and `app/icons/clean.png`. Refer to the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer-specific right-click functions](img/5407OS_05_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We then move onto the options menu for rasters layers. The only layer-specific
    function here is `resample()`, so find and save an icon for it as `app/icons/resample.png`.
    You can see an icon named **Resample** in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer-specific right-click functions](img/5407OS_05_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'Refer to the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Defining the tool options windows
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the preceding code, clicking on an item in the menu opens an options window
    for a specific tool. We will now create these options windows in `app/dialogues.py`,
    utilizing our helpful `RunToolFrame` template to populate the window with appropriate
    options and widgets. Since these are layer-specific tools, we also remember to
    set the layer data as a hidden argument. Finally, the results from the processes
    are added to our LayersPane. The following screenshot shows the options window
    for vector cleaning:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the tool options windows](img/5407OS_05_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code to implement the mentioned functionality:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot demonstrates the options window for vector splitting
    populated with a list of field to choose from:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the tool options windows](img/5407OS_05_08.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code to implement the mentioned functionality:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As shown in the following screenshot of the raster resampling window a user
    can manually enter input for height and width of raster and cell data:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the tool options windows](img/5407OS_05_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code for same:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同功能的代码：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we need to instruct our application that right-clicking on a layer
    should open the appropriate menu. We define this in the initialization phase of
    the class defining our GUI in our `app/builder.py` module, after creating the
    LayersPane:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要指示我们的应用程序，在图层上右键单击应打开适当的菜单。我们在`app/builder.py`模块中定义GUI类的初始化阶段中定义了这个，在创建LayersPane之后：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Setting up the management tab
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置管理标签
- en: In contrast to the right-click menu of individual layers, the top ribbon tabs
    should be reserved for more general functionalities that takes multiple layers
    as input.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个图层的右键菜单相比，顶部的标签栏应该保留用于更通用的功能，这些功能需要多个图层作为输入。
- en: 'All of our data management-related functionality goes in a separate tab called
    **Manage**, to which we attach a vector and a raster toolbar, each populated with
    one or more buttons that open an options window for running related functionalities.
    Therefore, we add the following to `app/builder.py` in our GUI class after having
    created the ribbon and the visualize tab, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的数据管理相关功能都放在一个名为**管理**的单独标签中，我们将矢量工具栏和栅格工具栏附加到该标签上，每个工具栏都包含一个或多个按钮，这些按钮打开一个选项窗口以运行相关功能。因此，我们在创建标签栏和可视化标签后，在GUI类中的`app/builder.py`中添加了以下内容，如下面的截图所示：
- en: '![Setting up the management tab](img/5407OS_05_10.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![设置管理标签](img/5407OS_05_10.jpg)'
- en: 'Here is the code to set up the **Manage** tab:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是设置**管理**标签的代码：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Defining the tool options windows
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义工具选项窗口
- en: 'We define the various tool-specific options windows in `app/dialogues.py`,
    as we did earlier in text. First for the vector merge tool window, as seen in
    the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`app/dialogues.py`中定义了各种工具特定的选项窗口，就像我们在文本中之前所做的那样。首先是为矢量合并工具窗口，如下面的截图所示：
- en: '![Defining the tool options windows](img/5407OS_05_11.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![定义工具选项窗口](img/5407OS_05_11.jpg)'
- en: 'Here is the code for same:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同的代码：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The options window for the raster mosaicking tool looks as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格镶嵌工具的选项窗口如下所示：
- en: '![Defining the tool options windows](img/5407OS_05_12.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![定义工具选项窗口](img/5407OS_05_12.jpg)'
- en: 'Here is the code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we created functionalities related to managing and organizing
    files. This included a window to inspect the basic properties of any data layer.
    As for operations, we implemented splitting, merging, and geometry cleaning for
    vector data, and mosaicking and resampling for raster data. These functions were
    then made available in the application GUI, some by choosing from a pop-up menu
    when right-clicking on a layer, others by clicking on an icon button in the management
    tab up by the top ribbon. Each tool got its own window dialogue class with editable
    options.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了与管理和组织文件相关的功能。这包括一个窗口来检查任何数据层的基本属性。至于操作，我们实现了矢量数据的分割、合并和几何清理，以及栅格数据的镶嵌和重采样。然后，这些功能在应用程序GUI中可用，一些是通过在图层上右键单击时从弹出菜单中选择，另一些是通过在顶部的标签栏上的管理标签中单击图标按钮。每个工具都有自己的窗口对话框类，具有可编辑的选项。
- en: By going through this chapter, you should now know the general steps involved
    in adding a geospatial functionality, making it accessible in the GUI, and adding
    the results as a new layer if desired. As we move on to the next chapter, where
    we will build some basic analysis functionality, all we need to do is repeat and
    follow the same steps and procedures.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本章，你现在应该知道添加地理空间功能的一般步骤，使其在GUI中可用，并在需要时将其作为新图层添加。当我们进入下一章，我们将构建一些基本分析功能时，我们只需要重复并遵循相同的步骤和程序。
