- en: Chapter 7. Creating a Script Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the basics of creating and executing ArcPy scripts have been covered,
    we need to take the next step and create re-useable **Script tools**. Creating
    Script tools will allow for greater code reuse, and will make it easy to create
    custom tools for other GIS analysts and customers. With a Python script **backend**
    or code, and a familiar ArcGIS tool **frontend** or user interface, the particulars
    of the code are hidden from the user; it becomes just another tool, albeit a tool
    that can save days and weeks of work.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding parameters to scripts to accept input and produce output as required
    by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom tool frontend and a custom toolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the parameters of the tool frontend to allow it to pass arguments to
    the code backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding dynamic parameters to a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scripts we have generated in previous chapters have all had **hard-coded**
    inputs. The input values were written in the script as strings or numbers and
    assigned to variables. While they can be updated manually to replace the input
    and output file paths and SQL statements, programmers should aim to create scripts
    that will not require editing each time they are used. Instead, scripts should
    be designed to be dynamic and accept file paths and other inputs as parameters
    or arguments, in much the same manner that the functions we have created accept
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Python was designed with this in mind, and the `sys` module has a method called
    `sys.argv` that accepts inputs passed to the script when it is executed. While
    the designers of ArcPy and its predecessor `arcgisscripting module` initially
    took advantage of the `sys.argv` method, in time they designed an ArcPy method
    for accepting script parameters. As either method can be used when writing ArcPy
    scripts, and both are found in example scripts on the web, it is important to
    recognize the minute differences between the `sys.argv` method and `arcpy.GetParameterAsText()`.
    The major difference between the two methods is that `sys.argv` accepts the dynamic
    arguments as a list. Members of the list are accessed using list indexing and
    assigned to variables. `Arcpy.GetParameterAsText()` is a function that accepts
    an index number parameter. The index number passed reflects the order of the parameter
    within the tool's frontend; the first parameter is zero, the next is one, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the order of the parameters is adjusted in the tool frontend, this adjustment
    must be reflected in the code backend.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying script messages using arcpy.AddMessage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to receive feedback from scripts to assess the progress of the
    script as it performs an analysis. As basic as this would seem, Python scripts
    and programming languages in general do not, by default, provide any feedback
    except for errors and the termination of the script. This can be a bit discouraging
    to the novice programmer, as all built-in feedback is negative.
  prefs: []
  type: TYPE_NORMAL
- en: To alleviate this lack of feedback, the use of print statements allows the script
    to give reports on the progress of the analysis as it runs. However, when using
    a Script tool, `print` statements do not have any effect. They will not be displayed
    anywhere, and are ignored by the Python executable. To display messages in the
    script console when Script tools are executed, ArcPy has a `arcpy.AddMessage()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcpy.AddMessage` statements are added to scripts wherever feedback is required
    by the programmer. The feedback required is passed to the method as a parameter
    and displayed; whether it be a list, string, float or integer. `Arcpy.AddMessage`
    makes it easy to check on the results of analysis calculations, to ensure that
    the correct inputs are used and that the correct outputs are produced. As this
    feedback from the script can be a powerful debugging tool, use `arcpy.AddMessage`
    whenever there is a need for feedback from the Script tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that statements passed to `arcpy.AddMessage` will only display when the
    script is run as a Script tool.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dynamic components to the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start making the script into a Script tool, we should first copy the script
    that we created in [Chapter 6](ch06.html "Chapter 6. Working with ArcPy Geometry
    Objects"), *Working with ArcPy Geometry Objects* `Chapter6_1.py`, as `Chapter7_1.py`
    in a new folder called `Chapter7`. We can then start replacing the hard-coded
    variables with dynamic variables using `arcpy.GetParameterAsText`. There is another
    ArcPy method called `GetParameter` that accepts the inputs as an object, but for
    our purposes, `GetParameterAsText` is the method to use.
  prefs: []
  type: TYPE_NORMAL
- en: By adding `arcpy`.`GetParameterAsText` and `arcpy.AddMessage` to the script,
    we will have taken the first step towards creating a Script tool. Care must be
    taken to ensure that the variables created from the dynamic parameters are in
    the correct order, as reordering them can be time-consuming. Once the parameters
    are added to the script and the hard-coded portions of the script replaced with
    variables, the script is ready to become a Script tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, move all of the variables that are hard-coded into the top of the script.
    Then, replace all of the assigned values with `arcpy.GetParameterAsText`, making
    them dynamic values. Each parameter is referred to using zero-based indexing;
    however, they are passed to a function individually instead of as a member of
    a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the variable `keyfields` and the variable headers, some
    further processing must be applied to certain variables, as not all of them are
    going to be used as strings. In this case, a list is created from the string passed
    to the variable `keyfields` by using the `string` functions split and splitting
    the string on every semi-colon, while the `headers` variable is created by splitting
    on the commas. To other variables, such as the `censusBlockField` variable and
    the variable keyfields, the `SHAPE@` keyword is added because it will be required
    each time the analysis is run. If a particular field is required for each run
    of the data, such as the `BLOCKID10` field, it can remain hard-coded in the script,
    or optionally could become its own selectable field parameter in the Script tool.
  prefs: []
  type: TYPE_NORMAL
- en: The variables will then be added to the remainder of the script in the correct
    places, making the script ready for the Script tool to become part of a custom
    Toolbox in a geodatabase or in ArcToolbox. However, we must first create the tool
    part of the Script tool for the values to be collected and passed to the script.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Script tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a script tool is a powerful combination of the power of ArcPy and the
    ease of use of the tools in ArcToolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a custom toolbox to hold the script tool. To achieve
    this, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up **ArcCatalog** and right click in the **SanFrancisco.gdb** File Geodatabase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New** and then **Toolbox** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the toolbox **Chapter8Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on **Chapter8Tools**, select **Add**, and then select **Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following menu will appear allowing you to set up the script tool. Add a
    title with no spaces and a label, as well as a description. I prefer to run script
    tools in the foreground to see the messages it passes, but it is not necessary
    and can be annoying when needing to start a script and still work on other tasks.
    Click **Next** once the menu has been filled out.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Script tool](img/8662OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next menu contains an entry field and a file dialog button, allowing the
    user to find the script to which the parameters collected will be passed. Use
    the file dialog to navigate to and select the script, and make sure that **Run
    Python script in process** is checked.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Script tool](img/8662OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, push **Next** once the script has been identified.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Script tool](img/8662OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Labelling and defining parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next dialog box is the most important one. It is where the parameters to
    be passed are labeled and their data types are defined. Care must be taken to
    choose the correct data type for each parameter as there are multiple data types
    that can be supplied for some of the parameters. Also, properties for each parameter
    will be defined; this information will characterize the data to be collected and
    help to make it possible for the data to be in the correct format as well as the
    correct data type.
  prefs: []
  type: TYPE_NORMAL
- en: Start by adding the display name for each parameter to be collected. The display
    name should explain the type of input that is required. For instance, the first
    parameter will be the bus stop's feature class, so the display name could be **Bus
    Stop Feature Class**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to add the display names in the order that they will be passed to
    variables in the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Labelling and defining parameters](img/8662OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, add in the **Data Types** for each parameter. This is intricate because
    there will be a large list of data types to choose from, and often there are a
    few types that would work for many parameters. For instance, if a shapefile parameter
    is created, it would allow the user to select a shapefile as expected. However,
    it might be better to use the Feature Class data type, as then both shapefiles
    and feature classes could be used in the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Bus Stop feature class as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first parameter is the **Bus Stop feature class**, and it should be a **Feature
    Class** data type. Click on the **Data Type Field** next to the display name and
    a drop-down list will appear. Once the data type is selected, check out the **parameter
    properties** below the list of parameters. For the Bus Stop feature class, the
    defaults will be acceptable, as the feature class is required, is not a multi-value,
    has no default or environment settings, and is not obtained from any other parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Bus Stop feature class as a parameter](img/8662OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of the parameters will require another parameter to be selected first as
    they are derived values obtained from the first parameter. The Census Block Field
    parameter and the SQL statement parameter derive values from the Census Block
    feature class and Bus Stop feature class parameters, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Census Block feature class as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Census Block feature class is similar to the Bus Stop feature class. It
    will be a Feature Class data type, allowing both shapefiles and feature classes
    to be selected, and there is no need to adjust the default parameter properties.
    Once the data type has been set, the **Census Block** parameter is ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Census Block field as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Census Block** field parameter has a new twist; it is obtained from the
    Census Block feature class parameter, and will only be populated once that first
    parameter has been created. To make this possible, the **Obtained from parameter**
    property will have to be set. Select **Field** as the data type, and then click
    on the blank area next to the **Obtained from parameter** property and select
    **Census_Block_Feature_Class**. This will create a list of the fields contained
    within the **Census Block feature class**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Census Block field as a parameter](img/8662OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the output spreadsheet as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the spreadsheet that will be produced from the analysis run by the script
    tool is a **Comma Separated Value** (**CSV**) file, select **Text File** as the
    **Data Type**. Setting the **Default** parameter property to a file name can save
    time, and will make the required file extension easier to identify. Also, as the
    spreadsheet will be produced by the Script tool as an output, the **Direction**
    parameter property should be **Output**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the output spreadsheet as a parameter](img/8662OS_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the spreadsheet field names as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The field names chosen as headers for the output spreadsheet should be a **String**
    data type, with the field names separated by commas and no spaces. The script
    uses the string data type's `split` method to separate the field names. Passing
    a comma to the `split` method separates the parameter by **splitting** the input
    string on the commas to create a list of field names. The list of field names
    will be used as a header by the `csv` module when creating the spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the spreadsheet field names as a parameter](img/8662OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the SQL Statement as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **SQL Statement** parameter will require the helpful SQL Expression Builder
    menu and should therefore be a **SQL Expression** data type. The SQL Expression
    Builder will use a field obtained from the Bus Stop feature class. Set the `Obtained
    from parameter` property to the Bus Stop feature class by clicking on that property
    and selecting **Bus_Stop_Feature_Class** from the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the SQL Statement as a parameter](img/8662OS_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the bus stop fields as a parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final parameter is the bus stop fields parameter, which is a **Field** data
    type that will be obtained from the **Bus Stop feature class**. Change the **MultiValue**
    parameter property from **No** to **Yes** to allow the user to select multiple
    fields. Also remember to set the **Obtained** **from parameter** property to **Bus_Stop_Feature_Class**
    so that the fields are populated from the Bus Stop feature class parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the bus stop fields as a parameter](img/8662OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that all the parameters have been described and their properties have been
    set, the script tool is ready. Click on **Finish** to close the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the final script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once all of the parameters have been collected, the variables are then used
    to replace the hard-coded field lists or other static script elements with the
    new dynamic parameters collected from the script tool. In this manner, the script
    has become a valuable tool that can be used for multiple data analyses, as the
    fields to be analyzed are now dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The variable `x` was added to keep track of the members of the dictionary `dataDic`,
    which in the script in [Chapter 6](ch06.html "Chapter 6. Working with ArcPy Geometry
    Objects"), *Working with ArcPy Geometry Objects* had relied on the `STOPID` field.
    To eliminate this dependency, `x` was introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Script Tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the frontend has been designed to accept parameters from a user, and
    the backend script is ready to accept the parameters from the frontend, the tool
    is ready to be executed. Double click on the **Script Tool** in the toolbox to
    open the tool dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the Script Tool](img/8662OS_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select the parameters as with any ArcToolbox tool (for example using the file
    dialog to navigate a file tree to the **Bus Stop feature class**). Once the parameters
    have been set, click on **OK** to execute the script.
  prefs: []
  type: TYPE_NORMAL
- en: One optional adjustment would be to add an `arcpy.AddMessage` line where the
    average population is calculated. By doing this, the individual block population
    would be displayed and the script console would give feedback about the progress
    of the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert in the script just below the line where the variable `finalData` is
    defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The feedback provided by this line will make it obvious that the script is working,
    which is useful when the script executes a long analysis. When performing long
    analyses, it is good practice to provide feedback to the user so that they can
    see that the script is working as expected. Pass newline characters (`\n`) as
    parameters to `arcpy.AddMessage` when there is a large amount of data being passed
    to `arcpy.AddMessage`. This will break up the data into discrete chunks and make
    it easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to convert a script into a permanent and sharable
    script tool that can be used by an ArcGIS user with no programming experience.
    By creating a frontend using the familiar ArcGIS tool interface, and then passing
    parameters to custom built tools that employ ArcPy, GIS programmers can combine
    the ease of use of the ArcToolbox with the power of Python.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how to use ArcPy to control the export
    of maps from map documents. By adjusting map elements such as titles and legends,
    we can create dynamic map outputs to reflect the nature of the data produced by
    map analysis. In [Chapter 9](ch09.html "Chapter 9. More ArcPy.Mapping Techniques"),
    *More Arcpy.Mapping Techniques* we will add the output of maps to our script tool
    created in this chapter.
  prefs: []
  type: TYPE_NORMAL
