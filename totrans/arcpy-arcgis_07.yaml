- en: Chapter 7. Creating a Script Tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 创建脚本工具
- en: Now that the basics of creating and executing ArcPy scripts have been covered,
    we need to take the next step and create re-useable **Script tools**. Creating
    Script tools will allow for greater code reuse, and will make it easy to create
    custom tools for other GIS analysts and customers. With a Python script **backend**
    or code, and a familiar ArcGIS tool **frontend** or user interface, the particulars
    of the code are hidden from the user; it becomes just another tool, albeit a tool
    that can save days and weeks of work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了创建和执行ArcPy脚本的基础，我们需要采取下一步，创建可重用的**脚本工具**。创建脚本工具将允许代码的重用性更高，并使为其他GIS分析师和客户创建自定义工具变得容易。通过Python脚本**后端**或代码和熟悉的ArcGIS工具**前端**或用户界面，代码的细节对用户来说是隐藏的；它变成了另一个工具，尽管是一个可以节省数天和数周工作的工具。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding parameters to scripts to accept input and produce output as required
    by the user
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向脚本添加参数以接受输入并按用户需求生成输出
- en: Creating a custom tool frontend and a custom toolbox
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义工具前端和自定义工具箱
- en: Setting the parameters of the tool frontend to allow it to pass arguments to
    the code backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工具前端参数设置以允许其传递参数到代码后端
- en: Adding dynamic parameters to a script
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向脚本添加动态参数
- en: The scripts we have generated in previous chapters have all had **hard-coded**
    inputs. The input values were written in the script as strings or numbers and
    assigned to variables. While they can be updated manually to replace the input
    and output file paths and SQL statements, programmers should aim to create scripts
    that will not require editing each time they are used. Instead, scripts should
    be designed to be dynamic and accept file paths and other inputs as parameters
    or arguments, in much the same manner that the functions we have created accept
    parameters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中生成的脚本都使用了**硬编码**的输入。输入值以字符串或数字的形式写入脚本中，并分配给变量。虽然它们可以被手动更新以替换输入和输出文件路径以及SQL语句，但程序员应致力于创建每次使用时无需编辑的脚本。相反，脚本应设计为动态的，并接受文件路径和其他输入作为参数或参数，这与我们创建的函数接受参数的方式非常相似。
- en: Python was designed with this in mind, and the `sys` module has a method called
    `sys.argv` that accepts inputs passed to the script when it is executed. While
    the designers of ArcPy and its predecessor `arcgisscripting module` initially
    took advantage of the `sys.argv` method, in time they designed an ArcPy method
    for accepting script parameters. As either method can be used when writing ArcPy
    scripts, and both are found in example scripts on the web, it is important to
    recognize the minute differences between the `sys.argv` method and `arcpy.GetParameterAsText()`.
    The major difference between the two methods is that `sys.argv` accepts the dynamic
    arguments as a list. Members of the list are accessed using list indexing and
    assigned to variables. `Arcpy.GetParameterAsText()` is a function that accepts
    an index number parameter. The index number passed reflects the order of the parameter
    within the tool's frontend; the first parameter is zero, the next is one, and
    so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python的设计考虑了这一点，`sys`模块中有一个名为`sys.argv`的方法，它接受在脚本执行时传递给脚本的输入。虽然ArcPy及其前身`arcgisscripting模块`的设计者在最初利用了`sys.argv`方法，但随着时间的推移，他们为接受脚本参数设计了ArcPy方法。由于在编写ArcPy脚本时可以使用这两种方法，并且两者都可在网络上的示例脚本中找到，因此识别`sys.argv`方法和`arcpy.GetParameterAsText()`之间的细微差别很重要。这两种方法的主要区别在于`sys.argv`将动态参数作为一个列表接受。列表的成员通过列表索引访问并分配给变量。`Arcpy.GetParameterAsText()`是一个接受索引号参数的函数。传递的索引号反映了参数在工具前端中的顺序；第一个参数是零，下一个是一，依此类推。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the order of the parameters is adjusted in the tool frontend, this adjustment
    must be reflected in the code backend.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在工具前端调整了参数的顺序，这种调整必须在代码后端得到反映。
- en: Displaying script messages using arcpy.AddMessage
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用arcpy.AddMessage显示脚本消息
- en: It is important to receive feedback from scripts to assess the progress of the
    script as it performs an analysis. As basic as this would seem, Python scripts
    and programming languages in general do not, by default, provide any feedback
    except for errors and the termination of the script. This can be a bit discouraging
    to the novice programmer, as all built-in feedback is negative.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从脚本中获取反馈以评估脚本在执行分析时的进度非常重要。尽管这看起来很简单，但Python脚本和编程语言通常默认不提供任何反馈，除了错误和脚本的终止。这对新手程序员来说可能有点令人沮丧，因为所有内置的反馈都是负面的。
- en: To alleviate this lack of feedback, the use of print statements allows the script
    to give reports on the progress of the analysis as it runs. However, when using
    a Script tool, `print` statements do not have any effect. They will not be displayed
    anywhere, and are ignored by the Python executable. To display messages in the
    script console when Script tools are executed, ArcPy has a `arcpy.AddMessage()`
    method.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这种缺乏反馈的情况，使用打印语句可以让脚本在运行时报告分析进度。然而，当使用脚本工具时，`print` 语句没有任何效果。它们不会在任何地方显示，并且被
    Python 可执行文件忽略。要在执行脚本工具时在脚本控制台中显示消息，ArcPy 有一个 `arcpy.AddMessage()` 方法。
- en: '`Arcpy.AddMessage` statements are added to scripts wherever feedback is required
    by the programmer. The feedback required is passed to the method as a parameter
    and displayed; whether it be a list, string, float or integer. `Arcpy.AddMessage`
    makes it easy to check on the results of analysis calculations, to ensure that
    the correct inputs are used and that the correct outputs are produced. As this
    feedback from the script can be a powerful debugging tool, use `arcpy.AddMessage`
    whenever there is a need for feedback from the Script tool.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Arcpy.AddMessage` 语句被添加到脚本中，以便程序员需要反馈的地方。所需的反馈作为参数传递给方法并显示；无论是列表、字符串、浮点数还是整数。`Arcpy.AddMessage`
    使得检查分析计算的结果变得容易，以确保使用了正确的输入并产生了正确的输出。由于脚本中的这种反馈可以是强大的调试工具，因此每当需要从脚本工具获取反馈时，都应使用
    `arcpy.AddMessage`。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that statements passed to `arcpy.AddMessage` will only display when the
    script is run as a Script tool.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，传递给 `arcpy.AddMessage` 的语句仅在脚本作为脚本工具运行时才会显示。
- en: Adding dynamic components to the script
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向脚本添加动态组件
- en: To start making the script into a Script tool, we should first copy the script
    that we created in [Chapter 6](ch06.html "Chapter 6. Working with ArcPy Geometry
    Objects"), *Working with ArcPy Geometry Objects* `Chapter6_1.py`, as `Chapter7_1.py`
    in a new folder called `Chapter7`. We can then start replacing the hard-coded
    variables with dynamic variables using `arcpy.GetParameterAsText`. There is another
    ArcPy method called `GetParameter` that accepts the inputs as an object, but for
    our purposes, `GetParameterAsText` is the method to use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始将脚本转换为脚本工具，我们应首先将我们在 [第 6 章](ch06.html "第 6 章。使用 ArcPy 几何对象") 中创建的脚本 *使用
    ArcPy 几何对象* `Chapter6_1.py` 复制到名为 `Chapter7` 的新文件夹中，并将其重命名为 `Chapter7_1.py`。然后，我们可以开始使用
    `arcpy.GetParameterAsText` 替换硬编码的变量为动态变量。还有一个名为 `GetParameter` 的 ArcPy 方法，它接受对象作为输入，但就我们的目的而言，`GetParameterAsText`
    是要使用的方法。
- en: By adding `arcpy`.`GetParameterAsText` and `arcpy.AddMessage` to the script,
    we will have taken the first step towards creating a Script tool. Care must be
    taken to ensure that the variables created from the dynamic parameters are in
    the correct order, as reordering them can be time-consuming. Once the parameters
    are added to the script and the hard-coded portions of the script replaced with
    variables, the script is ready to become a Script tool.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `arcpy`.`GetParameterAsText` 和 `arcpy.AddMessage` 添加到脚本中，我们将迈出创建脚本工具的第一步。必须小心确保从动态参数创建的变量顺序正确，因为重新排序可能会很耗时。一旦将参数添加到脚本中，并将脚本的硬编码部分替换为变量，脚本就准备好成为脚本工具了。
- en: 'First, move all of the variables that are hard-coded into the top of the script.
    Then, replace all of the assigned values with `arcpy.GetParameterAsText`, making
    them dynamic values. Each parameter is referred to using zero-based indexing;
    however, they are passed to a function individually instead of as a member of
    a list:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将所有硬编码的变量移动到脚本的顶部。然后，将所有分配的值替换为 `arcpy.GetParameterAsText`，使它们成为动态值。每个参数都使用零基索引进行引用；然而，它们是单独传递给函数的，而不是作为列表的成员：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the variable `keyfields` and the variable headers, some
    further processing must be applied to certain variables, as not all of them are
    going to be used as strings. In this case, a list is created from the string passed
    to the variable `keyfields` by using the `string` functions split and splitting
    the string on every semi-colon, while the `headers` variable is created by splitting
    on the commas. To other variables, such as the `censusBlockField` variable and
    the variable keyfields, the `SHAPE@` keyword is added because it will be required
    each time the analysis is run. If a particular field is required for each run
    of the data, such as the `BLOCKID10` field, it can remain hard-coded in the script,
    or optionally could become its own selectable field parameter in the Script tool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从变量`keyfields`和变量标题中看到的那样，必须对某些变量应用进一步的处理，因为并非所有变量都将作为字符串使用。在这种情况下，通过使用`string`函数split和在每个分号上拆分传递给变量`keyfields`的字符串来创建一个列表，而`headers`变量是通过逗号拆分创建的。对于其他变量，如`censusBlockField`变量和`keyfields`变量，添加了`SHAPE@`关键字，因为每次运行分析时都需要它。如果需要为每次数据运行指定特定的字段，例如`BLOCKID10`字段，则它可以保留为硬编码在脚本中，或者可以选择成为脚本工具中可选择的字段参数。
- en: The variables will then be added to the remainder of the script in the correct
    places, making the script ready for the Script tool to become part of a custom
    Toolbox in a geodatabase or in ArcToolbox. However, we must first create the tool
    part of the Script tool for the values to be collected and passed to the script.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将变量添加到脚本的正确位置，使脚本准备好成为地理数据库或ArcToolbox中自定义工具箱的一部分的脚本工具。然而，我们必须首先创建脚本工具的工具部分，以便收集值并将其传递到脚本中。
- en: Creating a Script tool
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建脚本工具
- en: Creating a script tool is a powerful combination of the power of ArcPy and the
    ease of use of the tools in ArcToolbox.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建脚本工具是ArcPy的强大功能和ArcToolbox中工具易用性的强大组合。
- en: 'The first step is to create a custom toolbox to hold the script tool. To achieve
    this, do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个自定义工具箱来存放脚本工具。为了实现这一点，请执行以下操作：
- en: Open up **ArcCatalog** and right click in the **SanFrancisco.gdb** File Geodatabase.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**ArcCatalog**，在**SanFrancisco.gdb**文件地理数据库上右键单击。
- en: Select **New** and then **Toolbox** from the menu.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择**新建**，然后选择**工具箱**。
- en: Call the toolbox **Chapter8Tools**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工具箱命名为**Chapter8Tools**。
- en: Right click on **Chapter8Tools**, select **Add**, and then select **Script**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Chapter8Tools**上右键单击，选择**添加**，然后选择**脚本**。
- en: The following menu will appear allowing you to set up the script tool. Add a
    title with no spaces and a label, as well as a description. I prefer to run script
    tools in the foreground to see the messages it passes, but it is not necessary
    and can be annoying when needing to start a script and still work on other tasks.
    Click **Next** once the menu has been filled out.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下菜单将出现，允许您设置脚本工具。添加一个无空格的标题和标签，以及描述。我更喜欢在前台运行脚本工具以查看其传递的消息，但这不是必需的，并且在需要启动脚本并继续其他任务时可能会令人烦恼。一旦菜单填写完毕，点击**下一步**。
- en: '![Creating a Script tool](img/8662OS_07_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建脚本工具](img/8662OS_07_01.jpg)'
- en: The next menu contains an entry field and a file dialog button, allowing the
    user to find the script to which the parameters collected will be passed. Use
    the file dialog to navigate to and select the script, and make sure that **Run
    Python script in process** is checked.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下一菜单包含一个输入字段和一个文件对话框按钮，允许用户找到将传递收集到的参数的脚本。使用文件对话框导航到并选择脚本，并确保已勾选**在进程中运行Python脚本**。
- en: '![Creating a Script tool](img/8662OS_07_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建脚本工具](img/8662OS_07_02.jpg)'
- en: Now, push **Next** once the script has been identified.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦脚本被识别，点击**下一步**。
- en: '![Creating a Script tool](img/8662OS_07_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![创建脚本工具](img/8662OS_07_03.jpg)'
- en: Labelling and defining parameters
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记和定义参数
- en: The next dialog box is the most important one. It is where the parameters to
    be passed are labeled and their data types are defined. Care must be taken to
    choose the correct data type for each parameter as there are multiple data types
    that can be supplied for some of the parameters. Also, properties for each parameter
    will be defined; this information will characterize the data to be collected and
    help to make it possible for the data to be in the correct format as well as the
    correct data type.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个对话框是最重要的一个。在这里，将要传递的参数被标记并且定义了它们的数据类型。必须仔细选择每个参数的正确数据类型，因为某些参数可以提供多种数据类型。此外，每个参数的属性也将被定义；这些信息将表征要收集的数据，并有助于确保数据以正确的格式以及正确的数据类型存在。
- en: Start by adding the display name for each parameter to be collected. The display
    name should explain the type of input that is required. For instance, the first
    parameter will be the bus stop's feature class, so the display name could be **Bus
    Stop Feature Class**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先添加要收集的每个参数的显示名。显示名应该解释所需的输入类型。例如，第一个参数将是公交车站的要素类，所以显示名可以是**公交车站要素类**。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure to add the display names in the order that they will be passed to
    variables in the script.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确保按照它们在脚本中传递给变量的顺序添加显示名。
- en: '![Labelling and defining parameters](img/8662OS_07_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![标记和定义参数](img/8662OS_07_04.jpg)'
- en: Adding data types
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加数据类型
- en: Next, add in the **Data Types** for each parameter. This is intricate because
    there will be a large list of data types to choose from, and often there are a
    few types that would work for many parameters. For instance, if a shapefile parameter
    is created, it would allow the user to select a shapefile as expected. However,
    it might be better to use the Feature Class data type, as then both shapefiles
    and feature classes could be used in the analysis.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为每个参数添加**数据类型**。这很复杂，因为将有一个很长的数据类型列表可供选择，并且通常有几个类型可以适用于许多参数。例如，如果创建了一个shapefile参数，它将允许用户选择一个shapefile，正如预期的那样。然而，使用要素类数据类型可能更好，因为这样就可以在分析中使用shapefiles和要素类。
- en: Adding the Bus Stop feature class as a parameter
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将公交车站要素类添加为参数
- en: The first parameter is the **Bus Stop feature class**, and it should be a **Feature
    Class** data type. Click on the **Data Type Field** next to the display name and
    a drop-down list will appear. Once the data type is selected, check out the **parameter
    properties** below the list of parameters. For the Bus Stop feature class, the
    defaults will be acceptable, as the feature class is required, is not a multi-value,
    has no default or environment settings, and is not obtained from any other parameter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是**公交车站要素类**，它应该是一个**要素类**数据类型。点击显示名旁边的**数据类型字段**，将出现一个下拉列表。一旦选择了数据类型，就可以查看参数列表下方的**参数属性**。对于公交车站要素类，默认值是可以接受的，因为要素类是必需的，不是多值，没有默认或环境设置，并且不是从任何其他参数获取的。
- en: '![Adding the Bus Stop feature class as a parameter](img/8662OS_07_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![将公交车站要素类添加为参数](img/8662OS_07_05.jpg)'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the parameters will require another parameter to be selected first as
    they are derived values obtained from the first parameter. The Census Block Field
    parameter and the SQL statement parameter derive values from the Census Block
    feature class and Bus Stop feature class parameters, respectively.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一些参数将需要先选择另一个参数，因为它们是从第一个参数派生出来的值。人口普查区块字段参数和SQL语句参数分别从人口普查区块要素类和公交车站要素类参数派生值。
- en: Adding the Census Block feature class as a parameter
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将人口普查区块要素类添加为参数
- en: The Census Block feature class is similar to the Bus Stop feature class. It
    will be a Feature Class data type, allowing both shapefiles and feature classes
    to be selected, and there is no need to adjust the default parameter properties.
    Once the data type has been set, the **Census Block** parameter is ready for use.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 人口普查区块要素类与公交车站要素类相似。它将是一个要素类数据类型，允许选择shapefiles和要素类，并且不需要调整默认参数属性。一旦设置了数据类型，**人口普查区块**参数就准备好使用了。
- en: Adding the Census Block field as a parameter
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将人口普查区块字段添加为参数
- en: The **Census Block** field parameter has a new twist; it is obtained from the
    Census Block feature class parameter, and will only be populated once that first
    parameter has been created. To make this possible, the **Obtained from parameter**
    property will have to be set. Select **Field** as the data type, and then click
    on the blank area next to the **Obtained from parameter** property and select
    **Census_Block_Feature_Class**. This will create a list of the fields contained
    within the **Census Block feature class**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**人口普查区块**字段参数有一个新的变化；它从人口普查区块要素类参数中获取，并且只有在创建第一个参数后才会填充。为了实现这一点，必须设置**获取自参数**属性。选择**字段**作为数据类型，然后点击**获取自参数**属性旁边的空白区域，并从下拉列表中选择**Census_Block_Feature_Class**。这将创建一个包含在**人口普查区块要素类**中的字段列表。'
- en: '![Adding the Census Block field as a parameter](img/8662OS_07_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![将人口普查区块字段作为参数添加](img/8662OS_07_06.jpg)'
- en: Adding the output spreadsheet as a parameter
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将输出电子表格作为参数添加
- en: As the spreadsheet that will be produced from the analysis run by the script
    tool is a **Comma Separated Value** (**CSV**) file, select **Text File** as the
    **Data Type**. Setting the **Default** parameter property to a file name can save
    time, and will make the required file extension easier to identify. Also, as the
    spreadsheet will be produced by the Script tool as an output, the **Direction**
    parameter property should be **Output**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于脚本工具通过分析运行产生的电子表格是一个**逗号分隔值**（**CSV**）文件，因此选择**文本文件**作为**数据类型**。将**默认**参数属性设置为文件名可以节省时间，并将所需的文件扩展名更容易识别。此外，由于电子表格将由脚本工具作为输出生成，因此**方向**参数属性应该是**输出**。
- en: '![Adding the output spreadsheet as a parameter](img/8662OS_07_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![将输出电子表格作为参数添加](img/8662OS_07_07.jpg)'
- en: Adding the spreadsheet field names as a parameter
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将电子表格字段名称作为参数添加
- en: The field names chosen as headers for the output spreadsheet should be a **String**
    data type, with the field names separated by commas and no spaces. The script
    uses the string data type's `split` method to separate the field names. Passing
    a comma to the `split` method separates the parameter by **splitting** the input
    string on the commas to create a list of field names. The list of field names
    will be used as a header by the `csv` module when creating the spreadsheet.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为输出电子表格的表头选择的字段名称应该是**字符串**数据类型，字段名称之间用逗号分隔，没有空格。脚本使用字符串数据类型的`split`方法来分隔字段名称。将逗号传递给`split`方法通过在逗号上分割输入字符串来分隔参数，从而创建一个字段名称列表。该字段名称列表将被`csv`模块用作创建电子表格的表头。
- en: '![Adding the spreadsheet field names as a parameter](img/8662OS_07_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![将电子表格字段名称作为参数添加](img/8662OS_07_08.jpg)'
- en: Adding the SQL Statement as a parameter
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 SQL 语句作为参数添加
- en: The **SQL Statement** parameter will require the helpful SQL Expression Builder
    menu and should therefore be a **SQL Expression** data type. The SQL Expression
    Builder will use a field obtained from the Bus Stop feature class. Set the `Obtained
    from parameter` property to the Bus Stop feature class by clicking on that property
    and selecting **Bus_Stop_Feature_Class** from the drop-down list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 语句**参数将需要有用的 SQL 表达式构建器菜单，因此应该是**SQL 表达式**数据类型。SQL 表达式构建器将使用从公交车站要素类获取的字段。通过点击该属性并从下拉列表中选择**Bus_Stop_Feature_Class**来将`Obtained
    from parameter`属性设置为公交车站要素类。'
- en: '![Adding the SQL Statement as a parameter](img/8662OS_07_09.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![将 SQL 语句作为参数添加](img/8662OS_07_09.jpg)'
- en: Adding the bus stop fields as a parameter
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将公交车站字段作为参数添加
- en: The final parameter is the bus stop fields parameter, which is a **Field** data
    type that will be obtained from the **Bus Stop feature class**. Change the **MultiValue**
    parameter property from **No** to **Yes** to allow the user to select multiple
    fields. Also remember to set the **Obtained** **from parameter** property to **Bus_Stop_Feature_Class**
    so that the fields are populated from the Bus Stop feature class parameter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数是公交车站字段参数，它是一个**字段**数据类型，将从**公交车站要素类**中获取。将**多值**参数属性从**否**更改为**是**，以允许用户选择多个字段。同时，请记住将**获取自参数**属性设置为**Bus_Stop_Feature_Class**，以便字段从公交车站要素类参数中填充。
- en: '![Adding the bus stop fields as a parameter](img/8662OS_07_10.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![将公交车站字段作为参数添加](img/8662OS_07_10.jpg)'
- en: Now that all the parameters have been described and their properties have been
    set, the script tool is ready. Click on **Finish** to close the menu.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有参数都已描述，并且它们的属性已设置，脚本工具就绪。点击**完成**以关闭菜单。
- en: Inspecting the final script
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查最终脚本
- en: 'Once all of the parameters have been collected, the variables are then used
    to replace the hard-coded field lists or other static script elements with the
    new dynamic parameters collected from the script tool. In this manner, the script
    has become a valuable tool that can be used for multiple data analyses, as the
    fields to be analyzed are now dynamic:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集了所有参数，这些变量随后被用来替换硬编码的字段列表或其他静态脚本元素，用从脚本工具收集的新动态参数替换：这样，脚本就变成了一种宝贵的工具，可以用于多次数据分析，因为现在要分析的字段是动态的：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The variable `x` was added to keep track of the members of the dictionary `dataDic`,
    which in the script in [Chapter 6](ch06.html "Chapter 6. Working with ArcPy Geometry
    Objects"), *Working with ArcPy Geometry Objects* had relied on the `STOPID` field.
    To eliminate this dependency, `x` was introduced.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`x`被添加来跟踪字典`dataDic`的成员，在[第6章](ch06.html "第6章。使用ArcPy几何对象")*使用ArcPy几何对象*的脚本中，它依赖于`STOPID`字段。为了消除这种依赖性，引入了`x`。
- en: Running the Script Tool
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行脚本工具
- en: Now that the frontend has been designed to accept parameters from a user, and
    the backend script is ready to accept the parameters from the frontend, the tool
    is ready to be executed. Double click on the **Script Tool** in the toolbox to
    open the tool dialog box.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在前端已经设计好，可以接受用户的参数，后端脚本也准备好接受来自前端的数据，工具现在可以执行了。在工具箱中双击**脚本工具**以打开工具对话框。
- en: '![Running the Script Tool](img/8662OS_07_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![运行脚本工具](img/8662OS_07_11.jpg)'
- en: Select the parameters as with any ArcToolbox tool (for example using the file
    dialog to navigate a file tree to the **Bus Stop feature class**). Once the parameters
    have been set, click on **OK** to execute the script.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 选择参数，就像使用任何ArcToolbox工具一样（例如，使用文件对话框导航文件树到**公交车站特征类**）。一旦设置了参数，点击**确定**以执行脚本。
- en: One optional adjustment would be to add an `arcpy.AddMessage` line where the
    average population is calculated. By doing this, the individual block population
    would be displayed and the script console would give feedback about the progress
    of the script.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可选的调整是在计算平均人口的地方添加一个`arcpy.AddMessage`行。通过这样做，可以显示单个区块的人口，并且脚本控制台会提供关于脚本进度的反馈。
- en: 'Insert in the script just below the line where the variable `finalData` is
    defined:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中变量`finalData`定义的下一行插入：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The feedback provided by this line will make it obvious that the script is working,
    which is useful when the script executes a long analysis. When performing long
    analyses, it is good practice to provide feedback to the user so that they can
    see that the script is working as expected. Pass newline characters (`\n`) as
    parameters to `arcpy.AddMessage` when there is a large amount of data being passed
    to `arcpy.AddMessage`. This will break up the data into discrete chunks and make
    it easier to read.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行提供的反馈将清楚地表明脚本正在运行，这在脚本执行长时间分析时很有用。在执行长时间分析时，向用户提供反馈是一个好习惯，这样他们就可以看到脚本按预期工作。当有大量数据传递给`arcpy.AddMessage`时，将换行符（`\n`）作为参数传递。这将把数据分成离散的块，使其更容易阅读。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to convert a script into a permanent and sharable
    script tool that can be used by an ArcGIS user with no programming experience.
    By creating a frontend using the familiar ArcGIS tool interface, and then passing
    parameters to custom built tools that employ ArcPy, GIS programmers can combine
    the ease of use of the ArcToolbox with the power of Python.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将脚本转换成一个永久性和可共享的脚本工具，它可以被没有任何编程经验的ArcGIS用户使用。通过使用熟悉的ArcGIS工具界面创建前端，然后将参数传递给使用ArcPy构建的自定义工具，GIS程序员可以将ArcToolbox的易用性与Python的强大功能结合起来。
- en: In the next chapter, we will explore how to use ArcPy to control the export
    of maps from map documents. By adjusting map elements such as titles and legends,
    we can create dynamic map outputs to reflect the nature of the data produced by
    map analysis. In [Chapter 9](ch09.html "Chapter 9. More ArcPy.Mapping Techniques"),
    *More Arcpy.Mapping Techniques* we will add the output of maps to our script tool
    created in this chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用ArcPy控制从地图文档导出地图。通过调整地图元素，如标题和图例，我们可以创建动态的地图输出，以反映地图分析产生的数据特性。在[第9章](ch09.html
    "第9章。更多ArcPy映射技术")*更多Arcpy映射技术*中，我们将把地图的输出添加到本章创建的脚本工具中。
