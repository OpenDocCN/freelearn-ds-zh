["```py\nconda install blaze\n\n```", "```py\nconda install sqlalchemy\nconda install pymongo\n\n```", "```py\nimport blaze as bl\n```", "```py\nimport numpy as np\nsimpleArray = np.array([\n        [1,2,3],\n        [4,5,6]\n    ])\n```", "```py\nsimpleData_np = bl.Data(simpleArray)\n```", "```py\nsimpleData_np.peek()\n```", "```py\nsimpleData_np[0]\n```", "```py\nsimpleData_np.T[0]\n```", "```py\nsimpleData_np = bl.Data(simpleArray, fields=['a', 'b', 'c'])\n```", "```py\nsimpleData_np['b']\n```", "```py\nimport pandas as pd\n```", "```py\nsimpleDf = pd.DataFrame([\n        [1,2,3],\n        [4,5,6]\n    ], columns=['a','b','c'])\n```", "```py\nsimpleData_df = bl.Data(simpleDf)\n```", "```py\nsimpleData_df['a']\n```", "```py\nimport odo\ntraffic = bl.Data('../Data/TrafficViolations.csv')\n```", "```py\nprint(traffic.fields)\n```", "```py\ntraffic_gz = bl.Data('../Data/TrafficViolations.csv.gz')\n```", "```py\ntraffic.head(2)\n```", "```py\ntraffic_gz.head(2)\n```", "```py\nimport odo\nfor year in traffic.Stop_year.distinct().sort():\n    odo.odo(traffic[traffic.Stop_year == year], \n        '../Data/Years/TrafficViolations_{0}.csv.gz'\\\n        .format(year))\n```", "```py\ntraffic_multiple = bl.Data(\n    '../Data/Years/TrafficViolations_*.csv.gz')\ntraffic_multiple.head(2)\n```", "```py\ntraffic_psql = bl.Data(\n    'postgresql://{0}:{1}@localhost:5432/drabast::traffic'\\\n    .format('<your_username>', '<your_password>')\n)\n```", "```py\ntraffic_2016 = traffic_psql[traffic_psql['Year'] == 2016]\n# Drop commands\n# odo.drop('sqlite:///traffic_local.sqlite::traffic2016')\n# odo.drop('postgresql://{0}:{1}@localhost:5432/drabast::traffic'\\\n.format('<your_username>', '<your_password>'))\n# Save to SQLite\nodo.odo(traffic_2016,\n'sqlite:///traffic_local.sqlite::traffic2016')\n# Save to PostgreSQL\nodo.odo(traffic_2016,  \n    'postgresql://{0}:{1}@localhost:5432/drabast::traffic'\\\n    .format('<your_username>', '<your_password>'))\n```", "```py\ntraffic_sqlt = bl.Data(\n    'sqlite:///traffic_local.sqlite::traffic2016'\n)\n```", "```py\ntraffic_mongo = bl.Data(\n    'mongodb://localhost:27017/packt::traffic'\n)\n```", "```py\ntraffic.Year.head(2)\n```", "```py\n(traffic[['Location', 'Year', 'Accident', 'Fatal', 'Alcohol']]\n    .head(2))\n```", "```py\n    SELECT *\n    FROM traffic\n    LIMIT 2\n    ```", "```py\nschema_example = bl.symbol('schema_exampl', \n                           '{id: int, name: string}')\n```", "```py\ntraffic_s = bl.symbol('traffic', traffic.dshape)\ntraffic_2013 = traffic_s[traffic_s['Stop_year'] == 2013][\n    ['Stop_year', 'Arrest_Type','Color', 'Charge']\n]\n```", "```py\ntraffic_pd = pd.read_csv('../Data/TrafficViolations.csv')\n```", "```py\nbl.compute(traffic_2013, traffic_pd).head(2)\n```", "```py\nbl.compute(traffic_2013, traffic_pd.values)[0:2]\n```", "```py\ntraffic['Stop_year'].distinct().sort()\n```", "```py\ntraffic['Stop_year'].unique().sort()\n```", "```py\nSELECT DISTINCT Stop_year\nFROM traffic\n```", "```py\ntraffic['Stop_year'].head(2) - 2000\n```", "```py\nSELECT Stop_year - 2000 AS Stop_year\nFROM traffic\n```", "```py\nbl.log(traffic['Stop_year']).head(2)\n```", "```py\ntraffic['Stop_year'].max()\n```", "```py\nSELECT MAX(Stop_year) AS Stop_year_max\nFROM traffic\n```", "```py\ntraffic = bl.transform(traffic,\n             Age_of_car = traffic.Stop_year - traffic.Year)\ntraffic.head(2)\n```", "```py\ntraffic['Age_of_car'] = traffic.apply(\n    lambda row: row.Stop_year - row.Year,\n    axis = 1\n)\n```", "```py\nSELECT *\n    , Stop_year - Year AS Age_of_car\nFROM traffic\n```", "```py\nbl.by(traffic['Fatal'], \n      Fatal_AvgAge=traffic.Age_of_car.mean(),\n      Fatal_Count =traffic.Age_of_car.count()\n)\n```", "```py\ntraffic\\\n    .groupby('Fatal')['Age_of_car']\\\n    .agg({\n        'Fatal_AvgAge': np.mean,\n        'Fatal_Count':  np.count_nonzero\n    })\n```", "```py\nSELECT Fatal\n    , AVG(Age_of_car)   AS Fatal_AvgAge\n    , COUNT(Age_of_car) AS Fatal_Count\nFROM traffic\nGROUP BY Fatal\n```", "```py\nviolation = traffic[\n    ['Stop_month','Stop_day','Stop_year',\n     'Stop_hr','Stop_min','Stop_sec','Violation_Type']]\nbelts = traffic[\n    ['Stop_month','Stop_day','Stop_year',\n     'Stop_hr','Stop_min','Stop_sec','Belts']]\n```", "```py\nviolation_belts = bl.join(violation, belts, \n      ['Stop_month','Stop_day','Stop_year',\n       'Stop_hr','Stop_min','Stop_sec'])\n```", "```py\nbl.by(violation_belts[['Violation_Type', 'Belts']],\n      Violation_count=violation_belts.Belts.count()\n).sort('Violation_count', ascending=False)\n```", "```py\nviolation.merge(belts, \n    on=['Stop_month','Stop_day','Stop_year',\n        'Stop_hr','Stop_min','Stop_sec']) \\\n    .groupby(['Violation_type','Belts']) \\\n    .agg({\n        'Violation_count':  np.count_nonzero\n    }) \\\n    .sort('Violation_count', ascending=False)\n```", "```py\nSELECT innerQuery.*\nFROM (\n    SELECT a.Violation_type\n        , b.Belts\n        , COUNT() AS Violation_count\n    FROM violation AS a\n    INNER JOIN belts AS b\n        ON      a.Stop_month = b.Stop_month\n            AND a.Stop_day = b.Stop_day\n            AND a.Stop_year = b.Stop_year\n            AND a.Stop_hr = b.Stop_hr\n            AND a.Stop_min = b.Stop_min\n            AND a.Stop_sec = b.Stop_sec\n    GROUP BY Violation_type\n        , Belts\n) AS innerQuery\nORDER BY Violation_count DESC\n```"]