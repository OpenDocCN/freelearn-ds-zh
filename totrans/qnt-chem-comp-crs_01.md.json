["```py\natom_list = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na','Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn','Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr','Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb','Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd','Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir','Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th','Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No','Lr','Rf']\n```", "```py\nl_orbital = ['s', 'p', 'd', 'f', 'g']\n```", "```py\nnl_pairs = []\nfor n in range(1,8):\n    for l in range(n):\n        nl_pairs.append((n+l, n, l))\nnl_pairs.sort()\nprint(nl_pairs[:9])\nprint(nl_pairs[9:18])\nprint(nl_pairs[18:len(nl_pairs)])\n```", "```py\nnl_idx, n_elec = 0, 0\nn, l = 1, 0\nconfig = [['1s', 0]]\nel_config = {}\n```", "```py\ndef superscript(n):\n    return \"\".join([\"⁰123⁴⁵⁶⁷⁸⁹\"[ord(c)-ord('0')] for c in str(n)]) \n```", "```py\nfor element in atom_list:\n    n_elec += 1\n    if n_elec > 2*(2*l+1):\n        # This subshell is full: start a new subshell\n        nl_idx += 1\n        _, n, l = nl_pairs[nl_idx]\n        config.append(['{}{}'.format(n, l_orbital[l]), 1])\n        n_elec = 1\n    else:\n        # Add an electron to the current subshell\n        config[-1][1] += 1\n    # Building configuration string from a list of orbitals and n_elec\n    el_config[element] = ' '.join(['{:2s}{:1s}'.format(e[0], \n                            superscript(e[1])) for e in config])\n```", "```py\nfor element in atom_list[:5]:\n  print('{:2s}: {}'.format(element, el_config[element]))\n```", "```py\nH: 1s¹\nHe: 1s²\nLi: 1s² 2s¹\nBe: 1s² 2s²\nB: 1s² 2s² 2p¹\n```", "```py\nelement = 'Mo'\nprint('{:2s}: {}'.format(element, el_config[element]))\n```", "```py\nMo: 1s² 2s² 2p⁶ 3s² 3p⁶ 4s² 3d¹⁰ 4p⁶ 5s² 4d⁴\n```"]