- en: Chapter 4. Automating Map Production and Printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list of layout elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning a unique name to layout elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the layout elements returned by ListLayoutElements()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the properties of layout elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of available printers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Printing maps with PrintMap()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a map to a PDF file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a map to an image file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a map book with Data Driven Pages and ArcPy mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing a map document to an ArcGIS Server service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module, released with ArcGIS 10, provides a number of capabilities
    related to the automation of map production. The `arcpy.mapping` module can be
    used to automate map production, build map books, export maps to image or PDF
    files, and create and manage PDF files. In this chapter, you'll learn how to use
    the `arcpy.mapping` module to automate various geoprocessing tasks related to
    map production and printing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list of layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, the first step in a geoprocessing script that automates the production
    of maps is to generate a list of the available layout elements. For example, you
    might need to update the title of your map before printing or creating a PDF file.
    In this case, the title is likely be stored in a `TextElement` object. You can
    generate a list of `TextElement` objects in your map layout view and then change
    the title. The first step is to generate a list of `TextElement` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ArcMap, two views are available, namely data view and layout view. **Data
    view** is used to view geographic and tabular data, analyze data, symbolize layers,
    and manage data without regard for any particular map page size or layout. **Layout
    view** shows the map as printed on a page, and is used to create production quality
    maps through the addition of map elements. These elements include map frames,
    layers, legends, titles, north arrows, scale bars, and title blocks. Each object
    in the layout is represented in `arcpy.mapping` as a layout element class. Examples
    of many of these layout element classes are displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each element can be assigned a unique name that can then be used to access the
    element programmatically. This unique name is defined in ArcMap. The `arcpy.mapping`
    module provides a `ListLayoutElements()` function that returns a list of all these
    elements. In this recipe, you will learn how to use the `ListLayoutElements()`
    function to generate a list of map layout elements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to generate a list of layout elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`) and assign this reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a list of layout elements and print them to the screen if the name
    property is not empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\CreateListLayoutElements.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ListLayoutElements()` returns a list of layout elements in the form of various
    layout classes. Each element can be one of the `GraphicElement`, `LegendElement`,
    `PictureElement`, `TextElement`, or `MapSurroundElement` object instances. Each
    element can have a unique name. You don''t have to assign a name to each element,
    but it is helpful to do so if you plan to access these elements programmatically
    in your scripts. In this script, we first made sure that the element had a name
    assigned to it before printing the name. This was done because ArcMap does not
    require that an element be assigned a name.'
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a unique name to layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's a good practice to assign a unique name to all your layout elements using
    ArcMap. This is important in the event that your geoprocessing scripts need to
    access a particular element to make changes. For example, you might need to update
    the icon that displays your corporate logo. Rather than making this change manually
    in all your map document files, you could write a geoprocessing script that updates
    all your map document files programmatically with the new logo. However, in order
    for this to be possible, a unique name will need to be assigned to your layout
    elements. This gives you the ability to access the elements of your layout individually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned in the previous recipe, each layout element will be one of a
    number of element types and each can be assigned a name. This element name can
    then be used when you need to reference a particular element in your Python script.
    You can use ArcMap to assign unique names to each layout element. In this recipe,
    you will use ArcMap to assign names to the elements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to assign unique names to each layout element
    using ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the layout view and you should see something similar to this screenshot:![How
    to do it…](img/B04314_04_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Names are assigned differently depending on the element type. Click on the uppermost
    data frame, which should be **Crime**, to select it. The selection handles should
    appear as follows:![How to do it…](img/B04314_04_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the upper data frame and select **Properties** to display the
    **Data Frame Properties** window, as shown in the following screenshot. The **Element
    Name** property is what defines the unique name for the element and is found on
    the **Size and Position** tab as seen in the following screenshot. In this case,
    set the element name to `Crime`:![How to do it…](img/B04314_04_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Data Frame Properties** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **2009 Crime Data legend** and open the **Properties** window by right-clicking
    on the legend and selecting **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Size and Position** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Element Name** value to `Crime Legend`, as shown in the following
    screenshot:![How to do it…](img/B04314_04_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also define unique names for text elements. Select the title element
    (`Crime and Its Impact on School Test Performance`), right-click on the element,
    and select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Size and Position** tab and define a unique name for this element,
    as shown in the following screenshot:![How to do it…](img/B04314_04_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each element in the layout view can be assigned a name, which can then be used
    in your geoprocessing script to retrieve the specific element. You should strive
    to define unique names for each element. It isn't required that you define a unique
    name for each element, nor is it required that you even define a name at all.
    However, it is a best practice to give each element a name and ensure that each
    name is unique if you intend to access these elements from your Python scripts.
    In terms of naming practices for your elements, you should strive to include only
    letters and underscores in the name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use element names in conjunction with the `ListLayoutElements()` function
    to restrict the elements that are returned by the function through the use of
    a wildcard parameter. In the next recipe, you'll learn how to restrict the list
    of layout elements that are returned through the use of wildcards and element
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the layout elements returned by ListLayoutElements()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Layouts can contain a large number of elements, many of which you won't need
    for a particular geoprocessing script. The `ListLayoutElements()` function can
    restrict the layout elements returned, by passing a parameter that defines the
    type of element that should be returned along with an optional wildcard, which
    finds elements using a portion of the name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different types of layout elements, including graphics, legends,
    pictures, text, and data frames. When you return a list of layout elements, you
    can restrict (filter) the types of elements that are returned. In this recipe,
    you will write a script that filters the layout elements returned by element type
    and wildcard.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to restrict the list of layers returned by
    the `ListLayoutElements()` function through the use of optional parameters, which
    define the type of element that should be returned along with a wildcard that
    can also restrict the elements that are returned:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`) and assign this reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `ListLayoutElements()` function with a restriction of only legend elements,
    as well as a wildcard that returns elements with a name containing the `Crime`
    text anywhere in the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\RestrictLayoutElements.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. In this case, only a single layout element will be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ListLayoutElements()` is a versatile function, which in its most basic form
    is used to return a list of all the layout elements on the page layout of a map
    document. However, there are two optional parameters that you can supply to filter
    this list. The first type of filter is an element type filter in which you specify
    that you only want to return one of the layout element types. You can also apply
    a wildcard to filter the returned list. These two types of filters can be used
    in combination. For example, in this recipe, we are specifying that we only want
    to return `LEGEND_ELEMENT` objects with the `Crime` text anywhere in the element
    name. This results in a highly filtered list that only contains a single layout
    element.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ListLayoutElements()` can be filtered using one of these element types: `DATAFRAME_ELEMENT`,
    `GRAPHIC_ELEMENT`, `LEGEND_ELEMENT`, `MAPSURROUND_ELEMENT`, `PICTURE_ELEMENT`,
    or `TEXT_ELEMENT`.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the properties of layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each layout element has a set of properties that you can update programmatically.
    For example, `LegendElement` includes properties that allow you to change the
    position of the legend on the page, update the legend title, and access legend
    items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different types of layout elements, including graphics, legends,
    text, maps, and pictures. Each of these elements is represented by a class in
    the `arcpy.mapping` package. These classes provide various properties that you
    can use to programmatically alter the element.
  prefs: []
  type: TYPE_NORMAL
- en: The `DataFrame` class provides access to the data frame properties in the map
    document file. This object can work with both map units and page layout units,
    depending on the property being used. Page layout properties, such as positioning
    and sizing, can be applied to the properties, including `elementPositionX`, `elementPositionY`,
    `elementWidth`, and `elementHeight`.
  prefs: []
  type: TYPE_NORMAL
- en: The `GraphicElement` object is a generic object for various graphics that can
    be added to the page layout, including tables, graphs, neatlines, markers, lines,
    and area shapes. You'll want to make sure that you set the `name` property for
    each graphic element (and any other element for that matter), if you intend to
    access it through a Python script.
  prefs: []
  type: TYPE_NORMAL
- en: '`LegendElement` provides operations to position the legend on the page layout,
    modification of the legend title, and also provides access to the legend items
    and the parent data frame. `LegendElement` can only be associated with a single
    data frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`MapSurroundElement` can refer to north arrows, scale bars, and scale text.
    It is similar to `LegendElement` and is associated with a single data frame. Properties
    on this object enable repositioning of the element on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '`PictureElement` represents a raster or image on the page layout. The most
    useful property of this object enables acquiring and setting the data sources,
    which can be extremely helpful when you need to change a picture, such as a logo,
    in multiple map documents. For example, you could write a script that iterates
    through all your map document files and replaces the current logo with a new logo.
    You can also reposition or resize the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`TextElement` represents text on a page layout, including inserted text, callouts,
    rectangle text, and titles, but does not include legend titles or texts that are
    part of a table or chart. Properties enable the modification of a text string,
    which can be extremely useful in situations where you need to make the same text
    string change in multiple places in the page layout or over multiple map documents,
    and of course, repositioning of the object is also available.'
  prefs: []
  type: TYPE_NORMAL
- en: Each element in the page layout is returned as an instance of one of the element
    objects. In this recipe, we're going to use the `title` property of the `Legend`
    object to programmatically change the title of the `Crime` legend and obtain a
    list of the layers that are part of the legend.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update the properties of a layout element:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`), and assign this
    reference to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `ListLayoutElements()` method with a wildcard and restriction of only
    legend elements to return only the `Crime` legend and store it in a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `title` property to update the title of the legend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of the layers that are a part of the legend and print the names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\UpdateLayoutElementProperties.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. You should see the following layers printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The change is displayed in the following screenshot:![How to do it…](img/B04314_04_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the layout elements has a set of properties and methods. In this particular
    case, we've used the `title` property on the `Legend` object. Other properties
    of this object allow you to set the width and height, positioning, and so on.
    Methods used for the `Legend` object give you the ability to adjust the column
    count, list the legend items, and remove and update items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of available printers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yet another list function provided by `arcpy` is `ListPrinterNames()`, which
    generates a list of the available printers. As is the case with the other list
    functions that we've examined, `ListPrinterNames()` is often called a preliminary
    step in a multistep script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before printing maps with the `PrintMap()` function, it is a common practice
    to call the `ListPrinterNames()` function, which returns a list of the available
    printers for the local computer. A particular printer can then be found by iterating
    the list of printers and using it as an input for the `PrintMap()` function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `ListPrinterNames()` function to
    return a list of the available printers for your script:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`) and assign this reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListPrinterNames()` function and print each printer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\GetListOfPrinters.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the script. The output will vary depending upon the list of available printers
    for your computer. However, it should print something similar to the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListPrinterNames()` function returns a Python list containing all the printers
    available to use in your script. You can then use the `PrintMap()` function, which
    we'll examine in the next recipe, to send a print job to a particular printer
    that is available for your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Printing maps with PrintMap()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending your map layout to a printer is easy with the `PrintMap()` function.
    By default, the print job will be sent to the default printer saved with the map
    document, but you can also define a specific printer to which the job should be
    sent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module provides a `PrintMap()` function to print page layouts
    or data frames from ArcMap. Before calling `PrintMap()`, it is a common practice
    to call the `ListPrinterNames()` function, which returns a list of the available
    printers for the local computer. A particular printer can then be found by iterating
    the list of printers that can be used as an input for the `PrintMap()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '`PrintMap()` can print either a specific data frame or the page layout of a
    map document. By default, this function will use the printer saved with the map
    document or, the default system printer in the map document. As I mentioned earlier,
    you can also use `ListPrinterNames()` to get a list of the available printers,
    and select one of these printers as an input for `PrintMap()`. In this recipe,
    you will learn how to use the `PrintMap()` function to print the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `PrintMap()` function to print the
    layout view in ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`), and assign this
    reference to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for the `Test_Performance` data frame and print it if it''s found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\PrintingWithPrintMap.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script. The script should send the data frame to the default printer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PrintMap()` function accepts one required parameter and a handful of optional
    parameters. The required parameter is a reference to the map document. The first
    optional parameter is the printer name. In this case, we haven't specified a particular
    printer to use. Since we haven't provided a specific printer; it will use the
    printer saved with the map document or the default system printer if a printer
    is not part of the map document. The second optional parameter is the data frame
    that we'd like to print, which in this instance is `Test_Performance`. Other optional
    parameters, not supplied in this case, are an output print file and image quality.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a map to a PDF file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than sending your map or layout view to a printer, you may want to simply
    create PDF files that can be shared. ArcPy mapping provides an `ExportToPDF()`
    function, which you can use to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PDF is a very popular interchange format designed to be viewable and printable
    from many different platforms. The ArcPy mapping `ExportToPDF()` function can
    be used to export data frames or the page layout to a PDF format. By default,
    the `ExportToPDF()` function exports the page layout, but you can pass an optional
    parameter that references a particular data frame, which can be printed instead
    of the page layout. In this recipe, you will learn how to export the page layout
    as well as a specific data frame to a PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to export a map to a PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`), and assign this
    reference to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the page layout with the `ExportToPDF()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\ExportToPDF_Step1.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Map_PageLayout.pdf` file that was created, and you should see something
    similar to the following screenshot:![How to do it…](img/B04314_04_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll print a specific data frame from our map document file. Alter your
    script, so that it appears as follows. You can check your work by examining the
    `c:\ArcpyBook\code\Ch4\ExportToPDF_Step2.py` solution file.![How to do it…](img/B04314_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script and examine the output of the PDF file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ExportToPDF()` function requires two parameters, including a reference
    to the map document and the file that serves as the output PDF file. The first
    script that we developed was passed in a reference to the map document along with
    an output PDF file. Since we didn't pass in an optional parameter specifying the
    data frame, the `ExportToPDF()` function will export the page layout. There are
    also many optional parameters that can be passed into this method, including a
    specific data frame and a number of parameters mostly related to the quality of
    the output content and file. Our second script is passed in a specific data frame
    that should be exported. You can refer to the ArcGIS help pages for more information
    about each of the optional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a map to an image file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also export the contents of the map or layout view to an image file
    by using one of the many functions provided by `arcpy.mapping`. Each image export
    function will differ in its name depending upon the type of image file you'd like
    to create. The parameters passed into the function will also vary slightly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing the ability to export data frames and the page layout
    to a PDF format, you can also use one of the many export functions provided by
    `arcpy.mapping` to export an image file. Some of the available formats include
    AI, BMP, EMF, EPS, GIF, JPEG, SVG, and TIFF. The parameters provided for each
    function will vary depending on the type of image. Some examples of these function
    names include `ExportToJPEG()`, `ExportToGIF()`, and `ExportToBMP()`. In this
    recipe, you'll learn how to export your maps to images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to export your data or layout view to an image
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch4\Crime_Ch4.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch4.mxd`), and assign this
    reference to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get a list of data frames in the map document and find the data frame with the
    name "`Crime`".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Export the `Crime` data frame as a JPEG image. Your entire script should now
    appear as follows:![How to do it…](img/B04314_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\ExportMapImageFile.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script and examine the output file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that the `ExportToJPEG()` function looks virtually the same as `ExportToPDF()`.
    Keep in mind though that the optional parameters will be different for all the
    export functions. Each `ExportTo<Type>` function will vary depending on the parameters
    that can be used in the creation of the image file.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reports in ArcGIS provide you with a way of presenting information about your
    data or analysis. Information in a report is displayed by using information pulled
    directly from an attribute table in a feature class or a standalone table. Reports
    can contain attribute information, maps, pictures, graphics, and other supporting
    information. ArcMap includes a **Report Wizard** and **Report Designer** that
    you can use to create and modify reports. You can also save the format of a report
    to a template file. This template file can be used repeatedly to generate new
    reports based on any changes in your data. Using a combination of a report template
    along with `arcpy.mapping`, you can automate the production of reports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Report Wizard** in ArcGIS can be used to create reports. There are two
    native data formats for ArcGIS reports: **Report Document File** (**RDF**) and
    **Report Layout File** (**RLF**). RDF reports provide a static report of your
    data. A one-time snapshot, if you will. A RLF is a template file and is created
    using **Report Designer**. The report template file can be used repeatedly and
    includes all the fields in the report along with how they are grouped, sorted,
    and formatted. It also includes any layout elements, such as graphics or maps.
    When the report is rerun, the report regenerates based on the source data that
    is connected to the template. The `arcpy.mapping ExportReport()` function can
    be used to connect a data source to a template file to automate the creation of
    a report. In this recipe, you will learn how to use the `ExportReport()` function
    with the `PDFDocument` class to create a report that contains crime information
    for school districts. The report will include attribute information and a map
    of the boundaries of the school district.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save some time on this recipe, I have precreated a report template (RLF)
    file for you to use. This file, called `CrimeReport.rlf`, is located in the `c:\ArcpyBook\Ch4`
    folder and contains attribute columns for the name of the school district, number
    of crimes, crime density, and test performance scores. In addition to this, a
    placeholder for a map containing the boundaries of the school district has also
    been added to the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to automate the production of reports using
    the `arcpy.mapping ExportReport()` function and the `PDFDocument` class:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new script file in IDLE or your favorite Python editor and save it
    as `c:\ArcpyBook\Ch4\CreateReport.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` and `os` modules and get the current working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the output PDF file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list of school districts. We''ll loop through this list to create
    reports for each district:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get references to the map document, data frame, and layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a loop through the school districts and apply a `where` clause that acts
    as the definition query so that only the individual school district will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select the individual school district, set the data frame extent to the extent
    of the school district, and clear the selection set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the data frame to a bitmap (`.bmp`) file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ExportReport()` function to create the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the report to the PDF file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the temporary PDF report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the PDF document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entire script should appear as follows:![How to do it…](img/B04314_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\CreateReport.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run your script. This will create a file called `CrimeReport.pdf` in
    your `c:\ArcpyBook\ch4` folder. The contents will contain one report page for
    each school district, as seen in this screenshot:![How to do it…](img/B04314_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used several functions and classes that are part of the `arcpy.mapping`
    module, including `PDFDocument`, `ExportToReport()` and `ExportToBMP()`. Initially,
    we used the `PDFDocumentCreate()` function to create an instance of `PDFDocument`,
    which holds a pointer to the `CrimeReport.pdf` file that we'll create. Next, we
    created a list of school districts and began a loop through each of them. Inside
    the loop, for each district, we set a definition query on the layer, selected
    the district, and returned the extent of the district that was used to set the
    extent of the data frame. A bitmap file was then created using the `ExportToBMP()`
    function and the report was generated with the `ExportReport()` function. Finally,
    each page was appended to the `CrimeReport.pdf` file and the document was saved.
  prefs: []
  type: TYPE_NORMAL
- en: Building a map book with Data Driven Pages and ArcPy mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many organizations have a need to create map books containing a series of individual
    maps that cover a larger geographical area. These map books contain a series of
    maps and some optional and additional pages, including title pages, an overview
    map, and some other ancillary information, such as reports and tables. For example,
    a utility company might want to generate a map book detailing their assets across
    a service area. A map book for this utility company could include a series of
    maps, each at a large scale, along with a title page and an overview map. These
    resources would then be joined together into a single document that could be printed
    or distributed as a PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcGIS for Desktop provides the ability to efficiently create a map book through
    a combination of Data Driven Pages along with an `arcpy.mapping` script. With
    a single map document file, you can use the **Data Driven Pages** toolbar to create
    a basic series of maps using the layout view along with your operational data
    and an `index` layer. The `index` layer contains features that will be used to
    define the extent of each map in the series. However, if you need to include additional
    pages in the map book, including a title page, an overview map, and other ancillary
    pages, you'll need to combine the output from the Data Driven Pages toolbar with
    the functionality provided by the `arcpy.mapping` module. With the `arcpy.mapping`
    module, you can automate the export of the map series and append the ancillary
    files to a single map book document. While it is certainly possible to programmatically
    generate the entire map book using only Python and the `arcpy.mapping` module,
    it is more efficient to use a combination of programming and the Data Driven Pages
    toolbar. In this recipe, you'll learn how to create a map book that includes a
    series of maps along with a title page and an overview map page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To save some time on this recipe, I have precreated a map document file for
    you that contains the data and Data Driven Pages functionality to create a series
    of topographic maps for King County, Washington. This map document file, called
    `Topographic.mxd`, can be found in the `c:\ArcpyBook\Ch4` folder. You may want
    to take a few moments to open this file in ArcGIS for Desktop and examine the
    data. The Data Driven Pages functionality has already been enabled for you. Additionally,
    a map title page (`TitlePage.pdf`) and an overview map page (`MapIndex.pdf`) have
    also been created for you. These files are also located in your `c:\ArcpyBook\Ch4`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The steps to generate a map series can be somewhat lengthy, and are beyond the
    scope of this book. However, if you'd like an overview of the process, go to the
    **ArcGIS Desktop Help** system, navigate to **Desktop** | **Mapping** | **Page
    layouts** | **Creating a Map Book**, and follow the first seven items under this
    folder. This includes building map books with ArcGIS through adding dynamic text
    to your map book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the Data Driven Pages functionality
    and the `arcpy.mapping` module to create a map book:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new IDLE script and save it as `c:\ArcpyBook\Ch4\DataDrivenPages_MapBook.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` and `os` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an output directory variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new, empty PDF document in the specified output directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the title page to the PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the index map to the PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the Data Driven Pages to a temporary PDF and then add it to the final
    PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the properties of the final PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the temporary Data Driven Pages file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entire script should appear as follows:![How to do it…](img/B04314_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\DataDrivenPages_MapBook.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and execute your script. If the script successfully executes, you should
    find a new file called `MapBook.pdf` in the `c:\ArcpyBook\Ch4` folder. When you
    open this file, you should see this screenshot:![How to do it…](img/B04314_04_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PDFDocument` class in the `arcpy.mapping` module is frequently used to
    create map books. In this recipe, we used the `PDFDocumentCreate()` function to
    create an instance of `PDFDocument`. A path to the output PDF file was passed
    into the `PDFDocumentCreate()` function. With this instance of `PDFDocument`,
    we then called the `PDFDocument.appendPages()` method twice, inserting the title
    page and map index files that already existed as PDF files. Next, we retrieved
    a `dataDrivenPages` object from the map document file and exported each of the
    pages to a single PDF document. This document was then appended to our final output
    PDF file that already contained the title page and map index page. Finally, we
    updated the `PDFDocument` properties to use thumbs and a single page view, saved
    the entire file, and removed the temporary data drive page document.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a map document to an ArcGIS Server service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `arcpy.mapping` module, it is possible to publish your map document
    files to **ArcGIS Server** as map services. ArcGIS Server is a platform to distribute
    maps and data on the Web. Using the ArcGIS JavaScript API, web and mobile applications
    can be created from services created in ArcGIS Server. For more information about
    ArcGIS Server, please visit the esri ArcGIS Server site at [http://www.esri.com/software/arcgis/arcgisserver](http://www.esri.com/software/arcgis/arcgisserver).
    There are several steps involved in creating a map service from a map document
    file. The map document file must first be analyzed for suitability and performance
    issues and any resulting errors must be fixed before final publication to ArcGIS
    Server. This process involves several steps including a call to an `arcpy.mapping`
    function along with the use of a couple of tools in `ArcToolbox` that can be called
    from your script. After errors have been fixed, you can then upload the resulting
    **Service Definition Draft** file to ArcGIS Server as a service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The publication of a map document to ArcGIS Server with Python is a three-step
    process. The first step is to call the `CreateMapSDDraft() arcpy.mapping` function.
    This will convert a map document file to a Service Definition Draft file. This
    file contains a combination of a map document, information about the server, and
    a set of service properties. Information about the server includes the server
    connection or server type being published to, the type of service being published,
    metadata for the service, and data references. The draft service definition file
    does not contain data. `CreateMapSDDraft()` also generates a Python dictionary
    containing errors and warnings that could cause problems with the publication
    of the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second step is to call the **StageService Tool(.sd)**. Staging compiles
    the information needed to successfully publish the GIS resources. If your data
    is not registered with the server, it will be added when Service Definition Draft
    is staged. Finally, the Service Definition Draft file can be uploaded and published
    as a GIS service to a specified GIS server by using the **UploadServiceDefinition
    Tool**. This step takes the Service Definition file, copies it onto the server,
    extracts the required information, and publishes the GIS resource. Here is an
    illustration of this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04314_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that you will need to have access to an ArcGIS Server instance and also
    have the necessary privileges to publish a service to complete this exercise.
    In this recipe, you will learn how to publish a map document file to an ArcGIS
    Server map service.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to analyze a map document for suitability for publication
    to ArcGIS Server and then publish it as a map service:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new IDLE script and save it as `c:\ArcpyBook\Ch4\PublishMapService.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the current workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define variables for the service name and Service Draft Definition file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Service Definition Draft file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Analyze the draft file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a looping structure that will loop through all the potential messages,
    warnings, and errors, and print out the information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entire script should appear as follows:![How to do it…](img/B04314_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\PublishMapService.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run your code to see this output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll want to pay particular attention to the Errors section. Errors must be
    fixed before the service can be created. Warnings can indicate problems related
    to the performance of the service but they won't stop a service from being published.
    In this case, the error indicates that the data frame uses a background symbol
    that is not a solid fill. This will need to be corrected in ArcGIS before we can
    proceed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In ArcMap, open `crime.mxd` in the `c:\ArcpyBook\ch4` folder and right-click
    on the **Crime** data frame and select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Frame** tab, as seen in this screenshot:![How to do it…](img/B04314_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Background** from the current symbol to none and click on **OK**:![How
    to do it…](img/B04314_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for each of the data frames in the map document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rerun the script you just wrote. This time, you shouldn't see any errors. You
    do still have a warning that should probably be fixed as well, but warnings won't
    stop your map document from being published as a service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all our errors fixed, we'll now convert the `Crime.mxd` file into a `Crime.sd`
    file. Delete the looping structure that you added in step 6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `if`/`else` block of code. Note that I have commented on
    the line of code that calls the `UploadServiceDefinition` tool. If you have access
    to an ArcGIS Server instance and have the appropriate privileges and connection
    information, you can uncomment this line to have it upload the file as a map service.
    You would also need to add the connection parameters for the instance in the `con`
    variable, which is passed as the second parameter for this tool. Save and execute
    the script to see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your entire script should appear as follows:![How to do it…](img/B04314_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your work by examining the `c:\ArcpyBook\code\Ch4\PublishMapService2.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have access to an ArcGIS Server instance and have the necessary privileges,
    you can uncomment the `UploadServiceDefinition` tool and execute the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `CreateMapSDDraft()` function creates a Service Definition Draft file from
    a map document file. Next, we call the `AnalyzeForSD()` function and examine the
    results that are returned for any messages, warnings, or errors. Any errors that
    are identified must then be fixed before the map service can be created. Finally,
    if no errors are present, we call the `StageService` tool that creates a Service
    Definition Draft file that can then be passed into the `UploadServiceDefinition`
    tool for publication to ArcGIS Server.
  prefs: []
  type: TYPE_NORMAL
