["```py\ndata['resourceSets'][0]['resources'][0]['address']['formattedAddress']\n```", "```py\ndef bing_geocode_via_address(address):\n    # trim the string from leading and trailing spaces using strip\n    full_url = f\"{base_url}query={urllib.parse.quote(address.strip(), safe='')}?key={AUTH_KEY}\"\n    r = requests.get(full_url)\n    try:\n        data = r.json()\n        # number of resources found, used as index to get \n        # the latest resource\n        num_resources = data['resourceSets'][0]['estimatedTotal']\n        formattedAddress = data['resourceSets'][0]['resources'][num_resources-1]['address']['formattedAddress']\n        lat = data['resourceSets'][0]['resources'][num_resources-1]['point']['coordinates'][0]\n        lng = data['resourceSets'][0]['resources'][num_resources-1]['point']['coordinates'][1]\n    except:\n        num_resources = 0\n        formattedAddress = None\n        lat = None\n        lng = None\n\n    text = r.text\n    status = r.reason\n    url = r.url\n\n    return num_resources, formattedAddress, lat, lng, text, status, url\n```", "```py\ndef enrich_with_geocoding(passed_row, col_name):\n    # Fixed waiting time to avoid the \"Too many requests\" \n    # error as basic accounts are limited to 5 queries per second\n    time.sleep(3)\n    address_value = str(passed_row[col_name])\n\n    num_resources, address_formatted, address_lat, address_lng, text, status, url = bing_geocode_via_address(address_value)\n\n    passed_row['numResources'] = num_resources\n    passed_row['formattedAddress'] = address_formatted\n    passed_row['latitude'] = address_lat\n    passed_row['longitude'] = address_lng\n    passed_row['text'] = text\n    passed_row['status'] = status\n    passed_row['url'] = url\n\n    return passed_row\n```", "```py\nbase_url= \"http://dev.virtualearth.net/REST/v1/Locations/\"\nAUTH_KEY = os.environ.get('BINGMAPS_API_KEY')\ndf_orig = pd.read_csv(r'D:\\<your-path>\\Chapter09\\geocoding_test_data.csv', encoding='latin-1')\ndf = df_orig[['full_address','lat_true','lon_true']]\ntic = time.perf_counter()\nenriched_df = df.apply(enrich_with_geocoding, col_name='full_address', axis=1)\ntoc = time.perf_counter()\nprint(f\"{df.shape[0]} addresses geocoded in {toc - tic:0.4f} seconds\")\n```", "```py\n os.environ['BINGMAPS_API_KEY'] = '<your-bing-api-key>'\n```", "```py\nimport dask.dataframe as dd\nddf_orig = dd.read_csv(r'D:\\<your-path>\\Chapter09\\geocoding_test_data.csv', encoding='latin-1')\nddf = ddf_orig[['full_address','lat_true','lon_true']]\n```", "```py\nddf = ddf.repartition(npartitions=os.cpu_count()*2)\n```", "```py\nenriched_ddf = ddf.apply(enrich_with_geocoding, axis=1, col_name='full_address', meta={'full_address': 'string', 'lat_true': 'float64', 'lon_true': 'float64', 'numResources': 'int32', 'formattedAddress': 'string', 'latitude': 'float64', 'longitude': 'float64', 'text': 'string', 'status': 'string', 'url': 'string'})\n```", "```py\ntic = time.perf_counter()\nenriched_df = enriched_ddf.compute()\ntoc = time.perf_counter()\nprint(f'{enriched_df.shape[0]} addresses geocoded in {toc - tic:0.4f} seconds')\n```", "```py\ndef bing_geocode_via_address(address):\n    r = geocoder.bing(address, key = AUTH_KEY)\n    return r.address, r.lat, r.lng, r.json, r.status, r.url\n```", "```py\nencoded_address <- RCurl::curlPercentEncode(address)\nfull_url <- stringr::str_glue('{base_url}query={encoded_address}?key={AUTH_KEY}')\nr <- httr::GET(full_url)\n```", "```py\nSys.setenv(BINGMAPS_API_KEY = '<your-bing-api-key>')\n```", "```py\ntic()\ntbl_enriched <- tbl %>%\n    pull( full_address ) %>% \n    map_dfr( ~ bing_geocode_via_address(.x) ) %>% \n    bind_cols( tbl, . )\ntoc()\n```", "```py\nn_cores <- availableCores() - 1\nplan(cluster, workers = n_cores)\ntic()\ntbl_enriched <- tbl %>%\n    pull( full_address ) %>% \n    future_map_dfr( ~ bing_geocode_via_address(.x) ) %>% \n    bind_cols( tbl, . )\ntoc()\n```", "```py\nlocal({\n  r <- getOption(\"repos\")\n  r[\"CRAN\"] <- \"https://cloud.r-project.org/\"\n  options(repos = r)\n})\n```", "```py\nbing_geocode_via_address <- function(address) {\n\n    details_tbl <- geo(address, method = 'bing', full_results = TRUE)\n\n    details_lst <- list(\n        formattedAddress = details_tbl$bing_address.formattedAddress,\n        lat = details_tbl$point.coordinates[[1]][1],\n        lng = details_tbl$point.coordinates[[1]][2],\n        details_tbl = details_tbl\n    )\n    return( details_lst )\n}\n```"]