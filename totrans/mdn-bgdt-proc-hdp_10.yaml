- en: Developing Applications Using the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the early days of computing, CPU power and storage were very scarce, and
    so the cost of purchasing relevant equipment was very high. With the advances
    in the development of personal computing in the early 80s by Apple and Microsoft,
    more and more individuals and organizations have gained access to these computing
    devices. As the industry has developed the way chips are made and billions if
    not trillions of transistors are now put on single chips, the size of these computing
    devices has drastically reduced, from taking up entire rooms to comprising a single
    unit of a rack in the data center. When the computation speed and storage device
    capacity started increasing, individuals and enterprises started to realize that
    efficiently managing their computing resources was becoming a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: The widespread use of the internet has also made a significant contribution
    to how individuals can access resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available technologies in the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning Cloud infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability in the Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Business continuity planning in the Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security in the Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Hadoop cluster in the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud and in-house applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data access in the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the Cloud?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing, or simply the Cloud, is a simple way to rent and use resources
    such as electronic storage space, computing power, network bandwidth, IP addresses,
    databases, web servers, and so on, on the internet. The Cloud has promoted the
    *pay per use* paradigm, where customers are only billed for the use of these resources,
    in the same way that a power grid bills its customers for their power consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing has transformed the way individuals and organizations access
    and manage their servers and applications on the internet. Before Cloud computing,
    everyone used to manage their servers and applications on their own premises or
    in dedicated data centers. The increase in the raw computing power of computing
    (CPU and GPU) of multiple-cores on a single chip and the increase in the storage
    space (HDD and SSD) present challenges in efficiently utilizing the available
    computing resources.
  prefs: []
  type: TYPE_NORMAL
- en: Available technologies in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the increased adoption of Cloud computing, enterprises have started building
    a variety of technologies and making them available to consumers. We will go through
    the list of organizations that have pioneered Cloud offerings, and also the different
    types of technologies they offer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of companies that offer Cloud services:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure (Azure)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salesforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Various types of resources are being offered to the consumers in the form of:'
  prefs: []
  type: TYPE_NORMAL
- en: Platform as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the increase in offerings such as these, many organizations need not focus
    on the infrastructure such as real estate, servers, firewalls, load balancers,
    switches, power supply, and so on. But they can instead just purchase these services
    from Cloud providers, and then just focus on what applications they are building.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see what technologies are provided by the top providers, Microsoft,
    Amazon, and Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technology** | **Azure** | **Amazon Web Services** | **Google Cloud** |
    **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Servers | Azure compute | Amazon EC2 | **Google Compute Engine** (**GCE**)
    | This technology deals with providing servers that are on demand and that can
    be virtualized or dedicated/baremetal in nature. |'
  prefs: []
  type: TYPE_TB
- en: '| Storage | Azure storage | Amazon EBS | Google storage | This is on-demand
    storage that can be attached to the compute nodes as needed. Some vendors provide
    the ability to scale the size of these storage devices on demand. |'
  prefs: []
  type: TYPE_TB
- en: '| Network | Azure networking | Yes | Google network services | Providers supply
    network bandwidth from 100 Mbps to 10 Gbps, depending on the network requirements
    of the applications. |'
  prefs: []
  type: TYPE_TB
- en: '| Databases | Azure databases | Amazon RDS | Google Cloud SQL | With managed
    databases, we need not worry about the maintenance of the database servers as
    the vendors take care of the support for these automatically. Bear in mind that,
    in some cases, we need to plan the high availability for ourselves. |'
  prefs: []
  type: TYPE_TB
- en: '| Content delivery | Azure CDN | Amazon CloudFront | Google Cloud CDN | This
    is very helpful if we want to push our static assets to our users by leveraging
    the delivery network as it brings down the latency significantly. We can also
    use this as a private store to store all the files such as backups, conference
    recordings, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| **Domain Name System** (**DNS**) | Azure DNS | Amazon Route S3 | Google Cloud
    DNS | DNS is critical in running our applications on the internet. This service
    makes our life easier by taking care of making our servers accessible to the rest
    of the infrastructure, without having to run our own DNS servers. |'
  prefs: []
  type: TYPE_TB
- en: '| Business mail | Microsoft o365 | Amazon WorkMail | Google Mail | This is
    a must-have for organizations that demand access to emails and calendaring in
    a secure and scalable fashion. |'
  prefs: []
  type: TYPE_TB
- en: '| Machine learning | Azure AI + machine learning | Amazon machine learning
    | Google ML Engine | Machine learning technology has become the buzzword these
    days. Vendors are offering several technologies that are related to machine learning,
    as we just have to focus on what we need to do, rather than worrying about the
    infrastructure that needs to run these algorithms. |'
  prefs: []
  type: TYPE_TB
- en: '| **Distributed Denial of Service** (**DDoS**) Protection | Azure DDoS Protection
    | AWS Shield | – | This is a very important thing to have for organizations that
    cannot afford to have downtime for their services and when large-scale denial
    of service attacks happen that impact regular visitors of their sites. |'
  prefs: []
  type: TYPE_TB
- en: '| Monitoring | Azure Monitor | Amazon CloudWatch | Google monitoring | Without
    monitoring our applications and infrastructure, we can fail to see how we are
    performing. These services help us keep our business on track and to respond to
    events that trigger downtime of our applications, and infrastructure that runs
    on the Cloud. |'
  prefs: []
  type: TYPE_TB
- en: '| Containers | **Azure Container Service** (**AKS**) | **Amazon Elastic Container
    Service For Kubernetes** (**Amazon EKS**) | Google Kubernetes Engine | This is
    infrastructure that allows you to run applications as containers, rather than
    owning full compute environments to run them. |'
  prefs: []
  type: TYPE_TB
- en: Planning the Cloud infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional organizations have their own IT/infrastructure teams to manage their
    dedicated servers and network. When planning migration to the Cloud, we have to
    keep the following things in mind for better operability of the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Planning the Cloud infrastructure deals with:'
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated or shared servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business continuity planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dedicated servers versus shared servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud providers give you the option of renting servers that completely own the
    physical hardware or share the physical hardware with other Cloud users like us.
    In order to reach a decision on this, we need to understand the advantages and
    disadvantages of each of these models.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the type of servers where the type of ownership belongs to a single
    user or an organization and is not shared with any other user. There are several
    advantages to this setup, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We completely own the physical server and any further servers that we allocate
    will be provisioned on the same hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We might be billed more for this kind of setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Spectre and Meltdown, we are better protected as the hardware is not shared
    with anyone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are not impacted by the neighbors as we completely own the hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Owning a complete server is expensive for simple experimentation. In this scenario,
    we can go for a shared setup where we rent a few resources in a given physical
    hardware. Some advantages of shared servers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We are billed only for the virtual servers that we rent on demand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though Cloud vendors provide absolute isolation, with Spectre and Meltdown,
    we need to be a bit careful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easier to provision than dedicated servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the type of applications we are planning to run, we have to understand
    the **service-level agreement** (**SLA**) that is provided by the vendors for
    these applications in terms of uptime, and we need to plan our applications accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simple way of using DNS to achieve high availability of our
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2453572e-9d3c-45bc-9c39-7de4c295c2da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this design, the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user tries to connect to our website using a web browser such as Google
    Chrome or Firefox, it first tries to contact the DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DNS server is aware of our frontend servers and returns a list of all the
    servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser will connect to the frontend server directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The frontend server connects to the database and returns the requested resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this design, we need to keep the following things in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend servers are directly exposed to the internet, so we should have proper
    security measures in place such as a firewall or DDos protection to protect our
    servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These frontend servers should also be patched with the latest OS software so
    that any attacks can be prevented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server should not be visible to the outside world, so an appropriate
    firewall should be in place to allow requests from the frontend servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud providers provide a private IP address. In order to minimize the risk
    of DB servers being accidentally exposed to the internet, we should block the
    public internet access to these servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at another design that also keeps our web servers secure from attacks
    on the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b0eedd5-c5ab-454d-8b22-955ceec11684.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this design, we have made the following changes when compared to the previous
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: When the **Browser** contacts the **DNS** server to connect to our website,
    the **DNS** server supplies the IP address of the **Load Balancer** (**LB**)/proxy
    server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser connects to this **LB**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **LB** keeps track of which of the backend servers are available and then
    forwards the request to the server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server talks to the **database** (**DB**) and finishes building the response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The response is sent back to the **LB**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **LB** sends the response to the **Browser**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we look at this design carefully, we will see that these are the advantages
    over the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: The **LB** hides our infrastructure, so outsiders cannot easily know how many
    servers are there in our infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **LB** protects our web servers from several attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **LB** can do SSL offloading where all the encryption/decryption of traffic
    happens at the **LB** level and our servers can be free from the SSL overhead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the security policy of the organization, you might need to enable SSL
    on the web servers as well.
  prefs: []
  type: TYPE_NORMAL
- en: Business continuity planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Business continuity planning** (**BCP**) is a very important thing to consider
    when the organization is in its growth phase. Any downtime of the network, servers
    or databases, or any other Cloud infrastructure components can bring down the
    whole business.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several key things to keep in mind when planning for BCP:'
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure unavailability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Natural disasters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure unavailability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there is an unplanned outage of the services provided by the Cloud provider,
    it will take down all our services with it. In order to maximize the availability
    of our business, we need to build a backup setup in another geographical region.
    This might be expensive for some organizations as the entire setup is going to
    be duplicated, but in the interest of business continuity, this is an important
    feature to consider when planning the Cloud infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Natural disasters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events such as earthquakes, floods, fire accidents, and so on are hard to predict.
    We therefore need to make the necessary plans to keep our business running, depending
    on where our servers are located on the Cloud, and on what technology standards
    are followed by the vendors for the data center build-out.
  prefs: []
  type: TYPE_NORMAL
- en: Business data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business data exists in several forms and is stored in the form of files, database
    servers, and big data systems. For BCP, we need to carefully analyze in what other
    remote locations we can plan to keep the copies of our data, and carry out test
    runs to see if our applications can be seamlessly run from either of the geographical
    locations with a single click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: As we are dealing with multiple geographies here, we need to understand that,
    when the volume of data is huge, it takes time for things to get replicated from
    one data center to another. Our applications must also be redesigned in case we
    did not consider BCP in the original design.
  prefs: []
  type: TYPE_NORMAL
- en: BCP design example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This diagram tries to explain how we can achieve BCP by setting up the same
    applications in multiple data centers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f38b78bf-633e-44d1-ba17-e4b5ae996a45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The system can be either:'
  prefs: []
  type: TYPE_NORMAL
- en: Hot–Hot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot–Cold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Hot–Hot system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Hot-Hot system, both the data centers are active at the same time and
    serve the user's traffic. Here, we employ several CDN and geolocation techniques
    to route the user to a given data center.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge we face in doing so is that if one region goes completely blank,
    the other region should have enough headroom to ensure that traffic for the other
    region is absorbed
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of employing this system is that the user experience is a good
    one, as in this design the users are routed to the nearest system
  prefs: []
  type: TYPE_NORMAL
- en: The Hot–Cold system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this system/design, only one of the regions is active at any time and only
    in the event of BCP (Business Continuity Planning) do we fall back to the other
    region.
  prefs: []
  type: TYPE_NORMAL
- en: 'The challenges we face in using this system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to forget the other region until the problem comes into play; it's
    very important to keep using both the regions in sync w.r.t both Data & Software
    on a continuous basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As only one region is active, the correct failover of users to another data
    center has to be thought through well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage of employing this system is that all the writes happen in one
    region which keeps database designs simple.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security is very important when you consider moving to the Cloud. The following
    are the things to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Server security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single Sign On
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AAA requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are talking about the Cloud, we will never be able to access the servers
    physically (unless we get permission from the Cloud vendors). In such a scenario,
    we have to understand what level of policies and practices are followed by the
    Cloud providers to ensure the physical security of the servers on which our applications
    are going to be run.
  prefs: []
  type: TYPE_NORMAL
- en: For example, governments might need a whole set of different physical security
    restrictions when considering a move to the Cloud. On the same lines, there are
    several standards such as PCI and HIPAA which enforce even stronger rules on this
    model.
  prefs: []
  type: TYPE_NORMAL
- en: If our business needs to adhere to these standards, we need to choose the Cloud
    variant which supports all these.
  prefs: []
  type: TYPE_NORMAL
- en: Application security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the Cloud, we can either choose to host the applications on our own or use
    the applications provided as a service **Software As A Service **(**SaaS**). If
    we are hosting the applications on our own provisioned servers (either dedicated
    or shared), we need to enforce the correct firewall rules at server level, and
    also the correct user access rules to make sure that our software allows only
    authorized and properly authenticated users.
  prefs: []
  type: TYPE_NORMAL
- en: If the applications are internal, we should ensure that our employees are given
    2FA or 3FA methods to log in to these services.
  prefs: []
  type: TYPE_NORMAL
- en: Network security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to safeguard our servers on the Cloud, we need to enforce proper firewall
    rules, DNS zones, or even have our own virtual private networks to make sure all
    our assets are not compromised and exposed to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud is synonymous with the internet and there is a continuous threat to
    our data and infrastructure. Unless we enforce proper security measures, everything
    is wide open for everyone to grab whatever they like from our systems.
  prefs: []
  type: TYPE_NORMAL
- en: Single Sign On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Single Sign On** (**SSO**) has become popular with organizations that use
    several applications on the Cloud for various departments. Lately, organizations
    have stopped building their own applications for running businesses and instead
    have started adopting the use of other services. When the number of such applications
    increases, users of these applications are constantly faced with the challenge
    of entering their usernames and passwords in all these websites.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide a seamless browsing experience, and at the same time adhere
    to enterprise security standards, many providers implement OAuth and SAML, as
    they are industry recognized.
  prefs: []
  type: TYPE_NORMAL
- en: 'These SSO/identity providers integrate with the corporate employee database
    to further assimilate the Cloud applications for the enterprise, as depicted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78e306af-80ce-4681-b780-11abbf12d611.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This design tries to explain how organizations are leveraging SSO using identity
    providers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Organizations share the employee and organization details with the identity
    provider:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords may or may not be shared as it can compromise the entire organization
    if there is a breach
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SSO systems can enforce their own passwords on the employees
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When the user tries to open any of the applications in the organization, it
    redirects the user to the SSO provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSO provider completes the authentication and shares necessary credentials
    with the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application authorizes the user based on the feedback from the SSO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application opens the user specific details and then the user can interact
    with the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, the biggest advantage of these SSOs is that once the user has established
    a session with the system, they can log in to other corporate-approved applications
    without further logins.
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality is the biggest challenge when interacting with SSO providers,
    so organizations should carefully evaluate and pick the right solution that meets
    their security requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The AAA requirement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to security, it is important to understand that applications following
    the AAA standard will take care of many challenges that enterprises face.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AAA standard deals with:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication** makes sure that the identity of the user is properly validated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization** further controls whether a given user is allowed to access
    certain resources or not, as per company policies.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auditing** makes sure that all attempts to access and use the resources are
    tracked—this can also be used in case of any investigation, and provide proper
    accounting and billing (if needed).'
  prefs: []
  type: TYPE_NORMAL
- en: By following these best practices, we can be sure that things run smoothly on
    a large scale.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Hadoop cluster in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw earlier that the Cloud offers a flexible and easy way to rent resources
    such as servers, storage, networking, and so on. The Cloud has made it very easy
    for consumers with the pay-as-you-go model, but much of the complexity of the
    Cloud is hidden from us by the providers.
  prefs: []
  type: TYPE_NORMAL
- en: In order to better understand whether Hadoop is well suited to being on the
    Cloud, let's try to dig further and see how the Cloud is organized internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the core of the Cloud are the following mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: A very large number of servers with a variety of hardware configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers connected and made available over IP networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large data centers to host these devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data centers spanning geographies with evolved network and data center designs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we pay close attention, we are talking about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A very large number of different CPU architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large number of storage devices with a variety of speeds and performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networks with varying speed and interconnectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a simple design of such a data center on the Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7249b0f3-3d7d-40e8-8853-6d9f3b916f57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the following devices in the preceding diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '**S1**, **S2**: Rack switches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**U1-U6**: Rack servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R1**: Router'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage area network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network attached storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, Cloud providers have a very large number of such architectures
    to make them scalable and flexible.
  prefs: []
  type: TYPE_NORMAL
- en: You would have rightly guessed that when the number of such servers increases
    and when we request a new server, the provider can allocate the server anywhere
    in the region.
  prefs: []
  type: TYPE_NORMAL
- en: This makes it a bit challenging for compute and storage to be together but also
    provides elasticity.
  prefs: []
  type: TYPE_NORMAL
- en: In order to address this co-location problem, some Cloud providers give the
    option of creating a virtual network and taking dedicated servers, and then allocating
    all their virtual nodes on these servers. This is somewhat closer to a data center
    design, but flexible enough to return resources when not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get back to Hadoop and remind ourselves that in order to get the best
    from the Hadoop system, we should have the CPU power closer to the storage. This
    means that the physical distance between the CPU and the storage should be much
    less, as the BUS speeds match the processing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The slower the I/O speed between the CPU and the storage (for example, iSCSI,
    storage area network, network attached storage, and so on) the poorer the performance
    we get from the Hadoop system, as the data is being fetched over the network,
    kept in memory, and then fed to the CPU for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the important things to keep in mind when designing Hadoop systems
    on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from performance reasons, there are other things to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaling Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's try to understand how we can take care of these in the Cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, we saw that Hadoop can be installed by the following
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semi-distributed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully-distributed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we want to deploy Hadoop on the Cloud, we can deploy it using the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom shell scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud automation tools (Chef, Ansible, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Ambari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud vendor provided methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Dataproc
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon EMR
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft HDInsight
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party managed Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloudera
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud agnostic deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Whirr
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Dataproc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to use Google Cloud Dataproc to set up a
    single node Hadoop cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps can be broken down into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a Google Cloud account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activating Google Cloud Dataproc service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new Hadoop cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Logging in to the Hadoop cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting the Hadoop cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting a Google Cloud account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section assumes that you already have a Google Cloud account.
  prefs: []
  type: TYPE_NORMAL
- en: Activating the Google Cloud Dataproc service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you log in to the Google Cloud console, you need to visit the Cloud Dataproc
    service. The activation screen looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdc979f6-3c6e-4095-b231-d34503e1c15d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new Hadoop cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Dataproc is enabled in the project, we can click on Create to create
    a new Hadoop cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we see another screen where we need to configure the cluster parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42776c3a-8028-45d1-9dff-35c144ccd06f.png)'
  prefs: []
  type: TYPE_IMG
- en: I have left most of the things to their default values. Later, we can click
    on the Create button which creates a new cluster for us.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the cluster has successfully been created, we will automatically be taken
    to the cluster lists page. From there, we can launch an SSH window to log in to
    the single node cluster we have created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SSH window looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ece46992-7e51-4f97-8f3a-abeb7eb53fd7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Hadoop command is readily available for us and we can run
    any of the standard Hadoop commands to interact with the system.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to delete the cluster, click on the DELETE button and it will display
    a confirmation window, as shown in the following screenshot. After this, the cluster
    will be deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40147432-7be4-40e8-b92d-2b1d93fdc579.png)'
  prefs: []
  type: TYPE_IMG
- en: Looks so simple, right? Yes. Cloud providers have made it very simple for users
    to use the Cloud and pay only for the usage.
  prefs: []
  type: TYPE_NORMAL
- en: Data access in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cloud has become an important destination for storing both personal data
    and business data. Depending upon the importance and the secrecy requirements
    of the data, organizations have started using the Cloud to store their vital datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram tries to summarize the various access patterns of typical
    enterprises and how they leverage the Cloud to store their data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5aac2568-d830-4030-b6a7-33e862a81841.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cloud providers offer different varieties of storage. Let''s take a look at
    what these types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Block storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File-based storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypted storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This type of storage is primarily useful when we want to use this along with
    our compute servers, and want to manage the storage via the host operating system.
  prefs: []
  type: TYPE_NORMAL
- en: To understand this better, this type of storage is equivalent to the hard disk/SSD
    that comes with our laptops/MacBook when we purchase them. In case of laptop storage,
    if we decide to increase the capacity, we need to replace the existing disk with
    another one.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the Cloud, if we want to add more capacity, we can just purchase
    another larger capacity storage and attach it to our server. This is one of the
    reasons why the Cloud has become popular as it has made it very easy to add or
    shrink the storage that we need.
  prefs: []
  type: TYPE_NORMAL
- en: It's good to remember that, since there are many different types of access patterns
    for our applications, Cloud vendors also offer block storage with varying storage/speed
    requirements measured with their own capacity/IOPS, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example of this capacity upgrade requirement and see what we do
    to utilize this block storage on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to understand this, let''s look at the example in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/777ebbd9-e267-476d-ac5d-621ecf0ac461.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine a server created by the administrator called **DB1** with an original
    capacity of **100 GB**. Later, due to unexpected demand from customers, an application
    started consuming all the **100 GB** of storage, so the administrator has decided
    to increase the capacity to **1 TB** (1,024 GB).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the workflow looks like in this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 1 TB disk on the Cloud
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the disk to the server and mount it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a backup of the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the data from the existing disk to the new disk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Destroy the data on the old disk and return the disk
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process is simplified but in production this might take some time, depending
    upon the type of maintenance that is being performed by the administrator. But,
    from the Cloud perspective, acquiring new block storage is very quick.
  prefs: []
  type: TYPE_NORMAL
- en: File storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Files are the basics of computing. If you are familiar with UNIX/Linux environments,
    you already know that, *everything is a file* in the Unix world. But don't get
    confused with that as every operating system has its own way of dealing with hardware
    resources. In this case we are not worried about how the operating system deals
    with hardware resources, but we are talking about the important documents that
    the users store as part of their day-to-day business.
  prefs: []
  type: TYPE_NORMAL
- en: 'These files can be:'
  prefs: []
  type: TYPE_NORMAL
- en: Movie/conference recordings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pictures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though they are simple-looking files in our computer, they can have significant
    business importance and should be dealt with in a careful fashion, when we think
    of storing these on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Most Cloud providers offer an easy way to store these simple files on the Cloud
    and also offer flexibility in terms of security as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical workflow for acquiring the storage of this form is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new storage bucket that's uniquely identified
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add private/public visibility to this bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add multi-geography replication requirement to the data that is stored in this
    bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some Cloud providers bill their customers based on the number of features they
    select as part of their bucket creation.
  prefs: []
  type: TYPE_NORMAL
- en: Please choose a hard-to-discover name for buckets that contain confidential
    data, and also make them private.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypted storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a very important requirement for business critical data as we do not
    want the information to be leaked outside the scope of the organization. Cloud
    providers offer an encryption at rest facility for us. Some vendors choose to
    do this automatically and some vendors also provide flexibility in letting us
    choose the encryption keys and methodology for the encrypting/decrypting data
    that we own. Depending upon the organization policy, we should follow best practices
    in dealing with this on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the increase in the performance of storage devices, encryption does not
    add significant overhead while decrypting/encrypting files. This is depicted in
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85210543-a206-4255-990f-c6809daf8e82.png)'
  prefs: []
  type: TYPE_IMG
- en: Continuing the same example as before, when we choose to encrypt the underlying
    block storage of **1 TB,** we can leverage the Cloud-offered encryption where
    they automatically encrypt and decrypt the data for us. So, we do not have to
    employ special software on the host operating system to do the encryption and
    decryption.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that encryption can be a feature that's available in both the block
    storage and file-based storage offer from the vendor.
  prefs: []
  type: TYPE_NORMAL
- en: Cold storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This storage is very useful for storing important backups in the Cloud that
    are rarely accessed. Since we are dealing with a special type of data here, we
    should also be aware that the Cloud vendor might charge significantly high amounts
    for data access from this storage, as it's meant to be written once and forgetten
    (until it's needed). The advantage with this mechanism is that we have to pay
    lesser amounts to store even petabytes of data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at what Cloud computing means and saw how the Cloud
    has completely revolutionized how we can access and manage our servers and applications on
    the internet. We then walked through a list of different technologies offered
    on the Cloud by different providers.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to plan our Cloud infrastructure and looked at the different
    steps involved in building our own Hadoop cluster on the Cloud. Finally, we saw
    different ways of storing and accessing our data on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will take a look at some strategies and best practices
    to deploy your Hadoop cluster.
  prefs: []
  type: TYPE_NORMAL
