- en: Chapter 4. Creating Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how Python programs can create great-looking
    maps using the Mapnik library. You will install Mapnik onto your computer, learn
    the basics of the Mapnik library, and see how you can use it to generate simple
    maps. We will then explore some of the more advanced aspects of Mapnik, and see
    how it can be used to produce a wide range of complex visual effects. Finally,
    we will create a useful program that displays the contents of any shapefile as
    a map.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Mapnik
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very difficult to make sense of geospatial data without being able to
    visualize it. The usual way in which spatial data is made visible is by drawing
    a map—indeed, a map is nothing more than an image created out of spatial data.
    **Mapnik** ([http://mapnik.org](http://mapnik.org)) is a powerful tool for transforming
    raw geospatial data into a map image.
  prefs: []
  type: TYPE_NORMAL
- en: Mapnik itself is written in C++ but comes with bindings that allow you to access
    it from Python. Using Python code, you can define the various layers that make
    up a map, specify the datasources containing the data to be displayed, and then
    set up the styles which control how the various features are to be drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Mapnik can be a little intimidating when you first start working with it, so
    let's jump in and get our hands dirty right away. Let's start by installing Mapnik
    onto your computer and use it to generate a simple map, before delving a bit deeper
    into how to build and style maps using the Mapnik library.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Mapnik
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Mapnik, go to the downloads page on the main Mapnik website ([http://mapnik.org/pages/downloads.html](http://mapnik.org/pages/downloads.html)),
    and choose the installer for your operating system. Pre-built packages are available
    for both Mac OS X and MS Windows. For Linux machines, you will need to either
    compile the program from source, or use a package manager to download, compile,
    and install Mapnik and its various dependencies; full instructions on how to do
    this are provided on the Mapnik download page.
  prefs: []
  type: TYPE_NORMAL
- en: A taste of Mapnik
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start our exploration of Mapnik by writing a simple program that generates
    a map using the World Borders Dataset we downloaded earlier. Copy the contents
    of the `TM_WORLD_BORDERS-0.3` directory into a convenient place, and then create
    a new Python program in the same directory. Name your new program `mapnik_example.py`.
    This program will generate a PNG-format image file based on the contents of the
    World Borders Dataset shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following into your `mapnik_example.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this program, a new file named `map.png` should be created in
    the same directory. Opening this file will display the generated map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A taste of Mapnik](img/4102_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we''ve seen what our example program does, let''s take a closer look
    at it and examine each part in turn. Let''s start with the very beginning of our
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we simply import the Mapnik library, and then create and initialize a new
    **map** object. The map image will be 1,200 pixels wide and 600 pixels high, and
    the map will have a pale blue background defined by the hexadecimal color value
    `#e0e0ff`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A map consists of one or more **map layers**. In our program, we only have
    one map layer, which we set up to access the `TM_WORLD_BORDERS` shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things to notice about this layer definition:'
  prefs: []
  type: TYPE_NORMAL
- en: Each map layer is given a **name** which uniquely identifies the layer within
    the map; in our program, we've called our map layer `countries`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each layer has a **datasource** which tells Mapnik where the data should come
    from. In this case, we're using the `mapnik.Shapefile` class to load the data
    from a shapefile, though there are many different types of datasources that can
    be used. For example, you can load data directly from a spatial database, or even
    use a Python datasource to create and display features programmatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `layer.styles.append("country_style")` line tells Mapnik which **style**
    to use to draw the layer's data. Mapnik styles are referred to by name, and you
    can have any number of styles associated with each layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Mapnik layers can also have a spatial reference system associated with them.
    If you don't specify a spatial reference system, Mapnik will assume that the data
    is in the standard EPSG 4326 spatial reference system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We next want to define the `country_style` style which will draw the contents
    of our map layer. A style consists of any number of **rules**, where each rule
    has an optional **filter** identifying which of the features in the datasource
    should be drawn using this rule, and a list of **symbolizers** which will be used
    to draw the matching features onto the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating two symbolizers: one to fill the interior of each polygon
    with a faded green color, and another to draw the outline of each polygon using
    a thin black line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For the fill symbol, we are once again using a hexadecimal color code to define
    the color to use to draw the interior of the polygon, while for the line symbol
    we make use of a named color. Note that the `0.5` value defines the width, in
    pixels, to use to draw the outline of each polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our two symbolizers, we next define a rule which uses them
    to draw the contents of the shapefile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that this rule has no filter; the absence of a filter tells Mapnik that
    every feature in the layer's datasource should be drawn using these two symbolizers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish defining our `country_style` style, we initialize the `Style` object
    itself, add our one-and-only rule to the style, and then add the style object
    to our map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we give the style a name when we add it to the map object; because
    this name is used to identify the styles used by the map layer, it is important
    that we use exactly the same name both when adding the style to the map and when
    referring to the style in the map layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final task is to tell the map which area of the world to display, and how
    to **render** the visible portion of the map into an image file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we are zooming out to show all the data in the map layer, and
    saving the results to a PNG format image file named `map.png`.
  prefs: []
  type: TYPE_NORMAL
- en: This completes our example Python program to generate a map image using Mapnik.
    There are lots of more sophisticated things you can do using Mapnik, but this
    will give you an idea of how it works and what you can do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Building a map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve seen an example of how Mapnik works, let''s look more closely
    at some of the ideas behind the Mapnik library. Consider, for example, the following
    map of the west coast of the United States:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a map](img/4102_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This map is actually made up of four different map layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a map](img/4102_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the map layers are drawn one on top of the other, as indicated
    by the arrow on the right-hand side of the diagram. In order to achieve the right
    visual effect, the layers need to be added in *reverse* order, so that each layer
    added will appear in front of the layers already in the map. That is, the base
    layer should be added first, then the urban area layer, and so on. The order in
    which the layers are added to the map is very important; if you get the order
    wrong, some of your layers will be obscured.
  prefs: []
  type: TYPE_NORMAL
- en: Styling a map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw earlier, the map''s styles are defined by creating `mapnik.Style`
    objects and adding them to the map, giving each one a unique name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We then tell each map layer which styles we want that layer to use by adding
    the style name to the layer''s `styles` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You might think that it would be easier to simply add the style definition
    directly to the map layer, but this process of referring to styles by name is
    deliberate: it separates *what* will be displayed from *how* it is displayed.
    This approach lets you use the same set of styles across multiple map layers,
    or completely alter the appearance of your map just by swapping style names.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an alternative way of defining your map styles. Rather than creating
    your own `mapnik.Style` objects and adding them to the map one at a time, you
    can define all your styles at once using an XML-format stylesheet. While this
    is very powerful, XML stylesheets are rather hard to read and very un-Pythonic.
    For these reasons, we won't be using XML stylesheets in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example program, we created a single `mapnik.Style` object that consisted
    of just one rule. This rule had two symbolizers associated with it, telling Mapnik
    how to draw the interior and exterior of each country''s polygon. Rules can be
    more sophisticated, however, including various *conditions* which must be met
    before the rule is used. For example, consider the following Python code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Because the style's rules are evaluated one after the other, this style will
    draw the feature using `symbol1` if the feature's `POPULATION` attribute has a
    value of less than 500,000; it will draw the feature using `symbol2` if the feature's
    `POPULATION` attribute has a value between 500,000 and 1,000,000; and it will
    draw the feature using `symbol3` if the feature's `POPULATION` attribute is 1,000,000
    or more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As well as having filters, rules can also have a minimum and maximum scale factor
    at which the rule will apply. This can be used, for example, to hide smaller features
    when the map is zoomed right out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because you can have multiple symbols within a rule, the way that features
    are drawn can also get quite sophisticated. For example, you could define a single
    rule which uses three separate symbolizers to draw a LineString geometry as a
    street:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling a map](img/4102_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can imagine, combining symbolizers, rules, filters, and styles will give
    you tremendous flexibility in choosing which features should appear within a map,
    and how those features will be drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Mapnik
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've seen what Mapnik can do and have some idea of how Mapnik works,
    let's look more deeply at some of the other aspects of the Mapnik library. We
    will be covering datasources, symbolizers, and map rendering in this section of
    the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Datasources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each map layer is associated with a **datasource** (a subclass of `mapnik.Datasource`)
    that provides the data to be displayed on the map. The various types of datasources
    are made available through C++ plugins, which are enabled or disabled when Mapnik
    is compiled. To see if a given type of datasource is available, you check to see
    if the associated plugin has been installed into your copy of Mapnik. You can
    see a list of the installed plugins (and therefore, the supported datasources)
    by typing the following into the Python command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following datasource plugins are currently supported by Mapnik:'
  prefs: []
  type: TYPE_NORMAL
- en: '**csv**: This plugin provides the `mapnik.CSV` datasource, which reads tabular
    data from either a text file or a string. By default, the data is in **CSV** (**comma-separated
    value**) format, though other similar formats are also supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSV datasource will automatically identify point geometries based on columns
    with headers containing names like "lat", "latitude", "lon", "long", and "longitude".
    The datasource will also detect GeoJSON and WKT formatted geometries if the column
    header is named "geojson" or "wkt". Documentation for the `csv` plugin can be
    found at [https://github.com/mapnik/mapnik/wiki/CSV-Plugin](https://github.com/mapnik/mapnik/wiki/CSV-Plugin).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**gdal**: This plugin provides the `mapnik.Gdal` datasource. This datasource
    uses the GDAL library to read raster-format data and make it available to the
    map layer. To use this datasource in a map layer, you need to add a style to the
    map layer which includes a `mapnik.RasterSymbolizer` to draw the raster data onto
    the map. Documentation for the `gdal` plugin can be found at [https://github.com/mapnik/mapnik/wiki/GDAL](https://github.com/mapnik/mapnik/wiki/GDAL).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ogr**: This plugin implements the `mapnik.Ogr` datasource. This datasource
    uses the OGR library to read vector-format data. Documentation for the `ogr` plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/OGR](https://github.com/mapnik/mapnik/wiki/OGR).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**osm**: The `osm` plugin provides the `mapnik.Osm` datasource. This datasource
    reads data in OpenStreetMap XML format. Documentation for the `osm` plugin can
    be found at [https://github.com/mapnik/mapnik/wiki/OsmPlugin](https://github.com/mapnik/mapnik/wiki/OsmPlugin).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**postgis**: This plugin provides the `mapnik.PostGIS` datasource. This datasource
    connects to a PostGIS database and reads spatial data from a specified database
    table. You use the `host`, `dbname`, `user`, and `password` parameters when creating
    a PostGIS datasource to tell Mapnik how to connect to a given PostGIS database,
    while the `table` parameter specifies which table in the database to read the
    data from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional parameters are available for special purposes, for example to limit
    the extent of the data to display, or to use an SQL subquery to include only some
    of the records in the database table. Complete documentation for the postgis plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/PostGIS](https://github.com/mapnik/mapnik/wiki/PostGIS).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**python**: This plugin provides the `mapnik.Python` datasource. This allows
    you to implement your own datasource by writing a custom Python class that provides
    access to the data to be displayed. To write a custom Python datasource, you would
    typically create a subclass of `mapnik.PythonDatasource` and then use the name
    of your custom class as the `factory` parameter when calling the mapnik.Python()
    function to instantiate your datasource. You then implement the necessary methods
    within your class to provide access to the data. Documentation for the python
    plugin can be found at [https://github.com/mapnik/mapnik/wiki/Python-Plugin](https://github.com/mapnik/mapnik/wiki/Python-Plugin).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**raster**: This plugin implements the `mapnik.Raster` datasource, which displays
    the contents of a raster image file in either TIFF or GeoTIFF format. While you
    can also read raster-format data using the `gdal` plugin, the `raster` plugin
    is faster when reading these types of files. To use this datasource in a map layer,
    you need to add a style to the map layer which includes a `RasterSymbolizer` to
    draw the contents of the image file onto the map. Documentation for the `raster`
    plugin can be found at [https://github.com/mapnik/mapnik/wiki/Raster](https://github.com/mapnik/mapnik/wiki/Raster).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shape**: This plugin provides the `mapnik.Shapefile` datasource, which allows
    you to read shapefiles. While the `ogr` datasource is also able to read shapefiles,
    it is often more convenient to use the `mapnik.Shapefile` datasource. Documentation
    for the `shape` plugin can be found at [https://github.com/mapnik/mapnik/wiki/ShapeFile](https://github.com/mapnik/mapnik/wiki/ShapeFile).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sqlite**: This plugin provides the `mapnik.SQLite` datasource. This datasource
    reads spatial data from an SQLite database. The database can either be an ordinary
    SQLite database holding geometry data in WKB format, or a spatially-enabled database
    using the Spatialite database extension. Documentation for the `sqlite` plugin
    can be found at [https://github.com/mapnik/mapnik/wiki/SQLite](https://github.com/mapnik/mapnik/wiki/SQLite).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbolizers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Symbolizers do the actual work of drawing a feature onto the map. Multiple symbolizers
    are often used to draw a single feature—we saw this earlier when we used a `PolygonSymbolizer`
    to draw the interior of a polygon together with a `LineSymbolizer` to draw the
    polygon's outline.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different types of symbolizers available within Mapnik, and many
    of the symbolizers have complex options associated with them. Rather than exhaustively
    listing all the symbolizers and their various options, we will instead just look
    at some of the more common types of symbolizers and how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: PointSymbolizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `PointSymbolizer` class is used to draw an image centered over a Point
    geometry. By default, each point is displayed as a 4 x 4 pixel black square:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PointSymbolizer](img/4102_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To use a different image, you have to create a `mapnik.PathExpression` object
    to represent the path to the desired image file, and then pass that to the `PointSymbolizer`
    object when you instantiate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![PointSymbolizer](img/4102_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that `PointSymbolizer` draws the image centered on the desired point.
    To use a drop-pin image as shown in the preceding example, you will need to add
    extra transparent whitespace so that the tip of the pin is in the middle of the
    image, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PointSymbolizer](img/4102_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can control the opacity of the drawn image by setting the symbolizer's `opacity`
    attribute. You can also control whether labels will be drawn on top of the image
    by setting the `allow_overlap` attribute to `True`. Finally, you can apply an
    SVG transformation to the image by setting the `transform` attribute to a string
    containing a standard SVG transformation expression, for example `point_symbol.transform
    = "rotate(45)"`.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation for the PointSymbolizer can be found at [https://github.com/mapnik/mapnik/wiki/PointSymbolizer](https://github.com/mapnik/mapnik/wiki/PointSymbolizer).
  prefs: []
  type: TYPE_NORMAL
- en: LineSymbolizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `mapnik.LineSymbolizer` is used to draw LineString geometries and the outlines
    of Polygon geometries. When you create a new LineSymbolizer, you would typically
    configure it using two parameters: the color to use to draw the line as a `mapnik.Color`
    object, and the width of the line, measured in pixels. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice that you can use fractional line widths; because Mapnik uses anti-aliasing,
    a line narrower than 1 pixel will often look better than a line with an integer
    width if you are drawing many lines close together.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the color and the width, you can also make the line semi-transparent
    by setting the `opacity` attribute. This should be set to a number between 0.0
    and 1.0, where 0.0 means the line will be completely transparent and 1.0 means
    the line will be completely opaque.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `stroke` attribute to get access to (or replace) the stroke
    object used by the line symbolizer. The stroke object, an instance of `mapnik.Stroke`,
    can be used for more complicated visual effects. For example, you can create a
    dashed line effect by calling the stroke''s `add_dash()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Both numbers are measured in pixels; the first number is the length of the dash
    segment, while the second is the length of the gap between dashes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you can create alternating dash patterns by calling `add_dash()` more
    than once.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set the stroke''s `line_cap` attribute to control how the ends
    of the line should be drawn, and the stroke''s `line_join` attribute to control
    how the joins between the individual line segments are drawn whenever the LineString
    changes direction. The `line_cap` attribute can be set to one of the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `line_join` attribute can be set to one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Documentation for the `LineSymbolizer` class can be found at [https://github.com/mapnik/mapnik/wiki/LineSymbolizer](https://github.com/mapnik/mapnik/wiki/LineSymbolizer).
  prefs: []
  type: TYPE_NORMAL
- en: PolygonSymbolizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `mapnik.PolygonSymbolizer` class is used to fill the interior of a Polygon
    geometry with a given color. When you create a new PolygonSymbolizer, you would
    typically pass it a single parameter: the `mapnik.Color` object to use to fill
    the polygon. You can also change the opacity of the symbolizer by setting the
    `fill_opacity` attribute, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once again, the opacity is measured from 0.0 (completely transparent) to 1.0
    (completely opaque).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one other PolygonSymbolizer attribute which you might find useful:
    `gamma`. The `gamma` value can be set to a number between 0.0 and 1.0\. The `gamma`
    value controls the amount of anti-aliasing used to draw the edge of the polygon;
    with the default `gamma` value of `1.0`, the edges of the polygon will be fully
    anti-aliased. While this is usually a good thing, if you try to draw adjacent
    polygons with the same color, the antialiasing will cause the edges of the polygons
    to be visible rather than combining them into a single larger area. By turning
    down the gamma slightly (for example, `fill_symbol.gamma = 0.6`), the edges between
    adjacent polygons will disappear.'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation for the `PolygonSymbolizer` class can be found at [https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer](https://github.com/mapnik/mapnik/wiki/PolygonSymbolizer).
  prefs: []
  type: TYPE_NORMAL
- en: TextSymbolizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `TextSymbolizer` class is used to draw textual labels onto a map. This
    type of symbolizer can be used for point, LineString, and Polygon geometries.
    The following example shows how a TextSymbolizer can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, four parameters are typically passed to the TextSymbolizer''s
    initializer:'
  prefs: []
  type: TYPE_NORMAL
- en: A `mapnik.Expression` object defining the text to be displayed. In this case,
    the text to be displayed will come from the `label` attribute in the datasource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The name of the font to use for drawing the text. To see what fonts are available,
    type the following into the Python command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The font size, measured in pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The color to use to draw the text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, the text will be drawn in the center of the geometry; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TextSymbolizer](img/4102_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This positioning of the label is called **point** **placement**. The TextSymbolizer
    allows you to change this to use what is called **line** **placement**, where
    the label will be drawn along the lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![TextSymbolizer](img/4102_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this causes the label to be drawn along the length of a LineString
    geometry, or along the perimeter of a Polygon. The text won't be drawn at all
    for a Point geometry, since there are no lines within a point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TextSymbolizer will normally just draw the label once, but you can tell
    the symbolizer to repeat the label if you wish by specifying a pixel gap to use
    between each label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![TextSymbolizer](img/4102_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, Mapnik is smart enough to stop labels from overlapping each other.
    If possible, it moves the label slightly to avoid an overlap, and then hides the
    label completely if it would still overlap. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TextSymbolizer](img/4102_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can change this by setting the `allow_overlap` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![TextSymbolizer](img/4102_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you can set a halo effect to draw a lighter-colored border around the
    text so that it is visible even against a dark background. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![TextSymbolizer](img/4102_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many more labeling options, all of which are described at length in
    the documentation for the `TextSymbolizer` class. This can be found at [https://github.com/mapnik/mapnik/wiki/TextSymbolizer](https://github.com/mapnik/mapnik/wiki/TextSymbolizer).
  prefs: []
  type: TYPE_NORMAL
- en: RasterSymbolizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `RasterSymbolizer` class is used to draw raster-format data onto a map.
    This type of symbolizer is typically used in conjunction with a Raster or GDAL
    datasource. To create a new raster symbolizer, you instantiate a new `mapnik.RasterSymbolizer`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The raster symbolizer will automatically draw any raster-format data provided
    by the map layer''s datasource. This is often used to draw a basemap onto which
    the vector data is to be displayed; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RasterSymbolizer](img/4102_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While there are some advanced options to control the way the raster data is
    displayed, in most cases, the only option you might be interested in is the `opacity`
    attribute. As usual, this sets the opacity for the displayed image, allowing you
    to layer semi-transparent raster images one on top of the other.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation for the `RasterSymbolizer` can be found at [https://github.com/mapnik/mapnik/wiki/RasterSymbolizer](https://github.com/mapnik/mapnik/wiki/RasterSymbolizer).
  prefs: []
  type: TYPE_NORMAL
- en: Map rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have now examined in detail many of the building blocks for generating maps:
    layers, datasources, styles, rules, filters, and symbolizers. Using what you have
    learned, you should be able to build and style your own maps. But what can you
    do with a `mapnik.Map` object once you have set one up?'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example program we examined at the start of this chapter, we used the
    `mapnik.render_to_file()` function to save the generated map into an image file.
    When rendering the map, you first have to set the map''s **extent**—that is, the
    rectangle that defines the visible portion of the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map rendering](img/4102_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Only the visible extent of the map will be included in the generated image;
    everything else will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example program, we used `map.zoom_all()` to set the visible extent
    of the map to include all the features in all the map layers. Of course, there
    are times when you only want to display part of the overall map. To do this, you
    can use the `map.zoomToBox()` method to set the visible extent of the map. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The four numbers represent the minimum longitude, the minimum latitude, the
    maximum longitude, and the maximum latitude, respectively. If you execute this
    statement using these latitude and longitude values, the visible extent of the
    map will cover approximately the American state of California.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you aren't limited to only rendering a map once. If you want, you
    can create multiple images from a single `mapnik.Map` object, changing the visible
    extent and then calling `mapnik.render_to_file()` to save the newly-visible portion
    of the map to a different file each time.
  prefs: []
  type: TYPE_NORMAL
- en: A working example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's put together everything that we have learned to write a program that can
    display the contents of a shapefile. This is quite a useful program to have, as
    you can manipulate or generate some spatial data, save the results into a shapefile,
    and then run this program to display the shapefile's contents as a generated map
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll call our program `shapeToMap.py`. Create this file, and start entering
    the following Python code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the various constants we have defined here will be used to configure
    the map that we are going to generate:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LAYERS`: This is a list of the map layers to display on the map. Each item
    in this list should be a dictionary with all or some of following entries:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shapefile`: The name and path of the desired shapefile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lineColor`: The hexadecimal color code to use to draw the feature''s exterior,
    if any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lineWidth`: The width of the line to use to draw the feature''s exterior,
    measured in pixels'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillColor`: The hexadecimal color code to use to draw the feature''s interior,
    if any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labelField`: The name of the attribute in the source file to use to label
    each feature, if any'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labelSize`: The font size to use when labeling the features, measured in pixels'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labelColor`: The hexadecimal color code to use to draw the label'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BACKGROUND_COLOR`: This is the hexadecimal color code to use to draw the background
    of the map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BOUNDS_MIN_LAT`, `BOUNDS_MIN_LONG`, `BOUNDS_MAX_LAT`, and `BOUNDS_MAX_LONG`:
    These define the visible extent of the map you want to generate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MAX_WIDTH` and `MAX_HEIGHT`: These specify the maximum size of the generated
    map image. Note that the generated image may actually be smaller than these values,
    depending on the aspect ratio of the bounding rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever you want to generate a map using this program, you will need to edit
    these constants to suit your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We next need to calculate the height and width to use for our map. Because
    the visible extent can be any shape, we calculate the actual width and height
    to be as large as possible while matching the aspect ratio of the visible extent.
    We do this by first calculating the map''s width and height so that the width
    is the maximum allowable width, and the height is whatever is needed to match
    the aspect ratio of the visible extent. To do this, add the following code to
    the end of your program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We next see if the calculated height is too big, and if so, scale down the
    map so that the height is no bigger than the allowable maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This ensures that the generated map is as large as possible, while ensuring
    the map has the same aspect ratio as the visible extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how big our map will be, we can create and initialize our
    `mapnik.Map` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We next need to define our various map styles, using a single style and rule
    for each of our map layers. Note that we use the various dictionary entries from
    our `LAYERS` list to define a map style for each layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to define the various layers for our map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the map image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Since you have studied the various classes and methods in the *Learning Mapnik*
    section of this chapter, you should hopefully be able to understand what all this
    code does. If anything is unclear, please go back and review the relevant part
    of that section. A complete copy of this program can be downloaded as part of
    the source code available for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the various constants we defined earlier, you should be able to use this
    program to draw the contents of the World Borders Dataset. Simply place the `TM_WORLD_BORDERS-0.3`
    directory into the same folder as the `shapeToMap.py` program, and try running
    the program. All going well, the program should generate a `map.png` image, which
    displays the contents of the World Borders Dataset for Western and Central Europe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A working example](img/4102_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look closely at this image, you''ll notice that some of the labels are
    hidden behind other polygons. This is because we have told our program to draw
    the polygons and their labels in the same map layer. To fix this, replace your
    `LAYERS` definition with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we're now displaying the shapefile in two separate map layers,
    one to draw the country polygons, and a second map layer to draw all the labels
    in front of the polygons. If you run your program again, you'll see that the labeling
    problem has been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: This should give you an idea of how useful the `shapeToMap.py` program can be.
    Simply by changing the constants at the top of the program, you can quickly view
    the contents of any shapefile. In fact, many of the illustrations in this book
    were generated using a modified version of this program.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the `shapeToMap.py` program has been kept deliberately simple to make
    it easier to understand, there is a lot that can be done to improve this program
    and make it more useful. You might like to try challenging yourself by implementing
    the following new features:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an optional `labelHalo` entry to each map layer, which is used to draw a
    halo around the label text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `labelPlacement` entry to the map layer, to make it easy to control the
    label placement options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `labelAllowOverlap` entry to the map layer, which controls whether or
    not the labels are allowed to overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `filter` entry to the map layer, which is used to build a `mapnik.Filter()`
    expression to limit the set of features displayed within the map layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an option to dynamically calculate the visible extent of the map based on
    the bounding box for each feature. This would allow you to generate the map without
    having to calculate the bounds beforehand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a call to `os.system("open map.png")` (for Mac OS X) or `os.startfile("map.png")`
    (for MS Windows) to automatically display the image once it has been generated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for shapefiles which use a projection other than the default EPSG
    4326.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load the configuration constants from a separate module, so you don't have to
    edit the Python source file every time you want to change the data to be displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more sophisticated version of `shapeToMap.py` called `generateMap.py` has
    been provided as part of the source code for this chapter. The `generateMap.py`
    program implements all of the preceding suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the Mapnik map-generation library and how to use
    it within a Python program to create great-looking maps. You installed Mapnik,
    looked at a simple example of how it could be used, and then began to learn more
    about the process of constructing and styling a map.
  prefs: []
  type: TYPE_NORMAL
- en: We then examined Mapnik in more detail, looking at the various types of datasources
    which you can use to load spatial data into a map layer. We also examined the
    various symbolizers which can be used to display spatial features, how the visible
    extent is used to control the portion of the map to be displayed, and how to render
    a map as an image file. We then created a useful Python program called `shapeToMap.py`,
    which can be used to generate a map out of any spatial data stored in shapefiles,
    and finally looked at some of the ways in which `shapeToMap.py` could be improved
    to make it even more useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at various tools and techniques for analyzing
    spatial data, including how to use Python to solve a variety of interesting geospatial
    problems.
  prefs: []
  type: TYPE_NORMAL
