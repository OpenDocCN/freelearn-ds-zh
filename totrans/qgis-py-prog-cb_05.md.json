["```py\n    canvas = qgis.utils.iface.mapCanvas()\n\n    ```", "```py\n    canvas.size()\n\n    ```", "```py\n    PyQt4.QtCore.QSize(698, 138)\n\n    ```", "```py\n    canvas = iface.mapCanvas()\n\n    ```", "```py\n    canvas.mapUnits()\n\n    ```", "```py\n    canvas.setMapUnits(QGis.Meters)\n\n    ```", "```py\n    lyr_1 = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    lyr_2 = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/MSCities_Geo_Pts.shp\", \"Cities\", \"ogr\")\n\n    ```", "```py\n    registry = QgsMapLayerRegistry.instance()\n\n    ```", "```py\n    registry.addMapLayers([lyr_2, lyr_1])\n\n    ```", "```py\n    layers = registry.mapLayers()\n\n    ```", "```py\n    for l in layers:\n     printl.title()\n\n    ```", "```py\n    Cities20140904160234792\n    Mississippi20140904160234635\n\n    ```", "```py\n    from PyQt4.QtGui import *\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    symbols = lyr.rendererV2().symbols()\n\n    ```", "```py\n    sym = symbols[0]\n\n    ```", "```py\n    sym.setColor(QColor.fromRgb(255,0,0))\n\n    ```", "```py\n    lyr.triggerRepaint()\n\n    ```", "```py\n    from PyQt4 import QtGui\n\n    ```", "```py\n    lyr = QgsRasterLayer(\"/Users/joellawhead/qgis_data/rasters/dem.asc\", \"DEM\")\n\n    ```", "```py\n    s = QgsRasterShader()\n\n    ```", "```py\n    c = QgsColorRampShader()\n\n    ```", "```py\n    c.setColorRampType(QgsColorRampShader.INTERPOLATED)\n\n    ```", "```py\n    i = []\n\n    ```", "```py\n    i.append(QgsColorRampShader.ColorRampItem(400, QtGui.QColor('#d7191c'), '400'))\n    i.append(QgsColorRampShader.ColorRampItem(900, QtGui.QColor('#fdae61'), '900'))\n    i.append(QgsColorRampShader.ColorRampItem(1500, QtGui.QColor('#ffffbf'), '1500'))\n    i.append(QgsColorRampShader.ColorRampItem(2000, QtGui.QColor('#abdda4'), '2000'))\n    i.append(QgsColorRampShader.ColorRampItem(2500, QtGui.QColor('#2b83ba'), '2500'))\n\n    ```", "```py\n    c.setColorRampItemList(i)\n\n    ```", "```py\n    s.setRasterShaderFunction(c)\n\n    ```", "```py\n    ps = QgsSingleBandPseudoColorRenderer(lyr.dataProvider(), 1,  s)\n\n    ```", "```py\n    lyr.setRenderer(ps)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/shapes/paths.shp\", \"Route\", \"ogr\")\n\n    ```", "```py\n    symbolList = lyr.rendererV2().symbols()\n    symbol = symbolList[0]\n\n    ```", "```py\n    symLyrReg = QgsSymbolLayerV2Registry\n\n    ```", "```py\n    lineStyle = {'width':'0.26', 'color':'0,0,0'}\n\n    ```", "```py\n    symLyr1Meta = symLyrReg.instance().symbolLayerMetadata(\"SimpleLine\")\n\n    ```", "```py\n    symLyr1 = symLyr1Meta.createSymbolLayer(lineStyle)\n\n    ```", "```py\n    symbol.appendSymbolLayer(symLyr1)\n\n    ```", "```py\n    markerStyle = {}\n    markerStyle['width'] = '0.26'\n    markerStyle['color'] = '0,0,0'\n    markerStyle['interval'] = '3'\n    markerStyle['interval_unit'] = 'MM'\n    markerStyle['placement'] = 'interval'\n    markerStyle['rotate'] = '1'\n\n    ```", "```py\n    symLyr2Meta = symLyrReg.instance().symbolLayerMetadata(\"MarkerLine\")\n\n    ```", "```py\n    symLyr2 = symLyr2Meta.createSymbolLayer(markerStyle)\n\n    ```", "```py\n    sybSym = symLyr2.subSymbol()\n\n    ```", "```py\n    sybSym.deleteSymbolLayer(0)\n\n    ```", "```py\n    railStyle = {'size':'2', 'color':'0,0,0', 'name':'line', 'angle':'0'}\n\n    ```", "```py\n    railMeta = symLyrReg.instance().symbolLayerMetadata(\"SimpleMarker\")\n    rail = railMeta.createSymbolLayer(railStyle) \n    sybSym.appendSymbolLayer(rail)\n\n    ```", "```py\n    symbol.appendSymbolLayer(symLyr2)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    src = \"/qgis_data/nyc/NYC_MUSEUMS_GEO.shp\"\n\n    ```", "```py\n    lyr = QgsVectorLayer(src, \"Museums\", \"ogr\")\n\n    ```", "```py\n    fontStyle = {}\n    fontStyle['color'] = '#000000'\n    fontStyle['font'] = 'Webdings'\n    fontStyle['chr'] = 'G'\n    fontStyle['size'] = '6'\n\n    ```", "```py\n    symLyr1 = QgsFontMarkerSymbolLayerV2.create(fontStyle)\n\n    ```", "```py\n    lyr.rendererV2().symbols()[0].changeSymbolLayer(0, symLyr1)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from PyQt4.QtGui import QColor\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/qgis_data/ms/MS_UrbanAnC10.shp\", \"Urban Areas\", \"ogr\")\n\n    ```", "```py\n    population = (\n    (\"Village\", 0.0, 3159.0, \"cyan\"), \n    (\"Small town\", 3160.0, 4388.0, \"blue\"),\n    (\"Town\", 43889.0, 6105.0, \"green\"),\n    (\"City\", 6106.0, 10481.0, \"yellow\"),\n    (\"Large City\", 10482.0, 27165, \"orange\"),\n    (\"Metropolis\", 27165.0, 1060061.0, \"red\"))\n\n    ```", "```py\n    ranges = []\n\n    ```", "```py\n    for label, lower, upper, color in population:\n    sym = QgsSymbolV2.defaultSymbol(lyr.geometryType())\n    sym.setColor(QColor(color))\n    rng = QgsRendererRangeV2(lower, upper, sym, label)\n    ranges.append(rng)\n\n    ```", "```py\n    field = \"POP\"\n\n    ```", "```py\n    renderer = QgsGraduatedSymbolRendererV2(field, ranges)\n\n    ```", "```py\n    lyr.setRendererV2(renderer)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from PyQt4.QtGui import QColor\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"Users/joellawhead/qgis_data/hancock/landuse.shp\", \"Land Use\", \"ogr\")\n\n    ```", "```py\n    landuse = {\n     \"0\":(\"yellow\", \"Developed\"),\n     \"1\":(\"darkcyan\", \"Water\"),\n     \"2\":(\"green\", \"Land\")}\n\n    ```", "```py\n    categories = []\n    for terrain, (color, label) in landuse.items():\n     sym = QgsSymbolV2.defaultSymbol(lyr.geometryType())\n     sym.setColor(QColor(color))\n     category = QgsRendererCategoryV2(terrain, sym, label)\n     categories.append(category)\n\n    ```", "```py\n    field = \"DN\"\n\n    ```", "```py\n    renderer = QgsCategorizedSymbolRendererV2(field, categories)\n\n    ```", "```py\n    lyr.setRendererV2(renderer)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    import sqlite3\n\n    ```", "```py\n    dbPath = QgsApplication.qgisUserDbFilePath()\n\n    ```", "```py\n    db = sqlite3.connect(dbPath)\n\n    ```", "```py\n    cursor = db.cursor()\n\n    ```", "```py\n    cursor.execute(\"\"\"INSERT INTO tbl_bookmarks(\n     bookmark_id, name, project_name,\n     xmin, ymin, xmax, ymax, \n     projection_srid)\n     VALUES(NULL, \"BSL\", NULL,\n     -89.51715550010032,\n     30.233838337125075,\n     -89.27257255649518,\n     30.381717490617945,\n     4269)\"\"\")\n\n    ```", "```py\n    db.commit()\n\n    ```", "```py\n    import sqlite3\n\n    ```", "```py\n    dbPath = QgsApplication.qgisUserDbFilePath()\n\n    ```", "```py\n    db = sqlite3.connect(dbPath)\n\n    ```", "```py\n    cursor = db.cursor()\n\n    ```", "```py\n    cursor.execute(\"\"\"SELECT * FROM tbl_bookmarks WHERE name='BSL'\"\"\")\n\n    ```", "```py\n    row = cursor.fetchone()\n\n    ```", "```py\n    id,mark_name,project,xmin,ymin,xmax,ymax,srid = row\n\n    ```", "```py\n    rect = QgsRectangle(xmin, ymin, xmax, ymax)\n\n    ```", "```py\n    canvas = qgis.utils.iface.mapCanvas()\n\n    ```", "```py\n    canvas.setExtent(rect)\n    canvas.refresh()\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/census/GIS_CensusTract_poly.shp\", \"Census\", \"ogr\")\n\n    ```", "```py\n    lyr.toggleScaleBasedVisibility(True)\n\n    ```", "```py\n    lyr.setMinimumScale(22945.0)\n    lyr.setMaximumScale(1000000.0)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    src = \"/Users/joellawhead/qgis_data/NYC_MUSEUMS_GEO/NYC_MUSEUMS_GEO.shp\"\n\n    ```", "```py\n    lyr = QgsVectorLayer(src, \"Museums\", \"ogr\")\n\n    ```", "```py\n    svgStyle = {}\n    svgStyle['fill'] = '#0000ff'\n    svgStyle['name'] = 'landmark/tourism=museum.svg'\n    svgStyle['outline'] = '#000000'\n    svgStyle['outline-width'] = '6.8'\n    svgStyle['size'] = '6'\n\n    ```", "```py\n    symLyr1 = QgsSvgMarkerSymbolLayerV2.create(svgStyle)\n\n    ```", "```py\n    lyr.rendererV2().symbols()[0].changeSymbolLayer(0, symLyr1)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from PyQt4.QtGui import *\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/County10PopnHou.shp\", \"Population\", \"ogr\")\n\n    ```", "```py\n    categories = [u'PCT_WHT', u'PCT_BLK', u'PCT_AMIND', u'PCT_ASIAN', u'PCT_HAW', u'PCT_ORA', u'PCT_MR', u'PCT_HISP']\n\n    ```", "```py\n    colors = ['#3727fa','#01daae','#f849a6','#268605','#6810ff','#453990','#630f2f','#07dd45']\n\n    ```", "```py\n    qcolors = []\n    for c in colors:\n     qcolors.append(QColor(c))\n\n    ```", "```py\n    canvas = iface.mapCanvas()\n\n    ```", "```py\n    diagram = QgsPieDiagram()\n\n    ```", "```py\n    ds = QgsDiagramSettings()\n\n    ```", "```py\n    ds.font = QFont(\"Helvetica\", 12)\n    ds.transparency = 0\n    ds.categoryColors = qcolors\n    ds.categoryAttributes = categories\n    ds.size = QSizeF(100.0, 100.0)\n    ds.sizeType = 0 \n    ds.labelPlacementMethod = 1 \n    ds.scaleByArea = True \n    ds.minimumSize = 0 \n    ds.BackgroundColor = QColor(255,255,255,0)\n    ds.PenColor = QColor(\"black\") \n    ds.penWidth = 0\n\n    ```", "```py\n    dr = QgsLinearlyInterpolatedDiagramRenderer()\n\n    ```", "```py\n    dr.setLowerValue(0.0)\n    dr.setLowerSize(QSizeF(0.0, 0.0))\n    dr.setUpperValue(2000000)\n    dr.setUpperSize(QSizeF(40,40))\n    dr.setClassificationAttribute(6)\n\n    ```", "```py\n    dr.setDiagram(diagram)\n\n    ```", "```py\n    lyr.setDiagramRenderer(dr)\n\n    ```", "```py\n    dls = QgsDiagramLayerSettings() \n    dls.dist = 0\n    dls.priority = 0\n    dls.xPosColumn = -1 \n    dls.yPosColumn = -1\n    dls.placement = 0 \n    lyr.setDiagramLayerSettings(dls)\n\n    ```", "```py\n    label = QgsPalLayerSettings() \n    label.readFromLayer(lyr) \n    label.enabled = True \n    label.writeToLayer(lyr)\n\n    ```", "```py\n    if hasattr(lyr, \"setCacheImage\"):\n     lyr.setCacheImage(None)\n\n    lyr.triggerRepaint()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from osgeo import gdal\n\n    ```", "```py\n    xml = \"\"\"<GDAL_WMS>\n    <Service name=\"TMS\">\n    <ServerUrl>http://tile.openstreetmap.org/${z}/${x}/${y}.png</ServerUrl>\n    </Service>\n    <DataWindow>\n    <UpperLeftX>-20037508.34</UpperLeftX>\n    <UpperLeftY>20037508.34</UpperLeftY>\n    <LowerRightX>20037508.34</LowerRightX>\n    <LowerRightY>-20037508.34</LowerRightY>\n    <TileLevel>18</TileLevel>\n    <TileCountX>1</TileCountX>\n    <TileCountY>1</TileCountY>\n    <YOrigin>top</YOrigin>\n    </DataWindow>\n    <Projection>EPSG:900913</Projection>\n    <BlockSizeX>256</BlockSizeX>\n    <BlockSizeY>256</BlockSizeY>\n    <BandsCount>3</BandsCount>\n    <Cache />\n    </GDAL_WMS>\"\"\"\n    ```", "```py\n    vfn = \"/vsimem/osm.xml\"\n\n    ```", "```py\n    gdal.FileFromMemBuffer(vfn, xml)\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(vfn, \"OSM\")\n\n    ```", "```py\n    rasterLyr.isValid()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr])\n\n    ```", "```py\n    from osgeo import gdal\n\n    ```", "```py\n    xml = \"\"\"<GDAL_WMS>\n      <Service name=\"VirtualEarth\">\n        <ServerUrl>\n          http://a${server_num}.ortho.tiles.virtualearth.net/tiles/a${quadkey}.jpeg?g=90\n        </ServerUrl>\n      </Service>\n      <MaxConnections>4</MaxConnections>\n      <Cache/>\n    </GDAL_WMS>\"\"\"\n    ```", "```py\n    vfn = \"/vsimem/bing.xml\"\n\n    ```", "```py\n    gdal.FileFromMemBuffer(vfn, xml)\n\n    ```", "```py\n    rasterLyr = QgsRasterLayer(vfn, \"BING\")\n    rasterLyr.isValid()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rasterLyr])\n\n    ```", "```py\n    service = 'crs=EPSG:900913&dpiMode=7&featureCount=10&format=image/png&layers=precipitation&styles=&url=http://wms.openweathermap.org/service'\n\n    ```", "```py\n    rlayer = QgsRasterLayer(service, \"precip\", \"wms\")\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([rlayer])\n\n    ```", "```py\n    src = \"/Users/joellawhead/qgis_data/ms/MSCities_Geo_Pts.shp\"\n\n    ```", "```py\n    lyr = QgsVectorLayer(src, \"Museums\", \"ogr\")\n\n    ```", "```py\n    label = QgsPalLayerSettings()\n\n    ```", "```py\n    label.readFromLayer(lyr)\n    label.enabled = True\n\n    ```", "```py\n    label.fieldName = 'NAME10' \n\n    ```", "```py\n    label.placement= QgsPalLayerSettings.AroundPoint\n    label.setDataDefinedProperty(QgsPalLayerSettings.Size,True,True,'8','')\n\n    ```", "```py\n    label.writeToLayer(lyr)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([lyr])\n\n    ```", "```py\n    lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n\n    ```", "```py\n    lyr.setLayerTransparency(50)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from qgis.gui import *\n    from qgis.core import *\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import SIGNAL, Qt\n    import sys, os\n\n    ```", "```py\n    # OSX:\n    QgsApplication.setPrefixPath(\"/Applications/QGIS.app/Contents/MacOS/\", True)\n    # Windows:\n    # app.setPrefixPath(\"C:/Program Files/QGIS Valmiera/apps/qgis\", True)\n\n    ```", "```py\n    class MyWnd(QMainWindow):\n     def __init__(self):\n\n    ```", "```py\n    QMainWindow.__init__(self)\n    QgsApplication.setPrefixPath(\"/Applications/QGIS.app/Contents/MacOS/\", True)\n    QgsApplication.initQgis()\n    self.canvas = QgsMapCanvas()\n    self.canvas.setCanvasColor(Qt.white)\n\n    ```", "```py\n    self.lyr = QgsVectorLayer(\"/Users/joellawhead/qgis_data/ms/mississippi.shp\", \"Mississippi\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayer(self.lyr)\n    self.canvas.setExtent(self.lyr.extent())\n    self.canvas.setLayerSet([QgsMapCanvasLayer(self.lyr)])\n    self.setCentralWidget(self.canvas)\n\n    ```", "```py\n    actionZoomIn = QAction(\"Zoom in\", self)\n    actionZoomOut = QAction(\"Zoom out\", self)\n    actionPan = QAction(\"Pan\", self)\n    actionZoomIn.setCheckable(True)\n    actionZoomOut.setCheckable(True)\n    actionPan.setCheckable(True)\n\n    ```", "```py\n    actionZoomIn.triggered.connect(self.zoomIn)\n    actionZoomOut.triggered.connect(self.zoomOut)\n    actionPan.triggered.connect(self.pan)\n\n    ```", "```py\n    self.toolbar = self.addToolBar(\"Canvas actions\")\n    (actionZoomIn)\n    self.toolbar.addAction(actionZoomOut)\n    self.toolbar.addAction(actionPan)\n\n    ```", "```py\n    self.toolPan = QgsMapToolPan(self.canvas)\n    self.toolPan.setAction(actionPan)\n    self.toolZoomIn = QgsMapToolZoom(self.canvas, False) # false = in\n    self.toolZoomIn.setAction(actionZoomIn)\n    self.toolZoomOut = QgsMapToolZoom(self.canvas, True) # true = out\n    self.toolZoomOut.setAction(actionZoomOut)\n\n    ```", "```py\n    self.pan()\n\n    ```", "```py\n    defzoomIn(self):\n    self.canvas.setMapTool(self.toolZoomIn)\n    defzoomOut(self):\n    self.canvas.setMapTool(self.toolZoomOut)\n    def pan(self):\n    self.canvas.setMapTool(self.toolPan)\n\n    ```", "```py\n    class MainApp(QApplication):\n    def __init__(self):\n    QApplication.__init__(self,[],True)\n    wdg = MyWnd()\n    wdg.show()\n    self.exec_()\n\n    ```", "```py\n    if __name__ == \"__main__\":\n    import sys\n    app = MainApp()\n\n    ```", "```py\n    actionPoint = QAction(\"Point\", self)\n\n    ```", "```py\n    actionPoint.setCheckable(True)\n\n    ```", "```py\n    self.connect(actionPoint, SIGNAL(\"triggered()\"), self.point)\n\n    ```", "```py\n    self.toolbar.addAction(actionPoint)\n\n    ```", "```py\n    self.toolPoint = PointMapTool(self.canvas)\n    self.toolPoint.setAction(actionPoint)\n\n    ```", "```py\n    self.point()\n\n    ```", "```py\n    def point(self):\n    self.canvas.setMapTool(self.toolPoint)\n\n    ```", "```py\n    classPointMapTool(QgsMapToolEmitPoint):\n    def __init__(self, canvas):\n    self.canvas = canvas\n    QgsMapToolEmitPoint.__init__(self, self.canvas)\n    self.point = None\n\n    defcanvasPressEvent(self, e):\n    self.point = self.toMapCoordinates(e.pos())\n    printself.point.x(), self.point.y()\n    m = QgsVertexMarker(self.canvas)\n    m.setCenter(self.point)\n    m.setColor(QColor(0,255,0))\n    m.setIconSize(5)\n    m.setIconType(QgsVertexMarker.ICON_BOX) # or ICON_CROSS, ICON_X\n    m.setPenWidth(3)\n\n    ```", "```py\n    actionPoly = QAction(\"Polygon\", self)\n\n    ```", "```py\n    actionPoly.setCheckable(True)\n\n    ```", "```py\n    self.connect(actionPoly, SIGNAL(\"triggered()\"), self.poly)\n\n    ```", "```py\n    self.toolbar.addAction(actionPoly)\n\n    ```", "```py\n    self.toolPoly = PolyMapTool(self.canvas)\n    self.toolPoly.setAction(actionPoly)\n\n    ```", "```py\n    self.poly()\n\n    ```", "```py\n    def poly(self):\n    self.canvas.setMapTool(self.toolPoly)\n\n    ```", "```py\nclassPolyMapTool(QgsMapToolEmitPoint):\ndef __init__(self, canvas):\nself.canvas = canvas\nQgsMapToolEmitPoint.__init__(self, self.canvas)\nself.rubberband = QgsRubberBand(self.canvas, QGis.Polygon)\nself.rubberband.setColor(Qt.red)\nself.rubberband.setWidth(1)\nself.point = None\nself.points = []\n\ndefcanvasPressEvent(self, e):\nself.point = self.toMapCoordinates(e.pos())\nm = QgsVertexMarker(self.canvas)\nm.setCenter(self.point)\nm.setColor(QColor(0,255,0))\nm.setIconSize(5)\nm.setIconType(QgsVertexMarker.ICON_BOX)\nm.setPenWidth(3) \nself.points.append(self.point)\nself.isEmittingPoint = True\nself.showPoly()\n\ndefshowPoly(self):\nself.rubberband.reset(QGis.Polygon)\nfor point in self.points[:-1]:\nself.rubberband.addPoint(point, False)\nself.rubberband.addPoint(self.points[-1], True)\nself.rubberband.show()\n\n```", "```py\n    actionSelect = QAction(\"Select\", self)\n\n    ```", "```py\n    actionSelect.setCheckable(True)\n\n    ```", "```py\n    self.connect(actionSelect, SIGNAL(\"triggered()\"), self.select)\n\n    ```", "```py\n    self.toolbar.addAction(actionSelect)\n\n    ```", "```py\n    self.toolSelect = SelectMapTool(self.canvas, self.lyr)\n    self.toolSelect.setAction(actionSelect)\n\n    ```", "```py\n    self.select()\n\n    ```", "```py\n    def select(self):\n    self.canvas.setMapTool(self.toolSelect)\n\n    ```", "```py\n    classSelectMapTool(QgsMapToolEmitPoint):\n    def __init__(self, canvas, lyr):\n    self.canvas = canvas\n    self.lyr = lyr\n    QgsMapToolEmitPoint.__init__(self, self.canvas)\n    self.rubberband = QgsRubberBand(self.canvas, QGis.Polygon)\n    self.rubberband.setColor(QColor(255,255,0,50))\n    self.rubberband.setWidth(1)\n    self.point = None\n    self.points = []\n\n    defcanvasPressEvent(self, e):\n    self.point = self.toMapCoordinates(e.pos())\n    m = QgsVertexMarker(self.canvas)\n    m.setCenter(self.point)\n    m.setColor(QColor(0,255,0))\n    m.setIconSize(5)\n    m.setIconType(QgsVertexMarker.ICON_BOX)\n    m.setPenWidth(3) \n    self.points.append(self.point)\n    self.isEmittingPoint = True\n    self.selectPoly()\n\n    defselectPoly(self):\n    self.rubberband.reset(QGis.Polygon)\n    for point in self.points[:-1]:\n    self.rubberband.addPoint(point, False)\n    self.rubberband.addPoint(self.points[-1], True)\n    self.rubberband.show() \n    iflen(self.points) > 2:\n    g = self.rubberband.asGeometry()\n    featsPnt = self.lyr.getFeatures(QgsFeatureRequest().setFilterRect(g.boundingBox()))\n    forfeatPnt in featsPnt:\n    iffeatPnt.geometry().within(g):\n    self.lyr.select(featPnt.id()) \n\n    ```", "```py\n    self.statusBar().showMessage(u\"x: --, y: --\")\n\n    ```", "```py\n    defeventFilter(self, source, event):\n    ifevent.type() == QEvent.MouseMove:\n    ifevent.buttons() == Qt.NoButton:\n    pos = event.pos()\n    x = pos.x()\n    y = pos.y()\n    p = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)\n    self.statusBar().showMessage(u\"x: %s, y: %s\" % (p.x(), p.y()))\n    else:\n    pass\n    returnQMainWindow.eventFilter(self, source, event)\n\n    ```", "```py\n    self.installEventFilter(wdg)\n\n    ```"]