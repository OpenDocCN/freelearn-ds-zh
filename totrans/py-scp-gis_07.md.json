["```py\nimport psycopg2\nimport requests\nfrom shapely.geometry import Point,Polygon,MultiPolygon, mapping\nimport datetime\n```", "```py\nconnection = psycopg2.connect(database=\"pythonspatial\",user=\"postgres\", password=\"postgres\")\ncursor = connection.cursor()\n\ncursor.execute(\"CREATE TABLE areacommand (id SERIAL PRIMARY KEY, name VARCHAR(20), geom GEOMETRY)\")\n\ncursor.execute(\"CREATE TABLE beats (id SERIAL PRIMARY KEY, beat VARCHAR(6), agency VARCHAR(3), areacomm VARCHAR(15),geom GEOMETRY)\")\n\ncursor.execute(\"CREATE TABLE incidents (id SERIAL PRIMARY KEY, address VARCHAR(72), crimetype VARCHAR(255), date DATE,geom GEOMETRY)\")\n\nconnection.commit()\n```", "```py\nurl='http://coagisweb.cabq.gov/arcgis/rest/services/public/adminboundaries/MapServer/8/query'\nparams={\"where\":\"1=1\",\"outFields\":\"*\",\"outSR\":\"4326\",\"f\":\"json\"}\nr=requests.get(url,params=params)\ndata=r.json()\n\nfor acmd in data['features']:\n    polys=[]\n\n    for ring in acmd['geometry']['rings']:\n        polys.append(Polygon(ring))\n    p=MultiPolygon(polys)\n    name=acmd['attributes']['Area_Command']\n\n    cursor.execute(\"INSERT INTO areacommand (name, geom) VALUES ('{}',\n    ST_GeomFromText('{}'))\".format(name, p.wkt))\n\n connection.commit()\n```", "```py\nINSERT INTO table (field, field) VALUES (value,value)\n```", "```py\nurl='http://coagisweb.cabq.gov/arcgis/rest/services/public/adminboundaries/MapServer/9/query'\nparams={\"where\":\"1=1\",\"outFields\":\"*\",\"outSR\":\"4326\",\"f\":\"json\"}\nr=requests.get(url,params=params)\ndata=r.json()\n\nfor acmd in data['features']:\n    polys=[]\n    for ring in acmd['geometry']['rings']:\n        polys.append(Polygon(ring))\n    p=MultiPolygon(polys)\n\n    beat = acmd['attributes']['BEAT']\n    agency = acmd['attributes']['AGENCY']\n    areacomm = acmd['attributes']['AREA_COMMA']\n\n    cursor.execute(\"INSERT INTO beats (beat, agency,areacomm,geom) VALUES ('{}','{}','{}',\n    ST_GeomFromText('{}'))\".format(beat,agency,areacomm,p.wkt))\n\nconnection.commit()\n```", "```py\nurl='http://coagisweb.cabq.gov/arcgis/rest/services/public/APD_Incidents/MapServer/0/query'\nparams={\"where\":\"1=1\",\"outFields\":\"*\",\"outSR\":\"4326\",\"f\":\"json\"}\nr=requests.get(url,params=params)\ndata=r.json()\n\nfor a in data[\"features\"]:\n    address=a[\"attributes\"][\"CV_BLOCK_ADD\"]\n    crimetype=a[\"attributes\"][\"CVINC_TYPE\"]\n    if a['attributes']['date'] is None:\n        pass\n    else:\n        date = datetime.datetime.fromtimestamp(a['attributes']['date'] / 1e3).date()\n    try:\n        p=Point(float(a[\"geometry\"][\"x\"]),float(a[\"geometry\"][\"y\"]))\n        cursor.execute(\"INSERT INTO incidents (address,crimetype,date, geom) VALUES\n        ('{}','{}','{}', ST_GeomFromText('{}'))\".format(address,crimetype,str(date), p.wkt))\n\n   except KeyError:\n        pass\nconnection.commit()\n```", "```py\npip install ipyleaflet\n```", "```py\njupyter nbextension enable --py --sys-prefix ipyleaflet\n```", "```py\njupyter nbextension enable --py --sys-prefix widgetsnbextension\n```", "```py\nimport psycopg2\nfrom shapely.geometry import Point,Polygon,MultiPolygon\nfrom shapely.wkb import loads\nfrom shapely.wkt import dumps, loads\nimport datetime\nimport json\nfrom ipyleaflet import (\n    Map, Marker,\n    TileLayer, ImageOverlay,\n    Polyline, Polygon, Rectangle, Circle, CircleMarker,\n    GeoJSON\n)\n```", "```py\nconnection = psycopg2.connect(database=\"pythonspatial\",user=\"postgres\", password=\"postgres\")\ncursor = connection.cursor()\n```", "```py\ncursor.execute(\"SELECT name, ST_AsGeoJSON(geom) from areacommand\")\nc=cursor.fetchall()\nc[0]\n```", "```py\n('FOOTHILLS',\n '{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-106.519742762931,35.0505292241227],[-106.519741401085,35.0505292211811],[-106.51973952181,35.0505292175042],[-106.518248463965,35.0505262104449],[-106.518299012166,35.0517336649125],[-106.516932057477,35.0537380198153],....]]]}\n```", "```py\ncenter = [35.106196,-106.629515]\nzoom = 10\nmap = Map(center=center, zoom=zoom)\nmap\n```", "```py\nfor x in c:\n   layer=json.loads(x[1])\n   layergeojson=GeoJSON(data=layer)\n   map.add_layer(layergeojson)\n```", "```py\ncursor.execute(\"SELECT beat, ST_AsGeoJSON(geom) from beats\")\nc=cursor.fetchall()\nfor x in c:\n   layer=json.loads(x[1])\n   layergeojson=GeoJSON(data=layer)\n   map.add_layer(layergeojson)\n```", "```py\nd=datetime.datetime.strptime('201781','%Y%m%d').date() \ncursor.execute(\"SELECT address,crimetype,date,ST_AsGeoJSON(geom) from incidents where date =\n'{}' \".format(str(d)))\nincidents_date=cursor.fetchall()\nfor x in incidents_date:\n    layer=json.loads(x[3])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\nd=datetime.datetime.strptime('201781','%Y%m%d').date() \ncursor.execute(\"SELECT address,crimetype,date,ST_AsGeoJSON(geom) from incidents where date >\n'{}' \".format(str(d)))\n```", "```py\ncursor.execute(\"select * from incidents where date >= NOW() - interval '10 day'\")\n```", "```py\ncursor.execute(\"SELECT ST_AsGeoJSON(i.geom) FROM incidents i JOIN areacommand acmd ON ST_Intersects(acmd.geom, i.geom) WHERE acmd.name like'FOOTHILLS' and date >= NOW() - interval '10 day';\")\n\ncrime=cursor.fetchall()\nfor x in crime:\n    layer=json.loads(x[0])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\ncursor.execute(\"SELECT ST_AsGeoJSON(geom)from beats where beats.beat in ('336','523','117','226','638','636')\")\n\nc=cursor.fetchall()\nfor x in c:\n    layer=json.loads(x[0])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\ncursor.execute(\"SELECT ST_AsGeoJSON(i.geom) FROM incidents i JOIN beats b ON ST_Intersects(b.geom, i.geom) WHERE b.beat in ('336','523','117','226','638','636') and date >= NOW() - interval '10 day';\")\n\ncrime=cursor.fetchall()\nfor x in crime:\n    layer=json.loads(x[0])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\nfrom shapely.geometry import mapping\np = Point([-106.578677,35.062485])\npgeojson=mapping(p)\nplayer=GeoJSON(data=pgeojson)\nmap.add_layer(player)\n```", "```py\ncursor.execute(\"SELECT ST_AsGeoJSON(ST_Buffer(ST_GeomFromText('{}')::geography,1500));\".format(p.wkt))\nbuff=cursor.fetchall()\nbuffer=json.loads(buff[0][0])\nbufferlayer=GeoJSON(data=buffer)\nmap.add_layer(bufferlayer)\n```", "```py\ncursor.execute(\"SELECT ST_AsText(ST_Buffer(ST_GeomFromText('{}')::geography,1500));\".format(p.wkt))\nbufferwkt=cursor.fetchall()\nb=loads(bufferwkt[0][0])\n```", "```py\ncursor.execute(\"SELECT ST_AsGeoJSON(incidents.geom) FROM incidents where ST_Intersects(ST_GeomFromText('{}'), incidents.geom) and date >= NOW() - interval '10 day';\".format(b.wkt))\ncrime=cursor.fetchall()\nfor x in crime:\n    layer=json.loads(x[0])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\np = Point([-106.578677,35.062485])\ncursor.execute(\"SELECT ST_AsGeoJSON(incidents.geom), ST_Distance(incidents.geom::geography,ST_GeometryFromText('{}')::geography) from incidents ORDER BY incidents.geom<->ST_GeometryFromText('{}') LIMIT 15\".format(p.wkt,p.wkt))\nc=cursor.fetchall()\nfor x in c:\n    layer=json.loads(x[0])\n    layergeojson=GeoJSON(data=layer)\n    map.add_layer(layergeojson)\n```", "```py\nfrom ipywidgets import interact, interactive, fixed, interact_manual,DatePicker\nimport ipywidgets as widgets\n\n@widgets.interact(x=DatePicker())\ndef theDate(x):\n\n    if x:\n        for l in map.layers[1:]:\n        map.remove_layer(l)\n    nohyphen=str(x).replace(\"-\",\"\")\n    d=datetime.datetime.strptime(nohyphen,'%Y%m%d').date() \n    cursor.execute(\"SELECT ST_AsGeoJSON(geom) from incidents where date \n    = '{}' \".format(str(d))) \n    c=cursor.fetchall()\n\n    for x in c:\n        layer=json.loads(x[0])\n        layergeojson=GeoJSON(data=layer)\n        map.add_layer(layergeojson)\n    return len(c)\n\n    else:\n        pass\n```", "```py\n@widgets.interact(x=\"None\")\ndef areaCommand(x):\n    if x:\n        for l in map.layers[1:]:\n            map.remove_layer(l)\n        cursor.execute(\"SELECT ST_AsGeoJSON(i.geom) FROM incidents i \n        JOIN areacommand acmd ON   \n        ST_Intersects(acmd.geom, i.geom) WHERE acmd.name like'{}' and \n        date >= NOW() - interval '10 \n        day';\".format(x))\n        c=cursor.fetchall()\n\n        for x in c:\n            layer=json.loads(x[0])\n            layergeojson=GeoJSON(data=layer)\n            map.add_layer(layergeojson)\n        return c\n    else:\n        pass\n```", "```py\nimport pandas as pd\nd=datetime.datetime.strptime('2017101','%Y%m%d').date()\ncursor.execute(\"SELECT date, count(date) from incidents where date > '{}' group by date\".format(str(d)))\ndf=pd.DataFrame(cursor.fetchall(),columns=[\"date\",\"count\"])\ndf.head()\n```", "```py\ndf.sort_values(by='date').plot(x=\"date\",y=\"count\",kind='bar',figsize=(15,10))\n```", "```py\ncursor.execute(\"SELECT beats.beat, beats.agency, count(incidents.geom) as crimes from beats left join incidents on ST_Contains(beats.geom,incidents.geom) group by beats.beat, beats.agency\")\narea=pd.DataFrame(cursor.fetchall(),columns=[\"Area\",\"Agency\",\"Crimes\"])\narea.head()\n```", "```py\narea.plot(x=\"Area\",y=\"Crimes\",kind='bar',figsize=(25,10))\n```", "```py\narea[(area['Crimes']>800)].plot(x='Area',y='Crimes',kind='bar')\n```", "```py\nquery=('CREATE FUNCTION newcrime()'+'\\n'\n 'RETURNS trigger' +'\\n'\n 'AS $newcrime$' +'\\n'\n 'BEGIN' +'\\n'\n 'IF NEW.crimetype IS NULL THEN'+'\\n'\n 'RAISE EXCEPTION' +\" '% Must Include Crime Type', NEW.address;\"+'\\n'\n 'END IF;'+'\\n'\n 'RETURN NEW;'+'\\n'\n 'END;'+'\\n'\n '$newcrime$'+'\\n'\n 'LANGUAGE \\'plpgsql\\';'\n )\n cursor.execute(query)\n```", "```py\nquery=('CREATE TRIGGER newcrime BEFORE INSERT OR UPDATE ON incidents FOR EACH ROW EXECUTE PROCEDURE newcrime()')\ncursor.execute(query)\nconnection.commit()\n```", "```py\np=Point([-106,35])\naddress=\"123 Sesame St\"\ncursor.execute(\"INSERT INTO incidents (address, geom) VALUES ('{}', ST_GeomFromText('{}'))\".format(address, p.wkt))\n```"]