- en: Chapter 8. Building a Complete Mapping Application using Python and QGIS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will design and start building a complete turnkey mapping
    application. While our example application might seem somewhat specialized, the
    process of designing and implementing this application, and much of the code that
    we use, will apply to all sorts of mapping applications that you might like to
    write yourself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the complexity of the application we''re creating, we will split the
    implementation across two chapters. In this chapter, we will lay the groundwork
    for the mapping application by:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Designing the application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the high-resolution basemap on which our vector data will be displayed
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the overall structure of the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the application's user interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following chapter, we will implement the map tools that let the user
    enter and manipulate map data, edit attributes, and calculate the shortest path
    between two points.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ForestTrails
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine that you work for a company responsible for developing and maintaining
    a large recreational forest. People use the various access roads and purpose-built
    trails in the forest for walking, biking and horse riding. Your task is to write
    a computer program that lets the user create a database of access roads and trails
    to assist with the ongoing maintenance of the forest. For simplicity, we will
    use the term **track** to refer to either an access road or a trail. Each track
    will have the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Type**: Whether the track is a walking trail, a bike trail, a horse trail,
    or an access road'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Not all trails and access roads are named, though some are'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Direction**: Some trails and access roads are one-way, while others can be
    travelled in both directions'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: Whether the track is currently open or closed'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the recreational forest is continually being developed, new tracks are
    being regularly added, while existing tracks are sometimes modified or even removed
    if they are no longer needed. This means that you can't hardwire the set of tracks
    into your program; you will need to include a *track editing* mode so that the
    user can add, edit, and remove tracks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: A specific request you have been given is to produce a set of directions that
    the track maintenance team can follow in order to go from a given starting point
    to any place in the forest. To implement this, the program will have to let the
    user choose the starting and ending points, and calculate and display the **shortest
    available path** between those two points.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Designing the ForestTrails application
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on our set of requirements, it seems clear that tracks can be represented
    by LineString geometries. We will also need an appropriate basemap on which these
    geometries will be displayed. This means that our application will have at least
    the following two map layers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the ForestTrails application](img/00088.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Since we want the data to be persistent, we will use a SpatiaLite database to
    hold our track data, while the basemap is simply a GeoTIFF raster image that we
    load and display.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with these two main map layers, we will make use of memory-based layers
    to display the following temporary information on top of the map:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The currently selected starting point
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The currently selected ending point
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shortest available path between these two points
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To keep things easier, we''re going to display each of these in a separate
    map layer. This means that our application is going to have a total of five map
    layers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '`basemapLayer`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trackLayer`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startPointLayer`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endPointLayer`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shortestPathLayer`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Along with the map itself, our application will sport a toolbar and a menu
    bar, both of which let the user access the various features of the system. The
    following actions will be available in the toolbar and menu bar:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**Zoom in**: This will let the user zoom in on the map.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom out**: This lets the user zoom out.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pan**: This is the pan mode we implemented earlier, which allows the user
    to move around on the map.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit**: Clicking on this item will turn on the track editing mode. If we
    are already in the track editing mode, clicking on it again will prompt the user
    to save their changes before turning off the editing mode.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add track**: This lets the user add a new track. Note that this item is only
    available while in the track editing mode.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit track**: This lets the user edit an existing track. This is only enabled
    if the user is in the track editing mode.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete track**: This lets the user delete a track. This is only available
    in the track editing mode.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get info**: This enables the Get Info map tool. When the user clicks on a
    track, this tool will display the attributes for that track, and allow the user
    to make changes to those attributes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set start point**: This lets the user set the current starting point for
    the shortest path calculation.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set end point**: This item lets the user click on the map to set the ending
    point for the shortest path calculation.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find the shortest path**: This displays the shortest available path between
    the current starting and ending points. Clicking on this item again will hide
    the path.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This gives us a good idea of what our application should look like, and how
    it will work. Let's now start writing our ForestTrails program by implementing
    the basic logic for the application and its main window.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our application is going to be a standalone Python program built using PyQt
    and the PyQGIS library. Taking the Lex application we implemented in [Chapter
    5](part0033_split_000.html#page "Chapter 5. Using QGIS in an External Application"),
    *Using QGIS in an External Application*, as a starting point, let''s see how we
    can organize the source files for the ForestTrails system. We''ll start with the
    following basic structure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the application](img/00089.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'This is very similar to the structure we used for the Lex application, so most
    of this should be familiar to you. The main difference is that we''re using two
    subdirectories to hold additional files. Let''s take a look at what each of these
    files and directories will be used for:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '`constants.py`: This module will hold various constants used throughout the
    ForestTrails system.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: This is a directory that we will use to hold our raster basemap as
    well as the SpatiaLite database that holds our tracks.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forestTrails.py`: This is the main program for our application.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Makefile`: This file tells the make tool how to compile the `resources.qrc`
    file into a `resources.py` module that our application can use.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapTools.py`: This module implements our various map tools.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: This is a directory where we will place our various icons and
    other resources. Since we have so many icon files, it makes sense to put these
    into a subdirectory rather than cluttering up the main directory with all these
    files.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources.qrc`: This is the resource description file for our application.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_lin.sh`: This bash shell script is used to run our application on Linux
    systems.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_mac.sh`: This bash shell script is used to run our application on Mac
    OS X systems.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_win.bat`: This batch file is used to run our application on MS Windows
    machines.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui_mainWindow.py`: This Python module defines the user interface for our main
    window.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Laying out the application
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s implement the ForestTrails system one small step at a time. Create a
    directory to hold the source code for the ForestTrails system, and then create
    the `data` and `resources` subdirectories within it. As many of the files in the
    main directory are straightforward, let''s just go ahead and create the following
    files:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Makefile` should look like this:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if your `pyrcc4` command is in a nonstandard location, you might need
    to modify this file so that `make` can find it.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `resources.qrc` file as follows:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we've included various image files that will be used for our toolbar
    actions. All these files are in our `resources` subdirectory. We'll look at how
    to obtain these image files shortly.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `run-lin.sh` file should look like this:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Similarly, `run-mac.sh` should contain the following:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `run-win.bat` file should contain:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If your QGIS installation is in a nonstandard place, you might need to modify
    the appropriate script so that the required libraries can be found.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the `resources.qrc` file imports our various toolbar icons and makes them
    available to the application, we'll want to set up those icon files. Let's do
    that now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Defining the toolbar icons
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a total of 11 toolbar actions that we will want to display icons
    for:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the toolbar icons](img/00090.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: Feel free to create or download your own icons for these toolbar actions, or
    you can use the icon files included in the source code provided with this chapter.
    The file format isn't important, just as long as you include the right suffix
    in the `resoures.qrc` file, and in `ui_mainWindow.py` when the toolbar action
    is initialized.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you place these files into the `resources` subdirectory, and run `make`
    to build the `resources.py` module so that these icons are available for your
    application to use.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: With this groundwork done, we're ready to start defining the application code
    itself. Let's start with the `constants.py` module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: The constants.py module
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This module will hold various constants that we use to represent the track
    attribute values; by defining them in one place, we make sure that the attribute
    values are used consistently, and we don''t have to remember exactly what the
    values are. For example, the `type` attribute for the tracks layer can have the
    following values:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`ROAD`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WALKING`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BIKE`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HORSE`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rather than hardwiring these values every time we need them, we''re going to
    define these values in the `constants.py` module. Create this module and enter
    the following code into it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We'll be adding a few more constants as we go along, but this is enough to get
    us started.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The forestTrails.py module
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This module defines the main program for the ForestTrails application. It looks
    very similar to the `lex.py` module we defined in [Chapter 5](part0033_split_000.html#page
    "Chapter 5. Using QGIS in an External Application"), *Using QGIS in an External
    Application*. Create your `forestTrails.py` file, and enter the following `import`
    statements into it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we want to define the main window for our application in a class, which
    we will call `ForestTrailsWindow`. This is where the bulk of the application code
    will be implemented; this class will get quite complicated, but we're going to
    start easy and just define the window itself, and have empty placeholder methods
    for all the toolbar actions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the class itself and the `__init__()` method to initialize a
    new window:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is very similar to the `__init__()` method for the Lex application; we'll
    define the `Ui_MainWindow` class in the `ui_mainWindow.py` module to set up the
    application's user interface. This is where all those `actionXXX` instance variables
    will be defined. In our `__init__()` method, we're connecting these actions to
    various methods, which will respond when the user selects the action from the
    toolbar or menu bar.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the `__init__()` method simply sets up a map canvas and lays it
    out within the window. With this method behind us, we can now define all those
    action-handling methods. We can borrow two of these directly from `lex.py`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For the rest, we''ll hold off on implementing them until the application is
    a bit more complete. To allow our program to run, we''ll set up empty placeholder
    methods for the remaining action handlers:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The last part of the `forestTrails.py` module is the `main()` function, which
    is called when the program is run:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once again, this is almost identical to the code we saw earlier in the Lex application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: This completes our initial implementation of the `forestTrails.py` module. Our
    next step is to create the module that will hold all our map tools.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The mapTools.py module
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used `mapTools.py` in the Lex application to define our various map tools
    separately from the main program. We''re going to do the same here. For now, though,
    our `mapTools.py` module is almost empty:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Obviously, we'll be adding to this as we start to implement our various map
    tools, but for now, this is enough.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The ui_mainWindow.py module
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the last module we need to define for our initial implementation of
    the ForestTrails system. As in the Lex application, this module defines a `Ui_MainWindow`
    class, which implements the application''s user interface, and defines `QAction`
    objects for the various menu and toolbar items. We''ll start by importing the
    modules that our class will need:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we''ll define the `Ui_MainWindow` class and the `setupUi()` method that
    will do all the work:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first part of the `setupUi()` method sets the title for the window, creates
    a `centralWidget` instance variable to hold the map view, and initializes the
    application''s menus and toolbar:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we want to define all the `QAction` objects for the various toolbar and
    menu items. For each action, we''ll define the action''s icon and keyboard shortcut,
    and check whether or not the action is **checkable** (that is, stays on when the
    user clicks on it):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then add the various actions to our application''s menus:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we''ll add the actions to our toolbar and tell the window to resize
    itself to fit its contents:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This completes our implementation of the `ui_mainWindow.py` module. We now have
    a complete mini application that should be able to run. Let's try it out.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you've entered all this code, it's time to check whether it works.
    Let's try to run the application using the appropriate startup script. Open a
    terminal or command-line window, navigate into the `forestTrails` directory, and
    run the appropriate startup script.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, you should see the application''s main window along with
    the toolbar and menu items:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/00091.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Of course, the main window's map view is empty, and none of the toolbar or menu
    items do anything yet, but at least we have a working framework for our application.
    Our next steps are to obtain the basemap for our application, set up our map layers,
    and then start implementing the various toolbar and menu bar items.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the basemap
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow through this section of the chapter, you are going to need access
    to the GDAL command-line tools. GDAL is probably already installed on your computer,
    as QGIS makes use of it. If you don't already have GDAL installed, go to [www.gdal.org](http://www.gdal.org)
    and click on the **Downloads** link to download and install a copy onto your machine.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: One of the challenges of writing a mapping application is to obtain a high-quality
    basemap on top of which your geospatial data will be displayed. In our case, we
    want our basemap to show an aerial photograph of the forest. We're going to use
    the Whakarewarewa Forest in Rotorua, New Zealand, for our ForestTrails application.
    Fortunately, suitable aerial photographs are available from the *Land Information
    New Zealand* website.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the following web page, which provides high-resolution aerial photos
    for the Bay of Plenty, New Zealand:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[https://data.linz.govt.nz/layer/1760-bay-of-plenty-025m-rural-aerial-photos-2011-2012/](https://data.linz.govt.nz/layer/1760-bay-of-plenty-025m-rural-aerial-photos-2011-2012/)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to download a basemap that covers the Whakarewarewa forest, which is
    just south of the city of Rotorua. In the map on the right-hand side of the page,
    pan and zoom until the following area of the map is visible:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the basemap](img/00092.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'The dark circular area in the center of the map is Lake Rotorua. Zoom in further
    and pan down to the area just south of Rotorua:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the basemap](img/00093.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'This map shows the Whakarewarewa forest image we want to download. Next, click
    on the **crop** tool (![Obtaining the basemap](img/00094.jpeg)) in the upper right-hand
    corner and select the following area of the map:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the basemap](img/00095.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'With the appropriate area of the map selected, click on the **"Download or
    Order"** link in the upper right-hand corner. The window that appears gives you
    the option to download the basemap. Make sure you select the following options:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Map Projection will be NZGD2000
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image format will be TIFF in the original resolution
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to register to download the file, but the registration process
    only takes a few seconds, and it doesn't cost anything.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The resulting download should be about 2.8 GB, just under the 3 GB limit for
    file downloads from this site. If it's too big, you'll have to select a smaller
    area to download.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve downloaded the file, you will end up with a ZIP archive that contains
    a number of TIFF format raster image files. Next, we need to combine these images
    into a single `.tif` file for our basemap. To do this, we''ll use the `gdal_merge.py`
    command that comes with GDAL:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Choose an appropriate destination for the `basemap.tif` file (by replacing `/dst/path`
    with a sensible location, for example, the path to your desktop). If the current
    directory is not set to the folder that contains the downloaded `.tif` files,
    you'll need to also specify the source path in the command.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: It will take a while for this command to stitch together the various images,
    but the result should be a single large file named `basemap.tif`. This is a TIFF-format
    raster image that contains the aerial photograph you selected, geo referenced
    to the appropriate portion of the Earth's surface.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, we can''t use this file directly. To see why, run the `gdalinfo`
    command on the downloaded file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Among other things, this tells us which coordinate reference system the file
    is using:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, the downloaded basemap uses the **New Zealand Transverse Mercator
    2000** coordinate system. We need to translate this into the WGS84 (geographic
    latitude/longitude coordinate) coordinate system so that we can use it in the
    ForestTrails program. To do this, we''ll use the `gdalwarp` command, like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you look at the resulting image using `gdalinfo`, you''ll see that it has
    been converted into the lat/long coordinate system:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might wonder why we didn't download the file directly in the WGS84 coordinate
    system. We downloaded the file in its original CRS because this gives us more
    control over the final image. Reprojecting the image ourselves also makes it easier
    to see how the image was changed when it was reprojected.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, so good. However, if we look at the resulting image, we''ll see another
    problem:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the basemap](img/00096.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'The translation from NZGD2000 into WGS84 rotated the basemap slightly, so the
    borders of the map don''t look good. Now, we need to trim the map to get rid of
    the unwanted borders. To do this, we''ll use the `gdal_warp` command again, this
    time with a target extent:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might need to adjust the lat/long values if you have selected slightly different
    bounds when downloading the basemap. The corner coordinate values displayed by
    `gdalinfo` will give you a clue as to what values have to be used.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting file is a good raster basemap for us to use for our ForestTrails
    program:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the basemap](img/00097.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: Copy the final image into your `forestTrails/data` directory and rename it back
    to `basemap.tif`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Defining the map layers
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that we want to have a total of five map layers in our application.
    The basemap layer will display the `basemap.tif` file we just downloaded, while
    the track layer will use a SpatiaLite database to store and display the track
    data entered by the user. The remaining map layers will display temporary features
    held in memory.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by defining a new method in our `forestTrails.py` module to initialize
    the SpatiaLite database we will use for the track layer:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, we check to see whether the SpatiaLite database file exists
    in our `data` subdirectory, and create a new database if necessary. We define
    the various fields that will hold the various track attributes, and use a `QgsVectorFileWriter`
    object to create the database.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to modify the `main()` function to call the `setupDatabase()`
    method. Add the following line to this function after the call to `window.raise_()`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that we''ve set up our database for the track layer, we can define our
    various map layers. We''ll create a new method called `setupMapLayers()` to do
    this. Let''s start by defining a `layers` variable to hold the various map layers,
    and initialize our base map layer:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we want to set up our **tracks** layer. Since this is stored in a SpatiaLite
    database, we have to use a `QgsDataSourceURI` object to connect the database to
    the map layer. The following code shows how this is done:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can now set up a memory-based map layer to display the shortest path:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We saw how to create memory-based map layers in [Chapter 6](part0047_split_000.html#page
    "Chapter 6. Mastering the QGIS Python API"), *Mastering the QGIS Python API*,
    so there shouldn't be any surprises here; we're simply defining the shortest path
    layer to hold a LineString geometry.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to set up another memory-based map layer to show the user''s
    selected starting point:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, we want to set another map layer for the ending point:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This completes all five of our map layers. The final part of the `setupMapLayers()`
    method adds these various layers to the map canvas. Note that because we defined
    the map layers in back-to-front order (in other words, the first entry in `layers`
    is the basemap, which should appear at the back), we have to reverse the layers
    before we add them to the map canvas. Here is the relevant code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The last thing we have to do is add a call to `setupMapLayers()` from within
    our `main()` function. Add the following immediately after the `window.setupDatabase()`
    line:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now that our map layers are set up, we can run our program again. There''s
    no vector data yet, but the basemap should be visible, and we can zoom in and
    out using the toolbar icons:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the map layers](img/00098.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: Defining the map renderers
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the map layers, we''ll want to set up appropriate symbols
    and renderers to draw the vector data onto the map. Let''s start by defining a
    method called `setupRenderers()`, which creates the renderers for our various
    map layers. Our first renderer will display the track layer, where we use a `QgsRuleBasedRendererV2`
    object to display the tracks in different ways depending on the type of track,
    whether or not the track is open, and whether it is bidirectional or can only
    be used in one direction. Here is the relevant code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, we iterate over all the possible track types. Based on the track
    type, we choose a suitable line width. We also choose a color to use for the line
    and the arrowheads—for now, we're simply using the same color for every type of
    track. We then iterate over all the possible status and direction values, and
    call a helper method named `createTrackSymbol()` to create a suitable symbol for
    this track type, status, and direction. We then create a `QgsRuleBasedRendererV2.Rule`
    object that uses that symbol for those tracks with the given type, status, and
    direction. Finally, we define an "else" rule for the renderer, displaying the
    track as a simple black line if the track doesn't have any of the expected attribute
    values.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Our remaining map layers will use straightforward line or marker symbols to
    display the shortest path, and the starting and ending points. Here''s the remainder
    of the `setupRenderers()` method, which defines these map renderers:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now that we''ve defined the `setupRenderers()` method itself, let''s modify
    our `main()` function to call it. Add the following line immediately after the
    call to `setupMapLayers()`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'There are a few more things we need to do to finish implementing our map renderers.
    Firstly, we need to define the `createTrackSymbol()` helper method that we used
    to set up the track renderer. Add the following to your `ForestTrailsWindow` class:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The complex part of this method is the code to draw an arrowhead onto the track
    to indicate the track's direction. Apart from this, we simply draw a line to represent
    the track using the specified color and width, and if the track is closed, we
    draw the track as a dotted line.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final task here is to add some more entries to our `constants.py` module
    to represent the various sizes and line widths used by our renderers. Add the
    following to the end of this module:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: All of these values are in map units.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, we can't see these renderers being used yet, as we don't have
    any vector features to display, but we need to implement them now so that our
    code will work when the time comes. We won't see these renderers in action until
    the next chapter, when the user starts adding tracks and selecting start/end points
    on the map.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: The Pan Tool
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To let the user move around the map, we''ll make use of the `PanTool` class
    we implemented in an earlier chapter. Add the following class definition to the
    `mapTools.py` module:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Back in our `forestTrails.py` module, add the following new method:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This method will initialize the various map tools that our application will
    use; we''ll add to this method as we go along. For now, add the following to your
    `main()` function, after the call to `window.setupRenderers()`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can now replace our dummy implementation of `setPanMode()` with the real
    thing:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If you run your program now, you'll see that the user can now zoom in and out
    and use the pan tool to move around the basemap.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the track editing mode
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our final task for this chapter is to implement the track editing mode. We learned
    in the previous chapter how we can turn on the editing mode for a map layer and
    then use various map tools to let the user add, edit, and delete features. We'll
    start to implement the actual map tools in [Chapter 9](part0072_split_000.html#page
    "Chapter 9. Completing the ForestTrails Application"), *Completing the ForestTrails
    Application*, but for now, let's define our track editing mode itself.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setEditMode()` method is used to enter and leave the track editing mode.
    Replace the placeholder method you defined earlier with this new implementation:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If the user is currently editing the tracks and has made some changes, we ask
    the user whether they want to save their changes, and either commit the changes
    or roll them back. If no changes have been made, we roll back (to turn off the
    vector layer's editing mode) and switch back to the panning mode.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of instance variables that we use here to monitor the state
    of our track editing: `self.editing` will be set to `True` if we''re currently
    editing the tracks, and `self.modified` is set to `True` if the user has changed
    anything in the track layer. We''ll have to add the following to our `ForestTrailsWindow.__init__()`
    method to initialize these two instance variables:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'There''s another method that we haven''t seen before: `adjustActions()`. This
    method will enable/disable and check/uncheck the various actions: depending on
    the application''s current state. For example, when we enter the track editing
    mode, our `adjustActions()` method will enable the add, edit, and delete tools,
    and these tools will be disabled again when the user leaves the track-editing
    mode.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'We can''t implement all of `adjustActions()`at the moment because we haven''t
    yet defined the various map tools that our application will use. For now, we''ll
    write the first half of this method:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We''ll also need to add a call to `adjustActions()` in our `main()` function
    after the call to `setPanMode()`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: With the track editing mode implemented, the user can click on the **Edit**
    toolbar icon to enter the track editing mode, and click on it again to leave that
    mode. Of course, we can't make any changes yet, but the code itself is in place.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s one more feature we''d like to add to our application; if the user
    makes some changes to the track layer and then tries to quit the application,
    we''d like to give the user the chance to save their changes. To do this, we''ll
    implement the `quit()` method, which we linked to the `actionQuit` action:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This is very similar to the part of the `setEditMode()` method that lets the
    user leave the track editing mode, except that we call `qApp.quit()` to quit the
    application at the end. We have one more method to define, which intercepts an
    attempt to close the window and calls `self.quit()`. This prompts the user to
    save their changes if they close the window while editing. Here is the definition
    for this method:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed and started to implement a complete mapping application
    for maintaining a map of tracks and roads within a recreational forest. We implemented
    the application itself, defined our map layers, obtained a high-resolution basemap
    for our application, and implemented zooming, panning, and the code necessary
    for editing the track layer.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设计和开始实施了一个完整的映射应用程序，用于维护休闲森林内轨迹和道路的地图。我们实现了应用程序本身，定义了我们的地图层，为我们的应用程序获取了高分辨率的基础地图，并实现了缩放、平移以及编辑轨迹层所需的代码。
- en: In the next chapter, we will round out the implementation of our ForestTrails
    system by implementing the map tools to let the user add, edit, and delete tracks.
    We will also implement the code for editing track attributes and finding the shortest
    available path between two points.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过实现地图工具来完善我们的ForestTrails系统的实施，使用户能够添加、编辑和删除轨迹。我们还将实现编辑轨迹属性和查找两点之间最短可用路径的代码。
