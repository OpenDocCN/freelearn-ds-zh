["```py\nfrom pygeodesy import formy as frm\nfrom pygeodesy.ellipsoidalKarney import LatLon as kLatLon\n```", "```py\ndef karney(lat1, lng1, lat2, lng2):\nreturn kLatLon(lat1, lng1).distanceTo(kLatLon(lat2, lng2))\n```", "```py\ndef geodistance(lat1, lng1, lat2, lng2, func):\nreturn func(lat1, lng1, lat2, lng2)\n```", "```py\nairports_df = pd.concat([\nairports_df.drop([’coordinates’], axis=1),\nairports_df[’coordinates’].str.split(‘, ‘, expand=True).rename(columns={0:’longitude’, 1:’latitude’}).astype(float)], axis=1)\n```", "```py\njfk_lat, jfk_long  = airportLatLongList(airports_df, ‘JFK’)\nlga_lat, lga_long = airportLatLongList(airports_df, ‘LGA’)\n```", "```py\ngeodistance(lat1, lng1, lat2, lng2, func=frm.harvesine)\n```", "```py\ngeodistance(lat1, lng1, lat2, lng2, func=karney)\n```", "```py\nhotels_df[’haversineDistanceFromJFK’] = np.vectorize(geodistance)(\nhotels_df[’latitude’],\nhotels_df[’longitude’],\njfk_lat,\njfk_long,\nfunc=frm.haversine)\n```", "```py\nairports_tbl <- airports_tbl %>% \ntidyr::separate(\ncol = coordinates,\ninto = c(‘longitude’, ‘latitude’),\nsep = ‘, ‘,\nremove = TRUE,\nconvert = TRUE )\n```", "```py\nairportLongLatVec <- function(df, iata) {\nret_vec <- df %>% \nfilter( iata_code == iata ) %>% \nselect( longitude, latitude ) %>% \nunlist()\nreturn(ret_vec)\n}\n```", "```py\njfk_coordinates <- airportLongLatVec(airports_tbl, ‘JFK’)\nlga_coordinates <- airportLongLatVec(airports_tbl, ‘LGA’)\n```", "```py\nhotels_tbl <- hotels_tbl %>% \nmutate(\np1 = map2(longitude, latitude, ~ c(.x, .y))\n    ) %>% \nmutate(\nhaversineDistanceFromJFK = map_dbl(p1, ~ distHaversine(p1 = .x, p2 = jfk_coordinates, r = 6371008.771415)),\nkarneyDistanceFromJFK = map_dbl(p1, ~ distGeo(p1 = .x, p2 = jfk_coordinates)),\nhaversineDistanceFromLGA = map_dbl(p1, ~ distHaversine(p1 = .x, p2 = lga_coordinates, r = 6371008.771415)),\nkarneyDistanceFromLGA = map_dbl(p1, ~ distGeo(p1 = .x, p2 = lga_coordinates))\n    ) %>%\nselect( -p1 )\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport pulp as plp\nwarehouse_supply_df = pd.read_excel(r’D:\\<your-path>\\Chapter10\\RetailData.xlsx’, sheet_name=’Warehouse Supply’, engine=’openpyxl’)\nwarehouse_supply = warehouse_supply_df[’product_qty’].to_numpy()\ncountry_demands_df = pd.read_excel(r’D:\\<your-path>\\Chapter10\\RetailData.xlsx’, sheet_name=’Country Demand’, engine=’openpyxl’)\ncountry_demands = country_demands_df[’product_qty’].to_numpy()\ncost_matrix_df = pd.read_excel(r’D:\\<your-path>\\Chapter10\\RetailData.xlsx’, sheet_name=’Shipping Cost’, engine=’openpyxl’)\nn_warehouses = cost_matrix_df.nunique()[’warehouse_name’]\nn_countries = cost_matrix_df.nunique()[’country_name’]\ncost_matrix = cost_matrix_df[’shipping_cost’].to_numpy().reshape(n_warehouses,n_countries)\n```", "```py\nmodel = plp.LpProblem(“supply-demand-minimize-costs-problem”, plp.LpMinimize)\n```", "```py\nvar_indexes = [str(i)+str(j) for i in range(1, n_warehouses+1) for j in range(1, n_countries+1)]\nprint(“Variable indexes:”, var_indexes)\n```", "```py\nVariable Indices: [’11’, ‘12’, ‘13’, ‘14’, ‘15’, ‘16’, ‘21’, ‘22’, ‘23’, ‘24’, ‘25’, ‘26’, ‘31’, ‘32’, ‘33’, ‘34’, ‘35’, ‘36’, ‘41’, ‘42’, ‘43’, ‘44’, ‘45’, ‘46’]\n```", "```py\ndecision_vars = plp.LpVariable.matrix(\nname=”x”,\nindexs=var_indexes,\ncat=”Integer”,\nlowBound=0 )\n```", "```py\nshipping_mtx = np.array(decision_vars).reshape(n_warehouses,n_countries)\nprint(“Shipping quantities matrix:”)\nprint(shipping_mtx)\n```", "```py\nShipping quantities matrix:\n[[x_11 x_12 x_13 x_14 x_15 x_16]\n[x_21 x_22 x_23 x_24 x_25 x_26]\n[x_31 x_32 x_33 x_34 x_35 x_36]\n[x_41 x_42 x_43 x_44 x_45 x_46]]\n```", "```py\nobjective_func = plp.lpSum(cost_matrix * shipping_mtx)\nprint(objective_func)\n```", "```py\n8*x_11 + 18*x_12 + 14*x_13 + 40*x_14 + 40*x_15 + 25*x_16 + 12*x_21 + 10*x_22 + 8*x_23 + 18*x_24 + 40*x_25 + 18*x_26 + 34*x_31 + 32*x_32 + 30*x_33 + 10*x_34 + 33*x_35 + 35*x_36 + 25*x_41 + 20*x_42 + 18*x_43 + 35*x_44 + 30*x_45 + 10*x_46\n```", "```py\nmodel += objective_func\n```", "```py\nfor i in range(n_warehouses):\nmodel += plp.lpSum(shipping_mtx[i][j] for j in range(n_countries)) <= warehouse_supply[i], “Warehouse supply constraints “ + str(i)\nfor j in range(n_countries):\nmodel += plp.lpSum(shipping_mtx[i][j] for i in range(n_warehouses)) >= country_demands[j] , “Country demand constraints “ + str(j)\n```", "```py\nmodel.solve()\n```", "```py\nstatus = plp.LpStatus[model.status]\nprint(status)\n```", "```py\nprint(“Total Cost:”, model.objective.value())\n```", "```py\ndecision_var_results = np.empty(shape=(n_warehouses * n_countries))\nz = 0\nfor v in model.variables():\ntry:\ndecision_var_results[z] = v.value()\nz += 1\nexcept:\nprint(“error couldn’t find value”)\ndecision_var_results = decision_var_results.reshape(n_warehouses,n_countries)\ncol_idxs = [’Italy’,’France’,’Germany’,’Japan’,’China’,’USA’]\nrow_idxs = [’Warehouse ITA’,’Warehouse DEU’,’Warehouse JPN’,’Warehouse USA’]\ndv_res_df = pd.DataFrame(decision_var_results, columns=col_idxs, index=row_idxs)\ndv_res_df\n```", "```py\nwarehouse_shipped_qty = np.zeros(shape=(n_warehouses))\nz = 0\nfor i in range(n_warehouses):\nwarehouse_shipped_qty[z] = plp.lpSum(shipping_mtx[i][j].value() for j in range(n_countries)).value()\nz += 1\nw_shipped_df = pd.DataFrame(warehouse_shipped_qty, columns=[’qty’], index=row_idxs)\nw_shipped_df\n```", "```py\n    import pickle\n    country_demands = dataset[’product_qty’].to_numpy()\n    pickle.dump( country_demands, open(r”D:\\<your-path>\\Chapter10\\Python\\country_demands.pkl”, “wb”) )\n    ```", "```py\n    import pickle\n    n_warehouses = dataset.nunique()[’warehouse_name’]\n    n_countries = dataset.nunique()[’country_name’]\n    cost_matrix = dataset[’shipping_cost’].to_numpy().reshape(n_warehouses, n_countries)\n    pickle.dump( cost_matrix, open(r”D:\\<your-path>\\Chapter10\\Python\\cost_matrix.pkl”, “wb”) )\n    ```", "```py\n    import pickle\n    warehouse_supply = dataset[’product_qty’].to_numpy()\n    pickle.dump( warehouse_supply, open(r”D:\\<your-path>\\Chapter10\\Python\\warehouse_supply.pkl”, “wb”) )\n    ```", "```py\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\nwarehouse_supply_tbl = read_xlsx(r’{D:\\<your-path>\\Chapter10\\RetailData.xlsx}’, sheet = ‘Warehouse Supply’)\ncountry_demands_tbl = read_xlsx(r’{D:\\<your-path>\\Chapter10\\RetailData.xlsx}’, sheet = ‘Country Demand’)\ncost_matrix_tbl = read_xlsx(r’{D:\\<your-path>\\Chapter10\\RetailData.xlsx}’, sheet = ‘Shipping Cost’)\n```", "```py\nn_warehouses <- cost_matrix_tbl %>% \ndistinct(warehouse_name) %>% \ncount() %>% \npull(n)\nn_countries <- cost_matrix_tbl %>% \ndistinct(country_name) %>% \ncount() %>% \npull(n)\nwarehouse_supply <- warehouse_supply_tbl %>% \npull(product_qty)\ncountry_demands <- country_demands_tbl %>% \npull(product_qty)\ncost_matrix <- data.matrix(\ncost_matrix_tbl %>% \npivot_wider( names_from = country_name, values_from = shipping_cost ) %>% \nselect( -warehouse_name )\n)\nrownames(cost_matrix) <- warehouse_supply_tbl %>% pull(warehouse_name)\n```", "```py\nmodel <- MIPModel() %>% \n# define the x integer variables, paying attention to define also the lower bound of 0\nadd_variable( x[i, j], i = 1:n_warehouses, j = 1:n_countries, type = “integer”, lb = 0 ) %>% \n# define the objective function, declaring also the “sense” that is the type of problem (minimize)\nset_objective( sum_expr(cost_matrix[i, j] * x[i, j], i = 1:n_warehouses, j = 1:n_countries), sense = ‘min’ ) %>% \n# add warehouse supply constraints\nadd_constraint( sum_expr(x[i, j], j = 1:n_countries) <= warehouse_supply[i], i = 1:n_warehouses ) %>% \n# add customer demand constraints\nadd_constraint( sum_expr(x[i, j], i = 1:n_warehouses) >= country_demands[j], j = 1:n_countries )\n```", "```py\nsum_expr(x[i, j], j = 1:n_countries)\n```", "```py\nx[i,1] + x[i,2] + x[i,3] + x[i,4] + x[i,5] + x[i,6]\n```", "```py\nresult <- model %>% \nsolve_model(with_ROI(solver = ‘glpk’))\n```", "```py\ndecision_var_results <- matrix(result$solution, nrow = n_warehouses, ncol = n_countries, )\nrownames(decision_var_results) <- warehouse_supply_tbl %>% pull(warehouse_name)\ncolnames(decision_var_results) <- country_demands_tbl %>% pull(country_name)\ndecision_var_results\n```", "```py\n              Italy France Germany Japan China   USA\nWarehouse ITA 40000      0   10000     0     0     0\nWarehouse DEU     0  10000   15000  5000     0     0\nWarehouse JPN     0      0       0 40000     0     0\nWarehouse USA     0   5000       0     0 25000 25000\n```", "```py\n    library(dplyr)\n    country_demands <- dataset %>% \n    pull(product_qty)\n    saveRDS(country_demands, r’{D:\\<your-path>\\Chapter10\\R\\country_demands.rds}’)\n    country_demand_df <- dataset\n    ```", "```py\n    library(dplyr)\n    library(tidyr)\n    n_warehouses <- dataset %>% \n    distinct(warehouse_name) %>% \n    count() %>% \n    pull(n)\n    n_countries <- dataset %>% \n    distinct(country_name) %>% \n    count() %>% \n    pull(n)\n    cost_matrix <- data.matrix(\n    dataset %>% \n    pivot_wider( names_from = country_name, values_from = shipping_cost ) %>% \n    select( -warehouse_name )\n    )\n    rownames(cost_matrix) <- dataset %>% \n    distinct(warehouse_name) %>% \n    pull(warehouse_name)\n    saveRDS(cost_matrix, r’{D:\\<your-path>\\Chapter10\\R\\cost_matrix.rds}’)\n    cost_matrix <- dataset\n    ```", "```py\n    library(dplyr)\n    warehouse_supply <- dataset %>% \n    pull(product_qty)\n    saveRDS(warehouse_supply, r’{D:\\<your-path>\\Chapter10\\R\\warehouse_supply.rds}’)\n    warehouse_supply_df <- dataset\n    ```"]