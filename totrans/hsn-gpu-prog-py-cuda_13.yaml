- en: Assessment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, Why GPU Programming?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first two `for` loops iterate over every pixel, whose outputs are invariant
    to each other; we can thus parallelize over these two `for` loops. The third `for`
    loop calculates the final value of a particular pixel, which is intrinsically
    recursive.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amdahl's Law doesn't account for the time it takes to transfer memory between
    the GPU and the host.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 512 x 512 amounts to 262,144 pixels. This means that the first GPU can only
    calculate the outputs of half of the pixels at once, while the second GPU can
    calculate all of the pixels at once; this means the second GPU will be about twice
    as fast as the first here. The third GPU has more than sufficient cores to calculate
    all pixels at once, but as we saw in problem 1, the extra cores will be of no
    use to us here. So the second and third GPUs will be equally fast for this problem.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One issue with generically designating a certain segment of code as parallelizable
    with regards to Amdahl's Law is that this makes the assumption that the computation
    time for this piece of code will be close to 0 if the number of processors, *N*,
    is very large. As we can see from the last problem, this is not the case.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, using *time* consistently can be cumbersome, and it might not zero in
    on the bottlenecks of your program. Second, a profiler can tell you the exact
    computation time of all of your code from the perspective of Python, so you can
    tell whether some library function or background activity of your operating system
    is at fault rather than your code.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2, Setting Up Your GPU Programming Environment
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, CUDA only supports Nvidia GPUs, not Intel HD or AMD Radeon
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This book only uses Python 2.7 examples
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Device Manager
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lspci`'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`free`'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.run`'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3, Getting Started with PyCUDA
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory transfers between host/device, and compilation time.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can, but this will vary depending on your GPU and CPU setup.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do this using the C `?` operator for both the point-wise and reduce operations.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a `gpuarray` object goes out of scope its destructor is called, which will
    deallocate (free) the memory it represents on the GPU automatically.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReductionKernel` may perform superfluous operations, which may be necessary
    depending on how the underlying GPU code is structured. A *neutral element* will
    ensure that no values are altered as a result of these superfluous operations.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should set `neutral` to the smallest possible value of a signed 32-bit integer.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4, Kernels, Threads, Blocks, and Grids
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Try it.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the threads don't operate on the GPU simultaneously. Much like a CPU
    switching between tasks in an OS, the individual cores of the GPU switch between
    the different threads for a kernel.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: O( n/640 log n), that is, O(n log n).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try it.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is actually no internal grid-level synchronization in CUDA—only block-level
    (with `__syncthreads).` We have to synchronize anything above a single block with
    the host.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Naive: 129 addition operations. Work-efficient: 62 addition operations.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, we can't use `__syncthreads` if we need to synchronize over a large grid
    of blocks. We can also launch over fewer threads on each iteration if we synchronize
    on the host, freeing up more resources for other operations.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the case of a naive parallel sum, we will likely be working with only a small
    number of data points that should be equal to or less than the total number of
    GPU cores, which can likely fit in the maximum size of a block (1032); since a
    single block can be synchronized internally, we should do so. We should use the
    work-efficient algorithm only if the number of data points are far greater than
    the number of available cores on the GPU.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5, Streams, Events, Contexts, and Concurrency
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The performance improves for both; as we increase the number of threads, the
    GPU reaches peak utilization in both cases, reducing the gains made through using
    streams.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you can launch an arbitrary number of kernels asynchronously and synchronize
    them to with `cudaDeviceSynchronize`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up your text editor and try it!
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: High standard deviation would mean that the GPU is being used unevenly, overwhelming
    the GPU at some points and under-utilizing it at others. A low standard deviation
    would mean that all launched operations are running generally smoothly.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: i. The host can generally handle far fewer concurrent threads than a GPU. ii.
    Each thread requires its own CUDA context. The GPU can become overwhelmed with
    excessive contexts, since each has its own memory space and has to handle its
    own loaded executable code.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6, Debugging and Profiling Your CUDA Code
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memory allocations are automatically synchronized in CUDA.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `lockstep` property only holds in single blocks of size 32 or less. Here,
    the two blocks would properly diverge without any `lockstep`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same thing would happen here. This 64-thread block would actually be split
    into two 32-thread warps.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nvprof can time individual kernel launches, GPU utilization, and stream usage;
    any host-side profiler would only see CUDA host functions being launched.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Printf is generally easier to use for small-scale projects with relatively short,
    inline kernels. If you write a very involved CUDA kernel with thousands of lines,
    then probably you would want to use the IDE to step through and debug your kernel
    line by line.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tells CUDA which GPU we want to use.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cudaDeviceSynchronize` will ensure that interdependent kernel launches and
    mem copies are indeed synchronized, and that they won''t launch before all necessary
    operations have finished.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7, Using the CUDA Libraries with Scikit-CUDA
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SBLAH starts with an S, so this function uses 32-bit real floats. ZBLEH starts
    with a Z, which means it works with 128-bit complex floats.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hint: set `trans = cublas._CUBLAS_OP[''T'']`'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hint: use the Scikit-CUDA wrapper to the dot product, `skcuda.cublas.cublasSdot`'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hint: build upon the answer to the last problem.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can put the cuBLAS operations in a CUDA stream and use event objects with
    this stream to precisely measure the computation times on the GPU.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the input appears as being complex to cuFFT, it will calculate all of
    the values as NumPy.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dark edge is due to the zero-buffering around the image. This can be mitigated
    by *mirroring* the image on its edges rather than by using a zero-buffer.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8, The CUDA Device Function Libraries and Thrust
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Try it. (It's actually more accurate than you'd think.)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One application: a Gaussian distribution can be used to add `white noise` to
    samples to augment a dataset in machine learning.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, since they are from different seeds, these lists may have a strong correlation
    if we concatenate them together. We should use subsequences of the same seed if
    we plan to concatenate them together.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try it.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hint: remember that matrix multiplication can be thought of as a series of
    matrix-vector multiplications, while matrix-vector multiplication can be thought
    of as a series of dot products.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Operator()` is used to define the actual function.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9, Implementation of a Deep Neural Network
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One problem could be that we haven't normalized our training inputs. Another
    could be that the training rate was too large.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a small training rate a set of weights might converge very slowly, or not
    at all.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A large training rate can lead to a set of weights being over-fit to particular
    batch values or this training set. Also, it can lead to numerical overflows/underflows
    as in the first problem.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sigmoid.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Softmax.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More updates.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10, Working with Compiled GPU Code
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Only the EXE file will have the host functions, but both the PTX and EXE will
    contain the GPU code.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cuCtxDestory`.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`printf` with arbitrary input parameters. (Try looking up the `printf` prototype.)'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a Ctypes `c_void_p` object.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will allow us to link to the function with its original name from Ctypes.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Device memory allocations and memcopies between device/host are automatically
    synchronized by CUDA.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11, Performance Optimization in CUDA
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fact that `atomicExch` is thread-safe doesn't guarantee that all threads
    will execute this function at the same time (which is not the case since different
    blocks in a grid can be executed at different times).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A block of size 100 will be executed over multiple warps, which will not be
    synchronized within the block unless we use `__syncthreads`. Thus, `atomicExch`
    may be called at multiple times.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since a warp executes in lockstep by default, and blocks of size 32 or less
    are executed with a single warp, `__syncthreads` would be unnecessary.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use a naïve parallel sum within the warp, but otherwise, we are doing as
    many sums with`atomicAdd` as we would do with a serial sum. While CUDA automatically
    parallelizes many of these `atomicAdd` invocations, we could reduce the total
    number of required `atomicAdd` invocations by implementing a work-efficient parallel
    sum.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Definitely `sum_ker`. It's clear that PyCUDA's sum doesn't use the same hardware
    tricks as we do since ours performs better on smaller arrays, but by scaling the
    size to be much larger, the only explanation as to why PyCUDA's version is better
    is that it performs fewer addition operations.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 肯定是 `sum_ker`。很明显，PyCUDA 的求和操作并没有使用我们使用的相同硬件技巧，因为我们的在较小的数组上表现更好，但通过将规模扩大得多，PyCUDA
    版本更好的唯一解释是它执行了更少的多项式运算。
- en: Chapter 12, Where to Go from Here
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章，下一步该去哪里
- en: 'Two examples: DNA analysis and physics simulations.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个例子：DNA分析以及物理模拟。
- en: 'Two examples: OpenACC, Numba.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个例子：OpenACC，Numba。
- en: TPUs are only used for machine learning operations and lack the components required
    to render graphics.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TPU 仅用于机器学习操作，缺乏渲染图形所需的组件。
- en: Ethernet.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以太网。
