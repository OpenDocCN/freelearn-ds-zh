- en: Chapter 4. Example Topology – Twitter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。示例拓扑 – Twitter
- en: 'This chapter builds on the material from [Chapter 3](ch03.html "Chapter 3. Introducing
    Petrel"), *Introducing Petrel*. In this chapter, we''ll build a topology that
    demonstrates a number of new features and techniques. In particular, we''ll see
    how to:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于第3章（*Introducing Petrel*）的内容。在本章中，我们将构建一个拓扑，演示许多新功能和技巧。特别是，我们将看到如何：
- en: Implement a spout that reads from Twitter
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现从Twitter读取的spout
- en: Build topology components based on third-party Python libraries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于第三方Python库构建拓扑组件
- en: Compute statistics and rankings over rolling time periods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在滚动时间段内计算统计数据和排名
- en: Read custom configuration settings from `topology.yaml`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`topology.yaml`读取自定义配置设置
- en: Use "tick tuples" to execute logic on a schedule
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“tick tuples”按计划执行逻辑
- en: Twitter analysis
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter分析
- en: 'Most of you have heard of Twitter, but if you have not, check out how Wikipedia
    describes Twitter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人都听说过Twitter，但如果您还没有，可以查看维基百科是如何描述Twitter的：
- en: '*"an online social networking service that enables users to send and read short
    140-character messages called "tweets"."*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"一个在线社交网络服务，允许用户发送和阅读称为“推文”的140个字符的短消息。"*'
- en: In 2013, users posted 400 million messages per day on Twitter. Twitter offers
    an API that gives developers real-time access to streams of tweets. On it, messages
    are public by default. The volume of messages, the availability of an API, and
    the public nature of tweets combine to make Twitter a valuable source of insights
    on current events, topics of interest, public sentiment, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，Twitter上的用户每天发布4亿条消息。Twitter提供了一个API，允许开发者实时访问推文流。在这些推文中，消息默认是公开的。消息量、API的可用性和推文的公开性使得Twitter成为了解当前事件、感兴趣的话题、公众情绪等的有价值的信息来源。
- en: Storm was originally developed at BackType to process tweets, and Twitter analysis
    is still a popular use case of Storm. You can see several examples on the Storm
    website at [https://storm.apache.org/documentation/Powered-By.html](https://storm.apache.org/documentation/Powered-By.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Storm最初是在BackType开发的，用于处理推文，Twitter分析仍然是Storm的一个流行用例。您可以在Storm网站上看到几个示例，网址为[https://storm.apache.org/documentation/Powered-By.html](https://storm.apache.org/documentation/Powered-By.html)。
- en: 'The topology in this chapter demonstrates how to read from Twitter''s real-time
    streaming API, computing a ranking of the most popular words. It''s a Python version
    of the "rolling top words" sample on the Storm website ([https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/RollingTopWords.java](https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/RollingTopWords.java)),
    and consists of the following components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的拓扑演示了如何从Twitter的实时流API中读取，计算最流行单词的排名。这是Storm网站上“滚动最热单词”示例的Python版本（[https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/RollingTopWords.java](https://github.com/apache/storm/blob/master/examples/storm-starter/src/jvm/storm/starter/RollingTopWords.java)），并包括以下组件：
- en: 'Twitter stream spout (`twitterstream.py`): This reads tweets from the Twitter
    sample stream.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter流输出组件（`twitterstream.py`）：此组件从Twitter样本流中读取推文。
- en: 'Splitter bolt (`splitsentence.py`): This receives tweets and splits them into
    words. It is an improved version of the splitter bolt from [Chapter 3](ch03.html
    "Chapter 3. Introducing Petrel"), *Introducing Petrel*.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分词bolt（`splitsentence.py`）：此组件接收推文并将它们拆分为单词。这是第3章中介绍的Petrel的分词bolt的改进版本。
- en: 'Rolling word count bolt (`rollingcount.py`): This receives words and counts
    the occurrences. It is similar to the word count bolt from [Chapter 3](ch03.html
    "Chapter 3. Introducing Petrel"), *Introducing Petrel*, but implements a rolling
    count (this means that the bolt periodically discards old data, so the word counts
    only consider recent messages).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动词计数bolt（`rollingcount.py`）：此组件接收单词并计算其出现次数。它与第3章中介绍的Petrel的词计数bolt类似，但实现了滚动计数（这意味着bolt会定期丢弃旧数据，因此词计数只考虑最近的消息）。
- en: 'Intermediate rankings bolt (`intermediaterankings.py`): This consumes word
    counts and periodically emits the *n* most frequently seen words.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间排名bolt（`intermediaterankings.py`）：此组件消费词计数，并定期输出出现频率最高的*n*个单词。
- en: 'Total rankings bolt (`totalrankings.py`): This is similar to the intermediate
    rankings bolt. It combines the intermediate rankings to produce an overall set
    of rankings.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总排名bolt（`totalrankings.py`）：此组件与中间排名bolt类似。它将中间排名合并，生成一组总体排名。
- en: Twitter's Streaming API
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter的流式API
- en: Twitter's public API is both powerful and flexible. It has many features for
    both posting and consuming tweets. Our application needs to receive and process
    tweets in real time. Twitter's streaming API was designed to solve this problem.
    In computer science, a *stream* is a sequence of data elements (in this case,
    tweets) made available over time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter的公共API功能强大且灵活。它具有许多用于发布和消费推文的功能。我们的应用程序需要实时接收和处理推文。Twitter的流式API旨在解决这个问题。在计算机科学中，*流*是一系列随时间提供的数据元素（在这种情况下，推文）的序列。
- en: The streaming API is explained in detail at [https://dev.twitter.com/streaming/overview](https://dev.twitter.com/streaming/overview).
    To use it, an application first creates a connection to Twitter. The connection
    remains open indefinitely to receive tweets.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 流式API的详细解释可以在[https://dev.twitter.com/streaming/overview](https://dev.twitter.com/streaming/overview)找到。要使用它，应用程序首先需要与Twitter建立一个连接。该连接将无限期保持开启状态以接收推文。
- en: The Streaming API offers several ways to choose which tweets your application
    receives. Our topology uses the so-called sample stream, which provides a small
    subset of all tweets arbitrarily chosen by Twitter. The sample stream is intended
    for demos and testing. Production applications generally use one of the other
    stream types. For more information about the available streams, refer to [https://dev.twitter.com/streaming/public](https://dev.twitter.com/streaming/public).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 流式API提供了几种方式来选择你的应用程序接收哪些推文。我们的拓扑使用所谓的样本流，它由Twitter任意选择的一小部分所有推文组成。样本流旨在用于演示和测试。生产应用程序通常使用其他流类型之一。有关可用流的更多信息，请参阅[https://dev.twitter.com/streaming/public](https://dev.twitter.com/streaming/public)。
- en: Creating a Twitter app to use the Streaming API
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Twitter应用程序以使用流式API
- en: 'Before we can use Twitter''s Streaming API, Twitter requires us to create an
    app. This sounds complicated, but it''s quite easy to set up; basically, we just
    fill in a form on the website:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用Twitter的流式API之前，Twitter要求我们创建一个应用。这听起来很复杂，但实际上设置起来非常简单；基本上，我们只需在网站上填写一个表格：
- en: If you don't have a Twitter account, create one at [https://twitter.com/](https://twitter.com/).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有Twitter账户，请在[https://twitter.com/](https://twitter.com/)创建一个。
- en: Once you have an account, log in and go to [https://apps.twitter.com/](https://apps.twitter.com/).
    Click on **Create New App**. Fill in the form for creating an application. Leave
    the **Callback URL** field blank. The default access level is read-only, which
    means that this application can only read tweets; it can't post or make other
    changes. Read-only access is fine for this example. Finally, click on **Create
    your Twitter application**. You will be redirected to your app's page.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你有了账户，登录并前往[https://apps.twitter.com/](https://apps.twitter.com/)。点击**创建新应用**。填写创建应用程序的表格。将**回调URL**字段留空。默认访问级别为只读，这意味着此应用程序只能读取推文；它不能发布或进行其他更改。对于这个例子，只读访问是合适的。最后，点击**创建你的Twitter应用程序**。你将被重定向到你的应用页面。
- en: 'Click on the **Keys and Access Tokens** tab, then click on **Create my access
    token**. Twitter will generate an access token consisting of two parts: **Access
    Token** and **Access Token Secret**. While connecting to Twitter, your application
    will use this token along with **Consumer Key** and **Consumer Secret**.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**密钥和访问令牌**选项卡，然后点击**创建我的访问令牌**。Twitter将生成一个由两部分组成的访问令牌：**访问令牌**和**访问令牌密钥**。在连接到Twitter时，你的应用程序将使用此令牌以及**消费者密钥**和**消费者密钥密钥**。
- en: 'The following screenshot shows the **Keys and Access Tokens** tab after generating
    the access token:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了生成访问令牌后的**密钥和访问令牌**选项卡：
- en: '![Creating a Twitter app to use the Streaming API](img/B03471_04_01.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建Twitter应用程序以使用流式API](img/B03471_04_01.jpg)'
- en: The topology configuration file
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拓扑配置文件
- en: 'Now that we''ve set up a Twitter account with API access, we''re ready to create
    the topology. First, create `topology.yaml`. We first saw a basic `topology.yaml`
    file in [Chapter 3](ch03.html "Chapter 3. Introducing Petrel"), *Introducing Petrel*.
    Here, `topology.yaml` will also hold the connection parameters for Twitter. Enter
    the following text, replacing the four `oauth` values with your own Twitter credentials
    from [https://apps.twitter.com/](https://apps.twitter.com/):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了一个具有API访问权限的Twitter账户，我们准备创建拓扑。首先，创建`topology.yaml`。我们在[第3章](ch03.html
    "第3章。介绍Petrel")中首次看到了基本的`topology.yaml`文件，*介绍Petrel*。在这里，`topology.yaml`也将包含Twitter的连接参数。输入以下文本，用你在[https://apps.twitter.com/](https://apps.twitter.com/)获取的四个`oauth`值替换：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Twitter stream spout
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Twitter流源
- en: 'Now, let''s look at the Twitter spout. Enter this code in `twitterstream.py`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Twitter喷嘴。在`twitterstream.py`中输入以下代码：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'How does the spout communicate with Twitter? The Twitter API imposes a number
    of requirements on API clients:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 喷嘴是如何与Twitter通信的？Twitter API对API客户端提出了一系列要求：
- en: Connections must be encrypted using the Secure Sockets Layer (SSL)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接必须使用安全套接字层（SSL）进行加密
- en: API clients must be authenticated using OAuth, a popular authentication protocol
    used to interact with secure web services
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API客户端必须使用OAuth进行身份验证，OAuth是一种流行的身份验证协议，用于与安全的Web服务交互
- en: Because it involves a long-lived connection, the streaming API involves more
    than a simple HTTP request
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于它涉及长期连接，流式API涉及的内容不仅仅是简单的HTTP请求
- en: Fortunately, there is a library called **Tweepy** ([http://www.tweepy.org/](http://www.tweepy.org/))
    that implements these requirements in a simple and easy-to-use Python API. Tweepy
    provides a `Stream` class to connect to the Streaming API. It is used in `_get_tweets()`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个名为**Tweepy**的库（[http://www.tweepy.org/](http://www.tweepy.org/））实现了这些要求，并提供了一个简单易用的Python
    API。Tweepy提供了一个`Stream`类来连接到流式API。它在`_get_tweets()`中使用。
- en: Creating a Tweepy stream requires the four Twitter connection parameters listed
    earlier. We could hardcode these directly in our spout, but then we'd have to
    change the code if the connection parameters change. Instead, we put this information
    in the `topology.yaml` configuration file. Our spout reads these settings in the
    `initialize()` function. Storm calls this function when a task for this component
    starts up, passing it information about the environment and configuration. Here,
    the `initialize()` function captures the topology configuration in `self.conf`.
    This dictionary includes the `oauth` values.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Tweepy流需要之前列出的四个Twitter连接参数。我们可以在我们的喷嘴中直接将这些参数硬编码，但这样如果连接参数发生变化，我们就必须更改代码。相反，我们将这些信息放在`topology.yaml`配置文件中。我们的喷嘴在`initialize()`函数中读取这些设置。Storm在启动此组件的任务时调用此函数，并传递有关环境和配置的信息。在这里，`initialize()`函数捕获`self.conf`中的拓扑配置。这个字典包括`oauth`值。
- en: The following sequence diagram shows how the spout communicates with Twitter,
    receives tweets, and emits them. You may have noticed that the spout creates a
    background thread. This thread receives the tweets from Tweepy and passes them
    to the main spout thread using a Python queue.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列图显示了喷嘴如何与Twitter通信，接收推文并将它们发出。你可能已经注意到喷嘴创建了一个后台线程。这个线程从Tweepy接收推文，并通过Python队列将它们传递给主喷嘴线程。
- en: '![The Twitter stream spout](img/B03471_04_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Twitter流喷嘴](img/B03471_04_02.jpg)'
- en: Why does the spout use a thread? Often, threads are used to support concurrent
    processing. That's not the case here. Rather, there is simply a mismatch between
    the behavior of Tweepy and the Petrel spout API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么喷嘴使用线程？通常，线程用于支持并发处理。这里并非如此。相反，Tweepy的行为与Petrel喷嘴API之间存在不匹配。
- en: When reading from a Twitter stream, Tweepy blocks execution, calling an application-supplied
    event handler function for each tweet received.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当从Twitter流中读取时，Tweepy会阻塞执行，为收到的每条推文调用应用程序提供的处理函数
- en: In Petrel, the `nextTuple()` function on a spout must return from the function
    after each tuple.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Petrel中，喷嘴上的`nextTuple()`函数必须在每次返回元组后从函数中返回。
- en: Running Tweepy in a background thread that writes to a queue provides a simple
    and elegant solution to these conflicting requirements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台线程中运行Tweepy并将其写入队列，为这些冲突的要求提供了一个简单而优雅的解决方案。
- en: Splitter bolt
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割器bolt
- en: The splitter bolt here is similar in structure to the one in [Chapter 3](ch03.html
    "Chapter 3. Introducing Petrel"), *Introducing Petrel*. This version has two improvements
    that make it more useful and realistic.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的分割器bolt的结构与[第3章](ch03.html "第3章。介绍Petrel")中的类似，*介绍Petrel*。这个版本有两个改进，使其更有用和更真实。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Ignore words that are so common that they are not interesting or useful in a
    "top words" list. This includes English words such as "the," as well as word-like
    terms that appear frequently in Tweets, such as "http," "https," and "rt."
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略那些在“常用词”列表中过于常见，在“常用词”列表中不有趣或无用的单词。这包括像“the”这样的英语单词，以及像“http”、“https”和“rt”这样的在推文中频繁出现的类似词。
- en: Omit punctuation when splitting a Tweet into words.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在分割推文为单词时，省略标点符号。
- en: A Python library called **Natural Language Toolkit** (**NLTK**) makes it easy
    to implement both. NLTK has many other fascinating, powerful language processing
    features, but those are beyond the scope of this book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 **Natural Language Toolkit**（**NLTK**）的Python库使得实现这两者变得容易。NLTK有许多其他令人着迷、强大的语言处理功能，但这些超出了本书的范围。
- en: 'Enter this code in `splitsentence.py`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `splitsentence.py` 中输入以下代码：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Rolling word count bolt
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动词频bolt
- en: The rolling word count bolt is similar to the word count bolt in [Chapter 3](ch03.html
    "Chapter 3. Introducing Petrel"), *Introducing Petrel*. The bolt in the earlier
    chapter simply accumulated the word counts indefinitely. This is not good for
    analyzing top words on Twitter, where popular topics can change from one moment
    to the next. Rather, we want counts that reflect the latest information. To do
    this, the rolling word count bolt stores data in time-based buckets. Then, it
    periodically discards buckets that exceed 5 minutes in age. Thus, the word counts
    from this bolt only consider the last 5 minutes of data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动词频bolt与第3章中介绍的Petrel的词频bolt类似，*介绍Petrel*。早期章节中的bolt简单地无限期地累积词频。这不利于分析Twitter上的热门话题，因为热门话题可能在一瞬间发生变化。相反，我们希望计数反映最新的信息。为此，滚动词频bolt将数据存储在基于时间的桶中。然后，它定期丢弃超过5分钟年龄的桶。因此，此bolt的词频只考虑最后5分钟的数据。
- en: 'Enter the following code in `rollingcount.py`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `rollingcount.py` 中输入以下代码：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `SlotBasedCounter` stores a list of `numSlots` (five) count values for each
    word. Each slot stores `emitFrequencyInSeconds` (60) seconds of data. Count values
    more than 5 minutes old are discarded.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`SlotBasedCounter` 存储每个单词的 `numSlots`（五个）计数值。每个槽存储 `emitFrequencyInSeconds`（60）秒的数据。超过5分钟的计数值将被丢弃。'
- en: 'How does the bolt know when 60 seconds have elapsed? Storm makes this easy
    by providing a feature called **tick tuples**. This feature is useful when you
    need to execute some logic within your bolts as per a schedule. To use this feature,
    perform the following steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: bolt如何知道60秒已经过去？Storm通过提供一个名为 **tick tuples** 的功能来简化这一点。当您需要根据计划在bolt中执行某些逻辑时，此功能非常有用。要使用此功能，请执行以下步骤：
- en: In `getComponentConfiguration()`, return a dictionary containing a `topology.tick.tuple.freq.secs`
    key. The value is the desired number of seconds between ticks.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `getComponentConfiguration()` 中，返回一个包含 `topology.tick.tuple.freq.secs` 键的字典。该值是期望的tick之间的秒数。
- en: In `process()`, check whether the tuple is a normal tuple or a tick tuple. When
    a tick tuple is received, the bolt should run its scheduled processing.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `process()` 中，检查元组是否为普通元组或tick元组。当接收到tick元组时，bolt应该运行其计划中的处理。
- en: The intermediate rankings bolt
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间排名bolt
- en: The intermediate rankings bolt maintains a dictionary of the top `maxSize` (10)
    items ranked by occurrence count, and emits those items every `emitFrequencyInSeconds`
    (15) seconds. In production, the topology will run many instances of this bolt,
    with each of them maintaining the top words for a *subset* of the overall words
    seen. Having many instances of the same component allows the topology to process
    large numbers of tweets and easily keep all the counts in the memory, even if
    the number of distinct words is quite large.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 中间排名bolt维护一个按出现次数排序的 `maxSize`（10）项的字典，并且每 `emitFrequencyInSeconds`（15）秒发出这些项。在生产中，拓扑将运行许多此bolt的实例，每个实例维护整体单词集合的
    *子集* 中的顶级单词。拥有许多相同组件的实例允许拓扑处理大量推文，并且即使不同单词的数量相当大，也能轻松地保持所有计数在内存中。
- en: 'Enter this code in `intermediaterankings.py`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `intermediaterankings.py` 中输入以下代码：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The total rankings bolt
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总排名bolt
- en: The total rankings bolt is very similar to the intermediate rankings bolt. There
    is only one instance of this bolt in the topology. It receives the top words from
    each instance of that bolt, choosing the top `maxSize` (10) items overall.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总排名bolt与中间排名bolt非常相似。拓扑中只有一个此bolt的实例。它接收来自该bolt每个实例的顶级单词，选择整体上的 `maxSize`（10）项。
- en: 'Enter the following code in `totalrankings.py`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `totalrankings.py` 中输入以下代码：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Defining the topology
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义拓扑
- en: 'Here is the `create.py` script that defines the structure of the topology:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是定义拓扑结构的 `create.py` 脚本：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The structure of this topology is similar to the word count topology from [Chapter
    3](ch03.html "Chapter 3. Introducing Petrel"), *Introducing Petrel*. `TotalRankingsBolt`
    has a new wrinkle. As described earlier, there is just one instance of this bolt,
    and it uses `globalGrouping()`, so all tuples from `IntermediateRankingsBolt`
    are sent to it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个拓扑的结构与第3章中“介绍Petrel”的单词计数拓扑相似。[第3章](ch03.html "第3章。介绍Petrel")。`TotalRankingsBolt`有一个新的细节。如前所述，这个螺栓只有一个实例，它使用`globalGrouping()`，因此所有来自`IntermediateRankingsBolt`的元组都发送给它。
- en: You may be wondering why the topology needs both an intermediate ranking and
    a total ranking bolt. In order for us to know the top words overall, there needs
    to be a single bolt instance (total rankings) that sees across the entire tweet
    stream. But at high data rates, a single bolt can't possibly keep up with the
    traffic. The intermediate rankings bolt instances "shield" the total rankings
    bolt from this traffic, computing the top words for their slice of the tweet stream.
    This allows the final rankings bolt to compute the most common words overall,
    while consuming only a handful of the overall word counts. Elegant!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么拓扑需要中间排名和总排名螺栓。为了让我们知道整体上的顶级单词，需要有一个单一的螺栓实例（总排名）能够看到整个推文流。但在高数据速率下，单个螺栓不可能跟上流量。中间排名的螺栓实例“屏蔽”了总排名螺栓的流量，计算其推文流切片中的顶级单词。这允许最终的排名螺栓计算整体中最常见的单词，同时只消耗整体单词计数的一小部分。优雅！
- en: Running the topology
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行拓扑
- en: 'We have a few more small items to address before we run the topology:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行拓扑之前，还有一些小问题需要解决：
- en: Copy the `logconfig.ini` file from the second example in [Chapter 3](ch03.html
    "Chapter 3. Introducing Petrel"), *Introducing Petrel*, to this topology's directory.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将[第3章](ch03.html "第3章。介绍Petrel")中的第二个示例中的`logconfig.ini`文件复制到这个拓扑的目录中。
- en: 'Create a file called `setup.sh`. Petrel will package this script with the topology
    and run it at startup. This script installs the third-party Python libraries used
    by the topology. The file looks like this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setup.sh`的文件。Petrel将在启动时将此脚本与拓扑打包并运行。此脚本安装拓扑使用的第三方Python库。文件看起来像这样：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file called `manifest.txt` with these two lines:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`manifest.txt`的文件，包含以下两行：
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before running the topology, let''s review the list of files that we''ve created.
    Make sure you have created these files correctly:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行拓扑之前，让我们回顾一下我们创建的文件列表。确保你已经正确创建了这些文件：
- en: '`topology.yaml`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topology.yaml`'
- en: '`twitterstream.py`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twitterstream.py`'
- en: '`splitsentence.py`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitsentence.py`'
- en: '`rollingcount.py`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollingcount.py`'
- en: '`intermediaterankings.py`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediaterankings.py`'
- en: '`totalrankings.py`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`totalrankings.py`'
- en: '`manifest.txt`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest.txt`'
- en: '`setup.sh`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup.sh`'
- en: 'Run the topology with this command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行拓扑：
- en: '[PRE9]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the topology starts running, open another terminal in the `topology` directory.
    Enter the following command to see the `log` file for the total rankings bolt,
    sorted from oldest to newest:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦拓扑开始运行，在`topology`目录中打开另一个终端。输入以下命令以查看总排名螺栓的`log`文件，按时间顺序从旧到新排序：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If this is the first time you''ve run the topology, there will be only one
    log file listed. A new file is created for each run. If there are several files
    listed, choose the most recent one. Enter this command to monitor the contents
    of the log file (the exact filename will be different on your system):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次运行拓扑，将只列出一个日志文件。每次运行都会创建一个新的文件。如果有多个文件列出，请选择最新的一个。输入以下命令以监控日志文件的内容（在您的系统上，确切的文件名可能不同）：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'About every 15 seconds, you will see log messages with the top 10 words in
    descending order of popularity, like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 大约每15秒，你会看到按流行度降序排列的前10个单词的日志消息，如下所示：
- en: '![Running the topology](img/B03471_04_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![运行拓扑](img/B03471_04_03.jpg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we developed a complex topology using a number of new techniques
    and libraries. After reading this example, you should be ready to begin applying
    Petrel and Storm to solve real problems.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用多种新技术和库开发了一个复杂的拓扑。阅读这个示例后，你应该准备好开始将Petrel和Storm应用于解决实际问题。
- en: In the upcoming chapter, we'll take a closer look at some of Storm's built-in
    features that are useful while operating a cluster, such as logging and monitoring.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地研究一些在操作集群时非常有用的Storm内置功能，例如日志记录和监控。
