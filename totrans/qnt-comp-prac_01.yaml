- en: '*Chapter 1*: Preparing Your Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can start working on your quantum programs, you must have a Python
    environment to execute your code. The examples in this book can be run both on
    your local machine by using the Qiskit® developer environment provided by IBM
    Quantum® and in an online environment on IBM Quantum Experience®.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at both environments, get you a login account
    on IBM Quantum Experience®, and install a local version of **Qiskit®**. We will
    also discuss the fast-moving environment that is open source Qiskit®, and how
    to keep your local environment up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your IBM Quantum Experience® account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Qiskit®
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the code samples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing your API key and accessing your provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping your Qiskit® environment up to date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started. This chapter, and its contents, is pretty important as
    it provides you with the foundation on which you can start building your Qiskit®
    future. Do spend a moment or two setting this up, and then get going with the
    recipes in this book to get started with quantum programming on Qiskit®. To get
    you started quickly, you can also grab and run the sample recipe code that is
    provided with this book.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes that we will discuss in this chapter can be found here: [https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience/tree/master/Chapter01](https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience/tree/master/Chapter01).'
  prefs: []
  type: TYPE_NORMAL
- en: You can run the recipes in this book in your local Qiskit® environment that
    you set up as a part of this chapter. You can also run most of them in the `c1_r1_version.py`
    recipe in this chapter, which lists the installed version of Qiskit® in the environment
    in which you run the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: For information about how to download the recipes, see *Downloading the code
    samples*.
  prefs: []
  type: TYPE_NORMAL
- en: The local environment in which you choose to install Qiskit® must have **Python
    3.5 or higher** installed (as of this book's writing). For detailed information
    about the most current requirements for Qiskit® installation, see the Qiskit®
    requirements page at [https://qiskit.org/documentation/install.html](https://qiskit.org/documentation/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: IBM Quantum® recommends using the Anaconda distribution of Python ([https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/)),
    and to use virtual environments to keep your Qiskit® installation isolated from
    your usual Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: New to virtual environments?
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments provide isolated Python environments that you can modify
    separately from each other. For example, you can create an isolated environment
    for your Qiskit® installation. You will then install Qiskit® only in that environment,
    and not touch the Python framework in the base environment which will then contain
    an untarnished version of Python.
  prefs: []
  type: TYPE_NORMAL
- en: As Qiskit® releases new versions of their packages, there is technically nothing
    stopping you from creating a new isolated environment for each updated version
    of Qiskit® to retain your old and stable version for your Qiskit® quantum programming,
    and a new environment where you can test updated versions of Qiskit®. You will
    find more on this in the *Keeping your Qiskit® environment up to date* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your IBM Quantum Experience® account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your key to exploring quantum computer programming with IBM is your *IBM Quantum
    Experience® account*. This free account gives you access to the online IBM Quantum
    Experience® interface, and the programming tools that are available there. An
    IBM Quantum Experience® account is not technically required to test out IBM Quantum
    Experience® or to install Qiskit® but is required to run your programs on the
    freely available IBM quantum computers, which are, after all, probably why you
    are reading this book in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up your IBM Quantum Experience® account, you can log in with an IBMid,
    or with one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Google account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A LinkedIn account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Twitter account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your browser (Google Chrome seems to work best), go to this link: [https://quantum-computing.ibm.com/login](https://quantum-computing.ibm.com/login).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your IBMid credentials or select another login method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also skip the sign-in, which will give you access to IBM Quantum Experience®
    but with a limit of 3 qubits for your quantum circuits, and with simulator backends
    only.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have logged in, you now have an activated IBM Quantum Experience® account,
    and will find yourself at the main dashboard:![Figure 1.1 – The IBM Quantum Experience®
    home page](img/Figure_1.1_B14436.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 1.1 – The IBM Quantum Experience® home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'From here, you have a couple of paths:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to a composer to start building your quantum programs in a graphical user
    interface. Click the **Circuit composer** left-menu icon (![](img/Figure_1.5_B14436.png))
    and then go to [*Chapter 3*](B14436_03_Final_PG_ePub.xhtml#_idTextAnchor063),
    *IBM Quantum Experience® – Quantum Drag and Drop*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to start writing your quantum programs in Python without first installing
    a local Qiskit® instance, you can go to the Qiskit® notebooks to start working
    on your quantum programs in a Jupyter Notebook Python environment. Click on the
    **Quantum Lab** left-menu icon (![A picture containing drawing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Description automatically generated](img/Figure_1.4_B14436.png)), click **New
    Notebook**, and then go to [*Chapter 4*](B14436_04_Final_PG_ePub.xhtml#_idTextAnchor081),
    *Starting at the Ground Level with Terra*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to continue down the Qiskit® path for which this book was written,
    you can now log out of IBM Quantum Experience®, and continue with installing Qiskit®
    on your local machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*IBM Quantum* *Experience is quantum on the cloud*: [https://www.ibm.com/quantum-computing/technology/experience/](https://www.ibm.com/quantum-computing/technology/experience/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quantum* *computing: It''s time to build a quantum community*: [https://www.ibm.com/blogs/research/2016/05/quantum-computing-time-build-quantum-community/](https://www.ibm.com/blogs/research/2016/05/quantum-computing-time-build-quantum-community/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Qiskit®
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With your Python environment prepared and ready to go, and your IBM Quantum
    Experience® account set up, you can now use `pip` to install the Qiskit® Python
    extension. The process should take about 10 minutes or so, after which you can
    use your Python command line, or your favorite Anaconda Python interpreter to
    start writing your quantum programs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides information about the generic way to install Qiskit® and
    does not go into any detail regarding operating system differences or general
    installation troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: For detailed information about the most current requirements for Qiskit® installation,
    see the Qiskit® requirements page at [https://qiskit.org/documentation/install.html](https://qiskit.org/documentation/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create your Anaconda virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install a set of environment-specific packages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activate your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that you are in your virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Command Prompt should now include the name of your environment; I used
    something like this for my own environment with the name `packt_qiskit`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If needed, do a `pip` update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install Qiskit®, you must use `pip` as Qiskit® is not distributed as `conda`
    packages. The latest Qiskit® requires pip 19 or newer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you have an older version of `pip`, you must upgrade using the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Qiskit®.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, with everything set up and prepared, we can now get on to the main course,
    installing the Qiskit® code in your environment. Here we go!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Failed wheel build
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As part of the installation, you might see errors that the *wheel* failed to
    build. This error can be ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use Python to Verify that Qiskit® installed successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Python:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import Qiskit®:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a little bit exciting; we are going to use Qiskit® code for the first
    time. Granted, not exactly for programming a quantum computer, but at least to
    make sure that we are now ready to start programming your quantum programs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the version details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should display the versions of the installed Qiskit® components:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations, your Qiskit® installation is complete; you are ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: By using `pip` `install` from your virtual environment, you can install Qiskit®
    in just that environment, which will then stay isolated from the rest of your
    Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Qiskit® also comes with some optional visualization dependencies to use visualizations
    across the Qiskit® components. You can install these with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the zsh shell you must enclose the component in quotes:pip
    install '`qiskit[visualization]`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a quick introduction to Anaconda environments, see *Managing environments*
    in the Anaconda docs: [https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).'
  prefs: []
  type: TYPE_NORMAL
- en: This book does not, in any way, act as a Qiskit® installation troubleshooting
    guide, and you might conceivably run into issues when installing it, depending
    on your local OS, versions, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'But fear not, help is on the way. Here are a couple of good and friendly channels
    on which to reach out for help:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Slack**: [https://qiskit.slack.com/](https://qiskit.slack.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stack Exchange**: [https://quantumcomputing.stackexchange.com/questions/tagged/qiskit](https://quantumcomputing.stackexchange.com/questions/tagged/qiskit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the code samples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this book include short, and some not so short, sample programs
    that will lead you through your first steps in programming quantum computers.
    You can type in these programs directly from the instructions in the book if you
    want, but for convenience, you can also grab the sample code directly from the
    Packt Cookbook GitHub organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python samples are written for Python 3.5+ and the Qiskit® extension that
    you installed in your Python environment. The Python samples all have the extension:
    `.py`.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While you can type the recipes directly into your Python environment, or into
    Jupyter Notebooks on IBM Quantum Experience® or on your local Anaconda environment,
    it is somewhat more efficient to download or use **Git** to clone the sample code
    to your local environment. The advantage of cloning is that you can later refresh
    your local files from the remote repository if any updates are made.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not plan to use Git, but instead to download the recipes as a compressed
    file, continue on with *How to do it*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Git to clone the sample code, you must first do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a GitHub account. These are free and you can sign up for one at [https://github.com](https://github.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Git in your local environment. For more information, see [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are a user interface person, you might also want to install GitHub Desktop,
    available here: [https://desktop.github.com/](https://desktop.github.com/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have several different options to download the sample recipes to your local
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: For each, start by opening your web browser and then go to the *Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience*
    GitHub repository at [https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience](https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the repository as a compressed file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way to get the recipes is to just grab the sample files as a compressed
    directory and decompress it on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: At the preceding URL, click the **Clone or download** button and select **Download
    zip**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the compressed file and select a location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decompress the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning the repository using git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the **Clone or download** button and copy the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your command line and navigate to the location where you want to clone
    the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command should result in something like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Cloning the repository using GitHub Desktop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the **Clone or download** button and select **Open in desktop**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the GitHub Desktop dialog, select a directory to clone the repository to
    and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now browse the recipes in this cookbook. Each chapter includes one or
    more recipes. If you want, you can copy and paste the recipes directly into your
    Python environment, or into Jupyter Notebooks on IBM Quantum Experience® or on
    your local Anaconda environment.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a recipe file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, you have done everything with the command line. So how about you grab
    the following Python program and run it from your favorite Python interpreters,
    such as **Anaconda Spyder** or **Jupyter Notebooks**?
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have downloaded the sample files, the recipe file is available in the
    following local directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ch1_r1_version.py` code sample lists the version numbers of the Qiskit®
    components that we just installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When run, the preceding code should give an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A list of the Qiskit® components and versions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.2_B14436.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – A list of the Qiskit® components and versions
  prefs: []
  type: TYPE_NORMAL
- en: The following sections cover how to run the script in the environments that
    we have available.
  prefs: []
  type: TYPE_NORMAL
- en: Python scripts in Spyder
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In your local environment, you can now open the Python scripts in the Python
    interpreter of your choice; for example, Spyder, which is included with Anaconda:'
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: Be sure that you run your interpreter in the virtual environment in which you
    installed Qiskit®. Otherwise, it will not be able to find Qiskit®, and the program
    will not run correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Open your Anaconda user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Spyder** tile. If Spyder is not yet installed for your virtual environment,
    it will now install. This might take a while. Be patient!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Spyder, open the Python script that is included with this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run**. The script will now pull out the version numbers of the installed
    Qiskit® components. You can also open the Python scripts in a Jupyter notebook,
    for example, in the online IBM Quantum Experience® environment, but this takes
    a little extra work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jupyter Notebooks in Anaconda
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open your Anaconda user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Jupyter Notebooks** tile. If Jupyter Notebooks is not yet installed
    for your virtual environment, it will now install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your default web browser opens at your root directory. Browse to and open the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The sample script opens in a Jupyter text editor. You can now see the code but
    not run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Jupyter browser and click **New** | **Notebook**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the Python script code into the new notebook. You can now click
    **Run** and see the code execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jupyter Notebooks in IBM Quantum Experience®
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To run the Python scripts in the online IBM Quantum Experience® notebooks, log
    in to IBM Quantum Experience® at [https://quantum-computing.ibm.com/login](https://quantum-computing.ibm.com/login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the main dashboard, click on the **Quantum Lab** left-menu icon (![A picture
    containing drawing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Description automatically generated](img/Figure_1.4_B14436.png)), then click
    **New Notebook** and follow the process we discussed *in the Jupyter Notebooks
    in Anaconda* section.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Running your Qiskit® code on IBM Quantum Experience®'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.3_B14436.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – Running your Qiskit® code on IBM Quantum Experience®
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Qiskit®-based Python code that we will be going through in the chapters
    that follow can be run in any Python environment that meets the Qiskit® requirements,
    so you have free reins to pick the environment that suits you. And with that environment,
    you can also freely pick your favorite tools to run the programs.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, I have tested running the code in both the **Spyder** editor
    that comes as standard with **Anaconda** and with the **Jupyter Notebook** environments
    on both IBM Quantum Experience® and Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: Installing your API key and accessing your provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have installed Qiskit®, you can immediately start creating your
    quantum programs and run these on local simulators. If, however, at some point,
    you want to run your quantum code on actual IBM Quantum® hardware, you must install
    your own unique API key locally.
  prefs: []
  type: TYPE_NORMAL
- en: API keys on IBM Quantum Experience®
  prefs: []
  type: TYPE_NORMAL
- en: If you are running your Qiskit® programs in the IBM Quantum Experience® notebook
    environment, your API key is automatically registered.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can install your API key, you must first have an IBM Quantum Experience®
    account. If you have not yet created one, go back and do it (see the *Creating
    your IBM Quantum Experience® account* section).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to install the API key locally:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to IBM Quantum Experience® at [https://quantum-computing.ibm.com/login](https://quantum-computing.ibm.com/login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the IBM Quantum Experience® dashboard, find your user icon in the upper-right
    corner, click it, and select **My account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the account page, find the **Qiskit in local environment** section, and click
    **Copy token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now paste your token in a temporary location or keep it in the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your local machine, access your Qiskit® environment. We have done this one,
    but here's a repeat of the process if you are using Anaconda.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activate your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the Python header displays and that you are running the correct
    version of Python:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the required `IBMQ` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install your API token locally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, instead of `MY_API_TOKEN`, paste in the API token that you just copied
    from IBM Quantum Experience®: Keep the single quotes as they are required for
    the command.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that the token is in place, let''s verify that all is in order and that
    your account has the correct privileges:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should display the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the provider information for your account, with `hub`, `group`, and
    `project`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main class that you import for this exercise is `IBMQ`, which is a toolbox
    for working with the quantum hardware and software that is provided by IBM in
    the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we used `save.account()` to store your account locally. As
    we go forward, in the recipes where we will access the IBM Quantum® machines,
    we will use the `IBMQ.load_account()` and `IBMQ.get_provider()` classes in your
    quantum programs to make sure that you have the correct access.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your API key
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason, you need to create a new API token on IBM Quantum Experience®
    and update your locally saved token, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`>>> IBMQ.save_account(''NEW_API_TOKEN'', overwrite=True)`'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the code that follows in the recipes in this cookbook, we will set a `provider`
    variable to hold the provider information for your account by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use the `provider` information when selecting the IBM Quantum®
    computer, or backend, to run your quantum programs on. In the following example,
    we select a quantum computer that is called `ibmqx2`) as our backend. The internal
    reference for this machine is `ibmqx2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Keeping your Qiskit® environment up to date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qiskit® is an open source programming environment that is in *continuous flux*.
    Over the course of writing this book, I have passed through many minor and major
    version updates of the software.
  prefs: []
  type: TYPE_NORMAL
- en: It is generally a good idea to stay updated with the latest version, but with
    some updates, components of the code might change behavior. It is always a good
    idea to have a good look at the release notes for each new version. Sometimes
    changes are introduced that will change the way your code behaves. In those cases,
    you might want to hold off on upgrading until you have verified that your code
    still works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Anaconda environments, then you can maintain more than one
    environment at different Qiskit® levels, to have a fallback environment in case
    an upgraded Qiskit® version breaks your code.
  prefs: []
  type: TYPE_NORMAL
- en: Qiskit® moves fast
  prefs: []
  type: TYPE_NORMAL
- en: The IBM Quantum Experience® Notebook environment always runs the latest version
    of Qiskit®, and it might be a good idea to test drive your code in that environment
    before you upgrade your local environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also subscribe to notification updates, to find out when a new release
    has been offered:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to IBM Quantum Experience® at [https://quantum-computing.ibm.com/login](https://quantum-computing.ibm.com/login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the IBM Quantum Experience® dashboard, find your user icon in the upper-right
    corner, click it, and select **My account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the account page, under **Notification** settings, set **Updates and new
    feature announcements** to **On**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you begin, verify which version of Qiskit® you are running for each of
    your environments (if you have more than one).
  prefs: []
  type: TYPE_NORMAL
- en: 'For each environment, launch Python, either from the command line, from an
    IDE such as Spyder, or as a Jupyter notebook, then execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have an old version of Qiskit® installed, the preceding code might result
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then go to the Qiskit® release notes to find out if there is a more
    up-to-date version available: [https://qiskit.org/documentation/release_notes.html](https://qiskit.org/documentation/release_notes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a lot of steps just to make sure. The whole process is automated in
    Python. To go down that path, go to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activate your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to check for outdated `pip` packages for your virtual
    environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a list of all your `pip` packages that are currently outdated
    and list the available versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is then a breeze to update Qiskit® using `pip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the command line, verify that Qiskit® is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will result in an output similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that Qiskit® is integrated with Python in your isolated environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Python:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import Qiskit®:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List the version details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should display the versions of the installed Qiskit® components:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations, your Qiskit® upgrade worked; you are now running the latest
    code!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on how you consume this book, you might be looking over this process
    as part of your first read-through, and no upgrades were available. If so, go
    ahead and bookmark this recipe, and come back to it at a later time when there
    has been a Qiskit® upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: The pip tool will manage your upgrade for you for each virtual environment.
    As I mentioned before, it might be a good idea to do a staged upgrade of your
    environments if you have more than one.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can upgrade one environment and test run your quantum programs
    in that environment to make sure that the new version did not break anything in
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: OK, with this you should be reasonably set with one or more Qiskit® environments
    on which to run your quantum programs. If you feel ready for it, you can now take
    the plunge and go directly to [*Chapter 4*](B14436_04_Final_PG_ePub.xhtml#_idTextAnchor081),
    *Starting at the Ground Level with Terra*, to start writing quantum programs in
    Python using Qiskit®. If you are up for some prep work to get a feel for what
    programming a quantum computer is all about, start with [*Chapter 2*](B14436_02_Final_PG_ePub.xhtml#_idTextAnchor045),
    *Quantum Computing and Qubits with Python*, to get an introduction to qubits and
    gates, or [*Chapter 3*](B14436_03_Final_PG_ePub.xhtml#_idTextAnchor063), *IBM
    Quantum Experience® – Quantum Drag and Drop*, to get a visual feel for quantum
    programs by using the IBM Quantum Experience® drag-and-drop programming interface.
  prefs: []
  type: TYPE_NORMAL
- en: No matter which path you take, don't worry, we'll let Python do the hard work.
    Again, have fun!
  prefs: []
  type: TYPE_NORMAL
