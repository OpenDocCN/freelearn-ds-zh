- en: '*Chapter 8*: Version Control with the NiFi Registry'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, you built several data pipelines, but we have left
    out a very important component—version control. Any good software developer will
    almost always set up version control on their project before they start writing
    any code. Building data pipelines for production is no different. Data engineers
    use many of the same tools and processes as software engineers. Using version
    control allows you to make changes without the fear of breaking your data pipeline.
    You will always be able to roll back changes to previous versions. The NiFi registry
    also allows you to connect new NiFi instances and have full access to all your
    existing data pipelines. In this chapter, we''re going to cover the following
    main topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the NiFi Registry
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Registry in NiFi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning your data pipelines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using git-persistence with the NiFi Registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the NiFi Registry
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you hear about version control, you are probably used to hearing about
    Git. Later in this chapter, we will use Git, but Apache NiFi has a sub-project
    that can handle all of our version control needs—the NiFi Registry:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The NiFi Registry home page'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.1__B15739.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – The NiFi Registry home page
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Let's now install the Registry.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Installing the NiFi Registry
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the NiFi Registry, go to the website at [https://nifi.apache.org/registry](https://nifi.apache.org/registry)
    and scroll to **Releases**. The following screenshot shows the available releases:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The NiFi Registry'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.2__B15739.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – The NiFi Registry
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: You will see a source release and two binaries for the current version, which,
    at the time of writing, is 0.6.0\. On Windows, you can download the zip version,
    but since I am on Linux, I will download the `nifi-registry-0.6.0-bin.tar.gz`
    file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, move it to your home directory, extract the contents,
    then delete the archive using the following lines:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will now have a folder named `nifi-registry-0.6.0`. To run the Registry
    using the default settings (HTTP on port `18080`), from the directory, use the
    following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have launched the Registry, browse to it at `http://localhost:18080/`nifi-registry.
    You should see the following screen:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The NiFi Registry'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.3__B15739.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – The NiFi Registry
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is blank, and the user is anonymous. You have not changed
    any defaults or added any authentication, and you have not added any data pipelines
    yet.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The NiFi Registry uses buckets to hold your data pipelines. A bucket is similar
    to a folder. You can either group similar pipelines, or create a folder for each
    source, or for destinations, or however you see fit to meet your needs and use
    cases. The next section will walk you through configuring the NiFi Registry.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the NiFi Registry
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the Registry up and running, you will need to create a folder to hold
    your data pipelines. To create a folder, click the wrench in the top-right corner
    of the screen. A popup will appear on the screen. Click the **NEW BUCKET** button.
    On the next popup, enter the bucket name, as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表启动并运行后，您需要创建一个文件夹来存放您的数据管道。要创建文件夹，点击屏幕右上角的扳手。屏幕上会出现一个弹出窗口。点击 **新建存储桶** 按钮。在下一个弹出窗口中，输入存储桶名称，如图下所示：
- en: '![Figure 8.4 – Creating a new bucket'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.4 – 创建新的存储桶'
- en: '](img/Figure_8.4__B15739.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.4__B15739.jpg)'
- en: Figure 8.4 – Creating a new bucket
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 创建新的存储桶
- en: 'Once the bucket is created, you will see it on the main registry screen. Your
    registry should now look like the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了存储桶，您将在主注册表屏幕上看到它。您的注册表现在应该看起来像以下截图：
- en: '![Figure 8.5 – Registry with the new bucket'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.5 – 带有新存储桶的注册表'
- en: '](img/Figure_8.5__B15739.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.5__B15739.jpg)'
- en: Figure 8.5 – Registry with the new bucket
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 带有新存储桶的注册表
- en: Now that you have the Registry deployed and a bucket created, you are ready
    to register it with NiFi and start versioning your data pipelines. The next section
    will walk you through this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经部署了注册表并创建了一个存储桶，您现在可以将其注册到 NiFi 中并开始对数据管道进行版本控制。下一节将引导您完成此过程。
- en: Using the Registry in NiFi
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 NiFi 中使用注册表
- en: The Registry is up and running, and now you need to tell NiFi about it so that
    you can start using it to version your data pipelines. The NiFi GUI will handle
    all of the configuration and versioning. In the next section, you will add the
    Registry to NiFi.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表已启动并运行，现在您需要告诉 NiFi 关于它的信息，以便您可以使用它来对数据管道进行版本控制。NiFi 图形用户界面将处理所有配置和版本控制。在下一节中，您将向
    NiFi 添加注册表。
- en: Adding the Registry to NiFi
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将注册表添加到 NiFi
- en: 'To add the Registry to NiFi, click on the waffle menu in the top-right corner
    of the window, then select **Controller Settings** from the drop-down menu, as
    shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将注册表添加到 NiFi，点击窗口右上角的网格菜单，然后从下拉菜单中选择 **控制器设置**，如图下所示：
- en: '![Figure 8.6 – Controller Settings in Nifi'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.6 – Nifi 中的控制器设置'
- en: '](img/Figure_8.6__B15739.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.6__B15739.jpg)'
- en: Figure 8.6 – Controller Settings in Nifi
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – Nifi 中的控制器设置
- en: 'In the **Controller Settings** popup, there are several tabs. You will select
    the last tab—**Registry Clients**. Clicking the plus sign at the top right of
    the window, you will add your Registry as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **控制器设置** 弹出窗口中，有几个选项卡。您将选择最后一个选项卡—**注册表客户端**。点击窗口右上角的加号，您将添加您的注册表，如图下所示：
- en: '![Figure 8.7 – Adding the NiFi Registry to NiFi'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.7 – 将 NiFi 注册表添加到 NiFi'
- en: '](img/Figure_8.7__B15739.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.7__B15739.jpg)'
- en: Figure 8.7 – Adding the NiFi Registry to NiFi
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 将 NiFi 注册表添加到 NiFi
- en: After clicking the **ADD** button, you will have your Registry connected to
    NiFi. Close the window and you will be in your main NiFi canvas. You are now ready
    to version your data pipelines.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮后，您的注册表将连接到 NiFi。关闭窗口，您将进入主 NiFi 画布。现在您已经准备好对数据管道进行版本控制了。
- en: Versioning your data pipelines
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对数据管道进行版本控制
- en: 'You can use the NiFi Registry to version your data pipelines inside of a processor
    group. I have NiFi running and the canvas zoomed in to the `SeeClickFix` processor
    group from [*Chapter 6*](B15739_06_ePub_AM.xhtml#_idTextAnchor073)*, Building
    a 311 Data Pipeline*. To start versioning this data pipeline, right-click on the
    title bar of the processor group and select **Version** | **Start version control**,
    as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 NiFi 注册表在处理器组内部对数据管道进行版本控制。我正在运行 NiFi，并将画布缩放到来自 [*第 6 章*](B15739_06_ePub_AM.xhtml#_idTextAnchor073)*，构建
    311 数据管道* 的 `SeeClickFix` 处理器组。要开始对此数据管道进行版本控制，右键单击处理器组标题栏并选择 **版本** | **启动版本控制**，如图下所示：
- en: '![Figure 8.8 – Starting version control on a processor group'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 在处理器组上启动版本控制'
- en: '](img/Figure_8.8__B15739.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.8__B15739.jpg)'
- en: Figure 8.8 – Starting version control on a processor group
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 在处理器组上启动版本控制
- en: 'Your processor group is now being tracked by version control. You will see
    a green checkmark on the left of the processor group title box, as shown in the
    following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您的处理器组现在正在通过版本控制进行跟踪。您将在处理器组标题框的左侧看到一个绿色勾号，如图下所示：
- en: '![Figure 8.9 – Processor group using version control'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.9 – 使用版本控制的处理器组'
- en: '](img/Figure_8.9__B15739.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.9__B15739.jpg)'
- en: Figure 8.9 – Processor group using version control
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 使用版本控制的处理器组
- en: 'If you browse back to the NiFi Registry, you will see that **Scf-DataEngineeringPython**
    is being tracked. You will also see the details by expanding the bar. The details
    show your description and the version notes (**First Commit**), as well as some
    identifiers. The results are shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览回 NiFi 注册表，你会看到 **Scf-DataEngineeringPython** 正在被跟踪。你还可以通过展开条形图来查看详细信息。详细信息显示了你的描述和版本说明（**第一次提交**），以及一些标识符。结果如下面的截图所示：
- en: '![Figure 8.10 – Details of the data pipeline in the Registry'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10 – 注册表中数据管道的详细信息](#)'
- en: '](img/Figure_8.10__B15739.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.10__B15739.jpg)'
- en: Figure 8.10 – Details of the data pipeline in the Registry
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 注册表中数据管道的详细信息
- en: You are not tracking a data pipeline in the Registry. In the next section, you
    will make changes and update the Registry.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你没有在注册表中跟踪数据管道。在下一节中，你将进行更改并更新注册表。
- en: Editing a versioned pipeline
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑版本化管道
- en: In a normal workflow, you would create a processor group and add it to the Registry
    (in other words, start versioning the processor). You would then make changes,
    and then commit those changes to the Registry and always make sure you were using
    the appropriate version.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常的工作流程中，你会创建一个处理器组并将其添加到注册表（换句话说，开始版本化处理器）。然后你会进行更改，并将这些更改提交到注册表，并始终确保你使用的是适当的版本。
- en: 'Let''s make a change to the SeeClickFix data pipeline. Your pipeline is running,
    and everything is working perfectly. Then your supervisor says that there is a
    new warehouse that needs to start receiving SeeClickFix data. You don''t need
    to build a new data pipeline; you just need to add the warehouse to your current
    pipeline. Entering the processor group, I have added a `NewDataWarehouse` processor
    alongside the original. The changes are highlighted in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对 SeeClickFix 数据管道进行更改。你的管道正在运行，一切工作得非常完美。然后你的主管说有一个新的仓库需要开始接收 SeeClickFix
    数据。你不需要构建新的数据管道；你只需要将仓库添加到当前的管道中。进入处理器组，我在原始处理器旁边添加了一个 `NewDataWarehouse` 处理器。以下截图显示了更改：
- en: '![Figure 8.11 – Adding a new data warehouse to the data pipeline'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11 – 将新的数据仓库添加到数据管道](#)'
- en: '](img/Figure_8.11__B15739.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.11__B15739.jpg)'
- en: Figure 8.11 – Adding a new data warehouse to the data pipeline
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 将新的数据仓库添加到数据管道
- en: 'Exit the processor group back to the main canvas. Looking at the title bar
    of the processor group, you will see the green checkmark is gone and you have
    an asterisk. Hovering over it will show you local changes made, as shown in the
    following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 退出处理器组回到主画布。查看处理器组的标题栏，你会看到绿色的勾号消失了，取而代之的是一个星号。将鼠标悬停在其上，会显示所做的本地更改，如下面的截图所示：
- en: '![Figure 8.12 – Local changes have been made inside the processor group'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.12 – 处理器组内已进行本地更改](#)'
- en: '](img/Figure_8.12__B15739.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.12__B15739.jpg)'
- en: Figure 8.12 – Local changes have been made inside the processor group
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 处理器组内已进行本地更改
- en: 'After making any changes, you need to commit those changes, and add them to
    the Registry. Right-click on the title bar and select **Version**. Before committing
    the local changes, let''s view the changes. Select **Show Local Changes**. The
    following screenshot shows the changes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何更改后，你需要提交这些更改，并将它们添加到注册表中。右键单击标题栏并选择**版本**。在提交本地更改之前，让我们查看更改。选择**显示本地更改**。以下截图显示了更改：
- en: '![Figure 8.13 – Displaying the local changes'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13 – 显示本地更改](#)'
- en: '](img/Figure_8.13__B15739.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.13__B15739.jpg)'
- en: Figure 8.13 – Displaying the local changes
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 显示本地更改
- en: As you can see in the preceding screenshot, a processor and a relationship were
    added. Now you can select **Version** | **Commit Local Changes** to add them to
    the Registry. You will be prompted to add a description. Once saved, you will
    now have a green checkmark in the title bar. The NiFi Registry will now show that
    you have two versions and will show the details of the most recent version.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，添加了一个处理器和一个关系。现在你可以选择**版本** | **提交本地更改**来将它们添加到注册表。你将被提示添加一个描述。一旦保存，你将在标题栏中看到一个绿色的勾号。NiFi
    注册表现在将显示你有两个版本，并将显示最新版本的详细信息。
- en: With multiple versions, you can now right-click on the title bar and select
    **Version** | **Change Version**. Changing to **Version 1** will result in an
    orange circle with an upward arrow in it alerting you that you are not using the
    most current version.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个版本，你现在可以右键单击标题栏并选择**版本** | **更改版本**。更改为**版本 1**将导致一个带有向上箭头的橙色圆圈警告你，你正在使用不是最新版本。
- en: With the processor group tracked in version control, you can make changes, roll
    them back, and commit new changes. If you make a mistake, you can roll back your
    work and start again. But you can also import a processor that other users may
    have created in their local development copy of NiFi. The next section will show
    you how.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理器组被版本控制跟踪时，你可以进行更改、回滚并提交新的更改。如果你犯了一个错误，你可以回滚你的工作并重新开始。但你也可以导入其他用户可能在他们的本地
    NiFi 开发副本中创建的处理器。下一节将向你展示如何操作。
- en: Importing a processor group from the NiFi Registry
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 NiFi 注册表中导入处理器组
- en: Let's imagine that you and another worker are building data pipelines in your
    own local copies of NiFi. You both commit your changes to the NiFi Registry, just
    like software developers do with Git. Now you have been tasked with fixing an
    issue your coworker is struggling with. How can you use their work? You could
    have them export a template, and you could import it. This was how things used
    to be done before the Registry. But now, you will use the Registry.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设你和另一位工作人员正在你自己的 NiFi 本地副本中构建数据管道。你们都将更改提交到 NiFi 注册表，就像软件开发者使用 Git 一样。现在你被分配去修复你的同事正在努力解决的问题。你如何使用他们的工作？你可以让他们导出一个模板，然后你可以导入它。这是在注册表之前事情通常是如何做的。但现在，你将使用注册表。
- en: 'Drag a processor group to the NiFi canvas. Notice that underneath the textbox
    for naming the group, there is now an option to import, as shown in the following
    screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将处理器组拖动到 NiFi 画布上。注意，在为组命名文本框下方，现在有一个导入选项，如下截图所示：
- en: '![Figure 8.14 – An Import option is now available for processor groups](img/Figure_8.14__B15739.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 8.14 – 现在处理器组有导入选项](img/Figure_8.14__B15739.jpg)'
- en: Figure 8.14 – An Import option is now available for processor groups
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.14 – 现在处理器组有导入选项
- en: 'Now that NiFi has access to the NiFi Registry, it has added the option to import
    processor groups. By clicking **Import**, you will be able to select a registry,
    a bucket, and a flow. In the following screenshot, I have selected the **SCf**
    flow:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 NiFi 可以访问 NiFi 注册表，它已经添加了导入处理器组的选项。通过点击**导入**，你将能够选择一个注册表、一个桶和一个流程。在下面的截图中，我选择了**SCf**流程：
- en: '![Figure 8.15 – Selecting the flow and version'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.15 – Selecting the flow and version'
- en: '](img/Figure_8.15__B15739.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.15__B15739.jpg)'
- en: Figure 8.15 – Selecting the flow and version
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.15 – 选择流程和版本
- en: After importing the flow, you can see it is now added to the canvas. In the
    previous section, I changed the processor group back to **Version 1**, so you
    can see that I have that version, with the orange circle and arrow, as well as
    the imported current version with the green check mark.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 导入流程后，你可以看到它现在已经被添加到画布上。在前一节中，我将处理器组改回**版本 1**，所以你可以看到我有一个版本，带有橙色圆圈和箭头，以及导入的当前版本带有绿色勾选标记。
- en: When you bring in a new data engineer, or set up a new NiFi instance, you can
    import all the production pipelines into the new environment. This guarantees
    everyone is working from the same source, but also that all changes are tracked
    and shared between development environments.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你引入新的数据工程师，或者设置新的 NiFi 实例时，你可以将所有生产管道导入到新的环境中。这保证了每个人都在相同的源上工作，同时也保证了所有更改在开发环境之间被跟踪和共享。
- en: Using git-persistence with the NiFi Registry
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NiFi 注册表进行 git-persistence
- en: Just like software developers, you can also use Git to version control your
    data pipelines. The NiFi Registry allows you to use git-persistence with some
    configuration. To use Git with your data pipelines, you need to first create a
    repository.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就像软件开发者一样，你也可以使用 Git 来进行你的数据处理管道的版本控制。NiFi 注册表允许你通过一些配置使用 git-persistence。要使用
    Git 进行数据处理管道的版本控制，你首先需要创建一个仓库。
- en: 'Log in to GitHub and create a repository for your data pipelines. I have logged
    in to my account and have created the repository as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 GitHub 并为你的数据处理管道创建一个仓库。我已经登录到我的账户并创建了如下截图所示的仓库：
- en: '![Figure 8.16 – Creating a GitHub repository'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.16 – Creating a GitHub repository'
- en: '](img/Figure_8.16__B15739.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.16__B15739.jpg)'
- en: Figure 8.16 – Creating a GitHub repository
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.16 – 创建 GitHub 仓库
- en: 'After creating a repository, you will need to create an access token for the
    registry to use to read and write to the repository. In the GitHub **Settings**,
    go to **Developer settings**, then **Personal access tokens**, then click the
    **Generate a personal access token** hyperlink shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建存储库后，你需要为注册表创建一个访问令牌，以便它可以使用该令牌读取和写入存储库。在GitHub**设置**中，转到**开发者设置**，然后**个人访问令牌**，然后点击以下截图所示的**生成个人访问令牌**超链接：
- en: '![Figure 8.17 – The setting to create an access token'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17 – 创建访问令牌的设置'
- en: '](img/Figure_8.17__B15739.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.17__B15739.jpg)'
- en: Figure 8.17 – The setting to create an access token
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 创建访问令牌的设置
- en: 'You can then add a note for the token so you can remember what service is using
    it. Then select the scope access—check the repo heading. The following screenshot
    shows the settings:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为此令牌添加一个备注，以便你可以记住使用它的服务。然后选择作用域访问——勾选repo标题。以下截图显示了设置：
- en: '![Figure 8.18 – Giving the access token scope'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.18 – 分配访问令牌作用域'
- en: '](img/Figure_8.18__B15739.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.18__B15739.jpg)'
- en: Figure 8.18 – Giving the access token scope
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – 分配访问令牌作用域
- en: 'Now, clone the repository to your local filesystem. You can get the link from
    the GitHub repository by clicking the **Clone or Download** button. Then, run
    the following command in your terminal to clone it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将存储库克隆到你的本地文件系统中。你可以通过点击GitHub存储库中的**克隆或下载**按钮来获取链接。然后，在你的终端中运行以下命令来克隆它：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see some output and should now have the repository as a folder in
    the current directory. The output of the command is shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一些输出，并且现在应该将存储库作为一个文件夹放在当前目录中。命令的输出如下截图所示：
- en: '![Figure 8.19 – Cloning the GitHub repository'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.19 – 克隆GitHub存储库'
- en: '](img/Figure_8.19__B15739.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.19__B15739.jpg)'
- en: Figure 8.19 – Cloning the GitHub repository
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 – 克隆GitHub存储库
- en: 'You will need to enter the GitHub information into the NiFi Registry. You can
    do this in the `providers.xml` file in the `conf` directory. You will edit the
    file towards the top under the header named `flowPersistenceProvider`. The configuration
    is shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将GitHub信息输入到NiFi注册表中。你可以在`conf`目录下的`providers.xml`文件中这样做。你将在名为`flowPersistenceProvider`的标题下方进行编辑。配置如下截图所示：
- en: '![Figure 8.20 – Adding GitHub information to the Registry in providers.xml'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20 – 在`providers.xml`中将GitHub信息添加到注册表中'
- en: '](img/Figure_8.20__B15739.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.20__B15739.jpg)'
- en: Figure 8.20 – Adding GitHub information to the Registry in providers.xml
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – 在`providers.xml`中将GitHub信息添加到注册表中
- en: 'After modifying the `providers.xml` file, you will need to restart the Registry.
    You can restart it using the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`providers.xml`文件后，你需要重新启动注册表。你可以使用以下命令来重新启动它：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the Registry restarts, go to your NiFi canvas and add a third data warehouse
    to the `SeeClickFix` processor group. When you exit the group, you will see that
    there are local changes that have not been committed—the green checkmark is gone
    and there is an asterisk. Right-click on the title menu and select **Version**
    then **Commit Local Version**. It will take a little longer this time as the files
    are being sent to your GitHub repository.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册表重新启动时，前往你的NiFi画布，并将第三个数据仓库添加到`SeeClickFix`处理器组中。当你退出组时，你会看到有一些本地更改尚未提交——绿色的勾号消失了，出现了一个星号。在标题菜单上右键单击，然后选择**版本**然后**提交本地版本**。这次会花费更长的时间，因为文件正在发送到你的GitHub存储库。
- en: 'Looking at the NiFi Registry, you can see that I now have three versions, as
    shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 查看NiFi注册表，你可以看到我现在有三个版本，如下截图所示：
- en: '![Figure 8.21 – Version 3 is in the Registry'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.21 – 版本3在注册表中'
- en: '](img/Figure_8.21__B15739.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.21__B15739.jpg)'
- en: Figure 8.21 – Version 3 is in the Registry
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 – 版本3在注册表中
- en: 'Browsing to the repository, you will see there is a folder created for the
    name of the bucket in the Registry, and then the flow data has been added. The
    following screenshot shows the contents of the folder:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到存储库，你会看到为注册表中的存储桶名称创建了一个文件夹，然后添加了流程数据。以下截图显示了文件夹的内容：
- en: '![Figure 8.22 – Registry bucket and flows saved to the GitHub repository'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22 – 注册表存储桶和保存到GitHub存储库中的流程'
- en: '](img/Figure_8.22__B15739.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.22__B15739.jpg)'
- en: Figure 8.22 – Registry bucket and flows saved to the GitHub repository
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – 注册表存储桶和保存到GitHub存储库中的流程
- en: Now your data pipelines are using version control through the NiFi Registry
    and persisted in Git on your local disk and GitHub online.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的数据管道正在通过NiFi注册表使用版本控制，并持久化存储在您本地的磁盘和GitHub在线上。
- en: Congratulations, you now have a fully functional NiFi registry and have saved
    your data pipelines to a Git repository. At some point in your career, you will
    be asked to run a data pipeline like you did several months ago. Instead of looking
    through your files and trying to remember what you did way back then, you will
    now be able to browse to your NiFi Registry and select the proper version of the
    data pipeline. And if your server crashes and everything is lost? You can now
    reinstall NiFi and connect it to your Git-repository-backed NiFi Registry to recover
    all of your hard work.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您，您现在拥有了一个功能齐全的NiFi注册表，并将您的数据管道保存到了Git仓库中。在您的职业生涯的某个时刻，您将需要运行一个类似于几个月前您所做的那样数据管道。而不再是翻阅您的文件并试图回忆起当时您所做的一切，现在您可以通过浏览到您的NiFi注册表并选择适当的数据管道版本。如果您的服务器崩溃并且一切丢失？现在您可以通过重新安装NiFi并将其连接到由Git仓库支持的NiFi注册表来恢复您所有的辛勤工作。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you have learned one of the most important features of production
    data pipelines: version control. A software developer would not write code without
    using version control and neither should a data engineer. You have learned how
    to install and configure the Nifi Registry and how to start tracking version on
    processor groups. Lastly, you are now able to persist the version to GitHub. Any
    changes to your data pipelines will be saved and if you need to roll back, you
    can. As your team grows, all the data engineers will be able to manage the data
    pipelines and be sure they have the latest versions, all while developing locally.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了生产数据管道最重要的功能之一：版本控制。软件开发者不会在没有使用版本控制的情况下编写代码，数据工程师也不应该这样做。您已经学习了如何安装和配置Nifi注册表，以及如何开始跟踪处理器组的版本。最后，您现在能够将版本持久化到GitHub。对您的数据管道的任何更改都将被保存，如果您需要回滚，您也可以这样做。随着您的团队壮大，所有数据工程师都将能够管理数据管道，并确保他们拥有最新版本，同时在本地上进行开发。
- en: In the next chapter, you will learn about logging and monitoring your data pipelines.
    If something goes wrong, and it will, you will need to know about it. Good logging
    and monitoring of data pipelines will allow you to catch errors when they happen
    and debug them to restore your data flows.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何记录和监控您的数据管道。如果出现问题，这是不可避免的，您将需要了解它。良好的数据管道记录和监控将允许您在发生错误时捕捉到错误，并调试它们以恢复您的数据流。
