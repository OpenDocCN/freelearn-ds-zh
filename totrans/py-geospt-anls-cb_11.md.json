["```py\n>pip install djangorestframework==3.1.3\n\n```", "```py\n>pip install djangorestframework\n\n```", "```py\n    > django-admin startproject web_analysis\n\n    ```", "```py\n    > cd web_analysis\n\n    ```", "```py\n    > django-admin startapp api\n\n    ```", "```py\n    INSTALLED_APPS = (\n     'django.contrib.admin',\n     'django.contrib.auth',\n     'django.contrib.contenttypes',\n     'django.contrib.sessions',\n     'django.contrib.messages',\n     'django.contrib.staticfiles',\n\n     #### GeoDjango Contrib APP\n     # 'django.contrib.gis',\n\n     #### third party apps\n     'rest_framework',\n\n     ##### our local apps\n     'api', \n\n    )\n\n    ```", "```py\n    DATABASES = {\n        'default': {\n            # PostgreSQL with PostGIS\n            'ENGINE': 'django.contrib.gis.db.backends.postgis',\n            'NAME': 'py_geoan_cb', # DB name\n            'USER': 'saturn', # DB user name\n            'PASSWORD': 'secret', # DB user password\n            'HOST': 'localhost',\n            'PORT': '5432',\n        }\n    }\n    ```", "```py\n    LOGGING_CONFIG = None\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'verbose': {\n                'format' : \"[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s\",\n                'datefmt' : \"%d/%b/%Y %H:%M:%S\"\n            },\n            'simple': {\n                'format': '%(levelname)s %(message)s'\n            },\n        },\n        'handlers': {\n            'file_verbose': {\n                'level': 'DEBUG',\n                'class': 'logging.FileHandler',\n                'filename': 'logs/verbose.log',\n                'formatter': 'verbose'\n            },\n            'file_debug': {\n                'level': 'DEBUG',\n                'class': 'logging.FileHandler',\n                'filename': 'logs/debug.log',\n                'formatter': 'verbose'\n            },\n        },\n        'loggers': {\n            'django': {\n                'handlers':['file_verbose'],\n                'propagate': True,\n                'level':'DEBUG',\n            },\n            'api': {\n                'handlers': ['file_debug'],\n                'propagate': True,\n                'level': 'DEBUG',\n            },\n\n        }\n    }\n\n    import logging.config\n    logging.config.dictConfig(LOGGING)\n    ```", "```py\n    >createuser saturn\n\n    ```", "```py\n    CREATE SCHEMA django AUTHORIZATION saturn;\n\n    ```", "```py\n    ALTER ROLE saturn SET search_path = django, geodata, public, topology;\n    ```", "```py\n    > python manage.py migrate\n\n    ```", "```py\n    > python manage.py createsuperuser\n\n    ```", "```py\n    > python manage.py runserver 8000\n\n    ```", "```py\n    ALTER TABLE geodata.ch08_e01_networklines OWNER TO saturn;\n    ALTER TABLE geodata.ch08_e01_networklines_vertices_pgr OWNER TO saturn;\n    ALTER TABLE geodata.ch08_e02_networklines OWNER TO saturn;\n    ALTER TABLE geodata.ch08_e02_networklines_vertices_pgr  OWNER TO saturn;\n    ALTER TABLE geodata.networklines_3857 OWNER TO saturn;\n    ALTER TABLE geodata.networklines_3857_vertices_pgr OWNER TO saturn;\n\n    ```", "```py\n    CREATE ROLE gis_edit   VALID UNTIL 'infinity';\n    GRANT ALL ON SCHEMA geodata TO GROUP gis_edit;\n    GRANT gis_edit TO saturn;\n    GRANT ALL ON TABLE geodata.ch08_e01_networklines TO GROUP gis_edit;\n    GRANT ALL ON TABLE geodata.ch08_e01_networklines_vertices_pgr TO GROUP gis_edit;\n    GRANT ALL ON TABLE geodata.ch08_e02_networklines TO GROUP gis_edit;\n    GRANT ALL ON TABLE geodata.ch08_e02_networklines_vertices_pgr TO GROUP gis_edit;\n    GRANT ALL ON TABLE geodata.networklines_3857 TO GROUP gis_edit;\n    GRANT ALL ON TABLE geodata.networklines_3857_vertices_pgr TO GROUP gis_edit;\n\n    ```", "```py\n    \"\"\"web_analysis URL Configuration\n\n    The `urlpatterns` list routes URLs to views. For more information please see:\n        https://docs.djangoproject.com/en/1.8/topics/http/urls/\n    Examples:\n    Function views\n        1\\. Add an import:  from my_app import views\n        2\\. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\n    Class-based views\n        1\\. Add an import:  from other_app.views import Home\n        2\\. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n    Including another URLconf\n        1\\. Add an import:  from blog import urls as blog_urls\n        2\\. Add a URL to urlpatterns:  url(r'^blog/', include(blog_urls))\n    \"\"\"\n    from django.conf.urls import include, url\n    from django.contrib import admin\n\n    urlpatterns = [\n        url(r'^admin/', include(admin.site.urls)),\n        url(r'^api/', include('api.urls')),\n    ]\n    ```", "```py\n    from django.conf.urls import patterns, url\n    from rest_framework.urlpatterns import format_suffix_patterns\n\n    urlpatterns = patterns('api.views',\n        #  ex valid call from to /api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2\n        url(r'^directions/(?P<start_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<start_floor>\\d+)&(?P<end_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<end_floor>\\d+)/$', 'create_route', name='directions'),\n\n    )\n\n    urlpatterns = format_suffix_patterns(urlpatterns)\n    ```", "```py\n    (?P<start_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<start_floor>\\d+)&(?P<end_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<end_floor>\\d+)\n    ```", "```py\n    1587848.414,5879564.080,2&1588005.547,5879736.039,2\n    ```", "```py\n    /api/directions/start_x,start_y,start_floor&end_x,end_y,end_floor\n\n    ```", "```py\n    http://localhost:8000/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import traceback\n    from django.http import HttpResponseNotFound\n    from rest_framework.decorators import api_view\n    from rest_framework.response import Response\n    from geojson import loads, Feature, FeatureCollection\n    import logging\n    logger = logging.getLogger(__name__)\n    from django.db import connection\n\n    def find_closest_network_node(x_coord, y_coord, floor):\n        \"\"\"\n        Enter a given coordinate x,y and floor number and\n        find the nearest network node\n        to start or end the route on\n        :param x_coord: float  in epsg 3857\n        :param y_coord: float  in epsg 3857\n        :param floor: integer value equivalent to floor such as\n    \t2  = 2nd floor\n        :return: node id as an integer\n        \"\"\"\n        # connect to our Database\n        logger.debug(\"now running function find_closest_network_node\")\n        cur = connection.cursor()\n\n        # find nearest node on network within 200 m\n        # and snap to nearest node\n        query = \"\"\" SELECT\n            verts.id as id\n            FROM geodata.networklines_3857_vertices_pgr AS verts\n            INNER JOIN\n              (select ST_PointFromText('POINT(%s %s %s)', 3857)as geom) AS pt\n            ON ST_DWithin(verts.the_geom, pt.geom, 200.0)\n            ORDER BY ST_3DDistance(verts.the_geom, pt.geom)\n            LIMIT 1;\"\"\"\n\n        # pass 3 variables to our %s %s %s place holder in query\n        cur.execute(query, (x_coord, y_coord, floor,))\n\n        # get the result\n        query_result = cur.fetchone()\n\n        # check if result is not empty\n        if query_result is not None:\n            # get first result in tuple response there is only one\n            point_on_networkline = int(query_result[0])\n            return point_on_networkline\n        else:\n            logger.debug(\"query is none check tolerance value of 200\")\n            return False\n\n    # use the rest_framework decorator to create our api\n    #  view for get, post requests\n    @api_view(['GET', 'POST'])\n    def create_route(request, start_coord, start_floor, end_coord, end_floor):\n        \"\"\"\n        Generate a GeoJSON indoor route passing in a start x,y,floor\n        followed by &  then the end x,y,floor\n        Sample request: http:/localhost:8000/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2\n        :param request:\n        :param start_coord: start location x,y\n        :param start_floor: floor number  ex)  2\n        :param end_coord: end location x,y\n        :param end_floor: end floor ex)  2\n        :return: GeoJSON route\n        \"\"\"\n\n        if request.method == 'GET' or request.method == 'POST':\n\n            cur = connection.cursor()\n\n            # parse the incoming coordinates and floor using\n            # split by comma\n            x_start_coord = float(start_coord.split(',')[0])\n            y_start_coord = float(start_coord.split(',')[1])\n            start_floor_num = int(start_floor)\n\n            x_end_coord = float(end_coord.split(',')[0])\n            y_end_coord = float(end_coord.split(',')[1])\n            end_floor_num = int(end_floor)\n\n            # use our helper function to get vertices\n            # node id for start and end nodes\n            start_node_id = find_closest_network_node(x_start_coord,\n                               y_start_coord,\n                               start_floor_num)\n\n            end_node_id = find_closest_network_node(x_end_coord,\n                               y_end_coord,\n                               end_floor_num)\n\n            routing_query = '''\n                SELECT seq, id1 AS node, id2 AS edge,\n                  total_cost AS cost, layer,\n                  type_id, ST_AsGeoJSON(wkb_geometry) AS geoj\n                  FROM pgr_dijkstra(\n                    'SELECT ogc_fid as id, source, target,\n                         st_length(wkb_geometry) AS cost,\n                         layer, type_id\n                     FROM geodata.networklines_3857',\n                    %s, %s, FALSE, FALSE\n                  ) AS dij_route\n                  JOIN  geodata.networklines_3857 AS input_network\n                  ON dij_route.id2 = input_network.ogc_fid ;\n              '''\n\n            # run our shortest path query\n            if start_node_id or end_node_id:\n                cur.execute(routing_query, (start_node_id, end_node_id))\n            else:\n                logger.error(\"start or end node is None \"\n                             + str(start_node_id))\n                return HttpResponseNotFound('<h1>Sorry NO start or end  node'\n                                ' found within 200m</h1>')\n\n            # get entire query results to work with\n            route_segments = cur.fetchall()\n\n            # empty list to hold each segment for our GeoJSON output\n            route_result = []\n\n            # loop over each segment in the result route segments\n            # create the list of our new GeoJSON\n            for segment in route_segments:\n                seg_cost = segment[3]      # cost value\n                layer_level = segment[4]   # floor number\n                seg_type = segment[5]\n                geojs = segment[6]         # geojson coordinates\n                geojs_geom = loads(geojs)  # load string to geom\n                geojs_feat = Feature(geometry=geojs_geom,\n                                     properties={'floor': layer_level,\n                                                  'length': seg_cost,\n                                                  'type_id': seg_type})\n                route_result.append(geojs_feat)\n\n            # using the geojson module to create our GeoJSON Feature Collection\n            geojs_fc = FeatureCollection(route_result)\n\n            try:\n                return Response(geojs_fc)\n            except:\n                logger.error(\"error exporting to json model: \"+ str(geojs_fc))\n                logger.error(traceback.format_exc())\n                return Response({'error': 'either no JSON or no key params in your JSON'})\n        else:\n            retun HttpResponseNotFound('<h1>Sorry not a GET or POST request</h1>')\n    ```", "```py\n    http://localhost:8000/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2/?format=json\n\n    ```", "```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,  'templates'),],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```", "```py\n> python manage.py startapp maps\n\n```", "```py\nfrom django.conf.urls import patterns, url\nfrom rest_framework.urlpatterns import format_suffix_patterns\n\nurlpatterns = patterns('maps.views',\n    #  ex valid call from to /api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2\n    url(r'^(?P<map_name>\\w+)/$', 'route_map', name='route-map'),\n\n)\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```", "```py\n    url(r'^maps/', include('maps.urls')),\n```", "```py\nSTATIC_URL = '/static/'\nSTATIC_FOLDER = 'static'\n\nSTATICFILES_DIRS = [\n   os.path.join(BASE_DIR, STATIC_FOLDER),\n]\n\n# finds all static folders in all apps\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\n```", "```py\nstatic\n+---css\n|       bootstrap-responsive.min.css\n|       bootstrap.min.css\n|       custom-layout.css\n|       font-awesome.min.css\n|       ol.css\n|\n+---img\n\\---js\n        bootstrap.min.js\n        jquery-1.11.2.min.js\n        jquery.min.js\n        ol340.js\n```", "```py\n    {% load staticfiles %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        {% block head %}\n\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"description\" content=\"Sample Map\">\n        <meta name=\"author\" content=\"Michael Diener\">\n        <meta charset=\"UTF-8\">\n\n        <title>{% block title %}Default Title{% endblock %}</title>\n\n        <script src=\"img/{% static \"js/jquery-1.11.2.min.js\" %}\"></script>\n        <link rel=\"stylesheet\" href=\"{% static \"css/bootstrap.min.css\" %}\">\n        <script src=\"img/{% static \"js/bootstrap.min.js\" %}\"></script>\n        <link rel=\"stylesheet\" href=\"{% static \"css/ol.css\" %}\" type=\"text/css\">\n        <link rel=\"stylesheet\" href=\"{% static \"css/custom-layout.css\" %}\" type=\"text/css\">\n        <script src=\"img/{% static \"js/ol340.js\" %}\"></script>\n\n        {% endblock head %}\n    </head>\n    <body>\n    {% block body %}\n\n        {% block nav %}\n            <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n              <div class=\"container\">\n                <div class=\"navbar-header\">\n                  <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                  </button>\n                  <a class=\"navbar-brand\" href=\"#\">Indoor Project</a>\n                </div>\n                <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                  <ul class=\"nav navbar-nav\">\n                    <li><a href=\"#about\">About</a></li>\n                    <li><a href=\"#contact\">Contact</a></li>\n                  </ul>\n                </div><!--/.nav-collapse -->\n              </div>\n            </nav>\n        {% endblock nav %}\n\n    {% endblock body %}\n    </body>\n    </html>\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% load staticfiles %}\n\n    {% block title %}Simple route map{% endblock %}\n\n    {% block body %}\n\n    {{ block.super }}\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n          <div class=\"col-md-2\">\n            <div id=\"directions\" class=\"directions\">\n                <form>\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeStandard\" value=\"0\" checked>\n                        Standard Route\n                      </label>\n                    </div>\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeBarrierFree\" value=\"1\">\n                        Barrier Free Route\n                      </label>\n                    </div>\n                  <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n                    <br>\n                </form>\n\n            </div>\n          </div>\n          <div class=\"col-md-10\">\n            <div id=\"map\" class=\"map\"></div>\n          </div>\n\n        </div>\n    </div>\n\n        <script>\n\n               var routeUrl = '/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2&' + sel_Val2  + '/?format=json';\n\n              map.getLayers().push(new ol.layer.Vector({\n                        source: new ol.source.GeoJSON({url: routeUrl, crossDomain: true,}),\n                        style:  new ol.style.Style({\n                            stroke: new ol.style.Stroke({\n                              color: 'blue',\n                              width: 4\n                            })\n                          }),\n                        title: \"Route\",\n                        name: \"Route\"\n                    }));\n\n            });\n            var vectorLayer = new ol.layer.Vector({\n                            source: new ol.source.GeoJSON({url: geojs_url}),\n                            style:  new ol.style.Style({\n                                stroke: new ol.style.Stroke({\n                                  color: 'red',\n                                  width: 4\n                                })\n                              }),\n                            title: \"Route\",\n                            name: \"Route\"\n                        });\n\n            var map = new ol.Map({\n              layers: [\n                new ol.layer.Tile({\n                  source: new ol.source.OSM()\n                }),\n                vectorLayer\n              ],\n              target: 'map',\n              controls: ol.control.defaults({\n                attributionOptions: /** @type {olx.control.AttributionOptions} */ ({\n                  collapsible: false\n                })\n              }),\n              view: new ol.View({\n                center: [1587927.09817072,5879650.90059265],\n                zoom: 18\n              })\n            });\n\n            </script>\n\n    {% endblock body %}\n    ```", "```py\n    from django.shortcuts import render\n\n    def route_map(request):\n        return render(request, 'route-map.html')\n    ```", "```py\nvar geojs_url = \"http://localhost:8000/api/directions/1587898.414,5879564.080,1&1588005.547,5879736.039,2/?format=json\"\n```", "```py\nALTER TABLE geodata.ch08_e01_networklines ADD COLUMN total_cost double precision;\nALTER TABLE geodata.ch08_e02_networklines ADD COLUMN total_cost double precision;\n\nupdate geodata.networklines_3857 set total_cost = st_length(wkb_geometry)*88\nwhere type_id = 2;\n\nupdate geodata.networklines_3857 set total_cost = st_length(wkb_geometry)*1.8\nwhere type_id = 3;\n\n```", "```py\n    def create_route(request, start_coord, start_floor, end_coord, end_floor, route_type):\n            base_route_q = \"\"\"SELECT ogc_fid as id, source, target,\n                             total_cost AS cost,\n                             layer, type_id\n                             FROM geodata.networklines_3857\"\"\"\n\n            # set default query\n            barrierfree_q = \"WHERE 1=1\"\n            if route_type == \"1\":\n                # exclude all networklines of type stairs\n                barrierfree_q = \"WHERE type_id not in (3,4)\"\n\n            routing_query = '''\n                SELECT seq, id1 AS node, id2 AS edge,\n                  ST_Length(wkb_geometry) AS cost, layer,\n                  type_id, ST_AsGeoJSON(wkb_geometry) AS geoj\n                  FROM pgr_dijkstra('\n                    {normal} {type}', %s, %s, FALSE, FALSE\n                  ) AS dij_route\n                  JOIN  geodata.networklines_3857 AS input_network\n                  ON dij_route.id2 = input_network.ogc_fid ;\n              '''.format(normal=base_route_q, type=barrierfree_q)\n    ```", "```py\n    from django.conf.urls import patterns, url\n    from rest_framework.urlpatterns import format_suffix_patterns\n\n    urlpatterns = patterns('api.views',\n        #  ex valid call from to /api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2\n        url(r'^directions/(?P<start_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<start_floor>\\d+)&(?P<end_coord>[-]?\\d+\\.?\\d+,\\d+\\.\\d+),(?P<end_floor>\\d+)&(?P<route_type>[0-9])/$', 'create_route', name='directions'),\n\n    )\n\n    urlpatterns = format_suffix_patterns(urlpatterns)\n    ```", "```py\n    from django.shortcuts import render\n\n    def route_map(request, route_type = \"0\"):\n\n        return render(request, 'route-map.html', {'route_type': route_type})\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% load staticfiles %}\n\n    {% block title %}Simple route map{% endblock %}\n\n    {% block body %}\n\n    {{ block.super }}\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n          <div class=\"col-md-2\">\n            <div id=\"directions\" class=\"directions\">\n                <form>\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeStandard\" value=\"0\" checked>\n                        Standard Route\n                      </label>\n                    </div>\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeBarrierFree\" value=\"1\">\n                        Barrier Free Route\n                      </label>\n                    </div>\n                  <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n                    <br>\n                </form>\n\n            </div>\n          </div>\n          <div class=\"col-md-10\">\n            <div id=\"map\" class=\"map\"></div>\n          </div>\n\n        </div>\n    </div>\n\n        <script>\n            var url_base = \"/api/directions/\";\n            var start_coord = \"1587848.414,5879564.080,2\";\n            var end_coord =  \"1588005.547,5879736.039,2\";\n            var r_type = {{ route_type }};\n            var geojs_url = url_base + start_coord + \"&\" + end_coord + \"&\" + sel_Val + '/?format=json';\n            var sel_Val = $( \"input:radio[name=typeRoute]:checked\" ).val();\n\n            $( \".radio\" ).change(function() {\n               map.getLayers().pop();\n               var sel_Val2 = $( \"input:radio[name=typeRoute]:checked\" ).val();\n               var routeUrl = '/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2&' + sel_Val2  + '/?format=json';\n\n              map.getLayers().push(new ol.layer.Vector({\n                        source: new ol.source.GeoJSON({url: routeUrl, crossDomain: true,}),\n                        style:  new ol.style.Style({\n                            stroke: new ol.style.Stroke({\n                              color: 'blue',\n                              width: 4\n                            })\n                          }),\n                        title: \"Route\",\n                        name: \"Route\"\n                    }));\n\n            });\n            var vectorLayer = new ol.layer.Vector({\n                            source: new ol.source.GeoJSON({url: geojs_url}),\n                            style:  new ol.style.Style({\n                                stroke: new ol.style.Stroke({\n                                  color: 'red',\n                                  width: 4\n                                })\n                              }),\n                            title: \"Route\",\n                            name: \"Route\"\n                        });\n\n            var map = new ol.Map({\n              layers: [\n                new ol.layer.Tile({\n                  source: new ol.source.OSM()\n                }),\n                vectorLayer\n              ],\n              target: 'map',\n              controls: ol.control.defaults({\n                attributionOptions: /** @type {olx.control.AttributionOptions} */ ({\n                  collapsible: false\n                })\n              }),\n              view: new ol.View({\n                center: [1587927.09817072,5879650.90059265],\n                zoom: 18\n              })\n            });\n\n            </script>\n\n    {% endblock body %}\n    ```", "```py\n    ogr2ogr -a_srs EPSG:3857 -lco \"SCHEMA=geodata\" -lco \"COLUMN_TYPES=name=varchar,room_num=integer,floor=integer\" -nlt POLYGON -nln ch11_e01_roomdata -f PostgreSQL \"PG:host=localhost port=5432 user=saturn dbname=py_geoan_cb password=secret\" e01_room_data.shp\n\n    ```", "```py\n    ogr2ogr -a_srs EPSG:3857 -lco \"SCHEMA=geodata\" -lco \"COLUMN_TYPES=name=varchar,room_num=integer,floor=integer\" -nlt POLYGON -nln ch11_e02_roomdata -f PostgreSQL \"PG:host=localhost port=5432 user=saturn dbname=py_geoan_cb password=secret\" e02_room_data.shp\n\n    ```", "```py\n    CREATE OR REPLACE VIEW  geodata.search_rooms_v AS\n    SELECT floor, wkb_geometry, room_num FROM geodata.ch11_e01_roomdata \n    UNION\n    SELECT floor, wkb_geometry, room_num FROM geodata.ch11_e02_roomdata ;\n    ALTER TABLE geodata.search_rooms_v OWNER TO saturn;\n\n    ```", "```py\n        url(r'^directions/(?P<start_room_num>\\d{5})&(?P<end_room_num>\\d{5})&(?P<route_type>[0-9])/$', 'route_room_to_room', name='route-room-to-room'),\n        url(r'^directions/(?P<room_num>\\d{5})/$', 'get_room_centroid_node', name='room-center'),\n    ```", "```py\n    def get_room_centroid_node(room_number):\n        '''\n        Find the room center point coordinates\n        and find the closest route node point\n        :param room_number: integer value of room number\n        :return: Closest route node to submitted room number\n        '''\n\n        room_center_q = \"\"\"SELECT  floor,\n                ST_asGeoJSON(st_centroid(wkb_geometry))\n                AS geom FROM geodata.search_rooms_v\n                WHERE room_num = %s;\"\"\"\n\n        cur = connection.cursor()\n        cur.execute(room_center_q, (room_number,))\n\n        res = cur.fetchall()\n\n        res2 = res[0]\n\n        room_floor = res2[0]\n        room_geom_x = json.loads(res2[1])\n        room_geom_y = json.loads(res2[1])\n\n        x_coord = float(room_geom_x['coordinates'][0])\n        y_coord = float(room_geom_y['coordinates'][1])\n\n        room_node = find_closest_network_node(x_coord, y_coord, room_floor)\n        try:\n            return room_node\n        except:\n            logger.error(\"error get room center \" + str(room_node))\n            logger.error(traceback.format_exc())\n            return {'error': 'error get room center'}\n    ```", "```py\n    def run_route(start_node_id, end_node_id, route_type):\n        '''\n\n        :param start_node_id:\n        :param end_node_id:\n        :param route_type:\n        :return:\n        '''\n\n        cur = connection.cursor()\n        base_route_q = \"\"\"SELECT ogc_fid AS id, source, target,\n                         total_cost AS cost,\n                         layer, type_id\n                         FROM geodata.networklines_3857\"\"\"\n\n        # set default query\n        barrierfree_q = \"WHERE 1=1\"\n        if route_type == \"1\":\n            # exclude all networklines of type stairs\n            barrierfree_q = \"WHERE type_id not in (3,4)\"\n\n        routing_query = '''\n            SELECT seq, id1 AS node, id2 AS edge,\n              ST_Length(wkb_geometry) AS cost, layer,\n              type_id, ST_AsGeoJSON(wkb_geometry) AS geoj\n              FROM pgr_dijkstra('\n                {normal} {type}', %s, %s, FALSE, FALSE\n              ) AS dij_route\n              JOIN  geodata.networklines_3857 AS input_network\n              ON dij_route.id2 = input_network.ogc_fid ;\n          '''.format(normal=base_route_q, type=barrierfree_q)\n\n        # run our shortest path query\n        if start_node_id or end_node_id:\n            cur.execute(routing_query, (start_node_id, end_node_id))\n        else:\n            logger.error(\"start or end node is None \"\n                         + str(start_node_id))\n            return HttpResponseNotFound('<h1>Sorry NO start or end node'\n                                        ' found within 200m</h1>')\n\n        # get entire query results to work with\n        route_segments = cur.fetchall()\n\n        # empty list to hold each segment for our GeoJSON output\n        route_result = []\n\n        # loop over each segment in the result route segments\n        # create the list of our new GeoJSON\n        for segment in route_segments:\n            seg_cost = segment[3]  # cost value\n            layer_level = segment[4]  # floor number\n            seg_type = segment[5]\n            geojs = segment[6]  # geojson coordinates\n            geojs_geom = loads(geojs)  # load string to geom\n            geojs_feat = Feature(geometry=geojs_geom,\n                                 properties={'floor': layer_level,\n                                             'length': seg_cost,\n                                             'type_id': seg_type})\n            route_result.append(geojs_feat)\n\n        # using the geojson module to create our GeoJSON Feature Collection\n        geojs_fc = FeatureCollection(route_result)\n\n        return geojs_fc\n    ```", "```py\n    @api_view(['GET', 'POST'])\n    def route_room_to_room(request, start_room_num, end_room_num, route_type):\n        '''\n        Generate a GeoJSON route from room number\n        to room number\n        :param request: GET or POST request\n        :param start_room_num: an integer room number\n        :param end_room_num: an integer room number\n        :param route_type: an integer room type\n        :return: a GeoJSON linestring of the route\n        '''\n\n        if request.method == 'GET' or request.method == 'POST':\n\n            start_room = int(start_room_num)\n            end_room = int(end_room_num)\n\n            start_node_id = get_room_centroid_node(start_room)\n            end_node_id = get_room_centroid_node(end_room)\n\n            res = run_route(start_node_id, end_node_id, route_type)\n\n            try:\n                return Response(res)\n            except:\n                logger.error(\"error exporting to json model: \" + str(res))\n                logger.error(traceback.format_exc())\n                return Response({'error': 'either no JSON or no key params in your JSON'})\n        else:\n            return HttpResponseNotFound('<h1>Sorry not a GET or POST request</h1>')\n    ```", "```py\n        url(r'^rooms/$', 'room_list', name='room-list'),\n    ```", "```py\n    @api_view(['GET', 'POST'])\n    def room_list(request):\n        '''\n        http://localhost:8000/api/rooms\n        :param request: no parameters GET or POST\n        :return: JSON Array of room numbers\n        '''\n        cur = connection.cursor()\n        if request.method == 'GET' or request.method == 'POST':\n\n            room_query = \"\"\"SELECT room_num FROM geodata.search_rooms_v\"\"\"\n\n            cur.execute(room_query)\n            room_nums = cur.fetchall()\n\n            room_num_list = []\n            for x in room_nums:\n                v = x[0]\n                room_num_list.append(v)\n\n            try:\n                return Response(room_num_list)\n            except:\n                logger.error(\"error exporting to json model: \" + str(room_num_list))\n                logger.error(traceback.format_exc())\n                return Response({'error': 'either no JSON or no key params in your JSON'})\n    ```", "```py\n    {% load staticfiles %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        {% block head %}\n\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"description\" content=\"Sample Map\">\n        <meta name=\"author\" content=\"Michael Diener\">\n        <meta charset=\"UTF-8\">\n\n        <title>{% block title %}Default Title{% endblock %}</title>\n\n        <script src=\"img/{% static \"js/jquery-1.11.2.min.js\" %}\"></script>\n        <link rel=\"stylesheet\" href=\"{% static \"css/bootstrap.min.css\" %}\">\n        <script src=\"img/{% static \"js/bootstrap.min.js\" %}\"></script>\n        <link rel=\"stylesheet\" href=\"{% static \"css/ol.css\" %}\" type=\"text/css\">\n        <link rel=\"stylesheet\" href=\"{% static \"css/custom-layout.css\" %}\" type=\"text/css\">\n        <script src=\"img/{% static \"js/ol340.js\" %}\"></script>\n\n        {% endblock head %}\n    </head>\n    <body>\n    {% block body %}\n\n        {% block nav %}\n            <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n              <div class=\"container\">\n                <div class=\"navbar-header\">\n                  <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n                    <span class=\"sr-only\">Toggle navigation</span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                  </button>\n                  <a class=\"navbar-brand\" href=\"http://www.indrz.com\" target=\"_blank\">Indoor Project</a>\n                </div>\n                <div id=\"navbar\" class=\"collapse navbar-collapse\">\n                  <ul class=\"nav navbar-nav\">\n                    <li><a href=\"#about\" target=\"_blank\">About</a></li>\n                    <li><a href=\"https://github.com/mdiener21/\" target=\"_blank\">Contact</a></li>\n                  </ul>\n                </div><!--/.nav-collapse -->\n              </div>\n            </nav>\n        {% endblock nav %}\n\n    {% endblock body %}\n    </body>\n    </html>\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% load staticfiles %}\n\n    {% block title %}Simple route map{% endblock %}\n\n    {% block head %}\n    {{ block.super }}\n        <script src=\"img/{% static \"js/bloodhound.min.js\" %}\"></script>\n        <script src=\"img/{% static \"js/typeahead.bundle.min.js\" %}\"></script>\n    {% endblock head %}\n\n    {% block body %}\n\n    {{ block.super }}\n\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n          <div class=\"col-md-2\">\n            <div id=\"directions\" class=\"directions\">\n                <form id=\"submitForm\">\n                  <div id=\"rooms-prefetch\" class=\"form-group\">\n                    <label for=\"route-to\">Route From:</label>\n                    <input type=\"text\" class=\"typeahead form-control\" id=\"route-to\" placeholder=\"Enter Room Number\">\n                  </div>\n                  <div id=\"rooms-prefetch\" class=\"form-group\">\n                    <label for=\"route-from\">Route To:</label>\n                    <input type=\"text\" class=\"typeahead form-control\" id=\"route-from\" placeholder=\"Enter Room Number\">\n                  </div>\n\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeStandard\" value=\"0\" checked>\n                        Standard Route\n                      </label>\n                    </div>\n                    <div class=\"radio\">\n                      <label>\n                        <input type=\"radio\" name=\"typeRoute\" id=\"routeTypeBarrierFree\" value=\"1\">\n                        Barrier Free Route\n                      </label>\n                    </div>\n                  <button id=\"enterRoute\" type=\"submit\" class=\"btn btn-default\">Go !</button>\n                    <br>\n                </form>\n\n            </div>\n          </div>\n          <div class=\"col-md-10\">\n            <div id=\"map\" class=\"map\"></div>\n          </div>\n\n        </div>\n    </div>\n\n    <script>  {% include 'routing.js' %} </script>\n\n    <script>\n        var roomNums = new Bloodhound({\n          datumTokenizer: Bloodhound.tokenizers.whitespace,\n          queryTokenizer: Bloodhound.tokenizers.whitespace,\n          prefetch: 'http://localhost:8000/api/rooms/?format=json'\n        });\n\n        // passing in `null` for the `options` arguments will result in the default\n        // options being used\n        $('#rooms-prefetch .typeahead').typeahead(null, {\n          name: 'countries',\n            limit: 100,\n          source: roomNums\n        });\n\n        $( \"#submitForm\" ).submit(function( event ) {\n        {#  alert( \"Handler for .submit() called.\"  );#}\n            var startNum = $('#route-from').val();\n            var endNum = $('#route-to').val();\n            var rType = $( \"input:radio[name=typeRoute]:checked\" ).val();\n             addRoute(startNum, endNum, rType);\n          event.preventDefault();\n        });\n\n    </script>\n\n    {% endblock body %}\n    ```", "```py\n            var url_base = \"/api/directions/\";\n            var start_coord = \"1587848.414,5879564.080,2\";\n            var end_coord =  \"1588005.547,5879736.039,2\";\n            var sel_Val = $( \"input:radio[name=typeRoute]:checked\" ).val();\n            var geojs_url = url_base + start_coord + \"&\" + end_coord + \"&\" + sel_Val + '/?format=json';\n\n    // uncomment this code if you want to reactivate\n    // the quick static demo switcher\n            //$( \".radio\" ).change(function() {\n            //   map.getLayers().pop();\n            //   var sel_Val2 = $( \"input:radio[name=typeRoute]:checked\" ).val();\n            //   var routeUrl = '/api/directions/1587848.414,5879564.080,2&1588005.547,5879736.039,2&' + sel_Val2  + '/?format=json';\n            //\n            //  map.getLayers().push(new ol.layer.Vector({\n            //            source: new ol.source.GeoJSON({url: routeUrl}),\n            //            style:  new ol.style.Style({\n            //                stroke: new ol.style.Stroke({\n            //                  color: 'blue',\n            //                  width: 4\n            //                })\n            //              }),\n            //            title: \"Route\",\n            //            name: \"Route\"\n            //        }));\n            //\n            //});\n\n            var vectorLayer = new ol.layer.Vector({\n                            source: new ol.source.GeoJSON({url: geojs_url}),\n                            style:  new ol.style.Style({\n                                stroke: new ol.style.Stroke({\n                                  color: 'red',\n                                  width: 4\n                                })\n                              }),\n                            title: \"Route\",\n                            name: \"Route\"\n                        });\n\n            var map = new ol.Map({\n              layers: [\n                new ol.layer.Tile({\n                  source: new ol.source.OSM()\n                })\n                  ,\n                vectorLayer\n              ],\n              target: 'map',\n              controls: ol.control.defaults({\n                attributionOptions: /** @type {olx.control.AttributionOptions} */ ({\n                  collapsible: false\n                })\n              }),\n              view: new ol.View({\n                center: [1587927.09817072,5879650.90059265],\n                zoom: 18\n              })\n            });\n\n    function addRoute(fromNumber, toNumber, routeType) {\n        map.getLayers().pop();\n        console.log(\"addRoute big\"+ String(fromNumber));\n        var baseUrl = 'http://localhost:8000/api/directions/';\n        var geoJsonUrl = baseUrl + fromNumber + '&' + toNumber + '&' + routeType +'/?format=json';\n        console.log(\"final url \" + geoJsonUrl);\n        map.getLayers().push(new ol.layer.Vector({\n                    source: new ol.source.GeoJSON({url: geoJsonUrl}),\n                    style:  new ol.style.Style({\n                        stroke: new ol.style.Stroke({\n                          color: 'purple',\n                          width: 4\n                        })\n                      }),\n                    title: \"Route\",\n                    name: \"Route\"\n                }));\n        }\n    ```"]