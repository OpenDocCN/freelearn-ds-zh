["```py\npip install numpy\n```", "```py\npip install scipy\n```", "```py\nimport numpy as np\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nfrom scipy.special import hermite\n```", "```py\nfrom math import factorial\n```", "```py\ndef N(v):\n  return 1./np.sqrt(np.sqrt(np.pi)*2**v*factorial(v))\n```", "```py\ndef Psi(v, x):\n  return N(v)*hermite(v)(x)*np.exp(-0.5*x**2)\n```", "```py\ndef plot(n):\n  fig, ax = plt.subplots(figsize=(n,n))\n  # Range of x\n  xmax = np.sqrt(2*n+1)\n  x = np.linspace(-xmax, xmax, 1000)\n  for v in range(n):\n\n    # plot potential energy function 0.5*x**2\n    ax.plot(x,0.5*x**2,color='black')\n\n    # plot spatial probabilities psi squared for each energy level\n    ax.plot(x,Psi(v,x)**2 + v + 0.5)\n\n    # add lines and labels\n    ax.axhline(v + 0.5, color='gray', linestyle='-') \n    ax.text(xmax, 1.2*(v+0.5), f”v={v}”)\n\n  ax.set_xlabel('x')\n  ax.set_ylabel('$|\\psi_v(x)|^2$')\n```", "```py\ndef Frot(J, Be, De, He, show=False):\n  F = Be*J*(J+1) + De*J**2*(J+1)**2 - He*J*3*(J+1)**3*10e-5\n  if show:\n    print(“{} {:.2f}”.format(J, F))\n  return F\n```", "```py\n#      v   E(v,J=0)    Ee          Be         De        He      rms\nrov = {0: (36118.0696, 0.0,        59.33289, 0.045498, 4.277, 3.4), \n       1: (31956.9034, 4161.1693,  56.37318, -0.043961, 4.168, 3.2),\n       2: (28031.0670, 8087.0058,  53.47892, -0.042523, 4.070, 3.2),\n       3: (24335.6787, 11782.3940, 50.62885, -0.041175, 3.963, 3.2),\n       4: (20867.7039, 15250.3688, 47.79997, -0.039927, 3.846, 3.2),\n       5: (17626.1400, 18491.9328, 44.96596, -0.038795, 3.717, 3.2),\n       6: (14612.2901, 21505.7826, 42.09566, -0.037808, 3.571, 3.1),\n       7: (11830.1543, 24287.9184, 39.15105, -0.037004, 3.399, 3.1),\n       8: (9286.9790,  26831.0937, 36.08416, -0.036451, 3.187, 3.1),\n       9: (6994.0292,  29124.0436, 32.83233, -0.036251, 2.902, 3.2)}\n```", "```py\nprint(“v  E(v,J=0)    E(v,J=1)    BO Diff.”)\nfor v in range(10):\n    E0 = rov[v][0] - Frot(0, rov[v][2], rov[v][3], rov[v][4])\n    E1 = rov[v][0] - Frot(1, rov[v][2], rov[v][3], rov[v][4])\n    print(“{}  {:.4f}  {:.4f}  {:.4f}”.format(v, E0, E1, E0 - E1))\n```", "```py\nimport psi4\n```", "```py\npsi4.core.set_output_file('psi_CO2_output.txt', False)\n```", "```py\npsi4.set_memory('500 MB')\n```", "```py\nco2 = psi4.geometry(“””\nsymmetry c1\n0 1\nC 1.6830180 -0.4403696 3.1117942\nO 0.5425545 -0.2216001 2.9779653\nO 2.8186228 -0.6587208 3.2810031\nunits angstrom\n“””)\n```", "```py\npsi4.set_options({'reference': 'rhf'})\npsi4.optimize('scf/cc-pvdz', molecule=co2)\n```", "```py\nOptimizer: Optimization complete!\n-187.65250930298149\n```", "```py\nscf_e, scf_wfn = psi4.frequency('scf/cc-pvdz', molecule=co2, return_wfn=True)\n```", "```py\nfor i in range(4):\n    print(scf_wfn.frequencies().get(0,i))\n```"]