- en: Chapter 1. Preparing to Build Your Own GIS Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 准备构建自己的GIS应用程序
- en: You are here because you love Python programming and are interested in making
    your own **Geographic Information Systems** (**GIS**) application. You want to
    create a desktop application, in other words, a user interface, that helps you
    or others create, process, analyze, and visualize geographic data. This book will
    be your step-by-step guide toward that goal.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里是因为你喜欢Python编程，并且对制作自己的**地理信息系统（GIS**）应用程序感兴趣。你希望创建一个桌面应用程序，换句话说，一个用户界面，帮助你或其他人创建、处理、分析和可视化地理数据。这本书将是你实现这一目标的逐步指南。
- en: We assume that you are someone who enjoys programming and being creative but
    are not necessarily a computer science guru, Python expert, or seasoned GIS analyst.
    To successfully proceed with this book, it is recommended that you have a basic
    introductory knowledge of Python programming that includes classes, methods, and
    the **Tkinter** toolkit, as well as some core GIS concepts. If you are a newcomer
    to some of these, we will still cover some of the basics, but you will need to
    have the interest and ability to follow along at a fast pace.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你是一个喜欢编程和富有创造力的人，但并不一定是计算机科学专家、Python专家或经验丰富的GIS分析师。为了成功地继续阅读这本书，建议你具备Python编程的基本入门知识，包括类、方法和**Tkinter**工具包，以及一些核心GIS概念。如果你是这些领域的初学者，我们仍会介绍一些基础知识，但你需要有兴趣和能力以较快的速度跟上。
- en: 'In this introductory chapter, you will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章介绍中，你将涵盖以下内容：
- en: Learn some of the benefits of creating a GIS application from scratch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解从头创建GIS应用程序的一些好处
- en: Set up your computer, so you can follow the book instructions.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的计算机，以便你可以遵循本书的说明。
- en: Become familiar with the roadmap toward creating our application.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉创建我们应用程序的路线图。
- en: Why reinvent the wheel?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么重新发明轮子？
- en: The first step in preparing ourselves for this book is in convincing ourselves
    why we want to make our own GIS application, as well as to be clear about our
    motives. Spatial analysis and GIS have been popular for decades and there is plenty
    of GIS software out there, so why go through the trouble of reinventing the wheel?
    Firstly, we aren't really reinventing the wheel, since Python can be extended
    with plenty of third-party libraries that take care of most of our geospatial
    needs (more on that later).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为这本书做准备的第一步是说服自己为什么我们要制作自己的GIS应用程序，以及要清楚我们的动机。空间分析和GIS已经流行了几十年，市面上有大量的GIS软件，那么为什么还要费劲去重新发明轮子呢？首先，我们并不是真的在重新发明轮子，因为Python可以通过大量的第三方库来扩展，这些库可以满足我们大部分的地理空间需求（关于这一点稍后还会详细介绍）。
- en: For me, the main motivation stems from the problem that most of today's GIS
    applications are aimed at highly capable and technical users who are well-versed
    in GIS or computer science, packed with a dizzying array of buttons and options
    that will scare off many an analyst. We believe that there is a virtue in trying
    to create a simpler and more user-friendly software for beginner GIS users or
    even the broader public, without having to start completely from scratch. This
    way, we also add more alternatives for users to choose from, as supplements to
    the current GIS market dominated by a few major giants, notably ArcGIS and QGIS,
    but also others such as GRASS, uDig, gvSIG, and more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我来说，主要的动机源于这样一个问题：如今的大多数GIS应用程序都是针对那些对GIS或计算机科学非常精通、技术能力很强的用户，它们配备了令人眼花缭乱的按钮和选项，这可能会吓跑许多分析师。我们相信，尝试为初学者GIS用户或更广泛的公众创建一个更简单、更用户友好的软件是有价值的，而不必完全从头开始。这样，我们也为用户提供了更多的选择，作为补充当前由少数几个主要巨头（如ArcGIS和QGIS）主导的GIS市场，以及其他如GRASS、uDig、gvSIG等。
- en: 'Another particularly exciting reason to create your own GIS from scratch is
    to make your own domain-specific special purpose software for any task you can
    imagine, whether it is a water flow model GIS, an ecological migrations GIS, or
    even a GIS for kids. Such specialized tasks that would usually require many arduous
    steps in an ordinary GIS, could be greatly simplified into a single button and
    accompanied with suitable functionality, design layout, icons, and colors. One
    such example is the **Crime Analytics for Space-Time** (**CAST**) software produced
    by the GeoDa Center at Arizona State University, seen in the following picture:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始创建自己的GIS的一个特别令人兴奋的原因是，您可以为自己想象中的任何任务创建专门的领域特定软件，无论是水流模型GIS、生态迁徙GIS，甚至是儿童GIS。通常在普通GIS中需要许多繁琐步骤的这些专门任务，可以大大简化为一个按钮，并附带适当的功能、设计布局、图标和颜色。以下是一个例子，即亚利桑那州立大学GeoDa中心生产的**时空犯罪分析软件**（**CAST**），如图所示：
- en: '![Why reinvent the wheel?](img/5407OS_01_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![为什么要重新发明轮子？](img/5407OS_01_01.jpg)'
- en: Also, by creating your GIS from scratch, it is possible to have greater control
    of the size and portability of your application. This can enable you to go small—letting
    your application have faster startup time, and travel the Internet or on a USB-stick
    easily. Although storage space itself is not as much of an issue these days, from
    a user's perspective, installing a 200 MB application is still a greater psychological
    investment with a greater toll in terms of willingness to try it than a mere 30
    MB application (all else being equal). This is particularly true in the realm
    of smartphones and tablets, a very exciting market for special-purpose geospatial
    apps. While the specific application we make in this book will not be able to
    run on iOS or Android devices, it will run on Windows 8-based hybrid tablets,
    and can be rebuilt around a different GUI toolkit in order to support iOS or Android
    (we will mention some very brief suggestions for this in [Chapter 8](ch08.html
    "Chapter 8. Looking Forward"), *Looking Forward*).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，通过从头开始创建自己的GIS，您可以更好地控制应用程序的大小和便携性。这可以使您的应用程序更小巧——让应用程序具有更快的启动时间，并轻松在互联网或USB闪存驱动器上运行。尽管存储空间本身在今天并不是一个大问题，但从用户的角度来看，安装一个200
    MB的应用程序仍然是一个更大的心理投资，其尝试意愿的代价比一个30 MB的应用程序（其他条件相同）要高得多。这在智能手机和平板电脑领域尤其如此，这是一个非常令人兴奋的专用地理空间应用程序市场。虽然本书中我们制作的特定应用程序无法在iOS或Android设备上运行，但它可以在基于Windows
    8的混合平板电脑上运行，并且可以围绕不同的GUI工具包进行重建，以支持iOS或Android（我们将在第8章[展望未来](ch08.html "Chapter 8. Looking
    Forward")中简要提及一些建议）。 '
- en: Finally, the utility and philosophy of free and open source software may be
    an important motivation for some of you. Many people today, learn to appreciate
    open source GIS after losing access to subscription-based applications like ArcGIS
    when they complete their university education or change their workplace. By developing
    your own open source GIS application and sharing with others, you can contribute
    back to and become part of the community that once helped you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，免费和开源软件的实用性和哲学可能是一些人的重要动机。今天，许多人是在完成大学教育或更换工作后失去了对基于订阅的应用程序（如ArcGIS）的访问后，才开始欣赏开源GIS的。通过开发自己的开源GIS应用程序并与他人分享，您可以回馈社区，并成为曾经帮助过您的社区的一部分。
- en: Setting up your computer
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的计算机
- en: In this book, we follow steps on how to make an application that is developed
    in a Windows environment. This does not mean that the application cannot be developed
    on Mac OS X or Linux, but those platforms may have slightly different installation
    instructions and may require compiling of the binary code that is outside the
    scope of this book. Therefore, we leave that choice up to the reader. In this
    book, which focuses on Windows, we avoid the problem of compiling it altogether,
    using precompiled versions where possible (more on this later).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们遵循在Windows环境中开发应用程序的步骤。这并不意味着应用程序不能在Mac OS X或Linux上开发，但这些平台可能具有略微不同的安装说明，可能需要编译本书范围之外的二进制代码。因此，我们将选择权留给读者。在本书中，我们专注于Windows，我们尽可能避免编译问题，使用预编译版本（关于这一点将在后面详细介绍）。
- en: 'The development process itself will be done using Python 2.7, specifically
    the 32-bit version, though 64-bit can theoretically be used as well (note that
    this is the bit version of your Python installation and has nothing to do with
    the bit version of your operating system). Although there exists many newer versions,
    version 2.7 is the most widely supported in terms of being able to use third-party
    packages. It has also been reported that the version 2.7 will continue to be actively
    developed and promoted until the year 2020\. It will still be possible to use
    after support has ended. If you do not already have version 2.7, install it now,
    by following these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 开发过程本身将使用Python 2.7，特别是32位版本，尽管理论上也可以使用64位（注意，这是你的Python安装的位版本，与你的操作系统的位版本无关）。尽管存在许多更新的版本，但2.7版本在能够使用第三方包方面是最广泛支持的。据报道，版本2.7将继续到2020年积极开发和推广。即使在支持结束后，仍然可以使用。如果你还没有2.7版本，现在就按照以下步骤安装它：
- en: Go to [https://www.python.org/](https://www.python.org/).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[Python官网](https://www.python.org/)。
- en: Under **Downloads** click on download the latest 32-bit version of Python 2.7
    for Windows, which at the time of this writing is Python 2.7.9.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**下载**下点击下载Windows的最新32位Python 2.7版本，在撰写本文时是Python 2.7.9。
- en: Download and run the installation program.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并运行安装程序。
- en: For the actual code writing and editing, we will be using the built-in **Python
    Interactive Development Environment** (**IDLE**), but you may of course use any
    code editor you want. The IDLE lets you write long scripts that can be saved to
    files and offers an interactive shell window to execute one line at a time. There
    should be a desktop or start-menu link to Python IDLE after installing Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际的代码编写和编辑，我们将使用内置的**Python交互式开发环境**（**IDLE**），但你当然可以使用任何你想要的代码编辑器。IDLE让你可以编写可以保存到文件的长时间脚本，并提供一个交互式shell窗口来逐行执行。安装Python后，应该有一个指向Python
    IDLE的桌面或开始菜单链接。
- en: Installing third-party packages
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方包
- en: In order to make our application, we will have to rely on the rich and varied
    ecosystem of third-party packages that already exists for GIS usage.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作我们的应用程序，我们必须依赖现有的丰富多样的第三方GIS使用包生态系统。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The Python Package Index** (**PyPI**) website currently lists more than 240
    packages tagged **Topic :: Scientific/Engineering :: GIS**. For a less overwhelming
    overview of the more popular GIS-related Python libraries, check out the catalogue
    at the *Python-GIS-Resources* website created by the author:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python包索引**（**PyPI**）网站目前列出了超过240个标记为**Topic :: Scientific/Engineering ::
    GIS**的包。为了更轻松地了解更受欢迎的GIS相关Python库的概述，请查看作者创建的*Python-GIS-Resources*网站上的目录：'
- en: '[http://pythongisresources.wordpress.com/](http://pythongisresources.wordpress.com/)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python GIS资源](http://pythongisresources.wordpress.com/)'
- en: We will have to define which packages to use and install, and this depends on
    the type of application we are making. What we want to make in this book is a
    lightweight, highly portable, extendable, and general-purpose GIS application.
    For these reasons, we avoid heavy packages like GDAL, NumPy, Matplotlib, SciPy,
    and Mapnik (weighing in at about 30 MB each or about 150-200 MB if we combine
    them all together). Instead, we focus on lighter third-party packages specialized
    for each specific functionality.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不定义要使用和安装哪些包，这取决于我们正在制作的应用程序类型。在这本书中，我们想要制作的是一个轻量级、高度便携、可扩展和通用目的的GIS应用程序。出于这些原因，我们避免使用像GDAL、NumPy、Matplotlib、SciPy和Mapnik（每个大约30MB，如果我们将它们全部组合起来大约是150-200MB）这样的沉重包。相反，我们专注于为每个特定功能专门设计的较轻的第三方包。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Dropping these heavy packages is a bold decision, as they contain a lot of functionality,
    and are reliable, efficient, and a dependency for many other packages. If you
    decide that you want to use them in an application where size is not an issue,
    you may want to begin now by installing the multipurpose NumPy and possibly SciPy,
    both of which have easy-to-use installers from their official websites. The other
    heavy packages will be briefly revisited in later chapters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 放弃这些沉重的包是一个大胆的决定，因为它们包含了很多功能，并且是可靠、高效的，也是许多其他包的依赖。如果你决定想在大小不是问题的情况下使用它们，你可能现在就可以开始安装多功能的NumPy和可能还有SciPy，它们都从它们的官方网站提供了易于使用的安装程序。其他沉重的包将在后面的章节中简要回顾。
- en: Specific installation instructions are given for each package in the chapter
    where they are relevant (see the following table for an overview) so that if you
    do not want certain functionalities, you can ignore those installations. Due to
    our focus to make a basic and lightweight application, we will only be installing
    a small number of packages. However, we will provide suggestions throughout the
    book about other relevant packages that you may wish to add later on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包在其相关的章节中都有具体的安装说明（见下表以获取概述），这样如果您不想使用某些功能，可以忽略这些安装。由于我们专注于创建一个基本且轻量级的应用程序，我们将只安装少量包。然而，本书中我们将提供关于其他可能希望稍后添加的相关包的建议。
- en: '| Chapter | Installation | Purpose |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 章节 | 安装 | 目的 |'
- en: '| --- | --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | Python |   |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Python |   |'
- en: '| 1 | PIL | Raster data, management, and analysis |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 1 | PIL | 栅格数据、管理和分析 |'
- en: '| 1 | Shapely | Vector management and analysis |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Shapely | 向量管理和分析 |'
- en: '| 2 | PyShp | Data |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 2 | PyShp | 数据 |'
- en: '| 2 | PyGeoj | Data |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 2 | PyGeoj | 数据 |'
- en: '| 2 | Rtree | Vector data speedup |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Rtree | 向量数据加速 |'
- en: '| 4 | PyAgg | Visualization |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 4 | PyAgg | 可视化 |'
- en: '| 7 | Py2exe | Application distribution |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 7 | Py2exe | 应用程序分发 |'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The typical way to install Python packages is using `pip` (included with Python
    2.7), which downloads and installs packages directly from the Python Package Index
    website. `Pip` is used in the following way:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python包的典型方法是使用`pip`（包含在Python 2.7中），它直接从Python包索引网站下载和安装包。`Pip`的使用方式如下：
- en: Step 1—open your operating system's command line (not the Python IDLE). On Windows,
    this is done by searching your system for `cmd.exe` and running it.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步——打开您操作系统的命令行（不是Python IDLE）。在Windows上，这可以通过在系统中搜索`cmd.exe`并运行它来完成。
- en: Step 2—in the black screen window that pops up, one simply types `pip install
    packagename`. This will only work if `pip` is on your system's environment path.
    If this is not the case, a quick fix is to simply type the full path to the `pip`
    script `C:\Python27\Scripts\pip` instead of just `pip`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二步——在弹出的黑色屏幕窗口中，只需输入`pip install packagename`。如果`pip`在您的系统环境路径上，这将有效。如果不是这种情况，一个快速的解决办法是直接输入`pip`脚本的完整路径`C:\Python27\Scripts\pip`而不是仅仅输入`pip`。
- en: For C or C++ based packages, it is becoming increasingly popular to make them
    available as precompiled **wheel** files ending in `.whl`, which has caused some
    confusion on how to install them. Luckily, we can use `pip` to install these wheel
    files as well, by simply downloading the wheel and pointing `pip` to its file
    path.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于C或C++的包，将它们作为以`.whl`结尾的预编译**wheel**文件提供变得越来越流行，这导致了一些关于如何安装它们的混淆。幸运的是，我们可以使用`pip`来安装这些wheel文件，只需下载wheel并将其文件路径指向`pip`即可。
- en: 'Since some of our dependencies have multiple purposes and are not unique to
    just one chapter, we will install these ones now. One of them is the **Python
    Imaging Library** (**PIL**), which we will use for the raster data model and for
    visualization. Let''s go ahead and install PIL for Windows now:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的某些依赖项具有多个用途，并不局限于某一章节，我们将现在安装这些依赖项。其中之一是**Python图像库**（**PIL**），我们将用它来进行栅格数据模型和可视化。让我们现在为Windows安装PIL：
- en: Go to [https://pypi.python.org/pypi/Pillow/2.6.1](https://pypi.python.org/pypi/Pillow/2.6.1).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://pypi.python.org/pypi/Pillow/2.6.1](https://pypi.python.org/pypi/Pillow/2.6.1).
- en: Click on the latest `.exe` file link for our 32-bit Python 2.7 environment to
    download the PIL installer, which is currently `Pillow-2.6.1.win32-py2.7.exe`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们32位Python 2.7环境的最新`.exe`文件链接以下载PIL安装程序，当前为`Pillow-2.6.1.win32-py2.7.exe`。
- en: Run the installation file.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装文件。
- en: Open the IDLE interactive shell and type `import PIL` to make sure it was installed
    correctly.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE交互式外壳，并输入`import PIL`以确保它已正确安装。
- en: 'Another central package we will be using is Shapely, used for location testing
    and geometric manipulation. To install it on Windows, perform the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用另一个核心包Shapely，用于位置测试和几何操作。要在Windows上安装它，请执行以下步骤：
- en: Go to [http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely](http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely](http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely)。
- en: Download the Shapely wheel file that fits our system, looking something like
    `Shapely‑1.5.7‑cp27‑none‑win32.whl`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适合我们系统的Shapely wheel文件，看起来像`Shapely-1.5.7-cp27-none-win32.whl`。
- en: As described earlier, open a command line window and type `C:\Python27\Scripts\pip
    install path\to\Shapely‑1.5.7‑cp27‑none‑win32.whl` to unpack the precompiled binaries.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，打开命令行窗口，输入 `C:\Python27\Scripts\pip install path\to\Shapely‑1.5.7‑cp27‑none‑win32.whl`
    以解压预编译的二进制文件。
- en: To make sure it was installed correctly, open the IDLE interactive shell and
    type `import shapely`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保安装正确，打开 IDLE 交互式外壳，并输入 `import shapely`。
- en: Imagining the roadmap ahead
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来的路线图
- en: Before we begin developing our application, it is important that we create a
    vision of how we want to structure our application. In Python terms, we will be
    creating a multilevel package with various subpackages and submodules to take
    care of different parts of our functionality, independently of any user interface.
    Only on top of this underlying functionality do we create the visual user interface
    as a way to access and run that underlying code. This way, we build a solid system,
    and allow power-users to access all the same functionality via Python scripting
    for greater automation and efficiency, as exists for ArcGIS and QGIS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发应用程序之前，重要的是我们要构想出我们希望如何构建我们的应用程序。在 Python 术语中，我们将创建一个多层包，包含各种子包和子模块，以独立于任何用户界面来处理我们功能的不同部分。我们只在底层功能之上创建可视用户界面，作为访问和运行底层代码的方式。这样，我们构建了一个坚实的系统，并允许高级用户通过
    Python 脚本访问所有相同的功能，以实现更大的自动化和效率，就像在 ArcGIS 和 QGIS 中一样。
- en: 'To setup the main Python package behind our application, create a new folder
    called `pythongis` anywhere on your computer. For Python to be able to interpret
    the folder `pythongis` as an importable package, it needs to find a file named
    `__init__.py` in that folder. Perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置我们应用程序背后的主要 Python 包，在您的计算机上的任何位置创建一个名为 `pythongis` 的新文件夹。为了 Python 能够将文件夹
    `pythongis` 解释为可导入的包，它需要在那个文件夹中找到一个名为 `__init__.py` 的文件。执行以下步骤：
- en: Open **Python IDLE** from the Windows start menu.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Windows 开始菜单打开 **Python IDLE**。
- en: The first window to pop up is the interactive shell. To open the script editing
    window click on **File** and **New**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先弹出的窗口是交互式外壳。要打开脚本编辑窗口，请点击 **文件** 和 **新建**。
- en: Click on **File** and then **Save As**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件** 然后选择 **另存为**。
- en: In the dialog window that pops up, browse into the `pythongis` folder, type
    `__init__.py` as the filename, and click on **Save**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的对话框中，浏览到 `pythongis` 文件夹，将文件名输入为 `__init__.py`，然后点击 **保存**。
- en: 'There are two main types of GIS data: **vector** (coordinate-based geometries
    such as points, lines, and polygons) and **raster** (a regularly spaced out grid
    of data points or cells, similar to an image and its pixels).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: GIS 数据主要有两种类型：**向量**（基于坐标的几何形状，如点、线和多边形）和**栅格**（由规则间隔的数据点或单元格组成的网格，类似于图像及其像素）。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'For a more detailed introduction to the differences between vector and raster
    data, and other basic GIS concepts, we refer the reader to the book *Learning
    Geospatial Analysis with Python*, by Joel Lawhead. You can find this book at:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于向量与栅格数据之间差异的更详细介绍，以及其他基本 GIS 概念，我们建议读者阅读 Joel Lawhead 所著的《Learning Geospatial
    Analysis with Python》一书。您可以在以下位置找到这本书：
- en: '[https://www.packtpub.com/application-development/learning-geospatial-analysis-python](https://www.packtpub.com/application-development/learning-geospatial-analysis-python)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/learning-geospatial-analysis-python](https://www.packtpub.com/application-development/learning-geospatial-analysis-python)'
- en: 'Since vector and raster data are so fundamentally different in all regards,
    we split our package in two, one for vector and one for raster. Using the same
    method as earlier, we create two new subpackage folders within the `pythongis`
    package; one called `vector` and one called `raster` (each with the same aforementioned
    empty `__init__.py` file). Thus, the structure of our package will look as follows
    (note that `: package` is not part of the folder name):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '由于向量和栅格数据在所有方面都存在根本性的不同，我们将我们的包分为两部分，一部分用于向量，另一部分用于栅格。使用之前的方法，我们在 `pythongis`
    包内创建两个新的子包文件夹；一个名为 `vector`，另一个名为 `raster`（每个都包含前面提到的空 `__init__.py` 文件）。因此，我们的包结构将如下所示（注意
    `: package` 不是文件夹名称的一部分）：'
- en: '![Imagining the roadmap ahead](img/5407OS_01_02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![展望未来的路线图](img/5407OS_01_02.jpg)'
- en: 'To make our new `vector` and `raster` subpackages importable by our top level
    `pythongis` package, we need to add the following relative import statements in
    `pythongis/__init__.py`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的新 `vector` 和 `raster` 子包可由顶级 `pythongis` 包导入，我们需要在 `pythongis/__init__.py`
    中添加以下相对导入语句：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Throughout the course of this book, we will build the functionality of these
    two data types as a set of Python modules in their respective folders. Eventually,
    we want to end up with a GIS application that has only the most basic of geospatial
    tools so that we will be able to load, save, manage, visualize, and overlay data,
    each of which will be covered in the following chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将在这两个数据类型的相应文件夹中构建它们的函数性，作为一组Python模块。最终，我们希望得到一个只包含最基本地理空间工具的GIS应用程序，这样我们就能加载、保存、管理、可视化和叠加数据，这些内容将在接下来的章节中介绍。
- en: 'As far as our final product goes, since we focus on clarity and simplicity,
    we do not put too much effort into making it fast or memory efficient. This comes
    from an often repeated saying among programmers, an example of which is found
    in *Structured Programming with go to Statements*, ACM, Computing Surveys 6 (4):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就我们的最终产品而言，因为我们注重清晰和简洁，所以我们并没有在让它快速或内存高效上投入太多精力。这源于程序员中经常重复的一句话，其中之一可以在《带有goto语句的结构化编程》，ACM，计算调查6（4）中找到：
- en: '|   | *premature optimization is the root of all evil* |   |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|   | *过早优化是万恶之源* |   |'
- en: '|   | --*Donald E. Knuth* |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|   | --*唐纳德·E·克努特* |'
- en: This leaves us with software that works best with small files, which in most
    cases is good enough. Once you have a working application and you feel that you
    need support for larger or faster files, then it's up to you if you want to put
    in the extra effort of optimization.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们的软件最适合处理小文件，这在大多数情况下已经足够好。一旦你有一个工作中的应用程序，并且你觉得你需要支持更大的或更快的文件，那么是否投入额外的优化努力就取决于你了。
- en: The GIS application you end up with at the end of the book is simple but functional,
    and is meant to serve as a framework that you can easily build on. To leave you
    with some ideas to pick up on, we placed various information boxes throughout
    the book with ways that you can optimize or extend your application. For any of
    the core topics and features that we were not able to cover earlier in the book,
    we give a broader discussion of missing functionality and future suggestions in
    the final chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本书结尾时你得到的GIS应用程序简单但功能齐全，旨在作为一个你可以轻松构建的框架。为了给你一些想法，我们在书中放置了各种信息框，介绍了你可以优化或扩展应用程序的方法。对于我们在本书早期未能涵盖的核心主题和功能，我们在最后一章给出了缺失功能更广泛的讨论和未来建议。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about why you want to create a GIS application
    using Python, set up our programming environment, installed some recurring packages,
    and created your application structure and framework.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了为什么想要使用Python创建一个GIS应用程序，设置了我们的编程环境，安装了一些常用的包，并创建了你的应用程序结构和框架。
- en: In the next chapter, you will take the first step toward making a geospatial
    application, by creating a simple yet powerful module for loading and saving some
    common geospatial data formats from scratch.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将迈出创建地理空间应用程序的第一步，通过从头开始创建一个简单但强大的模块来加载和保存一些常见的地理空间数据格式。
