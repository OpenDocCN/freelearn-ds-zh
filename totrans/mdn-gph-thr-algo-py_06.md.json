["```py\n#load needed packages\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n#create Francophone country network\nG = nx.Graph()\nG.add_nodes_from([1, 23])\nG.add_edges_from([\n    (23,13),(13,11),(12,13),(13,18),(13,1),(12,3),(12,18),\n    (3,22),(3,18),(3,21),(3,20),(18,1),(18,14),(18,17),(18,21),\n    (21,17),(21,14),(17,14),(14,1),(14,6),(14,5),(6,5),(1,8),\n    (8,16),(8,7),(16,7),(16,2),(16,4),(16,19),(19,4),(4,2),\n    (7,10),(2,10),(10,15),(10,9)])\n```", "```py\n#plot the Francophone network\nimport matplotlib.pyplot as plt\nG.nodes[1]['country'] = 'Niger'\nG.nodes[2]['country'] = 'Republic_of_Congo'\nG.nodes[3]['country'] = 'Senegal'\nG.nodes[4]['country'] = 'Gabon'\nG.nodes[5]['country'] = 'Benin'\nG.nodes[6]['country'] = 'Togo'\nG.nodes[7]['country'] = 'Central_African_Republic'\nG.nodes[8]['country'] = 'Chad'\nG.nodes[9]['country'] = 'Rwanda'\nG.nodes[10]['country'] = 'Democratic_Republic_of_Congo'\nG.nodes[11]['country'] = 'Morocco'\nG.nodes[12]['country'] = 'Mauritania'\nG.nodes[13]['country'] = 'Algeria'\nG.nodes[14]['country'] = 'Burkina_Faso'\nG.nodes[15]['country'] = 'Burundi'\nG.nodes[16]['country'] = 'Cameroon'\nG.nodes[17]['country'] = 'Cote_dIvoire'\nG.nodes[18]['country'] = 'Mali'\nG.nodes[19]['country'] = 'Equatorial_Guinea'\nG.nodes[20]['country'] = 'The_Gambia'\nG.nodes[21]['country'] = 'Guinea'\nG.nodes[22]['country'] = 'Guinea_Bissau'\nG.nodes[23]['country'] = 'Tunisia'\nlabels = nx.get_node_attributes(G, 'country')\nnx.draw(G, labels=labels, font_weight='bold')\n```", "```py\n#install and import epidemic models\n#you may need to install bokeh and restart the notebook if it is not\n#already installed\n!pip install ndlib\nimport ndlib.models.epidemics as ep\n```", "```py\n# Model Selection\nmodel = ep.SIRModel(G)\n# Model Configuration\nimport ndlib.models.ModelConfig as mc\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.25)\nconfig.add_model_parameter('gamma', 0.1)\nconfig.add_model_parameter(\"fraction_infected\", 0.05)\nmodel.set_initial_status(config)\n```", "```py\n# Simulation\niterations = model.iteration_bunch(50)\ntrends = model.build_trends(iterations)\n```", "```py\n#visualize spread dynamics\nfrom bokeh.io import output_notebook, show\nfrom ndlib.viz.bokeh.DiffusionTrend import DiffusionTrend\nviz = DiffusionTrend(model, trends)\np = viz.plot(width=500, height=400)\nshow(p)\n```", "```py\n# Model Configuration\nimport ndlib.models.ModelConfig as mc\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.25)\nconfig.add_model_parameter('gamma', 0.3)\nconfig.add_model_parameter(\"fraction_infected\", 0.05)\nmodel.set_initial_status(config)\n# Simulation\niterations = model.iteration_bunch(50)\ntrends = model.build_trends(iterations)\n#visualize spread dynamics\nfrom bokeh.io import output_notebook, show\nfrom ndlib.viz.bokeh.DiffusionTrend import DiffusionTrend\nviz = DiffusionTrend(model, trends)\np = viz.plot(width=500, height=400)\nshow(p)\n```", "```py\n#import needed packages\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n#reading the dataset\nfichier = pd.read_csv(\"C:/users/njfar/OneDrive/Desktop/AIMS_data.csv\")\ndata = pd.DataFrame(fichier)\n```", "```py\n#intializing the social network\naimsNetwork = nx.Graph()\n#populating the network with nodes and edges\nfor i in range(len(data[\"Name\"])):\n    aimsNetwork.add_node(\n        data[\"Name\"][i], Age=data[\"Age\"][i],\n        country=data[\"Country\"][i],Field=data[\"Field\"][i],\n        background=data[\"Background\"][i])\n#define length\nN = len(aimsNetwork.nodes())\n# one can build the adjacency matrix\nAIMS_by_Country_or_Field = nx.Graph()\n#define objects\nAIMS = aimsNetwork\nstudents = list(AIMS.nodes())\n```", "```py\n#create edges\nfor i in range(N-1):\n    for j in range(i+1,N):\n        sti = students[i]\n        stj = students[j]\n        if AIMS.nodes[sti]['Field'] == AIMS.nodes[stj]['Field'] or\n            AIMS.nodes[sti]['country'] == AIMS.nodes[stj]['country']:\n            AIMS_by_Country_or_Field.add_edge(sti,stj)\n```", "```py\n#create plot\nDegree=AIMS_by_Country_or_Field.degree()\nvar = [10*k[1] for k in list(Degree)]\nplt.figure(figsize=(20,20))\nnx.draw_random(AIMS_by_Country_or_Field, font_size=10,\n    node_size = var, with_labels=True, node_color=\"red\")\nplt.show()\n```", "```py\n#Run the simulated epidemic on the AIMS Cameroon student network\nmodel = ep.SIRModel(G)\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.25)\nconfig.add_model_parameter('gamma', 0.1)\nconfig.add_model_parameter(\"fraction_infected\", 0.05)\nmodel.set_initial_status(config)\niterations = model.iteration_bunch(50)\ntrends = model.build_trends(iterations)\nviz = DiffusionTrend(model, trends)\np = viz.plot(width=500, height=400)\nshow(p)\n```", "```py\n#Run the simulated epidemic on the AIMS Cameroon student network\nmodel = ep.SIRModel(G)\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.25)\nconfig.add_model_parameter('gamma', 0.3)\nconfig.add_model_parameter(\"fraction_infected\", 0.05)\nmodel.set_initial_status(config)\niterations = model.iteration_bunch(50)\ntrends = model.build_trends(iterations)\nviz = DiffusionTrend(model, trends)\np = viz.plot(width=500, height=400)\nshow(p)\n```"]