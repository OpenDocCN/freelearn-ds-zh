["```py\ninstall.packages(\"devtools\")\n# Install development version from GitHub\ndevtools::install_github(\n'R-package/styledTables',\nbuild_vignettes = TRUE\n)\n```", "```py\nlibrary(TidyDensity)\nlibrary(styledTables)\nlibrary(xlsx)\nst <- tidy_normal() |>\n  styled_table(keep_header = TRUE) |>\n  set_border_position(\"all\", row_id = 1) |>\n  set_bold(row_id = 1) |>\n  set_fill_color(\"#00FF00\", col_id = 3,\n                 condition = X >= 0.5)\n# open new xlsx workbook and create a worksheet\nwb <- createWorkbook()\nsheet <- createSheet(wb, \"tidy_normal\")\n# insert the styled table in the worksheet\nwrite_excel(sheet, st)\n# save the workbook\nsaveWorkbook(wb, \"chapter5/styledTables_test.xlsx\")\n```", "```py\n# Load in the library\nlibrary(basictabler)\n# Create a data frame\ndata <- data.frame(\n  name = c(\"John Doe\", \"Jane Doe\"),\n  age = c(30, 25),\n  salary = c(100000, 50000))\n# Create a Plain table\ntable_plain <- qhtbl(data, theme = \"largeplain\")\ntable_plain\n```", "```py\n# Create a basictabler object\ntable <- qhtbl(data,\n  theme = \"largeplain\",\n  tableStyle = list(\"border-color\" = \"maroon\"),\n  headingStyle = list(\n    \"color\" = \"cornsilk\", \"background-color\" = \"maroon\",\n    \"font-style\" = \"italic\", \"border-color\" = \"maroon\"\n  ),\n  cellStyle = list(\n    \"color\" = \"maroon\", \"background-color\" = \"cornsilk\",\n    \"border-color\" = \"maroon\"\n  )\n)\n# Render the table to HTML\ntable\n```", "```py\n# A longer example\nlibrary(TidyDensity)\ntn <- tidy_normal(.n = 10)\n```", "```py\ntbl <- BasicTable$new()\n# formatting values (explained in the introduction vignette)\ncolumnFormats <- list(\n  NULL, NULL, \"%.4f\", \"%.4f\", \"%.4f\", \"%.4f\", \"%.4f\"\n)\n```", "```py\ntbl$addData(tn,\n  firstColumnAsRowHeaders = TRUE,\n  explicitColumnHeaders = c(\n\"Simulation\", \"x\", \"y\", \"dx\", \"dy\", \"p\", \"q\"\n  ),\n  columnFormats = columnFormats\n)\n```", "```py\n# Add some conditional formatting\ncells <- tbl$getCells(\nrowNumbers = 2:11,\ncolumnNumbers = 3:7,\nmatchMode = \"combinations\"\n)\n```", "```py\ntbl$mapStyling(\n  cells = cells,\n  styleProperty = \"background-color\",\n  valueType = \"color\",\n  mapType = \"logic\",\n  mappings = list(\n    \"v<=-3\", \"red\",\n    \"-3<v<=-2\", \"orange\",\n    \"-2<v<=-1\", \"pink\",\n    \"-1<v<= 0\", \"white\",\n    \"0<v<=1\", \"white\",\n    \"1<v<=2\", \"lightgreen\",\n    \"2<v<=3\", \"lightblue\",\n    \"3<v\", \"green\"\n  )\n)\n```", "```py\ntbl$renderTable()\n```", "```py\n# Write styled table out to Excel\nlibrary(openxlsx)\n# Create Workbook\nwb <- createWorkbook()\n# Add a sheet called Data\naddWorksheet(wb, \"Data\")\n# Use basictabler to write the tbl to excel\ntbl$writeToExcelWorksheet(\n  wb = wb,\n  wsName = \"Data\",\n  topRowNumber = 1,\n  leftMostColumnNumber = 1,\n  applyStyles = TRUE\n  )\n# Use openxlsx to save the file\nsaveWorkbook(\n  wb,\n  file=\"chapter5/basictabler_excel.xlsx\",\n  overwrite = TRUE\n)\n```", "```py\n# import pandas\nimport pandas as pd\ndata = {'Name': ['John', 'Alice', 'Michael'],\n        'Age': [25, 30, 22],\n        'City': ['New York', 'London', 'Paris']}\ndf = pd.DataFrame(data)\n# Define a function to apply font properties\ndef apply_font_properties(value):\n    return 'font-weight: bold; font-size: 14px; font-style: italic; color: blue'\n# Applying font properties\nstyled_df = df.style.applymap(apply_font_properties, subset='Name')\n# Save the styled DataFrame to an Excel file\nstyled_df.to_excel('styled_table_pandas.xlsx', index=False)\n```", "```py\n# OpenPyXL example for setting font properties\nfrom openpyxl import Workbook\nfrom openpyxl.styles import Font\nwb = Workbook()\nws = wb.active\n# Applying font properties\nfont = Font(size=14, bold=True, italic=True, color='0000FF')\nws['A1'].font = font\nws['A1'] = 'Name'\nws['B1'] = 'Age'\nws['C1'] = 'City'\nwb.save('styled_table_openpyxl.xlsx')\n```", "```py\n# Pandas example for cell background colors\nimport pandas as pd\ndata = {'Name': ['John', 'Alice', 'Michael'],\n        'Age': [25, 30, 22],\n        'City': ['New York', 'London', 'Paris']}\ndf = pd.DataFrame(data)\n# Create a styler object\nstyled_df = df.style\n# Define the style for the cells\nstyled_df = styled_df.applymap( \\\n    lambda _: 'background-color: yellow', \\\n    subset=pd.IndexSlice[0, ['Name', 'Age']])\n# Save the styled DataFrame to an Excel file\nstyled_df.to_excel('colored_table_pandas.xlsx', index=False)\n```", "```py\n# openpyxl example for cell background colors\nfrom openpyxl import Workbook\nfrom openpyxl.styles import PatternFill\nwb = Workbook()\nws = wb.active\n# Applying cell background colors\nyellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')\nws['A1'].fill = yellow_fill\nws['A1'] = 'Name'\nws['B1'] = 'Age'\nws['C1'] = 'City'\nwb.save('colored_table_openpyxl.xlsx')\n```", "```py\n# Pandas example for aligning text within cells\nimport pandas as pd\ndata = {'Name': ['John', 'Alice', 'Michael'],\n        'Age': [25, 30, 22],\n        'City': ['New York', 'London', 'Paris']}\ndf = pd.DataFrame(data)\n# Applying text alignment\nalignment_styles = {'text-align': 'center'}\nstyled_df = df.style.set_properties( \\\n    subset=['Name', 'Age', 'City'], **alignment_styles)\nstyled_df.to_excel('aligned_table_pandas.xlsx', index=False)\n```", "```py\n# OpenPyXL example for aligning text within cells\nfrom openpyxl import Workbook\nfrom openpyxl.styles import Alignment\nwb = Workbook()\nws = wb.active\n# Applying text alignment\nalignment = Alignment(horizontal='center', vertical='center')\nws['A1'].alignment = alignment\nws['A1'] = 'Name'\nws['B1'] = 'Age'\nws['C1'] = 'City'\nwb.save('aligned_table_openpyxl.xlsx')\n```", "```py\nimport pandas as pd\nimport openpyxl\nfrom openpyxl.formatting.rule import ColorScaleRule, CellIsRule\n# Create some sample data\ndata = {'Name': ['John', 'Alice', 'Michael', 'Emily'],\n        'Age': [25, 30, 22, 28],\n        'City': ['New York', 'London', 'Paris', 'Sydney'],\n        'Sales': [1000, 800, 1200, 900]}\ndf = pd.DataFrame(data)\n# Write the DataFrame to a worksheet\ndf.to_excel(\"conditional_formatting.xlsx\", index=False)\n# Load the workbook\nwb = openpyxl.load_workbook('conditional_formatting.xlsx')\nws = wb.active\n# Define conditional formatting rule for red text\nred_text_rule = CellIsRule( \\\n    operator=\"lessThan\", formula=[\"1000\"], stopIfTrue=True, \\\n    font=openpyxl.styles.Font(color=\"FF0000\"))\nws.conditional_formatting.add(f\"D2:D{len(df)+1}\", red_text_rule)\n# Define the condition for the green fill color scale\nmin_sales = min(df['Age'])\nmax_sales = max(df['Age'])\ngreen_fill_rule = ColorScaleRule( \\\n    start_type='num', start_value=min_sales, start_color='0000FF00', \\\n    end_type='num', end_value=max_sales, end_color='00FFFF00')\nws.conditional_formatting.add(f\"B2:B{len(df)+1}\", green_fill_rule)\n# Save the Excel workbook\nwb.save('conditional_formatting.xlsx')\n```", "```py\nimport pandas as pd\nimport openpyxl\nfrom openpyxl.utils.dataframe import dataframe_to_rows\nfrom openpyxl.formatting.rule import ColorScaleRule\n# Sample data for the heatmap\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Jan': [10, 20, 30, 40],\n    'Feb': [15, 25, 35, 45],\n    'Mar': [12, 22, 32, 42],\n    'Apr': [18, 28, 38, 48]\n}\n# Convert data to a pandas DataFrame\ndf = pd.DataFrame(data)\n# Write the DataFrame to a worksheet\ndf.to_excel(\"heatmap_with_conditional_formatting.xlsx\", index=False)\n# Load the workbook\nwb = openpyxl.load_workbook( \\\n    'heatmap_with_conditional_formatting.xlsx')\nws = wb.active\n# Define the range for conditional formatting (excluding the 'Category' column)\ndata_range = f'B2:E{len(df) + 1}'  # Adjust the range based on the DataFrame size\n# Apply color scale conditional formatting to the range\ncolor_scale_rule = ColorScaleRule(start_type='min', \\\n    start_color='FFFFFF', end_type='max', end_color='FF0000')\nws.conditional_formatting.add(data_range, color_scale_rule)\n# Save the workbook\nwb.save('heatmap_with_conditional_formatting.xlsx')\n```", "```py\n# Import the required modules from the `win32com.client` package:\nimport win32com.client as win32\nimport os.path\n# Create a new instance of Excel and make it visible:\nexcel = win32.Dispatch('Excel.Application')\nexcel.Visible = True\n# Create a new workbook or open an existing one:\nworkbook = excel.Workbooks.Add()  # Create a new workbook\n# Or to open an existing workbook:\n# workbook = excel.Workbooks.Open('path/to/your/workbook.xlsx')\n# Get the reference to the sheet where you want to create the Pivot Table:\nsheet = workbook.ActiveSheet  # Get the active sheet\n# Or specify the sheet by its name:\n# sheet = workbook.Sheets('Sheet1')\n```", "```py\n# Sample data\ndata = [\n    ['Product', 'Category', 'Sales'],\n    ['Product A', 'Category 1', 100],\n    ['Product B', 'Category 2', 200],\n    ['Product C', 'Category 1', 150],\n    ['Product D', 'Category 2', 50],\n    # Add more data rows here...\n]\n# Write the data to the sheet\nfor row_index, row in enumerate(data, start=1):\n    for col_index, value in enumerate(row, start=1):\n        sheet.Cells(row_index, col_index).Value = value\n```", "```py\n# Add a new worksheet to the workbook to hold the Pivot Table:\npivot_table_sheet = workbook.Worksheets.Add()\npivot_table_sheet.Name = 'Pivot Table'\n```", "```py\n# Create a Pivot Cache using the data range (UsedRange highlights the whole used range in the sheet):\npivot_cache = workbook.PivotCaches().Create(SourceType=1, \\\n    SourceData=sheet.UsedRange)\n# Create the Pivot Table on the new sheet using the Pivot Cache:\npivot_table = pivot_cache.CreatePivotTable( \\\n    TableDestination=pivot_table_sheet.Cells(3, 1), \\\n    TableName='MyPivotTable')\n```", "```py\n# Add fields to the Pivot Table, specifying their orientation (rows, columns, data, etc.):\npivot_table.PivotFields('Product').Orientation = 1 # row field\npivot_table.PivotFields('Category').Orientation = 2 # column field\npivot_table.PivotFields('Sales').Orientation = 4 # data field\n```", "```py\n# Control row and column grandtotals\npivot_table.ColumnGrand = False\npivot_table.RowGrand = False\n# Decide which fields have Subtotals\npivot_table.PivotFields('Sales').Subtotals = [False]*12\npivot_table.PivotFields('Product').Subtotals = [False]*12\npivot_table.PivotFields('Category').Subtotals = [True]*12\n```", "```py\n# Customize labels and styles\npivot_table.ShowTableStyleRowStripes = True\npivot_table.PivotFields('Product').Caption = 'Product Name'\npivot_table.PivotFields('Sales').NumberFormat = '#,##0'\npivot_table.PivotFields('Sales').Caption = 'Total Sales'\n# Note: labels change the Pivot Table wizard available when clicking into the Pivot Table, not the table itself.\n# Save the workbook and close Excel:\n # Note: you will want to change the path to a path that exists on your computer.\nfile_path = os.path.join('C:' + os.sep, 'Users', 'david_1q5aypk', 'Extending-Excel-with-Python-and-R')\nworkbook.SaveAs(os.path.join(file_path, 'pivot_table.xlsx'))\nworkbook.Close()\nexcel.Quit()\n```"]