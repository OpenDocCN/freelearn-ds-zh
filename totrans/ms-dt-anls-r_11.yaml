- en: Chapter 11. Social Network Analysis of the R Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the concept of social networks has a pretty long history, starting
    at the beginning of the last century, **social network analysis** (**SNA**) became
    extremely popular only in the last decade, probably due to the success of huge
    social media sites and the availability of related data. In this chapter, we are
    going to take a look on how to retrieve and load such data, then analyze and visualize
    such networks by heavily using the `igraph` package.
  prefs: []
  type: TYPE_NORMAL
- en: '`Igraph` is an open source network analysis tool made by Gábor Csárdi. The
    software ships with a wide variety of network analysis methods, and it can be
    used in R, C, C++, and Python as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics with some examples on the
    R ecosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading and handling network data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network centrality metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing network graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading network data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Probably the easiest way to retrieve network-flavored information on the R
    ecosystem is to analyze how R packages depend on each other. Based on [Chapter
    2](ch02.html "Chapter 2. Getting Data from the Web"), *Getting the Data*, we could
    try to load this data via HTTP parsing of the CRAN mirrors but, luckily, R has
    a built-in function to return all available R packages from CRAN with some useful
    meta-information as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The number of packages hosted on CRAN is growing from day to day. As we are
    working with live data, the actual results you see might be slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So we have a matrix with more than 6,500 rows, and the fourth column includes
    the dependencies in a comma-separated list. Instead of parsing those strings and
    cleaning the data from the package versions and other relatively unimportant characters,
    let''s use another handy function from the tools package to do the dirty work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'So the `package.dependencies` function returns a long named list of matrixes:
    one for each R package, which includes the required package name and version to
    install and load the referred package. Besides the very same function can retrieve
    the list of packages that are imported or suggested by others via the `depLevel`
    argument. We will use this information to build a richer dataset with different
    types of connections between the R packages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script creates the `data.frame`, in which each line represents
    a connection between two R packages. The `src` column shows which R package refers
    to the `dep` package, and the label describes the type of connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Although this code snippet might seem complex at first sight, we simply look
    up the dependencies of each package (like in a loop), return a row of `data.frame`,
    and nest it in another loop, which iterates through all previously mentioned R
    package connection types. The resulting R object is really straightforward to
    understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Centrality measures of networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So we have identified almost 30,000 relations between our 6,500 packages. Is
    it a sparse or dense network? In other words, how many connections do we have
    out of all possible package dependencies? What if all the packages depend on all
    other packages? We do not really need any feature-rich package to calculate that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is a rather low percentage, which makes the life of R sysadmins rather
    easy compared to maintaining a dense network of R software. But who are the central
    players in this game? Which are the top-most dependent R packages?
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also compute a rather trivial metric to answer this question without
    any serious SNA knowledge, as this can be defined as "Which R package is mentioned
    the most times in the `dep` column of the edges dataset"? Or, in plain English:
    "Which package has the most reverse dependencies?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It seems that almost 50 percent of the packages depend on a minimal version
    of R. So as not to distort our directed network, let''s remove these edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And now it''s time to transform our list of connections into a real graph object
    to compute more advanced metrics, and also to visualize the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After loading the package, the `graph.data.frame` function transforms various
    data sources into an `igraph` object. This is an extremely useful class with a
    variety of supported methods. The summary simply prints the number of vertices
    and edges, which shows that around 700 R packages have no dependencies. Let''s
    compute the previously discussed and manually computed metrics with `igraph`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It's not that surprising to see the `methods` package at the top of the list,
    as it's often required in packages with complex `S4` methods and classes. The
    `MASS` and `stats` packages include most of the often used statistical methods,
    but what about the others? The `lattice` and `ggplot2` packages are extremely
    smart and feature-full graphing engines, and `testthat` is one of the most popular
    unit-testing extensions of R; this must be mentioned in the package descriptions
    before submitting new packages to the central CRAN servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'But `degree` is only one of the available centrality metrics for social networks.
    Unfortunately, computing closeness, which shows the distance of each node from
    the others, is not really meaningful when it comes to dependency, but `betweenness`
    is a really interesting comparison to the preceding results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This metric shows the number of times each package acts as a bridge (the only
    connecting node between two others) in the shortest path between the other packages.
    So it's not about having a lot of depending packages; rather, it shows the importance
    of the packages from a more global perspective. Just imagine if a package with
    a high `betweenness` was deprecated and removed from CRAN; not only the directly
    dependent packages, but also all other packages in the dependency tree would be
    in a rather awkward situation.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing network data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To compare these two metrics, let''s draw a simple scatter plot showing each
    R package by `degree` and `betweenness`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Visualizing network data](img/2028OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Relax; we will be soon able to generate much more spectacular and instructive
    plots in a few minutes! But the preceding plot shows that there are some packages
    with a rather low number of direct dependents that still have a great impact on
    the global R ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we proceed, let''s filter our dataset and graph to include far fewer
    vertices by building the dependency tree of the `igraph` package, including all
    packages it depends on or imports from:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following short list of `igraph` dependencies was generated in April 2015\.
    Since then, a major new version of `igraph` has been released with a lot more
    dependencies due to importing from the `magrittr` and `NMF` packages, so the following
    examples repeated on your computer will return a much larger network and graphs.
    For educational purposes, we are showing the smaller network in the following
    outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So we need the previously mentioned eight packages to be able to use the `igraph`
    package. Please note that not all of these are direct dependencies; some are dependencies
    from other packages. To draw a visual representation of this dependency tree,
    let''s create the related graph object and plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Visualizing network data](img/2028OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, the `igraph` package literally depends on only one package, although it
    also imports some functions from the `Matrix` package. All the other previously
    mentioned packages are dependencies of the latter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To draw a more intuitive version of the preceding plot to suggest this statement,
    we might consider removing the dependency labels and represent that aspect by
    colors, and we can also emphasize the direct dependencies of `igraph` by `vertex`
    colors. We can modify the attributes of vertices and edges via the `V` and `E`
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Visualizing network data](img/2028OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Much better! Our central topic, the `igraph` package, is highlighted in dark
    red, the two direct dependencies are marked in dark orange, and all the other
    dependencies are colored in lighter orange. Similarly, we emphasize the `Depends`
    relations in blue compared to the vast majority of other Imports connections.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive network plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if you do not like the order of the vertices in the preceding plot? Feel
    free to rerun the last command to produce new results, or draw with `tkplot` for
    a dynamic plot, where you can design your custom layout by dragging-and-dropping
    the vertices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Interactive network plots](img/2028OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Can we do any better? Although this result is extremely useful, it lacks the
    immediate appeal of the currently trending, JavaScript-empowered interactive plots.
    So let''s recreate this interactive plot with JavaScript, right from R! `htmlwidgets`
    and the `visNetwork` package, discussed in more detail in the [Chapter 13](ch13.html
    "Chapter 13. Data Around Us"), *Data Around Us*, can help us with this task, even
    without any JavaScript knowledge. Simply pass the extracted nodes and edge datasets
    to the `visNetwork` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Interactive network plots](img/2028OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Custom plot layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alternatively, we can also generate such hierarchical plots in a programmatic
    way, by drawing the denominator tree of this directed plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Custom plot layouts](img/2028OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing R package dependencies with an R package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we are using R, a statistical programming environment whose most exciting
    and useful feature is its community, we might prefer to look for other, already
    implemented solutions for this research. After a quick Google search, and having
    looked up a few questions on StackOverflow or posts on [http://www.r-bloggers.com/](http://www.r-bloggers.com/),
    it''s pretty easy to find the Revolution Analytics `miniCRAN` package, which has
    some related and useful functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Analyzing R package dependencies with an R package](img/2028OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'But let''s get back to the original question: How do we analyze network data?'
  prefs: []
  type: TYPE_NORMAL
- en: Further network analysis resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides its really impressive and useful data visualization, the `igraph` package
    has a lot more to offer. Unfortunately, this short chapter cannot provide a decent
    introduction to network analysis theory, but I suggest that you skim through the
    package documentation as it comes with useful, self-explanatory examples and good
    references.
  prefs: []
  type: TYPE_NORMAL
- en: In short, network analysis provides various ways to compute centrality and density
    metrics, like we did at the beginning of this chapter, and also to identify bridges
    and simulate changes in the network; there are really powerful methods to segment
    the nodes in the network as well.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the *Financial Networks* chapter of the *Introduction to R for
    Quantitative Finance* book, which I coauthored, we developed R scripts to identify
    **systemically important financial institutions**(**SIFI**) in Hungary based on
    the transaction-level network data of the interbank lending market. This dataset
    and network theory help us to model and potentially predict future financial crises,
    and also to simulate the effect of central intervention.
  prefs: []
  type: TYPE_NORMAL
- en: A more detailed, freely available summary on this research was presented at
    the R/Finance 2015 conference in Chicago [http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf](http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf),
    along with a Shiny application [https://bit.ly/rfin2015-hunbanks](https://bit.ly/rfin2015-hunbanks),
    and a related, simulation-based infection-model was described in the *Systemic
    Risk* chapter of the *Mastering R for Quantitative Finance* book as well.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea behind this joint research was to identify core, peripheral, and
    semi-peripheral financial institutions based on the network formed by interbank
    lending transactions. The nodes being banks, the edges are defined as lend events
    between those, so we can interpret the bridges between periphery nodes as the
    intermediary bank between smaller banks, which usually do not lend money to each
    other directly.
  prefs: []
  type: TYPE_NORMAL
- en: The interesting question, after resolving some technical issues with the dataset,
    was to simulate what happens if an intermediary bank defaults, and if this unfortunate
    event might also affect other financial institutions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This short chapter introduced a new data structure in the form of graph datasets,
    and we visualized small networks with various R packages, including static and
    interactive methods as well. In the next two chapters, we will familiarize ourselves
    with two other frequently used data types: first we will analyze temporal, then
    spatial data.'
  prefs: []
  type: TYPE_NORMAL
