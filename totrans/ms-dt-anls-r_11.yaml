- en: Chapter 11. Social Network Analysis of the R Ecosystem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。R 生态系统的社会网络分析
- en: Although the concept of social networks has a pretty long history, starting
    at the beginning of the last century, **social network analysis** (**SNA**) became
    extremely popular only in the last decade, probably due to the success of huge
    social media sites and the availability of related data. In this chapter, we are
    going to take a look on how to retrieve and load such data, then analyze and visualize
    such networks by heavily using the `igraph` package.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管社会网络的概念有着相当长的历史，始于上个世纪初，但**社会网络分析**（**SNA**）仅在最近十年变得极其流行，这可能是由于大型社交媒体网站的成功以及相关数据的可用性。在本章中，我们将探讨如何检索和加载数据，然后通过大量使用
    `igraph` 包来分析和可视化这些网络。
- en: '`Igraph` is an open source network analysis tool made by Gábor Csárdi. The
    software ships with a wide variety of network analysis methods, and it can be
    used in R, C, C++, and Python as well.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Igraph` 是由 Gábor Csárdi 开发的一个开源网络分析工具。该软件包含各种网络分析方法，并且可以在 R、C、C++ 和 Python
    中使用。'
- en: 'In this chapter, we will cover the following topics with some examples on the
    R ecosystem:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过一些 R 生态系统的示例来介绍以下主题：
- en: Loading and handling network data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和处理网络数据
- en: Network centrality metrics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中心性度量
- en: Visualizing network graphs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化网络图
- en: Loading network data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载网络数据
- en: 'Probably the easiest way to retrieve network-flavored information on the R
    ecosystem is to analyze how R packages depend on each other. Based on [Chapter
    2](ch02.html "Chapter 2. Getting Data from the Web"), *Getting the Data*, we could
    try to load this data via HTTP parsing of the CRAN mirrors but, luckily, R has
    a built-in function to return all available R packages from CRAN with some useful
    meta-information as well:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可能获取 R 生态系统网络信息最简单的方法就是分析 R 包之间的依赖关系。基于[第 2 章](ch02.html "第 2 章。从网络获取数据")，*获取数据*，我们可以尝试通过
    CRAN 镜像的 HTTP 解析来加载数据，但幸运的是，R 有一个内置函数可以返回 CRAN 上所有可用的 R 包以及一些有用的元信息：
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The number of packages hosted on CRAN is growing from day to day. As we are
    working with live data, the actual results you see might be slightly different.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CRAN 上托管的包数量每天都在增长。由于我们正在处理实时数据，您看到的实际结果可能会有所不同。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So we have a matrix with more than 6,500 rows, and the fourth column includes
    the dependencies in a comma-separated list. Instead of parsing those strings and
    cleaning the data from the package versions and other relatively unimportant characters,
    let''s use another handy function from the tools package to do the dirty work:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有一个包含超过 6,500 行的矩阵，第四列包含以逗号分隔的依赖列表。与其解析这些字符串并从包版本和其他相对不重要的字符中清理数据，不如使用工具包中的另一个便捷函数来完成这项脏活：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So the `package.dependencies` function returns a long named list of matrixes:
    one for each R package, which includes the required package name and version to
    install and load the referred package. Besides the very same function can retrieve
    the list of packages that are imported or suggested by others via the `depLevel`
    argument. We will use this information to build a richer dataset with different
    types of connections between the R packages.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`package.dependencies` 函数返回一个长的命名列表矩阵：每个 R 包一个，包括安装和加载引用包所需的包名和版本。除了相同的函数可以通过
    `depLevel` 参数检索被导入或建议的包列表。我们将使用这些信息来构建一个包含 R 包之间不同类型连接的更丰富的数据集。
- en: 'The following script creates the `data.frame`, in which each line represents
    a connection between two R packages. The `src` column shows which R package refers
    to the `dep` package, and the label describes the type of connection:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本创建了一个 `data.frame`，其中每一行代表两个 R 包之间的连接。`src` 列显示哪个 R 包引用了 `dep` 包，标签描述了连接的类型：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Although this code snippet might seem complex at first sight, we simply look
    up the dependencies of each package (like in a loop), return a row of `data.frame`,
    and nest it in another loop, which iterates through all previously mentioned R
    package connection types. The resulting R object is really straightforward to
    understand:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个代码片段一开始看起来可能很复杂，但我们只是查找每个包的依赖关系（就像在一个循环中），返回一行 `data.frame`，并在另一个循环中嵌套它，该循环遍历所有之前提到的
    R 包连接类型。生成的 R 对象非常容易理解：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Centrality measures of networks
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络中心性度量
- en: 'So we have identified almost 30,000 relations between our 6,500 packages. Is
    it a sparse or dense network? In other words, how many connections do we have
    out of all possible package dependencies? What if all the packages depend on all
    other packages? We do not really need any feature-rich package to calculate that:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在我们的6,500个包之间识别了几乎30,000个关系。这是一个稀疏网络还是密集网络？换句话说，在所有可能的包依赖关系中，我们有多少个连接？如果所有包都相互依赖会怎样？我们实际上不需要任何功能丰富的包来计算这个：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a rather low percentage, which makes the life of R sysadmins rather
    easy compared to maintaining a dense network of R software. But who are the central
    players in this game? Which are the top-most dependent R packages?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当低的百分比，这使得与维护一个密集的R软件网络相比，R系统管理员的生活要容易得多。但谁是这场游戏中的核心玩家？哪些是最依赖的顶级R包？
- en: 'We can also compute a rather trivial metric to answer this question without
    any serious SNA knowledge, as this can be defined as "Which R package is mentioned
    the most times in the `dep` column of the edges dataset"? Or, in plain English:
    "Which package has the most reverse dependencies?"'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以计算一个相当简单的指标来回答这个问题，而无需任何严肃的SNA知识，因为这个指标可以这样定义：“在边的数据集的`dep`列中，哪个R包被提及的次数最多？”或者，用简单的英语来说：“哪个包有最多的反向依赖？”
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It seems that almost 50 percent of the packages depend on a minimal version
    of R. So as not to distort our directed network, let''s remove these edges:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来大约有50%的包依赖于R的最小版本。为了不扭曲我们的有向网络，让我们移除这些边：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And now it''s time to transform our list of connections into a real graph object
    to compute more advanced metrics, and also to visualize the data:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们的连接列表转换成一个真正的图对象，以计算更高级的指标，并可视化数据了：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After loading the package, the `graph.data.frame` function transforms various
    data sources into an `igraph` object. This is an extremely useful class with a
    variety of supported methods. The summary simply prints the number of vertices
    and edges, which shows that around 700 R packages have no dependencies. Let''s
    compute the previously discussed and manually computed metrics with `igraph`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载包之后，`graph.data.frame`函数将各种数据源转换为`igraph`对象。这是一个具有各种支持方法的极其有用的类。摘要简单地打印出顶点和边的数量，这表明大约有700个R包没有依赖关系。让我们使用`igraph`计算之前讨论的和手动计算的指标：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It's not that surprising to see the `methods` package at the top of the list,
    as it's often required in packages with complex `S4` methods and classes. The
    `MASS` and `stats` packages include most of the often used statistical methods,
    but what about the others? The `lattice` and `ggplot2` packages are extremely
    smart and feature-full graphing engines, and `testthat` is one of the most popular
    unit-testing extensions of R; this must be mentioned in the package descriptions
    before submitting new packages to the central CRAN servers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的顶部看到`methods`包并不令人惊讶，因为它通常在具有复杂`S4`方法和类的包中是必需的。`MASS`和`stats`包包含了大多数常用的统计方法，但其他包呢？`lattice`和`ggplot2`包是极其智能且功能丰富的绘图引擎，而`testthat`是R中最受欢迎的单元测试扩展之一；在提交新包到中央CRAN服务器之前，必须在包描述中提到这一点。
- en: 'But `degree` is only one of the available centrality metrics for social networks.
    Unfortunately, computing closeness, which shows the distance of each node from
    the others, is not really meaningful when it comes to dependency, but `betweenness`
    is a really interesting comparison to the preceding results:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但“度”只是社会网络中可用的中心性指标之一。不幸的是，当涉及到依赖关系时，计算每个节点与其他节点的距离的“接近度”并没有太大的意义，但“中介度”与前面的结果相比确实是一个有趣的比较：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This metric shows the number of times each package acts as a bridge (the only
    connecting node between two others) in the shortest path between the other packages.
    So it's not about having a lot of depending packages; rather, it shows the importance
    of the packages from a more global perspective. Just imagine if a package with
    a high `betweenness` was deprecated and removed from CRAN; not only the directly
    dependent packages, but also all other packages in the dependency tree would be
    in a rather awkward situation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指标显示了每个包在连接其他包的最短路径中作为桥梁（连接两个其他节点的唯一连接节点）的次数。所以这并不是关于拥有很多依赖包的问题；相反，它从更全局的角度展示了包的重要性。想象一下，如果一个具有高`中介度`的包被弃用并从CRAN中删除；不仅直接依赖的包，而且依赖树中的所有其他包也会处于一个非常尴尬的境地。
- en: Visualizing network data
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化网络数据
- en: 'To compare these two metrics, let''s draw a simple scatter plot showing each
    R package by `degree` and `betweenness`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较这两个指标，让我们绘制一个简单的散点图，展示每个R包的`degree`和`betweenness`：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Visualizing network data](img/2028OS_11_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![可视化网络数据](img/2028OS_11_01.jpg)'
- en: Relax; we will be soon able to generate much more spectacular and instructive
    plots in a few minutes! But the preceding plot shows that there are some packages
    with a rather low number of direct dependents that still have a great impact on
    the global R ecosystem.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 放松；我们将在几分钟内能够生成更多壮观且富有教育意义的图表！但前一个图表明，有一些包的直接依赖项数量相当少，但仍然对全球R生态系统有重大影响。
- en: 'Before we proceed, let''s filter our dataset and graph to include far fewer
    vertices by building the dependency tree of the `igraph` package, including all
    packages it depends on or imports from:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们通过构建`igraph`包的依赖树，包括它所依赖或从中导入的所有包，来过滤我们的数据集和图，以包含更少的顶点：
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The following short list of `igraph` dependencies was generated in April 2015\.
    Since then, a major new version of `igraph` has been released with a lot more
    dependencies due to importing from the `magrittr` and `NMF` packages, so the following
    examples repeated on your computer will return a much larger network and graphs.
    For educational purposes, we are showing the smaller network in the following
    outputs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简短的`igraph`依赖项列表是在2015年4月生成的。从那时起，由于从`magrittr`和`NMF`包中导入，`igraph`发布了一个主要的新版本，具有更多的依赖项，因此您计算机上重复的以下示例将返回一个更大的网络和图。出于教育目的，我们在以下输出中显示了较小的网络。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So we need the previously mentioned eight packages to be able to use the `igraph`
    package. Please note that not all of these are direct dependencies; some are dependencies
    from other packages. To draw a visual representation of this dependency tree,
    let''s create the related graph object and plot it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要之前提到的八个包才能使用`igraph`包。请注意，这些并不都是直接依赖项；其中一些是来自其他包的依赖项。为了绘制这个依赖树的视觉表示，让我们创建相关的图对象并绘制它：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Visualizing network data](img/2028OS_11_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![可视化网络数据](img/2028OS_11_02.jpg)'
- en: Well, the `igraph` package literally depends on only one package, although it
    also imports some functions from the `Matrix` package. All the other previously
    mentioned packages are dependencies of the latter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，`igraph`包实际上只依赖于一个包，尽管它也从`Matrix`包中导入了一些函数。所有其他之前提到的包都是后者的依赖项。
- en: 'To draw a more intuitive version of the preceding plot to suggest this statement,
    we might consider removing the dependency labels and represent that aspect by
    colors, and we can also emphasize the direct dependencies of `igraph` by `vertex`
    colors. We can modify the attributes of vertices and edges via the `V` and `E`
    functions:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制一个更直观的版本的前一个图来表明这个陈述，我们可能考虑移除依赖标签，并通过颜色来表示这一方面，我们还可以通过顶点颜色来强调`igraph`的直接依赖。我们可以通过`V`和`E`函数修改顶点和边的属性：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Visualizing network data](img/2028OS_11_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![可视化网络数据](img/2028OS_11_03.jpg)'
- en: Much better! Our central topic, the `igraph` package, is highlighted in dark
    red, the two direct dependencies are marked in dark orange, and all the other
    dependencies are colored in lighter orange. Similarly, we emphasize the `Depends`
    relations in blue compared to the vast majority of other Imports connections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的中心主题，`igraph`包，以深红色突出显示，两个直接依赖项以深橙色标记，所有其他依赖项都以较浅的橙色着色。同样，我们将`Depends`关系与大多数其他`Imports`连接相比，以蓝色强调。
- en: Interactive network plots
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式网络图
- en: 'What if you do not like the order of the vertices in the preceding plot? Feel
    free to rerun the last command to produce new results, or draw with `tkplot` for
    a dynamic plot, where you can design your custom layout by dragging-and-dropping
    the vertices:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢前一个图中顶点的顺序？请随意重新运行最后一个命令以生成新的结果，或者使用`tkplot`绘制动态图，在那里你可以通过拖放顶点来设计自定义布局：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Interactive network plots](img/2028OS_11_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![交互式网络图](img/2028OS_11_04.jpg)'
- en: 'Can we do any better? Although this result is extremely useful, it lacks the
    immediate appeal of the currently trending, JavaScript-empowered interactive plots.
    So let''s recreate this interactive plot with JavaScript, right from R! `htmlwidgets`
    and the `visNetwork` package, discussed in more detail in the [Chapter 13](ch13.html
    "Chapter 13. Data Around Us"), *Data Around Us*, can help us with this task, even
    without any JavaScript knowledge. Simply pass the extracted nodes and edge datasets
    to the `visNetwork` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做得更好吗？尽管这个结果非常有用，但它缺乏目前流行的、由 JavaScript 提供支持的交互式图表的即时吸引力。所以，让我们用 JavaScript
    重新创建这个交互式图表，从 R 开始！在[第 13 章](ch13.html "第 13 章。我们周围的数据")“我们周围的数据”中详细讨论的 `htmlwidgets`
    和 `visNetwork` 包，即使没有 JavaScript 知识，也能帮助我们完成这项任务。只需将提取的节点和边数据集传递给 `visNetwork`
    函数：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Interactive network plots](img/2028OS_11_05.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![交互式网络图表](img/2028OS_11_05.jpg)'
- en: Custom plot layouts
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义图表布局
- en: 'Alternatively, we can also generate such hierarchical plots in a programmatic
    way, by drawing the denominator tree of this directed plot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以通过程序化方式生成这样的分层图表，通过绘制这个有向图的分母树：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Custom plot layouts](img/2028OS_11_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![自定义图表布局](img/2028OS_11_06.jpg)'
- en: Analyzing R package dependencies with an R package
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 R 包分析 R 包依赖关系
- en: 'As we are using R, a statistical programming environment whose most exciting
    and useful feature is its community, we might prefer to look for other, already
    implemented solutions for this research. After a quick Google search, and having
    looked up a few questions on StackOverflow or posts on [http://www.r-bloggers.com/](http://www.r-bloggers.com/),
    it''s pretty easy to find the Revolution Analytics `miniCRAN` package, which has
    some related and useful functions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是 R，这是一个统计编程环境，其最令人兴奋和有用的功能是其社区，我们可能更喜欢寻找其他已经实现的研究解决方案。经过快速 Google 搜索，并在
    StackOverflow 上查阅了一些问题，以及在 [http://www.r-bloggers.com/](http://www.r-bloggers.com/)
    上的帖子后，很容易找到 Revolution Analytics 的 `miniCRAN` 包，它包含一些相关且有用的函数：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Analyzing R package dependencies with an R package](img/2028OS_11_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用 R 包分析 R 包依赖关系](img/2028OS_11_07.jpg)'
- en: 'But let''s get back to the original question: How do we analyze network data?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到原始问题：我们如何分析网络数据？
- en: Further network analysis resources
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步的网络分析资源
- en: Besides its really impressive and useful data visualization, the `igraph` package
    has a lot more to offer. Unfortunately, this short chapter cannot provide a decent
    introduction to network analysis theory, but I suggest that you skim through the
    package documentation as it comes with useful, self-explanatory examples and good
    references.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其令人印象深刻且实用的数据可视化之外，`igraph` 包还有更多功能。不幸的是，这个简短的章节无法提供对网络分析理论的适当介绍，但我建议您浏览一下该包的文档，因为它包含有用的、自解释的示例和良好的参考。
- en: In short, network analysis provides various ways to compute centrality and density
    metrics, like we did at the beginning of this chapter, and also to identify bridges
    and simulate changes in the network; there are really powerful methods to segment
    the nodes in the network as well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，网络分析提供了各种计算中心性和密度指标的方法，就像我们在本章开头所做的那样，还可以识别桥梁和模拟网络中的变化；网络中节点分割的强大方法也很多。
- en: For example, in the *Financial Networks* chapter of the *Introduction to R for
    Quantitative Finance* book, which I coauthored, we developed R scripts to identify
    **systemically important financial institutions**(**SIFI**) in Hungary based on
    the transaction-level network data of the interbank lending market. This dataset
    and network theory help us to model and potentially predict future financial crises,
    and also to simulate the effect of central intervention.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我合著的《定量金融的 R 语言入门》一书的“*金融网络*”章节中，我们开发了 R 脚本来根据银行间借贷市场的交易级网络数据识别匈牙利中的**系统性重要金融机构**（**SIFI**）。这个数据集和网络理论帮助我们建模并可能预测未来的金融危机，以及模拟中央干预的影响。
- en: A more detailed, freely available summary on this research was presented at
    the R/Finance 2015 conference in Chicago [http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf](http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf),
    along with a Shiny application [https://bit.ly/rfin2015-hunbanks](https://bit.ly/rfin2015-hunbanks),
    and a related, simulation-based infection-model was described in the *Systemic
    Risk* chapter of the *Mastering R for Quantitative Finance* book as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在芝加哥的R/Finance 2015会议上，介绍了这项研究的更详细、免费摘要[http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf](http://www.rinfinance.com/agenda/2015/talk/GergelyDaroczi.pdf)，同时展示了一个Shiny应用程序[https://bit.ly/rfin2015-hunbanks](https://bit.ly/rfin2015-hunbanks)，并在《精通R语言进行量化金融》一书的“系统性风险”章节中描述了一个基于模拟的感染模型。
- en: The main idea behind this joint research was to identify core, peripheral, and
    semi-peripheral financial institutions based on the network formed by interbank
    lending transactions. The nodes being banks, the edges are defined as lend events
    between those, so we can interpret the bridges between periphery nodes as the
    intermediary bank between smaller banks, which usually do not lend money to each
    other directly.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这项联合研究的主要思想是根据由银行间贷款交易形成的网络，识别核心、外围和半外围金融机构。节点是银行，边被定义为这些银行之间的贷款事件，因此我们可以将外围节点之间的桥梁解释为介于小型银行之间的中介银行，这些小型银行通常不会直接相互贷款。
- en: The interesting question, after resolving some technical issues with the dataset,
    was to simulate what happens if an intermediary bank defaults, and if this unfortunate
    event might also affect other financial institutions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决数据集的一些技术问题之后，有趣的问题是模拟如果一家中介银行违约会发生什么，以及这个不幸的事件是否也可能影响其他金融机构。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This short chapter introduced a new data structure in the form of graph datasets,
    and we visualized small networks with various R packages, including static and
    interactive methods as well. In the next two chapters, we will familiarize ourselves
    with two other frequently used data types: first we will analyze temporal, then
    spatial data.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这一小节介绍了以图数据集形式的新数据结构，我们使用各种R包，包括静态和交互式方法，可视化了小型网络。在接下来的两章中，我们将熟悉两种其他常用的数据类型：首先我们将分析时间序列数据，然后是空间数据。
