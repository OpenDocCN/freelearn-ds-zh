- en: Chapter 2. Working with Projections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering projection(s) of a Shapefile or GeoJSON dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing projection(s) from a WMS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a projection definition for a Shapefile if it does not exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch setting the projection definition of a folder full of Shapefiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reprojecting a Shapefile from one projection to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with projections, in my opinion, is not too exciting but they're very
    important, and your ability to deal with them in any application is crucial.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to provide some common predata screening or transformation
    steps to get your data in shape or, better yet, in position for geospatial analysis.
    We cannot always perform analysis on multiple datasets that are in different coordinate
    systems without the risk of achieving inconsistent results, such as data positional
    inaccuracies. Therefore, it is a best practice to work on data in the same coordinate
    system, such as EPSG:4326, when working on a global scale, or use a local coordinate
    system for your region that will provide you the most accurate results.
  prefs: []
  type: TYPE_NORMAL
- en: '**European Petroleum Survey Group** or **EPSG** codes have decided to give
    all coordinate systems a number code to simplify finding and sharing projection
    information. Coordinate systems are described by their definitions, which are
    stored in text files of various formats. These text files are designed to be computer-readable
    formats, specifically for individual GIS desktop software packages, such as QGIS
    or ESRI ArcMap or for your web/scripting applications.'
  prefs: []
  type: TYPE_NORMAL
- en: The EPSG code 4326 represents **World Geographic System 1984 (WGS 84)** and
    is a **geographic coordinate system** with longitude and latitude (*x*, *y*) units
    (refer to the following image). The geographic coordinate system represents the
    Earth as a sphere, as in this image, and the unit of measurement is degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B03543_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration 1: Geographic Coordinate System ([http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html](http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html))'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type of coordinate system is a **projected coordinate system**,
    which is a two-dimensional flat plane with constant areas, lengths, or angles
    that are measured on an *x* and *y* grid. **EPSG:3857 Pseudo-Mercator** is such
    a projected coordinate system where the units are in meters with correct lengths
    but the angles and areas are distorted. In any given projected coordinate system,
    only two of the three properties, *area*, *distance*, or *angles*, can be correctly
    represented on a single map. The **Universal Transverse Mercator** (**UTM**) coordinate
    reference system divides the world into 60 zones (refer to the following image):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B03543_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration 2: Projected Coordinate System UTM ([http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#mediaviewer/File:Utm-zones.jpg](http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#mediaviewer/File:Utm-zones.jpg))'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you have to enter your Python virtual environment using the `workon
    pygeoan_cb` command.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering projection(s) of a Shapefile or GeoJSON dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that all data is stored in a coordinate system, no matter what the
    data source is. It is your job to figure this out using a simple approach outlined
    in this section. We will take a look at two different data storage types: a **Shapefile**
    and a **GeoJSON** file. These two formats contain geometries, such as points,
    lines, or polygons, and their associated attributes. For example, a tree would
    be stored as a point geometry with attributes, such as height, age, and species,
    Each of these data types store their projection data differently and, therefore,
    require different methods to discover their projection information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now a quick introduction to what a Shapefile is: a Shapefile is not a single
    file but a minimum of three files, such as `.shp`, `.shx`, and, `.dbf`, all of
    which have the same name. For example, `world_borders.shp`, `world_borders.shx`
    and `world_borders.dbf` make up one file. The `.shp` file stores geometry, `.dbf`
    stores a table of attribute values, and `.shx` is the index table that connects
    geometry to an attribute value as a lookup table.'
  prefs: []
  type: TYPE_NORMAL
- en: A Shapefile should come with a very important fourth text file called `world_borders.prj`.
    The **.prj** stands for **projection information** and contains the projection
    definition of the Shapefile in a plain text format. As crazy as it sounds, you
    can still find and download tons of data being delivered today without this `.prj`
    file. You can do this simply by opening this `.prj` file in a text editor, such
    as *Sublime Text* or *Notepad++*, where you can read about the projection definition
    in order to determine the files coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.prj` file is a plain text file that can easily be generated for the wrong
    coordinate system if you are not careful. The wrong projection definition can
    cause problems with your analysis and transformations. We will see how to correctly
    assess a Shapefile's projection information.
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON is a single file stored in plain text. The GeoJSON standard ([http://www.geojson.org](http://www.geojson.org))
    is based on the JSON standard. The coordinate reference information is, in my
    experience, often *not* included and the default is WGS 84 and EPSG:4326, where
    the coordinates are stored in the `x`, `y`, `z` format and in this *exact order*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Mixing *x* and *y* for *y*, *x* can happen and when it does, your data will
    most likely end up in the ocean, so always remember that order matters:'
  prefs: []
  type: TYPE_NORMAL
- en: '*x = longitude*'
  prefs: []
  type: TYPE_NORMAL
- en: '*y = latitude*'
  prefs: []
  type: TYPE_NORMAL
- en: '*z = height*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is how the GeoJSON CRS information looks if it is presented in
    `FeatureCollection`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing is to head over to [https://github.com/mdiener21/python-geospatial-analysis-cookbook](https://github.com/mdiener21/python-geospatial-analysis-cookbook)
    and download the entire source code and geodata in one go. The download icon is
    located on the bottom right-hand side and is labeled as **Download ZIP**. If you
    are a GitHub user, you can, of course, clone the repository. Beware that it is
    a download that''s a little over 150 MB. Inside the repository, you will find
    each chapter with the following three folders: `/geodata/` to store data, `/code/`
    to store code scripts that have been completed, and an empty folder called `/working/`
    for you to create your self-written code scripts. The structure looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The source of the data used in this recipe comes from the City of Vancouver,
    BC, Canada, which is located at [http://data.vancouver.ca/datacatalogue/index.htm](http://data.vancouver.ca/datacatalogue/index.htm)
    (Vancouver schools).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When downloading data from an Internet source, always look around for metadata
    descriptions about the projection information so that you know a little about
    your data's history and its source before you begin working with it. Most data
    today is publicly available in EPSG:4326 WGS 84 or EPSG:3857 Web Pseudo-Mercator.
    Data stemming from a government resource is most likely stored in local coordinate
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start with our Shapefile and identify the coordinate system
    it is stored in using the GDAL library that imports the OGR module:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we have assumed that your Shapefile has a `.prj` file. If not, this
    process will not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named as `ch02_01_show_shp_srs.py` in your `/ch02/working/`
    directory, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now save the file and run the `ch02_01_show_shp_srs.py` script from the command
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the preceding text print out on your screen, showing information
    on the `.prj` projection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we could also simply open the `.prj` file with a text editor and view
    this information as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we will take a look at a GeoJSON file to see the projection information
    if it's available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Determining the coordinate system of a **GeoJSON** file is a little harder
    since we must make one of two assumptions where the first case is the standard
    case and most common:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No CRS is explicitly defined inside the GeoJSON, so we assume EPSG:4326 WGS
    84 is the coordinate system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CRS is defined explicitly and is correct.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Python file named `ch02_02_show_geojson_srs.py` in your `/ch02/working/`
    directory, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The script is set up to run on the `geojson_no_crs` variable set in the GeoJSON
    `golfcourses_bc.geojson` file. The source of this data is **OpenStreetMap**, which
    is exported using the **Overpass API** that''s located at [http://overpass-turbo.eu/](http://overpass-turbo.eu/).
    Now, run the `ch02_02_show_geojson_srs.py` script and you should see this output
    for our first file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If no CRS is inside our GeoJSON file, we'll assume it has a projection of EPSG:4326\.
    To check this, you will need to look at the coordinates listed inside the file
    and see if they fall within bounds, such as `-180.0000`, `-90.0000`, `180.0000`,
    and `90.0000`. If so, we'll assume that the dataset is truly EPSG:4326 and open
    the data in QGIS to check this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, go into the code and edit line 10, change the variable from `geojson_no_crs`
    to `geojson_yes_crs`, and rerun the `ch02_02_show_geojson_srs.py` code file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now see the preceding output printed on screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Beginning with the Shapefile, we''ve used the OGR library to help us quickly
    discover the EPSG code information of our Shapefile as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin with importing the OGR module as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activate the OGR Shapefile driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Shapefile with OGR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the layer information with `GetLayer()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can get the coordinate information using the `GetSpatialRef()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, print the spatial reference system on screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The GeoJSON file was a little harder to tackle when we used the Python JSON
    module to look for the `crs` key and print out its value on the screen, if it
    existed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could have simply replaced the first example code with the GeoJSON driver
    and we would get the same result. However, not all GeoJSON files include projection
    information. The OGR driver will always output WGS 84 as the coordinate system
    by default which, in our `no_geojson_crs.geojson` example file, is wrong. This
    can lead to confusion for new users. The important thing to note is to check your
    data, have a look at the coordinate values, and see if they fit in a defined coordinate
    range of values. To explore codes, or if you enter a code that you have and want
    to see the area it covers on a live web map, refer to [http://epsg.io](http://epsg.io).
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll import the standard Python JSON module, and then set two variables
    to store both our GeoJSON files. Next, we'll open one file, the `golfcourses_bc.geojson`
    file, and load the GeoJSON file into a Python object. Then, all we need to do
    is check to see whether the `crs` key is in the GeoJSON; if it is, we'll print
    out its value. If not, we'll simply print to screen that `crs` is not available
    and the GeoJSON data type.
  prefs: []
  type: TYPE_NORMAL
- en: The GeoJSON default CRS is WGS 84 EPSG:4326, which means that we are dealing
    with latitude and longitude values. The values must fall within the bounds of
    `-180.0000`, `-90.0000`, `180.0000`, and `90.0000` to qualify.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some projection definition examples for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the ESRI Well-Known Text (stored with Shapefile as `ShapefileName.prj`)
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code for the OGC Well-Known Text of the same coordinate system as EPSG:4326
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code for the Proj4 format, which also shows `EPSG:4326`, is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The web page at [http://www.spatialreference.org](http://www.spatialreference.org)
    is a great place to get coordinates for any projection you desire by simply selecting
    the destination coordinate system that you like, zooming in on the map, and then
    copying and pasting the coordinates. Later on, we will use the [http://spatialreference.org/](http://spatialreference.org/)
    API to get the EPSG definition to create our own `.prj` file for a Shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: Listing projection(s) from a WMS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Web Mapping Service** (**WMS)**, which can be found at [https://en.wikipedia.org/wiki/Web_Map_Service](https://en.wikipedia.org/wiki/Web_Map_Service),
    is fun since most service providers provide data in several coordinate systems
    and you can then specify which one you would like. However, you can''t reproject
    or transform the WMS into some other system that the service provider does not
    provide, which means that you can only use the coordinate system that is provided.
    The following is an example of a WMS `getCapabilities` request ([http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities](http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities)),
    showing a list of the five available coordinate systems from a WMS service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Listing projection(s) from a WMS server](img/B03543_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The WMS service URL that we will use is [http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities](http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities).
    This is from the British Geological Survey, titled *OneGeology Europe geology*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a list of WMS servers that are available worldwide, refer to Skylab Mobile
    Systems at [http://www.skylab-mobilesystems.com/en/wms_serverlist.html](http://www.skylab-mobilesystems.com/en/wms_serverlist.html).
    Also, take a look at [http://geopole.org/](http://geopole.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a library called OWSLib. This library is a great package for working
    with OGC web services such as WMS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through these steps to retrieve the projections that a WMS server
    provides and print the available EPSG codes to screen:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named `ch02_03_show_wms_srs.py` in your `/ch02/code/working/`
    directory, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the `ch02_03_show_wms_srs.py` script and you should see the following
    screen output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Determining information on the WMS projection involves using the OWSLib library.
    This is quite a powerful way to get all kinds of OGC web service information from
    your client. The code simply takes in the WMS URL to retrieve the WMS information.
    The content of the response is called, and we are able to access the `crsOptions`
    attribute to list out all the available EPSG codes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a projection definition for a Shapefile if it does not exist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You recently downloaded a Shapefile from an Internet resource and saw that the
    `.prj` file was not included. You do know, however, that the data is stored in
    the EPSG:4326 coordinate system as stated on the website from where you downloaded
    the data. Now the following code will create a new `.prj` file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start up your Python virtual environment with the `workon pygeo_analysis_cookbook`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will take you through creating a new `.prj` file
    to accompany our Shapefile. The `.prj` extension is necessary for many spatial
    operations performed by a desktop GIS, web service, or script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named `ch02_04_write_prj_file.py` in your `/ch02/code/working/`
    directory and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the `ch02_04_write_prj_file.py` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following screen output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside your folder, you should see a new `.prj` file created with the same name
    as the Shapefile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first wrote a function to fetch our projection definition text using the
    [http://spatialreference.org/](http://spatialreference.org/) API by passing the
    EPSG code value. The function returns a textual description of the EPSG code information
    using the `esriwkt` formatting style, indicating ESRI Well-Known Text, which is
    the format that the ESRI software uses to store the `.prj` file information.
  prefs: []
  type: TYPE_NORMAL
- en: Then we need to input the Shapefile name because the filename of `.prj` must
    be equal to the Shapefile name.
  prefs: []
  type: TYPE_NORMAL
- en: In the last step, we'll create the `.prj` file using `shp_filename` that is
    specified, and call the function that we wrote to get the text definition of the
    coordinate reference system.
  prefs: []
  type: TYPE_NORMAL
- en: Batch setting the projection definition of a folder full of Shapefiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with one Shapefile is fine but working with tens or hundreds of files
    is something else. In such a scenario, we'll need automation to get a job done
    fast.
  prefs: []
  type: TYPE_NORMAL
- en: We have a folder that contains several Shapefiles that are all in the same coordinate
    system but do not have a `.prj` file. We want to create a `.prj` file for each
    Shapefile in the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: This script is a modified version of the previous code example that could write
    a `.prj` file for a single Shapefile into a batch process that can run over several
    Shapefiles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a folder with many Shapefiles and we would like to create a new `.prj`
    file for each Shapefile in this folder, so let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named `ch02_05_batch_shp_prj.py` in your `/ch02/code/working/`
    directory and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the standard `urllib` Python module, we can access an EPSG code via the
    Web and write this definition to a `.prj` file. We need to create a list of Shapefiles
    that we want to define `.prj` for and then create a `.prj` file for each Shapefile
    in this list.
  prefs: []
  type: TYPE_NORMAL
- en: The `get_epsg_code(epsg)` function returns the ESPG code text definition that
    we need. The `write_prj_file(shp_filename, epsg)` function takes two parameters,
    the Shapefile name and the EPSG code, writing out the `.prj` file to disk.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll create an empty list to store the list of Shapefiles, switch to
    the directory where the Shapefiles are stored, and then list all the Shapefiles
    that currently in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Our `for` loop then populates the Shapefile list with the filenames without
    the `.shp` extension. Finally, the last `for` loop takes us through each Shapefile
    and calls our function to write each `.prj` file for each Shapefile in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Reprojecting a Shapefile from one projection to another
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with spatial data from multiple sources leads to data that's most likely
    from multiple regions on Earth with multiple coordinate systems. To perform consistent
    spatial analysis, we should transform all our input data into the same coordinate
    system. This means reprojecting your Shapefile into your chosen working coordinate
    system.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will reproject a single Shapefile from ESPG:4326 into a web
    mercator system EPSG:3857 for use in a web application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our goal is to reproject a given Shapefile from one coordinate system to another;
    the steps to do this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named `ch02_06_re_project_shp.py` in your `/ch02/code/working/`
    directory and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can run our code from the command line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have a new Shapefile called `UTM_Zone_Boundaries_3857.shp` that is in
    the `EPSG:3857` coordinate system and is ready for further use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `osgeo`, `ogr`, and `osr` modules do the heavy lifting and the code required
    to reproject a Shapefile is quite verbose. It works by going through each geometry
    and transforming it individually into the new coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the driver for the ESRI Shapefile, we'll work at setting our input
    and output **Spatial Reference System** (**SRS**) so that we can transform the
    two.
  prefs: []
  type: TYPE_NORMAL
- en: We need to copy each feature's geometry and its attributes from the old Shapefile
    into the new one as we transform each geometry. Finally, we'll close the input
    and output Shapefile with the `Destroy()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using code is not always the best or fastest way to reproject a Shapefile.
    Another method that you could use is the `ogr2ogr` command-line tool that will
    simply reproject a Shapefile in one line. You could pipe this one-liner into a
    Python script and batch reproject many Shapefiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The GDAL library comes with several other very useful and helpful command-line
    functions that are worth checking out.
  prefs: []
  type: TYPE_NORMAL
