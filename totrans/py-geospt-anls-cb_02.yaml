- en: Chapter 2. Working with Projections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。处理投影
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Discovering projection(s) of a Shapefile or GeoJSON dataset
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现Shapefile或GeoJSON数据集的投影（s）
- en: Listing projection(s) from a WMS server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从WMS服务器列出投影（s）
- en: Creating a projection definition for a Shapefile if it does not exist
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Shapefile不存在，为其创建投影定义
- en: Batch setting the projection definition of a folder full of Shapefiles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量设置一个充满Shapefiles文件夹的投影定义
- en: Reprojecting a Shapefile from one projection to another
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Shapefile从一个投影重新投影到另一个投影
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Working with projections, in my opinion, is not too exciting but they're very
    important, and your ability to deal with them in any application is crucial.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的看法中，处理投影并不太令人兴奋，但它们非常重要，并且您在任何应用程序中处理它们的能力至关重要。
- en: The goal of this chapter is to provide some common predata screening or transformation
    steps to get your data in shape or, better yet, in position for geospatial analysis.
    We cannot always perform analysis on multiple datasets that are in different coordinate
    systems without the risk of achieving inconsistent results, such as data positional
    inaccuracies. Therefore, it is a best practice to work on data in the same coordinate
    system, such as EPSG:4326, when working on a global scale, or use a local coordinate
    system for your region that will provide you the most accurate results.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是提供一些常见的预数据筛选或转换步骤，以便将您的数据整理好，或者更好的是，为地理空间分析定位。我们无法总是对处于不同坐标系统中的多个数据集进行分析，而不存在得到不一致结果的风险，例如数据位置不准确。因此，当在全局范围内工作时，最好在相同的坐标系中工作，如EPSG:4326，或者使用为您的地区提供最精确结果的本地坐标系。
- en: '**European Petroleum Survey Group** or **EPSG** codes have decided to give
    all coordinate systems a number code to simplify finding and sharing projection
    information. Coordinate systems are described by their definitions, which are
    stored in text files of various formats. These text files are designed to be computer-readable
    formats, specifically for individual GIS desktop software packages, such as QGIS
    or ESRI ArcMap or for your web/scripting applications.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**欧洲石油调查组**或**EPSG**代码已决定为所有坐标系分配一个数字代码，以简化投影信息的查找和共享。坐标系通过其定义来描述，这些定义存储在各种格式的文本文件中。这些文本文件旨在成为计算机可读格式，特别是为单个GIS桌面软件包，如QGIS或ESRI
    ArcMap或为您的Web/脚本应用程序设计的。'
- en: The EPSG code 4326 represents **World Geographic System 1984 (WGS 84)** and
    is a **geographic coordinate system** with longitude and latitude (*x*, *y*) units
    (refer to the following image). The geographic coordinate system represents the
    Earth as a sphere, as in this image, and the unit of measurement is degrees.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: EPSG代码4326代表**1984年世界地理系统（WGS 84**）是一个**地理坐标系**，具有经纬度(*x*，*y*)单位（参见图下所示）。地理坐标系将地球表示为一个球体，如图所示，测量单位是度。
- en: '![Introduction](img/B03543_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/B03543_02_01.jpg)'
- en: 'Illustration 1: Geographic Coordinate System ([http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html](http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html))'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：地理坐标系([http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html](http://kartoweb.itc.nl/geometrics/coordinate%20systems/coordsys.html))
- en: 'The second type of coordinate system is a **projected coordinate system**,
    which is a two-dimensional flat plane with constant areas, lengths, or angles
    that are measured on an *x* and *y* grid. **EPSG:3857 Pseudo-Mercator** is such
    a projected coordinate system where the units are in meters with correct lengths
    but the angles and areas are distorted. In any given projected coordinate system,
    only two of the three properties, *area*, *distance*, or *angles*, can be correctly
    represented on a single map. The **Universal Transverse Mercator** (**UTM**) coordinate
    reference system divides the world into 60 zones (refer to the following image):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种坐标系是一种**投影坐标系**，它是一个具有恒定面积、长度或角度的二维平面，这些角度是在*x*和*y*网格上测量的。**EPSG:3857 Pseudo-Mercator**就是这样一种投影坐标系，其中单位是米，长度正确，但角度和面积是扭曲的。在任何给定的投影坐标系中，只有三个属性中的两个，即*面积*、*距离*或*角度*，可以在单个地图上正确表示。**通用横轴墨卡托**（**UTM**）坐标系将世界划分为60个区域（参见图下所示）：
- en: '![Introduction](img/B03543_02_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/B03543_02_02.jpg)'
- en: 'Illustration 2: Projected Coordinate System UTM ([http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#mediaviewer/File:Utm-zones.jpg](http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#mediaviewer/File:Utm-zones.jpg))'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you have to enter your Python virtual environment using the `workon
    pygeoan_cb` command.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Discovering projection(s) of a Shapefile or GeoJSON dataset
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that all data is stored in a coordinate system, no matter what the
    data source is. It is your job to figure this out using a simple approach outlined
    in this section. We will take a look at two different data storage types: a **Shapefile**
    and a **GeoJSON** file. These two formats contain geometries, such as points,
    lines, or polygons, and their associated attributes. For example, a tree would
    be stored as a point geometry with attributes, such as height, age, and species,
    Each of these data types store their projection data differently and, therefore,
    require different methods to discover their projection information.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Now a quick introduction to what a Shapefile is: a Shapefile is not a single
    file but a minimum of three files, such as `.shp`, `.shx`, and, `.dbf`, all of
    which have the same name. For example, `world_borders.shp`, `world_borders.shx`
    and `world_borders.dbf` make up one file. The `.shp` file stores geometry, `.dbf`
    stores a table of attribute values, and `.shx` is the index table that connects
    geometry to an attribute value as a lookup table.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: A Shapefile should come with a very important fourth text file called `world_borders.prj`.
    The **.prj** stands for **projection information** and contains the projection
    definition of the Shapefile in a plain text format. As crazy as it sounds, you
    can still find and download tons of data being delivered today without this `.prj`
    file. You can do this simply by opening this `.prj` file in a text editor, such
    as *Sublime Text* or *Notepad++*, where you can read about the projection definition
    in order to determine the files coordinate system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.prj` file is a plain text file that can easily be generated for the wrong
    coordinate system if you are not careful. The wrong projection definition can
    cause problems with your analysis and transformations. We will see how to correctly
    assess a Shapefile's projection information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON is a single file stored in plain text. The GeoJSON standard ([http://www.geojson.org](http://www.geojson.org))
    is based on the JSON standard. The coordinate reference information is, in my
    experience, often *not* included and the default is WGS 84 and EPSG:4326, where
    the coordinates are stored in the `x`, `y`, `z` format and in this *exact order*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Mixing *x* and *y* for *y*, *x* can happen and when it does, your data will
    most likely end up in the ocean, so always remember that order matters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '*x = longitude*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '*y = latitude*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '*z = height*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is how the GeoJSON CRS information looks if it is presented in
    `FeatureCollection`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 GeoJSON 的 CRS 信息以 `FeatureCollection` 的形式呈现，如下所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The first thing is to head over to [https://github.com/mdiener21/python-geospatial-analysis-cookbook](https://github.com/mdiener21/python-geospatial-analysis-cookbook)
    and download the entire source code and geodata in one go. The download icon is
    located on the bottom right-hand side and is labeled as **Download ZIP**. If you
    are a GitHub user, you can, of course, clone the repository. Beware that it is
    a download that''s a little over 150 MB. Inside the repository, you will find
    each chapter with the following three folders: `/geodata/` to store data, `/code/`
    to store code scripts that have been completed, and an empty folder called `/working/`
    for you to create your self-written code scripts. The structure looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，前往 [https://github.com/mdiener21/python-geospatial-analysis-cookbook](https://github.com/mdiener21/python-geospatial-analysis-cookbook)
    并一次性下载整个源代码和地理数据。下载图标位于右下角，标记为 **Download ZIP**。如果你是 GitHub 用户，当然可以克隆仓库。请注意，这是一个超过
    150 MB 的下载。在仓库内部，你会找到每个章节，包括以下三个文件夹：`/geodata/` 用于存储数据，`/code/` 用于存储已完成的代码脚本，以及一个名为
    `/working/` 的空文件夹，供你创建自己的代码脚本。结构如下所示：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The source of the data used in this recipe comes from the City of Vancouver,
    BC, Canada, which is located at [http://data.vancouver.ca/datacatalogue/index.htm](http://data.vancouver.ca/datacatalogue/index.htm)
    (Vancouver schools).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的数据来源是加拿大不列颠哥伦比亚省温哥华市，位于 [http://data.vancouver.ca/datacatalogue/index.htm](http://data.vancouver.ca/datacatalogue/index.htm)（温哥华学校）。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When downloading data from an Internet source, always look around for metadata
    descriptions about the projection information so that you know a little about
    your data's history and its source before you begin working with it. Most data
    today is publicly available in EPSG:4326 WGS 84 or EPSG:3857 Web Pseudo-Mercator.
    Data stemming from a government resource is most likely stored in local coordinate
    systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当从互联网源下载数据时，总是要寻找有关投影信息的元数据描述，这样在开始处理数据之前，你就能对数据的历史和来源有所了解。如今，大多数数据都以 EPSG:4326
    WGS 84 或 EPSG:3857 Web Pseudo-Mercator 的形式公开可用。来自政府资源的数据很可能存储在本地区域坐标系中。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We are going to start with our Shapefile and identify the coordinate system
    it is stored in using the GDAL library that imports the OGR module:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们的 Shapefile 开始，并使用导入 OGR 模块的 GDAL 库来识别其存储的坐标系：
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we have assumed that your Shapefile has a `.prj` file. If not, this
    process will not work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们假设你的 Shapefile 有一个 `.prj` 文件。如果没有，这个过程将无法工作。
- en: 'Create a new Python file named as `ch02_01_show_shp_srs.py` in your `/ch02/working/`
    directory, and add the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `/ch02/working/` 目录中创建一个名为 `ch02_01_show_shp_srs.py` 的新 Python 文件，并添加以下代码：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now save the file and run the `ch02_01_show_shp_srs.py` script from the command
    line:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存文件，并在命令行中运行 `ch02_01_show_shp_srs.py` 脚本：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see the preceding text print out on your screen, showing information
    on the `.prj` projection.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在屏幕上看到前面的文本打印出来，显示 `.prj` 投影的信息。
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we could also simply open the `.prj` file with a text editor and view
    this information as well.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们也可以简单地使用文本编辑器打开 `.prj` 文件，并查看这些信息。
- en: Now, we will take a look at a GeoJSON file to see the projection information
    if it's available.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将查看一个 GeoJSON 文件，看看是否有投影信息可用。
- en: 'Determining the coordinate system of a **GeoJSON** file is a little harder
    since we must make one of two assumptions where the first case is the standard
    case and most common:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定 GeoJSON 文件的坐标系稍微困难一些，因为我们必须做出两种假设，第一种情况是标准情况且最常见：
- en: No CRS is explicitly defined inside the GeoJSON, so we assume EPSG:4326 WGS
    84 is the coordinate system.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: GeoJSON 内部没有明确定义任何 CRS，所以我们假设坐标系是 EPSG:4326 WGS 84。
- en: CRS is defined explicitly and is correct.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 坐标参考系统（CRS）被明确定义且正确无误。
- en: 'Create a new Python file named `ch02_02_show_geojson_srs.py` in your `/ch02/working/`
    directory, and add the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `/ch02/working/` 目录中创建一个名为 `ch02_02_show_geojson_srs.py` 的新 Python 文件，并添加以下代码：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The script is set up to run on the `geojson_no_crs` variable set in the GeoJSON
    `golfcourses_bc.geojson` file. The source of this data is **OpenStreetMap**, which
    is exported using the **Overpass API** that''s located at [http://overpass-turbo.eu/](http://overpass-turbo.eu/).
    Now, run the `ch02_02_show_geojson_srs.py` script and you should see this output
    for our first file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本被设置为在 GeoJSON `golfcourses_bc.geojson` 文件中设置的 `geojson_no_crs` 变量上运行。这些数据来源于
    **OpenStreetMap**，它使用位于 [http://overpass-turbo.eu/](http://overpass-turbo.eu/)
    的 **Overpass API** 导出。现在，运行 `ch02_02_show_geojson_srs.py` 脚本，你应该会看到我们第一个文件的这个输出：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If no CRS is inside our GeoJSON file, we'll assume it has a projection of EPSG:4326\.
    To check this, you will need to look at the coordinates listed inside the file
    and see if they fall within bounds, such as `-180.0000`, `-90.0000`, `180.0000`,
    and `90.0000`. If so, we'll assume that the dataset is truly EPSG:4326 and open
    the data in QGIS to check this.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们的 GeoJSON 文件中没有 CRS，我们将假设它具有 EPSG:4326 的投影。为了检查这一点，你需要查看文件内列出的坐标，看看它们是否在范围内，例如
    `-180.0000`、`-90.0000`、`180.0000` 和 `90.0000`。如果是这样，我们将假设数据集确实是 EPSG:4326，并在 QGIS
    中打开数据以进行检查。
- en: 'Now, go into the code and edit line 10, change the variable from `geojson_no_crs`
    to `geojson_yes_crs`, and rerun the `ch02_02_show_geojson_srs.py` code file:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入代码并编辑第 10 行，将变量从 `geojson_no_crs` 更改为 `geojson_yes_crs`，然后重新运行 `ch02_02_show_geojson_srs.py`
    代码文件：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should now see the preceding output printed on screen.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该看到前面的输出打印在屏幕上。
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Beginning with the Shapefile, we''ve used the OGR library to help us quickly
    discover the EPSG code information of our Shapefile as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Shapefile 开始，我们使用了 OGR 库来帮助我们快速发现 Shapefile 的 EPSG 代码信息，如下所示：
- en: 'Begin with importing the OGR module as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式导入 OGR 模块：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Activate the OGR Shapefile driver:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活 OGR Shapefile 驱动器：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the Shapefile with OGR:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 OGR 打开 Shapefile：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Access the layer information with `GetLayer()`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `GetLayer()` 方法访问图层信息：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can get the coordinate information using the `GetSpatialRef()` function:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `GetSpatialRef()` 函数获取坐标信息：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, print the spatial reference system on screen:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在屏幕上打印空间参考系统：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The GeoJSON file was a little harder to tackle when we used the Python JSON
    module to look for the `crs` key and print out its value on the screen, if it
    existed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Python JSON 模块查找 `crs` 键并打印其值到屏幕上时，GeoJSON 文件有点难以处理，如果它存在的话。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could have simply replaced the first example code with the GeoJSON driver
    and we would get the same result. However, not all GeoJSON files include projection
    information. The OGR driver will always output WGS 84 as the coordinate system
    by default which, in our `no_geojson_crs.geojson` example file, is wrong. This
    can lead to confusion for new users. The important thing to note is to check your
    data, have a look at the coordinate values, and see if they fit in a defined coordinate
    range of values. To explore codes, or if you enter a code that you have and want
    to see the area it covers on a live web map, refer to [http://epsg.io](http://epsg.io).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将第一个示例代码替换为 GeoJSON 驱动器，我们会得到相同的结果。然而，并非所有 GeoJSON 文件都包含投影信息。OGR 驱动器默认会输出
    WGS 84 作为坐标系，在我们的 `no_geojson_crs.geojson` 示例文件中，这是错误的。这可能会让新用户感到困惑。需要注意的是要检查你的数据，查看坐标值，看看它们是否在一个定义的坐标值范围内。要探索代码，或者如果你输入了一个你有的代码并想看到它在实时网络地图上覆盖的区域，请参考
    [http://epsg.io](http://epsg.io)。
- en: First, we'll import the standard Python JSON module, and then set two variables
    to store both our GeoJSON files. Next, we'll open one file, the `golfcourses_bc.geojson`
    file, and load the GeoJSON file into a Python object. Then, all we need to do
    is check to see whether the `crs` key is in the GeoJSON; if it is, we'll print
    out its value. If not, we'll simply print to screen that `crs` is not available
    and the GeoJSON data type.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将导入标准的 Python JSON 模块，并设置两个变量来存储我们的两个 GeoJSON 文件。然后，我们将打开一个文件，即 `golfcourses_bc.geojson`
    文件，并将 GeoJSON 文件加载到 Python 对象中。然后，我们只需要检查 `crs` 键是否在 GeoJSON 中；如果是，我们将打印其值。如果不是，我们将在屏幕上简单地打印出
    `crs` 不可用和 GeoJSON 数据类型。
- en: The GeoJSON default CRS is WGS 84 EPSG:4326, which means that we are dealing
    with latitude and longitude values. The values must fall within the bounds of
    `-180.0000`, `-90.0000`, `180.0000`, and `90.0000` to qualify.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 默认的坐标系是 WGS 84 EPSG:4326，这意味着我们处理的是经纬度值。这些值必须落在 `-180.0000`、`-90.0000`、`180.0000`
    和 `90.0000` 的范围内才能符合条件。
- en: There's more...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Here are some projection definition examples for your reference:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些投影定义示例供你参考：
- en: 'The code for the ESRI Well-Known Text (stored with Shapefile as `ShapefileName.prj`)
    is as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Shapefile作为`ShapefileName.prj`存储的ESRI Well-Known Text代码如下：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The code for the OGC Well-Known Text of the same coordinate system as EPSG:4326
    is as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与EPSG:4326坐标系统相同的OGC Well-Known Text代码如下：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code for the Proj4 format, which also shows `EPSG:4326`, is as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Proj4格式的代码，也显示了`EPSG:4326`，如下所示：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The web page at [http://www.spatialreference.org](http://www.spatialreference.org)
    is a great place to get coordinates for any projection you desire by simply selecting
    the destination coordinate system that you like, zooming in on the map, and then
    copying and pasting the coordinates. Later on, we will use the [http://spatialreference.org/](http://spatialreference.org/)
    API to get the EPSG definition to create our own `.prj` file for a Shapefile.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://www.spatialreference.org](http://www.spatialreference.org)的网页上，你可以通过简单地选择你喜欢的目标坐标系统，在地图上放大，然后复制和粘贴坐标来获取任何投影的坐标。稍后，我们将使用[http://spatialreference.org/](http://spatialreference.org/)
    API来获取EPSG定义，为Shapefile创建我们自己的`.prj`文件。
- en: Listing projection(s) from a WMS server
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从WMS服务器列出投影
- en: 'The **Web Mapping Service** (**WMS)**, which can be found at [https://en.wikipedia.org/wiki/Web_Map_Service](https://en.wikipedia.org/wiki/Web_Map_Service),
    is fun since most service providers provide data in several coordinate systems
    and you can then specify which one you would like. However, you can''t reproject
    or transform the WMS into some other system that the service provider does not
    provide, which means that you can only use the coordinate system that is provided.
    The following is an example of a WMS `getCapabilities` request ([http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities](http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities)),
    showing a list of the five available coordinate systems from a WMS service:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web Mapping Service**（WMS），可以在[https://en.wikipedia.org/wiki/Web_Map_Service](https://en.wikipedia.org/wiki/Web_Map_Service)找到，很有趣，因为大多数服务提供商提供的数据支持多个坐标系统，你可以指定你想要的哪一个。然而，你不能将WMS重新投影或转换到服务提供商不提供的其他系统，这意味着你只能使用提供的服务坐标系统。以下是一个WMS
    `getCapabilities`请求的示例（[http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities](http://gis.ktn.gv.at/arcgis/services/INSPIRE/INSPIRE/MapServer/WmsServer?service=wms&version=1.3.0&request=getcapabilities)），显示了来自WMS服务的五个可用坐标系统列表：'
- en: '![Listing projection(s) from a WMS server](img/B03543_02_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![从WMS服务器列出投影](img/B03543_02_04.jpg)'
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The WMS service URL that we will use is [http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities](http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities).
    This is from the British Geological Survey, titled *OneGeology Europe geology*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的WMS服务URL是[http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities](http://ogc.bgs.ac.uk/cgi-bin/BGS_1GE_Geology/wms?service=WMS&version=1.3.0&request=GetCapabilities)。这是来自英国地质调查局，标题为*OneGeology
    Europe geology*。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a list of WMS servers that are available worldwide, refer to Skylab Mobile
    Systems at [http://www.skylab-mobilesystems.com/en/wms_serverlist.html](http://www.skylab-mobilesystems.com/en/wms_serverlist.html).
    Also, take a look at [http://geopole.org/](http://geopole.org/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取全球可用的WMS服务器列表，请参考Skylab Mobile Systems的[http://www.skylab-mobilesystems.com/en/wms_serverlist.html](http://www.skylab-mobilesystems.com/en/wms_serverlist.html)。还可以查看[http://geopole.org/](http://geopole.org/)。
- en: 'We will use a library called OWSLib. This library is a great package for working
    with OGC web services such as WMS, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为OWSLib的库。这个库是一个处理OGC网络服务（如WMS）的出色包，如下所示：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s go through these steps to retrieve the projections that a WMS server
    provides and print the available EPSG codes to screen:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤检索WMS服务器提供的投影，并将可用的EPSG代码打印到屏幕上：
- en: 'Create a new Python file named `ch02_03_show_wms_srs.py` in your `/ch02/code/working/`
    directory, and add the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`/ch02/code/working/`目录下创建一个名为`ch02_03_show_wms_srs.py`的新Python文件，并添加以下代码：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, run the `ch02_03_show_wms_srs.py` script and you should see the following
    screen output:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`ch02_03_show_wms_srs.py`脚本，你应该会看到以下屏幕输出：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Determining information on the WMS projection involves using the OWSLib library.
    This is quite a powerful way to get all kinds of OGC web service information from
    your client. The code simply takes in the WMS URL to retrieve the WMS information.
    The content of the response is called, and we are able to access the `crsOptions`
    attribute to list out all the available EPSG codes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在WMS投影中确定信息涉及使用OWSLib库。这是一种相当强大的方式，可以从您的客户端获取各种OGC网络服务信息。代码简单地接收WMS URL以检索WMS信息。响应的内容被调用，我们能够访问`crsOptions`属性以列出所有可用的EPSG代码。
- en: Creating a projection definition for a Shapefile if it does not exist
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果不存在，为Shapefile创建投影定义
- en: You recently downloaded a Shapefile from an Internet resource and saw that the
    `.prj` file was not included. You do know, however, that the data is stored in
    the EPSG:4326 coordinate system as stated on the website from where you downloaded
    the data. Now the following code will create a new `.prj` file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您最近从互联网资源下载了一个Shapefile，并看到没有包含`.prj`文件。然而，您知道数据存储在网站所述的EPSG:4326坐标系中。现在以下代码将创建一个新的`.prj`文件。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Start up your Python virtual environment with the `workon pygeo_analysis_cookbook`
    command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`workon pygeo_analysis_cookbook`命令启动您的Python虚拟环境：
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In the following steps, we will take you through creating a new `.prj` file
    to accompany our Shapefile. The `.prj` extension is necessary for many spatial
    operations performed by a desktop GIS, web service, or script:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将向您展示如何创建一个新的`.prj`文件以配合我们的Shapefile。`.prj`扩展名对于桌面GIS、网络服务或脚本执行的大多数空间操作都是必要的：
- en: 'Create a new Python file named `ch02_04_write_prj_file.py` in your `/ch02/code/working/`
    directory and add the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`/ch02/code/working/`目录中创建一个名为`ch02_04_write_prj_file.py`的新Python文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, run the `ch02_04_write_prj_file.py` script:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行`ch02_04_write_prj_file.py`脚本：
- en: '[PRE20]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see the following screen output:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下屏幕输出：
- en: '[PRE21]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Inside your folder, you should see a new `.prj` file created with the same name
    as the Shapefile.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的文件夹内，您应该看到一个与Shapefile同名的新`.prj`文件被创建。
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first wrote a function to fetch our projection definition text using the
    [http://spatialreference.org/](http://spatialreference.org/) API by passing the
    EPSG code value. The function returns a textual description of the EPSG code information
    using the `esriwkt` formatting style, indicating ESRI Well-Known Text, which is
    the format that the ESRI software uses to store the `.prj` file information.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先编写了一个函数，通过传递EPSG代码值使用[http://spatialreference.org/](http://spatialreference.org/)
    API来获取我们的投影定义文本。该函数使用`esriwkt`格式化样式返回EPSG代码信息的文本描述，这表示ESRI Well-Known Text，这是ESRI软件用于存储`.prj`文件信息的格式。
- en: Then we need to input the Shapefile name because the filename of `.prj` must
    be equal to the Shapefile name.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要输入Shapefile名称，因为`.prj`文件的文件名必须与Shapefile名称相等。
- en: In the last step, we'll create the `.prj` file using `shp_filename` that is
    specified, and call the function that we wrote to get the text definition of the
    coordinate reference system.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，我们将使用指定的`shp_filename`创建`.prj`文件，并调用我们编写的获取坐标参考系统文本定义的函数。
- en: Batch setting the projection definition of a folder full of Shapefiles
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批量设置充满Shapefile的文件夹的投影定义
- en: Working with one Shapefile is fine but working with tens or hundreds of files
    is something else. In such a scenario, we'll need automation to get a job done
    fast.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个Shapefile一起工作是可以的，但与成百上千个文件一起工作就完全是另一回事了。在这种情况下，我们需要自动化来快速完成任务。
- en: We have a folder that contains several Shapefiles that are all in the same coordinate
    system but do not have a `.prj` file. We want to create a `.prj` file for each
    Shapefile in the current directory.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含几个Shapefile的文件夹，这些Shapefile都在同一个坐标系中，但没有`.prj`文件。我们希望为当前目录中的每个Shapefile创建一个`.prj`文件。
- en: This script is a modified version of the previous code example that could write
    a `.prj` file for a single Shapefile into a batch process that can run over several
    Shapefiles.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本是对先前代码示例的修改版本，可以将单个Shapefile的`.prj`文件写入可以运行在多个Shapefile上的批处理过程。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have a folder with many Shapefiles and we would like to create a new `.prj`
    file for each Shapefile in this folder, so let''s get started:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含许多Shapefile的文件夹，我们希望为这个文件夹中的每个Shapefile创建一个新的`.prj`文件，让我们开始吧：
- en: 'Create a new Python file named `ch02_05_batch_shp_prj.py` in your `/ch02/code/working/`
    directory and add the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`/ch02/code/working/`目录下创建一个名为`ch02_05_batch_shp_prj.py`的新Python文件，并添加以下代码：
- en: '[PRE22]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using the standard `urllib` Python module, we can access an EPSG code via the
    Web and write this definition to a `.prj` file. We need to create a list of Shapefiles
    that we want to define `.prj` for and then create a `.prj` file for each Shapefile
    in this list.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准的`urllib` Python模块，我们可以通过Web访问EPSG代码并将其写入`.prj`文件。我们需要创建一个包含我们想要定义`.prj`的Shapefile的列表，然后为列表中的每个Shapefile创建一个`.prj`文件。
- en: The `get_epsg_code(epsg)` function returns the ESPG code text definition that
    we need. The `write_prj_file(shp_filename, epsg)` function takes two parameters,
    the Shapefile name and the EPSG code, writing out the `.prj` file to disk.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_epsg_code(epsg)`函数返回我们需要的ESPG代码文本定义。`write_prj_file(shp_filename, epsg)`函数接受两个参数，Shapefile名称和EPSG代码，将`.prj`文件写入磁盘。'
- en: Next, we'll create an empty list to store the list of Shapefiles, switch to
    the directory where the Shapefiles are stored, and then list all the Shapefiles
    that currently in this directory.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个空列表来存储Shapefile列表，切换到存储Shapefile的目录，然后列出当前目录中所有现有的Shapefile。
- en: Our `for` loop then populates the Shapefile list with the filenames without
    the `.shp` extension. Finally, the last `for` loop takes us through each Shapefile
    and calls our function to write each `.prj` file for each Shapefile in the list.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`for`循环将Shapefile列表填充为不带`.shp`扩展名的文件名。最后，最后一个`for`循环将遍历每个Shapefile并调用我们的函数为列表中的每个Shapefile写入`.prj`文件。
- en: Reprojecting a Shapefile from one projection to another
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个投影到另一个投影Shapefile
- en: Working with spatial data from multiple sources leads to data that's most likely
    from multiple regions on Earth with multiple coordinate systems. To perform consistent
    spatial analysis, we should transform all our input data into the same coordinate
    system. This means reprojecting your Shapefile into your chosen working coordinate
    system.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 处理来自多个来源的空间数据会导致数据很可能来自地球上的多个区域，具有多个坐标系。为了执行一致的空间分析，我们应该将所有输入数据转换到相同的坐标系。这意味着将你的Shapefile重新投影到所选的工作坐标系。
- en: In this recipe, we will reproject a single Shapefile from ESPG:4326 into a web
    mercator system EPSG:3857 for use in a web application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将把单个Shapefile从EPSG:4326重新投影到网络墨卡托系统EPSG:3857，以便在Web应用程序中使用。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our goal is to reproject a given Shapefile from one coordinate system to another;
    the steps to do this are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将给定的Shapefile从一个坐标系重新投影到另一个坐标系；完成此操作的步骤如下：
- en: 'Create a new Python file named `ch02_06_re_project_shp.py` in your `/ch02/code/working/`
    directory and add the following code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`/ch02/code/working/`目录下创建一个名为`ch02_06_re_project_shp.py`的新Python文件，并添加以下代码：
- en: '[PRE23]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we can run our code from the command line as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下方式从命令行运行我们的代码：
- en: '[PRE24]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We now have a new Shapefile called `UTM_Zone_Boundaries_3857.shp` that is in
    the `EPSG:3857` coordinate system and is ready for further use.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个名为`UTM_Zone_Boundaries_3857.shp`的新Shapefile，它位于`EPSG:3857`坐标系中，并准备好进一步使用。
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `osgeo`, `ogr`, and `osr` modules do the heavy lifting and the code required
    to reproject a Shapefile is quite verbose. It works by going through each geometry
    and transforming it individually into the new coordinate system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`osgeo`、`ogr`和`osr`模块承担了繁重的工作，重新投影Shapefile所需的代码相当冗长。它通过遍历每个几何形状并将其单独转换到新的坐标系来实现。'
- en: Starting with the driver for the ESRI Shapefile, we'll work at setting our input
    and output **Spatial Reference System** (**SRS**) so that we can transform the
    two.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从ESRI Shapefile的驱动程序开始，我们将设置输入和输出**空间参考系统**（**SRS**），以便我们可以转换它们。
- en: We need to copy each feature's geometry and its attributes from the old Shapefile
    into the new one as we transform each geometry. Finally, we'll close the input
    and output Shapefile with the `Destroy()` function.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在变换每个几何形状时，我们需要将每个特征的几何形状及其属性从旧Shapefile复制到新Shapefile中。最后，我们将使用`Destroy()`函数关闭输入和输出Shapefile。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Using code is not always the best or fastest way to reproject a Shapefile.
    Another method that you could use is the `ogr2ogr` command-line tool that will
    simply reproject a Shapefile in one line. You could pipe this one-liner into a
    Python script and batch reproject many Shapefiles:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码并不总是重新投影Shapefile的最佳或最快方式。另一种你可以使用的方法是`ogr2ogr`命令行工具，它将简单地在一行中重新投影Shapefile。你可以将这个单行命令管道输入到Python脚本中，批量重新投影多个Shapefile：
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The GDAL library comes with several other very useful and helpful command-line
    functions that are worth checking out.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL库附带了一些非常实用和有帮助的命令行功能，值得检查一下。
