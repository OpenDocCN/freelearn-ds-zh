["```py\n    sudo apt-get install python-virtualenv\n    ```", "```py\n    virtualenv petrel\n    ```", "```py\n    New python executable in petrel/bin/python\n    Installing distribute.............................................................................................................................................................................................done\n    ```", "```py\n    source petrel/bin/activate\n    (petrel)barry@Dell660s:~$\n    ```", "```py\n    easy_install petrel==0.9.3.0.3\n    ```", "```py\nimport time\nimport random\n\nfrom petrel import storm\nfrom petrel.emitter import Spout\n\nclass RandomSentenceSpout(Spout):\n    def __init__(self):\n        super(RandomSentenceSpout, self).__init__(script=__file__)\n\n    @classmethod\n    def declareOutputFields(cls):\n        return ['sentence']\n\n    sentences = [\n        \"the cow jumped over the moon\",\n        \"an apple a day keeps the doctor away\",\n    ]\n\n    def nextTuple(self):\n        time.sleep(0.25)\n        sentence = self.sentences[\n            random.randint(0, len(self.sentences) - 1)]\n        storm.emit([sentence])\n\ndef run():\n    RandomSentenceSpout().run()\n```", "```py\nfrom petrel import storm\nfrom petrel.emitter import BasicBolt\n\nclass SplitSentenceBolt(BasicBolt):\n    def __init__(self):\n        super(SplitSentenceBolt, self).__init__(script=__file__)\n\n    def declareOutputFields(self):\n        return ['word']\n\n    def process(self, tup):\n        words = tup.values[0].split(\"\")\n        for word in words:\n          storm.emit([word])\n\ndef run():\n    SplitSentenceBolt().run()\n```", "```py\nfrom collections import defaultdict\n\nfrom petrel import storm\nfrom petrel.emitter import BasicBolt\n\nclass WordCountBolt(BasicBolt):\n    def __init__(self):\n        super(WordCountBolt, self).__init__(script=__file__)\n        self._count = defaultdict(int)\n\n    @classmethod\n    def declareOutputFields(cls):\n        return ['word', 'count']\n\n    def process(self, tup):\n        word = tup.values[0]\n        self._count[word] += 1\n        storm.emit([word, self._count[word]])\n\ndef run():\n    WordCountBolt().run()\n```", "```py\nfrom randomsentence import RandomSentenceSpout\nfrom splitsentence import SplitSentenceBolt\nfrom wordcount import WordCountBolt\n\ndef create(builder):\n    builder.setSpout(\"spout\", RandomSentenceSpout(), 1)\n    builder.setBolt(\n        \"split\", SplitSentenceBolt(), 1).shuffleGrouping(\"spout\")\n    builder.setBolt(\n        \"count\", WordCountBolt(), 1).fieldsGrouping(\n        \"split\", [\"word\"])\n```", "```py\nWord count instance 1: { \"the\": 1, \"cow\": 1, \"jumped\": 1 }\nWord count instance 2: { \"over\": 1, \"the\": 1, \"moon\": 1 }\n```", "```py\nWord count instance 1: { \"the\": 2, \"cow\": 1, \"jumped\": 1 }\nWord count instance 2: { \"over\": 1, \"moon\": 1 }\n```", "```py\n    nimbus.host: \"localhost\"\n    topology.workers: 1\n    ```", "```py\n    petrel submit --config topology.yaml --logdir `pwd`\n    ```", "```py\n    25057 [Thread-20] INFO  backtype.storm.daemon.task - Emitting: split default [\"the\"]\n    25058 [Thread-20] INFO  backtype.storm.daemon.task - Emitting: split default [\"moon\"]\n    25059 [Thread-22] INFO  backtype.storm.daemon.task - Emitting: count default [\"cow\",3]\n    25059 [Thread-9-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:3, stream: default, id: {}, [\"over\"]\n    25059 [Thread-9-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:3, stream: default, id: {}, [\"the\"]\n    25059 [Thread-9-count] INFO  backtype.storm.daemon.executor - Processing received message source: split:3, stream: default, id: {}, [\"moon\"]\n    25060 [Thread-22] INFO  backtype.storm.daemon.task - Emitting: count default [\"jumped\",3]\n    25060 [Thread-22] INFO  backtype.storm.daemon.task - Emitting: count default [\"over\",3]\n    25060 [Thread-22] INFO  backtype.storm.daemon.task - Emitting: count default [\"the\",9]\n    25060 [Thread-22] INFO  backtype.storm.daemon.task - Emitting: count default [\"moon\",3]\n    ```", "```py\n File \"/home/barry/.virtualenvs/petrel2/lib/python2.7/site-packages/petrel-0.9.3.0.3-py2.7.egg/petrel/cmdline.py\", line 19, in get_storm_version\n return m.group(2)\nAttributeError: 'NoneType' object has no attribute 'group'\n\nIOError: [Errno 2] No such file or directory: '/home/barry/.virtualenvs/petrel2/lib/python2.7/site-packages/petrel-0.9.3.0.3-py2.7.egg/petrel/generated/storm-petrel-0.10.0-SNAPSHOT.jar'\n```", "```py\npetrel submit --config topology.yaml --venv self\n```", "```py\n    [loggers]\n    keys=root,storm\n    [handlers]\n    keys=hand01\n    [formatters]\n    keys=form01\n    [logger_root]\n    level=INFO\n    handlers=hand01\n    [logger_storm]\n    qualname=storm\n    level=DEBUG\n    handlers=hand01\n    propagate=0\n    [handler_hand01]\n    class=FileHandler\n    level=DEBUG\n    formatter=form01\n    args=(os.getenv('PETREL_LOG_PATH') or 'petrel.log', 'a')\n    [formatter_form01]\n    format=[%(asctime)s][%(name)s][%(levelname)s]%(message)s\n    datefmt=\n    class=logging.Formatter\n    ```", "```py\n    import logging\n    from collections import defaultdict\n\n    from petrel import storm\n    from petrel.emitter import BasicBolt\n\n    log = logging.getLogger('wordcount')\n\n    class WordCountBolt(BasicBolt):\n        def __init__(self):\n            super(WordCountBolt, self).__init__(script=__file__)\n            self._count = defaultdict(int)\n\n        @classmethod\n        def declareOutputFields(cls):\n            return ['word', 'count']\n\n        def process(self, tup):\n     log.debug('WordCountBolt.process() called with: %s',\n     tup)\n     word = tup.values[0]\n     self._count[word] += 1\n     log.debug('WordCountBolt.process() emitting: %s',\n     [word, self._count[word]])\n           storm.emit([word, self._count[word]])\n\n    def run():\n        WordCountBolt().run()\n    ```", "```py\n    petrel submit --config topology.yaml --venv self --logdir `pwd`\n    ```", "```py\nWordCountBolt.process() called with: <Tuple component='split' id='5891744987683180633' stream='default' task=3 values=['moon']>\nWordCountBolt.process() emitting: ['moon', 2]\nWordCountBolt.process() called with: <Tuple component='split' id='-8615076722768870443' stream='default' task=3 values=['the']>\nWordCountBolt.process() emitting: ['the', 7]\n```", "```py\n     def process(self, tup):\n     raise ValueError('abc')\n     log.debug('WordCountBolt.process() called with: %s', tup)\n     word = tup.values[0]\n     self._count[word] += 1\n     log.debug('WordCountBolt.process() emitting: %s',\n     [word, self._count[word]])\n     storm.emit([word, self._count[word]])\n    ```", "```py\n    [2015-02-08 22:28:42,383][storm][INFO]Caught exception\n    [2015-02-08 22:28:42,383][storm][ERROR]Sent failure message (\"E_BOLTFAILED__wordcount__Dell660s__pid__21794__port__-1__taskindex__-1__ValueError\") to Storm\n    [2015-02-08 22:28:47,385][storm][ERROR]Caught exception in BasicBolt.run\n    Traceback (most recent call last):\n     File \"/home/barry/dev/Petrel/petrel/petrel/storm.py\", line 381, in run\n     self.process(tup)\n     File \"/tmp/b46e3137-1956-4abf-80c8-acaa7d3626d1/supervisor/stormdist/test+topology-1-1423452516/resources/wordcount.py\", line 19, in process\n     raise ValueError('abc')\n    ValueError: abc\n    [2015-02-08 22:28:47,386][storm][ERROR]The error occurred while processing this tuple: ['an']\n    Worker wordcount exiting normally.\n    ```"]