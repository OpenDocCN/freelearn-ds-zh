["```py\nworkon pygeoan_cb\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import psycopg2\n    import json\n    from geojson import loads, Feature, FeatureCollection\n\n    # NOTE change the password and username\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user,\n            port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # the PostGIS buffer query\n    buffer_query = \"\"\"SELECT ST_AsGeoJSON(ST_Transform(\n            ST_Buffer(wkb_geometry, 100,'quad_segs=8'),4326)) \n            AS geom, name\n            FROM geodata.schools\"\"\"\n\n    # execute the query\n    cur.execute(buffer_query)\n\n    # return all the rows, we expect more than one\n    dbRows = cur.fetchall()\n\n    # an empty list to hold each feature of our feature collection\n    new_geom_collection = []\n\n    # loop through each row in result query set and add to my feature collection\n    # assign name field to the GeoJSON properties\n    for each_poly in dbRows:\n        geom = each_poly[0]\n        name = each_poly[1]\n        geoj_geom = loads(geom)\n        myfeat = Feature(geometry=geoj_geom, properties={'name': name})\n        new_geom_collection.append(myfeat)\n\n    # use the geojson module to create the final Feature Collection of features created from for loop above\n    my_geojson = FeatureCollection(new_geom_collection)\n\n    # define the output folder and GeoJSon file name\n    output_geojson_buf = \"../geodata/out_buff_100m.geojson\"\n\n    # save geojson to a file in our geodata folder\n    def write_geojson():\n        fo = open(output_geojson_buf, \"w\")\n        fo.write(json.dumps(my_geojson))\n        fo.close()\n\n    # run the write function to actually create the GeoJSON file\n    write_geojson()\n\n    # close cursor\n    cur.close()\n\n    # close connection\n    conn.close()\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import json\n    import psycopg2\n    from geojson import loads, Feature, FeatureCollection\n\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user, port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # uncomment if needed\n    # cur.execute(\"Drop table if exists geodata.bikepath_100m_buff;\")\n\n    # query to create a new polygon 100m around the bikepath\n    new_bike_buff_100m = \"\"\" CREATE TABLE geodata.bikepath_100m_buff \n           AS SELECT name, \n           ST_Buffer(wkb_geometry, 100) AS geom\n           FROM geodata.bikeways; \"\"\"\n\n    # run the query\n    cur.execute(new_bike_buff_100m)\n\n    # commit query to database\n    conn.commit()\n\n    # query to select schools inside the polygon and output geojson\n    is_inside_query = \"\"\" SELECT s.name AS name, \n        ST_AsGeoJSON(ST_Transform(s.wkb_geometry,4326)) AS geom\n        FROM geodata.schools AS s,\n        geodata.bikepath_100m_buff AS bp\n            WHERE ST_WITHIN(s.wkb_geometry, bp.geom); \"\"\"\n\n    # execute the query\n    cur.execute(is_inside_query)\n\n    # return all the rows, we expect more than one\n    db_rows = cur.fetchall()\n\n    # an empty list to hold each feature of our feature collection\n    new_geom_collection = []\n\n    def export2geojson(query_result):\n        \"\"\"\n        loop through each row in result query set and add to my feature collection\n        assign name field to the GeoJSON properties\n        :param query_result: pg query set of geometries\n        :return: new geojson file\n        \"\"\"\n\n        for row in db_rows:\n            name = row[0]\n            geom = row[1]\n            geoj_geom = loads(geom)\n            myfeat = Feature(geometry=geoj_geom, \n                        properties={'name': name})\n            new_geom_collection.append(myfeat)\n\n        # use the geojson module to create the final Feature\n        # Collection of features created from for loop above\n        my_geojson = FeatureCollection(new_geom_collection)\n        # define the output folder and GeoJSon file name\n        output_geojson_buf = \"../geodata/out_schools_in_100m.geojson\"\n\n        # save geojson to a file in our geodata folder\n        def write_geojson():\n            fo = open(output_geojson_buf, \"w\")\n            fo.write(json.dumps(my_geojson))\n            fo.close()\n\n        # run the write function to actually create the GeoJSON file\n        write_geojson()\n\n    export2geojson(db_rows)\n    ```", "```py\nSELECT *  FROM geodata.bikeways as b, geodata.schools as s where ST_DWithin(b.wkb_geometry, s.wkb_geometry, 100)\n\n```", "```py\nogr2ogr -lco SCHEMA=geodata -nlt LINESTRING -f \"PostgreSQL\" PG:\"host=localhost port=5432 user=pluto dbname=py_geoan_cb password=stars\" ../geodata/vancouver-osm-data.osm lines -t_srs EPSG:3857\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import psycopg2\n    import json\n    from geojson import loads, Feature, FeatureCollection\n\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user, \n        port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # drop table if exists\n    # cur.execute(\"DROP TABLE IF EXISTS geodata.split_roads;\")\n\n    # split lines at intersections query\n    split_lines_query = \"\"\"\n     CREATE TABLE geodata.split_roads\n        (ST_Node(ST_Collect(wkb_geometry)))).geom AS geom\n        FROM geodata.lines;\"\"\"\n\n    cur.execute(split_lines_query)\n    conn.commit()\n\n    cur.execute(\"ALTER TABLE geodata.split_roads ADD COLUMN id serial;\")\n    cur.execute(\"ALTER TABLE geodata.split_roads ADD CONSTRAINT split_roads_pkey PRIMARY KEY (id);\")\n\n    # close cursor\n    cur.close()\n\n    # close connection\n    conn.close()\n    ```", "```py\nCREATE TABLE geodata.split_roads_attributes AS SELECT\n r.geom,\n li.name,\n li.highway\nFROM\n geodata.lines li,\n geodata.split_roads r\nWHERE\n ST_CoveredBy(r.geom, li.wkb_geometry)\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import psycopg2\n\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user, \n        port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # the PostGIS buffer query\n    valid_query = \"\"\"SELECT\n                       ogc_fid, \n                       ST_IsValidDetail(wkb_geometry)\n                    FROM \n                       geodata.lines\n                    WHERE NOT\n                       ST_IsValid(wkb_geometry);\n                    \"\"\"\n\n    # execute the query\n    cur.execute(valid_query)\n\n    # return all the rows, we expect more than one\n    validity_results = cur.fetchall()\n\n    print validity_results\n\n    # close cursor\n    cur.close()\n\n    # close connection\n    conn.close();\n    ```", "```py\n/*\n\nThis query looks for nodes, ways, and relations \nusing the given key/value combination.\nChoose your region and hit the Run button above!\n*/\n[out:json][timeout:25];\n// gather results\n(\n  // query part for: \"leisure=golf_course\"\nnode[\"leisure\"=\"golf_course\"]({{bbox}});\nway[\"leisure\"=\"golf_course\"]({{bbox}});\nrelation[\"leisure\"=\"golf_course\"]({{bbox}});\n\nnode[\"golf\"=\"pin\"]({{bbox}});\nway[\"golf\"=\"green\"]({{bbox}});\nway[\"golf\"=\"fairway\"]({{bbox}});\nway[\"golf\"=\"tee\"]({{bbox}});\nway[\"golf\"=\"fairway\"]({{bbox}});\nway[\"golf\"=\"bunker\"]({{bbox}});\nway[\"golf\"=\"rough\"]({{bbox}});\nway[\"golf\"=\"water_hazard\"]({{bbox}});\nway[\"golf\"=\"lateral_water_hazard\"]({{bbox}});\nway[\"golf\"=\"out_of_bounds\"]({{bbox}});\nway[\"golf\"=\"clubhouse\"]({{bbox}});\nway[\"golf\"=\"ground_under_repair\"]({{bbox}});\n\n);\n// print results\nout body;\n>;\nout skel qt;\n```", "```py\nshp2pgsql -s 4326 ..\\geodata\\shp\\pebble-beach-ply-greens.shp geodata.pebble_beach_greens | psql -h localhost -d py_geoan_cb -p 5432 -U pluto\n\n```", "```py\nshp2pgsql -s 4326 ..\\geodata\\shp\\pebble-beach-pts-hole-num-green.shp geodata.pebble_bea-ch_hole_num | psql -h localhost -d py_geoan_cb -p 5432 -U postgres\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import psycopg2\n\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user, port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    # assign polygon attributes from points\n    spatial_join = \"\"\"  UPDATE geodata.pebble_beach_greens AS g \n                            SET \n                               name = h.name\n                            FROM \n                               geodata.pebble_beach_hole_num AS h\n                            WHERE \n                               ST_Contains(g.geom, h.geom);\n                         \"\"\"\n    cur.execute(spatial_join)\n    conn.commit()\n\n    # close cursor\n    cur.close()\n\n    # close connection\n    conn.close()\n    ```", "```py\n    ogr2ogr -f PostgreSQL PG:\"host=localhost user=postgres port=5432 dbname=py_geoan_cb password=air\" ../geodata/geojson/osm-golf-courses-bc-alberta.geojson -nln geodata.golf_courses_bc_alberta\n\n    ```", "```py\n    ogr2ogr -f PostgreSQL PG:\"host=localhost user=postgres port=5432 dbname=py_geoan_cb password=air\" ../geodata/geojson/osm-place-city-bc-alberta.geojson -nln geodata.cities_bc_alberta\n\n    ```", "```py\n    shp2pgsql -s 4326 -W latin1 ../geodata/shp/protarea.shp geodata.parks_pa_canada | psql -h localhost -d py_geoan_cb -p 5432 -U pluto\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import psycopg2\n    import json\n    import pprint\n    from geojson import loads, Feature, FeatureCollection\n\n    # Database Connection Info\n    db_host = \"localhost\"\n    db_user = \"pluto\"\n    db_passwd = \"stars\"\n    db_database = \"py_geoan_cb\"\n    db_port = \"5432\"\n\n    # connect to DB\n    conn = psycopg2.connect(host=db_host, user=db_user, port=db_port, password=db_passwd, database=db_database)\n\n    # create a cursor\n    cur = conn.cursor()\n\n    complex_query = \"\"\"\n        SELECT\n          ST_AsGeoJSON(st_centroid(g.wkb_geometry)) as geom, c.name AS city, g.name AS golfclub, p.name_en AS park,\n        ST_Distance(geography(c.wkb_geometry), geography(g.wkb_geometry)) AS distance,\n        ST_Distance(geography(p.geom), geography(g.wkb_geometry)) AS distance\n          FROM \n          geodata.parks_pa_canada AS p,\n          geodata.cities_bc_alberta AS c\n          JOIN \n          geodata.golf_courses_bc_alberta AS g\n          ON\n            ST_DWithin(geography(c.wkb_geometry), geography(g.wkb_geometry),4000)\n         WHERE\n            ST_DWithin(geography(p.geom), geography(g.wkb_geometry),5000)\n                    \"\"\"\n    # WHERE c.population is not null and e.name is not null\n    # execute the query\n    cur.execute(complex_query)\n\n    # return all the rows, we expect more than one\n    validity_results = cur.fetchall()\n\n    # an empty list to hold each feature of our feature collection\n    new_geom_collection = []\n\n    # loop through each row in result query set and add to my feature collection\n    # assign name field to the GeoJSON properties\n    for each_result in validity_results:\n        geom = each_result[0]\n        city_name = each_result[1]\n        course_name = each_result[2]\n        park_name = each_result[3]\n        dist_city_to_golf = each_result[4]\n        dist_park_to_golf = each_result[5]\n        geoj_geom = loads(geom)\n        myfeat = Feature(geometry=geoj_geom, properties={'city': city_name, 'golf_course': course_name,\n                              'park_name': park_name, 'dist_to city': dist_city_to_golf,\n                              'dist_to_park': dist_park_to_golf})\n        new_geom_collection.append(myfeat)  # use the geojson module to create the final Feature Collection of features created from for loop above\n\n    my_geojson = FeatureCollection(new_geom_collection)\n\n    pprint.pprint(my_geojson)\n\n    # define the output folder and GeoJSon file name\n    output_geojson_buf = \"../geodata/golfcourses_analysis.geojson\"\n\n    # save geojson to a file in our geodata folder\n    def write_geojson():\n        fo = open(output_geojson_buf, \"w\")\n        fo.write(json.dumps(my_geojson))\n        fo.close()\n\n    # run the write function to actually create the GeoJSON file\n    write_geojson()\n\n    # close cursor\n    cur.close()\n\n    # close connection\n    conn.close()\n    ```"]