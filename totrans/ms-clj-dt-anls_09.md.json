["```py\n$ lein new reloaded social-so\n\n```", "```py\n(defproject social-so \"0.1.0-SNAPSHOT\"\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [org.clojure/data.xml \"0.0.7\"]\n                 [org.codehaus.jsr166-mirror/jsr166y \"1.7.0\"]\n                 [org.clojure/data.json \"0.2.4\"]\n                 [cc.mallet/mallet \"2.0.7\"]\n                 [org.jsoup/jsoup \"1.7.3\"]]\n  :profiles {:dev {:dependencies\n                   [[org.clojure/tools.namespace \"0.2.4\"]]\n                   :source-paths [\"dev\"]}}\n  :jvm-opts [\"-Xmx2048m\"])\n```", "```py\ncd data\n7z x ~/torrents/stackexchange/stackoverflow.com-Posts.7z\n```", "```py\n<row Id=\"4\"\n     PostTypeId=\"1\"\n     AcceptedAnswerId=\"7\"\n     CreationDate=\"2008-07-31T21:42:52.667\"\n     Score=\"251\"\n     ViewCount=\"15207\"\n     Body=\"&lt;p&gt;I want to use a track-bar to change a form's opacity.&lt;/p&gt;\n\n&lt;p&gt;This is my code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;decimal trans = trackBar1.Value / 5000;\nthis.Opacity = trans;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When I try to build it, I get this error:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Cannot implicitly convert type 'decimal' to 'double'.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I tried making &lt;strong&gt;trans&lt;/strong&gt; to &lt;strong&gt;double&lt;/strong&gt;, but then the control doesn't work.This code has worked fine for me in VB.NET in the past. &lt;/p&gt;\n\"\n     OwnerUserId=\"8\"\n     LastEditorUserId=\"2648239\"\n     LastEditorDisplayName=\"Rich B\"\n     LastEditDate=\"2014-01-03T02:42:54.963\"\n     LastActivityDate=\"2014-01-03T02:42:54.963\"\n     Title=\"When setting a form's opacity should I use a decimal or double?\"\n     Tags=\"&lt;c#&gt;&lt;winforms&gt;&lt;forms&gt;&lt;type-conversion&gt;&lt;opacity&gt;\"\n     AnswerCount=\"13\"\n     CommentCount=\"25\"\n     FavoriteCount=\"23\"\n     CommunityOwnedDate=\"2012-10-31T16:42:47.213\" />\n```", "```py\n<row Id=\"7\"\n     PostTypeId=\"2\"\n     ParentId=\"4\"\n     CreationDate=\"2008-07-31T22:17:57.883\"\n     Score=\"193\"\n     Body=\"&lt;p&gt;An explicit cast to double isn't necessary.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;double trans = (double)trackBar1.Value / 5000.0;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Identifying the constant as &lt;code&gt;5000.0&lt;/code&gt; (or as &lt;code&gt;5000d&lt;/code&gt;) is sufficient:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;double trans = trackBar1.Value / 5000.0;\ndouble trans = trackBar1.Value / 5000d;\n&lt;/code&gt;&lt;/pre&gt;\n\"\n     OwnerUserId=\"9\"\n     LastEditorUserId=\"967315\"\n     LastEditDate=\"2012-10-14T11:50:16.703\"\n     LastActivityDate=\"2012-10-14T11:50:16.703\"\n     CommentCount=\"0\" />\n```", "```py\n(defrecord CountRank [count rank])\n(defrecord UserInfo [user post q a])\n```", "```py\n(ns social-so.xml\n  (:require [clojure.data.xml :as xml]\n            [clojure.java.io :as io]\n            [clojure.string :as str]\n            [social-so.data :as d]\n            [social-so.utils :as u])\n  (:import [org.jsoup Jsoup]\n           [org.jsoup.safety Whitelist]))\n```", "```py\n(defn read-posts [stream] (:content (xml/parse stream)))\n```", "```py\n(defn get-user [el]\n  (let [{:keys [attrs]} el]\n    (or (u/->long (:OwnerUserId attrs))\n        (u/to-lower (:OwnerDisplayName attrs)))))\n(defn get-post-type [el]\n  (u/->long (:PostTypeId (:attrs el))))\n```", "```py\n(defn update-user-info [user-id post-el user-info]\n  (let [incrs {:question [1 0], :answer [0 1]}\n        [q-inc a-inc] (incrs (get-post-type post-el))]\n    (cond\n      (nil? q-inc) user-info\n      (nil? user-info) (d/->UserInfo user-id 1 q-inc a-inc)\n      :else\n      (assoc user-info\n             :post (inc (:post user-info))\n             :q (+ (:q user-info) q-inc)\n             :a (+ (:a user-info) a-inc)))))\n```", "```py\n(defn update-user-index [user-index post-el]\n  (let [user (get-user post-el)]\n    (->> user\n      (get user-index)\n      (update-user-info user post-el)\n      (assoc user-index user))))\n```", "```py\n(defn load-user-infos [filename]\n  (with-open [s (io/input-stream filename)]\n    (->> s\n      read-posts\n      (reduce update-user-index {})\n      vals\n      (remove nil?)\n      doall)))\n```", "```py\n    (defn rank-on [user-property coll]\n      (->> coll\n        (sort-by user-property)\n        reverse\n        (map vector (range))))\n    ```", "```py\n    (defn update-rank [user-property rank-info]\n      (let [[rank user-info] rank-info]\n        (assoc user-info user-property\n               (d/->CountRank (get user-info user-property) \n                              rank))))\n    ```", "```py\n    (defn add-rank-data [user-property users]\n      (map #(update-rank user-property %)\n           (rank-on user-property users)))\n    (defn add-all-ranks [users]\n      (->> users\n        (add-rank-data :post)\n        (add-rank-data :q)\n        (add-rank-data :a)))\n    ```", "```py\n    (defn load-xml [filename]\n      (add-all-ranks (load-user-infos filename)))\n    ```", "```py\nuser=> (def users (x/load-xml\n \"data/stackoverflow.com-Posts\"))\nuser=> (count users)\n1594450\nuser=> (first users)\n{:user 22656,\n :post {:count 28166, :rank 0},\n :q {:count 29, :rank 37889},\n :a {:count 28137, :rank 0}}\n\n```", "```py\n(defn print-top-rank [col-name key-fn n users]\n  (let [fmt \"%4s   %6s   %14s\\n\"\n        sort-fn #(:rank (key-fn %))]\n    (printf fmt \"Rank\" \"User\" col-name)\n    (printf fmt \"----\" \"------\" \"--------------\")\n    (doseq [user (take n (sort-by sort-fn users))]\n      (let [freq (key-fn user)]\n        (printf fmt (:rank freq) (:user user) (:count freq))))))\n```", "```py\n(defn quantile-on [n key-fn coll]\n  (let [len (count coll)\n        part-size (+ (quot len n)\n                     (if (zero? (mod len n)) 0 1))]\n    (partition-all part-size (sort-by key-fn coll))))\n```", "```py\n(defn sum-count\n  ([key-fn] (partial sum-count key-fn))\n  ([key-fn coll]\n   (->> coll\n     (map #(:count (key-fn %)))\n     (remove nil?)\n     (reduce + 0))))We can use these functions to find the percentage of users in each quintile:\nuser=> (def p-counts\n            (map (d/sum-count :post)\n                 (d/quantile-on 5 #(:rank (:post %)) users)))\nuser=> p-counts\n(15587701 1282402 507654 318890 318828)\nuser=> (def total (reduce + 0 p-counts))\nuser=> (map #(float (/ % total)) p-counts)\n(0.8652395 0.07118336 0.028178774 0.017700894 0.017697452)\n```", "```py\nuser=> (def q-counts (map (d/sum-count :q)\n (d/quantile-on 5 #(:rank (:q %)) users)))\nuser=> (def total (reduce + 0 q-counts))\nuser=> q-counts\n(5182709 711037 318890 262051 0)\nuser=> (map #(float (/ % total)) q-counts)\n(0.80045706 0.109817974 0.049251802 0.040473152 0.0)\n\n```", "```py\nuser=> (def a-counts (map (d/sum-count :a)\n (d/quantile-on 5 #(:rank (:a %)) users)))\nuser=> (def total (reduce + 0 a-counts))\nuser=> a-counts\n(10950972 413668 176148 0 0)\nuser=> (map #(float (/ % total)) a-counts)\n(0.9488929 0.035844 0.015263082 0.0 0.0)\n\n```", "```py\nuser=> (def qs (filter #(zero? (:count (:a %))) users))\nuser=> (def q-counts\n (map (d/sum-count :q)\n (d/quantile-on 5 #(:rank (:q %)) qs)))\nuser=> (def total (reduce + 0 q-counts))\nuser=> (count qs)\n780460\nuser=> q-counts\n(969148 272085 156092 156092 156092)\nuser=> (map #(float (/ % total)) q-counts)\n(0.566916 0.15915973 0.09130809 0.09130809 0.09130809)\n\n```", "```py\nuser=> (def as (filter #(zero? (:count (:q %))) users))\nuser=> (def a-counts (map (d/sum-count :a)\n (d/quantile-on 5 #(:rank (:a %)) as)))\nuser=> (def total (reduce + 0 a-counts))\nuser=> (count as)\n375667\nuser=> (float (/ (count as) (count users)))\n0.23561831\nuser=> a-counts\n(1413820 116198 75134 75134 75131)\nuser=> (map #(float (/ % total)) a-counts)\n(0.80540407 0.06619396 0.042801227 0.042801227 0.042799518)\n\n```", "```py\nuser=> (def both (remove #(or (zero? (:count (:q %)))\n (zero? (:count (:a %))))\n users))\nuser=> (count both)\n438261\n\n```", "```py\nuser=> (def bq-counts\n (map (d/sum-count :q)\n (d/quantile-on 5 #(:rank (:q %)) both)))\nuser=> (def total (reduce + 0 bq-counts))\nuser=> bq-counts\n(3450712 730467 335892 160458 87649)\nuser=> (map #(float (/ % total)) bq-counts)\n(0.72415173 0.1532927 0.07048887 0.033673033 0.018393647)\n\n```", "```py\nuser=> (def ba-counts\n (map (d/sum-count :a)\n (d/quantile-on 5 #(:rank (:a %)) both)))\nuser=> (def total (reduce + 0 ba-counts))\nuser=> ba-counts\n(8564601 740590 270367 122164 87649)\nuser=> (map #(float (/ % total)) ba-counts)\n(0.8752454 0.075683385 0.027629714 0.01248435 0.008957147)\n\n```", "```py\n$ curl -O http://www.ericrochester.com/mastering-clj-data/data/post-sample-100000.json.gz\n$ gunzip post-sample-100000.json.gz\n```", "```py\n(ns social-so.post\n  (:require [clojure.java.io :as io]\n            [clojure.data.json :as json]\n            [social-so.data :as d]\n            [social-so.utils :as u]\n            [social-so.xml :as x]))\n```", "```py\n(defrecord PostInfo\n  [id post-type body-text score accepted-for])\n```", "```py\n(defn load-post-infos [filename]\n  (with-open [r (io/reader filename)]\n    (doall\n      (->> (json/read r :key-fn keyword)\n        (map map->PostInfo)\n        (map #(assoc % :post-type (keyword (:post-type %))))))))\n```", "```py\nuser=> (def s (p/load-post-infos \"post-sample-100000.json\"))\nuser=> (count s)\n100000\nuser=> (count (filter :accepted-for s))\n21250\nuser=> (count (remove :accepted-for s))\n78750\nuser=> (pprint (first s))\n{:id 1146880,\n :post-type :a,\n :body-text\n \"But while processing i cancelled the transaction.  WP - Basically, if it was a transaction, and you canceled it before it finished, then whatever had started would have been undone. What your database looks like now should be the same as it looked before the UPDATE.\",\n :score 0,\n :accepted-for nil}\n\n```", "```py\n(ns social-so.nlp\n  (:import [cc.mallet.types Instance InstanceList]\n           [cc.mallet.pipe\n            Input2CharSequence TokenSequenceLowercase\n            CharSequence2TokenSequence SerialPipes\n            Target2Label FeatureSequence2FeatureVector\n            TokenSequenceRemoveStopwords\n            TokenSequence2FeatureSequence]\n           [cc.mallet.pipe.iterator ArrayDataAndTargetIterator]\n           [cc.mallet.classify NaiveBayes NaiveBayesTrainer Trial]\n           [cc.mallet.classify.evaluate ConfusionMatrix]))\n```", "```py\nuser=> (require '[social-so.nlp :as n])\n\n```", "```py\n(defn make-pipe []\n  (SerialPipes.\n    [(Target2Label.)\n     (Input2CharSequence. \"UTF-8\")\n     (CharSequence2TokenSequence.\n       #\"\\p{L}[\\p{L}\\p{P}]+\\p{L}\")\n     (TokenSequenceLowercase.)\n     (TokenSequenceRemoveStopwords. false false)\n     (TokenSequence2FeatureSequence.)\n     (FeatureSequence2FeatureVector.)]))\n```", "```py\n(defn accepted-tag [post-info]\n  (if (:accepted-for post-info) \"accepted\" \"not\"))\n(defn post-info-iterator [post-infos]\n  (ArrayDataAndTargetIterator.\n    (into-array (map :body-text post-infos))\n    (into-array (map accepted-tag post-infos))))\n```", "```py\n(defn post-info-instances [post-infos]\n  (doto (InstanceList. (make-pipe))\n    (.addThruPipe (post-info-iterator post-infos))))\n```", "```py\nuser=> (def ilist (n/post-info-instances s))\n\n```", "```py\n(defn split-sets [test-ratio ilist]\n  (let [split-on (double-array [test-ratio (- 1.0 test-ratio)])\n        [test-set training-set] (.split ilist split-on)]\n    {:test test-set, :training training-set}))\n```", "```py\nuser=> (def tt-sets (n/split-sets 0.2 ilist))\n\n```", "```py\n(defn bayes-train [ilist] (.train (NaiveBayesTrainer.) ilist))\n```", "```py\nuser=> (def bayes (n/bayes-train (:training tt-sets)))\n\n```", "```py\n(defn trial [classifier ilist] (Trial. classifier ilist))\n```", "```py\nuser=> (def trial (n/trial bayes (:test tt-sets)))\n```", "```py\nuser=> (.getPrecision trial \"accepted\")\n0.2837067983289024\n\n```", "```py\nuser=> (.getRecall trial \"accepted\")\n0.1808716707021792\n\n```", "```py\nuser=> (.getAccuracy trial)\n0.73655\n\n```", "```py\nuser=> (.getPrecision trial \"not\")\n0.8052052743709334\nuser=> (.getRecall trial \"not\")\n0.881159420289855\n\n```", "```py\nuser=> (.getF1 trial \"accepted\")\n0.22090788111784712\n\n```", "```py\n(defn confusion-matrix [trial] (str (ConfusionMatrix. trial)))\n```", "```py\nuser=> (println (n/confusion-matrix trial))\nConfusion Matrix, row=true, column=predicted  accuracy=0.73655\n label   0   1  |total\n 0      not 13984 1886  |15870\n 1 accepted 3383 747  |4130\n\n```"]