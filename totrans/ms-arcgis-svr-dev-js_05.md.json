["```py\nrequire([…, \"esri/toolbars/edit\", \n  \"esri/symbols/SimpleMarkerSymbol\", \n  \"esri/symbols/SimpleLineSymbol\",  ], \nfunction ( …, EditToolbar, MarkerSymbol, Linesymbol, …) {\n\n  var editTB = new EditToolbar(map,… {\n    allowAddVertices: true,\n    allowDeleteVertices: true,\n    ghostLineSymbol: new LineSymbol(…),\n    ghostMarkerSymbol: new MarkerSymbol(…),\n    uniformScaling: false,\n    vertexSymbol: new MarkerSymbol(…)\n  });\n\n});\n```", "```py\nvar editTB = new EditToolbar(…);\n  …\nmap.graphics.add(myGraphic);\ndojoOn(myGraphic, \"dblclick\", function () {\n  editTB.activate(EditToolbar.EDIT_VERTICES | EditToolbar.MOVE | EditToolbar.ROTATE | EditToolbar.SCALE, myGraphic);\n  dojoOn.once(myGraphic, \"dblclick\", function () {\n    editTB.deactivate();\n  });\n});\n```", "```py\n    var layerInfos = [{\n      'featureLayer': bananaStandFL,\n      'showAttachments': false,\n      'isEditable': true,\n      'format': {'time': true },\n      'fieldInfos': [\n        {'fieldName': 'address', 'isEditable':true, 'tooltip': 'Where is it?', 'label':'Address:'},\n        {'fieldName': 'time_open', 'isEditable':true, 'tooltip': 'Time the Banana Stand opens.', 'label':'Open:'},\n        {'fieldName': 'time_closed', 'isEditable':true, 'tooltip': 'Time the Banana Stand closes.', 'label':'Closed:'},\n        {'fieldName': 'is_money_here', 'isEditable':false, 'label':'Is Money Here:', 'tooltip': 'There\\'s money in the Banana Stand.'}\n      ]\n    }];\n\n    var attInspector = new AttributeInspector({\n      layerInfos: layerInfos\n    }, \"edit-attributes-here\");\n\n    attInspector.startup();\n    ```", "```py\nvar widget = new TemplatePicker({\n  featureLayers: layers,\n  rows: \"auto\",\n  columns: 9,\n  showTooltip: true,\n  style: \"height: 100%; width: 900px;\"\n}, \"templatePickerDiv\");\n```", "```py\nrequire([…, \"esri/SnappingManager\", \"dojo/keys\", …], \nfunction (…, SnappingManager, dojoKeys …) {\n\n  var propertyLayer = new FeatureLayer({…});\n  var sm = new SnappingManager({\n    alwaysSnap: false, // default: false\n    map: map,\n    snapKey: dojoKeys.CTRL, // default: dojoKeys.copyKey\n    tolerance: 10, // default: 15\n    layerInfo: [{\n      layer: propertyLayer, // this is a featureLayer,\n      snapToEdge: false, // default: true\n      snapToVertex: true //default: true\n    }]\n  });\n  …\n});\n```", "```py\n<!DOCTYPE html>\n<html>\n     <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\" />\n    <title>Incident Reporting App</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"author\" content=\"Ken Doman\">\n    <link rel=\"stylesheet\" href=\"http://js.arcgis.com/3.13/dijit/themes/claro/claro.css\">\n    <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.13/esri/css/esri.css\" />\n    <link rel=\"stylesheet\" href=\"./css/style.css\" />\n    <script type=\"text/javascript\">\n      dojoConfig = {\n async: true,\n isDebug: true\n };\n    </script>\n    <script src=\"img/\"></script>\n  </head>\n  <body class=\"claro\">\n    <div id=\"mainwindow\" \n      data-dojo-type=\"dijit/layout/BorderContainer\" \n      data-dojo-props=\"design:'sidebar', gutter:false\" \n      style=\"width: 100%; height: 100%; margin: 0;\">\n        <div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region:'top'\">\n          <h1>Incident Reporting App</h1>\n        </div>\n        <div id=\"map\" data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region:'center'\"></div>\n        <div id=\"editpane\" style=\"width: 130px\" data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region:'leading'\">\n <div id=\"editordiv\"></div>\n </div>\n      </div>\n    <script type=\"text/javascript\" src=\"img/app.js\"></script>\n  </body>\n</html>\n```", "```py\nhtml, body {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n}\n\n*, *:before, *:after { box-sizing: inherit;}\n```", "```py\nrequire([\n  \"dojo/parser\", \"esri/map\", \"esri/graphic\", \n  \"esri/geometry/Extent\", \"esri/dijit/editing/Editor\",\n  \"esri/dijit/editing/TemplatePicker\", \"esri/tasks/query\",\n  \"dijit/layout/BorderContainer\", \"dijit/layout/ContentPane\", \n  \"dojo/domReady!\"\n], function (parser, Map, Graphic, Extent,Editor, TemplatePicker, Query) {\n\n  var maxExtent = new Extent({\n    \"xmin\":-13519092.335425414,\n    \"ymin\":4413224.664902497,\n    \"xmax\":-13507741.43672508,\n    \"ymax\":4421766.502813354,\n    \"spatialReference\":{\"wkid\":102100}\n  }),\n    map, selected, updateFeature, attInspector;\n\n  parser.parse();\n\n  map = new Map(\"map\", {\n    basemap: \"osm\",\n    extent: maxExtent\n  });\n\n});\n```", "```py\nrequire([\n  …, \n  \"esri/layers/FeatureLayer\",\n  \"esri/layers/ArcGISDynamicMapServiceLayer\",\n  \"esri/symbols/SimpleMarkerSymbol\",\n…\n], function (…, \n  FeatureLayer, ArcGISDynamicMapServiceLayer, \n  MarkerSymbol, … \n) {\n  var maxExtent = …,\n    map, incidentLayer, visibleIncidentLayer;\n  …\n  incidentLayer = new FeatureLayer(\"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/SanFrancisco/311Incidents/FeatureServer/0\", {\n    mode: FeatureLayer.MODE_SELECTION,\n    outFields: [\"req_type\",\"req_date\",\"req_time\",\"address\",\"district\", \"status\"],\n    id: \"incidentLayer\"\n  });\n\n  visibleIncidentLayer = new ArcGISDynamicMapServiceLayer( \"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/SanFrancisco/311Incidents/MapServer\");\n  …\n  map.addLayers([visibleIncidentLayer, incidentLayer]);\n```", "```py\nvar …, incidentLayer, visibleIncidentLayer, selected;\n\nvisibleIncidentLayer = …;\n\nfunction startEditing () {\n var incidentLayer = map.getLayer(\"incidentLayer\");\n // add map click event to create the new editable feature\n map.on(\"click\", function(evt) {\n // if a feature template has been selected.\n if (selected) {\n var currentDate = new Date();\n var incidentAttributes = {\n req_type: selected.template.name,\n req_date:(currentDate.getMonth() + 1) + \"/\" + currenDate.getDate() + \"/\" + currentDate.getFullYear(),\n req_time: currentDate.toLocaleTimeString(),\n address: \"\",\n district: \"\",\n status: 1\n };\n var incidentGraphic = new Graphic(evt.mapPoint, selected.symbol, incidentAttributes);\n incidentLayer.applyEdits([incidentGraphic],null,null) \n } \n });\n\n incidentLayer.setSelectionSymbol(\n new MarkerSymbol({color:[255,0,0]})\n );\n\n map.infoWindow.on(\"hide\", function() {\n incidentLayer.clearSelection();\n });\n}\n\nincidentLayer.on(\"edits-complete\", function() {\n visibleIncidentLayer.refresh();\n});\n\nmap.on(\"layers-add-result\", startEditing);\nmap.addLayers([visibleIncidentLayer, incidentLayer]);\n```", "```py\nrequire([\n  …, \n  \"esri/config\",\n  \"esri/layers/FeatureLayer\",\n  \"esri/layers/ArcGISDynamicMapServiceLayer\",\n  \"esri/symbols/SimpleMarkerSymbol\",\n…\n], function (…, esriConfig, …) {\n  …\n  // set up proxy for the featureLayer\n  esriConfig.defaults.io.proxyUrl = \"./proxy/proxy.ashx\";\n\n  incidentLayer = …\n```", "```py\nrequire([…, \"esri/dijit/LocateButton\", …\n], function (…, LocateButton, …) {\n  …\n  function startEditing() {\n    // add the Locate button\n     var locator = new LocateButton({map: map}, \"locatebutton\");\n  }\n  …\n});\n```", "```py\n.LocateButton {\n  position: absolute;\n  left: 29px;\n  top: 120px;\n  z-index: 500;\n}\n```", "```py\n  function generateTemplatePicker(layer) {\n    console.log(\"layer\", layer);\n    var widget = new TemplatePicker({\n      featureLayers: [ layer ],\n      rows: layer.types.length,\n      columns: 1,\n      grouping: false,\n      style: \"width:98%;\"\n    }, \"editordiv\");\n\n    widget.startup();\n\n    widget.on(\"selection-change\", function() {\n      selected = widget.getSelected();\n      console.log(\"selected\", selected);\n    });\n  }\n…\nfunction startEditing () {\n  var incidentLayer = map.getLayer(\"incidentLayer\");\n  generateTemplatePicker(incidentLayer);\n  …\n```", "```py\nrequire([…,\n  \"dojo/dom-construct\",\n  \"esri/dijit/AttributeInspector\",\n  \"dijit/form/Button\",\n  …\n], function (…, domConstruct, AttributeInspector, Button, …) {\n  var maxExtent = …,\n    map, incidentLayer, visibleIncidentLayer, selected, \n    attInspector, updateFeature;\n…\nfunction generateAttributeInspector(layer) {\n  var layerInfos = [{\n    featureLayer: layer,\n    showAttachments: true,\n    isEditable: true,\n  }];\n\n  attInspector = new AttributeInspector({\n    layerInfos: layerInfos\n  }, domConstruct.create(\"div\", null, document.body));\n\n  attInspector.startup();\n\n  //add a save button next to the delete button\n  var saveButton = new Button({ label: \"Save\", \"class\": \"saveButton\"});\n  domConstruct.place(saveButton.domNode, attInspector.deleteBtn.domNode, \"after\");\n\n  saveButton.on(\"click\", function(){\n    updateFeature.getLayer().applyEdits(\n      null, [updateFeature], null\n    );\n  });\n\n  attInspector.on(\"attribute-change\", function(evt) {\n    //store the updates to apply when the save button is clicked\n    updateFeature.attributes[evt.fieldName] = evt.fieldValue;\n  });\n\n  attInspector.on(\"next\", function(evt) {\n    updateFeature = evt.feature;\n    console.log(\"Next \" + updateFeature.attributes.objectid);\n  });\n\n  attInspector.on(\"delete\", function(evt){\n    evt.feature.getLayer().applyEdits(\n      null, null, [updateFeature]\n    );\n    map.infoWindow.hide();\n  });\n\n  if (attInspector.domNode) {\n    map.infoWindow.setContent(attInspector.domNode);\n    map.infoWindow.resize(350, 240);\n  }\n\n}\n…\nfunction startEditing () {\n  var incidentLayer = map.getLayer(\"incidentLayer\");\n  generateTemplatePicker(incidentLayer);\n generateAttributeInspector(incidentLayer);\n…\n\n```", "```py\n.saveButton {\n  margin: 0 0 0 48px;\n}\n```", "```py\n…\n  function showInspector(evt) {\n     var selectQuery = new Query(),\n       point = evt.mapPoint,\n       mapScale = map.getScale();\n\n    selectQuery.geometry = evt.mapPoint;\n\n    incidentLayer.selectFeatures(selectQuery, FeatureLayer.SELECTION_NEW, function (features) {\n      if (!features.length) {\n        map.infoWindow.hide();\n        return;\n      }\n\n      updateFeature = features[0];\n\n      map.infoWindow.setTitle(updateFeature.getLayer().name);\n      map.infoWindow.show(evt.screenPoint, map.getInfoWindowAnchor(evt.screenPoint));\n    });\n  }\n…\nfunction startEditing() {\n  …\n  map.on(\"click\", function (evt) {\n    …\n    if (selected) {\n      …\n      incidentLayer.applyEdits([incidentGraphic],null,null)\n        .then(function () {\n          showInspector(evt);\n        });\n\n    } else {\n      showInspector(evt);\n    }\n  …\n  }); \n…\n  incidentLayer.on(\"click\", showInspector);\n```", "```py\n…\nmap.on(\"click\", function (evt) {\n  // if the clicked point isn't inside the maxExtent\n  if (!maxExtent.contains(evt.mapPoint)) {\n    alert(\"Sorry, that point is outside our area of interest.\");\n    return; // disregard the click\n  }\n…\n```", "```py\n…\n<div id=\"map\" data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region:'center'\" >\n  <div id=\"locatebutton\"></div>\n  <div id=\"outsidemessage\" style=\"display:none;\">\n <p>Sorry, but you have navigated outside our city. Click on this message to get back to the city.</p>\n </div>\n</div>\n<div id=\"editpane\" style=\"width: 130px\" \n  data-dojo-type=\"dijit/layout/ContentPane\" \n  data-dojo-props=\"region:'leading'\">\n  <div id=\"editordiv\"></div>\n  <div id=\"blockerdiv\" style=\"display:none;\"></div>\n</div>\n```", "```py\n#blockerdiv {\n  width: 100%;\n  background: rgba(188, 188, 188, 0.6);\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 500;\n}\n\n#outsidemessage {\n  position: absolute;\n  bottom: 40px;\n  left: 50%;\n  width: 200px;\n  height: auto;\n  margin: 0 0 0 -100px;\n  background: rgba(255,255,255,0.8);\n  padding: 8px;\n  z-index: 500;\n  border-radius: 8px;\n  text-align: center;\n  font-weight: bold;\n}\n```", "```py\nrequire([…, \"dojo/dom-style\", …\n], function (…, domStyle, …) {\n\nfunction onMapExtentChange (response) {\n  if (!response.extent.intersects(maxExtent)) {\n     // show these blocks if the map extent is outside the \n    // city extent\n     domStyle.set(\"blockerdiv\", \"display\", \"block\");\n     domStyle.set(\"outsidemessage\", \"display\", \"block\");\n  } else {\n     // hide these blocks if the max Extent is visible within \n    // the view.\n     domStyle.set(\"blockerdiv\", \"display\", \"none\");\n     domStyle.set(\"outsidemessage\", \"display\", \"none\");\n  }\n}\n\nmap.on(\"extent-change\", onMapExtentChange);\n…\n```", "```py\nrequire([…, \"dojo/dom\", \"dojo/on\", …\n], function (…, dojoDom, dojoOn, …) {\n  …\n  dojoOn(dojoDom.byId(\"outsidemessage\"), \"click\", function () {\n    map.setExtent(maxExtent);\n  })\n  …\n});\n```", "```py\nvar layerInfos = [{\n      featureLayer: layer,\n      showAttachments: true,\n      isEditable: true,\n      showDeleteButton: false,\n      fieldInfos: [\n        {'fieldName': 'req_type', 'isEditable':true, 'tooltip': 'What\\'s wrong?', 'label':'Status:'},\n        {'fieldName': 'req_date', 'isEditable':false, 'tooltip': 'Date incident was reported.', 'label':'Date:'},\n        {'fieldName': 'req_time', 'isEditable':false,'label':'Time:'},\n        {'fieldName': 'address', 'isEditable':true, 'label':'Address:'},\n        {'fieldName': 'district', 'isEditable':true, 'label':'District:'},\n        {'fieldName': 'status', 'isEditable':false, 'label':'Status:'}\n      ]\n    }];\n```"]