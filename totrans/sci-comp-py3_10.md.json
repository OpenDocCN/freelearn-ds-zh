["```py\n>>> for i in range(10)\n  File “<stdin>”, line 1\n    for i in range(10)\n                      ^\nSyntaxError: invalid syntax\n```", "```py\ndef f(x):\n    return 1/x\n\n>>> f(2.5)\n0.4 \n>>> f(0)\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"exception_tests.py\", line 3, in f\n    return 1/x\nZeroDivisionError: integer division or modulo by zero\n```", "```py\n>>> a = arange(8.0) \n>>> a \narray([ 0., 1., 2., 3., 4., 5., 6., 7.]) \n>>> a[3] = 'string'\nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module>\nValueError: could not convert string to float: string\n```", "```py\nraise Exception(\"Something went wrong\")\n```", "```py\nprint(\"The algorithm did not converge.\")\n```", "```py\nraise Exception(\"The algorithm did not converge.\")\n```", "```py\ndef factorial(n):\n  if not (n >=0 and isinstance(n,(int,int32,int64))):\n    raise ValueError(\"A positive integer is expected\")\n    ...\n```", "```py\ntry:\n    <some code that might raise an exception>\nexcept ValueError:\n    print(\"Oops, a ValueError occurred\")\n```", "```py\nexcept (RuntimeError, ValueError, IOError):\n```", "```py\ntry:\n    f = open('data.txt', 'r')\n    data = f.readline()\n    value = float(data)\nexcept OSError as oe:\n    print(\"{}:  {}\".format(oe.strerror, oe.filename))\nexcept ValueError:\n    print(\"Could not convert data to float.\")\n```", "```py\nI/O error(2): No such file or directory\n```", "```py\nI/O error(13): Permission denied\n```", "```py\ntry:\n    f = open('data.txt', 'r')\n    # some function that does something with the file\n    process_file_data(f) \nexcept: \n    ... \nfinally:\n    f.close()\n```", "```py\nclass MyError(Exception):\n    def __init__(self, expr):\n        self.expr = expr\n    def __str__(self):\n        return str(self.expr)\n\ntry:\n   x = random.rand()\n   if x < 0.5:\n      raise MyError(x)\nexcept MyError as e:\n   print(\"Random number too small\", e.expr)\nelse:\n   print(x)\n```", "```py\nwith open('data.txt', 'r') as f:\n    process_file_data(f)\n```", "```py\nf = open('data.txt', 'r')\ntry: \n    # some function that does something with the file \n    process_file_data(f) \nexcept:\n    ... \nfinally:\n    f.close()\n```", "```py\nimport numpy as np      # note, sqrt in NumPy and SciPy \n                        # behave differently in that example\nwith errstate(invalid='ignore'):\n    print(np.sqrt(-1)) # prints 'nan'\n\nwith errstate(invalid='warn'):\n    print(np.sqrt(-1)) # prints 'nan' and \n                   # 'RuntimeWarning: invalid value encountered in sqrt'\n\nwith errstate(invalid='raise'):\n    print(np.sqrt(-1)) # prints nothing and raises FloatingPointError\n```", "```py\ndef f():\n   g()\ndef g():\n   h()\ndef h():\n   1//0\n\nf()\n```", "```py\nTraceback (most recent call last):\n  File \"stack_example.py\", line 11, in <module>\n    f() \n  File \"stack_example.py\", line 3, in f\n    g() \n  File \"stack_example.py\", line 6, in g\n    h() File \"stack_example.py\", line 9, in h\n    1//0 \nZeroDivisionError: integer division or modulo by zero\n```", "```py\nimport pdb\n\ndef complex_to_polar(z):\n    pdb.set_trace() \n    r = sqrt(z.real ** 2 + z.imag ** 2)\n    phi = arctan2(z.imag, z.real)\n    return (r,phi)\nz = 3 + 5j \nr,phi = complex_to_polar(z)\n\nprint(r,phi)\n```", "```py\n> debugging_example.py(7)complex_to_polar()\n-> r = sqrt(z.real ** 2 + z.imag ** 2) \n(Pdb)\n```", "```py\n> debugging_example.py(7)complex_to_polar() \n-> r = sqrt(z.real ** 2 + z.imag ** 2) \n(Pdb) n \n> debugging_example.py(8)complex_to_polar() \n-> phi = arctan2(z.imag, z.real) \n(Pdb) n \n> debugging_example.py(9)complex_to_polar() \n-> return (r,phi) \n(Pdb) \n...\n```", "```py\n> debugging_example.py(7)complex_to_polar() \n-> r = sqrt(z.real ** 2 + z.imag ** 2) \n(Pdb) l\n  2\n  3 import pdb\n  4\n  5 def complex_to_polar(z):\n  6 pdb.set_trace()\n  7 -> r = sqrt(z.real ** 2 + z.imag ** 2)\n  8 phi = arctan2(z.imag, z.real)\n  9 return (r,phi)\n 10\n 11 z = 3 + 5j\n 12 r,phi = complex_to_polar(z) \n(Pdb)\n```", "```py\n> debugging_example.py(7)complex_to_polar() \n-> r = sqrt(z.real ** 2 + z.imag ** 2) \n(Pdb) p z \n(3+5j) (Pdb) n \n> debugging_example.py(8)complex_to_polar() \n-> phi = arctan2(z.imag, z.real) \n(Pdb) p r \n5.8309518948453007 \n(Pdb) c \n(5.8309518948453007, 1.0303768265243125)\n```", "```py\n> debugging_example.py(7)complex_to_polar() \n-> r = sqrt(z.real ** 2 + z.imag ** 2) \n(Pdb) z = 2j \n(Pdb) z \n2j \n(Pdb) c \n(2.0, 1.5707963267948966)\n```", "```py\nIn [1]: %pdb # this is a so - called IPython magic command \nAutomatic pdb calling has been turned ON\n\nIn [2]: a = 10\n\nIn [3]: b = 0\n\nIn [4]: c = a/b\n___________________________________________________________________\nZeroDivisionError                  Traceback (most recent call last) \n<ipython-input-4-72278c42f391> in <module>() \n—-> 1 c = a/b\n\nZeroDivisionError: integer division or modulo by zero \n> <ipython-input-4-72278c42f391>(1)<module>()\n      -1 c = a/b\nipdb>\n```"]