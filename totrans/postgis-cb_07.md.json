["```py\n$ python insert_files.py -f <lasfiles_path>\n```", "```py\n$ for file in `ls pipelines/*.json`; \n  do \n    pdal pipeline $file; \n  done \n```", "```py\nDROP TABLE IF EXISTS chp07.lidar; \nCREATE TABLE chp07.lidar AS WITH patches AS  \n( \n  SELECT \n    pa  \n  FROM \"chp07\".\"N2210595\"  \n  UNION ALL \n  SELECT \n    pa  \n  FROM \"chp07\".\"N2215595\"  \n  UNION ALL \n  SELECT \n    pa  \n  FROM \"chp07\".\"N2220595\" \n) \nSELECT \n  2 AS id, \nPC_Union(pa) AS pa  \nFROM patches; \n```", "```py\nCREATE TABLE chp07.lidar_patches AS WITH pts AS  \n( \n  SELECT \n    PC_Explode(pa) AS pt  \n  FROM chp07.lidar \n) \nSELECT \n  pt::geometry AS the_geom  \nFROM pts; \nALTER TABLE chp07.lidar_patches ADD COLUMN gid serial; \nALTER TABLE chp07.lidar_patches ADD PRIMARY KEY (gid); \n```", "```py\nCREATE INDEX chp07_lidar_the_geom_idx  \nON chp07.lidar USING gist(the_geom); \n```", "```py\nCREATE INDEX chp07_lidar_the_geom_3dx \nON chp07.lidar USING gist(the_geom gist_geometry_ops_nd); \n```", "```py\n$ shp2pgsql -s 3734 -d -i -I -W LATIN1 -t 3DZ -g the_geom hydro_line chp07.hydro | PGPASSWORD=me psql -U me -d \"postgis-cookbook\" -h localhost  \n```", "```py\nDROP TABLE IF EXISTS chp07.lidar_patches_within; \nCREATE TABLE chp07.lidar_patches_within AS \nSELECT chp07.lidar_patches.gid, chp07.lidar_patches.the_geom \nFROM chp07.lidar_patches, chp07.hydro  \nWHERE ST_3DDWithin(chp07.hydro.the_geom, chp07.lidar_patches.the_geom, 5); \n```", "```py\nDROP TABLE IF EXISTS chp07.lidar_patches_within_distinct; \nCREATE TABLE chp07.lidar_patches_within_distinct AS \nSELECT DISTINCT (chp07.lidar_patches.the_geom), chp07.lidar_patches.gid  \nFROM chp07.lidar_patches, chp07.hydro  \nWHERE ST_3DDWithin(chp07.hydro.the_geom, chp07.lidar_patches.the_geom, 5); \n```", "```py\nDROP TABLE IF EXISTS chp07.simple_building; \nCREATE TABLE chp07.simple_building AS  \nSELECT 1 AS gid, ST_MakePolygon( \n  ST_GeomFromText( \n    'LINESTRING(0 0,2 0, 2 1, 1 1, 1 2, 0 2, 0 0)' \n  ) \n) AS the_geom; \n```", "```py\nCREATE OR REPLACE FUNCTION chp07.threedbuilding(footprint geometry, height numeric) \nRETURNS geometry AS \n$BODY$ \n```", "```py\nWITH simple_lines AS \n( \n  SELECT  \n    1 AS gid,  \n    ST_MakeLine(ST_PointN(the_geom,pointn), \n    ST_PointN(the_geom,pointn+1)) AS the_geom \n  FROM ( \n    SELECT 1 AS gid, \n    polygon_to_line($1) AS the_geom  \n  ) AS a \n  LEFT JOIN( \n    SELECT  \n      1 AS gid,  \n      generate_series(1,  \n        ST_NumPoints(polygon_to_line($1))-1 \n      ) AS pointn  \n  ) AS b \n  ON a.gid = b.gid \n), \n```", "```py\nthreeDlines AS\n( \n  SELECT ST_Force3DZ(the_geom) AS the_geom FROM simple_lines \n),\n```", "```py\nexplodedLine AS \n( \n  SELECT (ST_Dump(the_geom)).geom AS the_geom FROM threeDLines \n), \n```", "```py\nthreeDline AS \n( \n  SELECT ST_MakeLine( \n    ARRAY[ \n      ST_StartPoint(the_geom), \n      ST_EndPoint(the_geom), \n      ST_Translate(ST_EndPoint(the_geom), 0, 0, $2), \n      ST_Translate(ST_StartPoint(the_geom), 0, 0, $2), \n      ST_StartPoint(the_geom) \n    ] \n  ) \n  AS the_geom FROM explodedLine \n), \n```", "```py\nthreeDwall AS \n( \n  SELECT ST_MakePolygon(the_geom) as the_geom FROM threeDline \n), \n```", "```py\nbuildingTop AS \n( \n  SELECT ST_Translate(ST_Force3DZ($1), 0, 0, $2) AS the_geom \n), \n-- and a floor \nbuildingBottom AS \n( \n  SELECT ST_Translate(ST_Force3DZ($1), 0, 0, 0) AS the_geom \n), \n```", "```py\nwholeBuilding AS \n( \n  SELECT the_geom FROM buildingBottom \n    UNION ALL \n  SELECT the_geom FROM threeDwall \n    UNION ALL \n  SELECT the_geom FROM buildingTop \n), \n-- then convert this collecion to a multipolygon \nmultiBuilding AS \n( \n  SELECT ST_Multi(ST_Collect(the_geom)) AS the_geom FROM  \n    wholeBuilding \n), \n```", "```py\ntextBuilding AS \n( \n  SELECT ST_AsText(the_geom) textbuilding FROM multiBuilding \n), \ntextBuildSurface AS \n( \n  SELECT ST_GeomFromText(replace(textbuilding, 'MULTIPOLYGON', \n         'POLYHEDRALSURFACE')) AS the_geom FROM textBuilding \n) \nSELECT the_geom FROM textBuildSurface \n```", "```py\nCREATE OR REPLACE FUNCTION chp07.threedbuilding(footprint geometry,  \n  height numeric) \nRETURNS geometry AS \n$BODY$ \n\n-- make our polygons into lines, and then chop up into individual line segments \nWITH simple_lines AS \n( \n  SELECT 1 AS gid, ST_MakeLine(ST_PointN(the_geom,pointn), \n    ST_PointN(the_geom,pointn+1)) AS the_geom \n  FROM (SELECT 1 AS gid, polygon_to_line($1) AS the_geom ) AS a \n  LEFT JOIN \n  (SELECT 1 AS gid, generate_series(1,  \n    ST_NumPoints(polygon_to_line($1))-1) AS pointn  \n  ) AS b \n  ON a.gid = b.gid \n), \n-- convert our lines into 3D lines, which will set our third  coordinate to 0 by default \nthreeDlines AS \n( \n  SELECT ST_Force3DZ(the_geom) AS the_geom FROM simple_lines \n), \n-- now we need our lines as individual records, so we dump them out using ST_Dump, and then just grab the geometry portion of the dump \nexplodedLine AS \n( \n  SELECT (ST_Dump(the_geom)).geom AS the_geom FROM threeDLines \n), \n-- Next step is to construct a line representing the boundary of the  extruded \"wall\" \nthreeDline AS \n( \n  SELECT ST_MakeLine( \n    ARRAY[ \n    ST_StartPoint(the_geom), \n    ST_EndPoint(the_geom), \n    ST_Translate(ST_EndPoint(the_geom), 0, 0, $2), \n    ST_Translate(ST_StartPoint(the_geom), 0, 0, $2), \n    ST_StartPoint(the_geom) \n    ] \n  ) \nAS the_geom FROM explodedLine \n), \n-- we convert this line into a polygon \nthreeDwall AS \n( \n  SELECT ST_MakePolygon(the_geom) as the_geom FROM threeDline \n), \n-- add a top to the building \nbuildingTop AS \n( \n  SELECT ST_Translate(ST_Force3DZ($1), 0, 0, $2) AS the_geom \n), \n-- and a floor \nbuildingBottom AS \n( \n  SELECT ST_Translate(ST_Force3DZ($1), 0, 0, 0) AS the_geom \n), \n-- now we put the walls, roof, and floor together \nwholeBuilding AS \n( \n  SELECT the_geom FROM buildingBottom \n    UNION ALL \n  SELECT the_geom FROM threeDwall \n    UNION ALL \n  SELECT the_geom FROM buildingTop \n), \n-- then convert this collecion to a multipolygon \nmultiBuilding AS \n( \n  SELECT ST_Multi(ST_Collect(the_geom)) AS the_geom FROM wholeBuilding \n), \n-- While we could leave this as a multipolygon, we'll do things properly and munge an informal cast \n-- to polyhedralsurfacem which is more widely recognized as the appropriate format for a geometry like \n-- this. In our case, we are already formatted as a polyhedralsurface, minus the official designation, \n-- so we'll just convert to text, replace the word MULTIPOLYGON with POLYHEDRALSURFACE and then convert \n-- back to geometry with ST_GeomFromText \n\ntextBuilding AS \n( \n  SELECT ST_AsText(the_geom) textbuilding FROM multiBuilding \n), \ntextBuildSurface AS \n( \n  SELECT ST_GeomFromText(replace(textbuilding, 'MULTIPOLYGON',  \n    'POLYHEDRALSURFACE')) AS the_geom FROM textBuilding \n) \nSELECT the_geom FROM textBuildSurface \n; \n$BODY$ \n  LANGUAGE sql VOLATILE \n  COST 100; \nALTER FUNCTION chp07.threedbuilding(geometry, numeric) \n  OWNER TO me; \n```", "```py\nDROP TABLE IF EXISTS chp07.threed_building; \nCREATE TABLE chp07.threed_building AS  \nSELECT chp07.threeDbuilding(the_geom, 10) AS the_geom  \nFROM chp07.simple_building; \n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom building_footprints\\chp07.building_footprints | psql -U me -d postgis-cookbook \\ -h <HOST> -p <PORT> \nDROP TABLE IF EXISTS chp07.build_footprints_threed; \nCREATE TABLE chp07.build_footprints_threed AS  \nSELECT gid, height, chp07.threeDbuilding(the_geom, height) AS the_geom  \nFROM chp07.building_footprints; \n```", "```py\nDROP TABLE IF EXISTS chp07.buildings_extruded; \nCREATE TABLE chp07.buildings_extruded AS  \nSELECT gid, ST_CollectionExtract(ST_Extrude(the_geom, 20, 20, 40), 3) as the_geom \nFROM chp07.building_footprints \n```", "```py\nVisualsfm <IMAGES_FOLDER>\n```", "```py\n{\n  \"pipeline\": [{\n    \"type\": \"readers.ply\",\n    \"filename\": \"/data/giraffe/giraffe.ply\"\n  }, {\n    \"type\": \"writers.pgpointcloud\",\n    \"connection\": \"host='localhost' dbname='postgis-cookbook' user='me' \n     password='me' port='5432'\",\n    \"table\": \"giraffe\",\n    \"srid\": \"3734\",\n    \"schema\": \"chp07\"\n  }]\n}  \n```", "```py\n$ pdal pipeline giraffe.json\"\n```", "```py\nCOPY(WITH pts AS (SELECT PC_Explode(pa) AS pt FROM chp07.giraffe) SELECT '\n<X3D  \n showStat=\"false\" showLog=\"false\" x=\"0px\" y=\"0px\" width=\"800px\" \n  height=\"600px\">\n  <Scene>\n    <Transform>\n      <Shape>' ||  ST_AsX3D(ST_Union(pt::geometry))  ||'</Shape>\n    </Transform>\n  </Scene>\n</X3D>' FROM pts)\nTO STDOUT WITH CSV;\n```", "```py\n$ psql -U me -d postgis-cookbook -h localhost -f \"x3d_query.sql\" > result.html \n```", "```py\n<link rel=\"stylesheet\" type=\"text/css\"   href=\"http://x3dom.org/x3dom/example/x3dom.css\" />\n<script type=\"text/javascript\" src=\"img/x3dom.js\"></script> \n```", "```py\nCOPY(WITH pts AS (\n  SELECT PC_Explode(pa) AS pt FROM chp07.giraffe\n)\nSELECT regexp_replace('\n  <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n  <html >\n    <head>\n      <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\" />\n      <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n      <title>Point Cloud in a Browser</title>\n      <link rel=\"stylesheet\" type=\"text/css\"\n       href=\"http://x3dom.org/x3dom/example/x3dom.css\" />\n      <script type=\"text/javascript\"\n       src=\"img/x3dom.js\">\n      </script>\n    </head>\n    <body>\n      <h1>Point Cloud in the Browser</h1>\n      <p>\n        Use mouse to rotate, scroll wheel to zoom, and control \n        (or command) click to pan.\n      </p>\n      <X3D pl-k\">       showStat=\"false\" showLog=\"false\" x=\"0px\" y=\"0px\" width=\"800px\"\n       height=\"600px\">\n        <Scene>\n          <Transform>\n            <Shape>' ||  ST_AsX3D(ST_Union(pt::geometry)) || '</Shape>\n          </Transform>\n        </Scene>\n      </X3D>\n    </body>\n  </html>', E'[\\\\n\\\\r]+','', 'g')\nFROM pts)TO STDOUT;\n```", "```py\nCREATE OR REPLACE FUNCTION AsX3D_XHTML(geometry)\nRETURNS character varying AS\n$BODY$\n\nSELECT regexp_replace(\n  '\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n    <html xmlns= \"http://www.w3.org/1999/xhtml\">\n      <head>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\"/>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n        <title>Point Cloud in a Browser</title>\n        <link rel=\"stylesheet\" type=\"text/css\"\n         href=\"http://x3dom.org/x3dom/example/x3dom.css\"/>\n        <script type=\"text/javascript\"\n         src=\"img/x3dom.js\">\n        </script>\n      </head>\n      <body>\n        <h1>Point Cloud in the Browser</h1>\n        <p>\n          Use mouse to rotate, scroll wheel to zoom, and control \n          (or command) click to pan.\n        </p>\n        <X3D xmlns=\"http://www.web3d.org/specifications/x3d-namespace\" \n         showStat=\"false\" showLog=\"false\"  x=\"0px\" y=\"0px\" width=\"800px\"\n         height=\"600px\">\n          <Scene>\n            <Transform>\n              <Shape>'||  ST_AsX3D($1)  || '</Shape>\n            </Transform>\n          </Scene>\n        </X3D>\n      </body>\n    </html>\n  ', E'[\\\\n\\\\r]+' , '' , 'g' ) As x3dXHTML;\n$BODY$\nLANGUAGE sql VOLATILE\nCOST 100;\n```", "```py\ncopy( \n  WITH pts AS ( \n    SELECT  \n      PC_Explode(pa) AS pt  \n    FROM giraffe \n  ) \n  SELECT AsX3D_XHTML(ST_UNION(pt::geometry)) FROM pts) to stdout; \n```", "```py\npsql -U me -d postgis_cookbook -f ST_RotateX.sql\npsql -U me -d postgis_cookbook -f ST_RotateY.sql\npsql -U me -d postgis_cookbook -f ST_RotateXYZ.sql\npsql -U me -d postgis_cookbook -f pyramidMaker.sql\npsql -U me -d postgis_cookbook -f volumetricIntersection.sql\n```", "```py\nCREATE OR REPLACE FUNCTION chp07.pbr(origin geometry, pitch numeric,  \n  bearing numeric, roll numeric, anglex numeric, angley numeric,  \n  height numeric) \n  RETURNS geometry AS \n$BODY$ \n```", "```py\nWITH widthx AS \n( \n  SELECT height / tan(anglex) AS basex \n), \nwidthy AS \n( \n  SELECT height / tan(angley) AS basey \n), \n```", "```py\niViewCone AS ( \n  SELECT pyramidMaker(origin, basex::numeric, basey::numeric, height)  \n    AS the_geom \n    FROM widthx, widthy \n), \n```", "```py\niViewRotated AS ( \n  SELECT ST_RotateXYZ(the_geom, pi() - pitch, 0 - roll, pi() -  \n    bearing, origin) AS the_geom FROM iViewCone \n) \nSELECT the_geom FROM iViewRotated \n```", "```py\nCREATE OR REPLACE FUNCTION chp07.pbr(origin geometry, pitch numeric,  \n  bearing numeric, roll numeric, anglex numeric, angley numeric,  \n  height numeric) \n  RETURNS geometry AS \n$BODY$ \n\nWITH widthx AS \n( \n  SELECT height / tan(anglex) AS basex \n), \nwidthy AS \n( \n  SELECT height / tan(angley) AS basey \n), \niViewCone AS ( \n  SELECT pyramidMaker(origin, basex::numeric, basey::numeric, height)  \n    AS the_geom \n    FROM widthx, widthy \n), \niViewRotated AS ( \n  SELECT ST_RotateXYZ(the_geom, pi() - pitch, 0 - roll, pi() -  \n    bearing, origin) AS the_geom FROM iViewCone \n) \nSELECT the_geom FROM iViewRotated \n; \n$BODY$ \n  LANGUAGE sql VOLATILE \n  COST 100; \n```", "```py\nshp2pgsql -s 3734 -W LATIN1 uas_locations_altitude_hpr_3734 uas_locations | \\PGPASSWORD=me psql -U me -d postgis-cookbook -h localhost\n```", "```py\nDROP TABLE IF EXISTS chp07.viewshed; \nCREATE TABLE chp07.viewshed AS \nSELECT 1 AS gid, roll, pitch, heading, fileName, chp07.pbr(ST_Force3D(geom), \n  radians(0)::numeric, radians(heading)::numeric, radians(roll)::numeric, \n  radians(40)::numeric, radians(50)::numeric, \n ( (3.2808399 * altitude_a) - 838)::numeric) \nAS the_geom FROM uas_locations; \n```", "```py\npg_restore -h localhost -p 8000 -U me -d \"postgis-cookbook\" \\ --schema chp07 --verbose \"lidar_tin.backup\"\n```", "```py\nDROP TABLE IF EXISTS chp07.viewshed; \nCREATE TABLE chp07.viewshed AS  \nSELECT 1 AS gid, roll, pitch, heading, fileName, chp07.pbr(ST_Force3D(geom), radians(0)::numeric, radians(heading)::numeric, radians(roll) ::numeric, radians(40)::numeric, radians(50)::numeric, 1000::numeric) AS the_geom  \nFROM uas_locations  \nWHERE fileName = 'IMG_0512.JPG'; \n```", "```py\n{ \n  \"pipeline\": [{ \n    \"type\": \"readers.ply\", \n    \"filename\": \"/data/uas_flight/uas_points.ply\" \n  }, { \n    \"type\": \"writers.pgpointcloud\", \n    \"connection\": \"host='localhost' dbname='postgis-cookbook' user='me'\n                   password='me' port='5432'\", \n    \"table\": \"uas\", \n    \"schema\": \"chp07\" \n  }] \n} \n```", "```py\n$ pdal pipeline uas_points.json\n```", "```py\nDROP TABLE IF EXISTS chp07.uas_tin; \nCREATE TABLE chp07.uas_tin AS WITH pts AS  \n( \n   SELECT PC_Explode(pa) AS pt  \n   FROM chp07.uas_flights \n) \nSELECT ST_DelaunayTriangles(ST_Union(pt::geometry), 0.0, 2) AS the_geom  \nFROM pts; \n```"]