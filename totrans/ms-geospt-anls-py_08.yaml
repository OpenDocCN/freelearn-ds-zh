- en: Automating QGIS Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book has introduced you to using Python from the command line, in a Jupyter
    Notebook, and in an IDE to perform geospatial tasks. While these three tools will
    allow you to accomplish your tasks, there are many times when work needs to be
    done using desktop GIS software.
  prefs: []
  type: TYPE_NORMAL
- en: QGIS, a popular open source GIS application, provides desktop GIS functionality
    with the ability to work in a Python console and the ability to write toolboxes
    and plugins using Python. In this chapter, you will learn how to manipulate desktop
    GIS data using Python and how to automate these tasks using toolboxes and plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Load and save layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create layers from API data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add, edit, and delete features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select specific features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call geoprocessing functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write geoprocessing toolboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working in the Python console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The QGIS Python console is a Python console. You can perform all of your normal
    Python tasks with the added benefit of having the QGIS libraries added. From the
    console, you can manipulate GIS data and display it on the screen, or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python console is located under the Plugins menu on the QGIS toolbar. You
    can also access it by pressing *Ctrl *+ *Alt *+ *P* on the keyboard. The console
    will usually open in the bottom of the main window. You can undock it by clicking
    on the title bar (where it says Python Console), holding down the mouse button,
    and dragging the window to another location on the screen or by clicking the window
    button at the top-right of the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfc549d0-4917-48e3-86e9-9186a7ddc648.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the Python console
  prefs: []
  type: TYPE_NORMAL
- en: The console has buttons for clearing the window, importing GIS and QGIS specific
    libraries, running the current command (you can press *Enter* instead of clicking
    this button), showing the editor, modifying options, and viewing the Help files.
    The editor launches a simplified text editor you can use for writing your Python
    code. It has a few benefits over the command line. You can use the editor to open
    existing Python files and run or edit them. When you write code in the console,
    you can save it to a file. In the console, you would need to select all, then
    copy and paste it into another file, removing all of the output. The editor also
    allows you to search for text, cut text, add or remove comments, and inspect objects.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the basics of the console and the editor, we can start
    writing some Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Loading layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first things you will probably need to do is load some existing
    GIS data. You can open several different file formats. The method for doing this
    is the same. It is done by creating a `QgsVectorLayer` and passing a parameter
    for the data source, the layer name to be shown in the layers panel widget, and
    the provider name as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For most vector layers, you will use `"ogr"` as the provider. You can then
    add the layer to the map using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code adds the layer to the map registry. Alternatively, you can
    do the previously mentioned code in a single line of code using `iface` as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code loads a vector layer and adds it to the registry in a single
    step. The following screenshot shows the layers added in QGIS and the names added
    to the layers panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/252cacbf-972f-405f-8b3d-7ebda34ceed3.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the layers loaded in QGIS
  prefs: []
  type: TYPE_NORMAL
- en: 'The registry holds a list of all of the layers in the map document. You can
    get a list of loaded layers by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code should show that two layers, `SeeClickFix` and `Streets`,
    are loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can remove a layer from the map by using `removeMapLayer()` and passing
    the `id` of the layer to remove. The `id` is the string from the result of calling
    `mapLayers()`. In this case, the `id` of the loaded layer is `''Steets20171129092415901''`.
    The following code will remove the layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code passes the layer `id` to `removeMapLayer()`. Since the data
    was loaded in the `streets` variable, you can also pass `streets.id()` instead
    of typing the layer `id`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Both methods will result in the layer being removed from the map.
  prefs: []
  type: TYPE_NORMAL
- en: Processing a layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the layer is loaded, you will want to examine the layer and the features
    in the layer. For the layer, you will probably want to know the projection, the
    coordinate reference system, and how many features it has.
  prefs: []
  type: TYPE_NORMAL
- en: Layer properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find the coordinate reference system, you can use `crs()` on the layer as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code assigns the coordinate reference system to the variable `crs`.
    From here, you can inspect it by getting the descriptions shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code will return the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For a **well-known text** (**WKT**) representation of the coordinate reference
    system, you can use the `toWkt()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the results as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the bounding box of the layer by using the `extent()` method shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then get a string of the extent using `toString()`, get the WKT using
    `asWktPolygon()`, or you can get each coordinate individually using `xMinimum()`,
    `xMaximum()`, `yMinimum()`, and `yMaximum()`. The methods and their output are
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To see the available methods on an object, use `dir(object)`.
  prefs: []
  type: TYPE_NORMAL
- en: To see the methods for the extent object, use `dir(extent)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the number of features in the layer by using `pendingFeatureCount()`.
    The following code returns the feature count for the `SeeClickFix` layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The result is a long datatype and in this case, equals 126.
  prefs: []
  type: TYPE_NORMAL
- en: Feature properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can get the first feature using the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous code uses `getFeatures().next()` to get the first feature and assigns
    it to the `item` variable. If you remove the `.next()`, you get a `QgsFeatureIterator`,
    which allows you to iterate through all of the features. For the following examples
    we will use a single feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the `geometry`, assign it to a variable as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the `type`, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code returns `0` for points. Knowing that the features are points,
    we can see the coordinates using `asPoint()` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try the same code on the `streets` layer, we will get a type of `1` and
    the coordinates of the `Polyline` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To get information about the fields in the features, use `fields()` as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get a field name and type by using `.name()` and `.typeName()` for
    each of the four fields. Using field `2`, the following code will show you how to
    get the name and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Knowing the name of the field, you can get the value of the field for the first
    record. Or, you could always use the numerical index as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you know how to access the geometry and attributes of a feature, you
    can iterate through the features using `getFeatures()`. The following code will
    iterate through the features and `print` the `ID` of all of the records with a
    `Status` of `''Closed''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code uses the `getFeatures()` to return an iterator. It then checks
    if the `Status` attribute is equal to `''Closed''` and then prints the attribute
    `ID` if it is. The output is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Drawing a layer from PostGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QGIS will allow you to load a PostgreSQL layer using the `QgsDataSourceURI`
    class and `QgsVectorLayer` (URI, name, provider (Postgres)). For this to work,
    QGIS needs to be compiled with Postgres support. In this section, you will use
    `psycopg2` as you learned in [Chapter 3](42c1ea5a-7372-4688-bb7f-fc3822248562.xhtml),
    *Introduction to Geospatial Databases*, and [Chapter 7](4f2388a3-51fc-419f-a827-bbbedbbb6374.xhtml),
    *Geoprocessing with Geodatabases*. The method of adding features to a layer and
    a layer to the map in this section will be used later in this chapter when you
    learn how to write toolboxes.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you learn how to load the data from PostGIS, we will first cover how
    to draw multiple points, convert them to a feature, add them to a layer, then
    load the layer to the map. The following code will walk you through the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a `memory` layer as shown in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The previous code creates a vector layer and assigns it to the variable `theLayer`.
    The parameters are the type and coordinate reference system of the layer, the
    name for the layer panel, and we specified that it is a `memory` layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to create the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code imports `qgis.PyQtCore`. You need the library for the `QVariant`.
    First, you call the data provider for the layer and pass it to the features. Next,
    you add the attributes and their types to the features. In the following code,
    you create a `point` and add it to the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The previous code creates a `p` variable and makes it a `QgsFeature`. It then
    creates a point `p` and passes longitude and latitude coordinates. The feature
    is assigned geometry from the `point`. Next, you assign the attributes to the
    feature. Now you have a feature with geometry and attributes. In the next line,
    you pass the feature to the features array using `addFeature()`. Lastly, you update
    the layer extents and fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the block of code a second time and assign the `point` different coordinates, `(-106.4540,34.9553)`,
    and then add the layer to the map as in the earlier section of this chapter, shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now have a map with two points as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04cf83ce-3b71-47da-ac91-c0e61a26f86b.png)'
  prefs: []
  type: TYPE_IMG
- en: Two points with attributes loaded in QGIS from the Python console
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the Layers Panel that the layer is named SomePoints. In the attribute
    table, you can see two fields, ID and Name for two features. Now that you know
    how to create features from geometry, add attributes, add the features to a layer,
    and display the layer on the map, we will add PostGIS to the mix and loop through
    the process mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing polygons from PostGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, you will draw the Albuquerque Police Department Area Commands
    polygons from a PostGIS database. You will use the following code with an added
    PostGIS query, a loop to add all of the features, and a WKT function to draw the
    geometry instead of hard-coding the coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to connect to the PostGIS database. The following code is
    the same as you used in [Chapter 3](42c1ea5a-7372-4688-bb7f-fc3822248562.xhtml), *Introduction
    to Geospatial Databases*, and [Chapter 7](4f2388a3-51fc-419f-a827-bbbedbbb6374.xhtml), *Geoprocessing
    With Geodatabases*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code connects to PostGIS, grabs all of the Area Commands with
    their name and geometry, and assigns them to the `c` variable. Next, you will
    create the layer as in the earlier example. You will create a counter `x` and
    make it the `ID` field of the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code creates a polygon `memory` layer, creates the features, and
    adds attributes. Next, you will look through the `cursor`, creating geometry for
    each Area Command and adding attributes, then you update the layer''s extents
    and fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The previous code is the same as in the points example in the previous section.
    The one major difference is that you are creating the polygon using `QgsGeometry.fromWkt(wkt)`.
    The `acmd[1]` variable is the WKT `MultiPolygon` string from PostGIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, add the layer to the map as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will render the screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19a7113e-b217-41b2-b14b-055d6f0e7683.png)'
  prefs: []
  type: TYPE_IMG
- en: And there you have it, the Area Command polygons for the Albuquerque Police
    Department as a layer in QGIS. Next, you will learn how to add, edit, and delete
    features from a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Adding, editing, and deleting features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, you created an empty layer and added fields, then
    added data and displayed it. There will be times when you will need to do that,
    more often than not, you will already have a layer and you will need to add data,
    edit data, or delete data from it. In this section, you will learn how to perform
    those tasks on existing data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding features to an existing layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add data to a layer, you first need to load the layer. Start by loading
    a subset of some `SeeClickFix` data for Albuquerque as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The previous code loads and displays the layer on the map. It is the same code
    from the first section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You do not need to display the layer on the map to work with it. You can load
    the layer using `scf = QgsVectorLayer("C:\Users\Paul\Desktop\PythonBook\CHP8\SCF.shp",
    "SeeClickFix","ogr")`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the layer loaded you can use `capabilitiesString()` to see
    what operations the provider allows on the data. The following code shows the
    results on the loaded layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `Add Features` is a capability, you can add a new feature as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The previous code creates a feature and gets the fields from the loaded layer.
    It then sets each of the attributes. Next, it sets the geometry from a point.
    Lastly, the feature is added to the layer. When you call `addFeatures()` there
    are two return values you can assign to variables—the result and the feature.
    The result of `addFeature()` will be either true or false. The returned feature
    is a list of features. It may be convenient to hold the feature if you need to
    perform more operations with it.
  prefs: []
  type: TYPE_NORMAL
- en: When automating the process, you can perform a capabilities check before trying
    to edit the layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results are a new point and record in the attributes table as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5887ecb1-1029-4075-9d3a-4eeba4a17eec.png)'
  prefs: []
  type: TYPE_IMG
- en: A feature added to the layer
  prefs: []
  type: TYPE_NORMAL
- en: 'You can simplify the previous code by passing all the attributes in a single
    line using a list. The following code shows you how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The previous code writes the attributes using a list and `setAttributes()` instead
    of the singular `setAttribute()`. If you want to remember the field names when
    reading your code later, the more verbose version is clearer. But if the efficiency
    of the code is your goal, the latter version is more appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: What if we made a mistake, or have records we do not need? The next section
    will show you how to delete a feature.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting features from an existing layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deleting features can be done in a single line of code following the format
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, you use `deleteFeatures()` and the `id` of the layer.
    The `id` is the `feature.id()`. It is a number held internally and not in a user
    assigned attribute. To get the `id` of a specific feature you can iterate through
    them as you learned earlier in this chapter. The following code shows you how
    to delete the feature we created in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The previous code iterates through the features in the layer looking for the
    one with the `ID` of `311`. When it finds it, it uses `deleteFeatures()` and passes
    the `id` using `x.id()`. In this case the `id` was `216`. If you know the `id`
    of the feature, you can delete it without the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also pass a list of IDs as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The previous code iterates through the features in the layer looking for all
    of the `'Closed'` cases. When it finds one, it puts the `id` in the list `key`.
    Lastly, it calls `deleteFeatures()` and passes the list.
  prefs: []
  type: TYPE_NORMAL
- en: Editing features from an existing layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now add and delete features, but sometimes you only need to change an
    attribute value. For example, an open case status to a closed case status. In
    this section, you will learn how to modify attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes are modified by calling `changeAttributeValues()`. The following
    code changes a single feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code calls `changeAttributeValues()` and passes a dictionary with
    the key being the feature `id` and the value being a dictionary of attributes—`{id:{0:value,
    1:value, n:value}}`. The keys for the attributes dictionary are the field indexes.
    There are four fields in the features so the dictionary of attributes will have
    keys `0` through `3`. The following screenshot shows the change in the attribute
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67704e0a-c110-4d57-b0e8-3ce4f7fdb4af.png)'
  prefs: []
  type: TYPE_IMG
- en: A single feature edited
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous example assumes you already know the `id` of the feature you want
    to modify. It also assumes you want to modify all of the attribute values. The
    following code will modify several features but only a single attribute value
    in each—Status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, a dictionary is declared with a key of `3` (the `''Status''`
    field) and a value of `"Closed"`. The code then iterates through the features
    in the layer looking for a match. When it finds a match, it changes the attribute
    value, but this time only the value of the Status field. The results are reflected
    in the attributes table shown in the screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2da7e828-dc2c-4132-baa8-23a3602ded04.png)'
  prefs: []
  type: TYPE_IMG
- en: All features of the Other type now have a status of Open
  prefs: []
  type: TYPE_NORMAL
- en: In the previous examples, you have been iterating through features and selecting
    them based on a condition. In the next section, you will learn how to highlight
    the selected features and how to use expressions to select instead of a condition.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting features using expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using expressions, you can iterate through features and evaluate the expression
    returning true(1) or false(0). Before we get into expressions, let''s select and
    highlight a feature. Selecting a feature is accomplished by calling `setSelectedFeatures()`
    and passing a list of IDs. The following code will select a single feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The previous code, imports `QtGUI`, and `Qt.Widgets`. These are needed to set
    the color using `QColor`. The next line gets the map canvas and sets the section
    color to `red`. Lastly, the code selects the feature with an `id` of `100`. It
    will now display `red` on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous example assumes you want to select a single feature and that you
    know the `id`. That is rarely the case. More often than not you will want to select
    by some condition—or using an expression. Using `QgsExpression()` you can pass
    an expression string and evaluate it against features. The following code shows
    you how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: First, the previous code creates a list, `closed`, to store the IDs where the
    expression evaluates to true. Next the expression is declared. The expression
    checks for two conditions on the Type and Status. The expression is prepared and
    passed the fields in the layer. The next line iterates through the features. If
    the expression is true (`1`), the `id` is put in the list. Lastly, the selected
    features are set to the IDs in the closed list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results of the previous code are shown in the screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/007b4975-1a00-4f08-8484-c9b29a913792.png)'
  prefs: []
  type: TYPE_IMG
- en: Features selected based on an expression
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to use the toolboxes that come with
    QGIS to execute algorithms and perform geospatial tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Using toolboxes in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'QGIS has a processing library. If you go to the Processing menu in QGIS and
    select Toolbox, you will see a widget displayed with groups of toolboxes. The
    widget will look as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2e75ae6-b8ea-4819-86b1-5a04a461f799.png)'
  prefs: []
  type: TYPE_IMG
- en: The processing widget
  prefs: []
  type: TYPE_NORMAL
- en: 'You have access to the toolboxes in Python by importing `processing`. You can
    see the available algorithms by executing the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code imports `processing` and calls the `alglist()` method. The
    results are all of the available algorithms from the installed toolboxes. You
    should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To search the algorithms by keyword, you can pass a string to `alglist()` as
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code passes a string to narrow the results. The output will be
    several algorithms containing the word `buffer`. See the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we will use the `Buffer vectors` algorithm. To see how the
    algorithm works, you can run the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code calls `alghelp()` and passes the name of the algorithm found
    in the second column of the `alglist()`. The result will tell you the parameters
    and their type required for executing the algorithm. The output is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If you run the algorithm from the GUI and then open `\.qgis2\processing\processing.log`,
    you will see the parameters used to execute the algorithm. Copy them and use them
    in your Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous output shows the parameters needed to run the algorithm. By using
    `runalg()` you can execute the algorithm. The buffer vector is executed in the
    code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code calls `runalg()` and passes the name of the algorithm we
    want to run, then the parameters required by the algorithm. In this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The output layer is then added to the map. The result is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a63f65f2-9d2b-4b7f-b6eb-217bf808e480.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of the buffer algorithm
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to use the Python console and call an algorithm let's
    write our own algorithm. The next section will show you how to make a toolbox
    that you can call using `runalg()` or by using the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Writing custom toolboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing toolboxes will allow you to automate several tasks and make that code
    available to users as a GUI, or to other developers as an algorithm that can be
    executed using processing. In this section, you will learn how to create a toolbox
    and call it from processing.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to load data from a file and from a PostGIS
    database. In this example, you will learn how to bring data in to QGIS from the
    `SeeClickFix`** Application Program Interface** (**API**).
  prefs: []
  type: TYPE_NORMAL
- en: '`SeeClickFix` is a 311 reporting system that is used by many cities in the
    United States. It contains geospatial data and has a very well documented, and
    user-friendly API.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new script, open the processing toolbox in QGIS. This will open
    an editor window. You will write your code in this window and save it using the
    save icon. The file name will become a toolbox under Tools|User scripts|File name.
    Save the file and name it `SeeClickFix`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have an empty toolbox, we can start adding code. Before the code,
    you need to create the parameters you will want to pass to this algorithm. Each
    parameter will also become a GUI widget with the parameter name as the label.
    The `SeeClickFix` API allows you to specify a city or neighborhood and also filter
    strings. The following code will add these as parameters to our algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The previous code uses double comment symbols (`##`), then the parameter name
    followed by the parameter type and a default value. Default values are required
    for numbers and strings. The first parameter in the code is the city or neighborhood,
    it is a `string` and defaults to Albuquerque. Next, is the filter keyword, which
    is also a `string` and defaults to `Nothing`. Lastly, the code has an output,
    which is a type of `output vector`. The output will be what is added to the map
    or saved to disk.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you can run the toolbox in the GUI and you will see the window
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9185e7f-4e22-443e-99e8-369d9ec1a1fc.png)'
  prefs: []
  type: TYPE_IMG
- en: The GUI for the toolbox. Notice each parameter is a label
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can import the libraries you need to perform the task. The following
    code will import what you need for the `SeeClickFix` toolbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The previous code imports the `qgis` libraries and also `requests` and `json`.
    The `requests` library will be used to make the API call and `json` will parse
    the response from the request to `json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it is time to write some code. First, you will need to grab the parameters
    and set the variables needed to make the API call, and it would not hurt to give
    the user some information on what is happening. The following code will show you
    how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The previous code passes the parameters to variables. Then, I used a global
    variable, `progress`, which is provided to you by QGIS and calls the `setInfo()`
    and `setText()` methods to tell the user what is happening. `progress` is available
    as part of QGIS. The `setInfo()` method displays text in the text area of the
    GUI. The `setText()` method changes the text of the label on the `progress` bar
    and adds it to the text area in the GUI as well.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the code checks if the filter parameter is still `None`, and if it is,
    it assigns the **Uniform Resource Locator** (**URL**) to the API as a string with
    no filter parameter and uses the city or neighborhood parameter. If there is a
    filter, a different URL is assigned to make the API call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you are ready for some GIS specific setup. The following code will start
    you off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code sets a coordinate reference system in WGS 84\. Then, it creates
    a `memory` layer, and assigns fields. Lastly, it creates a `writer` vector and
    passes the output parameter, encoding (`None`), the fields, the geometry type,
    and a coordinate reference system. Now you can make the API call as shown in the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The previous code uses `requests` to make an API call. It assigns a variable
    for the number of `pages` and the number of `records` returned. Using the `setInfo()`
    method, the code tells the user how many `records` are being processed. It then
    loops through each page and loads the items from the `page`. It tells the user
    what `page` it is currently reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the code will parse each `record` on the `page` as a feature and send
    it to the vector `writer`. You do not need to add the output to the map. Processing
    will handle this for you if you run it from the GUI. When you run it from Python,
    you get the file path to the layer and can load it yourself. The following code
    will show you how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The previous code creates a feature and passes the geometry from the API to
    a `point`. It then passes the attributes and sends the completed feature to the
    vector `writer`. The `progress` bar on the GUI is updated using `progress.setPercentage()`.
    The method takes a `float`. In this example, the percentage is the number of `records`
    processed divided by the total number of `records`. Lastly, you delete the `writer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your toolbox is complete, save it. Now a user can run it from the GUI or you
    can call it from Python. The following code will show you how to call it from
    Python and add the results to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code calls the `alghelp()` method to show our new algorithm and
    the parameters. Next, it runs the algorithm using `runalg()` and assigns the results
    to the `out` variable. Printing the `out` variable shows a dictionary with a key
    of `Output` and a path to a temporary vector as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You can assign the vector to a layer and add it to the map, or you can iterate
    through the features and do something else with it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of adding the layer to the map will look like the following screenshot.
    All of the `SeeClickFix` incidents reported along the street, Juan Tabo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bac1fc04-bbcd-4809-8478-cde9ca8b00e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of the toolbox
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to use Python in QGIS. You started by
    learning the basics of loading a layer and displaying it on the map, and then
    progressed to adding, editing, and deleting features. You learned how to select
    features, highlight the selection, and how to use expressions. Then, we took advantage
    of pre-built geoprocessing tools and you learned how to call toolbox algorithms
    using processing. Lastly, you learned how to write your own toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use Python with Esri tools. You will
    learn how to use Jupyter Notebooks in a browser to interact with cloud-based datasets
    and how to use the Esri API for Python to perform basic geospatial analysis and
    to create ArcGIS Online web maps.
  prefs: []
  type: TYPE_NORMAL
