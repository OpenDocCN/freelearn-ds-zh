["```py\n    import numpy as np\n    ```", "```py\n    list_1 = [1,2,3]\n    ```", "```py\n    array_1 = np.array(list_1)\n    ```", "```py\n    import array as arr\n    a = arr.array('d', [1.2, 3.4, 5.6])\n    print(a)\n    ```", "```py\n    array('d', [1.2, 3.4, 5.6])\n    ```", "```py\n    type(array_1)\n    ```", "```py\n    numpy.ndarray\n    ```", "```py\n    type (list_1)\n    ```", "```py\n    list\n    ```", "```py\n    list_2 = list_1 + list_1\n    print(list_2)\n    ```", "```py\n     [1, 2, 3, 1, 2, 3]\n    ```", "```py\n    array_2 = array_1 + array_1\n    print(array_2)\n    ```", "```py\n    [2, ,4, 6]\n    ```", "```py\n    print(\"array_1 multiplied by array_1: \",array_1*array_1)\n    ```", "```py\n    array_1 multiplied by array_1:  [1 4 9]\n    ```", "```py\n    print(\"array_1 divided by array_1: \",array_1/array_1)\n    ```", "```py\n    array_1 divided by array_1:  [1\\. 1\\. 1.]\n    ```", "```py\n    print(\"array_1 raised to the power of array_1: \",array_1**array_1)\n    ```", "```py\n    array_1 raised to the power of array_1:  [ 1  4 27]\n    ```", "```py\n    list_5=[i for i in range(1,6)]\n    print(list_5)\n    ```", "```py\n    [1, 2, 3, 4, 5]\n    ```", "```py\n    array_5=np.array(list_5)\n    array_5\n    ```", "```py\n    array([1, 2, 3, 4, 5])\n    ```", "```py\n    # sine function\n    print(\"Sine: \",np.sin(array_5))\n    ```", "```py\n    Sine:  [ 0.84147098  0.90929743  0.14112001 -0.7568025  -0.95892427]\n    ```", "```py\n    # logarithm\n    print(\"Natural logarithm: \",np.log(array_5))\n    print(\"Base-10 logarithm: \",np.log10(array_5))\n    print(\"Base-2 logarithm: \",np.log2(array_5))\n    ```", "```py\n    Natural logarithm:  [0\\.         0.69314718 1.09861229 1.38629436 1.60943791]\n    Base-10 logarithm:  [0\\.         0.30103    0.47712125 0.60205999 0.69897   ]\n    Base-2 logarithm:  [0\\.         1\\.         1.5849625  2\\.         2.32192809]\n    ```", "```py\n    # Exponential\n    print(\"Exponential: \",np.exp(array_5))\n    ```", "```py\n    Exponential:  [  2.71828183   7.3890561   20.08553692  54.59815003 148.4131591 ]\n    ```", "```py\n    print(\"A series of numbers:\",np.arange(5,16))\n    ```", "```py\n    A series of numbers: [ 5  6  7  8  9 10 11 12 13 14 15]\n    ```", "```py\n    print(\"Numbers spaced apart by 2: \",np.arange(0,11,2))\n    print(\"Numbers spaced apart by a floating point number: \",np.arange(0,11,2.5))\n    print(\"Every 5th number from 30 in reverse order\\n\",np.arange(30,-1,-5))\n    ```", "```py\n    Numbers spaced apart by 2:  [ 0  2  4  6  8 10]\n    Numbers spaced apart by a floating point number:  [ 0\\.   2.5  5\\.   7.5 10\\. ]\n    Every 5th number from 30 in reverse order\n     [30 25 20 15 10  5  0]\n    ```", "```py\n    print(\"11 linearly spaced numbers between 1 and 5: \",np.linspace(1,5,11))\n    ```", "```py\n    11 linearly spaced numbers between 1 and 5:  [1\\.  1.4 1.8 2.2 2.6 3\\.  3.4 3.8 4.2 4.6 5\\. ]\n    ```", "```py\n    list_2D = [[1,2,3],[4,5,6],[7,8,9]]\n    mat1 = np.array(list_2D)\n    print(\"Type/Class of this object:\",type(mat1))\n    print(\"Here is the matrix\\n----------\\n\",mat1,\"\\n----------\")\n    ```", "```py\n    Type/Class of this object: <class 'numpy.ndarray'>\n    Here is the matrix\n    ---------- \n    [[1 2 3] \n    [4 5 6] \n    [7 8 9]] \n    ----------\n    ```", "```py\n    tuple_2D = np.array([(1.5,2,3), (4,5,6)])\n    mat_tuple = np.array(tuple_2D)\n    print (mat_tuple)\n    ```", "```py\n    [[1.5 2\\.  3\\. ]\n     [4\\.  5\\.  6\\. ]]\n    ```", "```py\n    print(\"Dimension of this matrix: \",mat1.ndim,sep='')\n    ```", "```py\n    Dimension of this matrix: 2\n    ```", "```py\n    print(\"Size of this matrix: \", mat1.size,sep='') \n    ```", "```py\n    Size of this matrix: 9\n    ```", "```py\n    print(\"Shape of this matrix: \", mat1.shape,sep='')\n    ```", "```py\n    Shape of this matrix: (3, 3)\n    ```", "```py\n    print(\"Data type of this matrix: \", mat1.dtype,sep='')\n    ```", "```py\n    Data type of this matrix: int32\n    ```", "```py\n    print(\"Vector of zeros: \",np.zeros(5))\n    ```", "```py\n    Vector of zeros:  [0\\. 0\\. 0\\. 0\\. 0.]\n    ```", "```py\n    print(\"Matrix of zeros: \",np.zeros((3,4)))\n    ```", "```py\n    Matrix of zeros:  [[0\\. 0\\. 0\\. 0.]\n     [0\\. 0\\. 0\\. 0.]\n     [0\\. 0\\. 0\\. 0.]]\n    ```", "```py\n    print(\"Matrix of 5's: \",5*np.ones((3,3)))\n    ```", "```py\n    Matrix of 5's:  [[5\\. 5\\. 5.]\n     [5\\. 5\\. 5.]\n     [5\\. 5\\. 5.]]\n    ```", "```py\n    print(\"Identity matrix of dimension 2:\",np.eye(2))\n    ```", "```py\n    Identity matrix of dimension 2: [[1\\. 0.]\n     [0\\. 1.]]\n    ```", "```py\n    print(\"Identity matrix of dimension 4:\",np.eye(4))\n    ```", "```py\n    Identity matrix of dimension 4: [[1\\. 0\\. 0\\. 0.]\n     [0\\. 1\\. 0\\. 0.]\n     [0\\. 0\\. 1\\. 0.]\n     [0\\. 0\\. 0\\. 1.]]\n    ```", "```py\n    print(\"Random matrix of shape (4,3):\\n\",np.random.randint(low=1,high=10,size=(4,3)))\n    ```", "```py\n    Random matrix of shape (4,3):\n     [[6 7 6]\n     [5 6 7]\n     [5 3 6]\n     [2 9 4]]\n    ```", "```py\n    a = np.random.randint(1,100,30)\n    b = a.reshape(2,3,5)\n    c = a.reshape(6,5)\n    ```", "```py\n    print (\"Shape of a:\", a.shape)\n    print (\"Shape of b:\", b.shape)\n    print (\"Shape of c:\", c.shape)\n    ```", "```py\n    Shape of a: (30,)\n    Shape of b: (2, 3, 5)\n    Shape of c: (6, 5)\n    ```", "```py\n    print(\"\\na looks like\\n\",a)\n    print(\"\\nb looks like\\n\",b)\n    print(\"\\nc looks like\\n\",c)\n    ```", "```py\n    a looks like\n     [ 7 82  9 29 50 50 71 65 33 84 55 78 40 68 50 15 65 55 98 38 23 75 50 57\n     32 69 34 59 98 48]\n    b looks like\n     [[[ 7 82  9 29 50]\n      [50 71 65 33 84]\n      [55 78 40 68 50]]\n     [[15 65 55 98 38]\n      [23 75 50 57 32]\n      [69 34 59 98 48]]]\n    c looks like\n     [[ 7 82  9 29 50]\n     [50 71 65 33 84]\n     [55 78 40 68 50]\n     [15 65 55 98 38]\n     [23 75 50 57 32]\n     [69 34 59 98 48]]\n    ```", "```py\n    b_flat = b.ravel()\n    print(b_flat)\n    ```", "```py\n    [ 7 82  9 29 50 50 71 65 33 84 55 78 40 68 50 15 65 55 98 38 23 75 50 57\n     32 69 34 59 98 48]\n    ```", "```py\n    array_1 = np.arange(0,11)\n    print(\"Array:\",array_1)\n    ```", "```py\n    Array: [ 0  1  2  3  4  5  6  7  8  9 10]\n    ```", "```py\n    print(\"Element at 7th index is:\", array_1[7])\n    ```", "```py\n    Element at 7th index is: 7\n    ```", "```py\n    print(\"Elements from 3rd to 5th index are:\", array_1[3:6])\n    ```", "```py\n    Elements from 3rd to 5th index are: [3 4 5]\n    ```", "```py\n    print(\"Elements up to 4th index are:\", array_1[:4])\n    ```", "```py\n    Elements up to 4th index are: [0 1 2 3]\n    ```", "```py\n    print(\"Elements from last backwards are:\", array_1[-1::-1])\n    ```", "```py\n    Elements from last backwards are: [10  9  8  7  6  5  4  3  2  1  0]\n    ```", "```py\n    print(\"3 Elements from last backwards are:\", array_1[-1:-6:-2])\n    ```", "```py\n    3 Elements from last backwards are: [10  8  6]\n    ```", "```py\n    array_2 = np.arange(0,21,2)\n    print(\"New array:\",array_2)\n    ```", "```py\n    New array: [ 0  2  4  6  8 10 12 14 16 18 20]\n    ```", "```py\n    print(\"Elements at 2nd, 4th, and 9th index are:\", array_2[[2,4,9]])\n    ```", "```py\n    Elements at 2nd, 4th, and 9th index are: [ 4  8 18]\n    ```", "```py\n    matrix_1 = np.random.randint(10,100,15).reshape(3,5)\n    print(\"Matrix of random 2-digit numbers\\n \",matrix_1)\n    ```", "```py\n    Matrix of random 2-digit numbers\n      [[21 57 60 24 15]\n     [53 20 44 72 68]\n     [39 12 99 99 33]]\n    ```", "```py\n    print(\"\\nDouble bracket indexing\\n\")\n    print(\"Element in row index 1 and column index 2:\", matrix_1[1][2])\n    ```", "```py\n    Double bracket indexing\n    Element in row index 1 and column index 2: 44\n    ```", "```py\n    print(\"\\nSingle bracket with comma indexing\\n\")\n    print(\"Element in row index 1 and column index 2:\", matrix_1[1,2])\n    ```", "```py\n    Single bracket with comma indexing\n    Element in row index 1 and column index 2: 44\n    ```", "```py\n    print(\"\\nRow or column extract\\n\")\n    print(\"Entire row at index 2:\", matrix_1[2])\n    print(\"Entire column at index 3:\", matrix_1[:,3])\n    ```", "```py\n    Row or column extract\n    Entire row at index 2: [39 12 99 99 33]\n    Entire column at index 3: [24 72 99]\n    ```", "```py\n    print(\"\\nSubsetting sub-matrices\\n\")\n    print(\"Matrix with row indices 1 and 2 and column indices 3 and 4\\n\", matrix_1[1:3,3:5])\n    ```", "```py\n    Subsetting sub-matrices\n    Matrix with row indices 1 and 2 and column indices 3 and 4\n     [[72 68]\n     [99 33]]\n    ```", "```py\n    print(\"Matrix with row indices 0 and 1 and column indices 1 and 3\\n\", matrix_1[0:2,[1,3]])\n    ```", "```py\n    Matrix with row indices 0 and 1 and column indices 1 and 3\n     [[57 24]\n     [20 72]]\n    ```", "```py\nmatrix_1 = np.array(np.random.randint(10,100,15)).reshape(3,5)\nprint(\"Matrix of random 2-digit numbers\\n\",matrix_1)\nprint (\"\\nElements greater than 50\\n\", matrix_1[matrix_1>50])\n```", "```py\nMatrix of random 2-digit numbers\n [[71 89 66 99 54]\n [28 17 66 35 85]\n [82 35 38 15 47]]\nElements greater than 50\n [71 89 66 99 54 66 85 82]\n```", "```py\n    matrix_1 = np.random.randint(1,10,9).reshape(3,3)\n    matrix_2 = np.random.randint(1,10,9).reshape(3,3)\n    print(\"\\n1st Matrix of random single-digit numbers\\n\",matrix_1)\n    print(\"\\n2nd Matrix of random single-digit numbers\\n\",matrix_2)\n    ```", "```py\n    1st Matrix of random single-digit numbers\n     [[6 5 9]\n     [4 7 1]\n     [3 2 7]]\n    2nd Matrix of random single-digit numbers\n     [[2 3 1]\n     [9 9 9]\n     [9 9 6]]\n    ```", "```py\n    print(\"\\nAddition\\n\", matrix_1+matrix_2)\n    print(\"\\nMultiplication\\n\", matrix_1*matrix_2)\n    print(\"\\nDivision\\n\", matrix_1/matrix_2)\n    print(\"\\nLinear combination: 3*A - 2*B\\n\", 3*matrix_1-2*matrix_2)\n    ```", "```py\n    Addition\n     [[ 8  8 10]\n     [13 16 10]\n     [12 11 13]] ^\n    Multiplication\n     [[12 15  9]\n     [36 63  9]\n     [27 18 42]]\n    Division\n     [[3\\.         1.66666667 9\\.        ]\n     [0.44444444 0.77777778 0.11111111]\n     [0.33333333 0.22222222 1.16666667]]\n    Linear combination: 3*A - 2*B\n     [[ 14   9  25]\n     [ -6   3 -15]\n     [ -9 -12   9]]\n    ```", "```py\n    print(\"\\nAddition of a scalar (100)\\n\", 100+matrix_1)\n    print(\"\\nExponentiation, matrix cubed here\\n\", matrix_1**3)\n    print(\"\\nExponentiation, square root using 'pow' function\\n\",pow(matrix_1,0.5))\n    ```", "```py\n    Addition of a scalar (100)\n     [[106 105 109]\n     [104 107 101]\n     [103 102 107]]\n    Exponentiation, matrix cubed here\n     [[216 125 729]\n     [ 64 343   1]\n     [ 27   8 343]]\n    Exponentiation, square root using 'pow' function\n     [[2.44948974 2.23606798 3\\.        ]\n     [2\\.         2.64575131 1\\.        ]\n     [1.73205081 1.41421356 2.64575131]]\n    ```", "```py\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6],[7,8]])\nprint(\"Matrix a\\n\",a)\nprint(\"Matrix b\\n\",b)\nprint(\"Vertical stacking\\n\",np.vstack((a,b)))\nprint(\"Horizontal stacking\\n\",np.hstack((a,b)))\n```", "```py\nMatrix a\n [[1 2]\n [3 4]]\nMatrix b\n [[5 6]\n [7 8]]\nVertical stacking\n [[1 2]\n [3 4]\n [5 6]\n [7 8]]\nHorizontal stacking\n [[1 2 5 6]\n [3 4 7 8]]\n```", "```py\n    labels = ['a','b','c']\n    my_data = [10,20,30]\n    array_1 = np.array(my_data)\n    d = {'a':10,'b':20,'c':30}\n    print (\"Labels:\", labels)\n    print(\"My data:\", my_data)\n    print(\"Dictionary:\", d)\n    ```", "```py\n    Labels: ['a', 'b', 'c']\n    My data: [10, 20, 30]\n    Dictionary: {'a': 10, 'b': 20, 'c': 30}\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    series_1=pd.Series(data=my_data)\n    print(series_1)\n    ```", "```py\n    0    10\n    1    20\n    2    30\n    dtype: int64\n    ```", "```py\n    series_2=pd.Series(data=my_data, index = labels)\n    print(series_2)\n    ```", "```py\n    a    10\n    b    20\n    c    30\n    dtype: int64\n    ```", "```py\n    series_3=pd.Series(array_1,labels)\n    print(series_3)\n    ```", "```py\n    a    10\n    b    20\n    c    30\n    dtype: int32\n    ```", "```py\n    series_4=pd.Series(d)\n    print(series_4)\n    ```", "```py\n    a    10\n    b    20\n    c    30\n    dtype: int64\n    ```", "```py\n    print (\"\\nHolding numerical data\\n\",'-'*25, sep='')\n    print(pd.Series(array_1))\n    ```", "```py\n    Holding numerical data\n    -------------------------\n    0    10\n    1    20\n    2    30\n    dtype: int32\n    ```", "```py\n    print (\"\\nHolding text labels\\n\",'-'*20, sep='')\n    print(pd.Series(labels))\n    ```", "```py\n    Holding text labels\n    --------------------\n    0    a\n    1    b\n    2    c\n    dtype: object\n    ```", "```py\n    print (\"\\nHolding functions\\n\",'-'*20, sep='')\n    print(pd.Series(data=[sum,print,len]))\n    ```", "```py\n    Holding functions\n    --------------------\n    0      <built-in function sum>\n    1    <built-in function print>\n    2      <built-in function len>\n    dtype: object\n    ```", "```py\n    print (\"\\nHolding objects from a dictionary\\n\",'-'*40, sep='')\n    print(pd.Series(data=[d.keys, d.items, d.values]))\n    ```", "```py\n    Holding objects from a dictionary\n    ----------------------------------------\n    0    <built-in method keys of dict object at 0x0000...\n    1    <built-in method items of dict object at 0x000...\n    2    <built-in method values of dict object at 0x00...\n    dtype: object\n    ```", "```py\n    matrix_data = np.random.randint(1,10,size=20).reshape(5,4)\n    ```", "```py\n    row_labels = ['A','B','C','D','E']\n    column_headings = ['W','X','Y','Z']\n    df = pd.DataFrame(data=matrix_data, index=row_labels,\n                      columns=column_headings)\n    ```", "```py\n    print(\"\\nThe data frame looks like\\n\",'-'*45, sep='')\n    print(df) \n    ```", "```py\n    The data frame looks like\n    ---------------------------------------------\n       W  X  Y  Z\n    A  6  3  3  3\n    B  1  9  9  4\n    C  4  3  6  9\n    D  4  8  6  7\n    E  6  6  9  1\n    ```", "```py\n    d={'a':[10,20],'b':[30,40],'c':[50,60]}\n    ```", "```py\n    df2=pd.DataFrame(data=d,index=['X','Y'])\n    print(df2)\n    ```", "```py\n        a   b   c\n    X  10  30  50\n    Y  20  40  60\n    ```", "```py\n    # 25 rows and 4 columns\n    matrix_data = np.random.randint(1,100,100).reshape(25,4)\n    column_headings = ['W','X','Y','Z']\n    df = pd.DataFrame(data=matrix_data,columns=column_headings)\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.head(8)\n    ```", "```py\n    df.tail(10)\n    ```", "```py\nprint(\"\\nThe 'X' column\\n\",'-'*25, sep='')\nprint(df['X'])\nprint(\"\\nType of the column: \", type(df['X']), sep='')\nprint(\"\\nThe 'X' and 'Z' columns indexed by passing a list\\n\",'-'*55, sep='')\nprint(df[['X','Z']])\nprint(\"\\nType of the pair of columns: \", type(df[['X','Z']]), sep='')\n```", "```py\nmatrix_data = np.random.randint(1,10,size=20).reshape(5,4)\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['W','X','Y','Z']\ndf = pd.DataFrame(data=matrix_data, index=row_labels,\n                  columns=column_headings)\nprint(\"\\nLabel-based 'loc' method for selecting row(s)\\n\",'-'*60, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.loc['C'])\nprint(\"\\nMultiple rows\\n\")\nprint(df.loc[['B','C']])\nprint(\"\\nIndex position based 'iloc' method for selecting row(s)\\n\",'-'*70, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.iloc[2])\nprint(\"\\nMultiple rows\\n\")\nprint(df.iloc[[1,2]])\n```", "```py\n    print(\"\\nA column is created by assigning it in relation\\n\",'-'*75, sep='')\n    df['New'] = df['X']+df['Z']\n    df['New (Sum of X and Z)'] = df['X']+df['Z']\n    print(df)\n    ```", "```py\n    print(\"\\nA column is dropped by using df.drop() method\\n\",'-'*55, sep='')\n    df = df.drop('New', axis=1) # Notice the axis=1 option, axis = 0 is #default, so one has to change it to 1\n    print(df)\n    ```", "```py\n    df1=df.drop('A')\n    print(\"\\nA row is dropped by using df.drop method and axis=0\\n\",'-'*65, sep='')\n    print(df1)\n    ```", "```py\n    print(\"\\nAn in-place change can be done by making inplace=True in the drop method\\n\",'-'*75, sep='')\n    df.drop('New (Sum of X and Z)', axis=1, inplace=True)\n    print(df)\n    ```", "```py\n    people = ['Ann','Brandon','Chen','David','Emily','Farook',\n              'Gagan','Hamish','Imran','Joseph','Katherine','Lily']\n    age = [21,12,32,45,37,18,28,52,5,40,48,15]\n    weight = [55,35,77,68,70,60,72,69,18,65,82,48]\n    height = [160,135,170,165,173,168,175,159,105,171,155,158]\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    plt.scatter(age,weight)\n    plt.show()\n    ```", "```py\n    plt.figure(figsize=(8,6))\n    plt.title(\"Plot of Age vs. Weight (in kgs)\",fontsize=20)\n    plt.xlabel(\"Age (years)\",fontsize=16)\n    plt.ylabel(\"Weight (kgs)\",fontsize=16)\n    plt.grid (True)\n    plt.ylim(0,100)\n    plt.xticks([i*5 for i in range(12)],fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.scatter(x=age,y=weight,c='orange',s=150,edgecolors='k')\n    plt.text(x=20,y=85,s=\"Weights after 18-20 years of age\",fontsize=15)\n    plt.vlines(x=20,ymin=0,ymax=80,linestyles='dashed',color='blue',lw=3)\n    plt.legend(['Weight in kgs'],loc=2,fontsize=12)\n    plt.show()\n    ```", "```py\n    x = np.random.randint(1,10)\n    print(x)\n    ```", "```py\n    1\n    ```", "```py\n    x = np.random.randint(1,10,size=1)\n    print(x)\n    ```", "```py\n    [8]\n    ```", "```py\n    x = 50+50*np.random.random(size=15)\n    x= x.round(decimals=2)\n    print(x)\n    ```", "```py\n    [56.24 94.67 50.66 94.36 77.37 53.81 61.47 71.13 59.3  65.3  63.02 65.\n     58.21 81.21 91.62]\n    ```", "```py\n    x = np.random.rand(3,3)\n    print(x)\n    ```", "```py\n    [[0.99240105 0.9149215  0.04853315]\n     [0.8425871  0.11617792 0.77983995]\n     [0.82769081 0.57579771 0.11358125]]\n    ```", "```py\n    x = np.random.binomial(10,0.6,size=8)\n    print(x)\n    ```", "```py\n    [6 6 5 6 5 8 4 5]\n    ```", "```py\n    plt.figure(figsize=(7,4))\n    plt.title(\"Number of successes in coin toss\",fontsize=16)\n    plt.bar(left=np.arange(1,9),height=x)\n    plt.xlabel(\"Experiment number\",fontsize=15)\n    plt.ylabel(\"Number of successes\",fontsize=15)\n    plt.show()\n    ```", "```py\n    x = np.random.normal()\n    print(x)\n    ```", "```py\n    -1.2423774071573694\n    ```", "```py\n    # Code to generate the 100 samples (heights)\n    heights = np.random.normal(loc=155,scale=10,size=100)\n    # Plotting code\n    #-----------------------\n    plt.figure(figsize=(7,5))\n    plt.hist(heights,color='orange',edgecolor='k')\n    plt.title(\"Histogram of teen aged students's height\",fontsize=18)\n    plt.xlabel(\"Height in cm\",fontsize=15)\n    plt.xticks(fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.show()\n    ```", "```py\n    people_dict={'People':people,'Age':age,'Weight':weight,'Height':height}\n    people_df=pd.DataFrame(data=people_dict)\n    people_df\n    ```", "```py\n    print(people_df.shape)\n    ```", "```py\n    (12, 4)\n    ```", "```py\n    print(people_df['Age'].count())\n    ```", "```py\n    12\n    ```", "```py\n    print(people_df['Age'].sum())\n    ```", "```py\n    353\n    ```", "```py\n    print(people_df['Age'].mean())\n    ```", "```py\n    29.416666666666668\n    ```", "```py\n    print(people_df['Weight'].median())\n    ```", "```py\n    66.5\n    ```", "```py\n    print(people_df['Height'].max())\n    ```", "```py\n    175\n    ```", "```py\n    print(people_df['Weight'].std())\n    ```", "```py\n    18.45120510148239\n    ```", "```py\n    pcnt_75 = np.percentile(people_df['Age'],75)\n    pcnt_25 = np.percentile(people_df['Age'],25)\n    print(\"Inter-quartile range: \",pcnt_75-pcnt_25)\n    ```", "```py\n    Inter-quartile range:  24.0\n    ```", "```py\n    print(people_df.describe())\n    ```", "```py\n    people_df['Weight'].hist()\n    plt.show()\n    ```", "```py\n    people_df.plot.scatter('Weight','Height',s=150,\n    c='orange',edgecolor='k')\n    plt.grid(True)\n    plt.title(\"Weight vs. Height scatter plot\",fontsize=18)\n    plt.xlabel(\"Weight (in kg)\",fontsize=15)\n    plt.ylabel(\"Height (in cm)\",fontsize=15)\n    plt.show()\n    ```"]