- en: 'Chapter 2: Postulates of Quantum Mechanics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The vivid force of his mind prevailed, and he fared forth far beyond the flaming
    ramparts of the heavens and traversed the boundless universe in thought and mind."'
  prefs: []
  type: TYPE_NORMAL
- en: – Titus Lucretius Carus
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Titus Lucretius Carus gazing at the Milky Way galaxy [authors]
    built from an image of Titus Lucretius in the public domain and an image of the
    Milky Way galaxy [NASA]
  prefs: []
  type: TYPE_NORMAL
- en: In the first two books of his six-book poem De Rerum Natura (On the Nature of
    Things), Titus Lucretius Carus, a Roman poet and philosopher, discusses life and
    love and explains the basic principles of Epicurean physics, a Greek way of understanding
    the world before Christ [Lucr_1]. He put forward the idea that matter is both
    active and indeterminate [Lucr_2], a very "quantum" way of thinking to say the
    least.
  prefs: []
  type: TYPE_NORMAL
- en: Using an analogy of dust particles in a sunbeam, Lucretius described what is
    now known as Brownian motion [Lucr_3]. He talked about matter and used concepts
    such as mostly empty space to describe it. It would take more than 2 millennia
    for these ideas to become widely adopted and put into the postulates of quantum
    mechanics. We reviewed the milestones of the late 1800s and early 1900s that lead
    to the postulates of quantum mechanics in [*Chapter 1*](B18268_01_ePub.xhtml#_idTextAnchor017)*,
    Introducing Quantum Concepts.*
  prefs: []
  type: TYPE_NORMAL
- en: The five postulates of quantum mechanics are not considered the law of nature
    and cannot be shown to be true, neither mathematically nor experimentally. Rather,
    the postulates are simply guidelines for the behavior of particles and matter.
    Even though it took a few decades for the postulates to be formulated and a century
    to be utilized by the broader scientific community, the postulates remain a powerful
    tool for predicting the properties of matter and particles and are the foundation
    of quantum chemistry and computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 2.1, Postulate 1 – Wave functions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.2, Postulate 2 – Probability amplitudes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3, Postulate 3 – Measurable quantities and operators*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.4, Postulate 4 – Time independent stationary states*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.5, Postulate 5 – Time evolution dynamics, Schrödinger''s equation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we primarily focus on the significance of Postulate 1, Wave
    functions, because we think that this postulate has powerful repercussions for
    useful innovations. Traditionally, Postulate 1 is hard to grasp conceptually and
    has been a scientific challenge to represent mathematically and artistically.
    We have taken active steps to overcome this artistically, as shown in *Figure
    1.4* and in *Figure 2.2*. The other four postulates support Postulate 1\. We do
    not go into as much detail with these postulates as we do with Postulate 1 in
    this chapter; however, will be utilizing them in subsequent chapters. Readers
    who are not familiar with linear algebra or with Dirac notation are invited to
    refer to [*Appendix A*](B18268_Appendix_A_ePub.xhtml#_idTextAnchor263) *– Readying
    Mathematical Concepts*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Artistic image of a hydrogen atom wave function [authors]
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A companion Jupyter notebook for this chapter can be downloaded from GitHub
    at [https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious](https://github.com/PacktPublishing/Quantum-Chemistry-and-Computing-for-the-Curious),
    which has been tested in the Google Colab environment, which is free and runs
    entirely in the cloud, and in the IBM Quantum Lab environment. Please refer to
    [*Appendix B*](B18268_Appendix_B_ePub.xhtml#_idTextAnchor313) *– Leveraging Jupyter
    Notebooks in the Cloud*, for more information. The companion Jupyter notebook
    automatically installs the following list of libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numerical Python** (**NumPy**) [NumPy], an open-source Python library that
    is used in almost every field of science and engineering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SymPy**, [SymPy] a Python library for symbolic mathematics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Qiskit** [Qiskit], an open-source SDK for working with quantum computers
    at the level of pulses, circuits, and application modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qiskit visualization support to enable the use of its visualization functionality
    and Jupyter notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install NumPy using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install SymPy using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Qiskit using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Qiskit visualization support using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Import math libraries using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2.1\. Postulate 1 – Wave functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The total wave function describes the physical behavior of a system and is
    represented by the capital Greek letter Psi: ![](img/Formula_02_001.png). It contains
    all the information of a quantum system and includes complex numbers (![](img/Formula_02_002.png))
    as parameters. In general, ![](img/Formula_02_003.png) is a function of all the
    particles in the system ![](img/Formula_02_004.png), where the total number of
    particles is ![](img/Formula_02_005.png). Furthermore, ![](img/Formula_02_006.png)
    includes the spatial position of each particle (![](img/Formula_02_007.png)),
    the spin directional coordinates for each particle (![](img/Formula_02_008.png)),
    and time ![](img/Formula_02_009.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_011.png) and ![](img/Formula_02_012.png) are vectors
    of single-particle coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_013.jpg)![](img/Formula_02_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The total wave function for a one-particle system is a product of a spatial
    ![](img/Formula_02_015.png), spin ![](img/Formula_02_016.png), and time ![](img/Formula_02_017.png)
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_018.png)'
  prefs: []
  type: TYPE_IMG
- en: If the wave function for a multiple-particle system cannot be factored into
    a product of single-particle functions, then we consider the quantum system as
    **entangled**. If the wave function can be factored into a product of single-particle
    functions, then it is not entangled and is called a separable state. We will revisit
    the concept of entanglement in [*Chapter 3*](B18268_03_ePub.xhtml#_idTextAnchor116)*,
    Quantum Circuit Model of Computation*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The spatial part of the wave function ![](img/Formula_02_019.png) can be converted
    from Cartesian coordinates ![](img/Formula_02_020.png) to spherical coordinates
    ![](img/Formula_02_021.png) where ![](img/Formula_02_022.png) is the radial distance
    determined by the distance formula ![](img/Formula_02_023.png), ![](img/Formula_02_024.png)
    is the polar angle ranging from 0 to ![](img/Formula_02_025.png) (![](img/Formula_02_026.png)),
    and ![](img/Formula_02_027.png) is the azimuthal angle ranging from 0 to ![](img/Formula_02_028.png)
    (![](img/Formula_02_029.png)), through the following equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_030.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![](img/Formula_02_031.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![](img/Formula_02_032.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![](img/B18268_Figure_2.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Spherical coordinates [public domain]
  prefs: []
  type: TYPE_NORMAL
- en: 'There are certain properties of a wave function that need to be properly considered
    in order to accurately represent a quantum system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-valued**, meaning that for a given input variable there is only one
    possible output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Positive definite**, meaning that the complex conjugate transpose of the
    wave function, indicated by a dagger (![](img/Formula_02_033.png), times the wave
    function itself is strictly greater than zero: ![](img/Formula_02_034.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Square integrable**, meaning that the positive definite product is less than
    infinity when integrated over all space (![](img/Formula_02_035.png): ![](img/Formula_02_036.png),
    where ![](img/Formula_02_037.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normalizable**, meaning that a particle must exist in a volume (![](img/Formula_02_038.png)
    and at a point in time, that is, it must exist somewhere in all space and time:
    ![](img/Formula_02_039.png), where ![](img/Formula_02_040.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete**, meaning that all statistically important data that is needed
    to represent that quantum system is available such that calculations of properties
    converge to a limit, that is, a single value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For quantum chemistry applications, we will use Python code to show how to
    include the spatial ![](img/Formula_02_041.png) and spin ![](img/Formula_02_042.png)
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 2.1.1, Spherical harmonic functions*, which are related to the quantum
    numbers ![](img/Formula_02_043.png) and to the spatial variables ![](img/Formula_02_044.png)
    or ![](img/Formula_02_045.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.1.2, Addition of momenta using Clebsch-Gordan (CG) coefficients*,
    which is for coupling multiple particles and can be applied to both orbital (![](img/Formula_02_046.png)
    and spin quantum numbers (![](img/Formula_02_047.png))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.1.3, The general formulation of the Pauli exclusion principle*,
    which ensures the proper symmetry requirements for a multiple particle system:
    either totally fermionic, totally bosonic, or a combination of the two'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a machine learning perspective, there are other parameters that the wave
    function can depend on. These parameters are called hyperparameters and are used
    to optimize the wave function to obtain the most accurate picture of the state
    of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1\. Spherical harmonic functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spherical harmonic functions ![](img/Formula_02_048.png) are used to describe
    one-electron systems and depend on the angular momentum (![](img/Formula_02_049.png))
    and the magnetic quantum number (![](img/Formula_02_050.png)), as well as the
    spatial coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_051.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'and are a set of special functions defined on the surface of a sphere called
    the radial wave function ![](img/Formula_02_052.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_053.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the hydrogen atom is the simplest atom, consisting of only one electron
    around a single proton, in this section we will illustrate what these functions
    look like. Some of the spherical harmonic functions for the hydrogen atom are
    shown in *Figure 2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Spatial wave functions of the hydrogen atom with quantum numbers
    ![](img/Formula_02_054.png) and ![](img/Formula_02_055.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The principal quantum (![](img/Formula_02_056.png)) is a continuous quantum
    variable that ranges from 1 to infinity such that in practice, due to ionization,
    it becomes a discrete variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The angular momentum quantum number (![](img/Formula_02_057.png)) is contained
    in the discrete set determined: ![](img/Formula_02_058.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The magnetic quantum number (![](img/Formula_02_059.png)) is contained in the
    discrete set determined by the angular momentum quantum number (![](img/Formula_02_060.png)):
    ![](img/Formula_02_061.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The spherical harmonic functions, ![](img/Formula_02_062.png), can be split
    into a product of three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_063.png),'
  prefs: []
  type: TYPE_NORMAL
- en: 'where ![](img/Formula_02_064.png) is a constant that depends only on the quantum
    numbers ![](img/Formula_02_065.png), ![](img/Formula_02_066.png) is a polar function,
    also known as the associated Legendre polynomial functions, which can be a complex
    function if the angular momentum (![](img/Formula_02_067.png)) is positive or
    negative, and ![](img/Formula_02_068.png) is a complex exponential azimuthal function.
    To illustrate spherical harmonic functions, we use the following code, which computes
    them [SciPy_sph], then casts them into the following real functions [Sph_Real]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_069.jpg)'
  prefs: []
  type: TYPE_IMG
- en: and finally displays these real functions in three dimensions with Python's
    Matplotlib module. Let's now implement this in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Importing NumPy, SciPy, and Matplotlib Python modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following Python statements import the required NumPy, SciPy, and Matplotlib
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Setting-up grids of polar (theta ![](img/Formula_02_070.png) ![](img/Formula_02_071.png))
    and azimuthal (phi ![](img/Formula_02_072.png)) angles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We define a function called `setup_grid()` that creates a grid of polar coordinates
    and the corresponding cartesian coordinates with the following Python functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linspace`: Returns evenly spaced numbers over a specified interval'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.meshgrid`: Returns coordinate matrices from coordinate vectors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setup_grid()` function has one input parameter, `num`, which is a positive
    integer that is the number of distinct values of polar coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`theta`, `phi`: Two-dimensional NumPy arrays of shape `num x num`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xyz`: Three-dimensional NumPy array of shape `(3,num,num)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the shape of the NumPy arrays returned by `setup_grid()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Coloring the plotted surface of the real functions of the spherical harmonic
    function (Y)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We define a function called `colour_plot()` that colors the plotted surface
    of the real functions of the spherical harmonic ![](img/Formula_02_073.png) according
    to the sign of its real part, ![](img/Formula_02_074.png). It has the following
    input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ax`: A three-dimensional Matplotlib figure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Y`: A spherical harmonic function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Yx`,`Yy`,`Yz`: Cartesian coordinates of the plotted surface of the spherical
    harmonic function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmap`: A built-in colormap accessible via the `matplotlib.cm.get_cmap` function
    [Cmap], for instance, autumn, cool, spring, and winter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Defining a function that plots a set of x, y, z axes and sets the title of a
    figure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We define a function called `draw_axes()` that plots the axes of a Matplotlib
    figure and sets a title. It has three input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ax`: A three-dimensional Matplotlib figure'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ax_lim`: A positive real number that controls the size of the plotted surface'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title`: A string of characters that will be shown as the title of the output
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Defining a function that computes the real form of the spherical harmonic function
    (Y)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please be cautious in this part of the code because SciPy defines theta (![](img/Formula_02_075.png))
    as the azimuthal angle and phi (![](img/Formula_02_076.png)) as the polar angle
    [SciPy_sph], which is opposite of the standard definitions used for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `comb_Y()` function takes the following input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`l`: Angular momentum quantum number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Magnetic quantum number ![](img/Formula_02_050.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theta`, `phi`: Two-dimensional NumPy arrays of shape `num x num`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns the real form of the spherical harmonic function ![](img/Formula_02_078.png)
    presented earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Defining a function that displays the spatial wave functions for a range of
    values of the angular momentum quantum number and the magnetic quantum number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following function displays spatial wave functions for ![](img/Formula_02_067.png)
    in range ![](img/Formula_02_080.png), where ![](img/Formula_02_081.png) is a parameter
    and ![](img/Formula_02_050.png) is in range ![](img/Formula_02_083.png) as illustrated
    in the following code for the hydrogen atom in states ![](img/Formula_02_084.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Spatial wave functions of the hydrogen atom
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The spatial wave functions for the one electron of the hydrogen atom in states
    ![](img/Formula_02_085.png), and ![](img/Formula_02_086.png) in range ![](img/Formula_02_087.png)
    are computed and displayed with the `plot_orbitals` Python function defined earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The result is shown in *Figure 2.4*.
  prefs: []
  type: TYPE_NORMAL
- en: Questions to consider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What happens to the spherical harmonic functions when we have more than one
    electron, that is, in heavier elements? How do these functions operate or change?
    For instance, what happens when there are three electrons with non-zero angular
    momentum, as in the case with the nitrogen atom?
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish this kind of complexity and variability, we need to add or couple
    angular momentum using **Clebsch-Gordon (CG) coefficients**, as presented in *Section
    2.1.2, Addition of momenta using CG coefficients*.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.2\. Addition of momenta using CG coefficients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The addition or coupling of two momenta (![](img/Formula_02_088.png) and ![](img/Formula_02_089.png))
    along with the associated projections (![](img/Formula_02_090.png)and ![](img/Formula_02_091.png))
    is described by the summation of two initial state wave functions ![](img/Formula_02_092.png)
    and ![](img/Formula_02_093.png) over the possible or allowed quantum numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_094.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'to a final state wave function of choice ![](img/Formula_02_095.png). Yes,
    we can choose the final state as we please, if we follow the rules of vector addition.
    The CG coefficients are the expansion coefficients of coupled total angular momentum
    in an uncoupled tensor product basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_096.png)'
  prefs: []
  type: TYPE_IMG
- en: We use a generic ![](img/Formula_02_097.png) and ![](img/Formula_02_098.png)
    to represent a formula where either angular (![](img/Formula_02_099.png) and ![](img/Formula_02_050.png))
    and/or spin (![](img/Formula_02_101.png) and ![](img/Formula_02_102.png)) momentum
    can be coupled together. We can couple angular momenta only, or spin momenta only,
    or the two together. The addition is accomplished by knowing the allowed values
    for the quantum numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Using CG coefficients with Python SymPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Python SymPy library [SymPy_CG] implements the formula with the CG class
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Class![](img/Formula_02_103.png) has the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_104.png): Angular momentum and the projection of state 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_105.png): Angular momentum the projection of state 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_106.png): Total angular momentum of the coupled system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the SymPy CG coefficients module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following statements import the SymPy CG coefficients module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Defining a CG coefficient and evaluating its value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can couple two electrons (fermions) in a spin paired state in two different
    ways: symmetric or antisymmetric. We denote spin up in the ![](img/Formula_02_107.png)
    direction as ![](img/Formula_02_108.png) and spin down in the ![](img/Formula_02_109.png)
    direction as ![](img/Formula_02_110.png).'
  prefs: []
  type: TYPE_NORMAL
- en: We can also couple spin states with angular momentum states. When coupling angular
    momentum (![](img/Formula_02_111.png)) with spin (![](img/Formula_02_112.png)),
    we change the notation to ![](img/Formula_02_097.png). We go through these three
    examples next.
  prefs: []
  type: TYPE_NORMAL
- en: Fermionic spin pairing to symmetric state (![](img/Formula_02_114.png))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The coupling of the symmetric spin paired state is ![](img/Formula_02_115.png)
    and is described by the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_116.png)='
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_117.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the following code, we obtain the CG coefficients for the preceding equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Defining a CG coefficient and evaluating its value
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugging in the CG coefficients as well as the up-spin and down-spin functions,
    we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_119.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_120.png)'
  prefs: []
  type: TYPE_IMG
- en: Fermionic spin pairing to antisymmetric state (![](img/Formula_02_121.png))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The coupling of the antisymmetric spin paired state, ![](img/Formula_02_122.png),
    is described by the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_123.png)='
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_124.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_125.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the following code, we obtain the CG coefficients for the preceding equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Defining a CG coefficient and evaluating its value
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugging in the CG coefficients as well as the up-spin and down-spin functions,
    we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_126.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_127.png)'
  prefs: []
  type: TYPE_IMG
- en: Coupling spin and angular momentum (![](img/Formula_02_128.png))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s couple together angular momenta with ![](img/Formula_02_129.png) and
    ![](img/Formula_02_130.png) to a fermionic spin state ![](img/Formula_02_131.png)
    and ![](img/Formula_02_132.png) for a final state of choice of ![](img/Formula_02_133.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_134.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_135.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_136.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_137.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CG coefficients of this equation are calculated using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Defining a CG coefficient and evaluating its value
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugging the result of the preceding code into the formula, we obtain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_138.jpg)![](img/Formula_02_139.jpg)![](img/Formula_02_140.jpg)![](img/Formula_02_141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we reduce this and plug in the up-spin and down-spin functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_142.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the last step, we plugged in the spherical harmonic functions for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_143.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![](img/Formula_02_144.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 'In doing so, we obtain this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_145.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we can drop the factor of ![](img/Formula_02_146.png) , as it is a global
    factor, so that the final state is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_147.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of you might recognize this function as a qubit wave function for computing
    without including time dependence. In fact, for the state of a qubit, we change
    the up arrow (![](img/Formula_02_148.png)) to ket 0 (![](img/Formula_02_149.png))
    to indicate the magnetic projection of zero (![](img/Formula_02_150.png)), and
    likewise for the down arrow (![](img/Formula_02_151.png)) to ket 1 (![](img/Formula_02_152.png))
    to indicate the magnetic projection of zero (![](img/Formula_02_153.png)). With
    this, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_154.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We cover this topic in more detail in [*Chapter 3*](B18268_03_ePub.xhtml#_idTextAnchor116)*,
    Quantum Circuit Model of Computation*.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial wave functions of different states of the nitrogen atom with three p
    electrons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we would like to illustrate the wave function of the nitrogen atom with
    three ![](img/Formula_01_055.png) electrons [Sharkey_0]. We chose this system
    because we are coupling more than two non-zero momentum vectors by expressing
    its coupled total momentum in an uncoupled tensor product basis of each electron
    [Phys5250]. This means that we assumed the wave function is not entangled. We
    must apply the addition of angular momenta formula twice (recursively) so that
    we have all the combinations of coupling with the final state of choice. The different
    shapes of the spatial wave function of the nitrogen atom with three ![](img/Formula_02_156.png)
    electrons are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Spatial wave functions of different states of the nitrogen atom
    with three ![](img/Formula_02_1561.png) electrons
  prefs: []
  type: TYPE_NORMAL
- en: We will go through the example for the final state of![](img/Formula_02_157.png),
    ![](img/Formula_02_158.png).
  prefs: []
  type: TYPE_NORMAL
- en: Spatial wave function of the ground state of the nitrogen atom with 3 ![](img/Formula_02_159.png)
    electrons in ![](img/Formula_02_160.png), ![](img/Formula_02_161.png)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Electrons are fermions, and therefore they cannot occupy the same set of quantum
    numbers. Because we are working with three ![](img/Formula_02_162.png) electrons,
    the orbital angular momentum (![](img/Formula_02_163.png)) for each electron is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_164.png) and ![](img/Formula_02_165.png).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This couples with the final momentum state of ![](img/Formula_02_166.png) The
    allowable set of magnetic momenta (![](img/Formula_02_167.png)) for each electron
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_168.png) and ![](img/Formula_02_169.png),'
  prefs: []
  type: TYPE_NORMAL
- en: 'and the final coupled magnetic projection state is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_170.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To accomplish this type of coupling of three momenta, we must apply the addition
    of angular momenta formula twice (recursively) so that we have all the combinations
    of coupling with the final state, ![](img/Formula_02_171.png).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each electron is in the same shell or principal quantum number (![](img/Formula_02_172.png))
    level; however, each is in a different subshell (![](img/Formula_02_173.png) and
    has a spin of either up or down. For this example, the spin state is irrelevant,
    and we are choosing to not include it. Since these electrons are in different
    subshells, that means they cannot have the same combination of quantum numbers
    (![](img/Formula_02_174.png) and ![](img/Formula_02_175.png)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Electron configurations of ![](img/Formula_02_197.png), ![](img/Formula_02_198.png)
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a dictionary of six configuration tuples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each tuple contains ![](img/Formula_02_199.png), where![](img/Formula_02_200.png)
    is the first coupling from electron 1 with 2, and ![](img/Formula_02_201.png)
    is the second coupling of electrons 1 and 2 with 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Defining a function that computes a product of CG coefficients
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `comp_CG()` function has the following input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_202.png): Dictionary of configuration tuples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_203.png): Index of the array in the dictionary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_204.png): None by default, set to `True` to display the
    computation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns the following product of CG coefficients pertaining to the entry
    ![](img/Formula_02_205.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_206.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, for ![](img/Formula_02_207.png) and ![](img/Formula_02_208.png)
    with the display option set to `True`, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following detailed output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Output of comp_CG for the first entry in the T00 dictionary
  prefs: []
  type: TYPE_NORMAL
- en: Computing and printing the CG coefficients
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following Python code calls the `comp_CG()` function for each entry in
    the `T00` dictionary and prints the result of the computation of the CG coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – CG coefficients for computing the ground state of the nitrogen
    atom with three ![](img/Formula_02_209.png) electrons (![](img/Formula_02_210.png),
    ![](img/Formula_02_211.png))
  prefs: []
  type: TYPE_NORMAL
- en: Defining a set of spatial wave functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Since electrons in the same orbital repel one another, we define a set of spatial
    wave functions, adding a phase of ![](img/Formula_02_212.png) and ![](img/Formula_02_213.png)
    in the wave functions of the second and third electron respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Computing the wave function of the Nitrogen atom with three ![](img/Formula_02_214.png)
    electrons (![](img/Formula_02_215.png), ![](img/Formula_02_216.png))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We compute the wave function as a sum of the products of the wave functions
    defined previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the wave function of the ground state of the nitrogen atom with three
    ![](img/Formula_02_217.png) electrons (![](img/Formula_02_218.png), ![](img/Formula_02_219.png))
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We now show the graphical representation of the spherical harmonic function
    for the ground state of the nitrogen atom with three ![](img/Formula_02_220.png)
    electrons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Spatial wave function of the ground state of the nitrogen atom
    with three ![](img/Formula_02_221.png) electrons
  prefs: []
  type: TYPE_NORMAL
- en: (![](img/Formula_02_222.png), ![](img/Formula_02_223.png))
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.3\. General formulation of the Pauli exclusion principle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember that fermions are particles that have half-integer spin (![](img/Formula_02_224.png))
    and bosons are particles that have integer spin (![](img/Formula_02_225.png)).
    The general formulation of the PEP states the total wave function ![](img/Formula_02_226.png)
    for a quantum system must have certain symmetries for all sets of identical particles,
    that is, electrons and identical nuclei, both boson and fermions, under the operation
    of pair particle permutation [Bubin]:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For fermions, the total wave function must be antisymmetric (![](img/Formula_02_227.png))
    with respect to the exchange of identical pair particles ![](img/Formula_02_228.png):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_229.png)'
  prefs: []
  type: TYPE_IMG
- en: meaning that the spatial part of the wave function is antisymmetric while the
    spin part is symmetric, or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'For bosons, the total wave function must be symmetric (![](img/Formula_02_230.png))
    with respect to the exchange of pair particles (![](img/Formula_02_231.png)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_232.png)'
  prefs: []
  type: TYPE_IMG
- en: meaning that both the spatial wave function and spin function are symmetric,
    or both are antisymmetric.
  prefs: []
  type: TYPE_NORMAL
- en: For composite systems with both identical fermions and identical bosons, the
    preceding operations must hold true simultaneously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In general, the symmetrizer and antisymmetrizer operations combined for a given
    quantum system are referred to as the projection operator ![](img/Formula_02_233.png).
    The total wave function (![](img/Formula_02_234.png), including the PEP, is then
    written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_235.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For a given quantum system, the projection operator that satisfies the PEP is
    obtained as a product of the antisymmetrizer and the symmetrizer, ![](img/Formula_02_236.png),
    and strictly in this order, not ![](img/Formula_02_237.png). Making this mistake
    in a calculation will result in incorrect operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The projection operator ![](img/Formula_02_238.png) can be expressed as a linear
    combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_239.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where the index ![](img/Formula_02_240.png) indicates a particular order of
    particles in a set of possible orders, ![](img/Formula_02_241.png) is the permutation
    associated with a particular order, an associated expansion coefficient![](img/Formula_02_242.png),
    and ![](img/Formula_02_243.png) is the total number of identical particles. This
    equation is dependent on a factorial (![](img/Formula_02_244.png)) relation of
    permutations, making this a non-deterministic polynomial time hard (NP-hard) computation.
    Please note that you cannot add and subtract operations, you can only combine
    like terms. As the system grows larger in the number of identical particles, the
    complexity increases exponentially, making this an NP-hard calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of determining the symmetrizer ![](img/Formula_02_245.png) and
    antisymmetrizer![](img/Formula_02_246.png) for the projection operation to apply
    PEP to a given quantum system is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify all sets of identical particles ![](img/Formula_02_247.png), that is,
    electrons and nuclei, and fermions and bosons. Please do not confuse this ![](img/Formula_02_248.png)
    for the identical number of particles with the principal quantum number ![](img/Formula_02_249.png)
    as we are using the same notation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a partition function for positive integers. Remember we only have a positive
    count of particles, not a negative count. A partition of a positive integer ![](img/Formula_02_250.png)
    is a sequence of positive integers ![](img/Formula_02_251.png) such that ![](img/Formula_02_252.png)
    and ![](img/Formula_02_253.png), where ![](img/Formula_02_254.png) is the last
    possible integer for the set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then use the partition to build a Young frame. A Young frame (diagram) is a
    series of connected boxes organized in rows that are left-aligned and arranged
    so that every row contains an equal or lower number of boxes than the row above
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The totally symmetric irreducible representation of a system with ![](img/Formula_02_255.png)
    identical bosons is a vertical Young tableau of ![](img/Formula_01_035.png) boxes.
    The totally antisymmetric irreducible representation of a system with ![](img/Formula_02_257.png)
    identical fermions and total quantum spin ![](img/Formula_02_258.png), is a horizontal
    Young tableau of ![](img/Formula_02_255.png) boxes. We calculate the symmetry
    quantum (![](img/Formula_02_260.png)) number as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The partition function ![](img/Formula_02_262.png) describes how to build a
    Young frame. There are two boxes in the first ![](img/Formula_02_263.png) rows
    and one box in the remaining ![](img/Formula_02_264.png) rows, which we write
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_265.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note that the superscripts are not exponents. The convention for filling
    the numbers in the boxes is increasing from left to right, and second increasing
    from top to bottom. Here are some examples of how to put together the Young frame:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When there are two identical boson particles (![](img/Formula_02_266.png))
    with total spin ![](img/Formula_02_267.png), the symmetry quantum number is ![](img/Formula_02_268.png),
    the partition function is ![](img/Formula_02_269.png), and the corresponding Young
    frames is:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![A picture containing text, clock, sign'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18268_Figure_2.13.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Young frame for the partition function ![](img/Formula_02_270.png)
  prefs: []
  type: TYPE_NORMAL
- en: This Young frame corresponds to a totally symmetric operation.
  prefs: []
  type: TYPE_NORMAL
- en: When there are two identical boson particles with total spin ![](img/Formula_02_271.png),
    the symmetry quantum number is ![](img/Formula_02_272.png), the partition function
    is ![](img/Formula_02_273.png), and the corresponding Young frame is the same
    as the previous Young frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When there are two identical fermion particles with total spin ![](img/Formula_02_274.png),
    the symmetry quantum number is ![](img/Formula_02_268.png), the partition function
    is ![](img/Formula_02_276.png), and the corresponding Young frame is the same
    as the previous Young frame. We use this state in *Section 2.2.2, Probability
    amplitude for a hydrogen anion* ![](img/Formula_02_277.png).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When there are two identical fermion particles with total spin ![](img/Formula_02_278.png),
    the symmetry quantum number is ![](img/Formula_02_279.png), the partition function
    is ![](img/Formula_02_280.png), and the corresponding Young frame is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Young frame for the partition function ![](img/Formula_02_281.png)
  prefs: []
  type: TYPE_NORMAL
- en: This Young frame corresponds to a totally antisymmetric operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When there are three identical fermion particles (![](img/Formula_02_282.png)),
    with the total spin ![](img/Formula_02_283.png), that is, two paired electrons
    and one lone electron, the symmetry quantum number is ![](img/Formula_02_284.png),
    the partition function is ![](img/Formula_02_285.png), and the corresponding Young
    frame is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Young frame for the partition function ![](img/Formula_02_286.png)
  prefs: []
  type: TYPE_NORMAL
- en: This Young frame corresponds to both symmetric and antisymmetric operations
    combined.
  prefs: []
  type: TYPE_NORMAL
- en: 'When there are three identical fermion particles (![](img/Formula_02_287.png)),
    with the total spin ![](img/Formula_02_288.png), that is, three unpaired electrons,
    the symmetry quantum number is ![](img/Formula_02_289.png), the partition function
    is ![](img/Formula_02_290.png), and the corresponding Young frame is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Young frame for the partition function ![](img/Formula_02_291.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the four electrons in lithium hydride (LiH), with spin pairing (![](img/Formula_02_292.png)),
    the symmetry quantum number ![](img/Formula_02_293.png), the partition is ![](img/Formula_02_294.png),
    and we have the following Young frame:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Young frame for the partition function ![](img/Formula_02_295.png)
  prefs: []
  type: TYPE_NORMAL
- en: In this example, since the nucleus is the only particle of its kind, we do not
    include it in the numbering of the set.
  prefs: []
  type: TYPE_NORMAL
- en: We can generalize the Young frame for fermions, bosons, and composite systems
    as shown in *Figure 2.18*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Young frames for fermions, bosons, and composite systems [authors]
  prefs: []
  type: TYPE_NORMAL
- en: 'The `frame()` function creates a Young frame given a partition as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mu`: This partition is represented as a dictionary whose keys are the partition
    integers and the values are the multiplicity of that integer. For example, ![](img/Formula_02_296.png)
    is represented as `{2: 1, 1:0}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns a Young frame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f`: A dictionary of lists whose keys are the index of the lines starting from
    0 and the values are the list of integers in the corresponding line. For example,
    ![](img/Formula_02_297.png) represents the Young frame *Figure 2.15* where the
    first line contains 1,2 and the second line 3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the `frame()` function with ![](img/Formula_02_298.png) :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_299.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s run the `frame()` function with ![](img/Formula_02_300.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_301.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are ready to define the antisymmetrizer (![](img/Formula_02_302.png))
    and symmetrizer (![](img/Formula_02_303.png)) operations for many particles in
    the system that are governed by the Young frame we determined. The antisymmetrizer
    operator (![](img/Formula_02_304.png)) for the rows of the Young frame is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_305.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_306.png) is positive for odd permutations and negative
    for even permutations. An odd permutation has an antisymmetric permutation matrix.
    An even permutation has a symmetric permutation matrix. We also define a symmetrizer
    operator (![](img/Formula_02_307.png)) for the columns of the Young frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_308.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Recall that the projection operator is then the product: ![](img/Formula_02_309.png)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the example of the four electrons in LiH, with spin pairing (![](img/Formula_02_310.png)),
    we derive the following operators from *Figure 2.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_311.jpg)![](img/Formula_02_312.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_313.png) : is the permutation of particles ![](img/Formula_02_314.png)
    and ![](img/Formula_02_315.png), and ![](img/Formula_02_316.png) is the Identity
    operator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The projection operator is computed using the rules of distributivity and multiplication
    of permutations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_317.jpg)![](img/Formula_02_318.jpg)![](img/Formula_02_319.jpg)![](img/Formula_02_320.jpg)![](img/Formula_02_321.jpg)![](img/Formula_02_322.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we will move on to *Section 2.2, Postulate 2 – Probability amplitude*,
    where we will revisit the PEP in an example calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2\. Postulate 2 – Probability amplitude
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the motion of a particle in the position space where ![](img/Formula_02_323.png)
    is the position vector. The probability density of finding the particle at a particular
    position and at a given instant in time is calculated as a function of position:
    ![](img/Formula_02_324.png). In an orthonormal basis, the inner product of two
    wave functions measures their overlap. Two wave functions are orthogonal if their
    inner product is zero. To find the probability that a state ![](img/Formula_02_325.png)
    will be found in the state ![](img/Formula_02_326.png) upon measurement, we must
    compute the magnitude squared of the inner product between state ![](img/Formula_02_327.png)
    and ![](img/Formula_02_328.png), ![](img/Formula_02_329.png).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The wave function in space for a multiparticle system is ![](img/Formula_02_330.png),
    with ![](img/Formula_02_331.png) being the total number of particles, which is
    interpreted as the probability amplitude function at a given point in time using
    the following integration over the volume element ![](img/Formula_02_332.png)
    for all particles in the system ![](img/Formula_02_333.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_334.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note we converted from Cartesian coordinates to spherical coordinates.
    In this setup, we can include spherical harmonic functions coupled together using
    CG coefficients that we discussed in the previous section in the wave function
    ![](img/Formula_02_335.png).
  prefs: []
  type: TYPE_NORMAL
- en: We will also need to include the radial wave functions. We describe how to determine
    the radial wave functions in *Section 2.2.1, Computing the radial wave functions*,
    and then go through an example of how to calculate the probability amplitude for
    a specific quantum chemistry system in *Section 2.2.2, Probability amplitude for
    a hydrogen anion* ![](img/Formula_02_336.png).
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1\. Computing the radial wave functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The radial wave functions for hydrogen-like systems are given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_337.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_338.png) is calculated by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_339.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'with ![](img/Formula_02_340.png) being the Bohr radius set equal to the Committee
    on Data of the International Science Council (CODATA) value in SI units, and the
    coefficients ![](img/Formula_02_341.png) are defined by the following recursion
    relation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_342.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'for which the series terminates at ![](img/Formula_02_343.png). We initialize
    ![](img/Formula_02_344.png) with the following Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `comp_ak()` function has the following input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: Integer, principal quantum number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Angular momentum quantum number with values ranging from ![](img/Formula_02_345.png)
    to ![](img/Formula_02_346.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a0`: Bohr radius, defined by ![](img/Formula_02_347.png), where ![](img/Formula_02_348.png)
    is the fine structure constant, ![](img/Formula_02_349.png) is the speed of light,
    and ![](img/Formula_02_350.png) is the rest mass of the electron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ak`: Coefficient defined by the preceding recursion relation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns a dictionary whose keys are integers ![](img/Formula_02_351.png)
    and values are the corresponding coefficients ![](img/Formula_02_352.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get the first ten coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_2.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Coefficients that appear in the radial wave functions
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the SymPy functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sympy.physics.hydrogen.Rnl(n,l,r,Z=1)` function returns the hydrogen radial
    wave function ![](img/Formula_02_353.png) [SymPy_Rnl]. It has the following input
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: Integer, principal quantum number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Angular momentum quantum number with values ranging from 0 to n−1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: Radial coordinate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Z`: Atomic number (or nuclear charge: 1 for hydrogen, 2 for helium, and so
    on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try it first with ![](img/Formula_02_354.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_355.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next with ![](img/Formula_02_356.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_357.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Last with ![](img/Formula_02_358.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_359.png)'
  prefs: []
  type: TYPE_IMG
- en: 2.2.2\. Probability amplitude for a hydrogen anion ![](img/Formula_02_3601.png)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's calculate the probability amplitude at time ![](img/Formula_02_361.png)
    for a hydrogen anion, also called hydride, with one proton and two electrons in
    a spin paired ground state.This example is for illustration purposes only, and
    is not meant to be a rigorous calculation.
  prefs: []
  type: TYPE_NORMAL
- en: We label the two electrons as particles 1 and 2 and choose the state where the
    electronic angular momentum for each electron is ![](img/Formula_02_362.png),
    and are coupled to the final or total momenta state of ![](img/Formula_02_363.png),
    where ![](img/Formula_02_364.png) is the coupling between the angular momentum
    and the spin momentum. For simplicity, we assume that this system is not entangled.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will denote the wave function with the PEP operation (![](img/Formula_02_365.png))
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_366.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where the spatial function is symmetric, and the spin function is antisymmetric:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_367.png)'
  prefs: []
  type: TYPE_IMG
- en: 'with ![](img/Formula_02_368.png), the CG coefficient, equal to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_369.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Recall that we derived the antisymmetric spin state ![](img/Formula_02_370.png)
    in *Section 2.1.2, Fermionic spin pairing to symmetric state (*![](img/Formula_02_371.png)*)*,
    therefore we won''t redo this calculation; we will simply reuse the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_372.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we illustrate the coupling of the angular momentum spatial function for
    the symmetric spatial state ![](img/Formula_02_373.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_374.png)'
  prefs: []
  type: TYPE_IMG
- en: 'with the CG coefficient ![](img/Formula_02_375.png) equal to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_376.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we plug this into the wave function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_377.jpg)![](img/Formula_02_378.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will be using the following spherical harmonic functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_379.jpg)![](img/Formula_02_380.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the radial wave function for each electron with the nuclear charge for
    the proton of ![](img/Formula_02_381.png), as determined in *Section 2.2.1, Computing
    the radial wave functions*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_382.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_383.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The wave function for the ground state of hydride is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_384.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The probability amplitude is calculated by determining the square of the wave
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_385.jpg)![](img/Formula_02_386.jpg)![](img/Formula_02_387.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The integral over spin is equal to 1 due to the fact that the spin functions
    are normalized, resulting in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_388.jpg)![](img/Formula_02_389.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we include the PEP, where we calculate ![](img/Formula_02_390.png). Recall
    that we derived ![](img/Formula_02_391.png) for two fermions in an antisymmetric
    spin state as ![](img/Formula_02_392.png), as shown in *Figure 2.13*. The operation
    results in a factor of ![](img/Formula_02_393.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_394.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_395.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The integral over ![](img/Formula_02_396.png)and ![](img/Formula_02_397.png)
    is equal to ![](img/Formula_02_398.png), illustrated with the following SymPy
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_399.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The integrals over ![](img/Formula_02_400.png) and ![](img/Formula_02_401.png)
    are equal to ![](img/Formula_02_402.png), illustrated with the following SymPy
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_403.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The integrals over ![](img/Formula_02_404.png) and ![](img/Formula_02_405.png)
    are equal to ![](img/Formula_02_406.png), illustrated with the following SymPy
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Combining all the results, the probability amplitude is equal to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_408.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can move on to the rest of the postulates. Examples of these postulates
    will be illustrated in the following chapters of the book. As a result, we have
    not included code for these postulates in this chapter. We revisit this topic
    expectation value in *Section 3.1.9, Pauli matrices*.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3\. Postulate 3 – Measurable quantities and operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A physically observable quantity of a quantum system is represented by a linear
    Hermitian operator, which implies that a measurement outcome is always a real
    value, not a complex number. The real values of the measurement are the eigenvalues
    of the Hermitian operator that describes it. The **eigenvalue** is the constant
    factor that is produced by an operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a spectrum of an observable, if it''s discrete, the possible results are
    quantized. We determine the measurable quantity by calculating the expectation
    value of the observable ![](img/Formula_02_409.png) in a state ![](img/Formula_02_410.png)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_411.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is the sum of all the possible outcomes of a measurement of a state ![](img/Formula_02_410.png)
    weighted by their probabilities. Furthermore, the state of a quantum mechanical
    system can be represented by the inner product of a given distance called a Hilbert
    space. A definition of a Hilbert space is given in [*Appendix A*](B18268_Appendix_A_ePub.xhtml#_idTextAnchor263)
    *– Readying Mathematical Concepts*. This definition of a state space implies the
    **superposition** principle of quantum mechanics, which is a linear combination
    of all real or complex basis functions ![](img/Formula_02_413.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_414.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_415.png) is the index of summation, ![](img/Formula_02_416.png)
    is the total number of basis functions to obtain convergence and completeness
    of the wave function, and ![](img/Formula_02_417.png) is the linear expansion
    coefficient, which can be real or complex numbers. Plugging the superposition
    principle into the definition of the expectation value, we obtain the following
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_418.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where we have also included the PEP. We will use the superposition principle
    in subsequent chapters. In this section, we present common operators and calculate
    the expectation value for a given system:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 2.3.1, Hermitian operator*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.2, Unitary operator*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.3, Density matrix and mixed quantum states*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.4, Position operation with the position operators* ![](img/Formula_02_419.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.5, Momentum operation with the momentum operators*![](img/Formula_02_420.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.6, Kinetic energy operation with the kinetic energy operators*
    ![](img/Formula_02_421.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.7, Potential energy operation with the potential energy operators*
    ![](img/Formula_02_422.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 2.3.8, Total energy operation with total energy operators* ![](img/Formula_02_423.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The measurable quantum quantities are derived from the classical counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.1\. Hermitian operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The complex conjugate transpose of some vector ![](img/Formula_02_424.png) or
    matrix ![](img/Formula_02_425.png) often is denoted as ![](img/Formula_02_426.png)
    and ![](img/Formula_02_427.png) in quantum mechanics. The symbol ![](img/Formula_02_428.png)
    is called the dagger. ![](img/Formula_02_429.png) is called the adjoint or Hermitian
    conjugate of ![](img/Formula_02_430.png).
  prefs: []
  type: TYPE_NORMAL
- en: 'A linear operator ![](img/Formula_02_431.png) is called Hermitian or self-adjoint
    if it is its own adjoint: ![](img/Formula_02_432.png).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The spectral theorem says that if ![](img/Formula_02_433.png) is Hermitian
    then it must have a set of orthonormal eigenvectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_434.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_435.png) with real eigenvalues ![](img/Formula_02_436.png),
    and ![](img/Formula_02_331.png) is the number of eigenvectors, and also is the
    dimension of the Hilbert space. Hermitian operators have a unique spectral representation
    in terms of the set of eigenvalues ![](img/Formula_02_438.png) and the corresponding
    eigenvectors ![](img/Formula_02_439.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_440.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We revisit this topic in *Section 2.3.3, Density matrix and mixed quantum states*.
  prefs: []
  type: TYPE_NORMAL
- en: Writing matrices as a sum of outer products
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The outer product of a ket ![](img/Formula_02_441.png) and a bra ![](img/Formula_02_442.png)
    is the rank-one operator ![](img/Formula_02_443.png) with the rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_444.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The outer product of a ket ![](img/Formula_02_445.png) and a bra ![](img/Formula_02_446.png)
    is a simple matrix multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_447.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Any matrix can be written in terms of outer products. For instance, for a 2
    x 2 matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_448.png) ![](img/Formula_02_449.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_450.png) ![](img/Formula_02_451.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_452.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will be using these matrices in[*Chapter 3*](B18268_03_ePub.xhtml#_idTextAnchor116)*,
    Quantum Circuit Model of Computation*, *Section 3.1.6, Pauli matrices*.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.2\. Unitary operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A linear operator ![](img/Formula_02_453.png) is called unitary if its adjoint
    exists and satisfies ![](img/Formula_02_454.png), where ![](img/Formula_02_455.png)
    is the identity matrix, which by definition leaves any vector it is multiplied
    by unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unitary operators preserve inner products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_456.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence unitary operators also preserve the norm commonly known as the length
    of quantum states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_457.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For any unitary matrix ![](img/Formula_02_458.png), any eigenvectors ![](img/Formula_02_459.png)
    and ![](img/Formula_02_460.png) and their eigenvalues ![](img/Formula_02_461.png)
    and ![](img/Formula_02_462.png), ![](img/Formula_02_463.png) and ![](img/Formula_02_464.png),
    the eigenvalues ![](img/Formula_02_465.png) and ![](img/Formula_02_466.png) have
    the form ![](img/Formula_02_467.png) and if ![](img/Formula_02_468.png) then the
    eigenvectors ![](img/Formula_02_469.png) and ![](img/Formula_02_470.png) are orthogonal:
    ![](img/Formula_02_471.png).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful to note that since for any ![](img/Formula_02_472.png), ![](img/Formula_02_473.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_474.png)'
  prefs: []
  type: TYPE_IMG
- en: We will revisit this in [*Chapter 3*](B18268_03_ePub.xhtml#_idTextAnchor116)*,
    Quantum Circuit Model of Computation*.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.3\. Density matrix and mixed quantum states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any quantum state, either **mixed** or **pure**, can be described by a **density
    matrix** (![](img/Formula_02_475.png)), which is a normalized positive Hermitian
    operator where ![](img/Formula_02_476.png). According to the spectral theorem,
    there exists an orthonormal basis, defined in *Section 2.3.1, Hermitian operator*,
    such that the density is the sum of all eigenvalues (![](img/Formula_02_477.png)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_478.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_479.png) ranges from 1 to ![](img/Formula_02_480.png),
    ![](img/Formula_02_481.png) are positive or null eigenvalues (![](img/Formula_02_482.png)),
    and the sum of eigenvalues is the trace operation (![](img/Formula_02_483.png))
    of the density matrix and is equal to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_484.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, when the density is ![](img/Formula_02_485.png), with ![](img/Formula_02_486.png),
    the trace of the density is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_487.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some examples of the density matrices of pure quantum states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_488.jpg)![](img/Formula_02_489.jpg)![](img/Formula_02_490.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The density matrix of a mixed quantum state consisting of a statistical ensemble
    of ![](img/Formula_02_491.png) pure quantum states ![](img/Formula_02_492.png),
    each with a classical probability of occurrence ![](img/Formula_02_493.png), is
    defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_494.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where every ![](img/Formula_02_495.png) is positive or null and their sum is
    equal to one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_496.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We summarize the difference between pure states and mixed states in *Figure
    2.20*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_table_02.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Density matrix of pure and mixed quantum states
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.4\. Position operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The position observable of particle ![](img/Formula_02_503.png) has the following
    operators for all directions in Cartesian coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_504.jpg)![](img/Formula_02_505.jpg)![](img/Formula_02_506.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In spherical coordinates the operations become:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_507.jpg)![](img/Formula_02_508.jpg)![](img/Formula_02_509.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can calculate the expectation value of the position for a given particle
    ![](img/Formula_02_510.png) in a chosen direction with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_511.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, using the same system as presented in *Section 2.2.2, Probability
    amplitude for a hydrogen anion* ![](img/Formula_02_512.png), the expectation value
    of the ![](img/Formula_02_513.png)-position of electron 1 is determined by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_514.jpg)![](img/Formula_02_515.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note that the integration over ![](img/Formula_02_516.png) is a cubic
    function as opposed to a quadratic function, the integration over ![](img/Formula_02_517.png)
    has an additional ![](img/Formula_02_518.png) , and the integration over ![](img/Formula_02_519.png)
    has a ![](img/Formula_02_520.png) as compared to what is seen in the *Section
    2.2.2, Probability amplitude for a hydrogen anion* ![](img/Formula_02_521.png)
    example. In this calculation, the integration over ![](img/Formula_02_522.png)
    is equal to 0, which means that the entire integration is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_523.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that electron 1 is most likely to be found at the nucleus (or the
    origin of the coordinate system). The same holds true for ![](img/Formula_02_524.png),
    ![](img/Formula_02_525.png) and ![](img/Formula_02_526.png) operations.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.5\. Momentum operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The component of momentum operator for particle ![](img/Formula_02_527.png)
    is ![](img/Formula_02_528.png) along the ![](img/Formula_02_529.png)-dimension
    (and similarly, for the ![](img/Formula_02_530.png)- and ![](img/Formula_02_109.png)-dimensions)
    and is defined as follows in Cartesian coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_532.jpg)![](img/Formula_02_533.jpg)![](img/Formula_02_534.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also write these operators in terms of the spherical derivatives [ucsd]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_535.jpg)![](img/Formula_02_536.jpg)![](img/Formula_02_537.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can calculate the expectation value of the momentum for a given particle
    ![](img/Formula_02_538.png) with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_539.png)     where we use ![](img/Formula_02_540.png) as a generic dimension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, using the same system as presented in *Section 2.2.2, Probability
    amplitude for a hydrogen anion* ![](img/Formula_02_541.png), the derivative for
    the ![](img/Formula_02_542.png)-momentum operator of electron 1 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_543.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where the derivative is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_544.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, the expectation value of the ![](img/Formula_02_109.png)-momentum
    for electron 1 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_546.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_547.png)'
  prefs: []
  type: TYPE_IMG
- en: 'which, due to the integration over ![](img/Formula_02_548.png), becomes equal
    to 0, as illustrated by the following SymPy code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_549.png)'
  prefs: []
  type: TYPE_IMG
- en: This result is intuitive because we are in a ![](img/Formula_02_550.png) system,
    which does not have momentum.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.6\. Kinetic energy operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The kinetic energy operators for a single particle in a given direction ![](img/Formula_02_551.png)
    in Cartesian coordinates are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_552.jpg)![](img/Formula_02_553.jpg)![](img/Formula_02_554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In general, kinetic energy is determined by the following in Cartesian coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_555.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'and in spherical coordinates is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_556.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can calculate the expectation value of the kinetic energy for all the particles
    with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_557.jpg)![](img/Formula_02_558.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the same system as presented in *Section 2.2.2, Probability amplitude
    for a hydrogen anion* ![](img/Formula_02_559.png), the second derivative operation
    for the kinetic energy of electron 1 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_560.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_561.jpg)![](img/Formula_02_562.jpg)![](img/Formula_02_563.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The expectation value of the kinetic energy for electron 1 is then calculated
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_564.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formula_02_565.jpg)![](img/Formula_02_566.jpg)![](img/Formula_02_567.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where the electron mass is set to equal 1 (![](img/Formula_02_568.png)). The
    kinetic energy for electron 2 is determined with the same integrals and is equal
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_569.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The total kinetic energy for the electrons in hydride is then the sum of the
    two kinetic terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_570.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting ![](img/Formula_02_571.png) as a standard scaling, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_572.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 2.3.7\. Potential energy operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The potential energy, also known as Coulomb energy, relates the charge![](img/Formula_02_573.png)
    of particles ![](img/Formula_02_574.png) and ![](img/Formula_02_575.png) and depends
    on the distance ![](img/Formula_02_576.png) between two, where ![](img/Formula_02_577.png).
    It is proportional to the inverse of the distance ![](img/Formula_02_578.png)
    and is calculated as a sum over all pairs of particles in the systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_579.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can calculate the expectation value of the potential energy for all the
    particles with the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_580.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the same system as presented in *Section 2.2.2, Probability amplitude
    for a hydrogen anion* ![](img/Formula_02_581.png), the expectation value of the
    potential (Coulomb) energy calculated between the two electrons is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_582.jpg)![](img/Formula_02_583.jpg)![](img/Formula_02_584.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we use the Dirac delta function ![](img/Formula_02_585.png) to approximate
    the inverse of ![](img/Formula_02_586.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_587.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We compute this integral with the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_588.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, the expectation value of electron repulsion is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_589.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The expectation value of the potential (Coulomb) energy calculated between
    electron 1 and the nucleus (particle 3) is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_590.jpg)![](img/Formula_02_591.jpg)![](img/Formula_02_592.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we use the Dirac delta function ![](img/Formula_02_593.png) to approximate
    the inverse of ![](img/Formula_02_594.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_595.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We compute this integral with the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_596.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore, the expectation value of electron-nuclear attraction is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_597.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The total potential energy is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_598.png)'
  prefs: []
  type: TYPE_IMG
- en: 2.3.8\. Total energy operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The total energy operator ![](img/Formula_02_599.png) is the sum of the kinetic
    energy and the potential energy operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_600.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formula_02_601.png) is the total energy. The expectation value
    for the energy is then:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_602.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the same system as presented in *Section 2.2.2*, *Probability amplitude
    for a hydrogen anion* ![](img/Formula_02_603.png), the expectation value of the
    total energy is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_604.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the expectation value for hydride is dominated by the potential
    energy, which makes the system very reactive.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4\. Postulate 4 – Time-independent stationary states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A quantum state is a time-independent stationary state if all its observables
    are independent of time. These states are very important in quantum chemistry.
    The atomic orbital of an electron and the molecular orbital of an electron in
    a molecule are time-independent stationary states.
  prefs: []
  type: TYPE_NORMAL
- en: 'The time-independent Schrödinger equation can be written as follows, that is,
    static: ![](img/Formula_02_605.png) where ![](img/Formula_02_606.png) is the energy
    eigenvalue, and ![](img/Formula_02_607.png) is the state vector of the quantum
    system not as a function of time.'
  prefs: []
  type: TYPE_NORMAL
- en: This postulate implies that the wave function must be an eigenfunction for all
    measurements and corresponding operations that represent the energy. An eigenfunction
    is a function that remains unchanged when acted upon it by an operator or when
    a measurement is made.
  prefs: []
  type: TYPE_NORMAL
- en: We use this concept more in [*Chapter 4*](B18268_04_ePub.xhtml#_idTextAnchor153)*,
    Molecular Hamiltonians.*
  prefs: []
  type: TYPE_NORMAL
- en: 2.5\. Postulate 5 – Time evolution dynamics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The time evolution dynamics of a quantum system is described by Schrödinger''s
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_02_608.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be showing an example of this in [*Chapter 5*](B18268_05_ePub.xhtml#_idTextAnchor208)*,
    Variational Quantum Eigensolver (VQE) Algorithm*.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please test your understanding of the concepts presented in this chapter with
    the corresponding Google Colab notebook.
  prefs: []
  type: TYPE_NORMAL
- en: What quantum numbers do the total wave function depend on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the CG coefficient if we couple together ![](img/Formula_02_609.png)
    and ![](img/Formula_02_610.png) and ![](img/Formula_02_611.png), ![](img/Formula_02_612.png)
    to ![](img/Formula_02_613.png) , ![](img/Formula_02_614.png) ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens to the total wave function upon the application of an antisymmetric
    operation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a pure fermionic state, is the Young frame horizontal or vertical?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the position operator for the ![](img/Formula_02_615.png)-direction?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the sum of potential and kinetic energy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/Formula_02_616.png) and ![](img/Formula_02_617.png)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '![](img/Formula_02_618.png)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: It is multiplied by ![](img/Formula_02_619.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vertical
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Formula_02_620.png)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: Total energy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Bubin] Bubin, S., Cafiero, M., & Adamowicz, L., Non-Born-Oppenheimer variational
    calculations of atoms and molecules with explicitly correlated Gaussian basis
    functions, Advances in Chemical Physics, 131, 377-475, [https://doi.org/10.1002/0471739464.ch6](https://doi.org/10.1002/0471739464.ch6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Cmap] Choosing Colormaps in Matplotlib, [https://matplotlib.org/stable/tutorials/colors/colormaps.html](https://matplotlib.org/stable/tutorials/colors/colormaps.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lucr_1] Lucretius on the Nature of Things, Literally translated into English
    prose by the Rev. John Selby Watson, M.A., London 1870, [https://www.google.fr/books/edition/Lucretius_On_the_Nature_of_Things/59HTAAAAMAAJ?hl=en&gbpv=1&printsec=frontcover](https://www.google.fr/books/edition/Lucretius_On_the_Nature_of_Things/59HTAAAAMAAJ?hl=en&gbpv=1&printsec=frontcover)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lucr_2] Thomas Nail, Lucretius: Our Contemporary, 15 Feb 2019, [https://www.youtube.com/watch?v=VMrTk1A2GX8](https://www.youtube.com/watch?v=VMrTk1A2GX8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lucr_3] David Goodhew, Lucretius lecture, Life, love, death and atomic physics,
    [https://www.youtube.com/watch?v=mJZZd3f_-oE](https://www.youtube.com/watch?v=mJZZd3f_-oE)'
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy] NumPy: the absolute basics for beginners, [https://numpy.org/doc/stable/user/absolute_beginners.html](https://numpy.org/doc/stable/user/absolute_beginners.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Phys5250] Addition of angular momentum, University of Colorado, PHYS5250,
    [https://physicscourses.colorado.edu/phys5250/phys5250_fa19/lecture/lec32-addition-angular-momentum/](https://physicscourses.colorado.edu/phys5250/phys5250_fa19/lecture/lec32-addition-angular-momentum/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[SciPy_sph] SciPy, API reference, Compute spherical harmonics, scipy.special.sph_harm,
    [https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.sph_harm.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.sph_harm.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Sharkey_0] Keeper L. Sharkey and Ludwik Adamowicz, An algorithm for nonrelativistic
    quantum mechanical finite-nuclear-mass variational calculations of nitrogen atom
    in L = 0, M = 0 states using all-electrons explicitly correlated Gaussian basis
    functions, J. Chem. Phys. 140, 174112 (2014), [https://doi.org/10.1063/1.4873916](https://doi.org/10.1063/1.4873916)'
  prefs: []
  type: TYPE_NORMAL
- en: '[SymPy_CG] SymPy, Clebsch-Gordan Coefficients, [https://docs.sympy.org/latest/modules/physics/quantum/cg.html](https://docs.sympy.org/latest/modules/physics/quantum/cg.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[SymPy_Rnl] Hydrogen Wavefunctions, [https://docs.sympy.org/latest/modules/physics/hydrogen.html](https://docs.sympy.org/latest/modules/physics/hydrogen.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[SymPy] SymPy, A Python library for symbolic mathematics, [https://www.sympy.org/en/index.html](https://www.sympy.org/en/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Sph_Real] Wikipedia, Spherical Harmonics, Real forms, [https://en.wikipedia.org/wiki/Spherical_harmonics#Real_forms](https://en.wikipedia.org/wiki/Spherical_harmonics#Real_forms)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ucsd] University of Californian San Diego, Spherical Coordinates and the Angular
    Momentum Operators, [https://quantummechanics.ucsd.edu/ph130a/130_notes/node216.html](https://quantummechanics.ucsd.edu/ph130a/130_notes/node216.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Wiki_1] Mathematical formulation of quantum mechanics, Wikipedia, [https://en.wikipedia.org/wiki/Mathematical_formulation_of_quantum_mechanics](https://en.wikipedia.org/wiki/Mathematical_formulation_of_quantum_mechanics)'
  prefs: []
  type: TYPE_NORMAL
