["```py\n#create snake area network adjacency matrix\nimport numpy as np\nimport networkx as nx\nnp.random.seed(0)\nadj_mat = [[1,1,1,0,0,0,1],\n           [1,1,1,0,0,0,0],\n           [1,1,1,0,0,0,0],\n           [0,0,0,1,1,1,0],\n           [0,0,0,1,1,1,0],\n           [0,0,0,1,1,1,1],\n           [1,0,0,0,0,1,1]]\nadj_mat = np.array(adj_mat)\n```", "```py\n#create spatial weight matrix\nweights_total = [[1,1,1,0,0,0,1],\n           [1,1,1,0,0,0,0],\n           [1,1,1,0,0,0,0],\n           [0,0,0,1,1,1,1],\n           [0,0,0,1,1,1,1],\n           [0,0,0,1,1,1,1],\n           [1,0,0,1,1,1,1]]\nweights_total = np.array(weights_total)\nadj_mat_w=np.multiply(adj_mat,weights_total)\n```", "```py\n#explore degree and Laplacian matrices\ndegree_matrix=np.diag(adj_mat_w.sum(axis=1))\nlaplacian_matrix=degree_matrix-adj_mat_w\nprint(degree_matrix)\nprint(laplacian_matrix)\n```", "```py\n[[4 0 0 0 0 0 0]\n [0 3 0 0 0 0 0]\n [0 0 3 0 0 0 0]\n [0 0 0 3 0 0 0]\n [0 0 0 0 3 0 0]\n [0 0 0 0 0 4 0]\n [0 0 0 0 0 0 3]]\n```", "```py\n[[ 3 -1 -1  0  0  0 -1]\n [-1  2 -1  0  0  0  0]\n [-1 -1  2  0  0  0  0]\n [ 0  0  0  2 -1 -1  0]\n [ 0  0  0 -1  2 -1  0]\n [ 0  0  0 -1 -1  3 -1]\n [-1  0  0  0  0 -1  2]]\n```", "```py\n#define Fiedler vector and obtain clustering\nG = nx.from_numpy_matrix(adj_mat_w)\nev = nx.linalg.algebraicconnectivity.fiedler_vector(G)\nlabels = [0 if v < 0 else 1 for v in ev]\nlabels\nnx.draw(G,with_labels=True, node_color=labels)\n```", "```py\n#perform spectral clustering with sklearn\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn import metrics\nsc = SpectralClustering(2, affinity='precomputed', n_init=100)\nsp_clust=sc.fit(adj_mat_w)\nsc_labels=sp_clust.labels_\nnx.draw(G,with_labels=True, node_color=sc_labels)\n```", "```py\n\"Mangrove ecosystem. Numerous butterflies, lizards, and insects. Gumbolimbo trees. Soggy soil.', 'Tropical pines. Scat shows raccoon and coyote populations here. Recent controlled burn.\"\n```", "```py\n\"Small grass area. Some saplings. Gravel paths. Many cars parked in non-parking zones. Lots of run-off.\"\n```", "```py\n#set up needed packages\nimport pandas as pd\nimport numpy as np\nimport os\n#you may need to install sentence_transformers\n#if the package is not already in your environment\n#!pip install sentence_transformers\nfrom sentence_transformers import SentenceTransformer\n#import first network's data\nFile =\"C:/users/njfar/OneDrive/Desktop/SC_Notes.csv\"\npwd = os.getcwd()\nos.chdir(os.path.dirname(File))\nmydata = pd.read_csv(os.path.basename(File),encoding='latin1')\n```", "```py\n#prepare data\nmydata['Notes']=mydata['Notes'].fillna(value=\".\")\n#strip to text for input into BERT model\ntext_list=list(mydata.Notes)\n#get BERT--768 vectors;\n#note: you will need enough memory to load the transformer model\nsbert_model1 = SentenceTransformer('all-mpnet-base-v2')\n#encode data with BERT\nencoded_text1=sbert_model1.encode(text_list)\n```", "```py\n#make nearest neighbors graph\nfrom sklearn.neighbors import kneighbors_graph\nn_adj = kneighbors_graph(encoded_text1, n_neighbors=3).toarray()\n```", "```py\n#run spectral clustering\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn import metrics\nsc = SpectralClustering(2, affinity='precomputed', n_init=100)\nsp_clust=sc.fit(n_adj)\nsc_labels=sp_clust.labels_\nprint(sc_labels)\n```", "```py\n#examine notes\nprint(text_list)\n```", "```py\n#create training dataset for supervised learning\n#turn BERT embedding into array\nBERT_array1=np.array([x for x in encoded_text1])\n#convert to dataframes\nBERT_df1=pd.DataFrame(BERT_array1)\n```", "```py\n#create KNN classifier and test accuracy\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n#get predictors and outcome\nBERT_df1['Type']=mydata['Type']\ndf_train, df_test = train_test_split(BERT_df1,test_size=0.2, random_state=0)\nX = df_train.iloc[:,0:767]\ny = df_train.iloc[:,768]\nX_test = df_test.iloc[:,0:767]\ny_test = df_test.iloc[:,768]\n#create KNN classifier and print accuracy\neu=KNeighborsClassifier(n_neighbors=2,metric='euclidean')\neu.fit(X,y)\nprint(eu.score(X_test,y_test))\n```"]