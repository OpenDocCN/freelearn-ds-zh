["```py\nimport logging\nlogging.basicConfig(level=0,filename='python-log.log', filemode='w', format='%(levelname)s - %(message)s')\nlogging.debug('Attempted to divide by zero')\nlogging.warning('User left field blank in the form')\nlogging.error('Couldn't find specified file')\n```", "```py\nDEBUG - Attempted to divide by zero\nWARNING - User left field blank in the form\nERROR - Couldn't find specified file\n```", "```py\nlogging.basicConfig(level=0,filename='python-log.log', filemode='w', format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.info('Something happened')\nlogging.info('Something else happened, and it was bad')\n```", "```py\n2020-06-21 10:55:40,278 - INFO - Something happened\n2020-06-21 10:55:40,278 - INFO - Something else happened, and it was bad\n```", "```py\n    3. This will allow you to test using Consumer Groups in the next section.\n    ```", "```py\npip3 install confluent-kafka\n```", "```py\n    from confluent_kafka import Producer\n    from faker import Faker\n    import json\n    import time\n    fake=Faker()\n    ```", "```py\n    p=Producer({'bootstrap.servers':'localhost:9092,localhost:9093,localhost:9094'})\n    ```", "```py\n    p.list_topics().topics\n    ```", "```py\n    0, 1, 2) and then the value of the message. The messages come back as bytes so you can decode them to utf-8.\n    ```", "```py\n    for i in range(10):\n        data={'name':fake.name(),'age':fake.random_\n              int(min=18, max=80, step=1),'street':fake.\n              street_address(),'city':fake.city(),\n              'state':fake.state(),'zip':fake.zipcode()}\n        m=json.dumps(data)\n    ```", "```py\n        p.poll(0)\n        p.produce('users',m.encode('utf-8'),callback=receipt)\n    ```", "```py\n    p.flush()\n    ```", "```py\n2020-06-22 15:29:30 : Message on topic users on partition 1 with value of {'name': 'Willie Chambers', 'age': 66, 'street': '13647 Davis Neck Suite 480', 'city': 'Richardside', 'state': 'Nebraska', 'zip': '87109'}\n```", "```py\n    from confluent_kafka import Consumer\n    c=Consumer({'bootstrap.servers': 'localhost:9092,localhost:9093,localhost9093','group.id':'python-consumer','auto.offset.reset':'earliest'})\n    ```", "```py\n    c.list_topics().topics\n    t.topics['users'].partitions\n    ```", "```py\n    c.subscribe(['users'])\n    ```", "```py\n    while True:\n        msg=c.poll(1.0) #timeout\n        if msg is None:\n            continue\n\n        if msg.error():\n            print('Error: {}'.format(msg.error()))\n            continue\n        data=msg.value().decode('utf-8')\n        print(data)\n    c.close()\n    ```", "```py\n{'name': 'Joseph Vaughn', 'age': 39, 'street': '978 Jordan Extensions Suite 684', 'city': 'Zunigamouth', 'state': 'Michigan', 'zip': '38090'}\n```"]