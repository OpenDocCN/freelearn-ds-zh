- en: Raster Data Processing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栅格数据处理
- en: '**Geographic information systems** (**GIS**)are often comprised of points,
    lines, and polygons. These data types are called vector data. There is, however,
    another data type in GIS—rasters. In this chapter, you will learn the basics of
    working with raster data. You will learn how to:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**地理信息系统**（**GIS**）通常由点、线和多边形组成。这些数据类型被称为矢量数据。然而，GIS 中还有一种数据类型——栅格。在本章中，你将学习如何处理栅格数据的基础知识。你将学习如何：'
- en: Use the **Geospatial Data Abstraction Library** (**GDAL**) to load and query
    rasters
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **地理数据抽象库**（**GDAL**）加载和查询栅格
- en: Use GDAL to modify and save rasters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GDAL 修改和保存栅格
- en: Use GDAL to create rasters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GDAL 创建栅格
- en: Load rasters into PostgreSQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将栅格加载到 PostgreSQL 中
- en: Perform queries on rasters using PostgreSQL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL 对栅格进行查询
- en: Installing GDAL can be difficult. By using virtual environments and running
    Anaconda, you can simplify this process by using the GUI of the environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 GDAL 可能很困难。通过使用虚拟环境和运行 Anaconda，你可以通过使用环境的 GUI 简化此过程。
- en: Raster operations using GDAL
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GDAL 进行栅格操作
- en: 'The GDAL library allows you to read and write both vector and raster data.
    To install GDAL on Windows, you will need the appropriate binaries:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL 库允许你读取和写入矢量和栅格数据。要在 Windows 上安装 GDAL，你需要适当的二进制文件：
- en: You can download OSGeo4W, which contains the binaries, at: [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://trac.osgeo.org/osgeo4w/](https://trac.osgeo.org/osgeo4w/) 下载包含二进制的
    OSGeo4W。
- en: 'When you have the binaries, you can install `gdal` using `conda`, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有了二进制文件，你可以使用 `conda` 安装 `gdal`，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the following sections, you will learn how to load and work with a `.tif` file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何加载和使用 `.tif` 文件。
- en: Using the GDAL library to load and query rasters
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GDAL 库加载和查询栅格
- en: 'Now that you have `gdal` installed, import it using:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 `gdal`，使用以下代码导入它：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'GDAL 2 is the most recent version. If you have an older version of `gdal` installed,
    you may need to import it using the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL 2 是最新版本。如果你安装了较旧的 `gdal` 版本，你可能需要使用以下代码导入它：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If this is the case, you may want to look into upgrading your version of `gdal`.
    Once you have `gdal` imported, you can open a raster image. First, let's get an
    image from the web. The Earth Data Analysis Center at the University of New Mexico
    maintains the **Resource Geographic Information System** (**RGIS**). In it, you
    will find New Mexico GIS data. Browse to [http://rgis.unm.edu/](http://rgis.unm.edu/) and
    from the Get Data link, Select `Shaded Relief`, `General`, and `New Mexico`. Then,
    download the `Color Shaded Relief of New Mexico (Georeferenced TIFF)` file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，你可能需要考虑升级你的 `gdal` 版本。一旦你导入了 `gdal`，你就可以打开一个栅格图像。首先，让我们从网络上获取一个图像。新墨西哥大学的地球数据分析中心维护着
    **资源地理信息系统**（**RGIS**）。在其中，你可以找到新墨西哥的 GIS 数据。浏览到 [http://rgis.unm.edu/](http://rgis.unm.edu/)
    并从“获取数据”链接，选择“阴影地形”、“通用”和“新墨西哥”。然后，下载 `Color Shaded Relief of New Mexico (Georeferenced
    TIFF)` 文件。
- en: 'When you extract the ZIP file, you will have several files. We are only interested
    in `nm_relief_color.tif`. The following code will open TIF using `gdal`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你解压 ZIP 文件时，你会得到几个文件。我们只对 `nm_relief_color.tif` 感兴趣。以下代码将使用 `gdal` 打开 TIF：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The previous code opens TIF. It is very similar to opening any file in Python,
    except you used `gdal.Open` instead of the standard Python library `open`. The
    next line prints the metadata from the TIF, and the output is shown as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码打开 TIF 文件。这和在 Python 中打开任何文件非常相似，只是你使用了 `gdal.Open` 而不是标准的 Python 库 `open`。下一行打印
    TIF 的元数据，输出如下：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous metadata gives you some basic information such as dates created
    and revised, the resolution, and pixels per inch. One characteristic of the data
    we are interested in is the projection. To find it, use the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的元数据为你提供了一些基本信息，例如创建和修订的日期、分辨率和每英寸像素数。我们感兴趣的数据的一个特点是投影。要找到它，请使用以下代码：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the `GetProjection` method on the TIF, you will see that we didn''t find
    any. The output of the code is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TIF 上的 `GetProjection` 方法，你会看到我们没有找到任何内容。代码的输出如下：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you open this TIF in QGIS, you will get a warning that the CRS is undefined
    and it will default to `epsg:4326`. I know that the image is projected and we
    can find this out by looking at the `nm_relief_color.tif.xml` file. If you scroll
    to the bottom, you will see the values under the XML tag `<cordsysn>`, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 QGIS 中打开此 TIF，您将收到一个警告，表示坐标系未定义，它将默认为 `epsg:4326`。我知道该图像是投影的，我们可以通过查看 `nm_relief_color.tif.xml`
    文件来找出这一点。如果您滚动到页面底部，您将看到 XML 标签 `<cordsysn>` 下的值，如下所示：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you look up the projection at [spatialreference.org](http://spatialreference.org),
    you will find that it is EPSG:26913\. We can use `gdal` to set the projection,
    as shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 [spatialreference.org](http://spatialreference.org) 上查找投影，您会发现它是 EPSG:26913。我们可以使用
    `gdal` 来设置投影，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous code imports the `osr` library. It then uses the library to create
    a new `SpatialReference`. Next, it imports a known reference using `ImportFromEPSG`
    and passes `26913`. It then uses `SetProjection`, passing the WKT for EPSG:26913\.
    Lastly, it calls `GetProjection` so that we can see that the code worked. The
    results are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码导入了 `osr` 库。然后它使用库创建一个新的 `SpatialReference`。接下来，它使用 `ImportFromEPSG` 导入一个已知参考，并传递
    `26913`。然后它使用 `SetProjection`，传递 EPSG:26913 的 WKT。最后，它调用 `GetProjection`，这样我们就可以看到代码是否成功。结果如下：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The previous output is the WKT for EPSG:26913.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出是 EPSG:26913 的 WKT。
- en: 'Open QGIS and the TIF will load with no warnings. I can add a copy of the Albuquerque
    streets to it and they will appear exactly where they should. Both sets of data
    are in EPSG:26913\. The following image shows the TIF and the streets in the center
    of New Mexico-Albuquerque:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 QGIS，TIF 将无警告加载。我可以添加阿尔伯克基街道的副本，它们将出现在正确的位置。这两组数据都在 EPSG:26913。以下图像显示了新墨西哥州阿尔伯克基中心的
    TIF 和街道：
- en: '![](img/9b0cef82-d52f-4a47-80a9-8d062160a975.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b0cef82-d52f-4a47-80a9-8d062160a975.jpg)'
- en: Tif of NM with Streets shapefile
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 新墨西哥州街道的 Tif 文件
- en: 'Now that we have added a projection, we can save a new version of the TIF:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了投影，我们可以保存 TIF 的新版本：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To see that the new file has the spatial reference, use the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看新文件是否有空间参考，请使用以下代码：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous code will output the **well-known text** (**WKT**) for EPSG:26913,
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将输出 EPSG:26913 的 **知名文本**（**WKT**），如下所示：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A color raster dataset has three bands—red, green, and blue. You can get each
    of the bands individually using the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个彩色栅格数据集有三个波段——红色、绿色和蓝色。您可以使用以下代码单独获取每个波段：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The previous code will return `3`. Unlike an array, the bands are indexed 1-n,
    so a three band raster will have indexes `1`, `2`, and `3`. You can grab a single
    band by passing the index to `GetRasterBand()`, which is shown in the following
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将返回 `3`。与数组不同，波段是按 1-n 索引的，因此三波段栅格将具有索引 `1`、`2` 和 `3`。您可以通过传递索引到 `GetRasterBand()`
    来获取单个波段，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that you have a raster band, you can perform queries on it and you can
    lookup values at positions. To find the value at a specified row and column, you
    can use the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有一个栅格波段，您可以在其上执行查询，并且可以查找位置处的值。要找到指定行和列的值，您可以使用以下代码：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, `values` is an array, so you can lookup values by index notation, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`values` 是一个数组，因此您可以通过索引符号查找值，如下所示：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous code will return a value of `216`. In a single band array, this
    would be helpful, but in a colored image, you would most likely want to know the
    color at a location. This would require knowing the value of all three bands.
    You can do that by using the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将返回一个值为 `216`。在单波段数组中，这可能很有用，但在彩色图像中，您可能更想知道位置处的颜色。这需要知道所有三个波段的值。您可以通过使用以下代码来完成：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The previous code returns the values—`216, 189, 157`. These are the RGB values
    of the pixel. These three values are composited—overlayed on each other, which,
    should be the color shown in the following image:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码返回的值是 `216`、`189`、`157`。这些是像素的 RGB 值。这三个值是合成的——叠加在一起，这应该是以下图像中显示的颜色：
- en: '![](img/e90d25aa-315d-4910-aa30-18aaf8f72450.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e90d25aa-315d-4910-aa30-18aaf8f72450.jpg)'
- en: The color represented by the three bands at [1100,1100]
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [1100,1100] 位置表示的三个波段的颜色
- en: 'With a band, you have access to several methods for obtaining information about
    the band. You can get the mean and standard deviation of the values, as shown
    in the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用乐队，您可以访问获取乐队信息的好几种方法。您可以获取值的平均值和标准差，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is shown as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also get the minimum and maximum values from a band, as shown in the
    following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从波段获取最小值和最大值，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The result should be `0.0` and `255.0`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该是 `0.0` 和 `255.0`。
- en: 'You can also get the description of the band. The following code shows you
    how to get and set the description:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以获取波段的描述。以下代码展示了如何获取和设置描述：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The most obvious thing you may want to do with a raster dataset is to view
    the raster in Jupyter Notebook. There are several ways to load images in a Jupyter
    notebook, one being using HTML and an `<img>`. In the following code, you are
    shown how to plot the image using `matplotlib`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能最想对栅格数据集做的事情之一就是在 Jupyter Notebook 中查看栅格。在 Jupyter Notebook 中加载图像有几种方法，其中一种就是使用
    HTML 和 `<img>` 标签。在以下代码中，你将看到如何使用 `matplotlib` 绘制图像：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The previous code imports `numpy` and `matplotlib.pyploy.imshow`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码导入了 `numpy` 和 `matplotlib.pyploy.imshow`。
- en: NumPy is a popular library for working with arrays. When dealing with rasters,
    which are arrays, you will benefit from having a strong understanding of the library.
    Packt published several books on NumPy such as *NumPy Cookbook*, *NumPy Beginners
    Guide*, and *Learning NumPy Array,* and thiswould be a good place to start learning
    more.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 是一个用于处理数组的流行库。当处理栅格（数组）时，你将受益于对库的深入了解。Packt 出版了多本关于 NumPy 的书籍，如 *NumPy
    Cookbook*、*NumPy Beginners Guide* 和 *Learning NumPy Array*，这将是一个学习更多知识的好起点。
- en: It then sets plotting an inline for this notebook. The code then reads in the
    TIF as an array. It then makes a `numpy` array from the first band.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它为这个笔记本设置内联绘图。代码接着读取 TIF 作为数组。然后，它从第一个波段创建一个 `numpy` 数组。
- en: Bands are indexed *1*-*n*, but once read in as an array, they become indexed
    at 0.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 波段索引为 *1*-*n*，但一旦作为数组读取，它们就索引为 0。
- en: 'To isolate the first band, the code reshapes the array using the width and
    height. Using `x.shape`, you can get them both, and if you index, you can get
    each one individually. Lastly, using `imshow`, the code plots the image using
    the color map for `gist_earth`. The image will display in Jupyter as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了隔离第一个波段，代码使用宽度和高度重塑数组。使用 `x.shape`，你可以获取它们两个，如果你索引，你可以单独获取每一个。最后，使用 `imshow`，代码使用
    `gist_earth` 的颜色图绘制图像。图像将在 Jupyter 中如下显示：
- en: '![](img/984bdb86-8302-49b6-bf25-f1854bc4f553.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/984bdb86-8302-49b6-bf25-f1854bc4f553.jpg)'
- en: Tif in Jupyter using imshow
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中使用 imshow 显示 Tif
- en: Now that you know how to load a raster and perform basic operations, you will
    learn how to create a raster in the following section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何加载栅格并执行基本操作，你将在下一节学习如何创建栅格。
- en: Using GDAL to create rasters
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GDAL 创建栅格
- en: In the previous section, you learned how to load a raster, perform basic queries,
    modify it, and save it out as a new file. In this section, you will learn how
    to create a raster.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你学习了如何加载栅格、执行基本查询、修改它并将其保存为新的文件。在本节中，你将学习如何创建栅格。
- en: 'A **raster** is an array of values. So to create one, you start by creating
    an array, as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**栅格**是一组值。因此，要创建一个，你首先创建一个数组，如下面的代码所示：'
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The previous code creates a `numpy` array with four rows of seven columns.
    Now that you have the array of data, you will need to set some basic properties.
    The following code will assign the values to variables and then you will pass
    them to the raster in the following example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了一个有四行七列的 `numpy` 数组。现在你有了数据数组，你需要设置一些基本属性。以下代码将值分配给变量，然后你将在以下示例中将它们传递给栅格：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The following code sets the lower-left corner, width, height, and name for the
    raster in the variable `coord`. It then sets the width and height in pixels. Lastly,
    it names the raster.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码为变量 `coord` 中的栅格设置了左下角、宽度、高度和名称。然后，它以像素为单位设置宽度和高度。最后，它命名了栅格。
- en: 'The next step is to create the raster by combining the data and properties.
    The following code will show you how:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过组合数据和属性来创建栅格。以下代码将向你展示如何操作：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The previous code assigns the `GeoTiff` driver to the variable `d`. Then, it
    uses the driver to create the raster. The create method takes five parameters—the
    `name`, size of `x`, size of `y`, the number of bands, and the data type. To get
    the size of `x` and `y`, you can access `a_raster.shape`, which will return (4,7).
    Indexing `a_raster.shape` will give you `x` and `y` individually.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将`GeoTiff`驱动程序分配给变量`d`。然后，它使用该驱动程序创建栅格。创建方法需要五个参数——`name`、`x`的大小、`y`的大小、波段数和数据类型。要获取`x`和`y`的大小，你可以访问`a_raster.shape`，它将返回`(4,7)`。对`a_raster.shape`进行索引将分别给出`x`和`y`。
- en: '`Create()` accepts several data types—starting with `GDT_`. Other data types
    include Unknown, Byte, UInt16, Int16, UInt32, Int32, Float32, Float64, CInt16,
    CInt32, CFloat32, and Cfloat64.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Create()` 接受几种数据类型——从 `GDT_` 开始。其他数据类型包括未知、字节、无符号 16 位整数、有符号 16 位整数、无符号 32
    位整数、有符号 32 位整数、单精度浮点数、双精度浮点数、有符号 16 位整数、有符号 32 位整数、单精度浮点数和双精度浮点数。'
- en: Next, the code sets the transformation from map to pixel coordinates using the
    upper-left corner coordinates and the rotation. The rotation is the width and
    height, and if it is a north up image, then the other parameters are 0.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，代码使用左上角坐标和旋转设置从地图到像素坐标的转换。旋转是宽度和高度，如果是一个北向上图像，则其他参数为 0。
- en: To write the data to a band, the code selects the raster band—in this case,
    you used a single band specified when you called the `Create()` method, so passing `1`
    to `GetRasterBand()` and `WriteArray()` will take the `numpy` array.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据写入波段，代码选择栅格波段——在这种情况下，您在调用 `Create()` 方法时指定了一个单波段，因此将 `1` 传递给 `GetRasterBand()`
    和 `WriteArray()` 将获取 `numpy` 数组。
- en: Now, you will need to assign a spatial reference to the TIF. Create a spatial
    reference and assign it to `outsr`. Then, you can import a spatial reference from
    the EPSG code. Next, set the projection on the TIF by passing the WKT to the `SetProjection()`
    method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要为 TIF 分配一个空间参考。创建一个空间参考并将其分配给 `outsr`。然后，您可以从 EPSG 码导入空间参考。接下来，通过将 WKT
    传递给 `SetProjection()` 方法来设置 TIF 上的投影。
- en: The last step is to `FlushCache()`, which will write the file. If you are done
    with the TIF, you can set `output = None` to clear it. However, you will use it
    again in the following code snippet, so you will skip that step here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是 `FlushCache()`，这将写入文件。如果您完成 TIF，可以将 `output = None` 设置为清除它。然而，您将在下面的代码片段中再次使用它，所以这里将跳过该步骤。
- en: 'To prove that the code worked, you can check the projection, as shown in the
    following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要证明代码有效，您可以检查投影，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And the output shows that the TIF is in EPSG:4326:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示 TIF 在 EPSG:4326：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can display the TIF in Jupyter and see if it looks like you expected. The
    following code demonstrates how to plot the `image` and inspect your results:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Jupyter 中显示 TIF 并查看它是否如您预期的那样。以下代码演示了如何绘制 `image` 并检查您的结果：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The previous code reads the raster as an array and assigns the width and height.
    It then creates an `image` variable, reshaping the array to the width and height.
    Lastly, it passes the image to `imshow()` and prints the `data` in the last line.
    If everything worked, you will see the following image:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将栅格读取为数组，并分配宽度和高度。然后，它创建一个 `image` 变量，将数组重塑为宽度和高度。最后，它将图像传递给 `imshow()`
    并在最后一行打印 `data`。如果一切正常，您将看到以下图像：
- en: '![](img/2302d703-eddb-442a-abfa-5c20c786d031.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2302d703-eddb-442a-abfa-5c20c786d031.png)'
- en: The array values and the raster created from them
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的值以及由它们创建的栅格
- en: The following section will teach you how to use PostgreSQL to work with rasters
    as an alternative or in conjunction with `gdal`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将向您介绍如何使用 PostgreSQL 来处理栅格，作为 `gdal` 的替代品或与其结合使用。
- en: Raster operations using PostgreSQL
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL 进行栅格操作
- en: In the first section of this chapter, you were able to load, display, and query
    rasters using `gdal`. In this section, you will learn how to load and query rasters
    using a spatial database—PostgreSQL. As you start to model your data, you will
    most likely hold it in a spatial database. You can leverage your database to perform
    the queries on your rasters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一节中，您能够使用 `gdal` 加载、显示和查询栅格。在本节中，您将学习如何使用空间数据库——PostgreSQL 来加载和查询栅格。当您开始建模数据时，您很可能会将其存储在空间数据库中。您可以利用数据库对您的栅格执行查询。
- en: Loading rasters into PostgreSQL
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将栅格加载到 PostgreSQL 中
- en: To load a raster into PostgreSQL, you can use the `raster2pgsql` binary. If
    it is not in your path, you may need to add it. You should be able to find the
    binary in your PostgreSQL install directory on Windows at `\PostgreSQL\10\bin`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要将栅格加载到 PostgreSQL 中，您可以使用 `raster2pgsql` 二进制文件。如果它不在您的路径中，您可能需要将其添加。您应该能够在
    Windows 的 PostgreSQL 安装目录中的 `\PostgreSQL\10\bin` 找到该二进制文件。
- en: 'The following command should be executed from your operating system''s command
    line. It will load the TIF you created earlier in this chapter into an existing
    PostgreSQL database:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令应从您的操作系统的命令行执行。它将本章中创建的 TIF 加载到现有的 PostgreSQL 数据库中：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous command uses `raster2pgsql` with the `-I` (creates an index), `-C`
    (adds raster constraints), and `-s 4326` (the SRID) parameters. Using the pipe
    operator on Windows, you send the command to `psql`. Psql is run using the `-U`
    `postgres` (username) and `-d pythonspatial` (database) parameters.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令使用 `raster2pgsql` 的 `-I`（创建索引）、`-C`（添加栅格约束）和 `-s 4326`（SRID）参数。在 Windows
    上使用管道操作符，将命令发送到 `psql`。`psql` 使用 `-U` `postgres`（用户名）和 `-d pythonspatial`（数据库名）参数运行。
- en: If you are logged in as the Postgres user, you do not need the `-U`. Without
    it, Windows will try to log in to PostgreSQL using the logged in user account,
    which may not be the same as the PostgreSQL user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以 Postgres 用户登录，你不需要 `-U`。如果没有它，Windows 将尝试使用已登录的用户账户登录到 PostgreSQL，这可能与
    PostgreSQL 用户不同。
- en: Now that you have the data loaded in PostgreSQL, the following section will
    show you how you can use Python to query it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将数据加载到 PostgreSQL 中，下一节将展示你如何使用 Python 查询它。
- en: Performing queries on rasters using PostgreSQL
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL 对栅格进行查询
- en: 'With a raster loaded into PostgreSQL, you can query it using Python. The Python
    library for working with PostgreSQL is `psycopg2`. The following code will connect
    to the database where you loaded the TIF:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中加载了栅格后，你可以使用 Python 查询它。用于与 PostgreSQL 一起工作的 Python 库是 `psycopg2`。以下代码将连接到你已加载
    TIF 的数据库：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The previous code imports `psycopg2`. It then makes a connection passing the
    database name, username, and password. Lastly, it gets a `cursor` object so that
    you can execute queries.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码导入 `psycopg2`。然后通过传递数据库名、用户名和密码建立连接。最后，它获取一个 `cursor` 对象，以便你可以执行查询。
- en: 'To see the raster in PostgreSQL, you can execute a select all, as shown in
    the following code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PostgreSQL 中查看栅格，你可以执行一个选择所有操作，如下面的代码所示：
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The previous code executes a select all statement and prints all the results.
    There are two columns in the table—rid and `rast`. Rid is the unique ID field
    for the raster. If you had tiled it when running `raster2pgsql`, there would be
    more rows. The `rast` column holds the raster data:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码执行了一个选择所有语句并打印所有结果。表中有两列——rid 和 `rast`。Rid 是栅格的唯一ID字段。如果你在运行 `raster2pgsql`
    时将其分块，则会有更多行。`rast` 列包含栅格数据：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Querying raster metadata
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询栅格元数据
- en: Using PostgreSQL, you can perform various queries on your data. In this section,
    you will learn how to query the raster for basic metadata and properties. This
    section will present a few of the many PostgreSQL functions that are available.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL，你可以对你的数据进行各种查询。在本节中，你将学习如何查询栅格的基本元数据和属性。本节将介绍许多可用的 PostgreSQL
    函数中的几个。
- en: 'You can query the data for a basic text summary. The following code shows you
    how to use the `ST_Summary()` function:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查询基本文本摘要的数据。以下代码展示了如何使用 `ST_Summary()` 函数：
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The summary function takes the raster data column as a parameter and returns
    a string containing the size of the raster, the bounding box, the number of bands,
    and if there are no data values in any of the bands. The following is the output
    from the previous code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 汇总函数接受栅格数据列作为参数，并返回一个包含栅格大小、边界框、波段数量以及是否任何波段中没有数据值的字符串。以下是从上一段代码输出的内容：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Parsing out the individual pieces of information from `ST_Summary` would be
    difficult. You can retrieve this information in a more machine-readable format
    by using the `ST_Metadata` function. You can use the following code to do so:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `ST_Summary` 中解析出单个信息片段将很困难。你可以通过使用 `ST_Metadata` 函数以更易于机器读取的格式检索此信息。你可以使用以下代码来完成此操作：
- en: '[PRE35]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The previous code queries the raster for the upper-left *X* value, the upper-left
    *Y* value, the width, the height, the scale of *X*, the scale of *Y*, the skew
    of *X*, the skew of *Y*, the SRID, and the number of bands in the raster. The
    output is shown as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码查询栅格的左上角 *X* 值、左上角 *Y* 值、宽度、高度、*X* 的比例、*Y* 的比例、*X* 的倾斜、*Y* 的倾斜、SRID 和栅格中的波段数量。输出如下所示：
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The output allows you to select individual pieces of metadata by using index
    notation, which is a simpler solution to parsing the string provided by `ST_Summary`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 输出允许你通过索引符号选择单个元数据片段，这是一个比解析 `ST_Summary` 提供的字符串更简单的解决方案。
- en: 'You can query for specific and individual attributes of the raster. To get
    the raster as a single polygon—instead of the two-point box described in the summary—you
    can use the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查询栅格的特定和单个属性。要获取单个多边形作为栅格——而不是摘要中描述的两个点框——你可以使用以下代码：
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output of the previous code is the WKT for a vector-polygon-of the raster.
    It is shown as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码的输出是栅格的向量和多边形的WKT。如下所示：
- en: '[PRE38]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following code will query the height and width of the raster:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将查询栅格的高度和宽度：
- en: '[PRE39]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you may recall from earlier in the chapter, the raster is `4x7`, as shown
    in the output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从本章前面的内容中可能记得的，栅格是`4x7`，如下输出所示：
- en: '[PRE40]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Another piece of metadata that may come in handy is the pixel size. The following
    code will show you how:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能很有用的元数据是像素大小。以下代码将展示如何操作：
- en: '[PRE41]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Using `ST_PixelWidth` and `ST_PixelHeight`, you will get the output as follows.
    This matches the height and width from when you created the raster earlier in
    the chapter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_PixelWidth`和`ST_PixelHeight`，您将得到以下输出。这与您在章节早期创建栅格时的高度和宽度相匹配：
- en: '[PRE42]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can query the raster for basic statistical information about the data within
    the cells for a specific band. `ST_SummaryStats` provides basic summary statistics
    for the data values. The following code shows you how to query:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查询特定波段中单元格内数据的统计信息。`ST_SummaryStats`提供了数据值的基本摘要统计信息。以下代码展示了如何查询：
- en: '[PRE43]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output of the previous code returns the count, sum, mean, standard deviation,
    min, and max for a raster band. You can pass the raster band by passing it as
    an integer in the second parameter, `ST_SummaryStats(rast,3)`. If you do not specify
    the band, the default is `1`. The output is shown as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码的输出返回了栅格波段的数量、总和、平均值、标准差、最小值和最大值。您可以通过将波段作为整数传递到第二个参数`ST_SummaryStats(rast,3)`中来传递栅格波段。如果您没有指定波段，默认为`1`。输出如下所示：
- en: '[PRE44]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can also query for a histogram of the values in the raster, as shown in
    the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查询栅格中值的直方图，如下所示：
- en: '[PRE45]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The previous code uses `ST_Histogram` and passes the raster column and a band.
    You can pass the number of bins as the third parameter or you can let the function
    decide. The result is shown as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码使用了`ST_Histogram`并传递了栅格列和波段。你可以将bins的数量作为第三个参数传递，或者让函数自行决定。结果如下所示：
- en: '[PRE46]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The previous output is an array of bins. Each bin contains the minimum value,
    the maximum value, the count, and the percentage.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出是一个bins的数组。每个bin包含最小值、最大值、计数和百分比。
- en: Queries returning geometry
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回几何形状的查询
- en: The previous queries returned basic information about the raster and returned
    collections with the data. In PostgreSQL, there are a series of functions that
    return geometries from queries. This section will cover a few of those functions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的查询返回了关于栅格的基本信息，并返回了包含数据的集合。在PostgreSQL中，有一系列函数可以从查询中返回几何形状。本节将介绍其中的一些函数。
- en: 'A raster is comprised of a matrix of cells and values. These cells become georeferenced
    pixels in our raster data. Using PostgreSQL, you can query your raster data for
    a specific cell and get the polygon representation of that cell back. The following
    code shows you how:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格由一系列单元格和值组成。这些单元格成为我们栅格数据中的地理参照像素。使用PostgreSQL，您可以查询特定单元格的栅格数据，并返回该单元格的多边形表示。以下代码展示了如何操作：
- en: '[PRE47]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Using `ST_PixelAsPolygons`, you can pass the raster column, the column, and
    the row of a cell and get back polygon geometry for that cell. By wrapping the
    query in `ST_AsText`, you get back the WKT representation of the polygon instead
    of the binary.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_PixelAsPolygons`，您可以传递栅格列、单元格的列和行，并获取该单元格的多边形几何形状。通过将查询包裹在`ST_AsText`中，您将得到多边形的WKT表示而不是二进制表示。
- en: 'The following is the result:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为结果：
- en: '[PRE48]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The previous output returned the rid (raster ID) of the pixel. Since you did
    not tile the raster when loading it into PostgreSQL, all the queries will return
    a rid of `1`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出返回了像素的rid（栅格ID）。由于您在将栅格加载到PostgreSQL时没有进行瓦片化，所有查询都将返回rid为`1`。
- en: The previous query returned a polygon, but you can use functions to return points.
    Using `ST_PixelAsPoints` and `ST_PixelAsCentroids`, you can retrieve a point for
    every pixel in the raster dataset.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的查询返回了一个多边形，但您可以使用函数来返回点。使用`ST_PixelAsPoints`和`ST_PixelAsCentroids`，您可以检索栅格数据集中每个像素的点。
- en: 'Using `ST_PixelAsPoints`, you can retrieve a point geometry representing the
    upper-left corner of each pixel. The query also returns the `x` and `y` of the
    cell and the value. The following code will show you how:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_PixelAsPoints`，您可以检索表示每个像素左上角的一个点几何形状。查询还返回了单元格的`x`和`y`坐标以及值。以下代码将展示如何操作：
- en: '[PRE49]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The previous code has a two-part query. Starting after the `FROM` statement,
    the query selects the pixels as points for band `1`. The first statement performs
    a select on the results and retrieves the point geometry, and the `x`, `y`, and
    value of the cell. `ST_PixelAsPoints`, by default, does not return data for cells
    with no values. You can pass the third parameter as false to return cells with
    no values.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码有两个部分的查询。从`FROM`语句之后开始，查询选择波段`1`的像素作为点。第一个语句在结果上执行选择并检索点几何形状，以及单元格的`x`、`y`和值。默认情况下，`ST_PixelAsPoints`不返回无值的单元格的数据。您可以将第三个参数传递为false以返回无值的单元格。
- en: 'The output of the previous query is an array with a row for each cell. Each
    row contains the `x`,`y`, value, and geometry. The results are shown as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 之前查询的输出是一个数组，每行代表一个单元格。每行包含`x`、`y`、值和几何形状。结果如下所示：
- en: '[PRE50]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Using `ST_PixelAsCentroids`, you can get a point that represents the centroid
    of the pixel or cell. The query is identical to the previous example and is shown
    as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_PixelAsCentroids`，您可以获取代表像素或单元格重心的点。查询与之前的示例相同，如下所示：
- en: '[PRE51]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The previous query is in two parts. It first executes the `ST_PixelAsCentroids`
    function and then selects the `x`,`y`, value, and geometry from that result set.
    The output is shown as follows. Notice that the points are different than in the
    previous example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的查询分为两部分。它首先执行`ST_PixelAsCentroids`函数，然后从结果集中选择`x`、`y`、值和几何形状。输出如下。注意，点与之前的示例不同：
- en: '[PRE52]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The previously mentioned functions returned geometry for all of the pixels in
    the raster dataset. Both of these functions have a corresponding function which
    allows you to specify a single pixel.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的函数返回了栅格数据集中所有像素的几何形状。这两个函数都有一个相应的函数，允许您指定单个像素。
- en: 'Removing the plural from centroids and points will allow you to specify single
    pixels, but will not return the `x`, `y`, and value. The following code shows
    you how to query a single pixel as a centroid:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 从重心和点中移除复数形式将允许您指定单个像素，但不会返回`x`、`y`和值。以下代码展示了如何将单个像素作为重心进行查询：
- en: '[PRE53]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The previous code uses `ST_PixelAsCentroid` and passes the raster, row, and
    column. The result is a single centroid point geometry for the cell which has
    been specified. The output is shown as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码使用了`ST_PixelAsCentroid`并传递了栅格、行和列。结果是为已指定的单元格生成一个单独的重心点几何形状。输出如下：
- en: '[PRE54]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Wrapping the query in `ST_AsText` resulted in the output being returned in WKT.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将查询包裹在`ST_AsText`中，结果输出为WKT格式。
- en: Queries returning values
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回值的查询
- en: The two previous sections returned information about the raster and geometries
    representing the raster data. This section will show you how to query your raster
    dataset for values.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个部分返回了关于栅格和表示栅格数据的几何形状的信息。本节将向您展示如何查询您的栅格数据集的值。
- en: 'To get the value of a specific cell, you use `ST_Value`, which is shown as
    follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取特定单元格的值，您使用`ST_Value`，如下所示：
- en: '[PRE55]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The previous code passes the raster, the column, and row to `ST_Value`. Optionally,
    you can pass false if you want don''t want to return any data values. The result
    of the previous query is shown as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将栅格、列和行传递给`ST_Value`。如果不想返回任何数据值，可以选择传递false。之前查询的结果如下所示：
- en: '[PRE56]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The output is the value at the given cell.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是给定单元格的值。
- en: 'If you want to search for all pixels with a given value, you can use `ST_PixelOfValue`,
    as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要搜索具有给定值的所有像素，可以使用`ST_PixelOfValue`，如下所示：
- en: '[PRE57]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The previous code passes the band and the value to search for. The result of
    this query is an array of all (*x*,*y*) coordinates, where the value is `50`.
    The output is shown as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将波段和要搜索的值传递给查询。此查询的结果是一个数组，包含所有(*x*，*y*)坐标，其中值为`50`。输出如下：
- en: '[PRE58]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: For each of the coordinates shown earlier, the value is `50`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于之前显示的每个坐标，其值是`50`。
- en: 'To summarize the occurrences of every value in the raster, you can query using
    `ST_ValueCount`, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要总结栅格中每个值的出现次数，可以使用`ST_ValueCount`进行查询，如下所示：
- en: '[PRE59]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The previous code passes the raster column to `ST_ValueCount`. You can specify
    a raster band by passing the band as an integer as the second parameter—`ST_ValueCount(raster,2)`
    would be band `2`. Otherwise, the default is band `1`. The output is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将栅格列传递给`ST_ValueCount`。您可以通过传递整数作为第二个参数来指定栅格波段——`ST_ValueCount(raster,2)`将是波段`2`。否则，默认是波段`1`。输出如下：
- en: '[PRE60]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The previous output contains the value and the count in the format of (value,
    count).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出包含值和计数的格式为（值，计数）。
- en: 'You can also query for the number of times a single value occurs in the data.
    The following code shows you how:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以查询数据中单个值出现的次数。以下代码展示了如何进行查询：
- en: '[PRE61]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Using `ST_ValueCount` and passing a search value (`50`), you will receive the
    number of times `50` occurs as a value in the raster, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_ValueCount`并传递搜索值（`50`），你将收到`50`在栅格中作为值的出现次数，如下所示：
- en: '[PRE62]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The previous output shows that `50` occurs `5` times in the raster dataset.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出显示在栅格数据集中`50`出现了`5`次。
- en: 'To return all the values in the raster data, you can use `ST_DumpValues`, as
    follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回栅格数据中的所有值，你可以使用`ST_DumpValues`，如下所示：
- en: '[PRE63]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The previous code passes the raster column and the band. The results are all
    the values in the raster as an array. The output is shown as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码传递了栅格列和波段。结果是栅格中的所有值作为一个数组。输出如下所示：
- en: '[PRE64]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Using the previous output, you can query individual cells using standard Python
    indexing notation.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的输出，你可以使用标准的Python索引符号查询单个单元格。
- en: The previous queries returned values from a specified cell or by using a specified
    value. The two queries that are to be followed will return values based on a point
    geometry.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的查询返回了指定单元格或使用指定值返回的值。接下来的两个查询将基于点几何形状返回值。
- en: 'Using `ST_NearestValue`, you can pass a point and get the closest pixel value
    to that point. If the raster data contained elevation values, you would be querying
    for the known elevation which is closest to the point. The following code shows
    you how:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ST_NearestValue`，你可以传递一个点并获取离该点最近的像素值。如果栅格数据包含高程值，你将查询离点最近已知的已知高程。以下代码展示了如何进行查询：
- en: '[PRE65]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The previous code passes the raster column and a point to `ST_NearestValue`.
    Starting from the inside out, the point parameter used `ST_MakePoint` to make
    a point from coordinates. The function is wrapped in `ST_SetSRID`. `ST_SetSRID`
    takes two parameters—a point and a spatial reference. In this case, the point
    is `ST_MakePoint`, and the spatial reference is ESPG `4326`. The result of the
    previous query is shown as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将栅格列和一个点传递给`ST_NearestValue`。从内部开始，点参数使用了`ST_MakePoint`从坐标创建一个点。该函数被`ST_SetSRID`包裹。`ST_SetSRID`接受两个参数——一个点和空间参考。在这种情况下，点是`ST_MakePoint`，空间参考是ESPG
    `4326`。之前查询的结果如下所示：
- en: '[PRE66]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The value of `51` is the closest value to the point. The coordinates in the
    query are the centroid of the cell (4,3) from the earlier `ST_PixelAsCentroids`
    example. In that example, the value of that point was `51`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`51`的值是离点最近的值。查询中的坐标是之前`ST_PixelAsCentroids`示例中的单元格（4,3）的重心。在那个示例中，该点的值是`51`。'
- en: 'To retrieve more than one value near a given point, you can use `ST_Neighborhood`,
    as shown in the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索给定点附近的多个值，你可以使用`ST_Neighborhood`，如下面的代码所示：
- en: '[PRE67]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The `ST_Neighborhood` function takes the raster column, a point, and an `x`,
    `y` distance value. In the previous code, you used `ST_MakePoint` and `ST_SetSRID`
    to create the point. You then passed the point and the distances of `1` and `1`
    for the *x* and *y* distance parameter. This will return a 3x3 neighborhood, as
    shown in the following output:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_Neighborhood`函数接受一个栅格列、一个点和`x`、`y`距离值。在之前的代码中，你使用了`ST_MakePoint`和`ST_SetSRID`来创建点。然后，你传递了这个点和`x`、`y`距离参数的`1`和`1`距离值。这将返回一个3x3的邻域，如下面的输出所示：'
- en: '[PRE68]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The previous output shows that the values of the surrounding neighborhood are
    all `255`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出显示周围邻域的值都是`255`。
- en: 'Finally, you can select vector geometry as a raster. When querying a vector
    table which contains Albuquerque Police Area Commands as polygons, the following
    code will extract a single area command as a raster:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以将矢量几何形状作为栅格选择。当查询包含阿尔伯克基警察区域命令的多边形矢量表时，以下代码将提取单个区域命令作为栅格：
- en: '[PRE69]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The previous code is a select statement that selects a geometry from the `areacommand` table,
    where the name is `FOOTHILLS`. The geometry portion of the query is where you
    perform the raster conversion.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码是一个选择语句，用于从`areacommand`表中选取名为`FOOTHILLS`的几何形状。查询中的几何部分是执行栅格转换的地方。
- en: '`ST_AsRaster` takes a geometry, the scale of `x`, the scale of `y`, and the
    type of pixels. The `ST_AsRaster` function is wrapped in the `ST_AsPNG` function.
    The result is a PNG file in memory view. Using standard Python file operations,
    the code opens a file, `Foothills.png`, in write binary mode, and then writes
    the memory view `c[0][0]` to disk. It then closes the file.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_AsRaster`函数接受一个几何形状、`x`的比例、`y`的比例以及像素类型。`ST_AsRaster`函数被`ST_AsPNG`函数封装。结果是内存中的PNG文件。使用标准的Python文件操作，代码以写二进制模式打开一个文件，`Foothills.png`，然后将内存视图`c[0][0]`写入磁盘。然后关闭文件。'
- en: 'The output is shown in the following image:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果展示在以下图像中：
- en: '![](img/600bda3e-5c15-45c0-9034-5f66b81197ea.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/600bda3e-5c15-45c0-9034-5f66b81197ea.jpg)'
- en: The image showing the foothills as a raster
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 展示山麓地带的栅格图像
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use GDAL and PostgreSQL to work with raster
    data.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用GDAL和PostgreSQL处理栅格数据。
- en: First, you learned how to use the GDAL to load and query rasters. You also learned
    how to use GDAL to modify and save rasters. Then, you learned how to create your
    own raster data. You learned how to load raster data into PostgreSQL using the
    `raster2pgsql` tool. Once in PostgreSQL, you learned how to query for metadata,
    attributes, values, and geometry. You learned several common functions within
    PostgreSQL for raster data analysis.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你学习了如何使用GDAL加载和查询栅格。你还学习了如何使用GDAL修改和保存栅格。然后，你学习了如何创建自己的栅格数据。你学习了如何使用`raster2pgsql`工具将栅格数据加载到PostgreSQL中。一旦在PostgreSQL中，你学习了如何查询元数据、属性、值和几何形状。你学习了PostgreSQL中用于栅格数据分析的几个常用函数。
- en: While this chapter only scratched the surface of working with raster data, you
    should have enough knowledge now to know how to learn new techniques and methods
    for working with rasters. In the next chapter, you will learn how to work with
    vector data in PostgreSQL.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章只是对处理栅格数据进行了初步探讨，但你现在应该有足够的知识来了解如何学习新的技术和方法来处理栅格数据。在下一章中，你将学习如何在PostgreSQL中处理矢量数据。
