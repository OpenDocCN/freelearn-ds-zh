["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\ndataset_url = 'http://bit.ly/gdp-life-expect-data'\ndf = pd.read_csv(dataset_url)\ndf.head()\n# If you’re not using VS Code run this instead\n# print(df.head())\n```", "```py\ndef distPlot(data, var, title, xlab, ylab, bins=100):\n    hplot = sb.distplot(data[var], kde=False, bins=bins)\n    plt.title(title, fontsize=18)\n    plt.xlabel(xlab, fontsize=16)\n    plt.ylabel(ylab, fontsize=16)\n\n    return hplot\ndef scatterPlot(data, varx, vary, title, xlab, ylab):\n    hplot = sb.scatterplot(varx, vary, data=data)\n    plt.title(title, fontsize=18)\n    plt.xlabel(xlab, fontsize=16)\n    plt.ylabel(ylab, fontsize=16)\n\n    return hplot\ndistPlot(data=df, var='lifeExp', title='Life Expectancy', xlab='Life Expectancy years', ylab='Frequency')\n# In case you're not using a Jupyter notebook run also the following:\n# plt.show()\ndistPlot(data=df, var='gdpPercap', title='GDP / capita', xlab='GDP / capita ($)', ylab='Frequency')\n# In case you're not using a Jupyter notebook run also the following:\n# plt.show()\n```", "```py\nscatterPlot(data=df, varx='lifeExp', vary='gdpPercap', title='Life Expectancy vs GDP/Capita', xlab='lifeExp', ylab='gdpPercap')\n# In case you're not using a Jupyter notebook run also the following:\n# plt.show()\n```", "```py\ndf[['lifeExp','gdpPercap']].corr(method='pearson')\ndf[['lifeExp','gdpPercap']].corr(method='spearman')\ndf[['lifeExp','gdpPercap']].corr(method='kendall')\n```", "```py\nlibrary(readr)\nlibrary(dplyr)\nlibrary(corrr)\nlibrary(ggplot2)\ndataset_url <- 'http://bit.ly/gdp-life-expect-data'\ntbl <- read_csv(dataset_url)\ntbl\n```", "```py\ndistPlot <- function(data, var, title, xlab, ylab, bins=100) {\n    p <- ggplot( data=data, aes_string(x=var) ) + \n        geom_histogram( bins=bins, fill=\"royalblue3\", color=\"steelblue1\", alpha=0.9) +\n        ggtitle(title) + xlab(xlab) + ylab(ylab) +\n        theme( plot.title = element_text(size=20), axis.title = element_text(size=16) )\n    return(p)\n}\nscatterPlot <- function(data, varx, vary, title, xlab, ylab) {\n    p <- ggplot( data=data, aes_string(x=varx, y=vary)) + \n        geom_point(\n            color='steelblue1', fill='royalblue3',\n            shape=21, alpha=0.8, size=3\n        ) +\n        ggtitle(title) + xlab(xlab) + ylab(ylab) +\n        theme( plot.title = element_text(size=20), axis.title = element_text(size=16) )\n    return(p)\n}\ndistPlot(data = tbl, var = 'lifeExp', title = 'Life Expectancy',          xlab = 'Life Expectancy (years)', ylab = 'Frequency')\ndistPlot(data = tbl, var = 'gdpPercap', title = 'GDP / capita', xlab = 'GDP / capita ($)', ylab = 'Frequency')\n```", "```py\nscatterPlot(data = tbl, varx = 'lifeExp', vary = 'gdpPercap', title = 'Life Expectancy vs GDP/Capita', xlab = 'lifeExp', ylab = 'gdpPercap')\n```", "```py\ntbl %>% select( lifeExp, gdpPercap ) %>% correlate( method = 'pearson' )\ntbl %>% select( lifeExp, gdpPercap ) %>% correlate( method = 'spearman' )\ntbl %>% select( lifeExp, gdpPercap ) %>% correlate( method = 'kendall' )\n```", "```py\n    import pandas as pd\n    corr_df = dataset.corr(method='pearson')\n    # You need to convert row names into a column\n    # in order to make it visible in Power BI\n    corr_df.index.name = 'rowname'\n    corr_df.reset_index(inplace=True)\n    ```", "```py\n    library(dplyr)\n    library(corrr)\n    # You need to select only numeric columns\n    # in order to make correlate() work\n    corr_tbl <- tbl %>% \n        select( where(is.numeric) ) %>% \n        correlate( method = 'spearman' )\n    ```", "```py\ndataset_url = 'http://bit.ly/titanic-data-csv'\ndf = pd.read_csv(dataset_url)\ncateg_cols = ['Survived', 'Pclass']\ndf[categ_cols] = df[categ_cols].astype(str)\n```", "```py\ncramers_v(df['Survived'], df['Pclass'])\n```", "```py\ntheils_u(df['Survived'], df['Pclass'])\n```", "```py\ntheils_u(df['Pclass'], df['Survived'])\n```", "```py\ncorrelation_ratio(categories=df['Pclass'], measurements=df['Age'])\n```", "```py\nass = associations(df, nom_nom_assoc = 'theil',\n                   num_num_assoc = 'pearson',\n                   figsize=(10,10), clustering=True)\n```", "```py\ndataset_url <- 'http://bit.ly/titanic-data-csv'\ntbl <- read_csv(dataset_url)\ntbl <- tbl %>% \n    mutate( across(c('Survived', 'Pclass'), as.factor) )\n```", "```py\nrstatix::cramer_v(x=tbl$Survived, y=tbl$Pclass)\n```", "```py\nDescTools::UncertCoef(tbl$Survived, tbl$Pclass, direction = 'row')\n```", "```py\ncorrelation_ratio( categories = tbl$Pclass, measurements = tbl$Age, numeric_replace_value = 0)\n```", "```py\n# Create two data frames having the only column containing the tibble column names as values\nrow <- data.frame(row=names(tbl))\ncol <- data.frame(col=names(tbl))\n# Create the cross join data frame from the previous two ones\nass <- tidyr::crossing(row, col)\n# Add the corr column containing correlation values\ncorr_tbl <- ass %>% \n    mutate( corr = map2_dbl(row, col, ~ calc_corr(data = tbl, row_name = .x, col_name = .y, theil_uncert = T)) )\ncorr_tbl\n```", "```py\ncorr_tbl %>% \n    ggplot( aes(x=row, y=col, fill=corr) ) +\n    geom_tile() +\n    geom_text(aes(row, col, label = round(corr, 2)), color = \"white\", size = 4)\n```"]