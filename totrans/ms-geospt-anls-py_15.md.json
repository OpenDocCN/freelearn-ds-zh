["```py\nC:\\Python3Geospatial>pip install mapbox\n```", "```py\n<html><head>\n<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'></script>\n<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css' rel='stylesheet' />\n</head><body>\n<div id='map' style='width: 400px; height: 300px;'></div>\n<script>\nmapboxgl.accessToken = 'pk.eyJ1IjoibG9raXByZXNpZGVud0.8S8l9kH4Ws_ES_ZCjw2i8A';\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v9'\n});\n</script></body></html>\n```", "```py\nfrom mapbox import Datasets\nimport json\ndatasets = Datasets(access_token='{secrettoken}')\ncreate_resp = datasets.create(name=\"Bay Area Zips\", \n              description = \"ZTCA zones for the Bay Area\")\nlisting_resp = datasets.list()\ndataset_id = [ds['id'] for ds in listing_resp.json()][0]\ndata = json.load(open(r'ztca_bayarea.geojson'))\nfor count,feature in enumerate(data['features'][:1]):\n    resp = datasets.update_feature(dataset_id, count, feature)\n```", "```py\ntoken = 'sk.eyJ1IjoibG9oxZGdqIn0.Y-qlJfzFzr3MGkOPPbtZ5g' #example secret token\nfrom mapbox import Uploader\nimport uuid\nset_id = uuid.uuid4().hex\nservice = Uploader(access_token=token)\nwith open('ztca_bayarea.geojson', 'rb') as src:\n    response = service.upload(src, set_id)\nprint(response)\n```", "```py\nC:\\Python3Geospatial>virtualenv mapboxenv\nUsing base prefix 'c:\\\\users\\\\admin\\\\appdata\\\\local\\\\programs\\\\python\\\\python36'\nNew python executable in C:\\Python3Geospatial\\mapboxenv\\python.exe\nInstalling setuptools, pip, wheel...done.\n\nC:\\Python3Geospatial>mapboxenv\\Scripts\\activate\n```", "```py\n(mapboxenv) C:\\Python3Geospatial>pip install mapboxgl\n```", "```py\n(mapboxenv) C:\\Python3Geospatial>pip install jupyter\n```", "```py\n(mapboxenv) C:\\Python3Geospatial>pip install geopandas\n```", "```py\n(mapboxenv) C:\\Python3Geospatial>jupyter notebook\n```", "```py\nimport geopandas as gpd\nimport pandas as pd\nimport os\nfrom mapboxgl.utils import *\nfrom mapboxgl.viz import *\ntoken = '{user API Key}'\n```", "```py\ntoken = os.getenv(\"MAPBOX_ACCESS_TOKEN\")\n```", "```py\ntracts = gpd.read_file(r'tracts_bayarea.geojson')\ntracts['centroids'] = tracts.centroid\ntract_points = tracts\ntract_points = tract_points.set_geometry('centroids')\ntract_points.plot()\n```", "```py\ntract_points['Total Population'] = tract_points['ACS_15_5YR_S0101_with_ann_Total; Estimate; Total population']\ntract_points['Male Population'] = tract_points['ACS_15_5YR_S0101_with_ann_Male; Estimate; Total population']\ntract_points['Female Population'] = tract_points['ACS_15_5YR_S0101_with_ann_Female; Estimate; Total population']\ntract_points = tract_points[['Total Population',\n                'Male Population','Female Population',\n                'centroids' ]]\n```", "```py\ntract_points.to_file('tract_points.geojson',driver=\"GeoJSON\")\n```", "```py\nviz = CircleViz('tract_points.geojson', access_token=token, \n                radius = 2, center = (-122, 37.75), zoom = 8)\nviz.show()\n```", "```py\ncolor_stops = [\n    [0.0, 'rgb(255,255,204)'],    [500.0, 'rgb(255,237,160)'],\n    [1000.0, 'rgb(252,78,42)'],    [2500.0, 'rgb(227,26,28)'],\n    [5000.0, 'rgb(189,0,38)'],\n    [max(tract_points['Total Population']),'rgb(128,0,38)']\n]\nviz.color_property = 'Total Population'\nviz.color_function_type = 'interpolate'\nviz.color_stops = color_stops\nviz.radius = 1\nviz.center = (-122, 37.75)\nviz.zoom = 8\n\nviz.show() \n```", "```py\ntract_points['Percent Male'] = tract_points['Male Population']/tract_points['Total Population']\ntract_points['Percent Female'] = tract_points['Female Population']/tract_points['Total Population']\ntract_points.to_file(\"tract_points2.geojson\", driver=\"GeoJSON\")\n```", "```py\ncolor_stops = [\n    [0.0, 'rgb(107,174,214)'],    [3000.0, 'rgb(116,196,118)'],\n    [8000.0, 'rgb(254,153,41)'],\n    [max(tract_points['Total Population']), 'rgb(222,45,38)'], \n]\n\nminmax = [min(tract_points['Percent Male']),\n          max(tract_points['Percent Male'])]\ndiff = minmax[1] - minmax[0]\nradius_stops = [\n    [round(minmax[0],2), 4.0],\n    [round(minmax[0]+(diff/6.0),2), 7.0],\n    [round(minmax[1]-(diff/2.0),2), 10.0],\n    [minmax[1], 15.0],]\n```", "```py\nvizGrad = GraduatedCircleViz('tract_points2.geojson', access_token=token)\n\nvizGrad.color_function_type = 'interpolate'\nvizGrad.color_stops = color_stops\nvizGrad.color_property = 'Total Population'\nvizGrad.color_default = 'grey'\nvizGrad.opacity = 0.75\n\nvizGrad.radius_property = 'Percent Male'\nvizGrad.radius_stops = radius_stops\nvizGrad.radius_function_type = 'interpolate'\nvizGrad.radius_default = 1\n\nvizGrad.center = (-122, 37.75)\nvizGrad.zoom = 9\nvizGrad.show()\n```", "```py\nmeasure_color = 'Percent Male'\ncolor_breaks = [round(tract_points[measure_color].quantile(q=x*0.1),3) for x in range(1, 11,3)]\ncolor_stops = create_color_stops(color_breaks, colors='YlOrRd')\nmeasure_radius = 'Total Population'\nradius_breaks = [round(tract_points[measure_radius].quantile(q=x*0.1),1) for x in range(2, 12,2)]\nradius_stops = create_radius_stops(radius_breaks, 5.0, 20)\nvizGrad = GraduatedCircleViz('tract_points2.geojson', \n                          access_token=token,\n                          color_property = measure_color,\n                          color_stops = color_stops,\n                          radius_property = measure_radius,\n                          radius_stops = radius_stops,\n                          stroke_color = 'black',\n                          stroke_width = 0.5,\n                          center = (-122, 37.75),\n                          zoom = 9,\n                          opacity=0.75)\nvizGrad.style='mapbox://styles/mapbox/dark-v9'\nvizGrad.show()\n```", "```py\ntract_poly = tracts\ntract_poly['Male Population'] = tract_poly['ACS_15_5YR_S0101_with_ann_Male; Estimate; Total population']\ntract_poly = tract_poly[['Male Population','geometry' ]]\ntract_poly.to_file('tracts_bayarea2.geojson', driver=\"GeoJSON\")\n```", "```py\nvizClor = ChoroplethViz('tracts_bayarea2.geojson', \n    access_token=API_TOKEN,\n    color_property='Male Population',\n    color_stops=create_color_stops([0, 2000, 3000,5000,7000, 15000], \n    colors='YlOrRd'),\n    color_function_type='interpolate',\n    line_stroke='-',\n    line_color='rgb(128,0,38)',\n    line_width=1,\n    opacity=0.6,\n    center=(-122, 37.75),\n    zoom=9)\nvizClor.style='mapbox://styles/lokipresident/cjftywpln22sp9fcpqa8rl'\nvizClor.show()\n```", "```py\nwith open('mpop.html', 'w') as f:\n    f.write(vizClor.create_html())\n```", "```py\nC:\\Python3Geospatial>python -m http.server\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```", "```py\nmeasure = 'Female Population'\nheatmap_color_stops = create_color_stops([0.01, 0.25, 0.5, 0.75, 1], colors='PuRd')\nheatmap_radius_stops = [[0, 3], [14, 100]] \ncolor_breaks = [round(tract_poly[measure].quantile(q=x*0.1), 2) for x in range(2,10)]\ncolor_stops = create_color_stops(color_breaks, colors='Spectral')\nheatmap_weight_stops = create_weight_stops(color_breaks) \nvizheat = HeatmapViz('tracts_points2.geojson', \n                  access_token=token,\n                  weight_property = \"Female Population\",\n                  weight_stops = heatmap_weight_stops,\n                  color_stops = heatmap_color_stops,\n                  radius_stops = heatmap_radius_stops,\n                  opacity = 0.8,\n                  center=(-122, 37.78),\n                  zoom=7,\n                  below_layer='waterway-label'\n                 )\nvizheat.show()\n```", "```py\nfrom mapbox import Datasets\nimport json\ndatasets = Datasets(access_token={secrettoken})\ncreate_resp = datasets.create(name=\"Bay Area Zips\", \n              description = \"ZTCA zones for the Bay Area\")\n```", "```py\nlisting_resp = datasets.list()\ndataset_id = [ds['id'] for ds in listing_resp.json()][0]\ndata = json.load(open(r'ztca_bayarea.geojson'))\nfor count,feature in enumerate(data['features']):\n    resp = datasets.update_feature(dataset_id, count, feature)\n```", "```py\n datasets.read_dataset(dataset_id).json()\n```", "```py\nresp = datasets.delete_feature(dataset_id, 0)\n```"]