- en: Chapter 6. Charting Your Progress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying data geographically provides users with locational awareness, but
    some want to see more than just dots on a map and some numbers. They want to see
    how the data in each location compares, both across the map, and within a location.
    Other methods of displaying data, such as charts and graphs, can provide additional
    information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Charts and graphs are big business. Companies spend millions of dollars creating
    executive dashboards, which are a mix of charts and graphs connected to company
    data and metrics. They work because humans aren't as good at processing large,
    abstract numbers as computers, but they do better at processing data visually.
    Good charts and graphs provide comparable data at a glance, in a way anyone can
    understand.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we shall learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How to create charts and graphs using tools provided by the ArcGIS JavaScript
    API and the Dojo framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement the same charts and graphs using `D3.js`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add an external library such as `D3.js` as an AMD module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing graphs into our maps
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have learned before, the **ArcGIS JavaScript API** contains more than
    tools to create maps and text. Built on top of the Dojo framework, the ArcGIS
    API comes with many user controls and widgets to help you present data. We can
    create dynamic tables, charts, graphs, and other data visualizations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: But you are not limited to the charting and graph tools provided by API. Using
    Dojo's AMD style, you can incorporate other libraries outside the framework into
    your widget's build, and load them as they are needed. If you work with team members
    who are more familiar with a library like `D3.js`, you can load the library asynchronously
    into your widget and let the other person develop the graphics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore both internal and external graphics libraries
    to add graphs to our data. We'll use the `dojox/charting` ([http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html](http://dojotoolkit.org/reference-guide/1.10/dojox/charting.html))
    modules packaged with the ArcGIS JavaScript API, We'll also implement the graphs
    with `D3.js` ([http://d3js.org](http://d3js.org)), a popular data visualization
    library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Our story continues
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our clients from the Y2K society called with another request. They don't like
    the tables we've added to our census popups. All the big numbers overwhelm some
    of the users. They would rather see the data represented in graphs, so that the
    user can see the relationships within the data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The Y2K society specifically requested pie charts for ethnic and gender data.
    We can use any color for the ethnic data, but for gender, they made specific color
    requests. They want to use a horizontal bar chart for the age data because they've
    seen population data shown that way and they liked the look. They would like some
    of the other data graphed and charted as well, but they are willing to leave how
    that's done to our discretion.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: For this round, we're going to try two different approaches and see which one
    the client prefers. We'll create charts using the two libraries with the same
    data, add them to the census data popups, and see which one the client prefers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Using dojox charting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We should first look inside the ArcGIS API for JavaScript to see what it has
    to offer. We can access a host of charting resources with `dojox/charting`. The
    modules allow you to draw line graphs, pie charts, bar charts, and a whole host
    of other graphs and charts in a browser. It contains numerous canned themes to
    show your data, and it can be extended with your custom themes as well. The charting
    libraries can render in **Scalable Vector Graphics** (**SVG**), **Vector Markup
    Language** (**VML**), Silverlight, and Canvas, making them both progressive and
    backwards-compatible for older browsers like IE7.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Like most Dojo components, `dojox/charting` can render charts either declaratively
    within your HTML, or programmatically through JavaScript. Declarative charting
    takes advantage of the `data-dojo` attributes. In the exercises that follow, we'll
    explore the programmatic examples, since they are more dynamic and easier to troubleshoot
    when things go wrong.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chart in JavaScript
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no one module for `dojox/charting` that will take care of all your
    graphing needs. These four major classes of modules within `dojox/charting` can
    be loaded to create a unique chart or graph, and add new looks and functionality:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The chart object
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart style
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart theme
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart actions and effects
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a sample loading of each of the four module types, in order:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The chart object
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The chart object, loaded with the `dojox/charting/Chart` module, is the main
    object you''ll use to create and modify your chart. Almost all of your your customizations
    will be run through this object. The chart object is created with a reference
    to an HTML element on the page, either by a node or by a string matching the id
    of a node. In the following code, you can see an example that shows the creation
    of a simple chart:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, a line graph is produced with values in a series that
    increase from `1` to `21`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The construction of the chart object can also accept an options object. In these
    options, you can add the map title, and control elements, such as the title text,
    position, font, color, and the gap between the title and the graph.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dojox/charting` library also includes a 3D charting library, called `dojox/charting/Chart3D`.
    The object can render three dimensional charts and graphs, which can be rotated
    and panned to get a good perspective on your data. In the following code, you
    can see an example of a 3D plotted bar chart:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, a 3D bar graph has been produced with three sets of data
    colored red, green, and blue. These values are then viewed through a camera that
    is rotated somewhat to add perspective to the images.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The chart style
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The chart style describes what kind of chart we''re creating. It defines whether
    we''re loading the data as a line chart or a bar chart, a pie chart or a scatter
    plot. For two dimensional charts, you''ll find these styles in the `dojox/charting/plot2d`
    folder. Chart styles can be grouped into five main categories, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**Lines**: These are the typical line charts that may or may not show the individual
    data points.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stacked Lines**: Similar to line charts, but the heights are stacked on top
    of each other. These allow the user to compare the combined effect of plotted
    data over time, as well as changes in ratios.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bars**: Compare values by the width of rows on a graph.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns**: Compare quantities by their related column heights.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Miscellaneous**: When other charts cannot be grouped together in a category
    like the previous ones, they fall into this category. This group includes pie
    charts, scatter plots, and bubble plots.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using the 3D charts, the styles for these charts can be found in
    the `dojox/charting/plot3d` folder. To take full advantage of the 3D styles, it
    is best to load the `dojox/gfx3d/matrix` module for 3D graphic effects. The `matrix`
    module allows you to rotate the 3D graph in order to get a good perspective of
    the 3D charts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The chart theme
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chart themes describe the colors, shading, and text formatting of text elements
    within your charts and graphs. The Dojo framework comes with a large number of
    predefined themes that you can choose from, in `dojox/charting/themes`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see what the different themes look like by going to [http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html](http://archive.dojotoolkit.org/nightly/checkout/dojox/charting/tests/test_themes.html).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example is code which loads a chart with a `MiamiNice` theme.
    In this example, we have loaded a line chart with an `x` and `y` axis. We set
    the theme to `MiamiNice` using the `setTheme()` method. Then, we added the series
    of numbers to plot and render the chart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you don''t find a theme that works for you, or if you have specific colors
    and styling that you need to adhere to in your application design, you can use
    the `SimpleTheme` object to help define your custom theme. `SimpleTheme` is based
    on the `GreySkies` theme, but can be extended with other colors and any formatting
    you choose. You do not need to define every attribute of your theme, since `SimpleTheme`
    applies whatever defaults you haven''t overridden with your custom style. You
    can see a sample of the code that implements `SimpleTheme` here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Themes typically use no more than five colors in their palette. If you need
    to add more colors for a set of data, `push()` a color hex string into the theme's
    `.color` array, but do it prior to setting the theme of the chart.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Chart actions and effects
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating appealing charts and graphs might be fun for you, but users in the
    modern web era expect to interact with the data. They expect chart elements to
    glow, grow, and change color when they hover over them. They expect things to
    happen when they click on a pie chart.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dojox/charting/action2d` contains chart actions and effects that make
    charts more educational and interactive. You don''t have to overdo the actions
    and make your graph do everything. You can simply apply the events you need to
    get the effect across to the users. The following is a list of the basic actions
    and effects, along with descriptions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`Highlight`: This adds a highlight to the chart or graph element you select.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Magnify`: This lets you magnify a portion of the chart or graph for easier
    viewing.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MouseIndicator`: You can drag your mouse over features on the graph to show
    more data.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MouseZoomAndPan`: This lets you zoom and pan over your graph using the mouse.
    The scroll wheel zooms in and out, while click and drag lets you pan around the
    graph.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MoveSlice`: When using a pie chart, clicking on a slice can move it out from
    the rest of the chart.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shake`: This creates a shaking action on an element on the chart.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tooltip`: Hovering the mouse cursor over a chart element shows more information.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TouchIndicator`: This provides touch actions that display data on charts.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TouchZoomAndPan`: This gives you zoom and pan ability using touch gestures.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unlike chart styles and themes, where you attach the chart component to the
    chart object, chart actions are called separately. The chart action constructor
    loads the new chart as the first argument, and optional parameters for the second
    argument. Note that the actions are created before the chart is rendered. You
    can see an example in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, a chart was created, and a tooltip was added showing
    the population as you hovered over a graph feature.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Using Dojox Charts in popups
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining the dojox/charting modules with the ArcGIS API for JavaScript provides
    many ways to display data. One way to deliver feature data through charts is through
    the map's `infoWindow`. The infoWindow uses an HTML template for its content,
    and that can provide the hooks we need to attach our graphs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: One issue when adding graphs to the infoWindow is determining when to draw the
    graph. Thankfully, there's an event for that. The map's `infoWindow` fires a `selection-changed`
    event whenever the selected feature graphic is changed, either by clicking on
    another graphic, or by clicking on the next and previous buttons. We can assign
    an event listener to that event, look at the selected graphic and, if it has the
    data we need, we can draw the graphs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Using Dojo Charts in our application
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our census application from previous chapters could use some visual appeal when
    it comes to presenting data. We'll make our first attempt at adding charts and
    graphs using the `dojox/charting` library. We'll apply the graphs to the map popup
    whenever the user clicks on a census block group, county, or state. The census
    blocks don't have enough information for us to graph.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Loading the modules
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since our graphs are currently limited to our census application, we need to
    update the modules in our custom `y2k/Census` module definition:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by adding `dojo/on` to handle the map popup events.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll add the default chart object along with a pie chart and a bar chart module.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll add the `PrimaryColors` theme and `SimpleTheme` to create our own custom
    color template.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we'll add a highlight and a tooltip action to let the user read the
    results when they hover over parts of the graphs.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should look a bit like the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Preparing the popup
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As part of our plan, we want the charts and graphs to render in the map''s
    `infowindow` when the features are clicked. We''re only interested in showing
    the charts and graphs for the currently selected feature, so we''ll add an event
    handler to run every time the `infoWindow` object''s `selection-change` event
    fires. We''ll call it `_onInfoWindowSelect()`. After we write a stub function
    for that in our `Census.js` module, we''ll add the event handler in the `_onMapLoad()`
    method. We then know the map and its popup are available. It should look something
    like the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `infoWindow` object''s `selection-change` event fires when features are
    both added and removed from the selection. When we examine the `infoWindow` object''s
    selected feature, we must test to find out if it contains a feature. If one is
    present, we can process that feature''s attributes and add the related graphics
    to the popup. The `infoWindow` function should look like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Updating the HTML template
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to add graphs to our popups, we need to update the HTML templates
    to include element IDs. The JavaScript code then looks for a place to render the
    graph and we can tell it to render it in the element where the `id` is added.
    Open `CensusBlockGroup.html` to look at the popup template. Find the *Ethnic groups*
    section and delete the entire table underneath. You can comment it out for testing
    purposes, but we don''t want everybody to download all that wasted content when
    we put this application into production. Replace the table with a `div` that has
    an `id` equal to `ethnicgraph`. It should look like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Repeat the same under the `Males/Females` and the `Ages` sections, replacing
    those tables with `div` elements identified as `gendergraph` and `agegraph` respectively.
    If you choose to show other graphs, follow the same guidelines. Repeat with the
    `CountyCensus.html` and the `StateCensus.html` templates as well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Processing the data
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look back through the examples from other `dojox/charting` operations,
    you'll notice how data is added to the chart in an array. However, the data we
    get from the map service isn't in that format. We need to process the attribute
    data into a format that the `dojox/charting` modules can use.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'When passing data objects into `dojox/charting` charts and graphs, the graphs
    expect data to be plottable with `x` and `y` properties. Since we''re not comparing
    value changes over time or some other independent variable, we will add the numeric
    populations to our dependent variable `y`. The value of the tooltip text can be
    assigned to the JSON tooltip data property. You can see the resulting function
    in the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `+` symbol in front of the attribute in the population objects is a shortcut
    to convert a value into a number, if it isn't one already. You get the same effect
    using the `parseInt()` or `parseFloat()` methods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're able to transform our data into a format useable for our graph
    widget, we can call our `ethnicData()`, `genderData()`, and `ageData()` methods.
    We'll extract the data we need from the feature attributes and put it in an array
    format to be used by the `chart` module.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Parsing the ethnic data
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''re interested in extracting the ethnic makeup of the population in the
    census area. We''re interested in the `WHITE`, `BLACK`, `AMER_ES`, `ASIAN`, `HAWN_PI`,
    `HISPANIC`, `OTHER`, and `MULT_RACE` fields that are present in the state, county,
    and block group feature classes. Since we have a lot of fields that may or may
    not be in the feature class, and we''ll be adding them the same way, we''ll create
    an array of field names and the corresponding labels we want to add. See the following
    code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have the fields and labels, let''s add the information we need
    to the data array. The `dojox/charting` library expects graphical data in either
    a numerical list or in a JSON object with a specific format. Since we want to
    add labels to our data in a pie chart, we''ll create the complex objects:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parsing the gender data
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll calculate the gender data in a similar way. We are only interested in
    the `MALES` and `FEMALES` fields in the feature attributes. We''re going to add
    them to the list of JSON objects with the same format as shown in the preceding
    code. It should look like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parsing the age data
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll perform the same style of data manipulation for our `ageData()` method
    as we did with the `ethnicData()` method. We''ll collect the census data if it''s
    available for ages less than `5`, `5-17`, `18-21`, `22-29`, `30-39`, `40-49`,
    `50-64`, and `65` and up. We''ll then add the appropriate tooltip labels and return
    the resulting formatted data array. It should look as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Showing the results
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the results in a format that we can use for the charts, we
    can load them into our charts. Our ethnic and gender graphs are both pie graphs,
    while the age graph is a horizontal bar graph. Let's look at what it takes to
    construct each. Any extra graphs you want to create with the rest of the data
    can be done in your own time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Ethnic graph
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want a pie chart that fits within the popup for the ethnic graph. A radius
    of 90 pixels should fit nicely within the popup. We''re going to set the theme
    of the graph using `PrimaryColors`, one of the default themes in `dojox/charting`.
    We''ll also add the pie charting ability to the chart, and add the tooltip and
    highlight animations when the user hovers over the data. Finally, we''ll render
    the ethnic pie chart:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the application draws the ethnic graph, it should look like the following
    image:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Ethnic graph](img/6459OT_06_01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Ethnic groups
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Gender graph
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the gender graph, we''re going to set up a similar pie graph to the ethnic
    graph. But, before we do, we''ll load a new theme to work with. We''ll create
    a `genderTheme` constructor from the `SimpleTheme` constructor, and add light
    pink for females, and light blue for males. We''ll then create the chart, add
    the new theme, and add everything else like we did in the ethnic graph. You can
    see this in the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When the application draws the gender graph, it should look something like
    the following image:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![Gender graph](img/6459OT_06_02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Age graph
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll create a bar chart graph for the age graph to show the age demographics.
    Unlike the pie chart, the bar chart doesn''t care about the radius, but prefers
    to know how long the bars can grow (`maxBarSize`), and how far to set them apart
    (gap). We''ll go ahead and use the `PrimaryColors` theme again for this object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When you draw the `ageChart`, it should look something like the following image:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Age graph](img/6459OT_06_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Introducing D3.js
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can branch out beyond the ArcGIS JavaScript API and Dojo if you want to
    create jaw-dropping graphics. One popular JavaScript library you could use to
    create charts, graphs, and other data-driven visualizations is `D3.js`. `D3.js`
    was created by Mike Bostock of the New York Times to use HTML, SVG, CSS, and JavaScript
    to create interactive data-driven graphics. It reads data from HTML and renders
    it in the way you decide.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '`D3.js` development has taken off since it was first released to the public.
    The library is very versatile in that it doesn''t render just charts and graphs.
    It provides the building blocks to create charts, graphs, and other interactive
    graphics that can move and be styled like any HTML element. Even GIS maps in different
    projections can be shown on a webpage using `D3.js` and a file format called GeoJSON.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'For anyone with experience with jQuery, scripts written with `D3.js` behave
    in the same way. You can select HTML elements with the `d3.select()` or `d3.selectAll()`
    methods, which are similar to the jQuery base method. D3 commands can be chained
    one after another, which is also a favorite feature with many jQuery developers.
    In the following example, we''re using D3 to find elements with the class `addflair`
    using the `select()` method. We then add spans to the elements with related text
    content:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding the D3.js library with Dojo's AMD
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s say you want to add `D3.js` to your mapping application. You find the
    link to the `d3` library, and copy and paste it into your application like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You cut and paste an example to test if it's going to work. You crank up your
    browser, and load your page. You wait patiently for everything to load, and it
    breaks. What happened?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that the extra libraries loaded after the ArcGIS JavaScript API
    and interfered with the AMD library references. Let's look at a couple of solutions
    to load external libraries into an AMD-based application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Loading another library outside an AMD module
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are going to work with a JavaScript library outside an AMD module, it's
    best to load that library before you load the ArcGIS JavaScript API. You would
    use this if you're adding a map on top of an existing application previously written
    in another framework.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Loading another library within an AMD module
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The other way to handle D3 and other external libraries in your AMD applications
    is to load them as AMD modules. You can treat them like any other Dojo-based module,
    and load them into memory only when necessary. This works well with libraries
    that you use sporadically and don't need at startup. It also works well with libraries
    that load all the functionality of the library into a single JavaScript object,
    such as `D3.js` or jQuery.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'To load an external library as an AMD module, you must first reference it in
    `dojoConfig` as a package, just like you did with your custom `Dojo` module in
    [Chapter 3](ch03.html "Chapter 3. The Dojo Widget System"), *The Dojo Widget System*.
    Adding your external library to the packages will tell Dojo''s `require()` and
    `define()` functions where to look for the libraries. Remember that, when listing
    the location of the library in the package, you reference the file folder of the
    JavaScript library, not the library directly. For D3, the `dojoConfig` script
    may look something like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the library folder reference has been added to your `dojoConfig` variable,
    you can add it to any `require()` or `define()` statement. Loading the library
    into an AMD `require()` statement would look like the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using D3.js in our application
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our application, we will explore using D3 to add graphs to our application.
    We'll use it to replace parts of the `dojox/charting` code where we add the graphs
    to our map popup. Many of the steps will be similar, but some will be different.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Adding D3.js to the configuration
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since our application relies heavily on the Dojo framework, we will add our
    `D3.js` library with AMD. We''ll add the reference to D3 in our `dojoConfig.packages`
    list. The new `dojoConfig` script should look like the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that our AMD code knows where to look for the `D3` library, we can add
    a reference to it in our census application. The `D3` library will then be available
    to our census widget, but it will not interfere with other applications that may
    have their own `d3` variable. Our `Census.js` code should look like the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Preparing the popup
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`D3.js` should now be accessible in our widget, and we can prepare the popup
    to load the data. We''re going to set up our code in the same way we did when
    we loaded the `dojox/charting` modules. We''ll attach the same event to the map.`infoWindow`
    object''s `selection-change` event, and on that, we''ll run functions to manipulate
    and render our data.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the *Preparing the popup* section in the dojox/charting portion of
    the chapter to get the code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: As for the HTML popup templates for the block groups, counties, and states,
    we can make the same changes we made to the ones in the `dojox/charting` example.
    In keeping with best practices on the Internet, we will replace the `id` tags
    on the graphing `div` elements with class tags of the same name (ethnic groups
    get `class="ethnicgraph"`, for instance). This will cut down on the possibility
    of HTML `id` collision. Also, while Dojo widgets require either an HTML element
    or an `id` string, `D3.js` graphs can be added to elements found with any CSS
    selector.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Processing our data
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we collected the attribute data for the `dojox/Charting` modules, we had
    to arrange the attribute data into arrays so they could be consumed by the graphing
    modules. The same is true for `D3.js`. We will format the attributes into a list
    that can be read by the graphs.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the `dojox/charting` library, `D3.js` doesn''t have name restrictions
    on the properties used by the graphing parts. You can give the properties more
    reasonable names. Functions in `D3.js` will be added to calculate graph values.
    Since much of our ethnic, gender, and age data is based on population and sorted
    by name, it makes sense to name those properties population and name, respectively:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We add the property names and the population values to a list in the `formatAttributesForGraph()`
    method. That list will be graphed at a later time. We don't need to change any
    of the code because we're using the same function to process the attribute data
    in the `ethnicData()`, `genderData()`, and `ageData()` function.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've created our lists of data, we can display them in the graphs
    on our popups.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the ethnic graph
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our ethnic graph, we''re going to create a pie chart:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: We'll scale it to fit within a `240` pixel by `210` pixel area in our popup
    window.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll add our own color scale with a list of CSS colors.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll look for the HTML DOM element where we want to put our graph (`class="ethnicgraph"`),
    and then attach the pie chart graphic.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll apply the color, size it with our population data, and then label it
    with the names of the ethnic groups:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When the application draws the graph, it should look something like the following
    graph:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the ethnic graph](img/6459OT_06_04.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Displaying the gender graph
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the gender graph, we''ll start by copying and pasting the code from the
    ethnic graph. The code is similar, except for two minor changes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'For our first change, we''ll add custom colors for the male and female populations.
    Look for where the color variable is assigned, and insert the two color hexadecimal
    numbers into the color range:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we would like to make the labels show both the gender in question, and
    the actual population. To make a two-line label, we need to add another `tspan`
    to fill in with the population. We also need to move that label so that it is
    under the other label, and doesn''t cross over it:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once we run the application and test it with some data, the graph should look
    like the following image, pending data:![Displaying the gender graph](img/6459OT_06_05.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying the age graph
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The age graph creates bar graphs from simple html `div` elements. It resizes
    them according to the data we''ve provided. We need to calculate a maximum value
    for the data, so that we can fit the data values within a maximum width. From
    there, we can draw and label our graphs with the data provided:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using CSS styling, we can transform the appearance of the data however we wish.
    In this example, we decided to go with an alternating color theme, using the CSS3
    `nth-child(even)` pseudo class selector. You can add your own CSS hover effects
    to match what we did with `dojox/charting`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Using CSS and our data, we were able to create the following graph:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the age graph](img/6459OT_06_06.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like more information on the `D3.js` library, there is a wealth
    of information available. The official `D3.js` website is at [http://d3js.org/](http://d3js.org/).
    You can go there to find examples, tutorials, and other eye-popping graphics.
    You can also check out *Data Visualization with d3.js* by Swizec Tellor, *Data
    Visualization with D3.js Cookbook* by Nick Qi Zhu, and *Mastering D3.js* by Pablo
    Navarro Castillo.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both `dojox/charting` and `D3.js` have their advantages and disadvantages in
    our web mapping applications. The `dojox/charting` library comes with the ArcGIS
    JavaScript API, and is easily integrated with existing applications. It provides
    many themes that can be added quickly. On the other hand, `D3.js` works with HTML
    elements and CSS styling to create eye-popping effects. It offers more data visualization
    techniques than `dojox/charting` and offers customizable appearances using CSS
    styling. Your final choice may come down to your comfort level with these tools
    and your imagination.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to incorporate graphs and charts in to
    our ArcGIS JavaScript API applications. We used graphics libraries provided by
    the Dojo framework, which created graphics based on data from map features. We
    also used `D3.js` to render charts and graphs in our application. In the process,
    we learned how to load and access other libraries in Dojo's AMD-based applications.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在我们的 ArcGIS JavaScript API 应用程序中集成图表和图形。我们使用了 Dojo 框架提供的图形库，这些库基于地图要素的数据创建图形。我们还使用了
    `D3.js` 在我们的应用程序中渲染图表和图形。在这个过程中，我们学习了如何在基于 Dojo 的 AMD 应用程序中加载和访问其他库。
- en: In the next chapter, we'll explore how to mix our ArcGIS JavaScript API applications
    with other popular JavaScript frameworks.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将我们的 ArcGIS JavaScript API 应用程序与其他流行的 JavaScript 框架混合使用。
