["```py\ndef firstFunction():\n 'a simple function returning a string'\n return \"My First Function\"\n>>>firstFunction()\n\n```", "```py\n'My First Function'\n\n```", "```py\n>>>print firstFunction.__doc__\n\n```", "```py\n'a simple function returning a string' \n\n```", "```py\ndef secondFunction(number):\n 'this function multiples numbers by 3'\n return number *3\n>>> secondFunction(4)\n\n```", "```py\n12\n\n```", "```py\ndef secondFunction(number):\n 'this function multiples numbers by 3'\n if type(number) == type(1) or type(number) == type(1.0):\n return number *3\n>>> secondFunction(4.0)\n\n```", "```py\n12.0\n>>>secondFunction(4)\n\n```", "```py\n12\n>>>secondFunction(\"String\")\n>>> \n\n```", "```py\ndef thirdFunction(number, multiplier=3):\n 'this function multiples numbers by 3'\n if type(number) == type(1) or type(number) == type(1.0):\n return number *multiplier\n>>>thirdFunction(4)\n\n```", "```py\n12\n>>>thirdFunction(4,5)\n\n```", "```py\n20\n\n```", "```py\nbufferDist = 400\nbuffDistUnit  = \"Feet\"\nlineName = '71 IB'\nbusSignage = 'Ferry Plaza'\nsqlStatement = \"NAME = '{0}' AND BUS_SIGNAG = '{1}'\"\ndef selectBufferIntersect(selectIn,selectOut,bufferOut,intersectIn, intersectOut, sqlStatement, bufferDist, buffDistUnit, lineName, busSignage): \n 'a function to perform a bus stop analysis'\n arcpy.Select_analysis(selectIn, selectOut, sqlStatement.format(lineName, busSignage))\n arcpy.Buffer_analysis(selectOut, bufferOut, \"{0} {1}\".format(bufferDist), \"FULL\", \"ROUND\", \"NONE\", \"\")\n arcpy.Intersect_analysis(\"{0} #;{1} #\".format(bufferOut, intersectIn), intersectOut, \"ALL\", \"\", \"INPUT\")\n return intersectOut\n\n```", "```py\ndef createResultDic(resultFC):\n 'search results of analysis and create results dictionary' \n dataDictionary = {} \n with arcpy.da.SearchCursor(resultFC, [\"STOPID\",\"POP10\"]) as cursor:\n for row in cursor:\n busStopID = row[0]\n pop10 = row[1]\n if busStopID not in dataDictionary.keys():\n dataDictionary[busStopID] = [pop10]\n else:\n dataDictionary[busStopID].append(pop10)\n return dataDictionary\n\n```", "```py\ndef createCSV(dictionary, csvname):\n  'a function takes a dictionary and creates a CSV file'\n    with open(csvname, 'wb') as csvfile:\n        csvwriter = csv.writer(csvfile, delimiter=',')\n        for busStopID in dictionary.keys():\n            popList = dictionary[busStopID]\n            averagePop = sum(popList)/len(popList)\n            data = [busStopID, averagePop]\n            csvwriter.writerow(data)\n```", "```py\nanalysisResult = selectBufferIntersect(Bus_Stops,Inbound71, Inbound71_400ft_buffer,CensusBlocks2010, Intersect71Census, bufferDist, lineName, busSignage )\ndictionary = createResultDic(analysisResult)\ncreateCSV(dictionary,r'C:\\Projects\\Output\\Averages.csv')\n\n```", "```py\n# -*- coding: utf-8 -*-\n# ---------------------------------------------------------------------------\n# 8662_Chapter4Modified1.py\n# Created on: 2014-04-22 21:59:31.00000\n#   (generated by ArcGIS/ModelBuilder)\n# Description: \n# Adjusted by Silas Toms\n# 2014 05 05\n# ---------------------------------------------------------------------------\n\n# Import arcpy module\nimport arcpy\nimport csv\n\n# Local variables:\nBus_Stops = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\Bus_Stops\"\nCensusBlocks2010 = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\CensusBlocks2010\"\nInbound71 = r\"C:\\Projects\\PacktDB.gdb\\Chapter3Results\\Inbound71\"\nInbound71_400ft_buffer = r\"C:\\Projects\\PacktDB.gdb\\Chapter3Results\\Inbound71_400ft_buffer\"\nIntersect71Census = r\"C:\\Projects\\PacktDB.gdb\\Chapter3Results\\Intersect71Census\"\nbufferDist = 400\nlineName = '71 IB'\nbusSignage = 'Ferry Plaza'\ndef selectBufferIntersect(selectIn,selectOut,bufferOut,intersectIn,\n intersectOut, bufferDist,lineName, busSignage ):\n arcpy.Select_analysis(selectIn, \n selectOut, \n \"NAME = '{0}' AND BUS_SIGNAG = '{1}'\".format(lineName, busSignage))\n arcpy.Buffer_analysis(selectOut, \n bufferOut, \n \"{0} Feet\".format(bufferDist), \n \"FULL\", \"ROUND\", \"NONE\", \"\")\n arcpy.Intersect_analysis(\"{0} #;{1} #\".format(bufferOut,intersectIn), \n intersectOut, \"ALL\", \"\", \"INPUT\")\n return intersectOut\n\ndef createResultDic(resultFC):\n dataDictionary = {}\n\n with arcpy.da.SearchCursor(resultFC, \n [\"STOPID\",\"POP10\"]) as cursor:\n for row in cursor:\n busStopID = row[0]\n pop10 = row[1]\n if busStopID not in dataDictionary.keys():\n dataDictionary[busStopID] = [pop10]\n else:\n dataDictionary[busStopID].append(pop10)\n return dataDictionary\n\ndef createCSV(dictionary, csvname):\n with open(csvname, 'wb') as csvfile:\n csvwriter = csv.writer(csvfile, delimiter=',')\n for busStopID in dictionary.keys():\n popList = dictionary[busStopID]\n averagePop = sum(popList)/len(popList)\n data = [busStopID, averagePop]\n csvwriter.writerow(data)\nanalysisResult = selectBufferIntersect(Bus_Stops,Inbound71, Inbound71_400ft_buffer,CensusBlocks2010,Intersect71Census, bufferDist,lineName, busSignage )\ndictionary = createResultDic(analysisResult)\ncreateCSV(dictionary,r'C:\\Projects\\Output\\Averages.csv')\nprint \"Data Analysis Complete\"\n\n```", "```py\ndef selectBufferIntersect(selectIn,selectOut,bufferOut,intersectIn,\n intersectOut, bufferDist,lineName, busSignage ):\n arcpy.Select_analysis(selectIn, \n selectOut, \n \"NAME = '{0}' AND BUS_SIGNAG = '{1}'\".format(lineName, busSignage))\n arcpy.Buffer_analysis(selectOut, \n bufferOut, \n \"{0} Feet\".format(bufferDist), \n \"FULL\", \"ROUND\", \"NONE\", \"\")\n arcpy.Intersect_analysis(\"{0} #;{1} #\".format(bufferOut,intersectIn), \n intersectOut, \"ALL\", \"\", \"INPUT\")\n return intersectOut\n\n```", "```py\ndef formatSQLIN(dataList, sqlTemplate):\n 'a function to generate a SQL statement'\n sql = sqlTemplate #\"OBJECTID IN \"\n step = \"(\"\n for data in dataList:\n step += str(data)\n sql += step + \")\"\n return sql\n\ndef formatSQL(dataList, sqlTemplate):\n 'a function to generate a SQL statement'\n sql = ''\n for count, data in enumerate(dataList):\n if count != len(dataList)-1:\n sql += sqlTemplate.format(data) + ' OR '\n else:\n sql += sqlTemplate.format(data)\n return sql\n\n```", "```py\n>>> dataVals = [1,2,3,4]\n>>> sqlOID = \"OBJECTID = {0}\"\n>>> sql = formatSQL(dataVals, sqlOID)\n>>> print sql\n\n```", "```py\nOBJECTID = 1 OR OBJECTID = 2 OR OBJECTID = 3 OR OBJECTID = 4\n```", "```py\ndef formatSQL2(dataList, sqlTemplate, operator=\" OR \"):\n 'a function to generate a SQL statement'\n sql = ''\n for count, data in enumerate(dataList):\n if count != len(dataList)-1:\n sql += sqlTemplate.format(data) + operator\n else:\n sql += sqlTemplate.format(data)\n return sql\n\n>>> sql = formatSQL2(dataVals, sqlOID,\" AND \")\n>>> print sql\n\n```", "```py\nOBJECTID = 1 AND OBJECTID = 2 AND OBJECTID = 3 AND OBJECTID = 4\n\n```", "```py\n>>> sqlTemplate = \"NAME = '{0}'\"\n>>> lineNames = ['71 IB','71 OB']\n>>> sql = formatSQL2(lineNames, sqlTemplate)\n>>> print sql\n\n```", "```py\nNAME = '71 IB' OR NAME = '71 OB'\n\n```", "```py\ndef formatSQLMultiple(dataList, sqlTemplate, operator=\" OR \"):\n    'a function to generate a SQL statement'\n    sql = ''\n    for count, data in enumerate(dataList):\n        if count != len(dataList)-1:\n            sql += sqlTemplate.format(*data) + operator\n        else:\n            sql += sqlTemplate.format(*data)\n    return sql\n```", "```py\n>>> sqlTemplate = \"(NAME = '{0}' AND BUS_SIGNAG = '{1}')\"\n>>> lineNames = [('71 IB', 'Ferry Plaza'),('71 OB','48th Avenue')]\n>>> sql = formatSQLMultiple(lineNames, sqlTemplate)\n>>> print sql\n\n```", "```py\n(NAME = '71 IB' AND BUS_SIGNAG = 'Ferry Plaza') OR (NAME = '71 OB' AND BUS_SIGNAG = '48th Avenue')\n\n```", "```py\nsql = formatSQLMultiple(lineNames, sqlTemplate)\narcpy.Select_analysis(Bus_Stops, Inbound71, sql)\n```", "```py\nbufferDist = 400\nbufferUnit = \"Feet\"\narcpy.Buffer_analysis(Inbound71, \n Inbound71_400ft_buffer, \n \"{0} {1}\".format(bufferDist, bufferUnit), \n \"FULL\", \"ROUND\", \"NONE\", \"\")\n\n```", "```py\ndef formatIntersect(features):\n    'a function to generate an intersect string'\n    formatString = ''\n    for count, feature in enumerate(features):\n        if count != len(features)-1:\n            formatString += feature + \" #;\"\n        else:\n            formatString += feature + \" #\"\n        return formatString\n```", "```py\n>>> shpNames = [\"example.shp\",\"example2.shp\"]\n>>> iString = formatIntersect(shpNames)\n>>> print iString\n\n```", "```py\nexample.shp #;example2.shp #\n\n```", "```py\nintersected = [Inbound71_400ft_buffer, CensusBlocks2010]\niString = formatIntersect(intersected)\n# Process: Intersect\narcpy.Intersect_analysis(iString, \n                         Intersect71Census, \"ALL\", \"\", \"INPUT\")\n```", "```py\ndef createResultDic(resultFC, key, values):\n    dataDictionary = {}\n    fields = [key]\n    fields.extend(values)\n    with arcpy.da.SearchCursor(resultFC, fields) as cursor:\n        for row in cursor:\n            busStopID = row[0]\n            data = row[1:]\n            if busStopID not in dataDictionary.keys():\n                dataDictionary[busStopID] = [data]\n            else:\n                dataDictionary[busStopID].append(data)\n    return dataDictionary\n```", "```py\ndef createResultDic(resultFC, key, values):\n    dataDic = {}\n    fields = []\n   if type(key) == type((1,2)) or type(key) == type([1,2]):\n            fields.extend(key)\n            length = len(key)\n    else:\n        fields = [key]\n        length = 1\n    fields.extend(values)\n    with arcpy.da.SearchCursor(resultFC, fields) as cursor:\n        for row in cursor:\n            busStopID = row[:length]\n            data = row[length:]\n            if busStopID not in dataDictionary.keys():\n\n                dataDictionary[busStopID] = {}\n\n            for counter,field in enumerate(values):\n                if field not in dataDictionary[busStopID].keys():\n                    dataDictionary[busStopID][field] = [data[counter]]\n                else:\n                    dataDictionary[busStopID][field].append(data[counter])\n    return dataDictionary\n```", "```py\n>>> rFC = r'C:\\Projects\\PacktDB.gdb\\Chapter3Results\\Intersect71Census'\n>>> key = 'STOPID'\n>>> values = 'HOUSING10','POP10'\n>>> dic = createResultDic(rFC, key, values)\n>>> dic[1122023]\n\n```", "```py\n{'HOUSING10': [104, 62, 113, 81, 177, 0, 52, 113, 0, 104, 81, 177, 52], 'POP10': [140, 134, 241, 138, 329, 0, 118, 241, 0, 140, 138, 329, 118]}\n\n```", "```py\ndef createCSV(data, csvname, mode ='ab'):\n    with open(csvname, mode) as csvfile:\n        csvwriter = csv.writer(csvfile, delimiter=',')\n        csvwriter.writerow(data)\n```", "```py\ncsvname = r'C:\\Projects\\Output\\Averages.csv'\ndataKey = 'STOPID'\nfields = 'HOUSING10','POP10'\ndictionary = createResultDic(Intersect71Census, dataKey, fields)\n\nheader = [dataKey]\nfor field in fields:\n    header.append(field)\n\ncreateCSV(header,csvname, 'wb' )\n\nfor counter, busStop in enumerate(dictionary.keys()):\n    datakeys  = dictionary[busStop]\n    averages = [busStop]\n    for key in datakeys:\n        data = datakeys[key]\n        average = sum(data)/len(data)\n        averages.append(average)\n    createCSV(averages,csvname)\n```", "```py\n# -*- coding: utf-8 -*-\n# ---------------------------------------------------------------------------\n# 8662_Chapter4Modified2.py\n# Created on: 2014-04-22 21:59:31.00000\n#   (generated by ArcGIS/ModelBuilder)\n# Description: \n# Adjusted by Silas Toms\n# 2014 04 23\n# ---------------------------------------------------------------------------\n\n# Import arcpy module\nimport arcpy\nimport csv\n\nBus_Stops = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\Bus_Stops\"\nCensusBlocks2010 = r\"C:\\Projects\\PacktDB.gdb\\SanFrancisco\\CensusBlocks2010\"\nInbound71 = r\"C:\\Projects\\PacktDB.gdb\\Chapter4Results\\Inbound71\"\nInbound71_400ft_buffer = r\"C:\\Projects\\PacktDB.gdb\\Chapter4Results\\Inbound71_400ft_buffer\"\nIntersect71Census = r\"C:\\Projects\\PacktDB.gdb\\Chapter4Results\\Intersect71Census\"\nbufferDist = 400\nbufferUnit = \"Feet\"\nlineNames = [('71 IB', 'Ferry Plaza'),('71 OB','48th Avenue')]\nsqlTemplate = \"NAME = '{0}' AND BUS_SIGNAG = '{1}'\"\nintersected = [Inbound71_400ft_buffer, CensusBlocks2010]\ndataKey = 'NAME','STOPID'\nfields = 'HOUSING10','POP10'\ncsvname = r'C:\\Projects\\Output\\Averages.csv'\n\ndef formatSQLMultiple(dataList, sqlTemplate, operator=\" OR \"):\n    'a function to generate a SQL statement'\n    sql = ''\n    for count, data in enumerate(dataList):\n        if count != len(dataList)-1:\n            sql += sqlTemplate.format(*data) + operator\n        else:\n            sql += sqlTemplate.format(*data)\n    return sql\n\ndef formatIntersect(features):\n    'a function to generate an intersect string'\n    formatString = ''\n    for count, feature in enumerate(features):\n        if count != len(features)-1:\n            formatString += feature + \" #;\"\n        else:\n            formatString += feature + \" #\"\n    return formatString\n\ndef createResultDic(resultFC, key, values):\n    dataDictionary = {}\n    fields = []\n    if type(key) == type((1,2)) or type(key) == type([1,2]):\n        fields.extend(key)\n        length = len(key)\n    else:\n        fields = [key]\n        length = 1\n    fields.extend(values)\n    with arcpy.da.SearchCursor(resultFC, fields) as cursor:\n        for row in cursor:\n            busStopID = row[:length]\n            data = row[length:]\n            if busStopID not in dataDictionary.keys():\n\n                dataDictionary[busStopID] = {}\n\n            for counter,field in enumerate(values):\n                if field not in dataDictionary[busStopID].keys():\n                    dataDictionary[busStopID][field] = [data[counter]]\n                else:\n                    dataDictionary[busStopID][field].append(data[counter])\n\n    return dataDictionary\n\ndef createCSV(data, csvname, mode ='ab'):\n    with open(csvname, mode) as csvfile:\n        csvwriter = csv.writer(csvfile, delimiter=',')\n        csvwriter.writerow(data)\n\nsql = formatSQLMultiple(lineNames, sqlTemplate)\n\nprint 'Process: Select'\narcpy.Select_analysis(Bus_Stops, \n                      Inbound71, \n                      sql)\n\nprint 'Process: Buffer'\narcpy.Buffer_analysis(Inbound71, \n                      Inbound71_400ft_buffer, \n                      \"{0} {1}\".format(bufferDist, bufferUnit), \n                      \"FULL\", \"ROUND\", \"NONE\", \"\")\n\niString = formatIntersect(intersected)\nprint iString\n\nprint 'Process: Intersect'\narcpy.Intersect_analysis(iString, \n                          Intersect71Census, \"ALL\", \"\", \"INPUT\")\n\nprint 'Process Results'\ndictionary = createResultDic(Intersect71Census, dataKey, fields)\n\nprint 'Create CSV'\nheader = [dataKey]\nfor field in fields:\n    header.append(field)\ncreateCSV(header,csvname, 'wb' )\n\nfor counter, busStop in enumerate(dictionary.keys()):\n    datakeys  = dictionary[busStop]\n    averages = [busStop]\n\n    for key in datakeys:\n        data = datakeys[key]\n        average = sum(data)/len(data)\n        averages.append(average)\n    createCSV(averages,csvname)\n\nprint \"Data Analysis Complete\"\n```"]