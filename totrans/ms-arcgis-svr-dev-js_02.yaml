- en: Chapter 2. Digging into the API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **Application Programming Interface** (**API**) defines the operations, formats,
    and data structures available from a networked service. The developer writes code
    using the API to tell a server to accomplish a task. An API is built on top of
    an existing programming language, and uses the syntax and features of the language
    to make communications with a computer easier to code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'At one point, ESRI had three web-based APIs to communicate with ArcGIS Server:
    Flash, Silverlight, and JavaScript. With the rise of the mobile web and improvements
    in browsers, the ArcGIS JavaScript API won as the browser of choice. To make the
    best use of the ArcGIS Server map features, it''s best to learn what''s available
    from the JavaScript API. We''re going to take a tour through the API, to become
    familiar with what it has to offer.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the other chapters in this book, this chapter provides more of a reference
    than a programming exercise. Short code snippets have been added to show how to
    use modules within the API. If you don't absorb every little crumb of information
    out of this chapter, don't worry. Just come back and reread parts of it for reference.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: How maps are created and configured in the ArcGIS JavaScript API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to display geographic data from ArcGIS Server through tiled, dynamic, and
    graphics layers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The building blocks of graphics on a map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to communicate with ArcGIS Server services through tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How packaged UI controls called **dijits** can save development time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the ArcGIS JavaScript API, including examples that
    you can build on your own, check out *Building Web and Mobile ArcGIS Server Applications
    with JavaScript* by Eric Pimpler or *ArcGIS Web Development* by Rene Rubalcava.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Finding the ArcGIS JavaScript API documentation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the documentation for the ArcGIS API for JavaScript by visiting
    [https://developers.arcgis.com/javascript/jsapi/](https://developers.arcgis.com/javascript/jsapi/).
    There, you'll find information on the latest version of the API, a list of changes
    since the previous version, and related documents to help you create apps. The
    organization is logical, and information is relatively easy to find with their
    layout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The documentation layout
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation for each element in the ArcGIS API is laid out in an organized
    fashion. Links to the API components are on the left-hand side. The documentation
    for each element defaults to the AMD style, but provides links to the older legacy
    development style. With the AMD style, the top of the page shows how to load the
    module into your code. Following that is a description of the module, a link to
    samples that use the module, and a class hierarchy diagram showing the modules
    the current module inherits.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Object constructor
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the module requires a JavaScript object to be constructed, the documentation
    provides information on what is needed to call the module's constructor. The documentation
    provides details on the parameters required to create the objects, including parameter
    names, object types, whether they're optional or not, and what they do.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块需要构造 JavaScript 对象，文档将提供有关调用模块构造函数所需信息。文档提供了创建对象所需的参数的详细信息，包括参数名称、对象类型、它们是否可选以及它们的作用。
- en: CSS classes and data- attributes
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS 类和数据-属性
- en: Following any constructor information, the documentation provides data on the
    CSS class attributes for anything that the module may show on the map, as well
    as any HTML5 data-* attributes the module might employ. The CSS classes help you
    to modify the appearance of widgets and visual elements on the module, by giving
    you a class hook to modify with your custom styling. The data-* attributes give
    other JavaScript scripts access to information about your widget, without having
    to load the whole widget into memory. For instance, by clicking on a map graphic
    while using another library, you could access the geometry's type by looking at
    the element's data-geometry-type attribute.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何构造函数信息之后，文档提供了有关模块可能显示在地图上的任何内容的 CSS 类属性数据，以及模块可能使用的任何 HTML5 data-* 属性。CSS
    类可以帮助您通过提供类钩子来修改模块中小部件和视觉元素的外观，以便使用您自定义的样式进行修改。data-* 属性使其他 JavaScript 脚本能够访问有关您的部件的信息，而无需将整个部件加载到内存中。例如，当使用另一个库点击地图图形时，您可以通过查看元素的数据-geometry-type
    属性来访问几何类型。
- en: Properties
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: When an ArcGIS API object is created using the constructor, it will have certain
    properties, or variable parameters assigned to the object. Some properties are
    set when the object is created. Other properties are set as the object is modified,
    or certain methods are run. The API documentation lists object properties that
    are actively maintained, and will not be removed without sufficient notice of
    depreciation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用构造函数创建 ArcGIS API 对象时，它将具有某些属性或分配给对象的变量参数。一些属性在对象创建时设置。其他属性在对象修改时设置，或运行某些方法时设置。API
    文档列出了积极维护的对象属性，并且在没有足够的通知的情况下不会删除。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you use web developer tools in your browser, such as Firebug for Firefox,
    or Chrome Developer tools, you might find that these ArcGIS API objects have more
    properties than are listed in the documentation. Many properties considered private
    will have one or two underscore (`_`) characters before the name. If the properties
    and methods are not listed in the documentation, they may not be there when the
    next version of the API is released. Don't count on undocumented properties and
    methods in your code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中使用网络开发者工具，例如 Firefox 的 Firebug 或 Chrome 开发者工具，您可能会发现这些 ArcGIS API 对象具有比文档中列出的更多的属性。许多被认为是私有的属性在其名称前有一个或两个下划线
    (`_`) 字符。如果属性和方法未在文档中列出，它们可能在 API 的下一个版本发布时不存在。不要依赖代码中的未记录属性和方法。
- en: Methods
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: Besides certain properties, objects created with the ArcGIS API modules will
    probably contain methods, which are JavaScript functions assigned to the object,
    often using other parts of the object they're assigned to. The documentation will
    list public methods attached to the object, as well as what parameters they accept,
    what values they return, and a description of what task or function they perform.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了某些属性外，使用 ArcGIS API 模块创建的对象可能还会包含方法，这些方法是分配给对象的 JavaScript 函数，通常使用它们分配到的对象的其他部分。文档将列出附加到对象上的公共方法，以及它们接受的参数、返回的值以及它们执行的任务或功能的描述。
- en: Events
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: Many of the modules have documented events, where the module emits a notification
    that something has happened. These are similar to a HTML button's `onClick` event,
    or a browser's `onLoad` event. In older versions of the API, events were listened
    to using `dojo.connect`. But as the library has matured, Dojo is depreciating
    the connect function and replacing it with the **dojo/on** library ([http://dojotoolkit.org/reference-guide/1.10/dojo/on.html](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html)).
    The `dojo/on` module actually delivers a function.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多模块都有记录的事件，其中模块会发出通知表示发生了某些事情。这些类似于 HTML 按钮的 `onClick` 事件或浏览器的 `onLoad` 事件。在
    API 的旧版本中，事件是通过 `dojo.connect` 监听的。但随着库的成熟，Dojo 正在淘汰 connect 函数，并用 **dojo/on**
    库（[http://dojotoolkit.org/reference-guide/1.10/dojo/on.html](http://dojotoolkit.org/reference-guide/1.10/dojo/on.html)）来替换。实际上，`dojo/on`
    模块提供了一个函数。
- en: 'With the dojo/on function, you attach events by calling it with the following
    parameters: the HTML DOM elements or Dojo widgets you want to listen to, the name
    of the event as a string, and a function that will be called when the event occurs.
    If you want to stop the event, you need a variable to accept the returned value
    of the dojo/on call, ahead of time. When you''re ready to stop listening, call
    that return variable''s `remove()` method. Some modules contain their own `on()`
    method, which implements the `dojo/on` module for event handling. Here''s an example
    code snippet using the `dojo/on` module:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 dojo/on 函数，你可以通过以下参数调用它来附加事件：你想要监听的 HTML DOM 元素或 Dojo 小部件，事件名称作为字符串，以及当事件发生时将被调用的函数。如果你想停止事件，你需要一个变量来接受
    dojo/on 调用的返回值，提前准备。当你准备好停止监听时，调用那个返回变量的 `remove()` 方法。一些模块包含它们自己的 `on()` 方法，该方法实现了用于事件处理的
    `dojo/on` 模块。以下是一个使用 `dojo/on` 模块的示例代码片段：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we know what to expect when we're reading the documentation, let's
    look at the different tools available in the ArcGIS API for JavaScript. Since
    ArcGIS applications work with geographic data, we'll start off by looking at the
    map.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了阅读文档时可以期待的内容，让我们来看看 ArcGIS API for JavaScript 中可用的不同工具。由于 ArcGIS 应用程序与地理数据一起工作，我们将首先查看地图。
- en: Drawing a map
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制地图
- en: When working with the ArcGIS JavaScript API, one of the first things you'll
    want to do is to create a map. The map transforms a simple div element into an
    interactive canvas where you can display, request, and even edit geographic data.
    The map is a complicated object, so we'll spend a significant amount of time focusing
    on it. Let's learn how to make a map in our scripts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ArcGIS JavaScript API 进行工作时，你首先想要做的事情之一就是创建一个地图。地图将一个简单的 div 元素转换成一个交互式画布，你可以在其中显示、请求甚至编辑地理数据。地图是一个复杂的对象，因此我们将花费相当多的时间来关注它。让我们学习如何在我们的脚本中创建地图。
- en: Constructor options
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数选项
- en: When a map is first created using the ArcGIS JavaScript API, the developer has
    numerous parameters that can be used to configure the map. We were exposed to
    some of those parameters in the previous chapter, when we created our first map
    application. Let's look into a few of them a little more closely.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ArcGIS JavaScript API 首次创建地图时，开发者有多个参数可以用来配置地图。我们在上一章创建我们的第一个地图应用程序时接触到了一些这些参数。让我们更详细地研究其中的一些。
- en: Autoresize
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动调整大小
- en: The **Autoresize** function, which by default is true, tells the map whether
    it should resize itself when the browser changes size or orientation. If you have
    a full screen map application, and you maximize or resize your browser, the map
    will automatically adjust and fill the space assigned to it. The map will keep
    the same zoom level, but more or less only the edges of the map will be visible
    when you resize your browser.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动调整大小**功能，默认情况下为开启状态，它告诉地图是否应该在浏览器大小或方向改变时自动调整其大小。如果你有一个全屏地图应用程序，并且你最大化或调整浏览器窗口大小时，地图将自动调整并填充分配给它的空间。地图将保持相同的缩放级别，但在调整浏览器窗口大小时，地图的边缘将更多或更少地可见。'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If your application hides, moves, or animates your maps' appearance onto or
    off the screen, the autoresize functionality could lead to some strange behavior
    in the map. For example, if the map is made to slide in from the right, the mouse
    scroll and some zoom functionality may zoom to the center-left point, rather than
    the center of the map. With map animations on and off screen, it is best to set
    the autoresize to false.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序隐藏、移动或动画化你的地图在屏幕上或屏幕外的外观，自动调整大小功能可能会导致地图中出现一些奇怪的行为。例如，如果地图是从右侧滑入的，鼠标滚轮和一些缩放功能可能会缩放到地图的中心左点，而不是地图的中心。当地图动画在屏幕上或屏幕下时，最好将自动调整大小设置为关闭。
- en: Basemap
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 底图
- en: 'The **basemap** is an optional string value that provides background imagery
    to lay your data on. ESRI serves a variety of background imagery, depending on
    how you want to frame your data. All of ESRI''s basemaps are tiled images published
    in the Web Mercator projection (WKID 102100). For best performances, layers added
    on top of an ESRI basemap should be in the same projection. Otherwise, ArcGIS
    Server will have to reproject dynamic map services, and tiled map services may
    not show up if the spatial references do not match. You can see an example highlighted
    from the previous chapter in the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**底图**是一个可选的字符串值，它提供了放置数据的背景图像。ESRI根据您如何想要呈现数据提供各种背景图像。所有ESRI底图都是在Web Mercator投影（WKID
    102100）中发布的瓦片图像。为了最佳性能，添加到ESRI底图之上的图层应使用相同的投影。否则，ArcGIS Server将不得不重新投影动态地图服务，如果空间参考不匹配，瓦片地图服务可能不会显示。您可以在以下代码片段中看到前一章中突出显示的示例：'
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The background imagery options available from ESRI include:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ESRI提供的背景图像选项包括：
- en: '`street`: An ESRI street map'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`street`：ESRI街道地图'
- en: '`satellite`: Satellite/Aerial photography'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`satellite`：卫星/航空摄影'
- en: '`hybrid`: Combination of street map and satellite'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hybrid`：街道地图和卫星的组合'
- en: '`topo`: Topographic map with elevation and contours'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topo`：带有高程和等高线的地形图'
- en: '`gray`: Light gray/minimalist background'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gray`：浅灰色/简约背景'
- en: '`oceans`: Oceans and bathymetry background'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oceans`：海洋和海底背景'
- en: '`national-geographic`: National Geographic-themed'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`national-geographic`：国家地理主题'
- en: '`osm`: OpenStreetMap-themed'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`osm`：OpenStreetMap主题'
- en: Explaining the center, extent, zoom, and scale
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释中心、范围、缩放和比例
- en: 'The **center**, **extent**, **zoom**, and **scale** parameters can be used
    to override the other map layer settings and set what area is displayed on the
    map. The *center* can be either a two number array containing the longitude and
    the latitude of the center point, or an ESRI point. The *extent* describes in
    map coordinates which edges of the map should be shown: right, left, top or bottom.
    If a tiled layer is present, the *zoom* instructs which level of display, from
    furthest out to furthest in, the map should show. The *scale* tells the map how
    many units of measure relate to one unit in reality (for example, a scale value
    of 500 means that 1 inch on the map represents 500 inches in real life).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**中心**、**范围**、**缩放**和**比例**参数可以用来覆盖其他地图图层设置并设置在地图上显示的区域。*中心*可以是包含中心点经度和纬度的两个数字数组，也可以是ESRI点。*范围*描述了地图坐标中应显示地图的哪些边缘：右、左、上或下。如果存在瓦片图层，*缩放*指示地图应显示的显示级别，从最远到最近。*比例*告诉地图有多少个测量单位与现实中一个单位相关（例如，比例值为500表示地图上的1英寸代表现实中的500英寸）。'
- en: LODs
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LODs
- en: 'When a map loads layers, the **levels of details** (**LODs**) are defined by
    the first tiled layer loaded in the map. You can override those LODs when creating
    a map, by passing an array of objects containing a level (number: 0, 1, 2, and
    so on), a scale (number: for 1:500 scale, you would use 500), and a corresponding
    resolution (number). This is helpful if you want to limit the user''s ability
    to zoom way outside the view of your map, or if some of your tiled data has a
    finer resolution than your basemap will show.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当地图加载图层时，**细节级别**（**LODs**）由地图中首先加载的瓦片图层定义。您可以在创建地图时通过传递包含级别（数字：0、1、2等）、比例（数字：对于1:500的比例，您将使用500）和相应分辨率（数字）的对象数组来覆盖这些LODs。如果您想限制用户将地图缩放到视图之外的能力，或者如果您的一些瓦片数据具有比您的底图显示更精细的分辨率，这将很有帮助。
- en: Now that we've learned how adjust the parameters of a map object, let's look
    at its different parts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何调整地图对象的参数，让我们来看看它的不同部分。
- en: Properties
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: The map object provides a number of properties that can be used in a mapping
    application. Some are read-only, and tell the status of the map. Others can be
    manipulated, and the changes can have significant impact on the map. While there
    are far more properties, we'll take a look at a few of them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 地图对象提供了一些属性，可以在映射应用程序中使用。其中一些是只读的，并告诉地图的状态。其他可以操作，并且更改可以显著影响地图。虽然属性有很多，但我们将查看其中的一些。
- en: loaded
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: loaded
- en: After you've created a map object, there are some things you can't do to the
    map until it has at least one layer **loaded**. When a map loads its first layer,
    it sets its loaded property to true. Then you can manipulate the map, pan around,
    search for layers, and modify its behavior.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在您创建地图对象后，直到地图至少有一个图层**加载**，您都不能对地图执行某些操作。当地图加载其第一个图层时，它将加载属性设置为true。然后您可以操作地图，平移，搜索图层，并修改其行为。
- en: 'A common programming error is not testing whether the map is loaded before
    doing something to it, like adding search result graphics from a query. If you
    have an extremely fast internet connection, and your ArcGIS Server is right next
    to you, the map might be loaded right after you add a layer. But, for internet
    users outside your server room, the map may not load that quickly. It''s best
    to check the loaded property before continuing, as in the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的编程错误是在对地图进行操作之前，例如添加来自查询的搜索结果图形之前，没有测试地图是否已加载。如果你拥有极快的互联网连接，并且你的ArcGIS服务器就在你身边，地图可能在你添加图层后立即加载。但是，对于服务器室外的互联网用户来说，地图可能不会那么快加载。在继续之前最好检查加载属性，如下面的示例所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: layerIds
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: layerIds
- en: The map object keeps a list of references to the layers added to it. Map layer
    references are stored as an array of strings called `layerIds`. The first layerId
    in the list refers to the bottom most layer in the stack, while the last id string
    in the list refers to the top layer visible on the map. This is handy if you need
    to search for a particular layer in the list, or if you need to do something to
    all the layers loaded in the map.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 地图对象保留了一个引用列表，指向添加到其中的图层。地图图层引用存储在一个名为 `layerIds` 的字符串数组中。列表中的第一个 `layerId`
    指的是堆栈中最底层的图层，而列表中的最后一个字符串 `id` 指的是地图上可见的最顶层。如果你需要搜索列表中的特定图层，或者需要对所有加载到地图中的图层执行某些操作，这会很有用。
- en: spatialReference
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: spatialReference
- en: The map's `spatialReference` property refers to the long list of mathematical
    equations used to represent a round earth on a flat map. This attribute is often
    (but not always) shared by the map and the layers and graphics contained within.
    We'll go into more depth studying spatial reference in the *Geometry spatial reference*
    section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 地图的 `spatialReference` 属性指的是用于在平面上表示圆形地球的数学方程式的长列表。这个属性通常（但不总是）与地图以及包含在其中的图层和图形共享。我们将在
    *几何空间参考* 部分深入研究空间参考。
- en: Methods
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: The map object has a number of useful methods, which are functions tied into
    the map object. These methods help you add items to the map, move around, zoom
    in and out, and manipulate map behavior. Let's take a look at some of them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 地图对象具有许多有用的方法，这些方法是绑定到地图对象的功能。这些方法可以帮助你向地图添加项目，移动，缩放，以及操纵地图行为。让我们看看其中的一些。
- en: Adding, removing, and retrieving layers
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加、删除和检索图层
- en: Layers can be added and removed from the map as needed. If you want to add one
    map layer at a time, you can call on the map's `addLayer()` method. To add multiple
    layers at once, you have to put all those layers in an array and call the map's
    `addLayers()` method. Map layers can be removed with the `removeLayer()` method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要可以向地图中添加和删除图层。如果你想一次添加一个地图图层，可以调用地图的 `addLayer()` 方法。要一次添加多个图层，你必须将这些图层放入一个数组中，并调用地图的
    `addLayers()` 方法。可以使用 `removeLayer()` 方法删除地图图层。
- en: Retrieving layers is as simple as calling the map's `getLayer()` method. The
    `getLayer()` method is passed an id string for the layer. A list of the valid
    ids can be found in the map's `layerIds` array, or in the map's `GraphicsLayerId`
    property. If no layers are found that match the `getLayer()` parameter, the method
    returns a null.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 检索图层就像调用地图的 `getLayer()` 方法一样简单。`getLayer()` 方法传递一个图层 id 字符串。有效的 id 列表可以在地图的
    `layerIds` 数组中找到，或者在地图的 `GraphicsLayerId` 属性中。如果没有找到与 `getLayer()` 参数匹配的图层，该方法返回
    null。
- en: Moving around the map
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在地图上移动
- en: 'The map contains several methods for navigating the map. Some affect the location
    on the map, and others affect how zoomed in the user is. Here is a list of the
    most common methods used to manipulate your position on the map:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 地图包含用于导航地图的几个方法。有些影响地图上的位置，而有些影响用户缩放的程度。以下是用于操纵你在地图上位置的最常用方法的列表：
- en: '`setZoom()`: This sets the map zoom level, moving further in or further out.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setZoom()`: 这将设置地图的缩放级别，使地图进一步放大或缩小。'
- en: '`setScale()`: Similar to `setZoom()`, but tries to change the map''s scale
    to match the value passed.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setScale()`: 与 `setZoom()` 类似，但试图将地图的比例尺更改为传递的值。'
- en: '`setLevel()`: Similar to `setZoom()`, but works only in maps with a tiled service.
    Based on the integer passed into the function, the map will zoom to the corresponding
    zoom level, if the map has tiled layers.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setLevel()`: 与 `setZoom()` 类似，但仅在具有瓦片服务的地图上工作。根据传递给函数的整数，地图将缩放到相应的缩放级别，如果地图有瓦片图层。'
- en: '`setExtent()`: When passed a bounding box, this message will attempt to set
    the map''s boundaries to match the bounding box. This affects both zoom level
    and position.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setExtent()`：当传递一个边界框时，此消息将尝试将地图的边界设置为与边界框匹配。这会影响缩放级别和位置。'
- en: '`centerAndZoom()`: Accepts a center point and a zoom level, then centers the
    map on that point and attempts to zoom to the zoom level. This affects both position
    and zoom level.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`centerAndZoom()`：接受一个中心点和缩放级别，然后将地图中心定位在该点上，并尝试缩放到该级别。这会影响位置和缩放级别。'
- en: '`centerAt()`: When this function accepts a point, it attempts to pan the map
    over so that the point is in the center of the map.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`centerAt()`：当此函数接受一个点时，它尝试平移地图，使该点位于地图中心。'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that, for the `setExtent()`, `centerAndZoom()`, and `centerAt()`
    methods, the points and bounding boxes need to be in the same coordinate system
    as the map.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 `setExtent()`、`centerAndZoom()` 和 `centerAt()` 方法，点和边界框需要与地图相同的坐标系。
- en: Updating settings
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新设置
- en: There are many map navigation actions that can be enabled or disabled using
    map methods. You can control what happens when the user clicks, double-clicks,
    or shift-double-clicks on the map. You can enable or disable panning with the
    mouse, as well as scrolling with the scroll wheel. You can even disable an enable-all
    navigation event for the map. There may be times you want to disable navigation.
    For instance, if your map is navigated by clicking on links, you may not want
    the user to wander too far on your map.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多地图导航操作可以通过地图方法启用或禁用。你可以控制用户点击、双击或 shift 双击地图时会发生什么。你可以启用或禁用使用鼠标进行平移，以及使用滚轮进行滚动。你甚至可以禁用或启用地图的导航事件。有时你可能想要禁用导航。例如，如果你的地图是通过点击链接进行导航的，你可能不希望用户在地图上走得太远。
- en: Remember that these settings cannot be modified until the map is loaded. But
    if the map hasn't loaded yet, how are we supposed to know when it loads? For an
    answer, we'll look into a feature common to most JavaScript libraries, events.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，直到地图加载完成之前，这些设置都不能被修改。但如果地图尚未加载，我们该如何知道它何时加载呢？为了找到答案，我们将探讨大多数 JavaScript
    库共有的一个特性——事件。
- en: Events
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'Events are important when working with asynchronous programming in JavaScript.
    The map object has a number of events it fires before, during, and after it makes
    some important changes, or finishes certain tasks. These events can be listened
    to through the map''s built-in `on()` function. Let''s look at some of the more
    common events you''ll be working with:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 JavaScript 的异步编程时，事件非常重要。地图对象在执行某些重要更改或完成某些任务之前、期间和之后会触发多个事件。这些事件可以通过地图的内置
    `on()` 函数进行监听。让我们看看你将需要处理的一些更常见的事件：
- en: '`load`: A map event that fires after the map has loaded its first layer.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load`：在地图加载其第一层后触发的事件。'
- en: '`click`: This fires when the user clicks on the map. Among other event items,
    it returns the point the user clicked as a `mapPoint` property of the event object.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`click`：当用户点击地图时触发。在其它事件项中，它返回用户点击的点作为事件对象的 `mapPoint` 属性。'
- en: '`extent-change`: This fires when the map either changes location, or changes
    zoom level. Both of these factor into calculating the map''s extent.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extent-change`：当地图改变位置或缩放级别时触发。这两个因素都会影响地图范围的计算。'
- en: '`layer-add`: This fires when any new layer is added to the map.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer-add`：当任何新的图层被添加到地图上时触发。'
- en: '`layers-add-result`: This fires after multiple layers are loaded using the
    `addLayers()` method.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layers-add-result`：在通过 `addLayers()` 方法加载多个图层后触发。'
- en: '`mouse-over`: This fires when the mouse is moved over the map.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouse-over`：当鼠标移动到地图上时触发。'
- en: '`update-start`: This event fires before layers are loaded, either by adding
    new layers, or by moving around the map and triggering the map to download more
    map data.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update-start`：在加载图层之前触发此事件，无论是通过添加新图层，还是通过在地图上移动并触发地图下载更多地图数据。'
- en: '`update-end`: This event fires after the map loads the data from its map services.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update-end`：在地图从其地图服务加载数据后触发此事件。'
- en: Layers
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图层
- en: No map is complete without data to show. Data is added to the map through layers.
    Layers refer to data sources that include geographic, symbolic, and even tabular
    data. The ArcGIS API for JavaScript contains a number of modules for interpreting
    different kinds of common geographic data sources. Some of the layer modules work
    with data provided by ArcGIS Server, and others can display data from other sources,
    such as KML, **Web Map Service** (**WMS**), and CSV files.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 没有数据来展示的地图是不完整的。数据通过图层添加到地图中。图层指的是包含地理、符号甚至表格数据的数据源。ArcGIS API for JavaScript包含多个模块，用于解释不同类型的常见地理数据源。一些图层模块与ArcGIS
    Server提供的数据一起工作，而其他模块可以显示来自其他来源的数据，例如KML、**Web地图服务**（**WMS**）和CSV文件。
- en: Common ArcGIS Server layers
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的ArcGIS Server层
- en: ArcGIS Server provides map layer data through Map Services. Map Services provide
    data published from an ArcMap map document (`.mxd`). The visual map data, legend,
    and underlying data tables are served through ArcGIS Server, and can be consumed
    through the browser when the layer data source is loaded into the map. Different
    layer types have different functionalities. We will review those layers in the
    following sections.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server通过地图服务提供地图层数据。地图服务提供从ArcMap地图文档（`.mxd`）发布的数据。视觉地图数据、图例和底层数据表通过ArcGIS
    Server提供，并且当图层数据源被加载到地图中时，可以通过浏览器进行消费。不同的图层类型具有不同的功能。我们将在以下部分中回顾这些图层。
- en: ArcGISDynamicMapServiceLayer
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcGISDynamicMapServiceLayer
- en: An `ArcGISDynamicMapServiceLayer` is the default type of map published through
    the ArcGIS Server. It is a dynamic map, meaning that its content is updated whenever
    the map is refreshed. Because it is dynamic, the data can also be reprojected
    to fit on another map layer that is not in the same spatial reference.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArcGISDynamicMapServiceLayer`是通过ArcGIS Server发布的地图的默认类型。它是一个动态地图，这意味着其内容在地图刷新时更新。因为它具有动态性，数据也可以重新投影以适应不在同一空间参考系中的另一个地图层。'
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Because the data within an `ArcGISDynamicMapServiceLayer` is dynamic, ArcGIS
    Server redraws what the layer should look like every time the map looks at the
    data from a different location and zoom level. If this layer contains lots of
    labels, annotation, complicated graphics, or raster data (like aerial imagery,
    for instance), ArcGIS Server will require more system resources to render the
    map layer. This will lead to noticeably slower performance. Other services, like
    tiled map services, are recommended for that kind of data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`ArcGISDynamicMapServiceLayer`中的数据是动态的，所以每当地图从不同的位置和缩放级别查看数据时，ArcGIS Server都会重新绘制该层的外观。如果这个层包含大量的标签、注释、复杂的图形或栅格数据（例如航空影像），ArcGIS
    Server将需要更多的系统资源来渲染地图层。这会导致性能明显变慢。对于那种类型的数据，建议使用其他服务，如瓦片地图服务。
- en: ArcGISTiledMapServiceLayer
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcGISTiledMapServiceLayer
- en: 'ArcGIS Server allows map services to be tiled. An `ArcGISTiledMapServiceLayer`
    has its content already drawn into images at scales defined when the map service
    is published. These images are stored on a hard drive for quick retrieval. The
    benefit is that these pre-rendered tiles are served quickly and with little effort
    on the part of the server. More map services can be run from the same machine
    with little effect on performance. See an example in the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server允许地图服务进行瓦片化。`ArcGISTiledMapServiceLayer`在其内容在地图服务发布时已经绘制成图像，这些图像以定义的缩放比例存储在硬盘上，以便快速检索。这些预先渲染的瓦片可以快速且无需服务器大量努力地提供服务。可以在同一台机器上运行更多的地图服务，而对性能的影响很小。以下代码片段提供了一个示例：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tiled map services have some disadvantages. First, the data displayed through
    tiled map services doesn't change until the tiles are rebuilt. If a park boundary
    changes in the data, but the tiles aren't rebuilt, the service will still show
    the old boundary. Second, tiled map services restrict the map to specific zoom
    scales, with no easy way to view the map in between zoom scales. Third, if another
    tiled map is stacked on top of the first one, it not only has to be in the same
    spatial reference, but also the zoom scales have to overlap exactly within overlapping
    scale ranges. That means that a map built with scales of 1:500 and 1:1000 can
    be loaded with a map built with scales of 1:1000 and 1:2000, but a tiled layer
    with scales 1:750, 1:1500, and 1:3000 will not be seen.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图服务有一些缺点。首先，通过瓦片地图服务显示的数据在瓦片重建之前不会改变。如果数据中的公园边界发生变化，但瓦片没有重建，服务仍然会显示旧的边界。其次，瓦片地图服务将地图限制在特定的缩放比例上，没有简单的方法在缩放比例之间查看地图。第三，如果另一个瓦片地图堆叠在第一个瓦片之上，它不仅必须在相同的空间参考中，而且缩放比例必须在重叠的比例范围内完全重叠。这意味着使用
    1:500 和 1:1000 比例构建的地图可以与使用 1:1000 和 1:2000 比例构建的地图一起加载，但比例 1:750、1:1500 和 1:3000
    的瓦片层将不会被看到。
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You cannot load a dynamic map service layer as an `ArcGISTiledMapServiceLayer`,
    or else it will throw an error. However, a tiled map service can be loaded as
    an `ArcGISDynamicMapServiceLayer`. You lose performance when zooming and panning,
    but it will help you view scales in between the tiled scales.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能将动态地图服务层作为 `ArcGISTiledMapServiceLayer` 来加载，否则会抛出错误。然而，可以将瓦片地图服务层加载为 `ArcGISDynamicMapServiceLayer`。在缩放和平移时，您会失去性能，但它可以帮助您查看瓦片比例之间的比例。
- en: We've seen ArcGIS layers that provide image data. Let's turn our attention to
    layers that handle more vector data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了提供图像数据的 ArcGIS 层。让我们将注意力转向处理更多矢量数据的层。
- en: GraphicsLayers and FeatureLayers
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形层和特征层
- en: Sometimes you don't want to work with representative images of maps. Sometimes
    you want to work with the shape of your data directly. That's where `GraphicsLayers`
    and `FeatureLayers` come in. These layers render vector graphics directly in your
    browser. You can click on them, modify them, and even add data to an ArcGIS service
    through them. Let's look a little closer at them.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候您不想与地图的代表性图像一起工作。有时候您想直接处理您数据的外形。这就是 `GraphicsLayers` 和 `FeatureLayers` 发挥作用的地方。这些层直接在您的浏览器中渲染矢量图形。您可以点击它们、修改它们，甚至可以通过它们将数据添加到
    ArcGIS 服务中。让我们更仔细地看看它们。
- en: GraphicsLayers
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形层
- en: '`GraphicsLayers` provide a simple way to add custom vector graphics to your
    map. You can manage the graphics by calling `add()` and `remove()` methods on
    those graphics. You can also search through the list of graphics on the map by
    searching through the `GraphicsLayer.graphics` array.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`GraphicsLayers` 提供了一种简单的方法来将自定义矢量图形添加到您的地图中。您可以通过对那些图形调用 `add()` 和 `remove()`
    方法来管理图形。您还可以通过搜索 `GraphicsLayer.graphics` 数组来搜索地图上的图形列表。'
- en: As a side note, the map object has a built-in `GraphicsLayer`. You can access
    that `GraphicsLayer` through the `map.graphics` property.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁注，地图对象有一个内置的 `GraphicsLayer`。您可以通过 `map.graphics` 属性访问该 `GraphicsLayer`。
- en: FeatureLayers
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特征层
- en: '`FeatureLayers` are specialized layers built on a `GraphicsLayer` that provide
    much more functionality. They have the custom vector graphics of a `GraphicsLayer`,
    plus they have an ArcGIS Server data source to populate the data. You can query
    for data by either location or attributes, add it to the map using custom graphics,
    and control popup content and styling. You can even edit data on your server.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`FeatureLayers` 是基于 `GraphicsLayer` 构建的专用层，提供了更多的功能。它们具有 `GraphicsLayer` 的自定义矢量图形，并且还有一个
    ArcGIS 服务器数据源来填充数据。您可以通过位置或属性查询数据，使用自定义图形将其添加到地图中，并控制弹出内容和外貌。您甚至可以在服务器上编辑数据。'
- en: Unlike ArcGIS Tiled and dynamic layers, which can mash up multiple layers at
    once, each `FeatureLayer` can only work with one map service layer. `FeatureLayers`
    can work with individual layers in a map service, or special editable map services
    called **Feature Services**. Feature Services provide more details about the map
    layer, including endpoints for querying results. If ArcGIS Server is configured
    to allow editing on the features, and the map service is published to allow editing,
    `FeatureLayers` that consume these services will let you modify both shape and
    tabular data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与可以同时混合多个层的 ArcGIS Tiled 和动态层不同，每个 `FeatureLayer` 只能与一个地图服务层一起工作。`FeatureLayers`
    可以与地图服务中的单个层一起工作，或者称为 **Feature Services** 的特殊可编辑地图服务。Feature Services 提供有关地图层的更多详细信息，包括查询结果的端点。如果
    ArcGIS Server 配置为允许编辑特征，并且地图服务已发布以允许编辑，则使用这些服务的 `FeatureLayers` 将允许您修改形状和表格数据。
- en: Because `FeatureLayers` query data from ArcGIS Server, they are limited in the
    number of features they can return. Typically, ArcGIS Server limits the number
    of results returned in a query to one or two thousand, depending on the version.
    Server settings can be altered to show more results, but more `FeatureLayer` graphics
    on the map mean more memory is consumed, and the app may be slow and unresponsive.
    Careful thought must be put into using the `FeatureLayer` with your data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `FeatureLayers` 从 ArcGIS Server 查询数据，它们返回的特征数量有限。通常，ArcGIS Server 会根据版本限制查询返回的结果数量为一千或两千。可以通过更改服务器设置来显示更多结果，但地图上更多的
    `FeatureLayer` 图形意味着消耗更多的内存，应用程序可能会变慢且无响应。在使用 `FeatureLayer` 与您的数据时必须仔细考虑。
- en: 'One way that the `FeatureLayer` refines the number of features returned is
    by setting its mode. The `FeatureLayer` has three primary modes of feature selection:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`FeatureLayer` 通过设置其模式来细化返回的特征数量。`FeatureLayer` 有三种主要的特征选择模式：'
- en: '`MODE_ONDEMAND`: Only features that fit within the map extent, time extent,
    and/or definition query are downloaded. This is the most common way of interacting
    with features visible within the map extent.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_ONDEMAND`：只有符合地图范围、时间范围和/或定义查询的特征才会被下载。这是与地图范围内可见特征交互的最常见方式。'
- en: '`MODE_SELECTION`: Only features that are selected by interacting with the map
    (by click, touch, or query, for instance) are downloaded and their data is shown
    on the map.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_SELECTION`：只有通过交互地图（例如点击、触摸或查询）选定的特征才会被下载，并且它们的数据会在地图上显示。'
- en: '`MODE_SNAPSHOT`: All features are initially downloaded into memory. This method
    is popular for smaller datasets, and requires fewer server calls.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_SNAPSHOT`：所有特征最初都会下载到内存中。这种方法适用于较小的数据集，并且需要较少的服务器调用。'
- en: '`MODE_AUTO`: It automatically picks between `MODE_ONDEMAND` and `MODE_SNAPSHOT`
    and is fairly new to the ArcGIS API for JavaScript, depending on the size and
    content of the data.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE_AUTO`：它会在 `MODE_ONDEMAND` 和 `MODE_SNAPSHOT` 之间自动选择，并且对于 ArcGIS API for
    JavaScript 来说是较新的功能，具体取决于数据的大小和内容。'
- en: We will look into `FeatureLayers` more closely in [Chapter 5](ch05.html "Chapter 5. Editing
    Map Data"), *Editing Map Data* when we discuss editing.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论编辑时，我们将在 [第 5 章](ch05.html "第 5 章。编辑地图数据") *编辑地图数据* 中更详细地探讨 `FeatureLayers`。
- en: Other layer types
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他图层类型
- en: 'The ArcGIS API for JavaScript works well with data published through ArcGIS
    Server. But not all geographic data available in the world is published through
    ArcGIS Server. The API has a number of other layer types that can consume these
    different data sources. Some of the more common types are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript 与通过 ArcGIS Server 发布的数据配合良好。但世界上并非所有地理数据都是通过 ArcGIS
    Server 发布的。API 有许多其他可以消费这些不同数据源的图层类型。以下是一些更常见的类型：
- en: '`KMLLayer`: Services written with the **Keyhole Markup Language** (**KML**).
    KML was made famous by Google Earth. The format uses the markup to store and symbolize
    geographic data. Many services publish KML data, including the **National Oceanic
    and Atmospheric Administration** (**NOAA**).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KMLLayer`：使用 **Keyhole Markup Language** (**KML**) 编写的服务。KML 因 Google Earth
    而闻名。该格式使用标记来存储和表示地理数据。许多服务发布 KML 数据，包括 **国家海洋和大气管理局** (**NOAA**)。'
- en: '`CSVLayer`: A fairly recent addition, it transforms a comma-delimited text
    file into points on the map. To show the data on a map, the `CSVLayer` expects
    a latitude and longitude column to show the coordinates in decimal places. This
    tool, combined with HTML5''s drag-and-drop API, could make it possible for you
    to map any compliant data you toss into a `.csv` file.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSVLayer`：这是一个相对较新的功能，它将逗号分隔的文本文件转换为地图上的点。为了在地图上显示数据，`CSVLayer` 预期一个纬度和经度列以显示十进制坐标。这个工具与
    HTML5 的拖放 API 结合使用，可以使您将任何符合条件的数据映射到 `.csv` 文件中。'
- en: '`WMSLayer` and `WMTSLayer`: Web Map Services (**WMS**) and Web Map Tiled Services
    (**WMTS**) published using the **Open Geospatial Consortium** (**OGC**) compliant
    standards.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WMSLayer` 和 `WMTSLayer`：使用 **Open Geospatial Consortium** （**OGC**）兼容标准发布的
    Web 地图服务（**WMS**）和 Web 地图瓦片服务（**WMTS**）。'
- en: Note
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that if you load the layer using just the URL of the OGC Web Map
    Service, you'll need to use a proxy (see [Chapter 1](ch01.html "Chapter 1. Your
    First Mapping Application"), *Your First Mapping Application*). This is because
    the module first requests `GetCapabilities` on the layer to grab metadata from
    the map service. This request requires a proxy. However, if you load the `WMSLayer`
    with an optional `resourceInfo` parameter, that automatically describes the service
    for you, and the proxy will not be necessary.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，如果您仅使用 OGC Web 地图服务的 URL 加载图层，您需要使用代理（参见[第1章](ch01.html "第1章。您的第一个映射应用程序")，*您的第一个映射应用程序*）。这是因为模块首先在图层上请求
    `GetCapabilities` 以从地图服务中获取元数据。此请求需要一个代理。然而，如果您使用带有可选 `resourceInfo` 参数的 `WMSLayer`
    加载，它会自动为您描述服务，因此不需要代理。
- en: '`StreamLayer`: A layer displaying live streaming data from an ArcGIS GeoEvent
    Processor Extension. `StreamLayer` takes advantage of the latest in HTML5 WebSockets,
    which provide real-time updates from the server to the client. You can view Twitter
    responses to specific events, or real-time locations of emergency response vehicles
    with tracking devices.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamLayer`：一个显示来自 ArcGIS GeoEvent Processor 扩展的实时流数据的图层。`StreamLayer` 利用
    HTML5 WebSocket 的最新技术，从服务器向客户端提供实时更新。您可以看到对特定事件的 Twitter 响应，或带有跟踪设备的紧急响应车辆的实时位置。'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that most up-to-date modern browsers support WebSockets technology, but
    older browsers typically do not. You can visit [http://www.websocket.org/echo.html](http://www.websocket.org/echo.html)
    to see if your browser supports WebSockets.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，大多数最新的现代浏览器支持 WebSocket 技术，但较旧的浏览器通常不支持。您可以通过访问 [http://www.websocket.org/echo.html](http://www.websocket.org/echo.html)
    来查看您的浏览器是否支持 WebSocket。
- en: Graphics
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形
- en: 'A graphic object represents an individual point, line, or polygon feature drawn
    on the webmap. The graphic object has four main parts: its geometry, symbol, attributes,
    and `infoTemplate`. They are used in many parts of the API. If you draw something
    on the map, you create a graphic. If you query a map service for something, it
    returns a list of graphics. Some modules even accept lists of graphics as arguments
    for other functions.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图形对象代表在 web 地图上绘制的单个点、线或多边形要素。图形对象有四个主要部分：其几何形状、符号、属性和 `infoTemplate`。它们在 API
    的许多部分中使用。如果您在地图上绘制某个东西，您就创建了一个图形。如果您查询地图服务以获取某个东西，它将返回一个图形列表。一些模块甚至接受图形列表作为其他函数的参数。
- en: 'The graphic object can be constructed with up to four optional arguments:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图形对象可以使用最多四个可选参数来构建：
- en: '`geometry`: It describes the shape of the graphic drawn on the map'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geometry`：它描述了绘制在地图上的图形的形状'
- en: '`symbol`: It describes the graphic''s color, thickness, and features that affect
    the appearance of the graphic'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbol`：它描述了图形的颜色、粗细和影响图形外观的特征'
- en: '`attribute`: A JavaScript object containing name-value pairs of tabular data
    that correspond with the feature'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute`：一个包含与要素对应的表格数据的名称-值对的 JavaScript 对象'
- en: '`infoTemplate`: It formats the look of the graphic attributes when highlighted
    by the map''s `InfoWindow`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`infoTemplate`：它格式化地图的 `InfoWindow` 高亮显示图形属性时的外观'
- en: We'll look more closely at these graphic features in the following sections.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将更详细地研究这些图形功能。
- en: Introducing geometry objects
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍几何对象
- en: 'Geometry objects are a collection of coordinates that describe where something
    is in the world. They give shape to the data we''re looking for. They can be used
    for displaying graphics on a map, or to provide spatial data for queries, or even
    for geoprocessing services. Geometry objects come in five basic types: point,
    line, polygon, extent, and multipoint. Any shapes are built on these basic types.
    Let''s take a closer look.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 几何对象是一组坐标的集合，用于描述某物在世界中的位置。它们为我们寻找的数据赋予了形状。它们可以用于在地图上显示图形，或为查询提供空间数据，甚至用于地理处理服务。几何对象有五种基本类型：点、线、多边形、扩展范围和多点。任何形状都是基于这些基本类型构建的。让我们更深入地了解一下。
- en: Point
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点
- en: In the ArcGIS API for JavaScript, a point is the simplest geometry object. It
    contains the *x* and *y* coordinates of the point, as well as the point's spatial
    reference. A point can be constructed with *x* and *y* coordinates, plus a spatial
    reference. It can also be defined by longitude and latitude.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcGIS API for JavaScript中，点是最简单的几何对象。它包含点的*x*和*y*坐标，以及点的空间参考。点可以用*x*和*y*坐标以及空间参考来构造。它也可以用经度和纬度来定义。
- en: Polyline
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多段线
- en: A polyline geometry is a collection of one or more arrays of point coordinates.
    Each array of point coordinates is called a path, and would look like a line when
    drawn out. Multiple paths can be stored in the same geometry, giving the appearance
    of multiple lines. The individual point coordinates are stored as array of *x*
    and *y* values.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 多段线几何体是由一个或多个点坐标数组组成的集合。每个点坐标数组被称为一条路径，当绘制出来时看起来像一条线。可以在同一几何体中存储多个路径，从而产生多条线的视觉效果。单个点坐标存储为*x*和*y*值的数组。
- en: Polygon
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多边形
- en: Polygons are made up of one or more arrays of points that loop back on themselves.
    Each array of points is referred to as a ring, and the first and last point in
    a ring must have the same coordinate. Polygons made up of more than one ring are
    referred to as multipart-polygons.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形由一个或多个点的数组组成，这些数组会自己闭合。每个点的数组被称为一个环，环中的第一个点和最后一个点必须具有相同的坐标。由多个环组成的多边形被称为多部分多边形。
- en: 'Among the many properties and methods that control the polygon''s shape are
    two useful methods: `.getCentroid()` and `.contains()`,`.getCentroid()` returns
    a point that is roughly in the middle of the polygon. The formula used to calculate
    the centroid''s position can be found on the Wikipedia page for centroids: ([http://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon](http://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon)).
    The `.contains()` method takes a point as an input, and returns a `boolean` value
    based on whether the point is inside the polygon or not.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制多边形形状的许多属性和方法中，有两个有用的方法：`.getCentroid()`和`.contains()`。`.getCentroid()`返回一个大致位于多边形中间的点。计算质心位置的公式可以在维基百科的质心页面找到：([http://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon](http://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon))。`.contains()`方法接受一个点作为输入，并根据该点是否在多边形内部返回一个`boolean`值。
- en: Extent
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展范围
- en: An extent is a rectangular polygon, which only uses four numbers to describe
    its shape. The extent is described by its minimum *x* value (`xmin`), maximum
    *x* value (`xmax`), minimum *y* value (`ymin`), and maximum *y* value (`ymax`).
    When viewed on a map, extents typically look like a box.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展范围是一个矩形多边形，它只使用四个数字来描述其形状。扩展范围由其最小*x*值（`xmin`）、最大*x*值（`xmax`）、最小*y*值（`ymin`）和最大*y*值（`ymax`）描述。在地图上查看时，扩展范围通常看起来像一个框。
- en: Extents are used by many different parts of the API. All other geometry objects
    other than points have a `getExtent()` method, which is used to collect the bounding
    box of the geometry. You can zoom to a specific location on a map by setting the
    map's extent. Extents are also used to define an area of interest when identifying
    things on a map.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展范围被API的许多不同部分使用。除了点之外的所有其他几何对象都有一个`getExtent()`方法，用于收集几何体的边界框。你可以通过设置地图的扩展范围来放大地图上的特定位置。扩展范围也用于在地图上识别事物时定义感兴趣的区域。
- en: Multipoint
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多点
- en: Sometimes you need a cluster of points to show on the map. For that, the multipoint
    is your answer. You can add and remove points using the `addPoint()` and `removePoint()`
    methods. You can also get the general area the points cover with the `getExtent()`
    method. They're useful for collecting random points in an area, and for selecting
    unconnected features on a map.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你需要将一组点显示在地图上。为此，多点就是你的答案。你可以使用`addPoint()`和`removePoint()`方法添加和删除点。你也可以使用`getExtent()`方法获取点覆盖的一般区域。它们对于收集区域内的随机点以及在地图上选择未连接的特征非常有用。
- en: Geometry spatial reference
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几何空间参考
- en: Besides coordinates of a geometry's location, the geometry object also packs
    information on the object's spatial reference. The spatial reference describes
    the mathematical models used to describe the Earth within the mapped region. Instead
    of containing all those formulas and constants, the spatial reference stores a
    reference to those formulas through either a **well-known ID** (**WKID**), or
    a **well-known text** (**WKT**).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 除了几何位置坐标外，几何对象还包含有关对象空间参考的信息。空间参考描述了用于描述映射区域内地球的数学模型。空间参考不是包含所有那些公式和常数，而是通过一个**已知ID**（**WKID**）或一个**已知文本**（**WKT**）来存储对这些公式的引用。
- en: Spatial Reference plays a crucial role when displaying data on a map. Tiled
    map service layers must have the same spatial reference as the map, in order to
    be displayed. Dynamic map service layers must be reprojected, adding to the server
    time and workload. Graphics also need to be in the same spatial reference as the
    map to appear in the correct places on the map.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 空间参考在地图上显示数据时起着至关重要的作用。瓦片地图服务层必须与地图具有相同的空间参考才能显示。动态地图服务层必须重新投影，这会增加服务器的时间和负载。图形也需要与地图具有相同的空间参考才能在地图上的正确位置显示。
- en: Symbols and renderers
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号和渲染器
- en: The ArcGIS API provides some basic graphics tools to define how features look
    on your map. If you are creating your own custom graphics, or modifying some existing
    ones, this portion of the API tells you how to define their **symbols**. The API
    also provides custom **renderers**, which help you define what symbols are used,
    based on rules applied by the renderer.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API 提供了一些基本的图形工具来定义地图上要素的外观。如果你正在创建自己的自定义图形或修改现有的图形，API 的这部分内容会告诉你如何定义它们的**符号**。API
    还提供了自定义**渲染器**，这有助于你根据渲染器应用的规则定义使用的符号。
- en: Simple symbols
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单符号
- en: The ArcGIS API uses symbols to define the colors, thicknesses, and other visual
    features of graphics, independent of their shape. In fact, without a symbol assigned,
    the graphics would not show up. The API defines three simple symbols to highlight
    points, line, and polygons. Let's look at the Simple Symbols.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API 使用符号来定义图形的颜色、厚度和其他视觉特征，而与其形状无关。实际上，如果没有分配符号，图形将不会显示。API 定义了三个简单的符号来突出显示点、线和多边形。让我们看看简单符号。
- en: SimpleLineSymbol
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SimpleLineSymbol
- en: The `SimpleLineSymbol` defines the symbology of line and polyline graphics added
    to the map. It may seem strange to start with line symbology, but the other two
    Simple symbols make use of a line symbol as well. The primary `SimpleLineSymbol`'s
    properties are its color, its width (in pixels), and its style. Styles include
    lines that are solid, dashed, dotted, and combinations of those as well.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleLineSymbol` 定义了添加到地图上的线和折线图形的符号。从线符号开始可能看起来有些奇怪，但其他两个简单符号也使用了线符号。`SimpleLineSymbol`
    的主要属性是其颜色、其宽度（以像素为单位）和其样式。样式包括实线、虚线、点线和这些的组合。'
- en: SimpleMarkerSymbol
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SimpleMarkerSymbol
- en: The `SimpleMarkerSymbol` defines the symbology of point and multipoint graphics
    on the map. The symbol can generate different shapes, depending on the style that
    is set. While this symbol defaults to a circle, the `SimpleMarkerSymbol` can generate
    squares, diamonds, x's, and crosses. Other properties that can be manipulated
    within this symbol include the size in pixels, its outline as a `SimpleLineSymbol`,
    and its color.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleMarkerSymbol` 定义了地图上点和多点图形的符号。符号可以生成不同的形状，这取决于设置的样式。虽然此符号默认为圆形，但 `SimpleMarkerSymbol`
    可以生成正方形、菱形、交叉和十字。此符号内还可以操纵的其他属性包括像素大小、其轮廓作为 `SimpleLineSymbol`，以及其颜色。'
- en: SimpleFillSymbol
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SimpleFillSymbol
- en: '`SimpeFillSymbols` define the symbology of polygon graphics on the map. The
    style of the `SimpleFillSymbol` reflects how the inside of the shape is shown.
    It can be solid (completely filled in), null (completely empty), or have lines
    running horizontally, vertically, diagonally, or crossing. Please note that a
    graphic with a null-styled symbol does not respond to clicks in the center. The
    symbol can also be modified by a `SimpleLineSymbol` outline, and if the style
    of the `SimpleFillSymbol` is solid, its fill color can be modified as well.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpeFillSymbols` 定义了地图上多边形图形的符号。`SimpleFillSymbol` 的样式反映了形状内部的显示方式。它可以填充（完全填充），为空（完全空），或者有水平、垂直、对角或交叉的线条。请注意，具有空样式符号的图形在中心不会响应用户点击。符号还可以通过
    `SimpleLineSymbol` 轮廓进行修改，并且如果 `SimpleFillSymbol` 的样式是实心，其填充颜色也可以修改。'
- en: Let's look a little further at the colors we'll use to define these symbols.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步看看我们将用来定义这些符号的颜色。
- en: esri/Color
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: esri/Color
- en: The `esri/Color` module allows you to customize the colors of the graphics you
    add to your map. The `esri/Color` module is an extension of the `dojo/_base/Color`
    module, and adds some unique tools to blend, create, and calculate color formats
    in different ways. Older versions of the library used the `dojo/_base/Color` module
    to set colors, and is still usable in the current version.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`esri/Color` 模块允许你自定义添加到地图中的图形的颜色。`esri/Color` 模块是 `dojo/_base/Color` 模块的扩展，并添加了一些独特的工具，以不同的方式混合、创建和计算颜色格式。库的旧版本使用
    `dojo/_base/Color` 模块来设置颜色，并且在当前版本中仍然可用。'
- en: The constructor for the `esri/Color` module can accept a variety of values.
    You can assign common color names, such as "blue" or "red". You can use hex strings
    (for example `#FF00FF` for purple), like you would find in css colors. You can
    also create colors using three or four number arrays. The first three numbers
    in the array assign the red, green, and blue values from 0 to 255 ([0, 0, 0] is
    black, [255, 255, 255] is white). The fourth optional number in the array indicates
    the alpha, or the opacity of the color. Values in this range are from 0.0 to 1.0,
    with 1.0 being completely opaque, and 0.0 being completely transparent.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`esri/Color` 模块的构造函数可以接受各种值。你可以分配常见的颜色名称，如 "blue" 或 "red"。你可以使用十六进制字符串（例如 `#FF00FF`
    表示紫色），就像你在 css 颜色中找到的那样。你还可以使用三个或四个数字数组创建颜色。数组中的前三个数字分配红色、绿色和蓝色值，范围从 0 到 255（[0,
    0, 0] 是黑色，[255, 255, 255] 是白色）。数组中的第四个可选数字表示 alpha，或颜色的不透明度。这个范围内的值从 0.0 到 1.0，其中
    1.0 是完全不透明，0.0 是完全透明。'
- en: The `esri/Color` module has some interesting enhancements on the old `dojo/_base/Color`
    module. For instance, you can create a blend of two existing colors with the `blendColors()`
    method. It takes two colors, and a decimal number between 0.0 and 1.0, where 0.5
    is an even blend of the two colors. This could be useful, for instance, on a voting
    map where green represents yes, and red represents no, and voting districts could
    be colored by percentages of yes or no votes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`esri/Color` 模块在旧的 `dojo/_base/Color` 模块的基础上增加了一些有趣的增强功能。例如，你可以使用 `blendColors()`
    方法混合两种现有的颜色。该方法接受两种颜色和一个介于 0.0 和 1.0 之间的十进制数，其中 0.5 是两种颜色的平均混合。这可能在投票地图上很有用，例如，绿色代表赞成，红色代表反对，投票区可以根据赞成或反对的百分比着色。'
- en: The `esri/Color` modules also have ways to translate colors from one format
    to another. For instance, you could click on a feature, get its graphic color,
    and use `toHex()` or `toCss()` to get the color string. From there, you could
    apply that color to the background color of an information `<div>` which is used
    to show the attributes of that graphic.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`esri/Color` 模块也有将颜色从一种格式转换为另一种格式的方法。例如，你可以点击一个要素，获取其图形颜色，并使用 `toHex()` 或 `toCss()`
    获取颜色字符串。从那里，你可以将那种颜色应用到显示该图形属性的信息 `<div>` 的背景颜色上。'
- en: Picture symbols
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片符号
- en: If pictures speak to you more than colors, you can use Picture Symbols in your
    graphics. With these symbols, you can use picture icons and custom graphics to
    add interesting and memorable data points on your graph. Points and polygons can
    be symbolized using Picture Symbols, using the modules `esri/symbols/PictureMarkerSymbol`
    and `esri/symbols/PictureFillSymbol` respectively.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图片对你来说比颜色更有吸引力，你可以在图形中使用图片符号。使用这些符号，你可以使用图片图标和自定义图形在你的图表上添加有趣且难忘的数据点。点和多边形可以使用图片符号进行符号化，分别使用
    `esri/symbols/PictureMarkerSymbol` 和 `esri/symbols/PictureFillSymbol` 模块。
- en: The `PictureMarkerSymbol` module adds simple picture graphics for points on
    the map. It is typically constructed with three arguments, a URL pointing to the
    image file (such as `.jpg`, `.png`, or `.gif`), and an integer width and height
    in pixels.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`PictureMarkerSymbol` 模块为地图上的点添加简单的图片图形。它通常使用三个参数构建，一个指向图像文件（如 `.jpg`、`.png`
    或 `.gif`）的 URL，以及像素宽度和高度。'
- en: The `PictureFillSymbol` module fills the content of a polygon with a repeating
    graphic. The `PictureFillSymbol` takes four arguments. The first is a URL string
    pointing to an image file. The second input is a line symbol, like the `esri/symbols/SimpleLineSymbol`.
    The final two arguments are integer width and the height of the image in pixels.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`PictureFillSymbol` 模块使用重复的图形填充多边形的内部内容。`PictureFillSymbol` 接受四个参数。第一个是一个指向图像文件的
    URL 字符串。第二个输入是一个线符号，如 `esri/symbols/SimpleLineSymbol`。最后两个参数是图像的像素宽度和高度。'
- en: Renderers
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染器
- en: Sometimes, you don't want to assign graphic symbols one at a time. If you know
    what type of graphics you're adding, and how the graphics should look ahead of
    time, it makes sense to assign the symbology ahead of time. That's where renderers
    come in. Renderers can be assigned to `GraphicsLayers` as a way to assign a common
    style to all graphics inside them. Renderers depend on a graphics layer accepting
    one geometry type (like all polygons, for instance).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'As the ArcGIS API has matured, it has added a number of different renderers
    to its library. We''ll take a look at three common ones: the `SimpleRenderer`,
    the `UniqueValueRenderer`, and the `ClassBreakRenderer`. Each has its appropriate
    use cases.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: SimpleRenderer
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `SimpleRenderer` is the simplest of the renderers because it only assigns
    one symbol. It accepts a default symbol, and assumes that you''ll only insert
    graphics of the same type as the symbol. Like other renderers, if you assign a
    `SimpleRenderer` to a `GraphicsLayer`, you can add Graphic objects to the `GraphicsLayer`
    without them having a symbol assigned. Let''s look at a code snippet that shows
    how to create and apply a `SimpleRenderer` to the map''s graphics layer:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `SimpleRenderer` has been expanded since version 3.7 of the API. Symbols
    can be modified in different ways, based on a range of expected values in a field.
    For instance, you can vary the symbol's color between two colors by setting the
    `colorInfo` property of the SimpleRenderer. You can also change the size of a
    point according to a field value by setting its `proportionSymbolInfo` property.
    Finally, you can rotate a symbol by its field value by setting its `rotationInfo`
    property.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Unique Value Renderer
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you want to display different symbols for your graphics based on one
    of their attributes. You can do that with a Unique Value Renderer. Specific unique
    values can be highlighted, while values not in the list can be assigned a default
    symbol.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'The constructor of the Unique Value Renderer accepts a default symbol, and
    up to three different fields to compare values against. If more than one field
    is used, a field delimiter string is required. Unique values and the associated
    symbols can then be loaded as objects within the renderer''s info parameter. The
    info object requires the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: A unique value (`value`)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A symbol associated with that value (`symbol`)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A symbol label (`label`)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the unique value (`description`)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class Break Renderer
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you want to classify your graphics by where they fit in certain ranges
    of values, like population or **Gross Domestic Product** (**GDP**). The Class
    Break Renderer helps you to organize the graphics in a visual manner. This renderer
    looks at a particular field value in a graphic, and finds which class break range
    graphic's field value fits between. It then assigns the corresponding symbol to
    that graphic.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'When constructing a Class Break Renderer, you assign a default symbol, and
    the field that will be evaluated to modify the symbol. Class breaks are assigned
    through an info property of the renderer. The info array accepts a JavaScript
    object containing the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建类间隔渲染器时，您分配一个默认符号，以及将被评估以修改符号的字段。类间隔通过渲染器的信息属性分配。信息数组接受一个包含以下内容的JavaScript对象：
- en: The minimum value of the class break (`minValue`)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类间隔的最小值（`minValue`）
- en: The maximum value of the class break (`maxValue`)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类间隔的最大值（`maxValue`）
- en: The symbol (`symbol`)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号（`symbol`）
- en: A label describing the break (`label`)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述间隔的标签（`label`）
- en: A description of the class break (`description`)
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类间隔的描述（`description`）
- en: InfoTemplates
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InfoTemplates
- en: '`InfoTemplates`, as we mentioned in [Chapter 1](ch01.html "Chapter 1. Your
    First Mapping Application"), *Your First Mapping Application*, describe how you
    want to display data in a popup. The `InfoTemplate` can be constructed using two
    strings, the title and the content. The title and content strings represent HTML
    templates, and you can substitute graphic attributes in the template. For a graphic''s
    `infoTemplate`, if you wanted to display the graphic''s total attribute, you would
    insert the value in the template with a `${total}`, which shows the field name
    inserted inside the brackets of the substitution string `${}`.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`InfoTemplates`，正如我们在[第1章](ch01.html "第1章。您的第一个映射应用程序")*您的第一个映射应用程序*中提到的，描述了您希望在弹出窗口中显示数据的方式。`InfoTemplate`可以使用两个字符串构建，即标题和内容。标题和内容字符串代表HTML模板，您可以在模板中替换图形属性。对于图形的`infoTemplate`，如果您想显示图形的总属性，您可以在模板中插入值，使用`${total}`，这显示了插入到替换字符串`${}`括号内的字段名。'
- en: 'If you want to display a popup containing all the name/value pairs in the graphic''s
    attributes, you can use a wildcard `${*}` in the content value, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在弹出窗口中显示包含图形属性中所有名称/值对的弹出窗口，您可以在内容值中使用通配符`${*}`，如下所示：
- en: '[PRE6]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For the content, you can add HTML content to the string, including tables,
    lists, images, and links. For example, you might use something like the following
    to describe a marine habitat:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内容，您可以在字符串中添加HTML内容，包括表格、列表、图像和链接。例如，您可能使用以下内容来描述海洋栖息地：
- en: '[PRE7]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we added the name attribute of the graphic to the
    title, and created a two-column table that displays the type of the graphic, the
    zone where the graphic resides, and a two-column wide image connected to the map
    graphic.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将图形的名称属性添加到标题中，并创建了一个两列的表格，显示图形的类型、图形所在的区域以及与地图图形连接的两列宽图像。
- en: Toolbars
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'The ArcGIS API for JavaScript uses toolbars to handle controls that transform
    the cursor. The API has three different toolbars: one for map navigation, one
    for drawing graphics, and one for editing those graphics. These tools are turned
    on using the `activate()` method, which includes parameters describing what tool
    you want to use. The tools can be turned off using the `deactivate()` method;
    let''s take a closer look at these tools.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript使用工具栏来处理转换光标的控件。API有三个不同的工具栏：一个用于地图导航，一个用于绘制图形，一个用于编辑这些图形。这些工具可以通过`activate()`方法打开，该方法包括描述您想要使用哪个工具的参数。可以使用`deactivate()`方法关闭工具；让我们更详细地看看这些工具。
- en: The navigation toolbar
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航工具栏
- en: The navigation toolbar handles advanced map navigation. By default, the map
    offers zoom sliders, and the ability to pan around the map. By activating the
    zoom in/zoom out features of the navigation toolbar, the user can draw a boxed
    extent where the map will either zoom in on, or zoom out at the same ratio as
    the zoom box to the map's current extent. This zoom in/out box is always on once
    you activate it, so you'll have to either develop something that turns it off,
    or let the user activate the pan tool, which disables the zoom in/out.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 导航工具栏处理高级地图导航。默认情况下，地图提供缩放滑块和在地图上平移的能力。通过激活导航工具栏的缩放/缩小功能，用户可以绘制一个框定的范围，地图将在此范围内放大或缩小，与缩放框相对于地图当前范围的缩放比例相同。一旦激活，此缩放/缩小框始终存在，因此您必须开发某种关闭它的方法，或者让用户激活平移工具，这将禁用缩放/缩小。
- en: The navigation controls have three more actions that can be activated. The `zoomToFullExtent()`
    function, when called from the navigation toolbar, triggers the map to zoom to
    its original map extent. The toolbar also keeps track of how many zoom-ins, zoom-outs,
    and pans the user has done. By activating the `zoomToPreviousExtent()` function,
    the map extent goes back to previous extents. And if the map goes back to previous
    extents, the map can also zoom to future locations. With the `zoomToNextExtent()`
    function, the user can undo the zoom extent changes they made when they viewed
    the previous extent.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 导航控件还有三个可以激活的操作。当从导航工具栏调用`zoomToFullExtent()`函数时，会触发地图缩放到其原始地图范围。工具栏还记录了用户进行了多少次缩放、缩放和平移操作。通过激活`zoomToPreviousExtent()`函数，地图范围会回到之前的范围。如果地图回到之前的范围，地图也可以缩放到未来的位置。使用`zoomToNextExtent()`函数，用户可以撤销他们在查看之前范围时所做的缩放范围更改。
- en: The draw toolbar
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘图工具栏
- en: The draw toolbar allows the user to draw on the map to provide input. Depending
    on which draw tool was activated, the user can draw a shape on the map, and any
    event listener attached to the `draw-end` event is called, running a function
    that receives the shape the user drew. Multiple `draw-end` events can be attached
    to the event listener if needed. Common draw-end events might include adding a
    drawing to the map, measuring the shape drawn by the toolbar, or using the shape
    drawn in a query. The tools also modify the tooltip of the map, giving directions
    about how to draw with them.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图工具栏允许用户在地图上绘制以提供输入。根据激活了哪个绘图工具，用户可以在地图上绘制一个形状，并且任何附加到`draw-end`事件的监听器都会被调用，运行一个接收用户绘制的形状的函数。如果需要，可以给事件监听器附加多个`draw-end`事件。常见的`draw-end`事件可能包括将绘图添加到地图、测量工具栏绘制的形状，或使用绘制的形状进行查询。这些工具还会修改地图的工具提示，提供有关如何使用它们的说明。
- en: The ArcGIS API provides numerous shapes to use when drawing on the map. The
    toolbar can be activated using simple drawing tool constants like point, polyline,
    and polygon, which are activated by clicking each point on the map and double-clicking
    to complete. There are freehand versions of the polyline and polygon, which allow
    you to click and drag the mouse to draw a continuous line or shape, and release
    the mouse to stop drawing. Also included in the API are drawing tools for common
    shapes such as triangles, rectangles, circles, ovals, and arrows, just to name
    a few.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API提供了在地图上绘制时使用的多种形状。可以通过简单的绘图工具常量（如点、折线和多边形）激活工具栏，这些常量通过在地图上点击每个点并双击来完成激活。折线和多边形有手绘版本，允许你点击并拖动鼠标来绘制连续的线条或形状，并释放鼠标以停止绘制。API还包括用于绘制常见形状（如三角形、矩形、圆形、椭圆形和箭头）的绘图工具，仅举几例。
- en: Tip
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The different toolbars are not aware of each other. If you are not careful,
    you could activate both drawing and navigation tools at the same time, and their
    actions will occur simultaneously. You could draw a shape for a tool, and be zoomed
    into that area because the navigation tool wasn't told to deactivate. Plan ahead
    how you will disable one event when another is enabled.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的工具栏之间互不感知。如果你不小心，你可能会同时激活绘图和导航工具，并且它们的行为会同时发生。你可能会为工具绘制一个形状，并因为导航工具没有被要求停用而放大到该区域。提前计划好如何在启用另一个事件时禁用其中一个事件。
- en: The edit toolbar
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑工具栏
- en: What happens when you draw something on the map and you have made a mistake?
    How do you correct a graphic on the map? The edit toolbar allows you to change
    map graphics' shape, size, and orientation. It also works on text symbols, letting
    you change the text of a text graphic on the map.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在地图上绘制某物并犯了一个错误时会发生什么？你如何纠正地图上的图形？编辑工具栏允许你更改地图图形的形状、大小和方向。它还适用于文本符号，允许你更改地图上文本图形的文本。
- en: When the edit toolbar is activated on a feature, it allows you to move, rotate,
    scale, or change the vertices of the feature. Moving lets you grab the feature
    and position it where you want. Rotating provides a point to click and drag around
    to re-orient the graphic. Scaling lets the user make the graphic larger or smaller.
    For editing vertices, the user can drag points around on the map, right-click
    to "delete" the point, and click between the graphic versions on "ghost points"
    to add new vertices to the map.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当在某个功能上激活编辑工具栏时，它允许你移动、旋转、缩放或更改该功能的顶点。移动功能让你可以抓取功能并将其放置到你想要的位置。旋转功能提供了一个点击并拖动以重新定位图形的点。缩放功能允许用户使图形变大或变小。对于编辑顶点，用户可以在地图上拖动点，右键点击“删除”点，并在“幽灵点”之间点击以在地图上添加新的顶点。
- en: Please note that while the Edit Toolbar allows users to change graphics on the
    map, it doesn't have any features built in that let the user save their changes.
    When using the edit toolbar on graphics in an editable feature layer, you still
    will need a way to tell the feature layer to save changes. Graphics can be edited
    in the current session without saving the changes.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然编辑工具栏允许用户更改地图上的图形，但它没有内置的功能让用户保存他们的更改。当在可编辑要素层上的图形上使用编辑工具栏时，你仍然需要一种方法来告诉要素层保存更改。图形可以在当前会话中编辑，而无需保存更改。
- en: Tasks
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: As I mentioned in the previous chapter, some application items require resource-intense
    processes that are best left for the server. The ArcGIS API calls these actions
    tasks. There are a large variety of tasks. Some require the server to compute
    and/or return data, which is the case for the geometry service and the `QueryTask`.
    Others use the server to generate custom documents, like the Print Task. Still,
    others also do all this, and also require custom extensions not initially a part
    of ArcGIS Server. Let's take a look at what makes a good task.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在上一章中提到的，某些应用程序项目需要资源密集型的过程，这些过程最好留给服务器处理。ArcGIS API将这些操作称为任务。任务种类繁多。一些任务需要服务器进行计算和/或返回数据，例如几何服务和`QueryTask`。其他任务使用服务器生成自定义文档，如打印任务。还有一些任务不仅执行上述所有操作，还需要自定义扩展，这些扩展最初并非ArcGIS
    Server的一部分。让我们看看什么才是一个好的任务。
- en: Tasks, parameters, and results
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务、参数和结果
- en: 'As we discussed in the previous chapter, a task is made up of three parts,
    the task constructor, the task parameters, and the task results. Typically, only
    the task constructor and the task parameters need to be loaded using AMD. The
    task results are automatically produced when the results return from the server.
    The format of the results is shown in the API documentation to show you how to
    access what you need when you successfully receive results. The common order of
    events with tasks is as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中讨论的，一个任务由三个部分组成：任务构造函数、任务参数和任务结果。通常，只需要使用AMD加载任务构造函数和任务参数。当结果从服务器返回时，任务结果会自动生成。结果格式在API文档中显示，以向您展示在成功接收结果时如何访问所需的内容。与任务相关的常见事件顺序如下：
- en: The task and task parameters are constructed.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建任务和任务参数。
- en: The task parameters are filled in with the required information
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务参数被填充所需的信息
- en: The task executes a server call using the task parameters.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该任务通过任务参数执行服务器调用。
- en: When the browser receives the results from the server, something is done with
    the results either through a `callback` function or a deferred value.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当浏览器收到来自服务器的结果时，结果将通过`回调`函数或延迟值进行处理。
- en: It is worth noting that when tasks are executed, they return one of Dojo's **Deferred**
    objects. These deferred results can be passed to another function to be run asynchronously
    when the browser receives the results.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当任务执行时，它们返回一个Dojo的**Deferred**对象。这些延迟结果可以被传递到另一个函数，以便在浏览器收到结果时异步运行。
- en: Common tasks
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见任务
- en: There are many tasks commonly available on any installation of ArcGIS Server.
    Many rely on a published map service or geoprocessing service to act on. Some,
    like the `GeometryService`, are built into ArcGIS Server. Let's take a look at
    some of the common tasks available through the API.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何ArcGIS Server安装中，都提供了许多常见的任务。许多任务依赖于已发布的地图服务或地理处理服务来执行。一些，如`GeometryService`，是ArcGIS
    Server内置的。让我们看看通过API可用的常见任务。
- en: GeometryService
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几何服务
- en: '`GeometryService` provides multiple functions for manipulating geometry data.
    Typically, it is published as part of ArcGIS Server. Let''s take a look at the
    Geometry Service functions available.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeometryService`提供了多种操作几何数据的函数。通常，它作为ArcGIS Server的一部分发布。让我们看看可用的几何服务函数。'
- en: '`AreasAndLengths`: Finds areas and perimeters of polygon geometries'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`面积和长度`: 查找多边形几何形状的面积和周长'
- en: '`AutoComplete`: Helps create polygons adjacent to other polygons by filling
    in gaps between them'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`自动完成`: 通过填充它们之间的间隙来帮助创建与其他多边形相邻的多边形'
- en: '`Buffer`: Creates a polygon whose edges are a set distance or distances from
    the source geometry'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缓冲区`: 创建一个多边形，其边与源几何形状的距离或距离集'
- en: '`ConvexHull`: Creates the smallest polygon shape necessary to contain all the
    input geometries'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`凸包`: 创建包含所有输入几何形状所需的最小多边形形状'
- en: '`Cut`: Splits a polyline or a polygon along a secondary polyline'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`裁剪`: 沿着辅助多段线将多段线或多边形分割'
- en: '`Difference`: Takes a list of geometries, and a secondary geometry (probably
    a polygon), and returns the first list any overlap against the secondary geometry
    is cut out'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`差集`: 从一系列几何形状中减去与次要几何形状（可能是一个多边形）重叠的部分'
- en: '`Distance`: Finds the distance between geometries'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`距离`: 查找几何形状之间的距离'
- en: '`Generalize`: Draws a similar looking shape with much fewer points'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`简化`: 绘制一个看起来相似但点数更少的形状'
- en: '`Intersect`: Given a list of geometries and another geometry, returns the geometries
    defined by where the first list intersected with the second'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`相交`: 给定一系列几何形状和另一个几何形状，返回由第一个列表与第二个列表相交定义的几何形状'
- en: '`Label Points`: Finds a point within a polygon which would be the best position
    to place a label'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标注点`: 在多边形内找到一个最佳位置放置标签的点'
- en: '`Lengths`: For lines and polylines, finds the planar or geodesic distance from
    beginning to end'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`长度`: 对于线和折线，找到从起点到终点的平面或大地距离'
- en: '`Offset`: Given a geometry and a distance, will create a geometry the defined
    distance to the right of the original geometry if the distance is positive, or
    to the left of the geometry if negative'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`偏移`: 给定一个几何形状和距离，如果距离为正，将在原始几何形状的右侧创建一个定义距离的几何形状，如果距离为负，则在几何形状的左侧创建'
- en: '`Project`: Based on a geometry and a new spatial reference, it returns the
    original geometry in the new spatial reference'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`项目`: 基于几何形状和新的空间参考，它返回在新空间参考中的原始几何形状'
- en: '`Relation`: Based on two sets of geometries and a specified relationship parameter,
    returns a list of pairings showing how items in the two lists are related (for
    example: how many from list2 are inside list1)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`关系`: 基于两组几何形状和指定的关系参数，返回一个配对列表，显示两个列表中的项目是如何相关的（例如：list2 中有多少在 list1 内）'
- en: '`Reshape`: Given a line or a polygon, and a secondary line, it changes the
    shape of the first geometry based on the second one, adding to the original figure,
    or tossing some of it away'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`重塑`: 给定一条线或一个多边形，以及一个次要线，它根据第二个几何形状改变第一个几何形状的形状，向原始图形添加或丢弃一些部分'
- en: '`Simplify`: Given a complicated polygon or line whose edges crosses itself,
    it returns simpler polygons where the crossed parts are undone'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`简化`: 给定一个复杂的、边交叉的多边形或线，它返回更简单的多边形，其中交叉部分被取消'
- en: '`TrimExtend`: Given a list of polylines, and a polyline to trim or extend to,
    it cuts lines in the list where they cross over the second polyline, and extend
    other polylines where they don''t quite reach the secondary polyline'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TrimExtend`: 给定一系列折线和一个用于修剪或扩展的折线，它切割列表中与第二个折线交叉的线，并在未达到次要折线的其他折线上进行扩展'
- en: '`Union`: Given a list of polygons, creates a unified geometry where all the
    polygons are dissolved along edges that overlap, creating one solid polygon'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`并集`: 给定一系列多边形，创建一个统一的几何形状，其中所有多边形在重叠的边缘上被溶解，形成一个单一的多边形'
- en: QueryTask
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询任务
- en: The `QueryTask` provides a way to collect both shape and attribute data from
    features in a map service. You can request data on individual layers in a map
    service, defining your search area by geometry and/or limiting your results to
    attribute queries. The `QueryTask` is constructed with a URL parameter pointing
    to a single layer in a map service. The number of results returned from a successful
    query is limited by ArcGIS Server, typically to either 1,000 or 2,000 results.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask` 提供了一种从地图服务中的要素收集形状和属性数据的方法。您可以从地图服务的单个图层请求数据，通过几何形状定义您的搜索区域，并通过属性查询限制您的结果。`QueryTask`
    是通过指向地图服务中单个图层的 URL 参数构建的。从成功查询返回的结果数量受 ArcGIS Server 限制，通常为 1,000 或 2,000 个结果。'
- en: 'Because results for a `QueryTask` can be limited by ArcGIS Server, the `QueryTask`
    object has been extended with multiple methods to collect data on its search results.
    Here are some of the methods available through the `QueryTask`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `QueryTask` 的结果可能受 ArcGIS Server 限制，`QueryTask` 对象已扩展了多个方法来收集其搜索结果上的数据。以下是
    `QueryTask` 可通过的一些方法：
- en: '`execute()`: Accepts the `QueryTask` parameters, and requests features based
    on those parameters.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute()`: 接受 `QueryTask` 参数，并根据这些参数请求要素。'
- en: '`executeForCount()`: Accepts the same parameters, and returns the number of
    results in the map service layer that match the query.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executeForCount()`: 接受相同的参数，并返回与查询匹配的地图服务图层中的结果数量。'
- en: '`executeForExtent()`: It is based on the parameters passed, returns the geographic
    extent that contains all the search results. Note that this is only valid on hosted
    feature services on [www.arcgis.com](http://www.arcgis.com).'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executeForExtent()`: 根据传入的参数，返回包含所有搜索结果的地理范围。请注意，这仅在托管要素服务上[www.arcgis.com](http://www.arcgis.com)有效。'
- en: '`executeForIds()`: With the parameters passed, the results return a list of
    `ObjectIds` for the features that match the search. Unlike the execute command,
    where the number of results are limited by ArcGIS Server, the `executeForIds()`
    method returns all the `ObjectIds` that match the search. That means, if there
    are 30,000 results that match the search, this method will return 30,000 `ObjectIds`,
    instead of the server limit of 1,000.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executeForIds()`: 通过传入的参数，结果返回匹配搜索条件的要素的 `ObjectIds` 列表。与执行命令不同，在执行命令中结果数量受
    ArcGIS Server 限制，而 `executeForIds()` 方法返回所有匹配搜索条件的 `ObjectIds`。这意味着，如果有 30,000
    个匹配搜索结果，此方法将返回 30,000 个 `ObjectIds`，而不是服务器的 1,000 个限制。'
- en: 'The `QueryTask` parameters can be created using the `Query` module (`esri/tasks/query`).
    If you have experience with SQL, you''ll see similarities between the `Query`
    parameters and SQL `Select` statements, while there are some `Query` parameters
    that are more specific to ArcGIS Server. A few of the common ones are as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Query` 模块（`esri/tasks/query`）创建 `QueryTask` 参数。如果你有 SQL 经验，你会看到 `Query`
    参数与 SQL `Select` 语句之间的相似之处，同时也有一些 `Query` 参数更具体于 ArcGIS Server。以下是一些常见的参数：
- en: '`where` (string): A legal where clause for a query.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where` (字符串): 查询的合法 `where` 子句。'
- en: '`geometry` (esri/geometry): A shape to spatial select against.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geometry` (esri/geometry): 一个用于空间选择的形状。'
- en: '`returnGeometry` (Boolean): Whether you want the geometry of the search result
    features. Setting this to false returns just attribute data.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`returnGeometry` (布尔值): 是否想要搜索结果要素的几何形状。将此设置为 `false` 仅返回属性数据。'
- en: '`outFields` (array of strings): A list of fields to retrieve the search results.
    Assigning ["`*`"] to the `outFields` parameter returns all fields, which is equivalent
    to the SQL statement `SELECT * from`.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outFields` (字符串数组): 要检索搜索结果的字段列表。将 ["`*`"] 分配给 `outFields` 参数将返回所有字段，这相当于
    SQL 语句 `SELECT * from`。'
- en: '`outSpatialReference` (`esri/SpatialReference`): The spatial reference you
    want the geometry to be drawn in. Typically, the map''s spatial reference is assigned
    to this value.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outSpatialReference` (`esri/SpatialReference`): 你想要几何形状绘制的空间参考。通常，地图的空间参考被分配给此值。'
- en: '`orderByFields` (array of strings): A list of field values to sort the results
    by. Add `DESC` to the string if you want values returned in descending order.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderByFields` (字符串数组): 按照字段值排序结果的列表。如果想要返回降序排列的值，请在字符串中添加 `DESC`。'
- en: Results are returned from `QueryTask` in a form called `FeatureSet` (`esri/tasks/FeatureSet`).
    `FeatureSet` contains data about the results returned, including the geometry
    type of the results, the spatial reference, field aliases for the results, and
    a list of feature graphics that match the search results. The `featureSet` even
    returns whether or not the number of results that match the query exceeded the
    number that could be delivered by ArcGIS Server. The array of features within
    the features property of the `featureSet` can symbolized and added straight to
    a map's graphics layer to be seen and clicked.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索结果以 `FeatureSet` 形式从 `QueryTask` 返回（`esri/tasks/FeatureSet`）。`FeatureSet`
    包含关于返回结果的数据，包括结果的几何类型、空间参考、结果字段别名以及匹配搜索结果的要素图形列表。`featureSet` 甚至返回匹配查询的结果数量是否超过了
    ArcGIS Server 能够提供的数据量。`featureSet` 中特征属性的特征数组可以符号化并直接添加到地图的图形层中以便查看和点击。
- en: IdentifyTask
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IdentifyTask
- en: The `IdentifyTask` provides a shortcut way to retrieve data from a map service
    for a popup. Unlike the `QueryTask`, which queries only one layer in the map service,
    the `IdentifyTask` can search through all layers in the map service. While the
    `QueryTask` has numerous methods to retrieve data on a search, the `IdentifyTask`
    is more simplified, with a single `execute()` command to retrieve server results.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentifyTask` 提供了一种快速从地图服务中检索数据以用于弹出窗口的方法。与仅查询地图服务中一个层的 `QueryTask` 不同，`IdentifyTask`
    可以搜索地图服务中的所有层。虽然 `QueryTask` 有许多方法可以检索搜索数据，但 `IdentifyTask` 更为简化，只有一个 `execute()`
    命令来检索服务器结果。'
- en: The parameters passed to an `IdentifyTask` are referred to as `IdentifyParameters`.
    Because `IdentifyTasks` can search multiple layers, the `IdentifyParameters` focus
    on searching by geometry. To search by a `where` clause, a `layerDefinition` parameter
    must also be added to the parameters.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `IdentifyTask` 的参数被称为 `IdentifyParameters`。因为 `IdentifyTasks` 可以搜索多层，所以
    `IdentifyParameters` 专注于通过几何形状进行搜索。要使用 `where` 子句进行搜索，还必须在参数中添加一个 `layerDefinition`
    参数。
- en: The results of an `IdentifyTask`, known as the `IdentifyResults`, differ somewhat
    from the `FeatureSet`. First, `IdentifyResults` are returned as an array of objects
    that contain a feature parameter that contains the result graphic, while the `FeatureSet`
    is a single object with an array of graphics in its features parameter. Secondly,
    `IdentifyResults` do not contain a list of field names and aliases like the `FeatureSet`,
    because the feature attributes of the `IdentifyResult` are name/value pairs where
    the name key is the alias. Finally, the `IdentifyResults` return the layer id
    and name of the layer they were retrieved from. These attributes makes the `IdentifyTask`
    favourable to quickly populate a map's popup on a click.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentifyTask` 的结果，称为 `IdentifyResults`，与 `FeatureSet` 有所不同。首先，`IdentifyResults`
    以包含结果图形的特征参数的对象数组的形式返回，而 `FeatureSet` 是一个包含其特征参数中图形数组的单个对象。其次，`IdentifyResults`
    不像 `FeatureSet` 那样包含字段名称和别名列表，因为 `IdentifyResult` 的特征属性是名称/值对，其中名称键是别名。最后，`IdentifyResults`
    返回它们检索到的层的 ID 和名称。这些属性使得 `IdentifyTask` 适合快速在点击地图时填充地图的弹出窗口。'
- en: FindTask
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FindTask
- en: The ArcGIS API offers another tool for finding features on a map called a `FindTask`.
    The `FindTask` accepts a text string, and searches for features in the map service
    that contain that value. On the database side, the `FindTask` queries through
    each layer in the map service, searching permitted fields for a text string with
    wildcards before and after it. If searching for the string "Doe", the `FindTask`
    would return a feature with the name value of "John *Doe*", "*Doe* Trail", or
    "`Fiddledee` *doe* Studios", but would not return a feature containing "Do exit"
    because of the space.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API 提供了另一个在地图上查找特征的工具，称为 `FindTask`。`FindTask` 接受一个文本字符串，并在包含该值的地图服务中搜索特征。在数据库方面，`FindTask`
    会遍历地图服务中的每一层，在允许搜索的字段中搜索带有前后通配符的文本字符串。如果搜索字符串 "Doe"，则 `FindTask` 会返回具有 "John *Doe*"、"*Doe*
    Trail" 或 "`Fiddledee` *doe* Studios" 名称值的特征，但不会返回包含 "Do exit" 的特征，因为有空格。
- en: Locator
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位器
- en: A Locator provides either an approximate location for an address based on street
    addressing data, known as **geocoding**. The locator can also perform **reverse
    geocoding**, which provides an approximate address for a point on the map based
    on that same street data. ESRI provides geocoding services on a national and world
    level, but if you have more up-to-date street information, you can publish your
    own geocoding service on ArcGIS Server.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 定位器提供基于街道地址数据的地址的近似位置，称为 **地理编码**。定位器还可以执行 **反向地理编码**，根据相同的街道数据为地图上的点提供近似地址。ESRI
    在国家和世界范围内提供地理编码服务，但如果你有更准确的街道信息，你可以在 ArcGIS Server 上发布自己的地理编码服务。
- en: For address location, the locator accepts a parameter object containing either
    a single line input, or an object containing a Street, City, State, and Zone (zip
    code) parameter. The `callback` function that accepts the `Locator.execute()`
    results should accept a list of objects called `AddressCandidates`. These `AddressCandidates`
    include the possibly matching street address, the point location of the address,
    and a score from 0 to 100, where 100 is a perfect match. If no results return
    there were no matches for the address provided.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于地址定位，定位器接受一个包含单行输入或包含街道、城市、州和区域（邮编）参数的对象。接受 `Locator.execute()` 结果的 `callback`
    函数应接受一个名为 `AddressCandidates` 的对象列表。这些 `AddressCandidates` 包括可能匹配的街道地址、地址的点位置以及从
    0 到 100 的分数，其中 100 是完美匹配。如果没有返回结果，则表示提供的地址没有匹配项。
- en: Tasks requiring server extensions
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要服务器扩展的任务
- en: While ArcGIS Server packs a lot of functionality, ESRI also provides server
    extensions, or optional software that performs specific tasks through ArcGIS Server.
    This software can do a number of unique tasks, from providing driving directions
    to sifting through tweets in your area. You will need to know if your server has
    one or more of these extensions before trying to use them. We'll take a look at
    one of them, the Routing Task.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然ArcGIS Server包含了很多功能，但ESRI还提供了服务器扩展，或可选软件，这些软件通过ArcGIS Server执行特定任务。这些软件可以执行许多独特任务，从提供驾驶方向到筛选你所在地区的推文。在尝试使用它们之前，你需要知道你的服务器是否有一个或多个这些扩展。我们将查看其中之一，即路由任务。
- en: Routing
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由
- en: Routing Tasks can provide driving directions, calculate the most effective routes,
    and redirect users around known roadblocks. The Routing Tasks require the Network
    Analyst extension for ArcGIS Server. For Routing Parameters, you can add a `FeatureSet`
    into the stop parameter, and fill it with graphics defining the various stops
    our vehicle has to make. You can also supply barriers in the same way, which block
    certain roadways. When the Routing Task is executed, it returns a best route based
    on the street data provided to the service.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 路由任务可以提供驾驶方向，计算最有效的路线，并绕过已知的道路障碍。路由任务需要ArcGIS Server的网络分析师扩展。对于路由参数，你可以在停止参数中添加一个`FeatureSet`，并用定义各种必须停车点的图形填充它。你也可以以同样的方式提供障碍物，这些障碍物会阻断某些道路。当路由任务执行时，它根据提供给服务器的街道数据返回最佳路线。
- en: Dijits
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字
- en: The ArcGIS API for JavaScript also provides Dojo widgets, commonly referred
    to as **dijits**. Many of these dijits offer a **user interface** (**UI**) with
    existing API modules working in the background. Using these dijits can cut development
    time by providing well-used and tested UI components. Dijit documentation also
    shows the CSS classes used to style the dijits, so that developers and designers
    can restyle them to fit the theme of the page. Let's take a look at the more commonly
    used dijits.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript还提供了Dojo小部件，通常称为**小部件**。许多这些小部件提供**用户界面**（**UI**），其中现有的API模块在后台工作。使用这些小部件可以通过提供广泛使用和测试过的UI组件来缩短开发时间。小部件文档还显示了用于样式化小部件的CSS类，以便开发人员和设计师可以根据页面主题重新设计它们。让我们看看更常用的几个小部件。
- en: Measurement
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量
- en: The Measurement dijit provides a tool that can be used to measure distances,
    areas, and perimeters of locations on the map. It can also get the latitude and
    longitude of points on the map. The dijit uses the drawing toolbar to draw shapes
    on the map. From there, it sends a request to a `GeometryService`. Once the dijit
    has retrieved its results, it either displays the latitude and longitude of a
    point, shows the length of the line drawn on the map, or displays the area and
    perimeter of the polygon area drawn on the map.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 测量数字小部件提供了一个工具，可以用来测量地图上位置的距离、面积和周长。它还可以获取地图上点的经纬度。该小部件使用绘图工具栏在地图上绘制形状。从那里，它向`GeometryService`发送请求。一旦小部件检索到其结果，它要么显示一个点的经纬度，显示在地图上绘制的线的长度，要么显示在地图上绘制的多边形区域的面积和周长。
- en: Print
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印
- en: The Print dijit provides a dropdown control that lets the user select from a
    predefined list of print templates and parameters. The developer configures the
    dijit with a link to an ArcGIS Server print service, and a list of predefined
    print parameters. When the user selects from one of the dropdown choices, the
    `printTask` incorporated in the Print dijit fires off an `execute()` method with
    the corresponding print parameters. When the `printTask` receives a success response
    from the server, the dijit provides a link to click on to download the printout.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 打印小部件提供了一个下拉控制，允许用户从预定义的打印模板和参数列表中选择。开发者通过将小部件配置为链接到ArcGIS Server打印服务以及预定义的打印参数列表来配置小部件。当用户从下拉选项中选择时，打印小部件中内置的`printTask`会触发一个带有相应打印参数的`execute()`方法。当`printTask`从服务器收到成功响应时，小部件提供了一个可以点击的链接来下载打印输出。
- en: If you need more granularity in your print control, this dijit is not for you.
    This tool is not meant to handle every combination of print parameters. If you're
    required to support everything from Tabloid ANSI B Landscape `.pdf` documents
    to Letter ANSI A Portrait `.gif` images, and everything else in between, you should
    consider developing your own tool.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多细粒度的打印控制，这个数字小部件不适合你。这个工具不是为了处理所有打印参数的组合。如果你需要支持从Tabloid ANSI B Landscape
    `.pdf`文档到Letter ANSI A Portrait `.gif`图像，以及所有介于两者之间的内容，你应该考虑开发自己的工具。
- en: Bookmarks
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书签
- en: The Bookmarks dijit allows the user to save custom areas on the map. You can
    pre-assign bookmarked areas in the configuration file that the user can click
    and zoom to. They can also add areas to a list, edit the names, and delete the
    custom areas they want to zoom to. The Bookmarks dijit does not save the map state,
    meaning that the layers that were turned on previously won't be automatically
    switched, and the selected graphics on the map may not be there.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Bookmarks dijit 允许用户在地图上保存自定义区域。您可以在配置文件中预先分配书签区域，用户可以点击并缩放到这些区域。他们还可以将区域添加到列表中，编辑名称，并删除他们想要缩放到地图上的自定义区域。Bookmarks
    dijit 不会保存地图状态，这意味着之前开启的图层不会自动切换，地图上选定的图形可能不存在。
- en: Basemaps
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底图
- en: The ArcGIS API provides a couple dijits for changing your basemaps. This can
    be useful when the data blends in or doesn't look right against the current background.
    The first tool the API provides is a `BasemapToggle`, which lets you switch between
    two basemaps. The second is the `BasemapGallery`, which offers more choices. Both
    provide thumbnail photos and captions describing the basemaps.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API 提供了一些 dijit 用于更改您的底图。当数据与当前背景混合或看起来不正确时，这可能很有用。API 提供的第一个工具是 `BasemapToggle`，它允许您在两个底图之间切换。第二个是
    `BasemapGallery`，它提供了更多选择。两者都提供了缩略图照片和描述底图的标题。
- en: The `BasemapGallery` can be customized to show your custom basemaps, or show
    basemaps from ArcGIS Online. When constructing the `BasemapGallery`, the choice
    of incorporating ArcGIS Online basemaps can be modified by setting the `showArcGISBasemaps`
    option to true. Remember the rule about tiled map services, however. The ArcGIS
    Online basemaps are in Web Mercator Auxiliary Sphere (WKID 102100), which is the
    same projection as Google and Bing Maps. If your data is not in the same projection,
    you could have issues with accuracy and/or missing tiled layers.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`BasemapGallery` 可以自定义以显示您自己的底图，或显示来自 ArcGIS Online 的底图。当构建 `BasemapGallery`
    时，可以通过将 `showArcGISBasemaps` 选项设置为 true 来修改是否包含 ArcGIS Online 底图的选择。然而，请记住关于瓦片地图服务的规则。ArcGIS
    Online 底图位于 Web Mercator 辅助球面（WKID 102100），这与 Google 和 Bing 地图的投影相同。如果您的数据不在相同的投影中，您可能会遇到精度和/或缺失瓦片层的问题。'
- en: Popups and InfoWindows
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出窗口和 InfoWindows
- en: 'Popups and `InfoWindows` provide a small window to view data about features
    on a map. There are four varieties of the `infoWindows` available: The legacy
    version that was replaced in version 3.4, a smaller version of the legacy `infoWindow`
    called `InfoWindowLite`, the current default popup control, and a lighter mobile
    version of the current popup.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口和 `InfoWindows` 提供了一个小窗口来查看地图上特征的数据。有四种 `infoWindows` 的变体可用：在版本 3.4 中被取代的旧版本，一个较小的旧
    `infoWindow` 版本称为 `InfoWindowLite`，当前默认的弹出控制，以及当前弹出窗口的轻量级移动版本。
- en: The current popup exposes a number of elements that you can tap into to customize
    the user experience. The popup can select multiple features, and holds the graphics
    content of the selected items in a features array. It also has a paging control
    that lets the user click to see what other features have been selected. It also
    keeps track of which feature is selected through a `selectedIndex` parameter.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 当前弹出窗口暴露了您可以对其进行操作以自定义用户体验的多个元素。弹出窗口可以选择多个特征，并保留所选项目的图形内容在一个特征数组中。它还有一个分页控件，允许用户点击查看其他已选特征。它还通过
    `selectedIndex` 参数跟踪哪个特征被选中。
- en: Editing
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑
- en: The editing dijits provide UI components and tools that you can use to edit
    features on the map. These tools work with editable `FeatureLayers`, allowing
    the user to edit shapes, add features on the map, change attributes, and save
    all those changes to the server. Let's look at some of the components that make
    up the editing tools.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 dijit 提供了 UI 组件和工具，您可以使用它们来编辑地图上的特征。这些工具与可编辑的 `FeatureLayers` 一起工作，允许用户编辑形状、在地图上添加特征、更改属性，并将所有这些更改保存到服务器。让我们看看构成编辑工具的一些组件。
- en: AttributeInspector
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性检查器
- en: The `AttributeInspector` allows the user to edit graphic attribute data from
    an HTML form. The inspector connects to the `FeatureLayer` and displays data on
    one of the features that is selected. The inspector also provides a previous and
    next button to search through the selected Features. The `AttributeInspector`
    also supplies a delete button to delete selected features.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`AttributeInspector` 允许用户从 HTML 表单中编辑图形属性数据。检查器连接到 `FeatureLayer` 并显示所选特征之一的数据。检查器还提供了一个上一页和下一页按钮，用于搜索所选特征。`AttributeInspector`
    还提供了一个删除按钮，用于删除所选特征。'
- en: The inspector then builds a form based on the requirements of the features.
    Dates will be given calendars, and domain-bound fields will show an HTML Select
    element with a dropdown list of domain choices. The user can type in and edit
    data, and the data can be saved server-side.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器随后根据特征的必要条件构建一个表单。日期将会有日历，而域绑定字段将显示一个带有域选择下拉列表的 HTML 选择元素。用户可以输入和编辑数据，并且数据可以在服务器端保存。
- en: TemplatePicker
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板选择器
- en: The `TemplatePicker` provides a selector to select what feature types and subtypes
    you'll be editing. When a `featureLayer` is published as editable, it has to expose
    the symbology and preset styles through the REST service. The `TemplatePicker`
    then reads the exposed symbology and feature setup data to create a grid of valid
    editable choices. The user clicks on the templates like a button, and the symbology
    is passed to a drawing tool of some kind.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`TemplatePicker` 提供了一个选择器，用于选择你将编辑的特征类型和子类型。当一个 `featureLayer` 作为可编辑的发布时，它必须通过
    REST 服务公开符号和预设样式。然后 `TemplatePicker` 读取公开的符号和特征设置数据，以创建一个有效的可编辑选择网格。用户点击模板就像点击按钮一样，符号传递给某种类型的绘图工具。'
- en: An all-in-one Editor
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一站式编辑器
- en: The ArcGIS API provides an all-in-one **Editor** dijit to provide some basic
    editing needs. The dijit incorporates the `TemplatePicker` to select features
    types and subtypes to draw from. It also has a toolbar with various tools, pertaining
    to the editable features on the map. So, when you select a green line, the tool
    will show line-related drawing tools.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API 提供了一个一站式 **编辑器** dijit，以满足一些基本的编辑需求。该 dijit 集成了 `TemplatePicker`
    以选择要绘制的特征类型和子类型。它还包含一个工具栏，包含各种工具，与地图上可编辑的特征相关。因此，当你选择一条绿色线时，工具将显示与线相关的绘图工具。
- en: The Editor also generates an `AttributeInspector` in the `map.infoWindow`. You
    can edit field values from the popup. It is up to you how you implement saving
    changes.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器还在 `map.infoWindow` 中生成一个 `AttributeInspector`。你可以从弹出窗口中编辑字段值。如何实现保存更改取决于你。
- en: The editor also provides undo and redo buttons in the toolbar. If you accidently
    delete a feature you wanted to save, you can use the undo button. If you realize
    that you really wanted to delete that feature, you can click the redo button.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器还在工具栏中提供了撤销和重做按钮。如果你不小心删除了你想要保存的特征，你可以使用撤销按钮。如果你意识到你确实想要删除那个特征，你可以点击重做按钮。
- en: Now that you have been exposed to most of the major features of the ArcGIS API
    for JavaScript, you are better prepared to write some more code using the API.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经接触到了 ArcGIS API for JavaScript 的主要功能，你更有准备去使用这个 API 编写更多的代码。
- en: Summary
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've taken a whirlwind tour of the ArcGIS API for JavaScript.
    We've gained familiarity with how the website and API is organized. We've studied
    the Map object in detail, looking at all its parts. We've looked over the other
    parts of the API, including layers, graphics, toolbars, tasks, and dijits. We've
    discussed how each of these are implemented, and some use cases for them. Now
    that we know more about the parts of the API, we can use these components to create
    custom applications and widgets in the next chapter.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速浏览了 ArcGIS API for JavaScript。我们熟悉了网站和 API 的组织结构。我们详细研究了地图对象，查看其所有部分。我们回顾了
    API 的其他部分，包括图层、图形、工具栏、任务和 dijits。我们讨论了它们的实现方式以及一些用例。现在我们更了解 API 的各个部分，我们可以在下一章中使用这些组件来创建自定义应用程序和小部件。
