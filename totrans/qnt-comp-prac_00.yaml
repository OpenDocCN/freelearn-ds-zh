- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**IBM Quantum Experience®** with **Qiskit®** together form a popular and easy-to-use
    quantum computing platform. They let you access and program actual IBM quantum
    computer hardware in the cloud, but you can also run your code on local and cloud-based
    simulators.'
  prefs: []
  type: TYPE_NORMAL
- en: This book is designed to teach you how to implement quantum programming in a
    Python® environment, first at an elementary level, and later moving to more advanced
    examples. The locally installable **Quantum Information Science Toolkit** (**Qiskit**)
    software is built on Python and represents the most accessible tool available
    today for learning quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the recipes of this book, we will introduce the Qiskit classes and
    methods step by step, starting with the very basic concepts such as installing
    and upgrading Qiskit, checking which version you are running, and so on. We then
    move on to understanding the building blocks that are required to create and run
    quantum programs and how to integrate these Qiskit components in your own hybrid
    quantum/classical programs to leverage Python's powerful programming features.
  prefs: []
  type: TYPE_NORMAL
- en: We'll explore, compare and contrast **Noisy Intermediate-Scale Quantum** (**NISQ**)
    computers and universal fault-tolerant quantum computers using simulators and
    actual hardware, looking closely at simulating noisy backends and how to mitigate
    for noise and errors on actual hardware, implementing the Shor code method for
    quantum error correction of a single qubit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we''ll take a look at quantum algorithms to see how they differ from
    classical algorithms. We will take a closer look at coding Grover''s algorithm,
    and then use Qiskit Aqua to run versions of Grover''s and Shor''s algorithms to
    show how you can reuse already constructed algorithms directly in your Qiskit
    code. We do all of this as a sweeping tour of Qiskit, IBM''s quantum information
    science toolkit, and its constituent layers: Terra, Aer, Ignis, and Aqua.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also use the online IBM Quantum Experience® user interface for drag-and-drop
    quantum computing. Everything we do in this book, and way more, can be coded in
    the cloud on IBM Quantum Experience®.
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter contains code samples to explain the principles taught in each
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers, data scientists, researchers, and quantum computing
    enthusiasts who want to understand how to use Qiskit® and IBM Quantum Experience®
    to implement quantum solutions. Basic knowledge of quantum computing and the Python
    programming language is beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This cookbook is a problem-solution- and exploration-based approach to understanding
    the nuances of programming quantum computers with the help of IBM Quantum Experience®,
    Qiskit®, and Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B14436_01_Final_PG_ePub.xhtml#_idTextAnchor021), *Preparing Your
    Environment,* walks you through how to install Qiskit® as a Python 3.5 extension
    on your local workstation. You''ll also register with IBM Quantum Experience®,
    get your API key, and grab the sample code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B14436_02_Final_PG_ePub.xhtml#_idTextAnchor045), *Quantum Computing
    and Qubits with Python,* shows how to use Python to code simple scripts to walk
    you through the concept of bits and qubits and how quantum gates work without
    Qiskit® or IBM Quantum Experience®.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B14436_03_Final_PG_ePub.xhtml#_idTextAnchor063), *IBM Quantum
    Experience® – Quantum Drag and Drop,* looks at IBM Quantum Experience®, IBM Quantum''s
    online, cloud-based drag-and-drop tool for programming quantum computers. Here
    you will code a simple program and learn how to move between Qiskit® and IBM Quantum
    Experience®.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B14436_04_Final_PG_ePub.xhtml#_idTextAnchor081), *Starting at
    the Ground Level with Terra,* explores a set of basic quantum programs, or circuits,
    to examine fundamental concepts such as probabilistic computing, superposition,
    entanglement, and more. We will also run our first programs on an actual physical
    IBM quantum computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B14436_05_Final_PG_ePub.xhtml#_idTextAnchor128), *Touring the
    IBM Quantum® Hardware with Qiskit®,* looks at the IBM Quantum® backends, exploring
    various physical aspects that impact the results of your quantum programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B14436_06_Final_PG_ePub.xhtml#_idTextAnchor156), *Understanding
    the Qiskit® Gate Library,* gives an overview of the quantum gates that are offered
    out of the box with Qiskit® to see what they do to your qubits. We take a look
    at the universal quantum gates from which all other quantum gates are built, and
    also expand from one-qubit gates, to the two-, three-, and more qubit gates needed
    for more advanced quantum circuits.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B14436_07_Final_PG_ePub.xhtml#_idTextAnchor197), *Simulating
    Quantum Computers with Aer,* helps you run your circuits on a collection of simulators
    that you can use locally or in the cloud. You can even set your simulators up
    to mimic the behavior of an IBM Quantum® backend, to test your circuits under
    realistic conditions on your local machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B14436_08_Final_PG_ePub.xhtml#_idTextAnchor220), *Cleaning Up
    Your Quantum Act with Ignis,* explains how to clean up your measurement results
    by understanding how our qubits behave, and looks at how we can correct for noise
    by using noise mitigation circuits such as the Shor code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B14436_09_Final_PG_ePub.xhtml#_idTextAnchor246), *Grover''s Search
    Algorithm,* builds Grover''s search algorithm, a quadratic speedup of classical
    search algorithms. We will use a unique quantum tool, quantum phase kickback.
    We build several different versions of the algorithm to run on both simulators
    and IBM Quantum® backends.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B14436_10_Final_PG_ePub.xhtml#_idTextAnchor271), *Getting to
    Know Algorithms with Aqua,* uses premade Qiskit Aqua versions of two of the most
    well-known quantum algorithms: Grover''s search algorithm and Shor''s factoring
    algorithm. We also take a quick tour of the Qiskit Aqua algorithm library.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It helps if you have acquainted yourself a little bit with basic quantum computing
    concepts; we will not spend too much time with proofs or the deeper details. Python
    programming skills are also helpful, especially when we start building slightly
    more complex hybrid quantum/classical programs. A basic understanding of linear
    algebra with vector and matrix multiplication will definitely help you understand
    how quantum gates work, but we let Python and NumPy do the hard work.
  prefs: []
  type: TYPE_NORMAL
- en: Qiskit® supports Python 3.6 or later. The code examples in this book were tested
    on Anaconda 1.9.12 (Python 3.7.0) using its bundled Spyder editor with Qiskit®
    0.21.0, and on the online IBM Quantum Experience® Code lab environment. We recommend
    our readers to use the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B14436_Preface_Table_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience](https://github.com/PacktPublishing/Quantum-Computing-in-Practice-with-Qiskit-and-IBM-Quantum-Experience).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838828448_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838828448_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "The `log_length(oracle_input,oracle_method)` function
    takes as input the oracle input (log or bin) and the oracle method (logical expression
    or bit string) and returns the ideal number of iterations the Grover circuit needs
    to include."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Clicking the job results box opens the **Result** page, and displays
    the final result of the job you just ran."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find several headings that appear frequently (*Getting
    ready*, *How to do it...*, *How it works...*, *There's more...*, and *See also*).
  prefs: []
  type: TYPE_NORMAL
- en: 'To give clear instructions on how to complete a recipe, use these sections
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section tells you what to expect in the recipe and describes how to set
    up any software or any preliminary settings required for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section contains the steps required to follow the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section usually consists of a detailed explanation of what happened in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section consists of additional information about the recipe in order to
    make you more knowledgeable about the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section provides helpful links to other useful information for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at [customercare@packtpub.com](mailto:customercare@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://packt.com).
  prefs: []
  type: TYPE_NORMAL
