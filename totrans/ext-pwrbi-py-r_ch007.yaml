- en: 6 Anonymizing and Pseudonymizing your Data in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It happens very often to those who develop a specific software product for a
    client to want to *repackage* it and sell it to another client who is interested
    in similar features. However, if you want to show a few screenshots of the software
    in a demo to the new client, you should avoid showing any data that might be sensitive.
    Getting in there and trying to mask the data from a copy of the original software
    database by hand was definitely one of the tasks the poor hapless developer found
    themselves having to do in the past, maybe even a few days before the demo.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario described does not require data to be shared with a third-party
    recipient but aims to successfully demo a product to the customer by displaying
    like-real data. Therefore, there is no concern about a possible brute force attack
    by professional analysts with the goal of deriving the original data prior to
    the de-identification operation.
  prefs: []
  type: TYPE_NORMAL
- en: Things definitely change when you need to share an entire dataset with a third-party
    recipient. The issue has become more sensitive since 2018, especially in Europe,
    where the need to give more attention to data privacy and **personally identifiable**
    **information** (**PII**) has become imperative for companies to comply with the
    requirements of the **General Data Protection Regulation** (**GDPR**).
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to introduce de-identification techniques using
    **Python** or **R** scripts that can help the **Power BI** developer prevent a
    person's identity from being linked to the information shown on the report.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: De-identifying data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymizing data in Power BI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudonymizing data in Power BI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter requires you to have a working Internet connection and **Power
    BI Desktop** already installed on your machine. You must have properly configured
    the R and Python engines and IDEs as outlined in *Chapter 2*, *Configuring R with
    Power BI*, and *Chapter 3*, *Configuring Python with Power BI*.
  prefs: []
  type: TYPE_NORMAL
- en: De-identifying data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PII**, also called **personal information** or **personal data**, is any
    information relating to an identifiable person. There are two types of PII – *direct*
    and *indirect*. Examples of **direct identifiers** are your name, your address,
    a picture of you, or an RFID (Radio Frequency Identification) associated with
    you. **Indirect identifiers**, on the other hand, are all those pieces of information
    that don''t explicitly refer to you as a person, but somehow make it easier to
    identify you. Examples of indirect identifiers are your license plate number,
    your bank account number, the link to your profile on a social network, or your
    place of work.'
  prefs: []
  type: TYPE_NORMAL
- en: The practice of **de-identifying** data is to manipulate PPIs so that it is
    no longer possible to identify the person who generated them.
  prefs: []
  type: TYPE_NORMAL
- en: There are two options for handling direct and indirect personal identifiers
    – either you decide to destroy them completely, or you decide to keep them separated
    from the rest of the data, implementing security measures to prevent anyone from
    re-identifying the data subject. But let's first explore what some of the most
    common de-identification techniques are.
  prefs: []
  type: TYPE_NORMAL
- en: De-identification techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**De-identification** is a process that is invisible to end users. After doing
    a careful study with a team of analysts, generally it is the data manager (or
    the person acting on their behalf) who decides what information should be de-identified.
    In the next sections, we will discuss the most commonly used de-identification
    techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: Information removal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The simplest form of de-identification is to remove sensitive information from
    the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Anonymization, information removal](img/file157.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Anonymization, information removal
  prefs: []
  type: TYPE_NORMAL
- en: It is clear that one of the disadvantages of this simplistic approach could
    be that the final dataset no longer conforms to the schema expected by the application
    that must consume it.
  prefs: []
  type: TYPE_NORMAL
- en: Data masking
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Data masking** hides information that users with specific roles shouldn''t
    see. It could consist of modifying data using word or character substitution.
    For example, you can replace a value character with a symbol, such as `*` or `x`.
    The following is a typical example of data masking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Anonymization, data masking](img/file158.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Anonymization, data masking
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that if the readable domain name in the email address is not public,
    but belongs to a recognizable legal entity, the data masking applied does not
    comply with the GDPR rules, as the workplace becomes recognizable.
  prefs: []
  type: TYPE_NORMAL
- en: Some products include **dynamic data masking** solutions out of the box. These
    mask or block sensitive information to users based on their role, location, and
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, **Microsoft SQL Server** and **Azure SQL Database** provide dynamic
    data masking as a solution to avoid exposing sensitive data to unauthorized users.
    The data in the database is not changed, as masking rules are applied in the query
    results.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data swapping
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Data swapping** consists of shuffling the values of a column containing sensitive
    data for the entire dataset. For example, if you have a column containing an individual''s
    date of birth, this can very well be anonymized using the swapping technique with
    very good results.'
  prefs: []
  type: TYPE_NORMAL
- en: Generalization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Generalization** consists of replacing point values with other values that
    indicate a broader category, to which the initial value belongs. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: An *age* of `25` can be transformed in the values `>=18`, or *between 18 and
    30*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *birth date*, like `04/11/1989`, can be replaced by the *year of birth* `1989`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *postal zip code* can be replaced by a broader *regional zip code*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data perturbation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Data perturbation** is a technique that replaces original values by adding
    some random noise or creating synthetic data. This transformation results in a
    loss of information that can make the data itself useless.'
  prefs: []
  type: TYPE_NORMAL
- en: Tokenization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Tokenization** is a technique that replaces original sensitive values with
    a randomly generated alphanumeric value, called a **token**. Completely random
    tokens offer the highest security, as the content cannot be re-engineered. There
    is no mathematical algorithm behind the scenes to get the original value back
    with an inverse transformation. Therefore, the association between the token and
    original value is generally maintained in a secured database, and tokens are usually
    generated by specific token servers. Only the token server talks to the token
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: Hashing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Hashing** is a technique similar to tokenization, with the difference that
    the resulting *token*, called a **hash value**, is generated by a mathematical
    algorithm, has a fixed length, and is almost impossible to transform back to the
    original value. If you use the same hashing function with the same input value,
    you’ll always have the same hash value as output. Often, additional text called
    *salt* is added to the input value to make it more complicated for a brute force
    attack to reverse engineer the hash value.'
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like hashing, **encryption** uses a mathematical algorithm to transform sensitive
    data. As opposed to hashing, it is a two-way transformation that needs a decryption
    key to reverse engineer an encrypted value. Using an encrypted mapping table can
    boost performance when decrypting data.
  prefs: []
  type: TYPE_NORMAL
- en: Most productivity tools and database systems are now available with end-to-end
    encryption built-in.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Two examples are the Microsoft SQL Server or Azure SQL databases, which have
    the *Always Encrypted* feature out of the box. It works by encrypting the data
    on the client side and hiding the encryption keys from the server. Even database
    administrators cannot read information stored in an encrypted column without having
    explicit permission.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you have an idea of the most common transformations used to de-identify
    sensitive information, you will see how they are used in anonymization and pseudonymization.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding pseudonymization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pseudonymization** is a de-identification process that separates direct or
    indirect identifiers from the rest of the data, taking care to ensure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Replacing one or more PIIs with **pseudonyms** (a random actual name, but more
    often a random numeric or alphanumeric identifier), ensuring the non-identification
    of the subject. Analytical correlations are guaranteed thanks to the fact that
    the pseudonym is always the same for the same input. So, analysis of pseudonymized
    data doesn’t lose value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not destroying the original PIIs, making sure that the entire dataset can be
    reconstructed (re-identification of the data) using, for example, lookup tables
    between PIIs and pseudonyms, or digital secret keys to pseudonymize inputs into
    the same output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking appropriate technical and organizational measures to make it difficult
    to trace the identity of an individual from the remaining data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During this process, some de-identification transformations can be made to some
    PIIs that you want to keep in the accessible data. For example, you could replace
    PII values with similar-looking pseudonyms, making sure to keep track of the replacement
    in order to guarantee the re-identification.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a pseudonymization process is shown in *Figure 6.2*, where a
    lookup table is used to guarantee the mapping for the inverse transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The process of pseudonymization](img/file159.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – The process of pseudonymization
  prefs: []
  type: TYPE_NORMAL
- en: 'An architecture of this type also guarantees the possibility of satisfying
    any requests for deletion of personal data by individuals (as required by GDPR)
    by meeting the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: It will be impossible to identify the subject from that moment on, just by removing
    the association related to it from the lookup table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete loss of statistical information useful for data analysis will be
    avoided, as it’s possible to use de-identification transformations that don’t
    erase analytical correlations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Keep in mind that the moment you *permanently lose the link* between a row of
    accessible data and its respective PPIs, that row becomes *completely anonymized*,
    thus falling out of GDPR's control.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, we have introduced the concept of anonymization. Let's take a look at what
    this means.
  prefs: []
  type: TYPE_NORMAL
- en: What is anonymization?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Anonymization** completely destroys direct and indirect identifiers, or destroys
    the link to their de-identified counterpart, so that there is no danger (or at
    least it is really very unlikely) that any attacker will be able to reconstruct
    the identity of the subjects to which the data refers. It has the *non-reversibility
    of the process* as its main goal. For this reason, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anonymized data is outside the scope and control of the GDPR because anonymized
    data is no longer *personal data*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most obvious disadvantage of anonymization is that it removes significant
    value from the data involved. This is because, after the process is complete,
    it is impossible to trace the identities that generated that data. It is therefore
    advisable to assess all relevant risks before anonymizing any dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The second disadvantage of anonymization is that it usually uses randomly generated
    de-identified strings, so *some statistical information of the dataset is permanently
    lost*, making any work a data scientist would have to do futile.
  prefs: []
  type: TYPE_NORMAL
- en: It may be that anonymized data can be vulnerable to **de-anonymization attacks**.
    They consist of enriching the anonymized dataset with available external information,
    thus imputing the anonymized items. These attacks are more likely to succeed,
    as the anonymized data is abundant, granular, and fairly stable over time and
    context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, the most adopted de-identification techniques for secure anonymization
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tokenization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now see how to apply these concepts to a real case using Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymizing data in Power BI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the possible scenarios that could happen to you during your career as
    a report developer in Power BI is the following. Imagine you are given an **Excel**
    dataset to import into Power BI in order to create a report to show to another
    department of your company. The Excel dataset contains sensitive personal data,
    such as names and email addresses of people who have made multiple attempts to
    pay for an order with a credit card. The following is an example of the contents
    of the Excel file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Excel data to be anonymized](img/file160.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Excel data to be anonymized
  prefs: []
  type: TYPE_NORMAL
- en: You are asked to create the report while anonymizing the sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that jumps out at you is that, not only do you have to anonymize
    the **Name** and **Email** columns, but some names or email addresses can be included
    in the text of some **Notes**. While locating email addresses is fairly easy using
    regular expressions, it is not as easy to locate person names in free text. For
    this purpose, it is necessary to adopt a technique of **natural language processing**
    (**NLP**) that goes under the name of **named entity recognition** (**NER**).
    Thanks to NER, it’s possible to identify and classify named entities (like people,
    places, and so on) in free text.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is to replace both full names and email addresses with random
    *tokens*. Depending on the analytical language used, there are different solutions
    driven by the different packages available that lead to the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymizing data using Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is one of the most widely used languages for performing de-identification
    transformations in anonymization processes. There are a plethora of packages that
    implement such solutions. In particular, Microsoft released the open source package
    **Presidio** ([https://microsoft.github.io/presidio/](https://microsoft.github.io/presidio/)),
    which is to date one of the best solutions for data protection and anonymization.
    It provides quick identification and anonymization forms for entities found in
    free text and images, such as credit card numbers, names, locations, social security
    numbers, email addresses, financial data, and more. **PII recognizers** leverage
    NER, regular expressions, rule-based logic, and checksums by identifying the relevant
    context in multiple languages. Behind the scenes, Presidio adopts NLP engines
    to recognize the entities – it supports both **SpaCy** (the default one) and **Stanza**.
    One of the most interesting features of Presidio is its *extensibility*. In fact,
    it is possible to extend the Presidio Analyzer by adding *custom PII entities*
    very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Once the sensitive entities are identified, you need to replace them with tokens.
    They are generated in Python using the `secrets` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, you can find an implementation of this in the Python file, `01-anonymize-data-in-power-bi-python.py`,
    in the `Chapter06` folder of the GitHub repository that comes with this book.
    It performs the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the libraries needed to execute the code. You will use the `pandas` module,
    some functions from the `presidio_analyzer` and `presidio_anonymizer` modules,
    and the `secrets` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define two custom functions, one to anonymize emails, the other to anonymize
    person names. Both use the `analyzer.analyze()` Presidio function to identify
    the entities to be anonymized and the `secrets` module to generate the tokens
    into the `anonymizer.anonymize()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the main objects of the **Presidio Analyzer** and **Presidio Anonymizer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For each row of the dataset previously loaded in Power BI Desktop (or via the
    `pandas`’ `read_excel()` function if you want to test the code in **VSCode**),
    apply the `anonymizeEmail` function to the `Email` and `Notes` columns and apply
    the `anonymizeName` function to the `Name` and `Notes` columns. In order to apply
    a function to each individual value of a column, we adopted the `apply()` function
    followed by a construct that goes by the name of **lambda function** (introduced
    by the keyword `lambda`). It is a small function defined without a name (anonymous)
    to be used inline. Here is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to proceed, however, it is necessary to configure *a new Python Environment*.
    This is because, to date, Presidio is supported only for Python versions from
    3.6 to 3.8\. Your `pbi_powerquery_env` environment has a newer Python version
    installed, so you need to create a new environment with Python 3.8\. Once created,
    you have to install the necessary modules to run the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps needed to configure the new environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your **Anaconda** **Prompt**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter and run the following code to create the new `presidio_env` environment
    with Python 3.8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter and run the following code to switch to the newly created environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter and run the following code to install the Presidio Analyzer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter and run the following code to install the Presidio Anonymizer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Analyzer also installs SpaCy behind the scenes. So, you must also install
    the SpaCy’s *trained pipeline for written English text* (we choose the one for
    blogs, news, and comments) using this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the largest pipeline used by SpaCy and takes up about 788 MB.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter and run the following code to install **pandas**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to use pandas to directly load the Excel with Python and then test
    the code before entering it in Power BI, you’ll also need the `openpyxl` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter and run the following code to install `matplotlib`, needed by the Power
    BI wrapper used with Python scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are now ready to apply anonymization in Power BI to the content of the `CustomersCreditCardAttempts.xlsx`
    Excel file you can find in the `Chapter06` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Power BI Desktop. Make sure the referenced Python environment is `presidio_env`
    in the options (its home directory should be `C:\Users\<your-username>\miniconda3\envs\presidio_env`).
    Keep in mind that in case you can't find the path to a specific environment, activate
    it in the Anaconda Prompt (`conda activate <your-env>`) and then enter `where
    python`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the ribbon, click on the **Excel** icon to import data from Excel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Importing data from Excel](img/file161.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.5 – Importing data from Excel
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Open** dialog box, select the aforementioned `CustomersCreditCardAttempts.xlsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Navigator** window, select the `Customers` sheet and then click
    on **Transform Data**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Selecting the Customers sheet and clicking on Transform Data](img/file162.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.6 – Selecting the Customers sheet and clicking on Transform Data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Transform** menu and then click on **Run Python Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the script from the `01-anonymize-data-in-power-bi-python.py` file into
    the Python script editor and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Power BI needs you to provide it with data privacy information, you already
    know how to proceed based on what you've seen in *Chapter 5*, *Using Regular Expressions
    in Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are only interested in the `df` dataset. So, click on its **Table** value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Selecting the dataset df as the result of the Python script
    transformation](img/file163.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.7 – Selecting the dataset df as the result of the Python script transformation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, person names in the `Name` and `Notes` columns and emails in
    the `Email` and `Notes` columns have been correctly anonymized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The transformed dataset as the result of the Python script](img/file164.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – The transformed dataset as the result of the Python script
  prefs: []
  type: TYPE_NORMAL
- en: You can now click **Close & Apply** in the **Home** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the person name contained in the `Notes` column has also been anonymized.
    This is the result of applying NER algorithms used by the **SpaCy** engine, which
    works under the hood of Presidio.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the de-identification technique used (tokenization) doesn’t preserve
    the statistical characteristics of the dataset, since applying the procedure to
    the same personal data does not return the same de-identified string.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you publish the report for which you have anonymized the data, the corresponding
    dataset will also be published. Users who can only access the dataset (and not
    the source Excel file) *will only see the anonymized data*, without having the
    ability to learn about the associations with the original data that has been replaced.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks to anonymization, you can now develop your reports without having to
    worry about the danger of exposing sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how it is possible to do the same thing in R.
  prefs: []
  type: TYPE_NORMAL
- en: Anonymizing data using R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can implement a data anonymization process in R as well. As long as you
    are identifying strings using regular expressions in R, the processing is quite
    fast. However, when natural language processing techniques like NER need to be
    implemented, the most widely adopted R packages available often consist of wrappers
    of open source modules developed in other languages. For example, the **openNLP**
    R package is an interface to the **Apache OpenNLP** toolkit, based on machine
    learning algorithms written in **Java**. In order for the `openNLP` package to
    interface with **OpenNLP** software, its installation also requires as a dependency
    the `rJava` package, which enables the dialogue between the R and Java worlds.
  prefs: []
  type: TYPE_NORMAL
- en: In order to implement the same anonymization features developed in Python in
    the previous section in R, you will make use of another widely used R package
    for NLP operations called `spacyr`. This library provides a convenient R wrapper
    around the Python `spacy` module. In the previous section, you saw that the Python
    module called `presidio` installs behind the scenes the same `spacy` module used
    by `spacyr`. If you're wondering how to run Python code from an R module, remember
    that, in *Chapter 3*, *Configuring Python with Power BI*, you ran Python code
    through **RStudio** using the R package called `reticulate`. Just as `rJava` takes
    care of interfacing R with the Java VM, so `reticulate` allows R to interface
    with a Python environment and execute Python code. In a nutshell, the R code you
    are going to develop does nothing more than execute the functionality of the `spacy`
    Python module you used in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember that you could have used regular expressions to replace email addresses
    with dummy data. Instead, replacing person names within free text is only possible
    with an NLP function that recognizes named entities. Hence the need to use a package
    like `spacyr`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Just as you did in the previous section, here you will also anonymize the content
    of the Excel file, `CustomersCreditCardAttempts.xlsx`, through tokenization. Tokens
    in R will be generated using the `stringi` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, the R code in the `02-anonymize-data-in-power-bi-r.R` file you can
    find in the `Chapter06` folder performs the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the libraries needed to execute the code. In particular, you will use `stringr`,
    `dplyr`, and `purrr` from the `Tidyverse` to operate data wrangling; `spacyr`
    and `stringi` are used for data anonymization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the `anonymizeEmails` function, used to anonymize emails, to a free text.
    It uses the `spacyr` function’s `spacy_parse()` with the additional `like_email`
    attribute. As it can identify multiple email addresses into a single text, the
    `str_replace_all()` function is used to replace all the found occurrences with
    a token generated by the `stri_rand_strings` function of the `stringi` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the `anonymizeNames` function, used to anonymize person names, to a free
    text. It contains more complex logic than the previous function because a person's
    name can consist of multiple tokens that are not always separated by a space (for
    example, the name `Roma Rodriguez-Bailey`). Therefore, in order to identify the
    set of all tokens referring to a single person, we must construct a regex that
    references the first and last tokens (from the previous example, `Roma.*?Bailey`),
    which is able to match the entire name. As you can see, there was no need to have
    to implement all of this logic in the previous section, because the Python Presidio
    module takes care of all of these cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You must initialize `spacyr` so that it references a Python environment containing
    the `spacy` module installed. Generally, if you haven''t already installed `spacy`
    in an environment, you can use `spacyr`''s `spacy_install()` function, which sets
    up a new Python environment with everything you need to make it work properly.
    In our case, we''ve already created the Python environment, `presidio_env`, in
    the previous section, which contains both the `spacy` module and the trained `en_core_web_lg`
    model to extract language attributes using written English samples taken from
    the web. It is then enough to reference the environment `presidio_env` path in
    the `spacy_initialize()` function to correctly configure `spacyr`. Here is the
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run it in RStudio, you’ll get something similar to the following message
    if all is working correctly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For each row of the dataset previously loaded in Power BI (or using the `readxl`
    package to test the code in RStudio), apply the `anonymizeEmail` function to the
    `Email` and `Notes` columns, and apply the `anonymizeName` function to the `Name`
    and `Notes` columns. In order to apply the two functions defined previously to
    each element of a column, we used the `map()` function of the `purrr` package.
    More specifically, `map_chr()` returns the outputs in a vector of strings so that
    it can replace the column content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having briefly explained what the R script does, let''s get down to business.
    In order to use the `spacyr` R package, it must be installed in the latest R engine
    (in our case, MRO 4.0.2). These are the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Rstudio**, and be sure to select in the **Global Options** the most recent
    MRO engine you already installed, following the steps in *Chapter 2*, *Configuring
    R with Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since MRO by definition downloads new packages from a default **CRAN** (**Comprehensive
    R Archive Network**) snapshot back in time, in order to download the latest version
    of packages in `CRAN` you need to overwrite the referenced repository by running
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install the `spacyr` package by running the following code in the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are now ready to apply anonymization in Power BI to the content of the `CustomersCreditCardAttempts.xlsx`
    Excel file using R.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Power BI Desktop, and make sure the referenced R engine is your latest
    MRO version in the **Global Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the ribbon, click on the **Excel** icon to import data from Excel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Open** dialog box, select the aforementioned `CustomersCreditCardAttempts.xlsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Navigator** window, select the **Customers** sheet and then click
    on **Transform Data**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Selecting the Customers sheet and clicking on Transform Data](img/file165.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.9 – Selecting the Customers sheet and clicking on Transform Data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Transform** menu and then click on **Run R Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the script from the `02-anonymize-data-in-power-bi-r.R` file into the R
    script editor and click **OK**. Remember to change the environment path of your
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Power BI needs you to provide it with data privacy information, you already
    know how to proceed based on what you've seen in *Chapter 5*, *Using Regular Expressions
    in Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are only interested in the `df` dataset. So, click on its **Table** value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Selecting the dataset df as a result of the R script transformation](img/file166.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.10 – Selecting the dataset df as a result of the R script transformation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, person names in the `Name` and `Notes` column and emails in
    the `Email` and `Notes` columns have been correctly anonymized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – The transformed dataset as the result of the R script](img/file167.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – The transformed dataset as the result of the R script
  prefs: []
  type: TYPE_NORMAL
- en: You can then click **Close & Apply** in the **Home** tab.
  prefs: []
  type: TYPE_NORMAL
- en: As you could see, the execution of the R script took longer than that of the
    Python script. Clearly, the overhead of passing information through `reticulate`
    makes a difference.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you need to anonymize a not-so-small dataset, it is advisable to do it directly
    using a Python script for much better performance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Again, the dataset resulting from the publication of this report will contain
    only the anonymized data, without giving Power BI users the ability to retrieve
    the original data.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now how to pseudonymize the data in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudonymizing data in Power BI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike anonymization, pseudonymization maintains the statistical characteristics
    of the dataset by transforming the same input string into the same output string,
    and keeps track of replacements that have occurred, allowing those with access
    to this mapping information to obtain the original dataset again.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, pseudonymization replaces sensitive data with **fake strings** (**pseudonyms**),
    having the same *form* as the original one, making the de-identified data more
    realistic.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the analytical language used, there are different solutions driven
    by the different packages available that lead to the same result. Let's see how
    to apply pseudonymization in Power BI to the contents of the same Excel file used
    in the previous sections with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudonymizing data using Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The modules and the code structure you will use are quite similar to those
    already used for anonymization. One difference is that, once the sensitive entities
    are identified, they are replaced by fake entities of the same type. The fake
    data generators par excellence in Python are two: **Faker** ([https://faker.readthedocs.io/](https://faker.readthedocs.io/))
    and **Mimesis** ([https://mimesis.readthedocs.io/](https://mimesis.readthedocs.io/)).
    In our example, we''ll use Faker, which is inspired by the library of the same
    name previously developed for **PHP**, **Perl**, and **Ruby**.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, what changes is the logic of the two custom functions used to de-identify
    entities and the addition of the management of two dictionaries (`emails_dict`
    and `names_dict`) to maintain the mapping between personal data and fake data.
  prefs: []
  type: TYPE_NORMAL
- en: We've also added a little more *salt* to the handling of the fake data – person
    names and email addresses are generated considering the country of each individual
    in the dataset, passing it as a parameter in custom functions. For example, if
    the individual is German, the generated person name will be a typical German name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see in detail what this is all about. The referenced Python file is
    `03-pseudonymize-data-in-power-bi-python.py`, which you can find in the `Chapter06`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: While, in the case of anonymization, the `anonymizer.anonymize()` function was
    used to replace all entities identified using the `analyzer.analyze()` function
    in one go, now, after the same entity identification, we must *first check if
    each identified single entity has already been mapped to a fake string*. If the
    entity is in its own specific dictionary, you retrieve the associated fake string
    and use that to pseudonymize the text. Otherwise, you generate a new fake string
    and add it to the dictionary, associating it with the entity in question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the pseudonymization of all expected columns is complete, the mapping dictionaries
    (both for names and emails) are persisted to `pkl` files. These are unpickled
    and used as mapping dictionaries whenever new Excel data needs to be pseudonymized,
    and then at each refresh of the dataset. This ensures that the same pseudonyms
    are always used for the same personal data and also for new Excel rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to use the `faker` module as mentioned before, you need to install
    it in the `presidio_env` environment in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Anaconda Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter and run the following code to switch to the newly created environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter and run the following code to install `Faker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this is done, you can start to implement pseudonymization in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Power BI Desktop and make sure the referenced Python environment is
    `presidio_env` in **Options** (its home directory should be `C:\Users\<your-username>\miniconda3\envs\presidio_env`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Power BI ribbon, click on the **Excel** icon to import data from Excel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Open** dialog box, select the aforementioned `CustomersCreditCardAttempts.xlsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Navigator** window, select the **Customers** sheet and then click
    on **Transform Data**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Selecting the Customers sheet and clicking on Transform Data](img/file168.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.12 – Selecting the Customers sheet and clicking on Transform Data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Transform** menu and then click on **Run Python Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the script from the `03-pseudonymize-data-in-power-bi-python.py` file into
    the Python script editor and click **OK**. Remember to change the environment
    path of your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Power BI needs you to provide it with data privacy information, you already
    know how to proceed based on what you've seen in *Chapter 5*, *Using Regular Expressions
    in Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are only interested in the `df` dataset. So, click on its **Table** value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Selecting the dataset df as a result of the Python script transformation](img/file169.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.13 – Selecting the dataset df as a result of the Python script transformation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, person names in the `Name` and `Notes` column and emails in
    the `Email` and `Notes` columns have been correctly pseudonymized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – The transformed dataset as the result of the Python script](img/file170.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – The transformed dataset as the result of the Python script
  prefs: []
  type: TYPE_NORMAL
- en: You can then click **Close & Apply** in the **Home** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as in the case of anonymization, the `Name`, `Email`, and `Notes` columns
    have been correctly de-identified. What we have in addition is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The consistency of the person names and emails with the individual's country,
    although `Faker` does not currently allow you to maintain consistency between
    generated names and their respective emails. For example, in *Figure 6.14*, you
    can see an Italian name and an email using a different Italian name at *row 11*
    (the name *Alfio Migliaccio* is not used in the email).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of the `emails_dict` and `names_dict` mapping dictionaries to ensure
    that statistical analysis can be done on the pseudonymized dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fact that we can trace the original data back thanks to these mapping dictionaries
    that are persisted to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, when you publish the report to share it with Power BI users,
    you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Power BI users who can only access the dataset will only see the de-identified
    data. By also providing mapping dictionaries to those with the right permissions,
    you ensure that they can trace the original data back for any legal needs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Did you notice that, thanks to the Python script, you were able to write to
    file information resulting from the data processing carried out in Power BI?
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead of using serialized dictionaries in PKL files, you could have, for example,
    written the information to **CSV** or Excel files.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simply put, you have the ability to log information outside of Power BI. You'll
    learn more about this possibility in *Chapter 7*, *Logging Data from Power BI
    to External Repositories*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now see how to implement pseudonymization, also in R.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudonymizing data using R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The libraries we will use for data pseudonymization in R are much the same
    as those used for anonymization in R. To fully simulate the functionality of the
    Python script developed in the previous section, we also need an R package that
    generates *fake data* to replace *sensitive data*, such as person names and email
    addresses. In Python, we used the Faker module, one of the most widely used for
    that purpose. A package with the same functionality has been developed in R, also
    inspired by the same code used for Faker, and is called **charlatan** ([https://github.com/ropensci/charlatan](https://github.com/ropensci/charlatan)).
    Additionally, the R code for pseudonymization will follow the same logic already
    implemented in the Python script in the previous section, with minor differences
    being as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of dictionaries, named lists are used for mapping pseudonyms to original
    entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Named lists are serialized and persisted in **RDS** files, instead of PKL files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to use the `charlatan` R package, it must be installed in the latest
    R engine (in our case, MRO 4.0.2). These are the necessary steps to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Rstudio, and be sure to select in the **Global Options** the most recent
    MRO engine you already installed following the steps in *Chapter 2*, *Configuring
    R with Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since MRO by definition downloads new packages from a default CRAN snapshot
    back in time, in order to download the latest version of packages in CRAN you
    need to overwrite the referenced repository by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install the `charlatan` package by running the following code in the
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You are now ready to apply pseudonymization in Power BI to the content of the
    `CustomersCreditCardAttempts.xlsx` Excel file using R. So, let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Power BI Desktop, and make sure the referenced R engine is your latest
    MRO version in the **Global Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the ribbon, click on the **Excel** icon to import data from Excel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Open** dialog box, select the aforementioned `CustomersCreditCardAttempts.xlsx`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Navigator** window, select the **Customers** sheet and then click
    on **Transform Data**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Selecting the Customers sheet and clicking on Transform Data](img/file171.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.15 – Selecting the Customers sheet and clicking on Transform Data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Transform** menu and then click on **Run R Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the script from the `04-pseudonymize-data-in-power-bi-r.R` file into the
    R script editor and click **OK**. Remember to change the needed paths in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Power BI needs you to provide it with data privacy information, you already
    know how to proceed based on what you've seen in *Chapter 5*, *Using Regular Expressions
    in Power BI*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are only interested in the `df` dataset. So, click on its **Table** value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Selecting the dataset df as a result of the R script transformation](img/file172.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.16 – Selecting the dataset df as a result of the R script transformation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, person names in the `Name` and `Notes` column and emails in
    the `Email` and `Notes` columns have been correctly anonymized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.17 – The transformed dataset as the result of the R script](img/file173.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – The transformed dataset as the result of the R script
  prefs: []
  type: TYPE_NORMAL
- en: You can then click **Close & Apply** in the **Home** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, charlatan does not yet support the `it_IT` locale. But since
    it is an open source project, it is possible that it will be implemented by the
    community soon. This, however, does not prevent us from obtaining a very good
    pseudonymization of the dataset and of the report that will be published on the
    Power BI service, since, in the absence of a specific locale, the default one
    (`en_US`) is always used.
  prefs: []
  type: TYPE_NORMAL
- en: It has been said that the implementation of de-identification procedures in
    R is certainly less performant than in Python. However, the gap can be partially
    bridged by the introduction of parallelization of operations with multitasking.
    We'll look at this technique in detail in *Chapter 8*, *Calling External APIs
    To Enrich Your Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned the main differences between anonymization and
    pseudonymization. You also learned which techniques are most frequently used to
    adopt both of the de-identification processes.
  prefs: []
  type: TYPE_NORMAL
- en: You have also applied the process of anonymization by tokenization and the process
    of pseudonymization by generating similar pseudonyms in Power BI with both Python
    and R.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to log data derived from operations
    done with **Power Query** in Power BI to external repositories.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For additional reading, check out the following books and articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pseudonymization, Anonymization and the GDPR* ([https://www.termsfeed.com/blog/gdpr-pseudonymization-anonymization/](https://www.termsfeed.com/blog/gdpr-pseudonymization-anonymization/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Symmetric and Asymmetric Encryption* ([https://medium.com/hackernoon/symmetric-and-asymmetric-encryption-5122f9ec65b1](https://medium.com/hackernoon/symmetric-and-asymmetric-encryption-5122f9ec65b1))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Cryptography with Python Tutorial* ([https://www.tutorialspoint.com/cryptography_with_python/](https://www.tutorialspoint.com/cryptography_with_python/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Encryption in R with cyphr* ([https://docs.ropensci.org/cyphr/articles/cyphr.html](https://docs.ropensci.org/cyphr/articles/cyphr.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
