["```py\nText with *italic* text inside.\nText with **bold** text inside.\nText with **bold and *italic* text**.\n```", "```py\n# Header Level 1\n\n## Header Level 2\n\n### Header Level 3\n\n#### Header Level 4\n```", "```py\n1\\. This is an ordered item\n    - This is an unordered item\n    - This is another unordered item\n2\\. This is another ordered item\n    - [ ] This is a pending task\n    - [X] This is a completed task\n- [ ] This is another incomplete task\n    1\\. Which contains one ordered item\n    - And one unordered item\n```", "```py\n| First column | Second column | Third column |\n|--------------|---------------|--------------|\n| Item one     | Item two      | Item three   |\n| Item four    | Item five     | Item six     |\n| Item seven   | Item eight    | Item nine    |\n```", "```py\n[The R Project for Statistical Computing](https://www.r-project.org/) \n[Packt Publishing](https://www.packtpub.com/)\n```", "```py\n[The R Project for Statistical Computing](./images/r.png) \n\n[Packt Publishing](./images/packt-publishing.png)\n```", "```py\n> Look deep into nature, and then you will understand everything better.\n>\n> —Albert Einstein\n```", "```py` ```", "```py`). Optionally, you may specify the programming language in the code block to activate syntax highlighting for that code.\n\nIf we use the following input:\n\n```", "```pyr\nadd_two_numbers <- function(x, y) {\n    return(x + y)\n}\n```", "```py\n\nWe get the following output:\n\n```", "```py\n\n# Mathematics\n\nEmbedding mathematics in Markdown is similar to embedding code. However, instead of using backticks (“ ’), you use dollar signs ($). If you want to use mathematics blocks, you may use two (instead of three) dollar signs. Keep in mind that this is not a standard Markdown feature, and, even though R Markdown does support it, it may not be supported in other systems. If you're trying to create a web page using Markdown, to be able to use LaTeX-like code, you need to make sure that the system loads the `MathJax` library to the browser.\n\nIf we use the following input:\n\n```", "```py\n\nWe get the following output:\n\n![](img/00056.jpeg)\n\n# Extending Markdown with R Markdown\n\nAs mentioned earlier, R Markdown extends Markdown. It offers many features to enhance it. There are various examples in R Markdown's documentation ([http://rmarkdown.rstudio.com/gallery.html](http://rmarkdown.rstudio.com/gallery.html)) where you may get a sense of what's possible. In this section, we will focus on code chunks, tables, graphs, local and global chunk options, and caching.\n\n# Code chunks\n\n*Code chunks* are simply standard Markdown code blocks, which have a special syntax that uses curly braces (`{}`) along the top line of the block to send metadata to knitr, about how the block should be treated. The metadata sent is in the form of parameters with the `*key = value*` format. We'll cover more on this in the *Chunk options* section.\n\nWhen you use a block header like (```", "```py{r chunk-label} ```", "```py\n```", "```py\n```", "```py\n1 + 2\n[1] 3\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\nlibrary(rmarkdown)\noutputs <- c(\"html_document\", \"pdf_document\")\nrender(\"document.Rmd\", outputs)\n```", "```py\nsource(\"../../chapter-05/functions.R\")\nall_time <- readRDS(\"../../chapter-04/results/sales.rds\")\n```", "```py\nfilter_n_days_back <- function(data, n) {\n    if (is.null(n)) {\n        return(data)\n    }\n    n_days_back <- Sys.Date() - n\n    return(data[data[, \"DATE\"] >= n_days_back, ])\n}\n```", "```py\nfilter_n_days_back <- function(data, n, from_date = NULL) {\n    if (is.null(n)) {\n        return(data)\n    }\n    if (is.null(from_date)) {\n        from_date <- Sys.Date()\n    } else if (is.character(from_date)) {\n        from_date <- as.Date(from_date)\n    }\n    n_days_back <- from_date - n\n    return(data[data[, \"DATE\"] >= n_days_back, ])\n}\n```", "```py\nmax_date <- max(all_time$DATE)\nthis_week <- filter_n_days_back(all_time, 7, max_date)\nlast_week <- filter_n_days_back(all_time, 7, max_date - 7)\n```", "```py\nproportions_table <- function(data, variable) {\n    return(prop.table(table(data[, variable])))\n}\n\nquantity_all <- proportions_table(all_time, \"QUANTITY\")\ncontinent_all <- proportions_table(all_time, \"CONTINENT\")\nprotein_all <- proportions_table(all_time, \"PROTEIN_SOURCE\")\n\nquantity_last <- proportions_table(last_week, \"QUANTITY\")\ncontinent_last <- proportions_table(last_week, \"CONTINENT\")\nprotein_last <- proportions_table(last_week, \"PROTEIN_SOURCE\")\n\nquantity_this <- proportions_table(this_week, \"QUANTITY\")\ncontinent_this <- proportions_table(this_week, \"CONTINENT\")\nprotein_this <- proportions_table(this_week, \"PROTEIN_SOURCE\")\n```", "```py\nquantity_all\n#>     1     2     3     4    5    6    7    8    9\n#> 13.22 27.78 26.09 18.29 9.19 3.77 1.29 0.30 0.07 \nquantity_last\n#>       1       2       3       4      5      6      7      8\n#> 12.1387 33.5260 28.3234 12.7160 5.7803 5.7803 1.1560 0.5780\n\nquantity_this\n#>  1  2  3  4  5  6  7  8\n#> 12 36 25 14  7  4  1  1\n```", "```py\nequal_length_data <- function(data_1, data_2) {\n    ml <- min(length(data_1), length(data_2))\n    return(list(\n        names = names(data_1[1:ml]),\n        data_1 = as.numeric(data_1[1:ml]),\n        data_2 = as.numeric(data_2[1:ml]),\n        deleted = ml != length(data_1) || ml != length(data_2))\n    )\n}\n```", "```py\nparts <- equal_length_data(quantity_all, quantity_this)\n\nparts$names\n#> [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"\n\nparts$data_1\n#> [1] 0.1322 0.2778 0.2609 0.1829 0.0919 0.0377 0.0129 0.0030\n\nparts$data_2\n#> [1] 0.12 0.36 0.25 0.14 0.07 0.04 0.01 0.01\n\nparts$deleted\n#> [1] TRUE\n```", "```py\nprepare_data <- function(parts) {\n    data <- data.frame(\"Category\" = parts$names)\n    data$Difference <- parts$data_2 - parts$data_1\n    data$Percent <- (parts$data_2 - parts$data_1) / parts$data_1 * 100\n    data$Sign <- ifelse(data$Difference >= 0, \"Positive\", \"Negative\")\n    data$Color <- ifelse(data$Difference &gt;= 0, GREEN, RED)\n    data$Before <- parts$data_1\n    data$After <- parts$data_2\n    return(data)\n}\n```", "```py\nRED <- \"#F44336\"\nGREEN <- \"#4CAF50\"\n```", "```py\ndifference_bars <- function(data_1, data_2, before, after) {\n    parts <- equal_length_data(data_1, data_2)\n    data <- prepare_data(parts)\n    p <- ggplot(data, aes(Category, Difference, fill = Sign))\n    p <- p + geom_bar(stat = \"identity\", width = 0.5)\n    p <- p + scale_fill_manual(values = \n    c(\"Positive\" = GREEN, \"Negative\" = RED))\n    p <- p + theme(legend.position = \"none\", \n    text = element_text(size = 14))\n    p <- p + scale_y_continuous(labels = scales::percent)\n    p <- p + labs(title = paste(before, \"vs\", after))\n    p <- p + labs(x = \"\", y = \"\")\n    if (parts$deleted) {\n        p <- p + labs(subtitle = \n            \"(Extra categories have been deleted)\")\n    }\n    return(p)\n}\n```", "```py\ndifference_bars(quantity_all, quantity_this, \"This week\", \"All-time\")\ndifference_bars(continent_all, continent_this, \"This week\", \"All-time\")\ndifference_bars(protein_all, protein_this, \"This week\", \"All-time\")\n```", "```py\nchange_lines <- function(data_1, data_2, before, after, x_adjustment) {\n    parts <- equal_length_data(data_1, data_2)\n    data <- prepare_data(parts)\n    percent_labels <- paste(round(data$Percent, 2), \"%\", sep = \"\")\n    before_labels <- paste(\n        data$Category, \" (\", round(data$Before, 2), \"%)\", sep = \"\")\n    after_labels <- paste(\n        data$Category, \" (\", round(data$After, 2), \"%)\", sep = \"\")\n    percent_y <- (\n        apply(data[, c(\"Before\", \"After\")], 1, min) +\n        abs(data$Before - data$After) / 2\n    )\n\n    p <- ggplot(data)\n    p <- p + geom_segment(\n        aes(x = 1, xend = 2, y = Before, yend = After, col = Sign), \n        show.legend = FALSE, \n        size = 1.5)\n\n    p <- p + scale_color_manual(\n        values = c(\"Positive\" = GREEN, \"Negative\" = RED))\n\n    p <- p + geom_vline(xintercept = 1, linetype = \"dashed\", size = 0.8)\n    p <- p + geom_vline(xintercept = 2, linetype = \"dashed\", size = 0.8)\n    p <- p + geom_text(\n        label = before, \n        x = 0.7, \n        y = 1.1 * max(data$Before, data$After), \n        size = 7)\n\n    p <- p + geom_text(\n        label = after, \n        x = 2.3, \n        y = 1.1 * max(data$Before, data$After), \n        size = 7)\n\n    p <- p + geom_text_repel(\n        label = before_labels, \n        x = rep(1 - x_adjustment, nrow(data)), \n        y = data$Before, size = 5, direction = \"y\", \n        segment.color = NA)\n\n    p <- p + geom_text_repel( label = after_labels, \n        x = rep(2 + x_adjustment, nrow(data)), \n        y = data$After, size = 5, \n        direction = \"y\", \n        segment.color = NA)\n\n    p <- p + geom_text_repel(label = percent_labels, \n        x = rep(1.5, nrow(data)), \n        y = percent_y, col = data$Color, size = 5, \n        direction = \"y\", \n        segment.color = NA)\n\n    p <- p + theme(\n        axis.ticks = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank()\n    )\n\n    p <- p + ylim(0, (1.1 * max(data$Before, data$After)))\n    p <- p + labs(x = \"\", y = \"\")\n    p <- p + xlim(0.5, 2.5)\n    return(p)\n}\n```", "```py\nchange_lines(quantity_last, quantity_this, \"This week\", \"Last week\", 0.2)\nchange_lines(continent_last, continent_this, \"This week\", \"Last week\", 0.3)\nchange_lines(protein_last, protein_this, \"This week\", \"Last week\", 0.5)\n```", "```py\n---\ntitle:  \"The Food Factory\"\nauthor: \"Weekly Update\"\ndate:   \"`r Sys.Date()`\"\noutput: ioslides_presentation\n---\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n```", "```py\n## Changes in quantity (1/2)\n\n```", "```py\n\n## Changes in quantity (2/2)\n\n```", "```py\n\n## Changes in continent (1/2)\n\n```", "```py\n\n## Changes in continent (2/2)\n\n```", "```py\n\n## Changes in protein source (1/2)\n\n```", "```py\n\n## Changes in protein source (2/2)\n\n```", "```py\n```", "```py\n## Profit ratio vs continent\n\n```", "```py\n\n## Cost vs price\n\n```", "```py\n\n## Price vs profit\n\n```", "```py\n## Historic pricing\n\n```", "```py\n\n## Top 5 customers' preferences\n\n```", "```py\n\n## Customer messages geolocations\n\n```", "```py\n```", "```py\n## Latest messages from Twitter\n\n```", "```py\n```", "```py\n```", "```py\n```", "```py\nformat_tweets <- function(data) {\n    write(paste(\n        data$screenName, \" (\", data$created, \"): \\n\",\n        iconv(enc2utf8(substr(data$text, 1, 65)), sub = \"\"),\n        \"(...) \\n\", sep = \"\"\n    ), stdout())\n}\n```", "```py\nSession info ------------------------------------------------------\nsetting value\nversion R version 3.4.2 (2017-09-28)\nsystem x86_64, linux-gnu\nui X11\nlanguage (EN)\ncollate en_US.UTF-8\ntz America/Mexico_City\ndate 2017-10-30\n\nPackages --------------------------------------------------------\npackage * version date source\nassertthat 0.2.0 2017-04-11 CRAN (R 3.3.2)\nbase * 3.4.2 2017-10-28 local\nbase64enc 0.1-3 2015-07-28 CRAN (R 3.3.2)\nbindr 0.1 2016-11-13 CRAN (R 3.3.2)\n[... truncated ...]\n```"]