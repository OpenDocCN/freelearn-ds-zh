["```py\n#create Figure 8.4\n#import packages\n#install dynetx if needed\n#!pip install dynetx\nimport dynetx as dn\nimport networkx as nx\nimport matplotlib.pyplot as plt\n#create an empty graph\ng = dn.DynGraph()\n#add vertices and edges with time information added\n#adding the edge (\"D\",\"E\") at t=0 that vanishes at time e=2\ng.add_interaction(u=\"D\", v=\"E\", t=0, e=2)\n# adding some edges at time t=1\ng.add_interactions_from([(\"C\", \"F\"), (\"F\", \"E\")], t=1)\n# adding some edges at time t=2\ng.add_interactions_from([(\"B\", \"E\"), (\"A\", \"B\")], t=2)\n# adding some edges at time t=3\ng.add_interactions_from([(\"B\", \"C\"),(\"C\",\"D\")], t=3)\n# adding some edges at time t=4\ng.add_interaction(u=\"A\", v=\"C\", t=4)\n```", "```py\n#create plots for each time point\nfor i in range (5):\n    g1 = g.time_slice(i)\n    nx.draw(g1,with_labels=True)\n    print (\"snapshot at t = \", i)\n    plt.show()\n```", "```py\n#create lists of edges at each time point\nfor i in range (5):\n    g1 = g.time_slice(i)\n    print (\"snapshot at t = \", i)\n    print(g1.edges())\n```", "```py\nsnapshot at t =  0\n[('D', 'E')]\nsnapshot at t =  1\n[('D', 'E'), ('E', 'F'), ('F', 'C')]\nsnapshot at t =  2\n[('E', 'B'), ('B', 'A')]\nsnapshot at t =  3\n[('D', 'C'), ('C', 'B')]\nsnapshot at t =  4\n[('C', 'A')]\n```", "```py\n#print interaction stream\nfor i in g.stream_interactions():\n    print(i)\n```", "```py\n#output of interactions for each time point\n('D', 'E', '+', 0)\n('C', 'F', '+', 1)\n('F', 'E', '+', 1)\n('D', 'E', '-', 2)\n('B', 'E', '+', 2)\n('A', 'B', '+', 2)\n('B', 'C', '+', 3)\n('C', 'D', '+', 3)\n('A', 'C', '+', 4)\n```", "```py\n#import packages\nimport networkx as nx\nimport dynetx as dn\nfrom past.builtins import xrange\nimport matplotlib.pyplot as plt\n#create a dynamic graph object\ncrocodile = dn.DynGraph() # empty dynamic graph\n#fill in relevant interactions\ncrocodile.add_interaction(u=\"Croc1\", v=\"Croc2\",t=0)\ncrocodile.add_interactions_from(\n    [(\"Croc1\",\"Croc2\"),(\"Croc3\",\"Croc4\")],t=1)\ncrocodile.add_interactions_from(\n    [(\"Croc1\",\"Croc2\"),(\"Croc3\",\"Croc4\")],t=2)\ncrocodile.add_interactions_from([(\"Croc1\",\"Croc2\")],t=3)\ncrocodile.add_interactions_from(\n    [(\"Croc1\",\"Croc2\"),(\"Croc2\",\"Croc3\")],t=4)\ncrocodile.add_interactions_from(\n    [(\"Croc1\",\"Croc2\"),(\"Croc2\",\"Croc3\")],t=5)\ncrocodile.add_interactions_from([(\"Croc1\",\"Croc2\")],t=6)\ncrocodile.add_interactions_from([(\"Croc3\",\"Croc4\")],t=7)\ncrocodile.add_interactions_from([(\"Croc3\",\"Croc4\")],t=8)\ncrocodile.add_interactions_from(\n    [(\"Croc2\",\"Croc3\"),(\"Croc3\",\"Croc4\")],t=9)\ncrocodile.add_interactions_from([(\"Croc2\",\"Croc3\")],t=10)\ncrocodile.add_interactions_from(\n    [(\"Croc1\",\"Croc2\"),(\"Croc2\",\"Croc3\")],t=11)\n#plot time slices\nfor i in range(12):\n    g1 = crocodile.time_slice(i)\n    nx.draw(g1,with_labels=True)\n    plt.show()\n```", "```py\nfor i in crocodile.stream_interactions():\n    print(i)\n```", "```py\n('Croc1', 'Croc2', '+', 0)\n('Croc3', 'Croc4', '+', 1)\n('Croc2', 'Croc3', '+', 4)\n('Croc1', 'Croc2', '-', 7)\n('Croc3', 'Croc4', '+', 7)\n('Croc2', 'Croc3', '+', 9)\n('Croc3', 'Croc4', '-', 10)\n('Croc1', 'Croc2', '+', 11)\n('Croc2', 'Croc3', '-', 12)\n```", "```py\n#run epidemic model\nimport ndlib.models.ModelConfig as mc\n%matplotlib inline\nfrom ndlib.viz.mpl.DiffusionTrend import DiffusionTrend\nimport ndlib.models.dynamic as dm\n#model selection\nmodel = dm.DynSIRModel(crocodile)\n#model configuration\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.3) # infection rate\nconfig.add_model_parameter('gamma', 0.05) # recovery rate\nconfig.add_model_parameter(\"percentage_infected\", 0.25)\nmodel.set_initial_status(config)\n# simulate snapshot based execution\niterations = model.execute_snapshots()\n#iterations = model.execute_iterations()\ntrends = model.build_trends(iterations)\n#visualize trends\nviz = DiffusionTrend(model, trends)\nviz.plot()\n```", "```py\n#obtain network centrality statistics for crocodile network\nfor i in range(12):\n    dg = crocodile.time_slice(i)\n    try:\n        # computing betweenness centrality\n        dd = nx.betweenness_centrality(dg)\n        plt.plot(dd.values())\n        plt.title(\"betweenness centrality\")\n        print()\n        plt.show()\n        print (\"timestamp = \", i,\",\", \"nodes =\",\n            len(dg.nodes()),\",\",\n            \"max degree = \",max(dg.degree().values()))\n        print (\"diameter = \", nx.diameter(dg))\n        print (\"radius = \", nx.radius(dg))\n    except:\n        print('Infinite value observed.')\n```", "```py\n#create empty graph\nblue_heron = dn.DynGraph() # empty dynamic graph\n#add relevant interactions\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h4\",\"h5\")],t=0)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h5\",\"h6\")],t=1)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h5\",\"h6\"),(\"h6\",\"h7\")],t=2)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h3\",\"h4\"),(\"h6\",\"h7\")],t=3)\nblue_heron.add_interactions_from(\n    [(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h4\",\"h5\"),(\"h6\",\"h7\")],t=4)\nblue_heron.add_interactions_from([(\"h3\",\"h4\")],t=5)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h4\",\"h5\"),\n        (\"h5\",\"h6\")],t=6)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h4\",\"h5\"),\n        (\"h5\",\"h6\"),(\"h6\",\"h7\")], t=7)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h2\",\"h3\"),(\"h3\",\"h4\"),(\"h5\",\"h6\"),\n        (\"h6\",\"h7\")],t=8)\nblue_heron.add_interactions_from(\n    [(\"h1\",\"h2\"),(\"h3\",\"h4\"),(\"h5\",\"h6\"),(\"h6\",\"h7\")],t=9)\n#plot network over time\nfor i in range(10):\n    g1 = blue_heron.time_slice(i)\n    nx.draw(g1,with_labels=True)\n    print()\n    plt.show()\n```", "```py\n#run epidemic model\nimport ndlib.models.ModelConfig as mc\n%matplotlib inline\nfrom ndlib.viz.mpl.DiffusionTrend import DiffusionTrend\n#from ndlib.viz.mpl.DiffusionPrevalence import DiffusionPrevalence\nimport ndlib.models.dynamic as dm\n# model selection\nmodel = dm.DynSIRModel(blue_heron)\n# model configuration\nconfig = mc.Configuration()\nconfig.add_model_parameter('beta', 0.4) # infection rate\nconfig.add_model_parameter('gamma', 0.2) # recovery rate\nconfig.add_model_parameter(\"percentage_infected\", 0.1)\nmodel.set_initial_status(config)\n# simulate snapshot based execution\niterations = model.execute_snapshots()\n#iterations = model.execute_iterations()\ntrends = model.build_trends(iterations)\n#visualize trends\nviz = DiffusionTrend(model, trends)\nviz.plot()\n```", "```py\n#obtain network centrality statistics for the blue heron network\nfor i in range(10):\n    dg = blue_heron.time_slice(i)\n    try:\n        # computing betweenness centrality\n        dd = nx.betweenness_centrality(dg)\n        plt.plot(dd.values())\n        plt.title(\"betweenness centrality\")\n        print()\n        plt.show()\n        print (\"timestamp = \", i,\",\", \"nodes =\",\n            len(dg.nodes()),\",\",\n            \"max degree = \",max(dg.degree().values()))\n        print (\"diameter = \", nx.diameter(dg))\n        print (\"radius = \", nx.radius(dg))\n    except:\n        print('Infinite value observed.')\n```"]