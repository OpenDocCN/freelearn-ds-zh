- en: Introducing Arcade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying prebuilt Arcade expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Arcade labeling expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Arcade symbology expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, Esri products have supported many different expression and scripting
    languages. These have included AML, Avenue, JScript, VB Script, SQL, and Python.
    Some of these languages were developed by Esri, such as AML and Avenue, while
    others were common IT industry languages, such as JScript, VB Script, Python,
    and SQL. Each of these were suited to specific uses on the desktop, servers, or
    online. However, now we find ourselves regularly having to work in all these environments
    at the same time. We create a map in ArcGIS Pro on our desktop, then publish to
    ArcGIS Enterprise, and later access it through the web on a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: This has begun to cause a problem as we work through these environments. Sometimes
    things we create that work great on the desktop do not translate to server or
    internet environments. This is often true for labels and symbology. So, to help
    bridge that gap, Esri has developed what they are calling a new expression language,
    Arcade.
  prefs: []
  type: TYPE_NORMAL
- en: Arcade is a lightweight and portable language that can be used across the ArcGIS
    platform. This means expressions you create in ArcGIS Pro will also work in ArcGIS
    Server, Portal, and ArcGIS Online. It can be used to control and display labels,
    perform mathematical calculations, manipulate symbology, and more. What makes
    Arcade unique is its inclusion of geometry types.
  prefs: []
  type: TYPE_NORMAL
- en: It was created from the beginning with that in mind, unlike other languages
    such as Python, which had to be customized to work with geometry.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between an expression language and other programming
    or scripting languages? The primary difference is that an expression language
    cannot be used to create standalone apps or add-ins. It must be used inside of
    another application such as ArcGIS Pro. So Arcade is not as flexible as a scripting
    language like Python. Having said that, the expressions you can create with Arcade
    can be very complex, including multiple lines of code. For this reason, you may
    see Arcade expressions also referred to as scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for Arcade is similar to other scripting languages such as Python
    or VB Script. For example, to indicate a text string, you simply enclose the desired
    string in single quotes. So, if you were creating an Arcade labeling expression
    and were to include `Lot Number` in the expression, those words would display
    as part of the label, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6dc3948-5a76-49c8-9b3e-71b02e8b61e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample of an Arcade expression for labeling a parcel with lot number
  prefs: []
  type: TYPE_NORMAL
- en: If you have ever created any labeling expressions in ArcGIS Pro or even in ArcMap,
    then the syntax shown in the graphic should look somewhat familiar. It is not
    that much different from Python or VB Script expressions. So, if you are already
    familiar with those, you should be able to pick up Arcade fairly quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few things you should know about Arcade syntax: first, it is not case sensitive,
    unlike Python. So a variable named Parcel is the same as parcel. To comment within
    your code, you can use either `//` for single-line comments or `/* */` for multiple-line
    comments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a single-line comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of multiple-line comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, variables may be declared within Arcade expressions and reassigned
    with new values, as illustrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Arcade is still very new. It first came out with the release of ArcGIS 10.5
    and ArcGIS Pro 1.4\. With each new release of ArcGIS and ArcGIS Pro, Esri increases
    the capabilities of Arcade. This means you can expect to do more and more with
    this new expression language as time goes on. If you would like to take a deeper
    dive into Arcade, you may want to go to [https://developers.arcgis.com/arcade/](https://developers.arcgis.com/arcade/).
    This is Esri's primary resource for information about Arcade.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to Arcade and how it works in ArcGIS
    Pro. You will start by exploring existing expressions  and learn how you can apply
    them in your projects. Then you will begin creating your own Arcade expressions.
    You will start by creating a labeling expression. Then you will learn how to create
    symbology expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Applying prebuilt Arcade expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the nice things about creating Arcade expressions is that you can save
    them so that they can be used in other maps or scenes, or even with other layers
    in the same map. These expression files have a `.lxp` file extension. This also
    allows you to easily share expressions with others, so you do not have to reinvent
    the wheel every time you need to make use of an Arcade expression.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will examine and apply a couple of existing Arcade expressions
    to layers within a map. You will start with a labeling expression that labels
    parcels with their **parcel identification number** (**PIN**) and the mapped acreage.
    Then you will examine another one that controls the visibility of a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will require you to access an ArcGIS Pro license and have the sample
    data installed. This recipe is able to be completed at all ArcGIS Pro license
    levels. You will also need a web browser that supports HTML 5 and JavaScript.
    This includes current versions of Chrome, Edge, Firefox, and Safari. Internet
    Explorer 11 or newer is also acceptable. Other browsers may also work but have
    not been tested by Esri.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will start by launching ArcGIS Pro and opening the Arcade project located
    in `C:\Student\ArcGISProCookbook\Chapter11\Arcade` using skills you have learned
    in previous recipes. The project should open with a map of the City of Thomaston,
    zoomed in to an area near the city center, as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1917f585-6e3b-42d7-a89e-8f3f53a48d18.png)'
  prefs: []
  type: TYPE_IMG
- en: City of Thomasville map
  prefs: []
  type: TYPE_NORMAL
- en: In the Contents pane, select the Parcels layer so the Feature Layer contextual
    menu appears in the ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that none of the parcels in the map are labeled, so you need
    to turn on labeling for the layer. Click on the Labeling tab in the ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Label button located in the Layer group on the Labeling tab. This
    will turn on the labels for the parcels, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16f9dff4-2cfc-443f-be55-533702b76499.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can see that each parcel contains a label that identifies one attribute
    associated with each parcel. If you look at the setting for the Field in the Label
    Class group in the Label tab, you will see it is displaying the values found in
    the PIN field. This is the tax parcel identification number. What you want to
    do is label each parcel with not only its PIN but also with its mapped acreage.
    Luckily, someone has already created an expression file that will do just that.
  prefs: []
  type: TYPE_NORMAL
- en: You can also right-click on a layer in the Contents pane and select Label from
    the menu to turn labeling on and off for a specific layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Labeling tab, click on the Expression button located to the right of
    the Field option in the Label Class group, as illustrated in the following screenshot.
    This will open the Label Class pane where you create labeling expressions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/186bd37b-8f17-414e-84b5-75fe6f7119db.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Label Class pane, set the Language to Arcade using the drop-down arrow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the labeling expression now. It should read $feature.PIN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $feature is one of two global variables used by Arcade. It allows you to access
    or call information associated with the features in the target layer. In this
    example, it is letting you access the PIN field in the attribute table. You can
    also use it to access geometry information such as area, length, and coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Below the Expression area, click on the Import button, which resembles a file
    folder. This will open the Import window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Import window, navigate to `C:\Student\ArcGISProCookbook\Chapter11`
    and select Label Parcels with PIN and Acres.lxp. Then click OK. This will import
    the expression into the Expression area in the Label Class pane. Now your Label
    Class pane should look similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46de96a0-cc76-4ff7-a827-aa5227ee9e1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have imported the expression into the Label Class pane, let’s
    take a look at it. This expression is set up to do a lot, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dea7b81d-8ef8-40a4-a8ae-d2754161abb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The expression starts with a text string, which will be displayed in the label.
    This is identified by the use of the single quotes enclosing the text string.
    That is followed by a +, which acts as a connector to the next part of the expression.
    The expression then retrieves the value for each parcel found in the PIN field
    of the layers attribute table. That value is then displayed after the Parcel No:
    text string from the first part of the expression. This is then followed by the
    TextFormatting variable, which creates a new line so that the following parts
    of the expression are displayed in another line. After that, the expression displays
    another text string, Acreage. Lastly, the expression retrieves the values for
    each parcel found in the Map_AC field of the attribute table. However, it does
    not just display the exact value. This expression takes it a step forward and
    rounds the values to two decimal places. It does this by invoking the round mathematical
    function and limiting it to two decimal places. The two decimal place limit is
    applied using the value after the field name.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how this expression is supposed to work, let’s apply it and
    then compare the results we see in this map to the explanation just provided.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Apply button at the bottom of the Label Class pane to apply the
    expression you just imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice how the labels in the map change and answer the question ahead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Question:** Did the labels change so that they now match the description
    of how the expression is supposed to work?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your map looks like the following screenshot, then yes, the expression performed
    exactly as described:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d038af0b-a63a-489c-b2c8-311dd934ecc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of labeling expression being applied
  prefs: []
  type: TYPE_NORMAL
- en: To a new user, this expression may seem complicated. However, it is a fairly
    simple one. These expressions can be much more complex, as you will find out next.
  prefs: []
  type: TYPE_NORMAL
- en: Close the Label Class pane and save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Streets layer in the Contents pane. Turn on the labels for this layer
    using skills you have learned earlier in this recipe. If you cannot remember,
    refer to *step 4*. The street names should appear in the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since you are working for the City, you want to make it possible to easily identify
    streets belonging to the City. To do this, your City streets need to be labeled
    in red and appear in a bold font. One of your co-workers has created an Arcade
    expression that will do that.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Expression button in the Label Class group on the Labeling tab,
    as you did previously in this recipe. This will open the Label Class pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Label Class pane, ensure the Language is set to Arcade. Then click on
    the Import button located near the bottom of the pane. You may remember that its
    icon resembles a file folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Import window that opens, navigate to `C:\Student\ArcGISProCookbook\Chapter11`
    using the skills you have learned and select the City Streets Labels Red.lxp file.
    Then click OK. You should now see the following expression appear in the Label
    Class pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Click the Apply button to apply the expression logic to the labels. Look at
    how the labels change. Some of the street names now appear in a bold red font.
    Those are the streets that belong to the City.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a moment to examine how the expression accomplishes this. As you
    read this explanation, refer to the following diagram to help you better understand
    what is happening. It starts by defining a variable on the first line, which reads
    the road type from the Feature_TY field in the layer attribute table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5aa98a5-0638-4857-a9f5-3b60d8390da1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the variable is defined, the expression moves into a logic block that
    evaluates the value from the variable. It does this using an `if` statement. If
    the variable value for the feature is equal to City Street, then it returns a
    label for the feature from the Road_Name field in the attribute table, in bold
    red text. Otherwise, it just labels it with the value in the Road_Name field normally.
    The end result is a map with labels that look like those in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/020636dd-ddd0-4112-bd62-a2cac562bde5.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of labeling expression using if statements
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, some road names appear in red and bold while others are black
    and normal. Those that are red and bold belong to the City.
  prefs: []
  type: TYPE_NORMAL
- en: Close the Label Class pane and save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close ArcGIS Pro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now explored two Arcade expressions, so hopefully you are beginning
    to get some idea of how it works and what you can do with it. The first expression
    you used was fairly simple but still powerful. It labeled the parcels in the City
    of Thomaston with a PIN and the acreage on two different lines. The second expression
    you used included logic that controlled how features would be labeled. This is
    a much more complex expression. This is just the tip of the iceberg.
  prefs: []
  type: TYPE_NORMAL
- en: As you will learn later in this chapter, Arcade not only works with labels but
    can also be used to control symbology. This further increases the value of Arcade.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Arcade labeling expression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now had the opportunity to explore a couple of Arcade expressions.
    This has given you a chance to begin learning Arcade’s syntax as well as some
    of the things you can do with these expressions. Now it is time for you to start
    building your own.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will create an Arcade expression that will label the streets
    in Trippville with their name. This will require you to concatenate two separate
    fields that make up the full street name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this recipe, you need to have completed the previous recipe in this
    chapter as well as all those in [Chapter 1](45fda239-2b00-4355-9553-6c6c2b69b0ab.xhtml),
    *ArcGIS Pro Capabilities and Terminology*. This will ensure you have the knowledge
    and skills needed to complete this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe can be completed with any ArcGIS Pro license level and no extensions
    are required. You will need to ensure you have installed the sample data before
    you begin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, you will need to launch ArcGIS Pro and open the Arcade project you
    used in the previous recipe. This project should appear in your list of recently
    opened projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the project opens, you should see the map of the City of Thomaston you
    were working with in the previous recipe. Close that map by clicking on the small
    X located in the tab at the top of the map view. This will reduce the computer's
    resources being used by ArcGIS Pro since you will not be working with that map
    in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Catalog pane, right-click on the City of Trippville map and select Open
    from the menu that appears. This will open the map you will be using for this
    recipe. The map should look similar to the screenshot that follows. If not, use
    the Trippville Labeling Streets bookmark to zoom to this area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de3e23a9-9199-419a-939c-cfc7e90c3061.png)'
  prefs: []
  type: TYPE_IMG
- en: The newly opened Trippville map
  prefs: []
  type: TYPE_NORMAL
- en: Notice the streets already appear to be labeled with names. However, if you
    look closely, you should notice the names are not complete. They are missing the
    street type, such as road, avenue, or court. Let's see if you can figure out why
    that is happening.
  prefs: []
  type: TYPE_NORMAL
- en: Select the Streets layer in the Contents pane. Then click on the Labeling tab
    that appears in the ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the value assigned to the Field option in the Label Class group and
    answer the questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Question**: What field is being used to label the Streets layer?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question**: Is this a single field or an expression?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Streets layer is only using the NAME field to label the
    streets in the map with their name. While this single field would appear to contain
    the data needed to label the streets with their name, based on what you are seeing
    in the map, it is not the complete name. You need to examine the attribute table
    next to determine if there is another field that contains the street type information.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Streets layer in the Contents pane. Then select Attribute
    Table from the menu that appears. This will open the Attribute Table for the Streets
    layer, so you can examine it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the NAME field in the table. Then examine the values it contains.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, examine the other fields and see if you can determine one that contains
    the street type. Then answer the questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Question**: Is there a field in the Attribute Table that is used to store
    the street type?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question**: If so, what is it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer**:'
  prefs: []
  type: TYPE_NORMAL
- en: After examining the table, you should have determined that the TYPE field is
    used to store the street type. It is not abnormal for the road name information
    to be broken down into separate fields. This is often true of the centerline data
    used as a geocoding source for E911/Emergency Response, address assignment, or
    general address location.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know that in order to label each street with its full name, you will
    need to pull values from two separate fields. With that knowledge you can now
    create your expression.
  prefs: []
  type: TYPE_NORMAL
- en: Close the Attribute Table for the Streets layer. This will free up some screen
    real estate, so you can see more of the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, select the Streets layer in the Contents pane and click on the
    Labeling tab in the ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Expression button located next to the Field value in the Label
    Class group on the Label tab. This will open the Label Class pane, so you can
    build your expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Label Class pane, ensure your Language is set to Arcade using the drop-down
    arrow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Expression area, you should already see the expression that is being
    used to label the streets based on values in the NAME field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Expression area, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once you have completed the expression, click on the Verify button at the bottom
    right-hand side of the Expression area. It looks like a green check mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you validate your expression, it should say the Expression is valid in
    green lettering below the Expression area. Now click the Apply button to see how
    the expression you created labels the streets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expression you created is now indeed labeling the streets with both the
    name and type. However, if you look closely you will see that the two values are
    running together, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67566028-1c9a-410d-afd9-5ed3dfa1cb04.png)'
  prefs: []
  type: TYPE_IMG
- en: The space between the values is missing so that they are running together. You
    need to adjust your expression so that it adds the space between the two values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return your attention to the Label Class pane and your expression. To add a
    space between the values in the two fields, you will need to add a string representing
    the space. Click in the expression just after the `+` and type the following:
    `“ “+`. There should be a space between the quotation marks. Your expression should
    now be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Validate your expression once again. If it is valid, click the Apply button
    to see the results of your revised expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Arcade supports the use of several operators within its expressions. The operators
    perform basic logic functions in the expressions you create. Some of the common
    operators include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`+`: The plus sign adds two numbers together or concatenates two fields or
    strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: This subtraction or minus sign subtracts one number from another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`==`: The double equals sign is the proper syntax for equals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!=`: The exclamation point with the equals sign means not equal to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`++`: The double plus signs increment values by one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--`: The double minus signs decrements the values by one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few of the operators you can use in Arcade. Go to [https://developers.arcgis.com/arcade/guide/logic/](https://developers.arcgis.com/arcade/guide/logic/)
    to see a complete list.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see that a space exists between the name and the type, as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24211457-fea0-40a6-90ed-60d996798e29.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations on creating an Arcade expression! This is a very simple expression
    that concatenates the values in two fields together along with a string to create
    a single label. Let's take this to the next level and write another expression,
    which will change the color of the label based on the condition of the street.
    If you remember when you examined the attribute table for the Streets layer, there
    was a field that identified the condition of the road as either good, fair, or
    poor.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's write a new expression, which will apply a green label to those streets
    in good condition, a black label to those in fair condition, and a red bold label
    to those in poor condition. You will start by defining two variables in your expression;
    one for the street name, which will use the expression you just created, and another
    for the condition.
  prefs: []
  type: TYPE_NORMAL
- en: Save your project before continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Label Class pane, you will define a variable called `name`, which will
    use the expression you just created. In the Expression area, update your expression
    so it now reads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Press the *Enter* key to start a new code line. Then define another variable
    which refers to the street condition in the Condition field. Type the following
    on the new code line you started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Label Class pane should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05ed179d-f6c0-4596-bd17-2ae29317bb19.png)'
  prefs: []
  type: TYPE_IMG
- en: You have defined two variables in your expression now, name and cond. This allows
    you to use the variable in place of the full value the variable represents. This
    makes it easier for you to type and avoid syntax errors. Now it is time to add
    the logic that will evaluate the condition of each street and label it accordingly.
    You will use an `if` statement to do this, as you saw in the last expression you
    used in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the expression area within the Label Class pane and add the following
    code to your expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once you have finished typing the additional code into the expression, click
    the Validate button to ensure your syntax is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you type in each new line, you can use the Validate button to verify your
    syntax. The most common errors are missing quotation marks or brackets. Also,
    make sure to use double equals. If you have trouble writing the code, you can
    import the Trippville Street Name Labels with the Logic Results.lxp file located
    in `C:\Student\ArcGISProCookbook\Chapter11`.
  prefs: []
  type: TYPE_NORMAL
- en: If your expression is valid, click on the Apply button so you can see the results
    of your new expanded expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you apply your expression, you should see the labels in your map are now
    displayed in three colors—green, black, and red—as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ddc826c-47a0-4038-a5ca-9957092b9414.png)'
  prefs: []
  type: TYPE_IMG
- en: This proves your expression is working. It is evaluating each street segment
    and displaying a label based on its condition and the parameters you defined for
    the label based on that condition.
  prefs: []
  type: TYPE_NORMAL
- en: Close the Label Class pane and save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close ArcGIS Pro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now created two Arcade expressions for labeling streets with their
    names. The first expression you created was fairly basic. You concatenated two
    fields and added a space between the values to create a single label which displayed
    the full name of the streets. This is a very common use of an Arcade expression.
  prefs: []
  type: TYPE_NORMAL
- en: The second expression you created was much more complex. It included logic that
    determined how each label would appear in the map. Using `if` statements, your
    expression looked at the condition of each road segment and evaluated its condition,
    which was either good, fair, or poor. Based on that condition, it then rendered
    a label accordingly. The streets in good condition were labeled with green text.
    Those in fair condition were labeled with a black font. Lastly, those that were
    in bad condition were labeled with a bold red font.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Arcade symbology expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arcade is not limited to use in labeling. You can also use it to control symbology.
    You may be thinking: why would you want to do that? ArcGIS Pro already has the
    ability to symbolize layers based on one or more fields of information, so that
    is a good question.'
  prefs: []
  type: TYPE_NORMAL
- en: Arcade allows you to specify symbology based on values that do not exist in
    your database. It allows you to create symbology based on equations or functions.
    For example, you could have roads that have traffic count data and maximum designed
    traffic loads, but you want to symbolize the layers based on the current capacity—is
    it below, at, or over? There is no field identifying capacity. However, it can
    be determined by dividing the current traffic count by the design loads and multiplying
    by 100 to get the capacity percentage. Anything below 100 would be below capacity,
    anything at 100 would be at capacity, and anything above 100 would be over. Arcade
    allows you to build an expression that will do this. The best thing is that as
    the values change in the current traffic count or design traffic load data, the
    symbology is automatically updated and you only have two fields to maintain, not
    three or more.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will symbolize the Census Block Groups for the Trippville
    area as either low, medium, or high population density.  The density field does
    not exist, so you will use an Arcade expression to determine these values and
    then symbolize the Block Groups accordingly. This will require you to use logic
    expressions similar to those you used in the last recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with the previous recipe, you need to have completed all the previous recipes
    in this chapter and those in [Chapter 1](45fda239-2b00-4355-9553-6c6c2b69b0ab.xhtml),
    *ArcGIS Pro Capabilities and Terminology*. This will ensure you have the required
    knowledge and skills needed to complete this one. You will also need to have ArcGIS
    Pro installed and access to a license. This recipe can be completed with any license
    level of ArcGIS Pro. The sample data also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will start this recipe by launching ArcGIS Pro and opening the Arcade project
    you worked with in the previous recipe. This project is located in `C:\Student\ArcGISProCookbook\Chapter11\Arcade`.
    The project should appear in your recently opened projects if you have been working
    through the entire chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The project should open with the City of Trippville map shown in the view area.
    Close this map because you will be working with another one for this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Catalog pane, expand the Maps folder and right-click on the Trippville
    Census Data map. Select Open from the menu that appears. The new map should be
    displayed in the view area. It should contain four layers: City Limits, Railroads,
    Parcels, and Census Blocks.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Contents pane, select the Census Blocks from the list of layers. Then
    click on the Appearance tab in the ribbon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the drop-down arrow located below the Symbology button in the Drawing
    group on the Appearance tab. Select Unique Values from the list presented. This
    will open the Symbology pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Symbology pane, click on the set an expression button located to the
    right of the Field parameter, as illustrated in the following screenshot. This
    will open the Expression Builder pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4580d7e0-9ac1-40ce-b037-6c00d23c4666.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Expression Builder pane should look very similar to the one you used to
    create labels. However, unlike labels, symbology only supports the Arcade language.
    This pane is divided into three basic sections or areas, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2dee6fd7-5853-4d83-8e70-6dccb05b02c4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can resize this pane to make it easier to work in. Move your mouse pointer
    to the edges of the pane. When your pointer becomes a double-headed arrow, you
    can then drag that edge of the pane in or out as desired.
  prefs: []
  type: TYPE_NORMAL
- en: The top area is the Title and Language area. Since Arcade is currently the only
    supported language, you do not need to worry about setting this option. The title
    is a name you give your expression. The fields and functions area allows you to
    pick fields and functions from the lists to add to your expression. This can help
    eliminate syntax errors. The bottom area is the Expression area where you build
    your expression as well as reset, validate, import, and export your expression.
    So let's start writing your expression.
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the Expression Builder pane in the Language and Title Area, title
    your expression Population Density.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now move to the Expression area in the pane to begin writing your expression.
    You will start by defining a variable that will calculate the population density.
    First delete the existing expression. Then type the following in its place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This variable calculates the population density by dividing the total population
    of the Census block by its area in square miles. This will generate the population
    per square mile. Now you need to create the logic which will evaluate the value
    calculated by the variable to determine if the density is low, medium, or high.
    You will do this with an `if`/`else` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue building your expression by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first line of your `if` statement evaluates whether the variable is less
    than or equal to `1335`. If it is, then it returns a value of Low Density. If
    the variable value does not meet that criteria, it moves to the `else if` line.
    The `else if` line evaluates the variable to see if it is greater than `1335`
    or less than or equal to `1955`. The double `&&` signs in the expression act as
    the word *and*. So, the variable values must meet both operations. If the variable
    value does, then the expression returns `Medium Density`. Lastly, if the variable
    value does not meet any of the requirements in the `if` and `else if` lines, the
    expression returns `High Density`.
  prefs: []
  type: TYPE_NORMAL
- en: Verify you have not made any syntax errors by validating your expression. Click
    on the Validate button at the bottom of the expression area to do this. This button
    looks like a green check mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your expression is valid, click the OK button. This will apply your expression
    and change the symbology for the layer. The Census Block layer should now display
    with the three categories you defined in your expression—Low, Medium, and High
    Density, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74bca285-815a-4cb1-a1df-cb19943a944e.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of Arcade symbology expression
  prefs: []
  type: TYPE_NORMAL
- en: The colors and scale of your map may be different, but the overall effect should
    be the same. You should see the three categories now shown in the Contents pane
    along with all other values. From this point you can make adjustments to the symbology
    as you would with any other layer. You can change the fill colors and patterns,
    change the order the values appear in within the list, and more. If you want to
    learn more about controlling symbology in ArcGIS Pro, we suggest you check out
    *Learning ArcGIS Pro* from Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to make any adjustments you wish to the symbology assigned to the
    three values. Once you are done, close the Symbology pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and close ArcGIS Pro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now created your first symbology expression using Arcade. As you have
    seen, a symbology expression is the same syntax-wise as a labeling expression,
    the difference being in how the results of the expression are displayed. With
    a symbology expression, the results change how the features within the layer appear
    in the map. With a labeling expression, the results are displayed as text within
    the map. The true power of these expressions is that they provide you with the
    ability to display different characteristics of your data by combining data, performing
    mathematical functions, and more. So you are not just limited to the exact data
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Esri continues to expand the capabilities of the Arcade language with each new
    release of ArcGIS Pro. You have only touched the tip of the iceberg in terms of
    how you can use this expression language. Remember, it is supported not only in
    ArcGIS Pro but also in ArcGIS Online, ArcGIS Enterprise, and Esri SDKs and APIs.
  prefs: []
  type: TYPE_NORMAL
