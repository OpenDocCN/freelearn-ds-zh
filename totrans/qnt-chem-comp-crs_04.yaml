- en: 'Chapter 4: Molecular Hamiltonians'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The best that most of us can hope to achieve in physics is simply to misunderstand
    at a deeper level."'
  prefs: []
  type: TYPE_NORMAL
- en: – Wolfgang Pauli
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Wolfgang Pauli reaching for a deeper understanding of the antisymmetry
    related to fermionic spin [authors]
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of Wolfgang Pauli''s 1946 Nobel lecture [Pauli] he states:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"I may express my critical opinion, that a correct theory should neither lead
    to infinite zero-point energies nor to infinite zero charges, that it should not
    use mathematical tricks to subtract infinities or singularities, nor should it
    invent a hypothetical world which is only a mathematical fiction before it is
    able to formulate the correct interpretation of the actual world of physics."*'
  prefs: []
  type: TYPE_NORMAL
- en: The concepts in this chapter have a mathematical formulation and do not have
    a physical or chemical reality. In other words, there are standard approximations
    used that allow the determination of useful chemical quantities. The calculations
    that use the approximations do not represent exact quantities; rather, they are
    approximate quantities. Therefore, these approximations require a deeper understanding
    in order to obtain refinement and better answers.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the approximations used in this chapter apply only to fermionic
    (electronic) systems. The extension to bosonic systems is an area of research
    by the broader scientific community. We will see the implementation and use of
    virtual orbitals and both occupied and unoccupied orbitals in calculations of
    ground state energy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We mention different levels of implementation of the **Hartree-Fock** (**HF**)
    theory: **Restricted Hartree-Fock** (**RHF**), **Restricted Open-shell Hartree-Fock**
    (**ROHF**), and **Unrestricted Hartree-Fock** (**UHF**); however, through Qiskit,
    we will only show RHF. There are post-HF methodologies that one can use, such
    as **Coupled-Cluster** (**CC**), which we will be using in [*Chapter 5*](B18268_05_ePub.xhtml#_idTextAnchor208)*,
    Variational Quantum Eigensolver*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we solve the fermionic Hamiltonian equation for a hydrogen
    molecule and a lithium hydride molecule and will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 4.1*, *Born-Oppenheimer approximation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.2*, *Fock space*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.3*, *Fermionic creation and annihilation operators*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.4*, *Molecular Hamiltonian in the Hartree-Fock orbitals basis*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.5*, *Basis sets*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.6*, *Constructing a fermionic Hamiltonian with Qiskit Nature*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.7*, *Fermion to qubit mappings*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Section 4.8*, *Constructing a qubit Hamiltonian operator with Qiskit Nature*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We provide a link to a companion Jupyter notebook of this chapter, which has
    been tested in the Google Colab environment, which is free and runs entirely in
    the cloud, and in the IBM Quantum Lab environment. Please refer to [*Appendix
    B*](B18268_Appendix_B_ePub.xhtml#_idTextAnchor313) *– Leveraging Jupyter Notebooks
    in the Cloud*, for more information. The companion Jupyter notebook automatically
    installs the following list of libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy [NumPy], an open source Python library that is used in almost every field
    of science and engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qiskit [Qiskit], an open source SDK for working with quantum computers at the
    level of pulses, circuits, and application modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qiskit visualization support to enable the use of visualizations and Jupyter
    notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qiskit Nature [Qiskit_Nature] [Qiskit_Nat_0], a unique platform that bridges
    the gap between natural sciences and quantum simulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python-based Simulations of Chemistry Framework** (**PySCF**), [PySCF], an
    open source collection of electronic structure modules powered by Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing NumPy, Qiskit, and importing the various modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install NumPy with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Qiskit with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Qiskit visualization support with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Qiskit Nature with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Install PySCF with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Import NumPy with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Import Matplotlib, a comprehensive library for creating static, animated, and
    interactive visualizations in Python with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the required functions and class methods with the following commands.
    The `array_to_latex function()` returns a Latex representation of a complex array
    with dimension 1 or 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Import Qiskit Nature libraries with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the Qiskit Nature property framework with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `ElectronicEnergy` property with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `ElectronicIntegrals` property with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the math libraries with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 4.1\. Born-Oppenheimer approximation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall that the atomic orbital of an electron in an atom and the molecular
    orbital of an electron in a molecule are time-independent stationary states. In
    *Section 2.4*, *Postulate 4 – Time-independent stationary states*, we introduced
    the time-independent Schrödinger equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_001.png)'
  prefs: []
  type: TYPE_IMG
- en: where ![](img/Formulla_04_002.png) is the non-relative Hamiltonian operator
    obtained by quantizing the classical energy in Hamilton form (first quantization),
    and it represents the total energy (![](img/Formulla_04_003.png)) of all its particles;
    ![](img/Formulla_04_004.png) electrons and ![](img/Formulla_04_005.png) nuclei.
    For a molecular system, the electric charge of two nuclei ![](img/Formulla_04_006.png)
    and ![](img/Formulla_04_007.png) are ![](img/Formulla_04_008.png) and ![](img/Formulla_04_009.png)
    with masses ![](img/Formulla_04_010.png) and ![](img/Formulla_04_011.png). The
    position of the particles in the molecule is determined by using a **laboratory**
    (**LAB**) frame coordinate system, as shown in *Figure 4.2*, where the origin
    of the coordinate system is outside the molecule. The origin of the coordinate
    system can be placed anywhere in free space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – LAB frame coordinates
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hamiltonian in the LAB frame coordinates ![](img/Formulla_04_012.png) is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where in atomic units, the mass of the electron, the reduced Planck constant
    (![](img/Formulla_04_014.png)), and the electric charge (![](img/Formulla_04_015.png))
    are set to the value 1\. The LAB Hamiltonian comprises the sum of the kinetic
    energy of all particles and the potential energy between all particles with the
    following definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_016.png) and ![](img/Formulla_04_017.png) are the second
    derivative operator with respect to the position coordinates for electrons and
    nuclei, that is, ![](img/Formulla_04_018.png), and likewise for the ![](img/Formulla_04_019.png)electron.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_020.png), ![](img/Formulla_04_021.png), and ![](img/Formulla_04_022.png)
    are the distances between electrons ![](img/Formulla_04_023.png) and ![](img/Formulla_04_024.png),
    electron ![](img/Formulla_04_025.png) and nucleus ![](img/Formulla_04_026.png),
    and nuclei ![](img/Formulla_04_027.png) and ![](img/Formulla_04_028.png) determined
    by the Euclidean norm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For clarity, we list the operators of the LAB Hamiltonian in *Figure 4.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Terms of the Hamiltonian operator for a molecule
  prefs: []
  type: TYPE_NORMAL
- en: In the LAB Hamiltonian, the energy of the molecular system is continuous, not
    discrete. The **center-of-mass** (**COM**) motion does not yield any change to
    the energy of the internal states of the system and can be factored out. The internal
    states are quantized and invariant to translations. These states are not affected
    by translational and rotational motions in free space. The nuclei can still move
    around the COM through vibrations and internal rotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Born-Oppenheimer** (**BO**) approximation, we assume that the motions
    of the nuclei are uncoupled from the motions of the electrons, that is, a product
    of nuclear equations (rotational and vibrational) and electronic equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ![](img/Formulla_04_035.png) are the nuclear coordinates, ![](img/Formulla_04_036.png)
    are the electron coordinates, ![](img/Formulla_04_037.png) are the spin coordinates,
    and the electronic wave function (![](img/Formulla_04_038.png)) is the condition
    on the nuclear coordinates (![](img/Formulla_04_039.png)).
  prefs: []
  type: TYPE_NORMAL
- en: In the BO approximation, solving for only the electronic equation with the fixed
    position of the nuclei can be iterated to account for the vibrations and internal
    rotations of the nuclei. For each iteration, the nuclei of the atoms are fixed
    in space and can be thought of as a violation of the Heisenberg uncertainty principle
    introduced in Section 1.4., *Light and energy*. The more you know exactly where
    a particle is, the less you know about its momentum. In general, the internal
    coordinate system can be placed at the heaviest atom in the molecule or at the
    COM.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are only dealing with electrons moving around stationary nuclei. Hence,
    if we ignore the kinetic energy coupling terms of the nuclei and the nuclei with
    electrons, the general electronic molecular Hamiltonian is a sum of four operators,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last term, the potential nuclear repulsion energy, is not computed and is
    approximated with **pseudopotentials** and experimental data, and we will show
    this in *Figure 4.4*. This approximation has limitations that we cover further
    in [*Chapter 6*](B18268_06_ePub.xhtml#_idTextAnchor228)*, Beyond Born-Oppenheimer*,
    specifically through determining potential energy surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2\. Fock space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The electronic wave function ![](img/Formulla_04_041.png) includes the spatial
    position for each electron (![](img/Formulla_04_042.png)) conditioned on the nuclear
    positions (![](img/Formulla_04_043.png)) and the spin directional coordinates
    for each electron (![](img/Formulla_04_044.png)). The electronic wave function
    must be antisymmetric with respect to the exchange of pair particle labels because
    these particles are fermions. Please recall that this is the Pauli exclusion principle
    introduced in *Section 2.1.3*, *General formulation of the Pauli exclusion principle*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s consider two electrons ![](img/Formulla_04_045.png) and ![](img/Formulla_04_046.png)
    in states ![](img/Formulla_04_047.png) and ![](img/Formulla_04_048.png) where
    the corresponding electronic wave function (![](img/Formulla_04_049.png)) representing
    the states of the two-electron system is antisymmetric (![](img/Formulla_04_050.png))
    with respect to the exchange of identical pair particles ![](img/Formulla_04_051.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_052.jpg)![](img/Formulla_04_053.jpg)![](img/Formulla_04_054.jpg)![](img/Formulla_04_055.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since a one-body electronic wave function as presented in Section 2.1, *Postulate
    1 – Wave functions*, is a product of spatial (![](img/Formulla_04_056.png)) and
    spin components (![](img/Formulla_04_057.png)), there are two scenarios where
    antisymmetry can be achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: The spin function must be antisymmetric while the spatial is symmetric.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spatial function must be antisymmetric while the spin function is symmetric.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This means that when two particles are swapped, the total molecular wave function
    (![](img/Formulla_04_058.png)) describing the system also changes sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_059.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For ![](img/Formulla_04_060.png) electrons in the field of nuclei, the total
    wave function ![](img/Formulla_04_061.png) can be written as a product of atomic
    one-body spin orbitals:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_062.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'and is made to be anti-symmetric through an antisymmetric tensor product (![](img/Formulla_04_063.png)
    [Toulouse] and through the superposition of states using the **Slater determinant**
    first introduced by Dirac [Kaplan]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_064.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Slater determinant wave function is antisymmetric with respect to the exchange
    of two electrons (permutation of two rows) or with respect to the exchange of
    two spin orbitals (permutation of two columns).
  prefs: []
  type: TYPE_NORMAL
- en: 'For two electrons (![](img/Formulla_04_065.png)), the Slater determinant has
    the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_066.jpg)![](img/Formulla_04_067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For three electrons (![](img/Formulla_04_068.png)), the Slater determinant
    has the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_069.jpg)![](img/Formulla_04_070.jpg)![](img/Formulla_04_071.jpg)![](img/Formulla_04_072.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Fock space** [Fock] is the Hilbert space in which the Slater determinant
    wave functions belong. By definition, a Fock space is the sum of a set of Hilbert
    spaces representing at least three important configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The zero-particle state also called the vacuum state is interpreted as the
    absence of an electron in an orbital: ![](img/Formulla_04_073.png) or ![](img/Formulla_04_074.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One-particle states: ![](img/Formulla_04_075.png) or ![](img/Formulla_04_076.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two-particle states: ![](img/Formulla_04_077.png) or ![](img/Formulla_04_078.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The number of states of an ![](img/Formulla_04_083.png)-particle subspace of
    the Fock space of ![](img/Formulla_04_084.png) electrons is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_085.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ![](img/Formulla_04_086.png) denotes the number of ![](img/Formulla_04_087.png)-combinations
    from a set of ![](img/Formulla_04_088.png) elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have 5 electrons with a 3-particle subspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_089.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The total number of states in a Fock space of ![](img/Formulla_04_090.png)
    electrons is [Wiki-Comb]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What we present here in this section is only a mathematical construction and
    does not represent a physical reality nor a chemical actuality. Therefore, in
    some ways, it is difficult to relate to the ideas and terms we use to actual chemistry
    taking place. However, the Fock space is exploited in quantum computing because
    there is a one-to-one mapping between the electron space of a molecule and the
    qubit space; but it is not a necessary mapping. There are other mappings that
    are more computationally advantageous, such as the one presented in *Section 4.7.4,
    Bravyi-Kitaev transformation*.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3\. Fermionic creation and annihilation operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we mentioned that the Fock space is a mathematical
    construction and does not represent a physical reality nor a chemical actuality.
    However, please keep in mind that in a molecule, each electron can occupy only
    one spin-orbit at a time and no two electrons can occupy the same spin-orbit.
  prefs: []
  type: TYPE_NORMAL
- en: Now we further consider a subspace of the Fock space, which is spanned by the
    **occupation number** of the spin-orbits, which is described by ![](img/Formulla_04_092.png)
    electronic basis states ![](img/Formulla_04_093.png), where ![](img/Formulla_04_094.png)
    is the occupation number of orbital ![](img/Formulla_04_095.png).
  prefs: []
  type: TYPE_NORMAL
- en: The spin-orbital state ![](img/Formulla_04_096.png) not occupied by an electron
    is represented by ![](img/Formulla_04_097.png).
  prefs: []
  type: TYPE_NORMAL
- en: 'We define a set of fermionic annihilation operators ![](img/Formulla_04_098.png)
    and creation operators ![](img/Formulla_04_099.png), which act on local electron
    modes, and which satisfy the following **anti-commutation** relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_100.jpg)![](img/Formulla_04_101.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ![](img/Formulla_04_102.png) is the Dirac delta function. The operators
    ![](img/Formulla_04_103.png) are called the **occupation number operators** and
    commute with one another.
  prefs: []
  type: TYPE_NORMAL
- en: A **fermionic operator** is a linear combination of products of **creation**
    and **annihilation operators**, which we discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3.1\. Fermion creation operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fermionic creation operator ![](img/Formulla_04_104.png) raises by one
    unit the number of particles sitting in the ![](img/Formulla_04_105.png) fermionic
    orbital:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_106.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_107.png) and ![](img/Formulla_04_108.png) are the number
    of particles sitting in the ![](img/Formulla_04_109.png) fermionic orbital.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_110.png) is a pre-factor that annihilates the state if
    we had an electron in the ![](img/Formulla_04_111.png) fermionic orbital, that
    is, if ![](img/Formulla_04_112.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The phase factor ![](img/Formulla_04_113.png) keeps the anti-symmetric properties
    of the whole superposition of states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3.2\. Fermion annihilation operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fermion annihilation operator ![](img/Formulla_04_114.png) lowers by one
    unit the number of particles sitting in the ![](img/Formulla_04_115.png) fermionic
    orbital:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_116.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_117.png) and ![](img/Formulla_04_118.png) are the number
    of particles sitting in the ![](img/Formulla_04_119.png) fermionic orbital.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_120.png) is a pre-factor that annihilates the state in
    the Slater determinant if there is no electron in the ![](img/Formulla_04_121.png)
    fermionic orbital, that is, if ![](img/Formulla_04_122.png).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The phase factor ![](img/Formulla_04_123.png) keeps the anti-symmetric properties
    of the whole superposition of states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now see how to write the electronic molecular Hamiltonian as a linear combination
    of products of creation and annihilation operators.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4\. Molecular Hamiltonian in the Hartree-Fock orbitals basis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For mapping the original **electronic structure Hamiltonian** into the corresponding
    **qubit Hamiltonian**, we work in the second quantization formalism of quantum
    mechanics. Recall we introduced the first quantization in *Section 4.1*, *Born-Oppenheimer
    approximation*.
  prefs: []
  type: TYPE_NORMAL
- en: The **Hartree-Fock (HF)** method approximates an ![](img/Formulla_04_124.png)-body
    problem into ![](img/Formulla_04_125.png) one-body problems where each electron
    evolves in the **mean field** of the other electrons.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can rewrite the electronic molecular Hamiltonian (![](img/Formulla_04_126.png))
    as a linear combination of products of creation and annihilation operators (summarized
    in *Figure 4.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_127.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ![](img/Formulla_04_128.png) removes an electron from spin-orbital ![](img/Formulla_04_129.png),
    and ![](img/Formulla_04_130.png) creates an electron in spin-orbital ![](img/Formulla_04_131.png).
    The operation ![](img/Formulla_04_132.png) is the **excitation operator**, which
    excites an electron from the **occupied spin-orbital** ![](img/Formulla_04_133.png)
    into the **unoccupied orbital** ![](img/Formulla_04_134.png). Constructing these
    were introduced in *Section 2.1, Postulate 1 – Wave functions*. The nuclear-nuclear
    (![](img/Formulla_04_135.png)) repulsion energy (![](img/Formulla_04_136.png))
    is approximated by pseudopotentials and experimental data as mentioned in Section
    4.1, *Born-Oppenheimer approximation*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Molecular Hamiltonian as a linear combination of products of creation
    and annihilation operators
  prefs: []
  type: TYPE_NORMAL
- en: 'The weights of operators are given by the one-electron integrals using the
    HF method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where ![](img/Formulla_04_147.png) are the coordinates of electron ![](img/Formulla_04_148.png),
    ![](img/Formulla_04_149.png) are the coordinates of atom ![](img/Formulla_04_150.png)
    and ![](img/Formulla_04_151.png) is the atomic number of atom ![](img/Formulla_04_152.png),
    and the two-electron terms are given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_153.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The molecular Hamiltonian can be expressed in the basis of the solutions of
    the HF method ![](img/Formulla_04_154.png), which are called **Molecular Orbitals
    (MOs)** [Panagiotis]:'
  prefs: []
  type: TYPE_NORMAL
- en: We showed some example calculations of these integrals in *Section 2.3.6*, *Kinetic
    energy operation,* and *Section 2.3.7,* *Potential energy operation*. In the next
    section, we will see how to approximate the spatial wave functions in those integrals.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three commonly used HF methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The **restricted HF (RHF)** method is used for closed-shell molecules. The spin-orbitals
    are either alpha (spin-up) or beta (spin-down) and all orbitals are doubly occupied
    by alpha and beta spin-orbitals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The restricted **open-shell (ROHF)** method is used for open-shell molecules
    where the numbers of electrons of each spin are not equal. ROHF uses as many doubly
    occupied molecular orbitals as possible and singly occupied orbitals for the unpaired
    electrons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **unrestricted HF (UHF)** method is used for open-shell molecules where
    the numbers of electrons of each spin are not equal. UHF orbitals can have either
    alpha or beta spin, but the alpha and beta orbitals may have different spatial
    components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.5\. Basis sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The spatial wave functions, ![](img/Formulla_04_155.png), in the integrals of
    *Section 4.4,* *Molecular Hamiltonian in the Hartree-Fock orbitals basis,* are
    approximated by linear combinations of several independent basis functions. The
    form of these functions is inspired by the atomic orbitals of hydrogen-like systems
    that we introduced in *Section 2.1.1,* *Spherical harmonic functions,* which have
    a radial part as shown in *Section 2.2.1*, *Computing the radial wave functions*.
  prefs: []
  type: TYPE_NORMAL
- en: Two classes of approximate basis orbitals that are commonly used are **Slater-type
    orbitals (STOs)** based on the Slater determinant introduced in *Section 4.2*,
    *Fock space*, and Cartesian **Gaussian-type orbitals (GTOs)**. These two types
    of basis functions can be combined as **STO-nG**, where *n* is the number of Gaussians
    used to make the approximation. **Ab Initio electronic structure** computations
    are conducted numerically using a basis set of orbitals.
  prefs: []
  type: TYPE_NORMAL
- en: We now detail the structure of these two classes and illustrate them with Python
    plots of functions.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5.1\. Slater-type orbitals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'STOs have the same structure as the atomic orbitals of hydrogen-like systems
    and their radial part have the following form [Wiki_GAU]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_156.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_157.png) is the angular momentum quantum with values ranging
    from ![](img/Formulla_04_158.png) to ![](img/Formulla_04_159.png), where ![](img/Formulla_04_160.png)
    is the principal quantum number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_161.png) is the nuclear distance of the electron from the
    atomic nucleus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_162.png) is called the orbital exponent and controls how
    fast the density of the orbital vanishes as a function of the nuclear distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_163.png) is determined by the following normalization condition
    [Wiki-GAU]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_164.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Formulla_04_165.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Noting that [Wiki-STO]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_166.png)'
  prefs: []
  type: TYPE_IMG
- en: 'we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_167.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the 1 ![](img/Formulla_04_168.png) orbital, we have ![](img/Formulla_04_169.png),
    hence ![](img/Formulla_04_170.png) , and the radial part of the Slater orbital
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_171.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s plot this function with the following Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.5* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Plot of the radial part of the Slater-type orbital for the 1s orbital
    of the hydrogen atom
  prefs: []
  type: TYPE_NORMAL
- en: 'We plot the antisymmetric spatial wave function for the hydrogen molecule as
    a linear combination of the preceding radial part of the slater orbital for a
    hydrogen atom as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.6* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Plot of the antisymmetric spatial wave function for the hydrogen
    molecule
  prefs: []
  type: TYPE_NORMAL
- en: 4.5.2\. Gaussian-type orbitals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GTOs have the same angular form as STOs, but their radial function adopts a
    Gaussian form [Wiki_GAU]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_172.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_173.png) is the angular momentum quantum with values ranging
    from ![](img/Formulla_04_174.png) to ![](img/Formulla_04_175.png), where ![](img/Formulla_04_176.png)
    is the principal quantum number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_177.png) is the nuclear distance of the electron from the
    atomic nucleus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_178.png) is called the orbital exponent and controls how
    fast the density of the orbital vanishes as a function of the nuclear distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_179.png) is determined by the following normalization condition
    [Wiki-GAU]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_180.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In practice, we approximate the radial part of an STO with a linear combination
    of primitive Gaussian functions, called a contracted Gaussian function. The STO-nG
    basis sets include one contracted Gaussian function per atomic orbital [Skylaris].
    We plot the STO-3G function for the 1![](img/Formulla_04_181.png) orbital of the
    hydrogen atom. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.7* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Plot of the STO-3G function for the 1![](img/Formulla_04_182.png)
    orbital of the hydrogen atom
  prefs: []
  type: TYPE_NORMAL
- en: 'We plot the antisymmetric spatial wave function for the hydrogen molecule as
    a linear combination of the preceding radial part of the STO-3G function for the
    1*s* orbital of a hydrogen atom as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.8* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Plot of the antisymmetric STO-3G function for the 1![](img/Formulla_04_1821.png)
    orbital of the hydrogen molecule
  prefs: []
  type: TYPE_NORMAL
- en: 4.6\. Constructing a fermionic Hamiltonian with Qiskit Nature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qiskit Nature platform works with spin orbitals [Qiskit_Nat_1]. Each molecular
    orbital can have a spin-up or a spin-down electron, or spin-paired electrons.
    A spin orbital is either of those cases. For each molecular orbital, we have two
    spin orbitals. Let's now illustrate the construction of a fermionic Hamiltonian
    operator of the hydrogen molecule with Qiskit Nature.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6.1\. Constructing a fermionic Hamiltonian operator of the hydrogen molecule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we define the molecular geometry of the hydrogen molecule with the Qiskit
    `Molecule` class, which has the following input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`geometry`, a list of atom names, such as `H` for hydrogen, followed by Cartesian
    coordinates ![](img/Formulla_04_184.png) of the atom''s position in units of angstroms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`charge`, an integer, the electric charge of the molecule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiplicity`, an integer, the multiplicity ![](img/Formulla_04_185.png) of
    the molecule, where ![](img/Formulla_04_186.png) is the total spin angular momentum,
    which is determined by the number of unpaired electrons in the molecule, that
    is, the number of electrons that occupy a molecular orbital singly, not with another
    electron:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the electronic structure molecule driver by selecting the PySCF `driver`
    type and the basis set `sto3g`, which is the basis STO-3G we introduced in *Section
    4.5.2*, *Gaussian-type orbitals*, in which the molecular orbitals are to be expanded.
    STO-3G is used by default in Qiskit Nature. RHF is used by default in Qiskit Nature''s
    PySCF driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We perform a HF calculation for the basis STO-3G. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an `ElectronicStructureProblem` instance that produces the list of
    fermionic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `second_q_ops()` method [Qiskit_Nat_3], which returns a list of
    second quantized operators: Hamiltonian operator, total particle number operator,
    total angular momentum operator, total magnetization operator, and, if available,
    ![](img/Formulla_04_187.png), ![](img/Formulla_04_188.png), ![](img/Formulla_04_189.png)
    dipole operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Recall that in *Section 1.3*, *Quantum numbers and quantization of matter*,
    we introduced the **spin projection quantum number**, ![](img/Formulla_04_190.png),
    which gives the projection of the spin momentum ![](img/Formulla_04_191.png) along
    the specified axis as either spin up (+½) or spin down (-½) in a given spatial
    direction. HF theory similarly defines ![](img/Formulla_04_192.png) (up) and ![](img/Formulla_04_193.png)
    (down) spin orbitals [Skylaris_1].
  prefs: []
  type: TYPE_NORMAL
- en: 'We define `the get_particle_number()` function, which gets the particle number
    property of a given electronic structure problem. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the `get_particle_number()` function to get and print the particle
    number properties as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.9* shows the result where we see four spin orbitals, one ![](img/Formulla_04_194.png)
    electron, and one ![](img/Formula_03_006.png) electron:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Hydrogen molecule, HF calculation for the basis STO-3G, particle
    numbers
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `get_electronic_energy()` function, which returns the electronic
    energy property of a given electronic structure problem. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the `get_electronic_energy()` function to get and print the electronic
    energy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.10* shows the molecular orbital (`MO`) one-body terms, where we see
    two ![](img/Formulla_04_196.png) electron terms and two ![](img/Formula_03_006.png)
    electron terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Hydrogen molecule, electronic energy, molecular orbital (MO),
    one-body terms
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4.11* shows the molecular orbital (`MO`) two-body terms that contain
    all possible spin combinations of molecular orbital (`MO`) two-body terms, ![](img/Formulla_04_198.png),
    ![](img/Formulla_04_199.png), ![](img/Formulla_04_200.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Hydrogen molecule, electronic energy, molecular orbital (MO),
    two-body terms
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FermionicOp` class [Qiskit_Nat_2] in the sparse label mode displays each
    term of the fermionic operator by a string of items separated by a space, starting
    with a label followed by an underscore, `_`, and by a positive integer representing
    the index of the fermionic mode. *Figure 4.12* shows the list of labels, the corresponding
    symbols, and the fermionic operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – List of labels used by the Qiskit FermionicOp class
  prefs: []
  type: TYPE_NORMAL
- en: 'The Qiskit `FermionicOp` class truncates the display of the fermionic Hamiltonian
    operator according to the maximum number of characters set by the `set_truncation()`
    method with a default value of 200 [Qiskit_Nat_T]. If the truncation value is
    set to `0`, truncation is disabled. We set truncation to `None` with the `set_truncation(0)`
    method and then we print all 14 terms of the fermionic Hamiltonian operator of
    the hydrogen molecule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.13* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Fermionic Hamiltonian operator of the hydrogen molecule
  prefs: []
  type: TYPE_NORMAL
- en: 'We now print, with the `FermionicOp.to_matrix` method, a matrix representation
    of the fermionic operator of the hydrogen molecule in the Fock basis where the
    basis states are ordered in increasing bitstring order as 0000, 0001, …, 1111\.
    Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.14* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Matrix representation of the fermionic Hamiltonian operator of
    the hydrogen molecule in the Fock basis
  prefs: []
  type: TYPE_NORMAL
- en: 'The fermionic Hamiltonian operator of the hydrogen molecule contains four particle
    number operators, which are shown in *Figure 4.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Particle number operators of the fermionic Hamiltonian of the
    hydrogen molecule
  prefs: []
  type: TYPE_NORMAL
- en: 'The fermionic Hamiltonian operator of the hydrogen molecule contains ten two-electron
    exchange operators shown in *Figure 4.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – Two-electron exchange operators of the fermionic Hamiltonian of
    the hydrogen molecule
  prefs: []
  type: TYPE_NORMAL
- en: Let's now illustrate the construction of a fermionic Hamiltonian operator of
    the lithium hydride molecule with Qiskit Nature.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6.2\. Constructing a fermionic Hamiltonian operator of the lithium hydride
    molecule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We define the molecular geometry of the lithium hydride (LiH) molecule with
    the Qiskit `Molecule` class as we have explained in *Section 4.6.1, Constructing
    a fermionic Hamiltonian operator of the hydrogen molecule*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the electronic structure molecule driver by selecting the PySCF `driver`
    type and the `sto3g` basis set in which the molecular orbitals are to be expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an `ElectronicStructureProblem` instance that produces the list of
    fermionic operators with the `freeze` `core=True` and `remove_orbitals=[4,3]`
    parameters, removing unoccupied orbitals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `second_q_ops()` method to get a list of second quantized operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We call `get_particle_number()` to get and print the particle number property
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.17* shows the result where we see six spin orbitals, one ![](img/Formulla_04_196.png)
    electron, and one ![](img/Formulla_04_225.png) electron:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Lithium hydride molecule, HF calculation for the basis STO-3G,
    particle number
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the `get_electronic_energy()` function to get and print the electronic
    energy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.18* shows the molecular orbital (`MO`) one-body terms where we see
    two ![](img/Formulla_04_226.png) electron terms and two ![](img/Formula_03_006.png)
    electron terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – LiH molecule, electronic energy, molecular orbital (MO), one
  prefs: []
  type: TYPE_NORMAL
- en: -body terms
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4.19* shows the molecular orbital (`MO`) two-body terms, which contains
    all possible spin combinations of molecular orbital two-body terms, ![](img/Formulla_04_228.png),
    ![](img/Formulla_04_229.png), ![](img/Formulla_04_230.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – LiH molecule, electronic energy, molecular orbital (MO), two-body
    terms
  prefs: []
  type: TYPE_NORMAL
- en: 'The Qiskit `FermionicOp` class truncates the display of the fermionic Hamiltonian
    operator according to the maximum number of characters set by the `set_truncation()`
    method with a default value of `200` [Qiskit_Nat_T]. If the truncation value is
    set to `0`, truncation is disabled. We set truncation to `1000` with the `set_truncation(1000)`
    method and then we print the first 20 terms of the more than a hundred terms of
    the fermionic operator of the LiH molecule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.20* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – First 20 terms of the fermionic Hamiltonian operator of the lithium
    hydride molecule
  prefs: []
  type: TYPE_NORMAL
- en: 'We now print a matrix representation of the fermionic operator of the lithium
    hydride molecule in the Fock basis where the basis states are ordered in increasing
    bitstring order as 0000, 0001, …, 1111\. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.21* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Matrix representation of the fermionic Hamiltonian operator of
    the lithium hydride molecule in the Fock basis
  prefs: []
  type: TYPE_NORMAL
- en: 4.7\. Fermion to qubit mappings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We consider a system of ![](img/Formulla_04_231.png) fermions, each labeled
    with an integer from ![](img/Formulla_04_158.png) to ![](img/Formulla_04_233.png).
    We need a fermion to qubit mapping, a description of the correspondence between
    states of fermions and states of qubits, or, equivalently, between fermionic operators
    and multi-qubit operators. We need a mapping between the fermion creation and
    annihilation operators and multi-qubit operators. The Jordan-Wigner and the Bravyi-Kitaev
    transformations are widely used and simulate a system of electrons with the same
    number of qubits as electrons.
  prefs: []
  type: TYPE_NORMAL
- en: 4.7.1\. Qubit creation and annihilation operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We define qubit operators that act on local qubits [Yepez] [Chiew], as shown
    in *Figure 4.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Qubit creation and annihilation operators
  prefs: []
  type: TYPE_NORMAL
- en: 'The qubit operators have the anti-commutation relation: ![](img/Formulla_04_240.png).'
  prefs: []
  type: TYPE_NORMAL
- en: 4.7.2\. Jordan-Wigner transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Jordan-Wigner** (**JW**) transformation stores the occupation of each
    spin orbital in each qubit. It maps the fermionic creation and annihilation operators
    to the tensor product of Pauli operators, as shown in *Figure 4.23* [Yepez] [Chiew]
    [Cao]. The operators ![](img/Formulla_04_241.png) and ![](img/Formulla_04_242.png)change
    the occupation for the orbital level ![](img/Formulla_04_243.png). The tensor
    products of ![](img/Formulla_04_244.png) Pauli operators ![](img/Formulla_04_245.png)
    enforce the fermionic anti-commutation relations by applying a phase according
    to the even or odd parity of the occupations for orbital labels less than ![](img/Formulla_04_243.png)
    [Cao].
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – JW transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for an orbital ![](img/Formulla_04_259.png), we have the following
    mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_260.png)'
  prefs: []
  type: TYPE_IMG
- en: The number of single Pauli operators ![](img/Formulla_04_261.png) scales linearly
    with the size of the system. The occupation number basis and the JW transformation
    allow the representation of a single fermionic creation or annihilation operator
    by ![](img/Formulla_04_262.png) qubit operations.
  prefs: []
  type: TYPE_NORMAL
- en: The Hamiltonian that results from the JW transformation commutes with the number
    spin up and number spin down operators, which can be used to taper off two qubits
    [de Keijzer].
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `label_to_qubit()` function to convert a term of a fermionic
    operator represented as a sparse label to a qubit operator, which has the following
    input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label`, a sparse label as shown in *Figure 4.12,* used by the Qiskit `FermionicOp`
    class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`converter`, either `JordanWignerMapper()`, `ParityMapper()` or `BravyiKitaevMapper()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we convert the fermionic operators "+_0", "+_1", "+_2", "+_3", and "+_4"
    into qubit operators with the JW transformation with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.24* shows the result, which matches the expected outcome of the JW
    transformation, with the Qiskit tensor ordering of qubits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – JW transformation illustrated with "+_0", "+_1", "+_2", "+_3",
    and "+_4"
  prefs: []
  type: TYPE_NORMAL
- en: 4.7.3\. Parity transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The parity transformation is dual to the JW transformation: the parity operators
    are low-weight, while the occupation operators become high-weight [Bravyi][Cao].
    *Figure 4.25* shows the mapping of the fermionic creation and annihilation operators
    to the tensor product of Pauli operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Parity transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we convert the fermionic operators "+_0", "+_1", "+_2", "+_3", and "+_4"
    into qubit operators with the parity transformation with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.26* shows the result, which matches the expected outcome of the parity
    transformation, with the Qiskit tensor ordering of qubits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Parity transformation illustrated with "+_0", "+_1", "+_2", "+_3",
    and "+_4"
  prefs: []
  type: TYPE_NORMAL
- en: The parity transformation introduces known symmetries that can be exploited
    to reduce the size of the problem by two qubits.
  prefs: []
  type: TYPE_NORMAL
- en: 4.7.4\. Bravyi-Kitaev transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Bravyi-Kitaev (BK) transformation applies only for systems of ![](img/Formulla_04_084.png)
    fermions where ![](img/Formulla_04_084.png) is equal to a power of two, ![](img/Formulla_04_277.png).
    The BK basis and transformation require only ![](img/Formulla_04_278.png) qubit
    operations to represent one fermionic operator. The BK transformation maps the
    occupation number basis ![](img/Formulla_04_279.png) introduced in Section 4.3.,
    *Fermionic creation and annihilation operators,* to the BK basis ![](img/Formulla_04_280.png)
    with a matrix ![](img/Formulla_04_281.png), which is defined recursively [Cao][Seeley],
    where the sums are carried modulo 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_282.png), ![](img/Formulla_04_283.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formulla_04_284.png), ![](img/Formulla_04_285.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We define the `BK(m)` function, which returns a dictionary of matrices ![](img/Formulla_04_286.png)
    for ![](img/Formulla_04_287.png) to ![](img/Formulla_04_288.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We compute the matrices ![](img/Formulla_04_289.png), ![](img/Formulla_04_290.png),
    ![](img/Formulla_04_291.png), and ![](img/Formulla_04_292.png) by calling the
    `BK(3)` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.27* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – BK matrices ![](img/Formulla_04_2891.png), ![](img/Formulla_04_2901.png),
    ![](img/Formulla_04_2911.png), and ![](img/Formulla_04_2921.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three sets to consider [Bravyi] [Mezzacapo] [Tranter]:'
  prefs: []
  type: TYPE_NORMAL
- en: The parity set ![](img/Formulla_04_297.png) is the set of qubits that encodes
    the parity of the fermionic modes with an index less than ![](img/Formulla_04_298.png)
    and that gives the global phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The update set ![](img/Formulla_04_299.png) is the set of qubits that must be
    flipped when the fermionic mode ![](img/Formulla_04_300.png) changes occupation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The flip set ![](img/Formulla_04_301.png) is the set of qubits that determines
    whether qubit ![](img/Formulla_04_302.png) has the same or inverted parity with
    respect to the fermionic mode ![](img/Formulla_04_303.png). It is needed for odd
    ![](img/Formulla_04_303.png) [Ribeiro].
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These three sets can be obtained from the recursive matrices that map fermionic
    occupation to qubits. The remainder set ![](img/Formulla_04_305.png) is obtained
    from the set difference of the parity and flip sets [Bravyi].
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4.28* shows the mapping of fermionic creation and annihilation operators
    to the tensor product of Pauli operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Table_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – BK transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we convert the fermionic operators "+_0", "+_1", "+_2", "+_3", and "+_4"
    into qubit operators with the BK transformation with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.29* shows the result, which matches the expected outcome of the BK
    transformation, with the Qiskit tensor ordering of qubits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – BK transformation illustrated with "+_0", "+_1", "+_2", "+_3",
    and "+_4 "
  prefs: []
  type: TYPE_NORMAL
- en: 4.8\. Constructing a qubit Hamiltonian operator with Qiskit Nature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section shows how to construct a qubit Hamiltonian operator with Qiskit
    Nature for the hydrogen molecule and the lithium hydride molecule.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `fermion_to_qubit()` function to convert a fermionic operator
    to a qubit operator, which has the following input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f_op`, a fermionic operator obtained as explained in *Section 4.6*, *Constructing
    a fermionic Hamiltonian with Qiskit Nature*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper`, either `"Jordan-Wigner"` or `"Parity"` or `"Bravyi-Kitaev"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncate`, an integer to truncate the display of the Pauli list, which can
    be very large; set to `20` items by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`two_qubit_reduction`, Boolean, by default `False`, that determines whether
    to carry out two-qubit reduction when possible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z2symmetry_reduction`, by default `None`, that indicates whether a Z2 symmetry
    reduction should be applied to resulting qubit operators that are computed based
    on mathematical symmetries that can be detected in the operator [de Keijzer]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show`, set to `True` by default to display the name of the transformation
    and results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We now show how to construct a qubit Hamiltonian operator of the hydrogen molecule.
  prefs: []
  type: TYPE_NORMAL
- en: 4.8.1\. Constructing a qubit Hamiltonian operator of the hydrogen molecule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we select the qubit mapper called `JordanWignerMapper()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.30* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Qubit Hamiltonian operator of H2 with the JW transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the qubit mapper called `ParityMapper()` with `two_qubit_reduction=True`
    to eliminate two qubits in the qubit Hamiltonian operator [Qiskit_Nat_4] [Qiskit_Nat_5]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.31* shows the resulting qubit Hamiltonian operator works on two qubits.
    Recall that there are four spin orbitals, as shown in *Figure 4.9*, and a register
    length of four, as shown in *Figure 4.13* in *Section 4.6.1*, *Constructing a
    fermionic Hamiltonian operator of the hydrogen molecule*. A two-qubit reduction
    has been achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – Qubit Hamiltonian operator of H2 with parity transformation, two_qubit_reduction=True
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, we select the qubit mapper called `BravyiKitaevMapper()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.32* shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – Qubit Hamiltonian operator of H2 with the Bravyi-Kitaev transformation
  prefs: []
  type: TYPE_NORMAL
- en: 4.8.2\. Constructing a qubit Hamiltonian operator of the lithium hydride molecule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the qubit mapper called `ParityMapper()` with `two_qubit_reduction=True`
    to eliminate two qubits in the qubit Hamiltonian operator [Qiskit_Nat_4] [Qiskit_Nat_5].
    We set `z2symmetry_reduction="auto"`. We print the first 20 items of the qubit
    Hamiltonian operator of the LiH molecule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 4.33* shows the resulting qubit Hamiltonian operator works on four
    qubits. Recall that there are six spin orbitals, as shown in *Figure 4.17*, and
    a register length of six, as shown in *Figure 4.20* in *Section 4.6.2*, *Constructing
    a fermionic Hamiltonian operator of the lithium hydride molecule*. A two-qubit
    reduction has been achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18268_Figure_4.33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – Qubit Hamiltonian operator of LiH with parity transformation,
    two_qubit_reduction=True
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have shown how to formulate an electronic structure program
    and map it into a qubit Hamiltonian, which is the input to a hybrid classical-quantum
    algorithm that is used to find the lowest energy eigenvalue for a quantum system.
    This is the topic of [*Chapter 5*](B18268_05_ePub.xhtml#_idTextAnchor208)*, Variational
    Quantum Eigensolver (VQE)*.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please test your understanding of the concepts presented in this chapter with
    the corresponding Google Colab notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following terms is neglected in the BO approximation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Electronic kinetic energy operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Nuclear kinetic energy operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Potential energy between the electrons and nuclei. It is the sum of all electron-nucleus
    Coulomb interactions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Potential energy operator arising from electron-electron Coulomb repulsions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Potential nuclear-nuclear repulsion energy operator, the sum of all nucleus-nucleus
    Coulomb repulsions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Slater determinant wave function is antisymmetric with respect to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The exchange of two electrons (permutation of two rows)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The exchange of two spin orbitals (permutation of two columns)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three fermion to qubit transformations currently supported by Qiskit Nature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two fermion to qubit transformations that simulate a system of electrons
    with the same number of qubits as electrons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For which transformation does the resulting Hamiltonian commute with the number
    spin up and number spin down operators that can be used to taper off two qubits?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jordan-Wigner, Parity, Bravyi-Kitaev
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jordan-Wigner, Parity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jordan-Wigner
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Bravyi] Sergey Bravyi, Jay M. Gambetta, Antonio Mezzacapo, Kristan Temme,
    Tapering off qubits to simulate fermionic Hamiltonians, arXiv:1701.08213v1, January
    27, 2017, [https://arxiv.org/pdf/1701.08213.pdf](https://arxiv.org/pdf/1701.08213.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Cao] Yudong Cao, Jonathan Romero, Jonathan P. Olson, Matthias Degroote, Peter
    D. Johnson, Mária Kieferová, Ian D. Kivlichan, Tim Menke, Borja Peropadre, Nicolas
    P. D. Sawaya, Sukin Sim, Libor Veis, Alán Aspuru-Guzik, Quantum Chemistry in the
    Age of Quantum Computing, Chem. Rev. 2019, 119, 19, 10856–10915, August 30, 2019,
    [https://doi.org/10.1021/acs.chemrev.8b00803](https://doi.org/10.1021/acs.chemrev.8b00803)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chiew] Mitchell Chiew and Sergii Strelchuk, Optimal fermion-qubit mappings,
    arXiv:2110.12792v1 [quant-ph], October 25, 2021, [https://arxiv.org/pdf/2110.12792.pdf](https://arxiv.org/pdf/2110.12792.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[De Keijzer] de Keijzer, R. J. P. T., Colussi, V. E., Škorić, B., and Kokkelmans,
    S. J. J. M. F. (2021), Optimization of the Variational Quantum Eigensolver for
    Quantum Chemistry Applications, arXiv, 2021, [2102.01781], [https://arxiv.org/abs/2102.01781](https://arxiv.org/abs/2102.01781)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Grok] Grok the Bloch Sphere, [https://javafxpert.github.io/grok-bloch/](https://javafxpert.github.io/grok-bloch/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[IBM_CEO] IBM CEO: Quantum computing will take off ''like a rocket ship'' this
    decade, Fast Company, September 28, 2021, [https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade](https://www.fastcompany.com/90680174/ibm-ceo-quantum-computing-will-take-off-like-a-rocket-ship-this-decade)'
  prefs: []
  type: TYPE_NORMAL
- en: '[IBM_comp1] Welcome to IBM Quantum Composer, [https://quantum-computing.ibm.com/composer/docs/iqx/](https://quantum-computing.ibm.com/composer/docs/iqx/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[IBM_comp2] IBM Quantum Composer, [https://quantum-computing.ibm.com/composer/files/new](https://quantum-computing.ibm.com/composer/files/new)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Kaplan] Ilya G. Kaplan, Modern State of the Pauli Exclusion Principle and
    the Problems of Its Theoretical Foundation, Symmetry 2021, 13(1), 21, [https://doi.org/10.3390/sym13010021](https://doi.org/10.3390/sym13010021)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Mezzacapo] Antonio Mezzacapo, Simulating Chemistry on a QuantumComputer, Part
    I, Qiskit Global Summer School 2020, IBM Quantum, Qiskit, Introduction to Quantum
    Computing and Quantum Hardware, [https://qiskit.org/learn/intro-qc-qh/](https://qiskit.org/learn/intro-qc-qh/),
    Lecture Notes 8, [https://github.com/qiskit-community/intro-to-quantum-computing-and-quantum-hardware/blob/master/lectures/introqcqh-lecture-notes-8.pdf?raw=true](https://github.com/qiskit-community/intro-to-quantum-computing-and-quantum-hardware/blob/master/lectures/introqcqh-lecture-notes-8.pdf?raw=true)'
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy] NumPy: the absolute basics for beginners, [https://numpy.org/doc/stable/user/absolute_beginners.html](https://numpy.org/doc/stable/user/absolute_beginners.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Panagiotis] Panagiotis Kl. Barkoutsos, Jerome F. Gonthier, Igor Sokolov, Nikolaj
    Moll, Gian Salis, Andreas Fuhrer, Marc Ganzhorn, Daniel J. Egger, Matthias Troyer,
    Antonio Mezzacapo, Stefan Filipp, Ivano Tavernelli, Quantum algorithms for electronic
    structure calculations: Particle-hole Hamiltonian and optimized wave-function
    expansions, Phys. Rev. A 98, 022322 – Published August 20, 2018, DOI: 10.1103/PhysRevA.98.022322,
    [https://link.aps.org/doi/10.1103/PhysRevA.98.022322](https://link.aps.org/doi/10.1103/PhysRevA.98.022322)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit] Qiskit, [https://qiskit.org/](https://qiskit.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_0] Qiskit_Nature, [https://github.com/Qiskit/qiskit-nature/blob/main/README.md](https://github.com/Qiskit/qiskit-nature/blob/main/README.md)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_1] Qiskit Nature and Finance Demo Session, with Max Rossmannek
    and Julien Gacon, October 15, 2021, [https://www.youtube.com/watch?v=UtMVoGXlz04](https://www.youtube.com/watch?v=UtMVoGXlz04)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_2] FermionicOp, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.operators.second_quantization.FermionicOp.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.operators.second_quantization.FermionicOp.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_3] ElectronicStructureProblem.second_q_ops, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.problems.second_quantization.ElectronicStructureProblem.second_q_ops.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_4] QubitConverter, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.converters.second_quantization.QubitConverter.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_5] Qiskit Nature Tutorials, Electronic structure, [https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html](https://qiskit.org/documentation/nature/tutorials/01_electronic_structure.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nat_T] Second-Quantization Operators (qiskit_nature.operators.second_quantization)
    > FermionicOp > FermionicOp.set_truncation, [https://qiskit.org/documentation/nature/stubs/qiskit_nature.operators.second_quantization.FermionicOp.set_truncation.html](https://qiskit.org/documentation/nature/stubs/qiskit_nature.operators.second_quantization.FermionicOp.set_truncation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Qiskit_Nature] Introducing Qiskit Nature, Qiskit, Medium, April 6, 2021, [https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004](https://medium.com/qiskit/introducing-qiskit-nature-cb9e588bb004)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ribeiro] Sofia Leitão, Diogo Cruz, João Seixas, Yasser Omar, José Emilio Ribeiro,
    J.E.F.T. Ribeiro, Quantum Simulation of Fermionic Systems, CERN, [https://indico.cern.ch/event/772852/contributions/3505906/attachments/1905096/3146117/Quantum_Simulation_of_Fermion_Systems.pdf](https://indico.cern.ch/event/772852/contributions/3505906/attachments/1905096/3146117/Quantum_Simulation_of_Fermion_Systems.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Seeley] Jacob T. Seeley, Martin J. Richard, Peter J. Love, The Bravyi-Kitaev
    transformation for quantum computation of electronic structure, August 29, 2012,
    arXiv:1208.5986 [quant-ph], [https://arxiv.org/abs/1208.5986v1](https://arxiv.org/abs/1208.5986v1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Skylaris] CHEM6085: Density Functional Theory, Lecture 8, Gaussian basis sets,
    [https://www.southampton.ac.uk/assets/centresresearch/documents/compchem/DFT_L8.pdf](https://www.southampton.ac.uk/assets/centresresearch/documents/compchem/DFT_L8.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Skylaris_1] C.-K. Skylaris, CHEM3023: Spins, Atoms, and Molecules, Lecture
    8, Experimental observables / Unpaired electrons, [https://www.southampton.ac.uk/assets/centresresearch/documents/compchem/chem3023_L8.pdf](https://www.southampton.ac.uk/assets/centresresearch/documents/compchem/chem3023_L8.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Toulouse] Julien Toulouse, Introduction to quantum chemistry, January 20,
    2021, [https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf](https://www.lct.jussieu.fr/pagesperso/toulouse/enseignement/introduction_qc.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Tranter] Andrew Tranter, Peter J. Love, Florian Mintert, Peter V. Coveney,
    A comparison of the Bravyi-Kitaev and Jordan-Wigner transformations for the quantum
    simulation of quantum chemistry, December 5, 2018, J. Chem. Theory Comput. 2018,
    14, 11, 5617–5630, [https://doi.org/10.1021/acs.jctc.8b00450](https://doi.org/10.1021/acs.jctc.8b00450)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Wiki-Comb] Number of k-combinations for all k, Wikipedia, [https://en.wikipedia.org/wiki/Combination#Number_of_k-combinations_for_all_k](https://en.wikipedia.org/wiki/Combination#Number_of_k-combinations_for_all_k)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Wiki-GAU] Gaussian orbital, Wikipedia, [https://en.wikipedia.org/wiki/Gaussian_orbital](https://en.wikipedia.org/wiki/Gaussian_orbital)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Wiki-STO] Slater-type orbital, Wikipedia, [https://en.wikipedia.org/wiki/Slater-type_orbital](https://en.wikipedia.org/wiki/Slater-type_orbital)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Yepez] Jeffrey Yepez, Lecture notes: Quantum gates in matrix and ladder operator
    forms, January 15, 2013, [https://www.phys.hawaii.edu/~yepez/Spring2013/lectures/Lecture2_Quantum_Gates_Notes.pdf](https://www.phys.hawaii.edu/~yepez/Spring2013/lectures/Lecture2_Quantum_Gates_Notes.pdf)'
  prefs: []
  type: TYPE_NORMAL
