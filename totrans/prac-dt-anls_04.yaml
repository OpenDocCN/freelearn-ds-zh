- en: Getting Started with NumPy
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用NumPy
- en: 'This chapter teaches one of the most powerful Python libraries for data analysis:
    NumPy. You will learn key functions used for analysis and we''ll also discuss
    arrays and matrix data structures using NumPy. Finally, we''ll walk through some
    practical examples that serve as a foundation for future learning modules.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了数据分析中最强大的Python库之一：NumPy。您将学习用于分析的关键函数，我们还将讨论使用NumPy的数组和矩阵数据结构。最后，我们将通过一些作为未来学习模块基础的实用示例进行讲解。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Understanding a Python NumPy array and its importance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Python NumPy数组及其重要性
- en: Differences between single and multiple dimensional arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单维和多维数组之间的差异
- en: Making your first NumPy array
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个NumPy数组
- en: Practical use cases of NumPy and arrays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy和数组的实际应用案例
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here''s the GitHub repository of this book: [https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter03](https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter03).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的GitHub仓库：[https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter03](https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter03)。
- en: You can download and install the required software from the following link: [https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载和安装所需的软件：[https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual)。
- en: Understanding a Python NumPy array and its importance
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Python NumPy数组及其重要性
- en: Several Python courses on NumPy focus on building programming or statistical
    examples intended to create a foundation for data science.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几门关于NumPy的Python课程专注于构建编程或统计示例，旨在为数据科学打下基础。
- en: While this is important, I want to stay true to anyone who is just getting started
    working with data so the focus will be the practical usage of Python and NumPy
    for data analysis. This means not all of the features of NumPy will be covered,
    so I encourage you to learn more by looking at resources in the *Further reading*
    section. The history of the NumPy library has evolved from what was originally
    named **Numerical Python**. It was created as an open source project in 2001 by
    David Ascher, Paul Dubois, Konrad Hinsen, Jim Hugunin, and Travis Oliphant. According
    to the documentation, the purpose was to extend Python to allow the manipulation
    of large sets of objects organized in a grid-like fashion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这很重要，但我希望忠实于那些刚开始使用数据工作的人，因此重点将放在Python和NumPy在数据分析中的实际应用上。这意味着不会涵盖NumPy的所有功能，所以我鼓励你通过查看“进一步阅读”部分中的资源来学习更多。NumPy库的历史演变自最初命名为**数值Python**。它是由David
    Ascher、Paul Dubois、Konrad Hinsen、Jim Hugunin和Travis Oliphant在2001年作为一个开源项目创建的。根据文档，其目的是扩展Python，以便能够操作以网格状方式组织的大量对象。
- en: Python does not support arrays out of the box but does have a similar feature
    called **lists**, which has limitations in performance and scalability.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python不支持开箱即用的数组，但有一个类似的功能称为**列表**，它在性能和可扩展性方面存在限制。
- en: Additional research on the subject of why NumPy was created points to a need
    for efficiency in memory and storage when processing large volumes of data. Today,
    NumPy can be found as a dependent library for millions of Python projects in a
    public search of GitHub, including thousands of examples that handle image manipulation
    used for facial recognition.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对NumPy创建原因的进一步研究指出，在处理大量数据时需要内存和存储的效率。如今，NumPy可以在GitHub的公共搜索中找到，作为数百万个Python项目的依赖库，包括用于人脸识别的图像处理的数千个示例。
- en: The NumPy library is all about arrays, so let's walk through what an array is
    and why it is important. Any computer science or programming class I have taken
    has always included arrays. I was first introduced to an array before I even understood
    the concept thirty-seven years ago when I was introduced to a computer, the Apple
    IIe, in Mrs. Sherman's 4th-grade classroom.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy库全部关于数组，因此让我们了解一下数组是什么以及为什么它很重要。我参加的任何计算机科学或编程课程都包括数组。我在三十七年前，也就是在谢尔曼夫人的四年级课堂上，第一次接触到了计算机——苹果IIe——在此之前，我就接触到了数组。
- en: One of the educational software available to run on the Apple IIe was called
    <q>Logo*,* </q>which was a programming language that allowed you to write simple
    commands to control the movement of a cursor on the computer monitor. To make
    the process more appealing to a younger audience, the commands allowed you to
    create geometric shapes and print values represented by a turtle. In <q>*Logo*</q>,
    arrays used the `list` command, which groups together one or more words or numbers
    as a single object that can be referenced during the same session. You can still
    find emulators available that allow you to run the <q>Logo</q> programming language,
    which was a fun walk down memory lane for me that I hope you will enjoy as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apple IIe上可运行的一种教育软件叫做<q>Logo*，</q>这是一种允许你编写简单命令来控制计算机监视器上光标移动的编程语言。为了使过程对年轻观众更具吸引力，命令允许你创建几何形状并打印出代表海龟的值。在<q>*Logo*</q>中，数组使用`list`命令，该命令将一个或多个单词或数字组合成一个单一的对象，可以在同一会话中引用。你仍然可以找到可用的模拟器，允许你运行<q>Logo</q>编程语言，这对我是件有趣的事情，希望你也一样享受。
- en: A more formal definition of an array is it is a container used to store a list
    of values or collections of values called elements. The elements must be defined
    with a data type that applies to all of the values in an array, and that data
    type cannot be changed during the creation of the array. This sounds like a rigid
    rule but does create consistency between all of the data values. There is some
    flexibility using the data types of arrays found in the NumPy library, which are
    known as `dtype` (data types). The most common `dtype` are `Boolean` for true/false
    values, `char` for words/string values, `float` for decimal numbers, and `int`
    for integers. A full list of supported data types could be found in the documentation
    found in the *Further reading* section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的更正式的定义是它是一个用于存储值列表或值集合（称为元素）的容器。元素必须使用适用于数组中所有值的特定数据类型来定义，并且该数据类型在创建数组期间不能更改。这听起来像是一条严格的规则，但它确实在所有数据值之间创造了一致性。使用NumPy库中找到的数组数据类型（称为`dtype`）有一些灵活性，这些数据类型被称为`dtype`（数据类型）。最常见的`dtype`是`Boolean`用于真/假值，`char`用于单词/字符串值，`float`用于小数，`int`用于整数。支持的完整数据类型列表可以在*进一步阅读*部分的文档中找到。
- en: Some examples of an array can be a list of numbers from 1 to 10 or a list of
    characters such as stock tickers, `APPL`, `IBM`, and `AMZN`. Even board games
    such as *Battleship* and chess are examples of arrays where pieces are placed
    on the board and identified with the interaction of letters and numbers. Arrays
    in NumPy support complex data types including sentences but remember, you must
    keep the data type defined and consistent to avoid errors. Arrays come in all
    shapes and sizes, so let's walk through a few examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的例子可以是1到10的数字列表，或者如股票代码`APPL`、`IBM`和`AMZN`这样的字符列表。甚至像*战舰*和象棋这样的棋盘游戏也是数组的例子，其中棋子放置在棋盘上，并通过字母和数字的交互来识别。NumPy中的数组支持复杂数据类型，包括句子，但请记住，你必须保持数据类型定义和一致，以避免错误。数组有各种形状和大小，所以让我们通过几个例子来了解一下。
- en: Differences between single and multiple dimensional arrays
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单维和多维数组之间的区别
- en: 'If the array only has one dimension, it would represent that list of values
    in a single row or column (but not both). The following example shows a one-dimensional
    array assigned to variable named `1d_array`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组只有一个维度，它将表示一个单行或单列（但不能同时是两者）。以下例子展示了分配给名为`1d_array`的变量的一个一维数组：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A two-dimensional array, also known as a matrix, would be any combination of
    multiple rows and columns. The following equation is an example of a two-dimensional
    array:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个二维数组，也称为矩阵，可以是多行和多列的任意组合。以下方程式是一个二维数组的例子：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may have already realized from the examples that a structured data table
    that is made up of rows and columns is a two-dimensional array! Now you can see
    why understanding the array concept builds the foundation for data analysis against
    structured data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经从例子中意识到，由行和列组成的结构化数据表是一个二维数组！现在你可以看到为什么理解数组概念为对结构化数据进行数据分析奠定了基础。
- en: Once an array is defined, it is available for use in calculations or manipulation
    by referencing it during the same session such as when changing the sequence of
    the values or even replacing values as needed. Arrays have a multitude of uses
    in programming so I want to stay focused on specific use cases related to data
    analysis.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了数组，就可以在同一个会话中通过引用它来用于计算或操作，例如在改变值的顺序或根据需要替换值。数组在编程中有多种用途，所以我想要专注于与数据分析相关的特定用例。
- en: Understanding arrays goes beyond just a simple table of rows and columns. The
    examples discussed have either one or two dimensions. If the array has more than
    one dimension, you can reference the values along the axis (*X*, *Y*, or *Z*).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理解数组不仅仅是简单的行和列的表格。所讨论的示例要么是一维的，要么是二维的。如果一个数组有超过一个维度，你可以通过轴（*X*，*Y*，或*Z*）来引用值。
- en: With the `numpy` library package, the core feature is the `ndarray` object,
    which allows for any number of dimensions, which is called *n*-dimensional. This
    refers to the shape and size of the array across multiple axes. Hence, a 3D cube
    with an *X*, *Y*, and *Z* axis can also be created using NumPy arrays. A scatter
    plot visualization would be a useful way to analyze the type of data, which we
    will cover in [Chapter 9](e3570c4a-c8ad-483f-9f3f-3e113156e9c2.xhtml), *Plotting,
    Visualization, and Storytelling*, with some examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy`库包，核心功能是`ndarray`对象，它允许有任意数量的维度，这被称为*n*-维。这指的是数组在多个轴上的形状和大小。因此，具有*X*，*Y*和*Z*轴的3D立方体也可以使用NumPy数组创建。散点图可视化是分析数据类型的有用方式，我们将在[第9章](e3570c4a-c8ad-483f-9f3f-3e113156e9c2.xhtml)，*绘图、可视化和讲故事*中介绍，并给出一些示例。
- en: 'Some other key features of NumPy include the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的一些其他关键特性包括以下内容：
- en: The ability to perform mathematical calculations against big datasets
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够对大数据集执行数学计算的能力
- en: Using operators to compare values such as greater than and less than
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用运算符比较值，例如大于和小于
- en: Combining values in two or more arrays together
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将两个或更多数组中的值组合在一起
- en: Referencing individual elements in the sequence from how they are stored
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从它们存储的方式引用序列中的单个元素
- en: 'Visual representations of the different types of arrays using blocks to represent
    the elements are shown in the following diagrams. The following diagram is a one-dimensional
    array with three elements, which is also known as a vector when dealing with ordinal
    numbers or a tuple when working with ordered pairs. The first element of any array
    is referenced with an index value of `0`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用块来表示元素的不同类型的数组可视化表示如下图所示。以下图是一个包含三个元素的数组，也称为向量，当处理有序数时，或者当处理有序对时称为元组。任何数组的第一个元素使用索引值`0`引用：
- en: '![](img/5c648e9d-282d-4ef4-9ca5-097305c4a193.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c648e9d-282d-4ef4-9ca5-097305c4a193.png)'
- en: 'The following diagram is a two-dimensional array, which is also known as a
    matrix. This matrix builds from the first one-dimensional array but now has two
    rows with three columns for a total of six elements:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图是一个二维数组，也称为矩阵。这个矩阵是从第一个一维数组构建的，但现在有两行三列，总共六个元素：
- en: '![](img/f7688247-8c0a-42ba-af37-924a84dd775f.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f7688247-8c0a-42ba-af37-924a84dd775f.png)'
- en: 'An *n*-dimensional array could be represented as a cube similar to the one
    in the following diagram. This *n*-dimensional array continues to build from the
    first two examples and now includes a third dimension or axis:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*n*-维数组可以表示为类似于以下图的立方体。这个*n*-维数组继续从前两个示例构建，现在包括第三个维度或轴：
- en: '![](img/f8790353-9a6e-45b5-93f9-d2df2e1db559.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f8790353-9a6e-45b5-93f9-d2df2e1db559.png)'
- en: I find the best way to learn is to get hands-on and comfortable using the commands
    to work with the data, so let's launch a Jupyter notebook and walk through some
    simple examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为最好的学习方法是通过实际操作，熟悉使用命令来处理数据，所以让我们启动一个Jupyter笔记本，通过一些简单的示例来学习。
- en: Making your first NumPy array
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个NumPy数组
- en: The easiest example to create a one-dimensional array would be a straightforward
    command. After renaming your Jupyter notebook from `Untitled` to `array_basics`,
    the first thing to do is to import the `numpy` library into your active session
    by typing in `import numpy as np` in the `In []` command and running the cell.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一维数组的简单示例是一个直接的命令。在将你的Jupyter笔记本从`Untitled`重命名为`array_basics`后，首先要做的是通过在`In
    []`命令中输入`import numpy as np`并将单元格运行，将`numpy`库导入到你的活动会话中。
- en: I like to run this line first to ensure the library is installed properly so
    if you receive an error, double-check and ensure that `conda` or `pip` was set
    up correctly. See [Chapter 2](e0fe6eb2-8f38-41f7-9dea-2b177578fd3c.xhtml), *Overview
    of Python and Installing Jupyter Notebook*, for help.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢首先运行这一行以确保库已正确安装，所以如果你收到错误，请仔细检查并确保`conda`或`pip`已正确设置。有关帮助，请参阅[第2章](e0fe6eb2-8f38-41f7-9dea-2b177578fd3c.xhtml)，*Python和Jupyter
    Notebook安装概述*。
- en: 'Next, you want to assign the array object a variable name so you can reference
    it in future commands. It is common to use single character values such as `a` or
    `x` as a shortcut for your array but for just getting started, let''s use something
    more descriptive, such as `my_first_array` for easier reference. To the right
    of the equals sign, we reference the `numpy` method using `np.array` followed
    by a parentheses and square brackets, which encapsulate the assigned values for
    each element. After running the command, to ensure the syntax is correct, the
    last command will be to print the array to ensure the output matches the input. Once
    completed, the results should look similar to the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你想要给数组对象分配一个变量名，这样你就可以在未来的命令中引用它。通常使用单个字符值，如`a`或`x`作为数组的快捷方式，但为了便于入门，让我们使用更描述性的名称，例如`my_first_array`以便更容易引用。在等号右侧，我们使用`np.array`引用`numpy`方法，后跟一个括号和方括号，它们封装了每个元素的分配值。运行命令后，为了确保语法正确，最后的命令将是打印数组以确保输出与输入匹配。一旦完成，结果应该类似于以下截图：
- en: '![](img/32905fa7-5953-43b0-9dc3-f9a3ed356a13.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32905fa7-5953-43b0-9dc3-f9a3ed356a13.png)'
- en: Now that we have an array available, let's walk through how you can verify the
    contents.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了可用的数组，让我们来了解一下如何验证其内容。
- en: Useful array functions
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的数组函数
- en: 'Some useful commands to run against any array in NumPy to give you metadata
    (data about the data) are included here. The commands are being run specifically
    against the variable named `my_first_array`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包含了一些对NumPy中任何数组运行以获取元数据（关于数据的数据）的有用命令。这些命令是针对名为`my_first_array`的变量运行的：
- en: '`my_first_array.shape`: It provides the array dimensions.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.shape`：它提供了数组的维度。'
- en: '`my_first_array.size`: This shows the number of array elements (similar to
    the number of cells in a table).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.size`：这显示了数组元素的数量（类似于表格中的单元格数量）。'
- en: '`len(my_first_array)`: This shows the length of the array.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len(my_first_array)`：这显示了数组的长度。'
- en: '`my_first_array.dtype.name`: This provides the data type of the array elements.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.dtype.name`：这提供了数组元素的数据类型。'
- en: '`my_first_array.astype(int)`: This converts an array into a different data
    type—in this example, an integer that will display as `int64`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.astype(int)`：这会将数组转换为不同的数据类型——在这个例子中，将显示为`int64`的整数。'
- en: 'If you run the preceding commands in Jupyter, your notebook should look similar
    to the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将在Jupyter中运行前面的命令，你的笔记本应该看起来类似于以下截图：
- en: '![](img/d9158ed0-0705-492e-8a4a-990eb0003673.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9158ed0-0705-492e-8a4a-990eb0003673.png)'
- en: The shape, size, and length of a one-dimensional array will all output the same
    result.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一维数组的形状、大小和长度都会输出相同的结果。
- en: 'To reference individual elements in the array, you use the square brackets
    along with an ordinal whole number, which is called the array index. If you are
    familiar with the Microsoft Excel function, `vlookup`, the behavior to reference
    the index of the data you want to retrieve has a similar concept. The first element
    in any array using NumPy would be `0` so if you wanted to just display the first
    value from the prior example, you would type in the `print(my_first_array[0])` command,
    which will output `1` on the screen, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用数组中的单个元素，你使用方括号以及一个序数整数，这被称为数组索引。如果你熟悉Microsoft Excel函数`vlookup`，要引用要检索的数据的索引的行为有类似的概念。使用NumPy的任何数组中的第一个元素将是`0`，所以如果你只想显示上一个例子中的第一个值，你将输入`print(my_first_array[0])`命令，这将输出屏幕上的`1`，如以下截图所示：
- en: '![](img/078060f5-580f-48c3-84e6-1630a5be89b2.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/078060f5-580f-48c3-84e6-1630a5be89b2.png)'
- en: Since the array we are working with in this example has numeric values, we can
    also do some mathematical functions against the values.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个例子中使用的数组具有数值，我们还可以对这些值执行一些数学函数。
- en: Note the default `dtype` of the array in NumPy is `float` but if you don't define
    a data type when you first create it, Python will assign one based on the values
    assigned or provide an error message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意NumPy中数组的默认`dtype`是`float`，但如果您在首次创建时不定义数据类型，Python将根据分配的值自动分配一个，或者提供错误信息。
- en: 'Some useful statistical functions you can run against numeric arrays that have `dtype` of
    `int` or `float` include the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对具有`dtype`为`int`或`float`的数值数组运行以下一些有用的统计函数：
- en: '`my_first_array.sum()`: Sums all of the element values'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.sum()`: 计算所有元素值的总和'
- en: '`my_first_array.min()`: Provides the minimum element value in the entire array'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.min()`: 提供整个数组中的最小元素值'
- en: '`my_first_array.max()`: Provides the maximum element value in the entire array'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.max()`: 提供整个数组中的最大元素值'
- en: '`my_first_array.mean()`: Provides the mean or average, which is the sum of
    the elements divided by the count of the elements'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_first_array.mean()`: 提供平均值或平均数，即元素的总和除以元素的数量'
- en: 'If you run these statistical commands against `my_first_array` in your notebook,
    the output will look similar to the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在笔记本中对`my_first_array`运行这些统计命令，输出将类似于以下截图：
- en: '![](img/3cfd0a0f-6fec-4504-84cc-025bfe55ead8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cfd0a0f-6fec-4504-84cc-025bfe55ead8.png)'
- en: As you can see from these few examples, there are plenty of useful functions
    built into the NumPy library that will help you with data validation and quality
    checks during the analysis process. In the *Further reading* section, I have placed
    a link to a printable one-page cheat sheet for easy reference.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从这些几个示例中可以看到，NumPy库中内置了许多有用的函数，这些函数将帮助您在分析过程中进行数据验证和质量检查。在*进一步阅读*部分，我放置了一个可打印的一页速查表链接，方便参考。
- en: Practical use cases of NumPy and arrays
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy和数组的实际应用案例
- en: Let's walk through a practical use case for working with a one-dimensional array
    in data analysis. Here's the scenario—you are a data analyst who wants to know
    what is the highest daily closing price for a stock ticker for the current **Year
    To Date** (**YTD**). To do this, you can use an array to store each value as an
    element, sort the price element from high to low, and then print the first element,
    which would display the highest price as the output value.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个实际案例来了解如何在数据分析中使用一维数组。这里是场景——您是一位数据分析师，想知道当前**年度累计**（**YTD**）的股票代码的最高每日收盘价。为此，您可以使用数组将每个值作为元素存储，从高到低排序价格元素，然后打印第一个元素，这将显示最高价格作为输出值。
- en: 'Before loading the file into Jupyter, it is best to inspect the file contents,
    which supports our **Know Your Data** (**KYD**) concept discussed in [Chapter
    1](0fa7e28f-7a30-4099-9bae-30dd3c86ee4f.xhtml), *Fundamentals of Data Analysis*. The
    following screenshot is a comma-delimited, structured dataset with two columns.
    The file includes a header row with a `Date` field in the format of `YYYY-MM-DD`
    and a field labeled `Close`, which represents the closing price of the stock by
    the end of the trading day for this stock ticker. This data was downloaded from
    Yahoo Business, manually changed to exclude some columns, and then stored as a
    file in the comma-delimited format. The file name represents the ticker of the
    stock, so `AAPL` represents the Apple Company, which is a publicly-traded company on
    the **National Association of Securities Dealers Automated Quotations** (**NASDAQ**)
    stock exchange:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在将文件加载到Jupyter之前，最好检查文件内容，这支持我们在[第1章](0fa7e28f-7a30-4099-9bae-30dd3c86ee4f.xhtml)中讨论的**了解您的数据**（**KYD**）概念，*数据分析基础*。以下截图是一个逗号分隔的、具有两列的结构化数据集。该文件包含一个带有`Date`字段的标题行，其格式为`YYYY-MM-DD`，以及一个标记为`Close`的字段，它代表该股票代码在交易日结束时的收盘价。这些数据是从Yahoo
    Business下载的，手动删除了一些列，然后以逗号分隔的格式存储为文件。文件名代表股票代码，因此`AAPL`代表苹果公司，这是一家在**全国证券交易商自动报价协会**（**NASDAQ**）股票交易所上市的上市公司：
- en: '![](img/599204ee-b4f3-4555-ae07-d00f6643cb1b.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/599204ee-b4f3-4555-ae07-d00f6643cb1b.png)'
- en: The first step would be to load the file that contains the data. I have placed
    this file in this book's GitHub repository for convenience, so go ahead and set
    up a new project folder using the best practices covered in [Chapter 2](e0fe6eb2-8f38-41f7-9dea-2b177578fd3c.xhtml), *Overview
    of Python and Installing Jupyter Notebook*, by launching a new Jupyter Notebook.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将是加载包含数据的文件。为了方便，我已经将此文件放置在此书的GitHub仓库中，因此请继续使用[第2章](e0fe6eb2-8f38-41f7-9dea-2b177578fd3c.xhtml)中介绍的最佳实践创建一个新的项目文件夹，启动一个新的Jupyter
    Notebook。
- en: Working with the syntax of Python is explicit and case sensitive so don't be
    discouraged if the expected output is wrong or you receive an error message. In
    most cases, a simple change in the code will resolve the issue and you can re-run
    the command.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python的语法是明确和区分大小写的，所以如果预期的输出不正确或收到错误信息，不要气馁。在大多数情况下，简单地更改代码就可以解决问题，然后可以重新运行命令。
- en: For this scenario, there are a few options to load data in an array using NumPy.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此场景，有几个选项可以使用NumPy将数据加载到数组中。
- en: Assigning values to arrays manually
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动分配数组值
- en: 'The first option would be to explicitly assign the values to an array manually,
    as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种选项是显式地将值手动分配给数组，如下面的截图所示：
- en: '![](img/43b98d94-0c19-4456-8c20-7e317dcb5250.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43b98d94-0c19-4456-8c20-7e317dcb5250.png)'
- en: This option is fine for small datasets, testing syntax, or other specific use
    cases but will be impractical when working with big data or multiple data files.
    We took a few shortcuts using this option by only typing in a sampling of ten
    values from the source file. Since all of the stock prices are numeric and have
    a consistent data type, we can use a one-dimensional array that has a default
    `dtype` of `float`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项适用于小型数据集、测试语法或其他特定用例，但在处理大数据或多个数据文件时将不切实际。我们通过仅输入源文件中的十个值来使用此选项进行了一些捷径。由于所有股票价格都是数值型并且具有一致的数据类型，我们可以使用默认`dtype`为`float`的一维数组。
- en: 'The steps to reproduce this option are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重新生成此选项的步骤如下：
- en: Launch Jupyter and create a new Python notebook.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Jupyter并创建一个新的Python笔记本。
- en: To stay consistent with best practices, be sure to rename the notebook `highest_daily_closing_stock_price_option_1`
    before moving forward.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持最佳实践的一致性，在继续之前，请确保将笔记本重命名为`highest_daily_closing_stock_price_option_1`。
- en: 'Type in the following command to import the `numpy` library in the notebook,
    input `In []:`, and run the cell:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以在笔记本中导入`numpy`库，输入`In []:`，并运行单元格：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the next input cell, add the following command to assign a NumPy array of
    values using the shortcut of `np` and assigning it to a variable named `input_stock_price_array`.
    Proceed by running the cell, which will *not* produce an output, `Out []`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个输入单元格中，添加以下命令使用快捷键`np`将值赋给名为`input_stock_price_array`的NumPy数组变量。通过运行单元格继续，这将不会产生输出，`Out
    []`：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the next input `In []:` cell, add the following command to assign a NumPy
    array of values to a variable named `sorted_stock_price_array` and run the cell.
    Similar to before, the result will *not* produce an output, `Out []`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个输入`In []:`单元格中，添加以下命令将值赋给名为`sorted_stock_price_array`的NumPy数组变量，并运行该单元格。与之前类似，结果将不会产生输出，`Out
    []`：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Type in the following commands, which use the `print()` function to display
    the results of each of the array variables:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令，这些命令使用`print()`函数显示每个数组变量的结果：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Press the *Enter* key to create a new line so you can add the second line command
    before running the cell.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*键创建新行，以便在运行单元格之前添加第二行命令。
- en: 'Verify that the output cell displays `Out []`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元格显示`Out []`：
- en: There will be two rows of output with the first as the original array of values.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有两行输出，第一行是原始值数组。
- en: The second output row is a sorted list of the values from the array.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行输出是数组中值的排序列表。
- en: 'Type in the following command to use the `print()` function to display the
    result:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以使用`print()`函数显示结果：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify that the output cell displays `Out []`. The output should state `Highest
    closing stock price: 154.94`.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元格显示`Out []`。输出应声明`最高收盘股票价格：154.94`。
- en: The key concepts to remember from these steps are that you load an initial array
    of stock price values and name it `input_stock_price_array`. This step was done
    after importing the NumPy library and assigning it to the `np` shortcut, which
    is a best practice. Next, you create a new array from the original, name it `sorted_stock_price_array`,
    and use the `sort()` function from NumPy. The benefit of the `sort()` function
    is that it will automatically order the elements of the original array from low
    to high. Since the goal of this scenario is to get the highest value, we add the
    `[::-1]` parameter to the function, which sorts the elements of values in descending
    order.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些步骤中需要记住的关键概念是，你加载一个初始的股票价格值数组，并将其命名为 `input_stock_price_array`。这一步是在导入 NumPy
    库并将其分配给 `np` 快捷方式之后完成的，这是一种最佳实践。接下来，你从原始数组创建一个新的数组，命名为 `sorted_stock_price_array`，并使用
    NumPy 的 `sort()` 函数。`sort()` 函数的好处是它会自动将原始数组的元素从低到高排序。由于本场景的目标是获取最高值，我们在函数中添加了
    `[::-1]` 参数，这将按降序排序值元素。
- en: Creating a new array from the original array helps to make your analysis easier
    to repeat and reuse. The order of operation becomes critical in the process so
    you must walk through the steps in sequence to get the correct results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始数组创建一个新的数组有助于使你的分析更容易重复和重用。操作顺序在这个过程中变得至关重要，因此你必须按顺序执行步骤以获得正确的结果。
- en: To verify the results, we add an extra step to print both arrays together to
    visually compare the elements and confirm that the new array is sorted in descending
    order. Since the original task was to get the *highest* stock price, the final
    step is to print the first element in the sorted array, which has an index value
    of `0`. If the steps are performed without any errors, you'll see the highest
    closing stock price from the sampling of data, that is, `154.94`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证结果，我们添加了一个额外的步骤来一起打印两个数组，以便直观地比较元素并确认新数组是按降序排序的。由于原始任务是获取 *最高* 股票价格，所以最终步骤是打印排序数组中的第一个元素，其索引值为
    `0`。如果步骤没有错误地执行，你将看到数据样本中的最高收盘股票价格，即 `154.94`。
- en: Assigning values to arrays directly
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接分配数组值
- en: A more scalable option versus manually assigning values in the array is to use
    another NumPy command called the `genfromtxt()` function, which is available in
    the `numpy` library. Using this function, we can assign the array elements directly
    from reading in records from the file by row and column. The `genfromtxt()` function
    has a few parameters to support handling the structure of the data by isolating
    the specific column needed and its data type.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与手动在数组中分配值相比，一个更可扩展的选项是使用另一个名为 `genfromtxt()` 的 NumPy 命令，该命令在 `numpy` 库中可用。使用此函数，我们可以直接从读取文件的行和列中分配数组元素。`genfromtxt()`
    函数有几个参数，可以支持通过隔离所需的特定列及其数据类型来处理数据的结构。
- en: 'There are multiple required and optional parameters for the `genfromtxt()`
    function, which you can find in the *Further reading* section. For our example,
    let''s walk through the ones required to answer our business question:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`genfromtxt()` 函数有多个必需和可选参数，你可以在 *进一步阅读* 部分找到它们。对于我们的示例，让我们浏览一下回答我们业务问题所需的那些参数： '
- en: The first parameter is the filename, which is assigned to the file we upload,
    named `AAPL_stock_price_example.csv`.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是文件名，它被分配给我们上传的文件，命名为 `AAPL_stock_price_example.csv`。
- en: The second parameter is the delimiter, which is a comma since that is how the
    input file is structured.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是分隔符，由于输入文件就是这样结构的，所以是逗号。
- en: The next parameter is to inform the function that our input data file has a
    header by assigning the `names=` parameter to `True`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个参数是通知函数我们的输入数据文件有一个标题，通过将 `names=` 参数分配给 `True`。
- en: The last parameter is `usecols=`, which defines the specific column to read
    the data from.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是 `usecols=`，它定义了从哪个特定列读取数据。
- en: According to the `genformtxt()` function help, when passing a value to the `usecols=`
    parameter, the first column is always assigned to `0` by default. Since we need
    the `Close` column in our file, we change the parameter value to `1` to match
    the order that is found in our input file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `genformtxt()` 函数的帮助信息，当传递一个值给 `usecols=` 参数时，默认情况下第一列总是被分配为 `0`。由于我们需要文件中的
    `Close` 列，我们将参数值更改为 `1` 以匹配我们在输入文件中找到的顺序。
- en: 'Once the `input_stock_price_array` is loaded using the `genfromtxt()` function,
    a quick *size* check will validate that the number of elements matches the number
    of rows in the source file. Note that the header row would be excluded from the
    size. In the following screenshot, you see a few modifications to the manual array
    option but once the array is populated with values, the remaining steps are very
    similar. I added `[:5]` to the `print()` function to displace the top five elements
    and make it easier to compare the source input array and the new sorted array:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用`genfromtxt()`函数将`input_stock_price_array`加载到内存中，一个快速的*大小*检查将验证元素数量与源文件中的行数相匹配。请注意，标题行将不包括在内。在下面的屏幕截图中，您可以看到对手动数组选项的一些修改，但一旦数组用值填充，剩余的步骤非常相似。我在`print()`函数中添加了`[:5]`以显示前五个元素，使其更容易比较源输入数组和新的排序数组：
- en: '![](img/a7d35b04-880e-48a1-b625-61466d125ba7.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a7d35b04-880e-48a1-b625-61466d125ba7.png)'
- en: 'The steps to reproduce this option are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重现此选项的步骤如下：
- en: Launch Jupyter and create a new Python notebook.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Jupyter并创建一个新的Python笔记本。
- en: To stay consistent with best practices, be sure to rename the notebook `highest_daily_closing_stock_price_option_2`
    before moving forward.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持最佳实践的一致性，在继续之前，请确保将笔记本重命名为`highest_daily_closing_stock_price_option_2`。
- en: Upload the `AAPL_stock_price_example.csv` file to the Jupyter notebook.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AAPL_stock_price_example.csv`文件上传到Jupyter笔记本。
- en: Type in `import numpy as np` in the `In []:` cell.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`In []:`单元格中输入`import numpy as np`。
- en: Run the cell.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元格。
- en: Type in `input_stock_price_array = np.genfromtxt('AAPL_stock_price_example.csv',
    delimiter=',', names=True, usecols = (1))` in the next `In []:` cell.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个`In []:`单元格中输入`input_stock_price_array = np.genfromtxt('AAPL_stock_price_example.csv',
    delimiter=',', names=True, usecols = (1))`。
- en: Run the cell.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元格。
- en: Type in `input_stock_price_array.size` in the next `In []:` cell.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个`In []:`单元格中输入`input_stock_price_array.size`。
- en: Verify that the output cell displays `Out []:`. The number of rows is `229`
    when excluding the header row.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证输出单元格显示`Out []:`。当排除标题行时，行数为`229`。
- en: Type in `sorted_stock_price_array = np.sort(input_stock_price_array)[::-1]` in
    the next `In []:` cell.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个`In []:`单元格中输入`sorted_stock_price_array = np.sort(input_stock_price_array)[::-1]`。
- en: Run the cell.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元格。
- en: 'Type in `print(''Closing stock price in order of day traded: '', input_stock_price_array[:5])
    print(''Closing stock price in order from high to low: '', sorted_stock_price_array[:5])` in
    the next `In []:` cell.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在下一个`In []:`单元格中输入`print(''Closing stock price in order of day traded: '',
    input_stock_price_array[:5]) print(''Closing stock price in order from high to
    low: '', sorted_stock_price_array[:5])`。'
- en: Run the cell.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元格。
- en: 'Verify that the output cell displays `Out []`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证输出单元格显示`Out []`：
- en: There will be two rows of output with the first as the original array of values.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有两行输出，第一行是原始值数组。
- en: The second output row is a sorted list of the values from the array.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行输出是数组的排序值列表。
- en: 'Type in `print(''Highest closing stock price: '', sorted_stock_price_array[0])` in
    the next `In []:` cell.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在下一个`In []:`单元格中输入`print(''Highest closing stock price: '', sorted_stock_price_array[0])`。'
- en: Run the cell.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元格。
- en: 'Verify that the output cell displays `Out []:`. The output should state `Highest
    closing stock price: 267.100006`.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '验证输出单元格显示`Out []:`。输出应声明`Highest closing stock price: 267.100006`。'
- en: Assigning values to an array using a loop
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用循环给数组赋值
- en: Another approach that may use more code but has more flexibility to control
    data quality during the process of populating the array would be to use a loop.
    There are a few concepts to walk through using this approach but I think it will
    be useful to understand this and applicable to further learning exercises.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能使用更多代码但更有灵活性来控制填充数组过程中的数据质量的方法是使用循环。使用这种方法需要了解一些概念，但我认为这将有助于理解这一点，并适用于进一步的学习练习。
- en: 'A summary of the process is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 过程的总结如下：
- en: Read the file into memory
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件读入内存
- en: Loop through each individual record
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历每个单独的记录
- en: Strip out a value from each record
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从每条记录中删除一个值
- en: Assign each value to a temporary array
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个值分配给一个临时数组
- en: Clean up the array
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理数组
- en: Sort the array in descending order
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以降序对数组进行排序
- en: Print the first element in the array to display the highest price
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印数组中的第一个元素以显示最高价格
- en: 'The last few steps in this process should look familiar since they are a repeat
    from the previous option where we clean the array, sort it, and then print the
    first element. The complete steps to reproduce this option are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程的最后几个步骤应该看起来很熟悉，因为它们是从上一个选项中重复的，其中我们清理数组，对其进行排序，然后打印第一个元素。重现此选项的完整步骤如下：
- en: Launch Jupyter and create a new Python notebook.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Jupyter 并创建一个新的 Python 笔记本。
- en: To stay consistent with best practices, be sure to rename the notebook `highest_daily_closing_stock_price_option_3` before
    moving forward.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持最佳实践的一致性，在继续之前，请确保将笔记本重命名为 `highest_daily_closing_stock_price_option_3`。
- en: Upload the `AAPL_stock_price_example.csv` file to the Jupyter notebook.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AAPL_stock_price_example.csv` 文件上传到 Jupyter 笔记本。
- en: Be sure to upload the source CSV file in the correct file location so you can
    reference it in your Jupyter notebook.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要将源 CSV 文件上传到正确的文件位置，这样你就可以在 Jupyter 笔记本中引用它。
- en: 'Type in the following command to import the `numpy` library in the notebook
    input, `In []:`, and run the cell. There will be no output after running this
    command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在笔记本输入 `In []:` 中输入以下命令以导入 `numpy` 库，并运行该单元。运行此命令后不会有输出：
- en: '[PRE7]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Initialize the array by cleaning out all of the values before we can populate
    it. There will be no output after running this command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们可以填充它之前，通过清理所有值来初始化数组。运行此命令后不会有输出：
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the following block of code, we have to execute multiple consecutive commands
    in a loop. The sequence is important and Jupyter will auto-indent as you type
    in the `In []:` cell. I included comments to better understand the code. There
    will be no output after running this command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们必须在循环中连续执行多个命令。顺序很重要，Jupyter 会自动缩进，当你输入 `In []:` 单元时。我包括了注释以更好地理解代码。运行此命令后不会有输出：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After `temp_array` is populated with elements, a quick `print()` function identifies
    another data cleanup step that is required to move forward. Type in the following
    command in the next `In []:` cell and run the cell:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `temp_array` 被填充了元素之后，一个快速的 `print()` 函数识别出另一个需要执行的数据清理步骤。在下一个 `In []:` 单元中输入以下命令并运行该单元：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify that the output cell displays `Out []`, which will look similar to the
    following screenshot. The array includes a header row value of `Close` and has
    single quotes around the price values:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元显示 `Out []`，它将类似于以下截图。数组包括一个标题行值 `Close`，价格值周围有单引号：
- en: '![](img/2bf6f084-5b78-4c6f-a5cd-69a67cb8a905.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bf6f084-5b78-4c6f-a5cd-69a67cb8a905.png)'
- en: 'The header row from the source file has been included in our array, which is
    easy to remove by assigning the array to itself and using the `delete()` function
    to delete the first element. There will be no output after running this command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源文件中的标题行已被包含在我们的数组中，这可以通过将数组赋值给自己并使用 `delete()` 函数删除第一个元素来轻松移除。运行此命令后不会有输出：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the `size()` function to confirm the size of the array matches the original
    source input file by adding the following commands running the cell:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `size()` 函数通过添加以下命令来确认数组的大小与原始源输入文件匹配，并运行该单元：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify that the output cell displays `Out []`, which will look similar to the
    following screenshot. The number of rows is `229` when excluding the header row:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元显示 `Out []`，它将类似于以下截图。排除标题行时，行数为 `229`：
- en: '![](img/619353a1-21d2-4b2e-886a-6c6c4a0190f3.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/619353a1-21d2-4b2e-886a-6c6c4a0190f3.png)'
- en: 'The data type of the array has single quotes around each element. This can
    be remedied using a simple command from the `astype()` method by converting `dtype` of
    the array into `float` since the stock prices are decimal numeric values. There
    will be no output after running this command:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组的每个元素周围都有单引号。这可以通过使用 `astype()` 方法的简单命令来修复，将数组的 `dtype` 转换为 `float`，因为股票价格是十进制数值。运行此命令后不会有输出：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Print the first few elements in the new array to verify the array has cleaned
    elements:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印新数组中的前几个元素以验证数组已清理元素：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Verify the array now has only numeric values in decimal format and the quotes
    have been removed, similar to the following screenshot:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证数组现在只包含十进制格式的数值，并且引号已被移除，类似于以下截图：
- en: '![](img/9b194839-679c-4678-84f1-4d814ed2dea5.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b194839-679c-4678-84f1-4d814ed2dea5.png)'
- en: 'The last few steps are a repeat from the prior exercise. We start with sorting
    the array in descending order using the `sort()` function along with passing a
    parameter of `[::-1]` to sort from high to low. Type in the following command in
    the next `In []:` cell and run the cell. There will be no output after running
    this command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后几个步骤是之前练习的重复。我们使用 `sort()` 函数按降序排序数组，并通过传递参数 `[::-1]` 来从高到低排序。在下一个 `In []:`
    单元中输入以下命令并运行该单元。运行此命令后不会有输出：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Print the first few elements in the array to display the highest price by referencing
    the first sorted element in `sorted_stock_price_array` using the `print()` function
    by typing in the commands and running the cell:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`sorted_stock_price_array`中引用第一个排序元素并使用`print()`函数输入命令来运行单元格，打印数组中的前几个元素以显示最高价格：
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Verify that the output cell displays `Out []`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元格显示`Out []`：
- en: There will be two rows of output with the first as the original array of values.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会有两行输出，第一行是原始值数组。
- en: The second output row is a sorted list of the values from the array.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行输出是数组值的排序列表。
- en: 'This will look similar to the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这将类似于以下截图：
- en: '![](img/ad9202cd-f96c-42d8-894e-b3c24d9b5051.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad9202cd-f96c-42d8-894e-b3c24d9b5051.png)'
- en: 'To see the highest price, use the `print()` function and use the `[0]` command
    against the sorted array to display the first value:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看最高价格，请使用`print()`函数，并对排序后的数组使用`[0]`命令来显示第一个值：
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Verify that the output cell displays `Out []`, which will look similar to the
    following screenshot. The output should state `Highest closing stock price: 267.100006`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认输出单元格显示`Out []`，这将类似于以下截图。输出应声明`最高收盘价：267.100006`：
- en: '![](img/57e14172-405e-484b-97bb-99e5e29c7826.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57e14172-405e-484b-97bb-99e5e29c7826.png)'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations, we have now learned how to use key features of the `numpy`
    library along with some practical real-world examples. We started by learning
    about arrays and why they are important by providing examples of how they have
    been rooted in computer science and programming languages for decades. We also
    learned about the foundation of structured data, which uses the concepts of arrays,
    by explaining the differences between single and multiple dimensional arrays and
    how we commonly identify them as tables with columns and rows.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，我们现在已经学会了如何使用`numpy`库的关键特性以及一些实际应用案例。我们首先通过提供它们在计算机科学和编程语言中根植数十年的例子来了解数组及其重要性。我们还学习了结构化数据的基础，它使用数组的概念，通过解释单维和多维数组的区别以及我们通常如何将它们识别为具有列和行的表格。
- en: Once the history and theories were explained, we learned how to make a NumPy
    array and walked through some useful functions available. We ended this chapter
    with a practical real-world example by loading stock prices into an array to show
    how it can answer specific questions by using a few NumPy commands available for
    data analysis. Data literacy skills were re-enforced throughout this chapter by
    understanding why data types impact data analysis and why the concept of KYD from [Chapter
    1](0fa7e28f-7a30-4099-9bae-30dd3c86ee4f.xhtml), *Fundamentals of Data Analysis*,
    is important.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释了历史和理论之后，我们学习了如何创建NumPy数组，并探讨了一些有用的函数。我们通过将股票价格加载到数组中作为实际应用案例来结束本章，以展示如何通过使用一些用于数据分析的NumPy命令来回答特定问题。通过理解数据类型如何影响数据分析以及KYD概念的重要性，本章加强了数据处理能力。
- en: In the next chapter, we will expand your data literacy skills with some hands-on
    lessons working with data structures called DataFrames using the `pandas` library.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一些实际操作课程来扩展你的数据处理能力，这些课程将使用`pandas`库中的数据结构DataFrame。
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some links that you can refer to, for more information on the relative
    topics of this chapter:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，你可以参考，以了解更多关于本章相关主题的信息：
- en: Original NumPy user documentation: [http://people.csail.mit.edu/jrennie/python/numeric/numeric-manual.pdf](http://people.csail.mit.edu/jrennie/python/numeric/numeric-manual.pdf)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始NumPy用户文档：[http://people.csail.mit.edu/jrennie/python/numeric/numeric-manual.pdf](http://people.csail.mit.edu/jrennie/python/numeric/numeric-manual.pdf)
- en: '*Understanding Data Types in Python*: [https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html](https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*理解Python中的数据类型*：[https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html](https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html)'
- en: 'NumPy Cheat Sheet: Data Analysis in Python: [https://www.datacamp.com/community/blog/python-numpy-cheat-sheet](https://www.datacamp.com/community/blog/python-numpy-cheat-sheet)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 快速参考：Python 中的数据分析：[https://www.datacamp.com/community/blog/python-numpy-cheat-sheet](https://www.datacamp.com/community/blog/python-numpy-cheat-sheet)
- en: 'The NumPy `genfromtxt()` function help guide: [https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html](https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy `genfromtxt()` 函数帮助指南：[https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html](https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html)
- en: Image Processing with NumPy: [http://www.degeneratestate.org/posts/2016/Oct/23/image-processing-with-numpy/](http://www.degeneratestate.org/posts/2016/Oct/23/image-processing-with-numpy/)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NumPy 进行图像处理：[http://www.degeneratestate.org/posts/2016/Oct/23/image-processing-with-numpy/](http://www.degeneratestate.org/posts/2016/Oct/23/image-processing-with-numpy/)
- en: History of the Logo programming language: [http://www.sydlexia.com/logo.htm](http://www.sydlexia.com/logo.htm)
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logo 编程语言的历史：[http://www.sydlexia.com/logo.htm](http://www.sydlexia.com/logo.htm)
- en: Logo emulator: [https://www.calormen.com/jslogo/#](https://www.calormen.com/jslogo/#)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logo 模拟器：[https://www.calormen.com/jslogo/#](https://www.calormen.com/jslogo/#)
- en: Difference between Python lists and NumPy arrays: [https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference](https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 列表和 NumPy 数组之间的区别：[https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference](https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference)
- en: Yahoo Finance Stock Ticker data: [https://finance.yahoo.com/quote/AAPL/history?period1=1546318800&period2=1574744400&interval=1d&filter=history&frequency=1d](https://finance.yahoo.com/quote/AAPL/history?period1=1546318800&period2=1574744400&interval=1d&filter=history&frequency=1d)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yahoo Finance 股票行情数据：[https://finance.yahoo.com/quote/AAPL/history?period1=1546318800&period2=1574744400&interval=1d&filter=history&frequency=1d](https://finance.yahoo.com/quote/AAPL/history?period1=1546318800&period2=1574744400&interval=1d&filter=history&frequency=1d)
