["```py\n<div class=\"control-group\">\n    <button onclick=\"renderAll('bottom')\">\n        horizontal bottom\n    </button>\n    <button onclick=\"renderAll('top')\">\n        horizontal top\n    </button>\n    <button onclick=\"renderAll('left')\">\n        vertical left\n    </button>\n    <button onclick=\"renderAll('right')\">\n        vertical right\n    </button>\n</div>\n\n<script type=\"text/javascript\">\n    var height = 500, \n        width = 500, \n        margin = 25,\n        offset = 50,\n        axisWidth = width - 2 * margin,\n        svg;\n\n function createSvg(){ // <-A\n svg = d3.select(\"body\").append(\"svg\") // <-B\n .attr(\"class\", \"axis\") // <-C\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n    }\n\n    function renderAxis(scale, i, orient){\n var axis = d3.svg.axis() // <-D\n .scale(scale) // <-E\n .orient(orient) // <-F\n .ticks(5); // <-G\n\n        svg.append(\"g\")        \n .attr(\"transform\", function(){ // <-H\n if([\"top\", \"bottom\"].indexOf(orient) >= 0)\n return \"translate(\"+margin+\",\"+i*offset+\")\";\n else\n return \"translate(\"+i*offset+\", \"+margin+\")\";\n })\n .call(axis); // <-I\n    }\n\n    function renderAll(orient){\n        if(svg) svg.remove();\n\n        createSvg();\n\n        renderAxis(d3.scale.linear()\n                    .domain([0, 1000])\n                    .range([0, axisWidth]), 1, orient);\n        renderAxis(d3.scale.pow()\n                    .exponent(2)\n                    .domain([0, 1000])\n                    .range([0, axisWidth]), 2, orient);\n        renderAxis(d3.time.scale()\n                    .domain([new Date(2012, 0, 1), new Date()])\n                    .range([0, axisWidth]), 3, orient);\n    }\n</script>\n```", "```py\nvar height = 500, \n  width = 500, \n  margin = 25,\n  offset = 50,\n  axisWidth = width - 2 * margin,\n  svg;\n\nfunction createSvg(){ // <-A\n     svg = d3.select(\"body\").append(\"svg\") // <-B\n        .attr(\"class\", \"axis\") // <-C\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n} \n```", "```py\nvar axis = d3.svg.axis() // <-D\n            .scale(scale) // <-E\n            .orient(orient) // <-F\n            .ticks(5); // <-G\n```", "```py\nd3.scale.linear().domain([0, 1000]).range([0, axisWidth])\nd3.scale.pow().exponent(2).domain([0, 1000]).range([0, axisWidth])\nd3.time.scale()\n  .domain([new Date(2012, 0, 1), new Date()])\n  .range([0, axisWidth])\n```", "```py\nsvg.append(\"g\")        \n  .attr(\"transform\", function(){ // <-H\n    if([\"top\", \"bottom\"].indexOf(orient) >= 0)\n      return \"translate(\" + margin + \",\"+ i * offset + \")\";\n    else\n      return \"translate(\" + i * offset + \", \" + margin + \")\";\n    })\n    .call(axis); // <-I\n```", "```py\nfunction foo(selection) {\n  ...\n}\n```", "```py\n<script type=\"text/javascript\">\n    var height = 500, \n        width = 500, \n        margin = 25,\n        axisWidth = width - 2 * margin;\n\n    var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"class\", \"axis\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\nvar scale = d3.scale.linear()\n        .domain([0, 100])\n        .range([0, axisWidth]);\n\n    var axis = d3.svg.axis()\n            .scale(scale)\n            .ticks(5)\n            .tickSubdivide(5) // <-A\n .tickPadding(10) // <-B\n .tickFormat(function(v){ // <-C\n return v + \"%\";\n });\n\n    svg.append(\"g\")        \n        .attr(\"transform\", function(){\n            return \"translate(\" + margin + \",\" + margin + \")\";\n        })\n        .call(axis);\n</script>\n```", "```py\n<script type=\"text/javascript\">\n    var height = 500, \n        width = 500, \n        margin = 25;       \n\n    var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"class\", \"axis\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n    function renderXAxis(){\n        var axisLength = width - 2 * margin;\n\n        var scale = d3.scale.linear()\n                        .domain([0, 100])\n                        .range([0, axisLength]);\n\n        var xAxis = d3.svg.axis()\n                .scale(scale)\n                .orient(\"bottom\");\n\n        svg.append(\"g\")       \n            .attr(\"class\", \"x-axis\")\n .attr(\"transform\", function(){ // <-A\n return \"translate(\" + margin + \",\" + (height - margin) + \")\";\n })\n            .call(xAxis);\n\n d3.selectAll(\"g.x-axis g.tick\") // <-B\n .append(\"line\") // <-C\n .classed(\"grid-line\", true)\n .attr(\"x1\", 0) // <-D\n .attr(\"y1\", 0)\n .attr(\"x2\", 0)\n .attr(\"y2\", - (height - 2 * margin));  // <-E\n    }\n\n    function renderYAxis(){        \n        var axisLength = height - 2 * margin;\n\n        var scale = d3.scale.linear()\n                        .domain([100, 0])\n                        .range([0, axisLength]);\n\n        var yAxis = d3.svg.axis()\n                .scale(scale)\n                .orient(\"left\");\n\n        svg.append(\"g\")       \n            .attr(\"class\", \"y-axis\")\n .attr(\"transform\", function(){\n return \"translate(\" + margin + \",\" + margin + \")\";\n })\n            .call(yAxis);\n\n d3.selectAll(\"g.y-axis g.tick\")\n .append(\"line\")\n .classed(\"grid-line\", true)\n .attr(\"x1\", 0)\n .attr(\"y1\", 0)\n .attr(\"x2\", axisLength)\n .attr(\"y2\", 0);\n    }   \n\n    renderYAxis();\n    renderXAxis();\n</script>\n```", "```py\n.attr(\"transform\", function(){ // <-A\n  return \"translate(\" + margin + \",\" + (height - margin) + \")\";\n})\n```", "```py\nd3.selectAll(\"g.x-axis g.tick\") // <-B\n            .append(\"line\") // <-C\n                .classed(\"grid-line\", true)\n                .attr(\"x1\", 0) // <-D\n                .attr(\"y1\", 0)\n                .attr(\"x2\", 0)\n                .attr(\"y2\", - (height - 2 * margin));  // <-E\n```", "```py\nd3.selectAll(\"g.y-axis g.tick\")\n            .append(\"line\")\n                .classed(\"grid-line\", true)\n                .attr(\"x1\", 0)\n                .attr(\"y1\", 0)\n                .attr(\"x2\", axisLength) // <-F\n .attr(\"y2\", 0);\n\n```", "```py\n<script type=\"text/javascript\">\n    var height = 500, \n        width = 500, \n        margin = 25,\n        xAxis, yAxis, xAxisLength, yAxisLength;\n\n    var svg = d3.select(\"body\").append(\"svg\")     \n            .attr(\"class\", \"axis\")    \n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n    function renderXAxis(){\n        xAxisLength = width - 2 * margin;\n\n        var scale = d3.scale.linear()\n                        .domain([0, 100])\n                        .range([0, xAxisLength]);\n\n        xAxis = d3.svg.axis()\n                .scale(scale)\n                .tickSubdivide(1)\n                .orient(\"bottom\");\n\n        svg.append(\"g\")       \n            .attr(\"class\", \"x-axis\")\n            .attr(\"transform\", function(){ \n                return \"translate(\" + margin + \",\" \n                           + (height - margin) + \")\";\n            })\n            .call(xAxis);\n    }\n\n    function rescale(){ // <-A\n var max = Math.round(Math.random() * 100);\n\n xAxis.scale().domain([0, max]); // <-B\n        svg.select(\"g.x-axis\")\n            .transition()\n .call(xAxis); // <-C\n\n        renderXGridlines();\n    }       \n\n    function renderXGridlines(){\n        var lines = d3.selectAll(\"g.x-axis g.tick\")\n                .select(\"line.grid-line\")\n .remove(); // <-D\n\n        lines = d3.selectAll(\"g.x-axis g.tick\")\n                .append(\"line\") \n                .classed(\"grid-line\", true)\n\n        lines.attr(\"x1\", 0) \n                .attr(\"y1\", 0)\n                .attr(\"x2\", 0)\n                .attr(\"y2\", - yAxisLength); \n    }\n\n renderXAxis();\n renderXGridlines();\n</script>\n```", "```py\nfunction rescale(){ // <-A\n  var max = Math.round(Math.random() * 100);\n\n  xAxis.scale().domain([0, max]); // <-B\n  svg.select(\"g.x-axis\")\n    .transition()\n    .call(xAxis); // <-C\n\n  renderXGridlines();\n}   \n```", "```py\nfunction renderXGridlines(){\n        var lines = d3.selectAll(\"g.x-axis g.tick\")\n                .select(\"line.grid-line\")\n                .remove(); // <-D\n\n        lines = d3.selectAll(\"g.x-axis g.tick\")\n                .append(\"line\") \n                .classed(\"grid-line\", true)\n\n        lines.attr(\"x1\", 0) \n                .attr(\"y1\", 0)\n                .attr(\"x2\", 0)\n                .attr(\"y2\", - yAxisLength); \n}\n```"]