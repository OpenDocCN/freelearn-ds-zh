- en: Chapter 10. Interacting with your Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 与你的可视化交互
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Interacting with the mouse
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与鼠标交互
- en: Interacting with a multi-touch device
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多点触控设备交互
- en: Implementing zoom and pan behavior
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现缩放和平移行为
- en: Implementing the drag behavior
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现拖拽行为
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The ultimate goal of visualization design is to optimize applications so that
    they help us perform cognitive work more efficiently.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可视化设计的最终目标是优化应用程序，以便它们能帮助我们更有效地完成认知工作。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ware C. (2012)
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Ware C. (2012)
- en: 'The goal of data visualization is to help the audience gain information from
    a large quantity of raw data quickly and efficiently through metaphor, mental
    model alignment, and cognitive magnification. So far in this book we have introduced
    various techniques to leverage D3 library implementing many types of visualization.
    However, we haven''t touched a crucial aspect of visualization: human interaction.
    Various researches have concluded the unique value of human interaction in information
    visualization.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化的目标是帮助观众通过隐喻、心智模型对齐和认知放大，快速有效地从大量原始数据中获取信息。到目前为止，在这本书中，我们已经介绍了各种技术，利用D3库实现多种类型的可视化。然而，我们还没有触及可视化的一个关键方面：人机交互。各种研究已经得出结论，人机交互在信息可视化中具有独特的价值。
- en: Visualization combined with computational steering allows faster analyses of
    more sophisticated scenarios...This case study adequately demonstrate that the
    interaction of a complex model with steering and interactive visualization can
    extend the applicability of the modelling beyond research
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将可视化与计算引导相结合，可以更快地分析更复杂的场景...本案例研究充分证明了复杂模型与引导和交互式可视化之间的相互作用可以扩展建模的应用范围，而不仅仅是研究。
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Barrass I. & Leng J (2011)
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Barrass I. & Leng J (2011)
- en: In this chapter we will focus on D3 human visualization interaction support,
    or as mentioned earlier learn how to add computational steering capability to
    your visualization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于D3的人机可视化交互支持，或者如前所述，学习如何将计算引导能力添加到你的可视化中。
- en: Interacting with mouse events
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与鼠标事件交互
- en: The mouse is the most common and popular human-computer interaction control
    found on most desktop and laptop computers. Even today, with multi-touch devices
    rising to dominance, touch events are typically still emulated into mouse events;
    therefore making application designed to interact via mouse usable through touches.
    In this recipe we will learn how to handle standard mouse events in D3.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标是大多数桌面和笔记本电脑上最常见和最受欢迎的人机交互控制。即使今天，随着多点触控设备逐渐占据主导地位，触摸事件通常仍然被模拟成鼠标事件；因此，使设计用于通过鼠标交互的应用程序可以通过触摸使用。在本食谱中，我们将学习如何处理D3中的标准鼠标事件。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html)'
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In the following code example we will explore techniques of registering and
    handling mouse events in D3\. Although, in this particular example we are only
    handling `click` and `mousemove`, the techniques utilized here can be applied
    easily to all other standard mouse events supported by modern browsers:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将探讨在D3中注册和处理鼠标事件的技术。尽管在这个特定的例子中我们只处理了`click`和`mousemove`，但这里使用的技术可以轻松应用于现代浏览器支持的所有其他标准鼠标事件：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This recipe generates the following interactive visualization:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱生成以下交互式可视化：
- en: '![How to do it...](img/2162OS_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/2162OS_10_01.jpg)'
- en: Mouse Interaction
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标交互
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In D3, to register an event listener, we need to invoke the `on` function on
    a particular selection. The given event listener will be attached to all selected
    elements for the specified event (line A). The following code in this recipe attaches
    a `mousemove` event listener which displays the current mouse position (line B):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在D3中，要注册事件监听器，我们需要在特定选择上调用`on`函数。给定的事件监听器将被附加到所有选定的元素上，用于指定的事件（行A）。本食谱中的以下代码附加了一个`mousemove`事件监听器，用于显示当前鼠标位置（行B）：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On line C we used `d3.mouse` function to obtain the current mouse position
    relative to the given container element. This function returns a two-element array
    [x, y]. After this we also registered an event listener for mouse `click` event
    on line D using the same `on` function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once again, we retrieved the current mouse position using `d3.mouse` function
    and then generated five concentric expanding circles to simulate the ripple effect.
    The ripple effect was simulated using geometrically increasing delay (line F)
    with decreasing `stroke-width` (line E). Finally when the transition effect is
    over, the circles were removed using transition `end` listener (line G). If you
    are not familiar with this type of transition control please review [Chapter 6](ch06.html
    "Chapter 6. Transition with Style"), *Transition with Style*, for more details.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although, we have only demonstrated listening on the `click` and `mousemove`
    events in this recipe, you can listen on any event that your browser supports
    through the `on` function. The following is a list of mouse events that are useful
    to know when building your interactive visualization:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: Dispatched when user clicks a mouse button'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbclick`: Dispatched when a mouse button is clicked twice'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`: Dispatched when a mouse button is pressed'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseenter`: Dispatched when mouse is moved onto the boundaries of an element
    or one of its descendent elements'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseleave`: Dispatched when mouse is moved off of the boundaries of an element
    and all of its descendent elements'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`: Dispatched when mouse is moved over an element'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`: Dispatched when mouse is moved off of the boundaries of an element'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`: Dispatched when mouse is moved onto the boundaries of an element'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`: Dispatched when a mouse button is released over an element'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details on the ripple effect technique used in this recipe'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'W3C DOM Level 3 Events specification for a complete list of event types: [http://www.w3.org/TR/DOM-Level-3-Events/](http://www.w3.org/TR/DOM-Level-3-Events/)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'd3.mouse API document for more details on mouse detection: [https://github.com/mbostock/d3/wiki/Selections#wiki-d3_mouse](https://github.com/mbostock/d3/wiki/Selections#wiki-d3_mouse)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a multi-touch device
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, with the proliferation of multi-touch devices, any visualization targeting
    mass consumption needs to worry about its interactability not only through the
    traditional pointing device, but through multi-touches and gestures as well. In
    this recipe we will explore touch support offered by D3 to see how it can be leveraged
    to generate some pretty interesting interaction with multi-touch capable devices.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html).'
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will generate a progress-circle around the user''s touch
    and once the progress is completed then a subsequent ripple effect will be triggered
    around the circle. However, if the user prematurely ends his/her touch, then we
    shall stop the progress-circle without generating the ripples:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将在用户触摸周围生成一个进度圆，一旦进度完成，则会在圆周围触发后续的波纹效果。然而，如果用户提前结束触摸，则我们应停止进度圆而不生成波纹：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This recipe generates the following interactive visualization on a touch enabled
    device:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱在触摸设备上生成以下交互式可视化：
- en: '![How to do it...](img/2162OS_10_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_10_02.jpg)'
- en: Touch Interaction
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸交互
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Event listener for touch events are registered through D3 selection''s `on`
    function similar to what we have done with mouse events in the previous recipe:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过D3选择器的`on`函数注册触摸事件监听器，类似于我们在前一个菜谱中处理鼠标事件的方式：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One crucial difference here is that we have registered our touch event listener
    on the `body` element instead of the `svg` element since with many OS and browsers
    there are default touch behaviors defined and we would like to override it with
    our custom implementation. This is done through the following function call:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个关键区别是我们将触摸事件监听器注册在`body`元素上而不是`svg`元素上，因为在许多操作系统和浏览器中定义了默认的触摸行为，我们希望用我们的自定义实现来覆盖它。这是通过以下函数调用来完成的：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the touch event is triggered we retrieve multiple touch point data using
    the `d3.touches` function as illustrated by the following code snippet:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发触摸事件，我们使用`d3.touches`函数检索多个触摸点数据，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Instead of returning a two-element array as what `d3.mouse` function does,
    `d3.touches` returns an array of two-element arrays since there could be multiple
    touch points for each touch event. Each touch position array has data structure
    that looks like the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与`d3.mouse`函数返回的二维数组不同，`d3.touches`返回一个二维数组的数组，因为每个触摸事件可能有多个触摸点。每个触摸位置数组的数据结构如下所示：
- en: '![How it works...](img/2162OS_10_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2162OS_10_03.jpg)'
- en: Touch Position Array
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸位置数组
- en: 'Other than the [x, y] position of the touch point each position array also
    carries an identifier to help you differentiate each touch point. We used this
    identifier here in this recipe to establish object constancy. Once the touch data
    is bound to the selection the progress circle was generated for each touch around
    the user''s finger:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了触摸点的[x, y]位置外，每个位置数组还携带一个标识符，以帮助您区分每个触摸点。我们在此菜谱中使用此标识符来建立对象恒常性。一旦触摸数据绑定到选择，就会为每个触摸点在用户手指周围生成进度圆：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is done through a standard arc transition with attribute tweening (line
    A) as explained in [Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting
    into Shape*. Once the transition is over if the progress-circle has not yet been
    canceled by the user then a ripple effect similar to what we have done in the
    previous recipe was generated on line B. Since we have registered the same event
    listener `touch` function on both `touchstart` and `touchend` events, we can use
    the following lines to remove progress-circle and also set a flag to indicate
    that this progress circle has been stopped prematurely:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过标准弧形过渡和属性插值（行A）来完成的，正如在[第7章](ch07.html "第7章。进入形状")“进入形状”中所述。一旦过渡完成，如果进度圆尚未被用户取消，则在线B上生成类似于我们在前一个菜谱中所做的波纹效果。由于我们在`touchstart`和`touchend`事件上注册了相同的`touch`事件监听器，我们可以使用以下行来移除进度圆并设置一个标志来指示此进度圆已被提前停止：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to set this stateful flag since there is no way to cancel a transition
    once it is started; hence, even after removing the progress-circle element from
    the DOM tree the transition will still complete and trigger line B.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置这个状态标志，因为没有方法可以取消已经开始的过渡；因此，即使在从DOM树中移除进度圆元素之后，过渡仍然会完成并触发行B。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We have demonstrated touch interaction through the `touchstart` and `touchend`
    events; however, you can use the same pattern to handle any other touch events
    supported by your browser. The following list contains the proposed touch event
    types recommended by W3C:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过 `touchstart` 和 `touchend` 事件演示了触摸交互；然而，你可以使用相同的模式来处理浏览器支持的任何其他触摸事件。以下列表包含了
    W3C 建议的触摸事件类型：
- en: '`touchstart`: Dispatched when the user places a touch point on the touch surface'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchstart`：当用户在触摸表面上放置一个触摸点时触发'
- en: '`touchend`: Dispatched when the user removes a touch point from the touch surface'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchend`：当用户从触摸表面移除一个触摸点时触发'
- en: '`touchmove`: Dispatched when the user moves a touch point along the touch surface'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchmove`：当用户在触摸表面上移动一个触摸点时触发'
- en: '`touchcancel`: Dispatched when a touch point has been disrupted in an implementation-specific
    manner'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchcancel`：当触摸点以特定方式被干扰时触发'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '[Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details on object constancy and the ripple effect technique used
    in this recipe'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](ch06.html "第 6 章。以风格进行过渡")，*以风格进行过渡*，了解更多关于在此食谱中使用对象恒常性和涟漪效果技术'
- en: '[Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*,
    for more details on the progress-circle attribute tween transition technique used
    in this recipe'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 7 章](ch07.html "第 7 章。进入形状")，*进入形状*，了解更多关于在此食谱中使用进度圆环属性缓动过渡技术'
- en: 'W3C Touch Events proposed recommendation for a complete list of touch event
    types: [http://www.w3.org/TR/touch-events/](http://www.w3.org/TR/touch-events/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W3C 触摸事件提出了触摸事件类型的完整列表建议：[http://www.w3.org/TR/touch-events/](http://www.w3.org/TR/touch-events/)
- en: 'd3.touch API document for more details on multi-touch detection: [https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches](https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d3.touch API 文档，了解更多关于多指检测的详细信息：[https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches](https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches)
- en: Implementing zoom and pan behavior
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现缩放和平移行为
- en: Zooming and panning are common and useful techniques in data visualization,
    which work particularly well with SVG based visualization since vector graphic
    does not suffer from pixelation as its bitmap counterpart would. Zooming is especially
    useful when dealing with large data set when it is impractical or impossible to
    visualize the entire data set, thus a zoom and drill-down approach needs to be
    employed. In this recipe we will explore D3's built-in support for both zooming
    and panning.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放和平移是数据可视化中常见且有用的技术，与基于 SVG 的可视化结合得非常好，因为矢量图形不像位图那样会像素化。缩放在处理大型数据集时特别有用，当无法或不可能可视化整个数据集时，因此需要采用缩放和钻取的方法。在这个食谱中，我们将探索
    D3 内置的缩放和平移支持。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html).'
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will implement geometric zooming and panning using D3 zoom
    support. Let''s see how this is done in code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用 D3 的缩放支持来实现几何缩放和平移。让我们看看代码中是如何实现的：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This recipe generates the following zooming and panning effect:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱生成了以下缩放和平移效果：
- en: '![How to do it...](img/2162OS_10_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_10_04.jpg)'
- en: Original
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 原始
- en: '![How to do it...](img/2162OS_10_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_10_05.jpg)'
- en: Zoom
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Zoom
- en: '![How to do it...](img/2162OS_10_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_10_06.jpg)'
- en: Pan
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 平移
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'At this point you might be surprised to see how little code is necessary to
    implement this fully-functional zoom and pan effect with D3\. If you have this
    recipe open in your browser, you will also notice zooming and panning reacts perfectly
    well to both mouse wheel and multi-touch gesture. Most of the heavy lifting is
    done by D3 library. What we have to do here is to simply define what zoom behavior
    is. Let''s see how this is done in the code. Firstly, we need to define zoom behavior
    on a SVG container:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能会对使用 D3 实现这个完全功能的缩放和平移效果所需的代码如此之少而感到惊讶。如果你在浏览器中打开了这份食谱，你也会注意到缩放和平移对鼠标滚轮和多指手势都反应得非常好。大部分的重活都是由
    D3 库完成的。我们在这里需要做的就是简单地定义缩放行为。让我们看看代码中是如何实现的。首先，我们需要在 SVG 容器上定义缩放行为：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see on line A, a `d3.behavior.zoom` function was created (line B)
    and invoked on the `svg` container. `d3.behavior.zoom` will automatically create
    event listeners to handle the low-level zooming and panning gesture on the associated
    SVG container (in our case the `svg` element itself). The low-level zoom gesture
    will then be translated to a high-level D3 zoom event. The default event listeners
    support both mouse and touch events. On line C we define `scaleExtent` with a
    2-element array [1, 10] (a range). The scale extent defines how much zoom should
    be allowed (in our case we allow 10X zoom). Finally, on line D we register a custom
    zoom event handler to handle D3 zoom events. Now, let''s take a look at what job
    this zoom event handler performs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在行 A 中看到的，创建了一个 `d3.behavior.zoom` 函数（行 B），并在 `svg` 容器上调用它。`d3.behavior.zoom`
    将自动创建事件监听器来处理关联 SVG 容器（在我们的情况下是 `svg` 元素本身）上的低级缩放和平移手势。低级缩放手势随后将被转换为高级 D3 缩放事件。默认事件监听器支持鼠标和触摸事件。在行
    C 中，我们使用一个包含两个元素 [1, 10] 的数组定义 `scaleExtent`（一个范围）。缩放范围定义了允许缩放的程度（在我们的情况下我们允许
    10 倍缩放）。最后，在行 D 中，我们注册了一个自定义的缩放事件处理器来处理 D3 缩放事件。现在，让我们看看这个缩放事件处理器执行了哪些任务：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `zoom` function we simply delegate the actual zooming and panning to
    SVG transformation. To further simplify this task D3 zoom event has also calculated
    necessary translate and scale. So all we need to do is embed them into SVG transform
    attribute. Here are the properties contained in a zoom event:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `zoom` 函数中，我们只是简单地将实际的缩放和平移委托给 SVG 变换。为了进一步简化这个任务，D3 缩放事件也计算了必要的平移和缩放。因此，我们所需做的就是将它们嵌入到
    SVG 变换属性中。以下是缩放事件中包含的属性：
- en: '`scale`: A number representing the current scale'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale`：表示当前缩放比例的数字'
- en: '`translate`: A two-element array representing the current translation vector'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translate`：表示当前平移向量的二维数组'
- en: At this point you might be asking what is the point of having this zoom function.
    Why can't D3 take care of this step for us? The reason is that D3 zoom behavior
    is not designed specifically for SVG, but rather designed as a general zoom behavior
    support mechanism. Therefore, this zoom function implements the translation of
    general zoom and pan events into SVG specific transformation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能想知道拥有这个缩放函数的意义何在。为什么 D3 不能为我们处理这一步骤？原因是 D3 缩放行为并不是专门为 SVG 设计的，而是作为一个通用的缩放行为支持机制设计的。因此，这个缩放函数实现了将通用缩放和平移事件转换为
    SVG 特定变换。
- en: There's more...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The zoom function is also capable of performing additional tasks other than
    simple coordinate system transformation. For example, a common technique is to
    load additional data when the user issues a zoom gesture, hence implementing the
    drill-down capability in zoom function. A well-known example is a digital map;
    as you increase zoom level on a map, more data and details then can be loaded
    and illustrated.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放函数还能够执行除了简单的坐标系变换之外的其他任务。例如，一个常见的技巧是在用户发出缩放手势时加载额外的数据，从而在缩放函数中实现钻取功能。一个著名的例子是数字地图；当你增加地图的缩放级别时，更多的数据和细节可以被加载并展示出来。
- en: See also
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: '[Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for more
    details on `d3.selection.call` function and selection manipulation'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html "第二章. 选择性"), *选择性*，了解更多关于 `d3.selection.call` 函数和选择操作的信息'
- en: 'W3C SVG Coordinate system transformations specification for more information
    on how zoom and pan effect was achieved in SVG: [http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W3C SVG 坐标系变换规范，了解更多关于在 SVG 中如何实现缩放和平移效果的信息：[http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)
- en: 'd3.behavior.zoom API document for more details on D3 zoom support: [https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom](https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d3.behavior.zoom API 文档，了解更多关于 D3 缩放支持的信息：[https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom](https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom)
- en: Implementing drag behavior
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现拖动行为
- en: Another common behavior in interactive visualization that we will cover in this
    chapter is **drag**. Drag is useful to provide capabilities in visualization allowing
    graphical rearrangement or even user input through force, which we will discuss
    in the next chapter. In this recipe we will explore how drag behavior is supported
    in D3.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨的另一个常见交互式可视化行为是 **拖动**。拖动在可视化中非常有用，它允许通过力量提供图形重新排列或甚至通过用户输入实现，这些内容我们将在下一章讨论。在本食谱中，我们将探索拖动行为在
    D3 中的支持方式。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html).'
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here, we will produce four circles that can be dragged using D3 drag behavior
    support and additionally with SVG boundary detection while dragging. Now, let''s
    see how to implement this in code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将生成四个可以使用 D3 拖动行为支持拖动的圆圈，并且还带有 SVG 边界检测。现在，让我们看看如何在代码中实现它：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This recipe generates drag behavior on the following four circles:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱在以下四个圆圈上生成拖动行为：
- en: '![How to do it...](img/2162OS_10_07.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_10_07.jpg)'
- en: Original
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 原文
- en: '![How to do it...](img/2162OS_10_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_10_08.jpg)'
- en: Dragged
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 被拖动
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we can see, similar to D3 zoom support, drag support follows a similar pattern.
    The main drag capability is provided by `d3.behavior.drag` function (line A).
    D3 drag behavior automatically creates appropriate low-level event listeners to
    handle drag gestures on the given element then translates low-level events to
    high-level D3 drag events. Both mouse and touch events are supported:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，与 D3 缩放支持类似，拖动支持遵循类似的模式。主要的拖动能力由 `d3.behavior.drag` 函数（行 A）提供。D3 拖动行为自动创建适当的低级事件监听器来处理给定元素上的拖动手势，然后将低级事件转换为高级的
    D3 拖动事件。支持鼠标和触摸事件：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this recipe we are interested in the `drag` event and it is handled by our
    `move` function. Similar to the zoom behavior, D3 drag behavior support is event
    driven, therefore, allowing maximum flexibility in implementation, supporting
    not only SVG but also the HTML5 canvas. Once defined, the behavior can be attached
    to any element by calling it on a given selection:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们关注的是 `drag` 事件，它由我们的 `move` 函数处理。与缩放行为类似，D3 拖动行为支持是事件驱动的，因此允许在实现中具有最大的灵活性，不仅支持
    SVG，还支持 HTML5 画布。一旦定义，该行为可以通过在给定的选择上调用它来附加到任何元素：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, in the `move` function we simply use SVG transformation to move the dragged
    element to proper location (line D) based on the information conveyed by the drag
    event (line C):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `move` 函数中，我们简单地使用 SVG 变换来将拖动的元素移动到正确的位置（行 D），根据拖动事件（行 C）传达的信息：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One additional condition we check here is to calculate the SVG boundaries constraint
    so the user cannot drag an element outside of the SVG. This is achieved by the
    following check:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里检查的一个额外条件是计算 SVG 边界约束，以确保用户不能将元素拖动到 SVG 之外。这是通过以下检查实现的：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Other than the drag event, D3 drag behavior also supports two other event types.
    The following list shows all supported drag event types and their attributes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了拖动事件，D3 拖动行为还支持两种其他事件类型。以下列表显示了所有支持的拖动事件类型及其属性：
- en: '`dragstart`: Triggered when a drag gesture starts.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragstart`: 当拖动手势开始时触发。'
- en: '`drag`: Fired when the element is dragged. `d3.event` will contain *x* and
    *y* properties representing the current absolute drag coordinates of the element.
    It will also contain *dx* and *dy* properties representing the element''s coordinates
    relative to its position at the beginning of the gesture.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drag`: 当元素被拖动时触发。`d3.event` 将包含 *x* 和 *y* 属性，代表元素的当前绝对拖动坐标。它还将包含 *dx* 和 *dy*
    属性，代表元素相对于手势开始时的位置的坐标。'
- en: '`dragend`: Triggered when a drag gesture has finished.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragend`: 当拖动手势完成时触发。'
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for more
    details on `d3.selection.call` function and selection manipulation'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html "第二章. 选择性"), *选择性*，了解更多关于 `d3.selection.call` 函数和选择操作的详细信息'
- en: d3.behavior.drag API document for more details on D3 drag support [https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag](https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d3.behavior.drag API 文档，更多关于 D3 拖动支持的信息 [https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag](https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag)
