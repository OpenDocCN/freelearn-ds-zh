- en: Chapter 10. Interacting with your Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a multi-touch device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing zoom and pan behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the drag behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ultimate goal of visualization design is to optimize applications so that
    they help us perform cognitive work more efficiently.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ware C. (2012)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The goal of data visualization is to help the audience gain information from
    a large quantity of raw data quickly and efficiently through metaphor, mental
    model alignment, and cognitive magnification. So far in this book we have introduced
    various techniques to leverage D3 library implementing many types of visualization.
    However, we haven''t touched a crucial aspect of visualization: human interaction.
    Various researches have concluded the unique value of human interaction in information
    visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualization combined with computational steering allows faster analyses of
    more sophisticated scenarios...This case study adequately demonstrate that the
    interaction of a complex model with steering and interactive visualization can
    extend the applicability of the modelling beyond research
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Barrass I. & Leng J (2011)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter we will focus on D3 human visualization interaction support,
    or as mentioned earlier learn how to add computational steering capability to
    your visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with mouse events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mouse is the most common and popular human-computer interaction control
    found on most desktop and laptop computers. Even today, with multi-touch devices
    rising to dominance, touch events are typically still emulated into mouse events;
    therefore making application designed to interact via mouse usable through touches.
    In this recipe we will learn how to handle standard mouse events in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/mouse.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code example we will explore techniques of registering and
    handling mouse events in D3\. Although, in this particular example we are only
    handling `click` and `mousemove`, the techniques utilized here can be applied
    easily to all other standard mouse events supported by modern browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following interactive visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mouse Interaction
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In D3, to register an event listener, we need to invoke the `on` function on
    a particular selection. The given event listener will be attached to all selected
    elements for the specified event (line A). The following code in this recipe attaches
    a `mousemove` event listener which displays the current mouse position (line B):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On line C we used `d3.mouse` function to obtain the current mouse position
    relative to the given container element. This function returns a two-element array
    [x, y]. After this we also registered an event listener for mouse `click` event
    on line D using the same `on` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we retrieved the current mouse position using `d3.mouse` function
    and then generated five concentric expanding circles to simulate the ripple effect.
    The ripple effect was simulated using geometrically increasing delay (line F)
    with decreasing `stroke-width` (line E). Finally when the transition effect is
    over, the circles were removed using transition `end` listener (line G). If you
    are not familiar with this type of transition control please review [Chapter 6](ch06.html
    "Chapter 6. Transition with Style"), *Transition with Style*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although, we have only demonstrated listening on the `click` and `mousemove`
    events in this recipe, you can listen on any event that your browser supports
    through the `on` function. The following is a list of mouse events that are useful
    to know when building your interactive visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: Dispatched when user clicks a mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbclick`: Dispatched when a mouse button is clicked twice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`: Dispatched when a mouse button is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseenter`: Dispatched when mouse is moved onto the boundaries of an element
    or one of its descendent elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseleave`: Dispatched when mouse is moved off of the boundaries of an element
    and all of its descendent elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`: Dispatched when mouse is moved over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`: Dispatched when mouse is moved off of the boundaries of an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`: Dispatched when mouse is moved onto the boundaries of an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`: Dispatched when a mouse button is released over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details on the ripple effect technique used in this recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'W3C DOM Level 3 Events specification for a complete list of event types: [http://www.w3.org/TR/DOM-Level-3-Events/](http://www.w3.org/TR/DOM-Level-3-Events/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'd3.mouse API document for more details on mouse detection: [https://github.com/mbostock/d3/wiki/Selections#wiki-d3_mouse](https://github.com/mbostock/d3/wiki/Selections#wiki-d3_mouse)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a multi-touch device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, with the proliferation of multi-touch devices, any visualization targeting
    mass consumption needs to worry about its interactability not only through the
    traditional pointing device, but through multi-touches and gestures as well. In
    this recipe we will explore touch support offered by D3 to see how it can be leveraged
    to generate some pretty interesting interaction with multi-touch capable devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/touch.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will generate a progress-circle around the user''s touch
    and once the progress is completed then a subsequent ripple effect will be triggered
    around the circle. However, if the user prematurely ends his/her touch, then we
    shall stop the progress-circle without generating the ripples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following interactive visualization on a touch enabled
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Touch Interaction
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Event listener for touch events are registered through D3 selection''s `on`
    function similar to what we have done with mouse events in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One crucial difference here is that we have registered our touch event listener
    on the `body` element instead of the `svg` element since with many OS and browsers
    there are default touch behaviors defined and we would like to override it with
    our custom implementation. This is done through the following function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the touch event is triggered we retrieve multiple touch point data using
    the `d3.touches` function as illustrated by the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of returning a two-element array as what `d3.mouse` function does,
    `d3.touches` returns an array of two-element arrays since there could be multiple
    touch points for each touch event. Each touch position array has data structure
    that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Touch Position Array
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the [x, y] position of the touch point each position array also
    carries an identifier to help you differentiate each touch point. We used this
    identifier here in this recipe to establish object constancy. Once the touch data
    is bound to the selection the progress circle was generated for each touch around
    the user''s finger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is done through a standard arc transition with attribute tweening (line
    A) as explained in [Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting
    into Shape*. Once the transition is over if the progress-circle has not yet been
    canceled by the user then a ripple effect similar to what we have done in the
    previous recipe was generated on line B. Since we have registered the same event
    listener `touch` function on both `touchstart` and `touchend` events, we can use
    the following lines to remove progress-circle and also set a flag to indicate
    that this progress circle has been stopped prematurely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We need to set this stateful flag since there is no way to cancel a transition
    once it is started; hence, even after removing the progress-circle element from
    the DOM tree the transition will still complete and trigger line B.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have demonstrated touch interaction through the `touchstart` and `touchend`
    events; however, you can use the same pattern to handle any other touch events
    supported by your browser. The following list contains the proposed touch event
    types recommended by W3C:'
  prefs: []
  type: TYPE_NORMAL
- en: '`touchstart`: Dispatched when the user places a touch point on the touch surface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchend`: Dispatched when the user removes a touch point from the touch surface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchmove`: Dispatched when the user moves a touch point along the touch surface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchcancel`: Dispatched when a touch point has been disrupted in an implementation-specific
    manner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details on object constancy and the ripple effect technique used
    in this recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*,
    for more details on the progress-circle attribute tween transition technique used
    in this recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'W3C Touch Events proposed recommendation for a complete list of touch event
    types: [http://www.w3.org/TR/touch-events/](http://www.w3.org/TR/touch-events/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'd3.touch API document for more details on multi-touch detection: [https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches](https://github.com/mbostock/d3/wiki/Selections#wiki-d3_touches)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing zoom and pan behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zooming and panning are common and useful techniques in data visualization,
    which work particularly well with SVG based visualization since vector graphic
    does not suffer from pixelation as its bitmap counterpart would. Zooming is especially
    useful when dealing with large data set when it is impractical or impossible to
    visualize the entire data set, thus a zoom and drill-down approach needs to be
    employed. In this recipe we will explore D3's built-in support for both zooming
    and panning.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/zoom.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will implement geometric zooming and panning using D3 zoom
    support. Let''s see how this is done in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following zooming and panning effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Original
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Zoom
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pan
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point you might be surprised to see how little code is necessary to
    implement this fully-functional zoom and pan effect with D3\. If you have this
    recipe open in your browser, you will also notice zooming and panning reacts perfectly
    well to both mouse wheel and multi-touch gesture. Most of the heavy lifting is
    done by D3 library. What we have to do here is to simply define what zoom behavior
    is. Let''s see how this is done in the code. Firstly, we need to define zoom behavior
    on a SVG container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see on line A, a `d3.behavior.zoom` function was created (line B)
    and invoked on the `svg` container. `d3.behavior.zoom` will automatically create
    event listeners to handle the low-level zooming and panning gesture on the associated
    SVG container (in our case the `svg` element itself). The low-level zoom gesture
    will then be translated to a high-level D3 zoom event. The default event listeners
    support both mouse and touch events. On line C we define `scaleExtent` with a
    2-element array [1, 10] (a range). The scale extent defines how much zoom should
    be allowed (in our case we allow 10X zoom). Finally, on line D we register a custom
    zoom event handler to handle D3 zoom events. Now, let''s take a look at what job
    this zoom event handler performs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `zoom` function we simply delegate the actual zooming and panning to
    SVG transformation. To further simplify this task D3 zoom event has also calculated
    necessary translate and scale. So all we need to do is embed them into SVG transform
    attribute. Here are the properties contained in a zoom event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scale`: A number representing the current scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`translate`: A two-element array representing the current translation vector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point you might be asking what is the point of having this zoom function.
    Why can't D3 take care of this step for us? The reason is that D3 zoom behavior
    is not designed specifically for SVG, but rather designed as a general zoom behavior
    support mechanism. Therefore, this zoom function implements the translation of
    general zoom and pan events into SVG specific transformation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The zoom function is also capable of performing additional tasks other than
    simple coordinate system transformation. For example, a common technique is to
    load additional data when the user issues a zoom gesture, hence implementing the
    drill-down capability in zoom function. A well-known example is a digital map;
    as you increase zoom level on a map, more data and details then can be loaded
    and illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for more
    details on `d3.selection.call` function and selection manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'W3C SVG Coordinate system transformations specification for more information
    on how zoom and pan effect was achieved in SVG: [http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](http://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'd3.behavior.zoom API document for more details on D3 zoom support: [https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom](https://github.com/mbostock/d3/wiki/Zoom-Behavior#wiki-zoom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing drag behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another common behavior in interactive visualization that we will cover in this
    chapter is **drag**. Drag is useful to provide capabilities in visualization allowing
    graphical rearrangement or even user input through force, which we will discuss
    in the next chapter. In this recipe we will explore how drag behavior is supported
    in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter10/drag.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will produce four circles that can be dragged using D3 drag behavior
    support and additionally with SVG boundary detection while dragging. Now, let''s
    see how to implement this in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates drag behavior on the following four circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Original
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dragged
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we can see, similar to D3 zoom support, drag support follows a similar pattern.
    The main drag capability is provided by `d3.behavior.drag` function (line A).
    D3 drag behavior automatically creates appropriate low-level event listeners to
    handle drag gestures on the given element then translates low-level events to
    high-level D3 drag events. Both mouse and touch events are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this recipe we are interested in the `drag` event and it is handled by our
    `move` function. Similar to the zoom behavior, D3 drag behavior support is event
    driven, therefore, allowing maximum flexibility in implementation, supporting
    not only SVG but also the HTML5 canvas. Once defined, the behavior can be attached
    to any element by calling it on a given selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the `move` function we simply use SVG transformation to move the dragged
    element to proper location (line D) based on the information conveyed by the drag
    event (line C):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'One additional condition we check here is to calculate the SVG boundaries constraint
    so the user cannot drag an element outside of the SVG. This is achieved by the
    following check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other than the drag event, D3 drag behavior also supports two other event types.
    The following list shows all supported drag event types and their attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragstart`: Triggered when a drag gesture starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drag`: Fired when the element is dragged. `d3.event` will contain *x* and
    *y* properties representing the current absolute drag coordinates of the element.
    It will also contain *dx* and *dy* properties representing the element''s coordinates
    relative to its position at the beginning of the gesture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dragend`: Triggered when a drag gesture has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for more
    details on `d3.selection.call` function and selection manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: d3.behavior.drag API document for more details on D3 drag support [https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag](https://github.com/mbostock/d3/wiki/Drag-Behavior#wiki-drag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
