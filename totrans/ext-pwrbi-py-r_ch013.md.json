["```py\ndef add_is_outlier_IQR(data, col_name):\n    col_values = data[col_name]\n\n    Q1=col_values.quantile(0.25)\n    Q3=col_values.quantile(0.75)\n    IQR=Q3-Q1\n\n    outliers_col_name = f'is_{col_name.replace(\" \", \"_\")}_outlier'\n    data[outliers_col_name] = ((col_values < (Q1 - 1.5 * IQR)) | (col_values > (Q3 + 1.5 * IQR)))\n\n    return data\nadd_is_outlier_IQR(df, 'sulphates')\n```", "```py\ndf_no_outliers = df.loc[~df['is_sulphates_outlier']]\n```", "```py\ndf_no_outliers.drop('quality', axis=1).hist(figsize=(10,10))\nplt.tight_layout()\nplt.show()\n```", "```py\nfrom sklearn.preprocessing import PowerTransformer\ndef yeo_johnson_transf(data):\n    pt = PowerTransformer(method='yeo-johnson', standardize=True)\n    pt.fit(data)\n    lambdas = pt.lambdas_\n    df_yeojohnson = pd.DataFrame( pt.transform(data), columns=data.columns.values ) \n    return df_yeojohnson, lambdas\n```", "```py\ndf_transf, lambda_arr = yeo_johnson_transf(df_no_outliers[numeric_col_names])\ndf_transf.hist(figsize=(10,10))\nplt.tight_layout()\nplt.show()\n```", "```py\nfrom sklearn.covariance import MinCovDet\nrobust_cov = MinCovDet(support_fraction=0.7).fit(df_transf)\ncenter = robust_cov.location_\nD = robust_cov.mahalanobis(df_transf - center)\ncutoff = 0.98\ndegrees_of_freedom = df_transf.shape[1]\ncut = chi2.ppf(cutoff, degrees_of_freedom)\n```", "```py\nis_outlier_arr = (D > cut)\noutliers_stat_proba = np.zeros(len(is_outlier_arr))\nfor i in range(len(is_outlier_arr)):\n    outliers_stat_proba[i] = chi2.cdf(D[i], degrees_of_freedom)\ndf['is_mahalanobis_outlier'] = is_outlier_arr\ndf['mahalanobis_outlier_stat_sign'] = outliers_stat_proba\ndf[df['is_mahalanobis_outlier']]\n```", "```py\ndataframeHist <- function(data, bins = 10) {\n    data %>% \n        tidyr::pivot_longer( cols = everything() ) %>% \n        ggplot( aes(value) ) +\n        geom_histogram( fill='orange', na.rm = TRUE, bins = bins )+ \n        theme( ... ) +\n        facet_wrap(~ name, scales = \"free\")\n}\n```", "```py\ndata <- df_transf %>%\n    select( numeric_col_names )\ncov_obj <- data %>% \n    covRob( estim=\"mcd\", alpha=0.7 )\ncenter <- cov_obj$center\ncov <- cov_obj$cov\ndistances <- data %>%\n    mahalanobis( center=center, cov=cov )\n```", "```py\ncutoff <- 0.98\ndegrees_of_freedom <- ncol(data)\noutliers_value_cutoff <- qchisq(cutoff, degrees_of_freedom)\ndata <- data %>% \n    mutate(\n        is_mahalanobis_outlier    = distances > outliers_value_cutoff,\n        mahalanobis_outlier_proba = pchisq(distances, ncol(data)) )\ndata %>% filter( is_mahalanobis_outlier == TRUE )\n```", "```py\nlibrary(dplyr)\ndataset_url <- 'http://bit.ly/titanic-data-csv'\ntbl <- readr::read_csv(dataset_url)\ntbl_num <- tbl %>% \n  select( where(is.numeric) )\n```", "```py\n# Listwise deletion\ncor( tbl_num, method = 'pearson', use = 'complete.obs' )\n# Pairwise deletion\ncor( tbl_num, method = 'pearson', use = 'pairwise.complete.obs' )\n```", "```py\ntbl_cleaned <- tbl %>% \n  select( -Cabin, -Name, -Ticket ) %>% \n  mutate(\n    Survived = as.factor(Survived),\n    Sex = as.factor(Sex),\n    Embarked = as.factor(Embarked)\n  )\n```", "```py\ncorr_impute_missing_values <- function(df, m = 5, variables, method = c('pearson', 'spearman')) {\n  method <- method[1]\n  df_imp_lst <- mice(df, m = m, printFlag = FALSE)\n  corr_tbl <- miceadds::micombine.cor(df_imp_lst, variables = variables, method = method) %>% \n    as_tibble() %>% \n    arrange( variable1, variable2 )\n  return( corr_tbl )\n}\n```", "```py\n# Get the indexes of numeric columns\nnumeric_col_idxs <- which(sapply(tbl_cleaned, is.numeric))\ncorr_tbl <- corr_impute_missing_values(tbl_cleaned, variables = numeric_col_idxs, method = 'pearson')\ncorr_tbl\n```", "```py\nair_df <- read.csv('https://bit.ly/airpassengers')\n# Create 10% of missing values in the vector\nset.seed(57934)\nvalue_missing <- missForest::prodNA(air_df['value'], noNA = 0.1)\n# Force a larger gap in the vector\nvalue_missing[67:68,] <- NA\n# Add the vector with missing values to the dataframe\nair_missing_df <- air_df %>% \n    mutate( date = ymd(date) ) %>% \n    rename( complete = value ) %>% \n    bind_cols( value = value_missing )\n```"]