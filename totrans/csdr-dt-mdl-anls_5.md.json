["```py\n// table to store historical stock quote data\nCREATE TABLE quote (\n  symbol varchar, // stock symbol\n  price_time timestamp, // timestamp of quote\n  open_price float, // open price\n  high_price float, // high price\n  low_price float, // low price\n  close_price float, // close price\n  volume double, // volume\n  PRIMARY KEY (symbol, price_time) // primary key\n);\n```", "```py\n$ sudo apt-get install libjna-java\n\n```", "```py\n$ sudo apt-get –y update\n$ sudo apt-get –y upgrade\n$ sudo apt-get install python-pip python-dev \\\n$ python2.7-dev build-essential\n\n```", "```py\n$ python --version\n\n```", "```py\n$ pip install cassandra-driver\n\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_001.py\n\n## web is the shorthand alias of pandas.io.data\nimport pandas.io.data as web\nimport datetime\n\n## we want to retrieve the historical daily stock quote of\n## Goldman Sachs from Yahoo! Finance for the period\n## between 1-Jan-2012 and 28-Jun-2014\nsymbol = 'GS'\nstart_date = datetime.datetime(2012, 1, 1)\nend_date = datetime.datetime(2014, 6, 28)\n\n## data is a DataFrame holding the daily stock quote\ndata = web.DataReader(symbol, 'yahoo', start_date, end_date)\n\n## use a for-loop to print out the data\nfor index, row in data.iterrows():\n    print index.date(), '\\t', row['Open'], '\\t', row['High'], \\\n          '\\t', row['Low'], '\\t', row['Close'], '\\t', row['Volume']\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_002.py\n\n## web is the shorthand alias of pandas.io.data\nimport pandas.io.data as web\nimport datetime\n\n## we want to retrieve the historical daily stock quote of\n## Goldman Sachs from Yahoo! Finance for the period\n## between 1-Jan-2012 and 28-Jun-2014\nsymbol = 'GS'\nstart_date = datetime.datetime(2012, 1, 1)\nend_date = datetime.datetime(2014, 6, 28)\n\n## data is a DataFrame holding the daily stock quote\ndata = web.DataReader(symbol, 'yahoo', start_date, end_date)\n\n## standardize the column names\n## rename index column to price_date to match the Cassandra table\ndata.index.names=['price_date']\n\n## drop extra column 'Adj Close'\ndata = data.drop(['Adj Close'], axis=1)\n\n## rename the columns to match the respective columns in Cassandra\ndata = data.rename(columns={'Open':'open_price', \\\n                            'High':'high_price', \\\n                            'Low':'low_price', \\\n                            'Close':'close_price', \\\n                            'Volume':'volume'})\n\n## use a for-loop to print out the transformed data\nfor index, row in data.iterrows():\n    print index.date(), '\\t', row['open_price'], '\\t', \\\n                              row['high_price'], '\\t', \\\n                              row['low_price'], '\\t', \\\n                              row['close_price'], '\\t', \\\n                              row['volume']\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_003.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect()\n\n## create keyspace packtcdma if not exists\n## currently it runs on a single-node cluster\nsession.execute(\"CREATE KEYSPACE IF NOT EXISTS packtcdma \" + \\\n                \"WITH replication\" + \\\n                \"={'class':'SimpleStrategy', \" + \\\n                \"'replication_factor':1}\")\n\n## use packtcdma keyspace\nsession.set_keyspace('packtcdma')\n\n## execute CQL statement to create quote table if not exists\nsession.execute('CREATE TABLE IF NOT EXISTS quote (' + \\\n                'symbol varchar,' + \\\n                'price_time timestamp,' + \\\n                'open_price float,' + \\\n                'high_price float,' + \\\n                'low_price float,' + \\\n                'close_price float,' + \\\n                'volume double,' + \\\n                'PRIMARY KEY (symbol, price_time))')\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_004.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\nfrom decimal import Decimal\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## d: standardized DataFrame containing historical data\ndef insert_quote(ss, sym, d):\n    ## CQL to insert data, ? is the placeholder for parameters\n    insert_cql = 'INSERT INTO quote (' + \\\n                 'symbol, price_time, open_price, high_price,' + \\\n                 'low_price, close_price, volume' + \\\n                 ') VALUES (' + \\\n                 '?, ?, ?, ?, ?, ?, ?' + \\\n                 ')'\n    ## prepare the insert CQL as it will run repeatedly\n    insert_stmt = ss.prepare(insert_cql)\n\n    ## set decimal places to 4 digits\n    getcontext().prec = 4\n\n    ## loop thru the DataFrame and insert records\n    for index, row in d.iterrows():\n        ss.execute(insert_stmt, \\\n                   [sym, index, \\\n                   Decimal(row['open_price']), \\\n                   Decimal(row['high_price']), \\\n                   Decimal(row['low_price']), \\\n                   Decimal(row['close_price']), \\\n                   Decimal(row['volume']) \\\n                   ])\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_005.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\nfrom decimal import Decimal\n\n## web is the shorthand alias of pandas.io.data\nimport pandas.io.data as web\nimport datetime\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## d: standardized DataFrame containing historical data\ndef insert_quote(ss, sym, d):\n    ## CQL to insert data, ? is the placeholder for parameters\n    insert_cql = \"INSERT INTO quote (\" + \\\n                 \"symbol, price_time, open_price, high_price,\" + \\\n                 \"low_price, close_price, volume\" + \\\n                 \") VALUES (\" + \\\n                 \"?, ?, ?, ?, ?, ?, ?\" + \\\n                 \")\"\n    ## prepare the insert CQL as it will run repeatedly\n    insert_stmt = ss.prepare(insert_cql)\n\n    ## set decimal places to 4 digits\n    getcontext().prec = 4\n\n    ## loop thru the DataFrame and insert records\n    for index, row in d.iterrows():\n        ss.execute(insert_stmt, \\\n                   [sym, index, \\\n                   Decimal(row['open_price']), \\\n                   Decimal(row['high_price']), \\\n                   Decimal(row['low_price']), \\\n                   Decimal(row['close_price']), \\\n                   Decimal(row['volume']) \\\n                   ])\n\n## retrieve the historical daily stock quote from Yahoo! Finance\n## Parameters\n## sym: stock symbol\n## sd: start date\n## ed: end date\ndef collect_data(sym, sd, ed):\n    ## data is a DataFrame holding the daily stock quote\n    data = web.DataReader(sym, 'yahoo', sd, ed)\n    return data\n\n## transform received data into standardized format\n## Parameter\n## d: DataFrame containing Yahoo! Finance stock quote\ndef transform_yahoo(d):\n    ## drop extra column 'Adj Close'\n    d1 = d.drop(['Adj Close'], axis=1)\n\n    ## standardize the column names\n    ## rename index column to price_date\n    d1.index.names=['price_date']\n\n    ## rename the columns to match the respective columns\n    d1 = d1.rename(columns={'Open':'open_price', \\\n                            'High':'high_price', \\\n                            'Low':'low_price', \\\n                            'Close':'close_price', \\\n                            'Volume':'volume'})\n    return d1\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect('packtcdma')\n\nsymbol = 'GS'\nstart_date = datetime.datetime(2012, 1, 1)\nend_date = datetime.datetime(2014, 6, 28)\n\n## collect data\ndata = collect_data(symbol, start_date, end_date)\n\n## transform Yahoo! Finance data\ndata = transform_yahoo(data)\n\n## insert historical data\ninsert_quote(session, symbol, data)\n\n## close Cassandra connection\ncluster.shutdown()\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_006.py\n\nimport pandas as pd\nimport numpy as np\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## sd: start date\n## ed: end date\n## return a DataFrame of stock quote\ndef retrieve_data(ss, sym, sd, ed):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT * FROM quote WHERE symbol=? \" + \\\"AND price_time >= ? AND price_time <= ?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [sym, sd, ed])\n\n    ## initialize an index array\n    idx = np.asarray([])\n\n    ## initialize an array for columns\n    cols = np.asarray([])\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        idx = np.append(idx, [r.price_time])\n        cols = np.append(cols, [r.open_price, r.high_price, \\r.low_price, r.close_price, r.volume])\n\n    ## reshape the 1-D array into a 2-D array for each day\n    cols = cols.reshape(idx.shape[0], 5)\n\n    ## convert the arrays into a pandas DataFrame\n    df = pd.DataFrame(cols, index=idx, \\\n                      columns=['close_price', 'high_price', \\\n                      'low_price', 'close_price', 'volume'])\n    return df\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_007.py\n\nimport pandas as pd\n\n## function to compute a Simple Moving Average on a DataFrame\n## d: DataFrame\n## prd: period of SMA\n## return a DataFrame with an additional column of SMA\ndef sma(d, prd):\n    d['sma'] = pd.rolling_mean(d.close_price, prd)\n    return d\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_008.py\n\n## function to apply screening rule to generate buy signals\n## screening rule, Close > 10-Day SMA\n## d: DataFrame\n## return a DataFrame containing buy signals\ndef signal_close_higher_than_sma10(d):\n    return d[d.close_price > d.sma]\n```", "```py\n# -*- coding: utf-8 -*-\n# program: chapter05_009.py\n\n## import Cassandra driver library\nfrom cassandra.cluster import Cluster\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n## function to insert historical data into table quote\n## ss: Cassandra session\n## sym: stock symbol\n## sd: start date\n## ed: end date\n## return a DataFrame of stock quote\ndef retrieve_data(ss, sym, sd, ed):\n    ## CQL to select data, ? is the placeholder for parameters\n    select_cql = \"SELECT * FROM quote WHERE symbol=? \" + \\\"AND price_time >= ? AND price_time <= ?\"\n\n    ## prepare select CQL\n    select_stmt = ss.prepare(select_cql)\n\n    ## execute the select CQL\n    result = ss.execute(select_stmt, [sym, sd, ed])\n\n    ## initialize an index array\n    idx = np.asarray([])\n\n    ## initialize an array for columns\n    cols = np.asarray([])\n\n    ## loop thru the query resultset to make up the DataFrame\n    for r in result:\n        idx = np.append(idx, [r.price_time])\n        cols = np.append(cols, [r.open_price, r.high_price, \\\n                         r.low_price, r.close_price, r.volume])\n\n    ## reshape the 1-D array into a 2-D array for each day\n    cols = cols.reshape(idx.shape[0], 5)\n\n    ## convert the arrays into a pandas DataFrame\n    df = pd.DataFrame(cols, index=idx, \\\n                      columns=['open_price', 'high_price', \\\n                      'low_price', 'close_price', 'volume'])\n    return df\n\n## function to compute a Simple Moving Average on a DataFrame\n## d: DataFrame\n## prd: period of SMA\n## return a DataFrame with an additional column of SMA\ndef sma(d, prd):\n    d['sma'] = pd.rolling_mean(d.close_price, prd)\n    return d\n\n## function to apply screening rule to generate buy signals\n## screening rule, Close > 10-Day SMA\n## d: DataFrame\n## return a DataFrame containing buy signals\ndef signal_close_higher_than_sma10(d):\n    return d[d.close_price > d.sma]\n\n## create Cassandra instance\ncluster = Cluster()\n\n## establish Cassandra connection, using local default\nsession = cluster.connect('packtcdma')\n## scan buy-and-hold signals for GS over 1 month since 28-Jun-2012\nsymbol = 'GS'\nstart_date = datetime.datetime(2012, 6, 28)\nend_date = datetime.datetime(2012, 7, 28)\n\n## retrieve data\ndata = retrieve_data(session, symbol, start_date, end_date)\n\n## close Cassandra connection\ncluster.shutdown()\n\n## compute 10-Day SMA\ndata = sma(data, 10)\n\n## generate the buy-and-hold signals\nalerts = signal_close_higher_than_sma10(data)\n\n## print out the alert list\nfor index, r in alerts.iterrows():\n    print index.date(), '\\t', r['close_price']\n```"]