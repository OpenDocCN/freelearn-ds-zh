["```py\nfor layer in iface.legendInterface().layers():\n    print layer.name() \n```", "```py\n>>> execfile(u'/.../tmp1NR24f.py'.encode('utf-8'))\nwater\nurban\nbasemap\n\n```", "```py\nfrom console import console\nfrom PyQt4.QtCore import Qt\nconsole._console.setAllowedAreas(Qt.DockWidgetAreas(Qt.NoDockWidgetArea))\n```", "```py\nfrom console import console\nfrom PyQt4.QtCore import Qt\nconsole.show_console()\nconsole._console.setAllowedAreas(Qt.DockWidgetAreas(Qt.NoDockWidgetArea))\n```", "```py\nlayer = iface.addVectorLayer(\"/path/to/shapefile.shp\", \"layer_name\", \"ogr\")\n```", "```py\nregistry = QgsProviderRegistry.instance()\nprovider = registry.provider(\"ogr\",\"/path/to/shapefile.shp\")\nif not provider.isValid():\n    print \"Invalid shapefile.\"\n    return\n```", "```py\nfor field in provider.fields():\n      print field.name(), field.typeName()\n```", "```py\nfor feature in provider.getFeatures(QgsFeatureRequest()):\n    print feature.attribute(\"name\")\n```", "```py\nfrom PyQt4.QtGui import *\n```", "```py\ndef analyze_shapefile():\n    ...\n\nanalyze_shapefile()\n```", "```py\ndef analyze_shapefile():\n    filename = QFileDialog.getOpenFileName(iface.mainWindow(),\n                                           \"Select Shapefile\",\n                                           \"~\", '*.shp')\n    if not filename:\n        print \"Cancelled.\"\n        return\n```", "```py\n    registry = QgsProviderRegistry.instance()\n    provider = registry.provider(\"ogr\",filename)\n    if not provider.isValid():\n        print \"Invalid shapefile.\"\n        return\n```", "```py\n    attr_names = []\n    for field in provider.fields():\n        attr_names.append(field.name())\n```", "```py\n    tot_length = 0\n    tot_area = 0\n```", "```py\n    crs = provider.crs()\n    calculator = QgsDistanceArea()\n    calculator.setSourceCrs(crs)\n    calculator.setEllipsoid(crs.ellipsoidAcronym())\n    calculator.setEllipsoidalMode(crs.geographicFlag())\n```", "```py\n    for feature in provider.getFeatures(QgsFeatureRequest()):\n        ...\n```", "```py\n        if \"name\" in attr_names:\n            feature_label = feature.attribute(\"name\")\n        elif \"Name\" in attr_names:\n            feature_label = feature.attribute(\"Name\")\n        elif \"NAME\" in attr_names:\n            feature_label = feature.attribute(\"NAME\")\n        else:\n            feature_label = str(feature.id())\n```", "```py\n        geometry = feature.geometry()\n```", "```py\n        if geometry.type() == QGis.Line:\n            ...\n        elif geometry.type() == QGis.Polygon:\n            ...\n        else:\n            ...\n```", "```py\n        if geometry.type() == QGis.Line:\n            length = int(calculator.measure (geometry) / 1000)\n            tot_length = tot_length + length\n            feature_info = \"line of length %d kilometers\" % length\n```", "```py\n        elif geometry.type() == QGis.Polygon:\n            area = int(calculator.measure (geometry) / 1000000)\n            tot_area = tot_area + area\n            feature_info = \"polygon of area %d square kilometers\" % area\n```", "```py\n        else:\n            geom_type = qgis.vectorGeometryType(geometry.type())\n            feature_info = \"geometry of type %s\" % geom_type\n```", "```py\n        print \"%s: %s\" % (feature_label, feature_info)\n```", "```py\n    print \"Total length of all line features: %d\" % tot_length\n    print \"Total area of all polygon features: %d\" % tot_area\n```", "```py\nAntigua and Barbuda: polygon of area 549 square kilometers\nAlgeria: polygon of area 2334789 square kilometers\nAzerbaijan: polygon of area 86109 square kilometers\nAlbania: polygon of area 28728 square kilometers\nArmenia: polygon of area 29732 square kilometers\n...\nJersey: polygon of area 124 square kilometers\nSouth Georgia South Sandwich Islands: polygon of area 3876 square kilometers\nTaiwan: polygon of area 36697 square kilometers\nTotal length of all line features: 0\nTotal area of all polygon features: 147363163\n\n```", "```py\niface.mainWindow().statusBar().showMessage(\"Please wait...\")\n```", "```py\niface.mainWindow().statusBar().clearMessage()\n```", "```py\nmessageBar.pushMessage(text, level=QsgMessageBar.INFO, duration=None)\n```", "```py\nfrom qgis.gui import *\niface.messageBar().pushMessage(\"Hello World\",\n         level=QgsMessageBar.INFO)\n```", "```py\nmessageBar.pushMessage(title, text, level=QgsMessageBar.INFO, duration=None)\n```", "```py\nprogressMessage = iface.messageBar().createMessage(\"Please wait\")\nprogressBar = QProgressBar()\nprogressBar.setMaximum(100)\nprogressBar.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)\nprogressMessage.layout().addWidget(progressBar)\niface.messageBar().pushWidget(progressMessage)\n...\nprogressBar.setValue(n)\n...\niface.messageBar().clearWidgets()\n```", "```py\nfor i in range(100):\n    QgsMessageLog.logMessage(\"Message %d\" % i)\n```", "```py\nQgsMessageLog.logMessage(\"Something is wrong\",\n                         level=QgsMessageLog.CRITICAL)\n```", "```py\nQgsMessageLog.logMessage(\"Test Message\", tag=\"my panel\")\n```", "```py\nfrom PyQt4.QtGui import *\n\nclass MyDialog(QDialog):\n    def __init__(self):\n        QDialog.__init__(self)\n        self.setWindowTitle(\"Enter Coordinate\")\n\n        layout = QFormLayout(self)\n\n        self.lat_label = QLabel(\"Latitude\", self)\n        self.lat_field = QLineEdit(self)\n\n        self.long_label = QLabel(\"Longitude\", self)\n        self.long_field = QLineEdit(self)\n\n        self.ok_btn = QPushButton(\"OK\", self)\n        self.ok_btn.clicked.connect(self.accept)\n\n        self.cancel_btn = QPushButton(\"Cancel\", self)\n        self.cancel_btn.clicked.connect(self.reject)\n\n        btn_layout = QHBoxLayout(self)\n        btn_layout.addWidget(self.ok_btn)\n        btn_layout.addWidget(self.cancel_btn)\n\n        layout.addRow(self.lat_label, self.lat_field)\n        layout.addRow(self.long_label, self.long_field)\n        layout.addRow(btn_layout)\n\n        self.setLayout(layout)\n\ndialog = MyDialog()\nif dialog.exec_() == QDialog.Accepted:\n    lat = dialog.lat_field.text()\n    long = dialog.long_field.text()\n    print lat,long\n```"]