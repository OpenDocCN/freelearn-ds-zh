- en: Chapter 9. Mobile Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 移动开发
- en: Mobile web development has caused quite a stir in the last few years. When Apple
    introduced the iPhone, it didn't support third party plugins such as Flash and
    Silverlight. This challenged web developers to deliver worthwhile web experiences
    on the mobile platform with only HTML, CSS, and JavaScript. Proposed feature enhancements
    such as HTML5, CSS3, and ECMAScript 5 and 6, along with more powerful browsers,
    have improved the mobile browsing experience.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 移动网页开发在过去的几年中引起了很大的轰动。当苹果公司推出iPhone时，它不支持第三方插件，如Flash和Silverlight。这挑战了网页开发者仅使用HTML、CSS和JavaScript在移动平台上提供有价值的网页体验。如HTML5、CSS3、ECMAScript
    5和6等提议的功能增强，以及更强大的浏览器，都改善了移动浏览体验。
- en: Companies and organizations have taken different approaches to delivering the
    mobile web experience. Some organizations reroute mobile browsers to sites that
    serve mobile content only (with URLs such as `mobile.example.com` or `m.example.com`
    instead of `www.example.com`). Others have used responsive design and mobile first
    strategies to deliver the same content, formatted differently, for phones, tablets,
    and desktop screens. Still others, such as Facebook, have given up on mobile web
    development and focused on mobile apps, using native applications or hybrid web
    apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 公司和组织在提供移动网页体验方面采取了不同的方法。一些组织将移动浏览器重定向到仅提供移动内容的网站（使用如 `mobile.example.com` 或
    `m.example.com` 这样的URL，而不是 `www.example.com`）。其他人则使用了响应式设计和以移动为先的策略，为手机、平板电脑和桌面屏幕提供格式不同的相同内容。还有一些公司，如Facebook，已经放弃了移动网页开发，专注于移动应用，使用原生应用或混合网页应用。
- en: 'In this chapter, we''ll look at the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容：
- en: What makes developing for mobile devices different from desktop website development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备开发与桌面网站开发的不同之处
- en: How to use the ArcGIS compact build
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 ArcGIS 紧凑型构建
- en: How to control the mobile user experience with `dojox/mobile` modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `dojox/mobile` 模块控制移动用户体验
- en: Embracing mobile
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥抱移动
- en: Mobile web development is a fast-growing market. In India in 2012, the percentage
    of Internet content served from mobile devices surpassed that of desktop computers.
    In the US, reports show that web traffic from mobile devices accounted for 10
    percent in 2014, and the percentage is increasing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 移动网页开发是一个快速发展的市场。在2012年的印度，从移动设备提供互联网内容的百分比超过了桌面电脑。在美国，报告显示，2014年来自移动设备的网络流量占10%，并且这个比例正在增加。
- en: What are people doing with the mobile Internet? Some are checking their e-mail.
    Others are searching for information, playing games, or keeping in contact with
    others. People want to be connected, entertained, and informed, and they want
    it available when they want them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 人们在使用移动互联网时都在做什么？有些人正在检查他们的电子邮件。其他人正在搜索信息，玩游戏，或者与他人保持联系。人们希望保持连接，享受娱乐，并获取信息，他们希望这些信息在他们需要的时候可用。
- en: Mobile is different
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动与众不同
- en: Making a website work on a mobile device is vastly different from making it
    work on a desktop machine. There are so many things that were features on a desktop
    browser that are now a hindrance to work with on a mobile device. Let's look at
    both the good and the bad of what makes mobile different.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使网站在移动设备上工作与在桌面机器上工作大相径庭。在桌面浏览器上曾是特性的许多事物，现在在移动设备上却成为了障碍。让我们看看是什么让移动与众不同，无论是好是坏。
- en: The good
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 好的方面
- en: Even with all the negatives, mobile application development is an exciting field.
    There are a lot of good features available for mobile web applications. Modern
    smartphones offer sensors and tools that would be strange on a desktop, but are
    vital for mobile apps. They bring a world of information to the user, and let
    the user make notes and share things where they are, instead of later that day
    when they boot up their desktop. Let's look at these features in more detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有所有这些负面因素，移动应用开发仍然是一个令人兴奋的领域。移动网页应用有很多好的特性。现代智能手机提供了在桌面电脑上显得奇怪但却是移动应用至关重要的传感器和工具。它们为用户带来了一个信息的世界，并允许用户在需要的时候记录和分享事物，而不是在启动他们的桌面电脑的那天晚上。让我们更详细地看看这些特性。
- en: Access to phone sensors
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问手机传感器
- en: Mobile devices come with a number of sensors built in. These sensors can test
    the device's orientation, acceleration, and even location. Location can be collected
    through a built-in GPS device, cell phone signal triangulation, or based on the
    location of your Wi-Fi signal. Newer sensors within the phone can relay battery
    strength. Also, some third-party hybrid tools provide access to more phone features,
    such as the memory, contact lists, and the camera.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备内置了许多传感器。这些传感器可以检测设备的方向、加速度，甚至位置。位置可以通过内置的GPS设备、手机信号三角测量或基于Wi-Fi信号的位置来收集。手机中的新传感器可以传递电池强度。此外，一些第三方混合工具提供了访问更多手机功能的方法，例如内存、联系人和相机。
- en: Instant access to the app
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即时访问应用程序
- en: Users no longer have to write down a URL to pull up at home. Now, they can speak
    it into the browser, or take a picture of a QR Code to access a website. That
    instant access gets more people to use your application right away, cutting the
    risk of forgetting your app's location.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用户不再需要写下URL在家中使用。现在，他们可以将URL说给浏览器听，或者拍下二维码来访问网站。这种即时访问让更多的人立即使用您的应用程序，减少了忘记应用程序位置的风险。
- en: With instant access to the application, users can collect data where they are,
    instead of going home to input information. The user can take a picture of a broken
    fire hydrant, log in to a community issues app, and report the problem to the
    proper authorities. Field workers can collect feature data in the field and check
    it in. Volunteer geographical data collection can be used for citizen science,
    municipal issue tracking, and a host of other applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过即时访问应用程序，用户可以在他们所在的位置收集数据，而不是回家输入信息。用户可以拍摄损坏的消防栓的照片，登录社区问题应用程序，并向适当的当局报告问题。现场工作人员可以在现场收集特征数据并检查它们。志愿者地理数据收集可用于公民科学、市政问题跟踪以及其他众多应用。
- en: Instant access to the user
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即时访问用户
- en: Unlike a desktop application that may be used by anybody sitting at a library
    computer kiosk, mobile phones are more likely to have a single user. Application
    usage can be tied in to user profiles to give you a more complete picture of how
    your app is used by different demographics. The possibilities are endless.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与可能被图书馆电脑亭的任何人使用的桌面应用程序不同，手机更有可能只有一个用户。应用程序的使用可以与用户资料相结合，为您提供一个更全面的了解，了解您的应用程序如何被不同的群体所使用。可能性是无限的。
- en: The bad
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坏处
- en: You spend hours putting together a gorgeous website that looks perfect on your
    monitor. You test your site on three or four different browsers, and like what
    you see. It looks great; it works great. It's bound to be a success.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你花费数小时搭建了一个看起来完美的网站，在您的显示器上看起来无懈可击。你在三四个不同的浏览器上测试了您的网站，并且对看到的结果感到满意。它看起来很棒；它运行得很好。它注定会成功。
- en: Then, you run into a friend and want to show them your amazing website, but
    all you have is your smartphone. No problem, you think, as you type in site's
    URL into your phone's browser. What comes up is a usability nightmare. Parts of
    the screen are cut off. Controls don't work like you planned. You can't navigate
    through the menus properly. Overall, it's a mess.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你遇到了一个朋友，想向他们展示你的惊人网站，但你只有智能手机。你认为没问题，因为你正在将网站的URL输入到手机的浏览器中。出现的是可用性噩梦。屏幕的一部分被切掉了。控件不像你计划的那样工作。你不能正确地浏览菜单。总的来说，一团糟。
- en: Now, let's look at some of the pain points of mobile web development.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看移动网页开发的一些痛点。
- en: So many screen sizes
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 屏幕尺寸如此之多
- en: Back in the old days of the Internet, you only had to worry about a few monitor
    sizes. As long as you made a site that looked good on a 1024x768 monitor, you
    were okay. Some people had the money to afford larger monitors, while some others
    had smaller, but there wasn't a big difference.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网的旧日子里，你只需要担心几个显示器尺寸。只要你在1024x768的显示器上制作了一个看起来不错的网站，你就没问题了。有些人有钱买更大的显示器，而有些人有更小的显示器，但差别不大。
- en: Now, smartphones, tablets, and other devices have screens that range from four
    inches corner-to-corner to flat-screen television sizes and, because screen technology
    has improved so much, the smaller screens have a pixel density 1.5, 2, or even
    3 times that of a standard desktop monitor. Websites that were easy to read on
    a desktop become squished and smaller on a smartphone.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，智能手机、平板电脑和其他设备的屏幕尺寸从四英寸的角到角到平板电视大小不等，由于屏幕技术的巨大进步，较小的屏幕的像素密度是标准桌面显示器的1.5倍、2倍甚至3倍。在桌面电脑上容易阅读的网站在智能手机上变得拥挤且更小。
- en: As the number of screen resolutions increases, so does the number of tests you
    need to perform on your website. Does the site look as good on a three inch wide
    phone as on an HD television? Does it scale well?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 随着屏幕分辨率的增加，您需要在网站上进行的测试数量也在增加。网站在3英寸宽的手机上看起来和高清电视上一样好吗？它是否能够很好地缩放？
- en: Fingertip accuracy
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指尖精度
- en: Another feature lost when moving from desktop to mobile applications is the
    high accuracy input of a mouse. Whether you use a mouse, a laptop trackpad, or
    a stylus pen with your computer, you have a mouse pointer that provides fine manipulation
    of your content. On mobile devices, you have to account for rather large fingers
    that may click more than one of your cleverly sized buttons. Also, the little
    closeout buttons you created for your site may be too hard to close with some
    of the large fingerprints out there.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当从桌面应用程序迁移到移动应用程序时，丢失的另一个功能是鼠标的高精度输入。无论您使用鼠标、笔记本电脑触摸板还是电脑的触控笔，您都有一个鼠标指针，可以提供对您内容的精细操作。在移动设备上，您必须考虑到较大的手指可能会点击到您精心设计的多个按钮。此外，您为网站创建的小型关闭按钮可能对于一些大型指纹来说太难关闭。
- en: Along with losing the accuracy of a mouse pointer, you also lose mouse hover
    events. Everything from simple tooltips to CSS-powered collapsible menus no longer
    work as expected in a mobile browser, because there are no hover events to listen
    to and work with. Your old code from five to ten years ago won't work the same
    in the mobile web era.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了失去鼠标指针的精度外，您还会失去鼠标悬停事件。从简单的工具提示到由CSS驱动的可折叠菜单，在移动浏览器中都不会按预期工作，因为没有悬停事件可供监听和处理。您五到十年前的旧代码在移动网络时代将不会按相同的方式工作。
- en: Battery life
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电池寿命
- en: Dealing with battery life can be another hindrance to mobile development. Repeated
    access to location data and constantly monitoring advertising can drain the battery
    on mobile devices. While this information is handy to have, it comes at a price.
    Remember that not everybody has a full charge on their phone, and not every battery
    will run for hours.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 处理电池寿命可能又是移动开发的另一个障碍。重复访问位置数据和持续监控广告可能会耗尽移动设备的电量。虽然这些信息很有用，但它是有代价的。请记住，并不是每个人的手机都有满电，而且并不是每个电池都能持续数小时。
- en: More devices
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多设备
- en: We mentioned the multitude of screen sizes before, but that's just the beginning.
    There are a wide variety of devices out there, running Android, iOS, Windows Phone,
    and other operating systems. Each one has a choice of a number of web browsers,
    and even those web browsers may be at different version numbers. With all this,
    support for the latest and greatest web features can be spotty, depending on the
    feature. You'll have to decide what you're willing to support, and what devices
    you're willing to purchase for testing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到了屏幕尺寸的多样性，但这只是开始。市面上有各种各样的设备，运行着Android、iOS、Windows Phone和其他操作系统。每个设备都有多个网络浏览器的选择，甚至这些网络浏览器可能处于不同的版本号。因此，对于最新的和最好的网络功能的支持可能会有所不同，这取决于具体的功能。您将不得不决定您愿意支持什么，以及您愿意购买哪些设备进行测试。
- en: Now that we've looked at why we should be building mobile applications, let's
    look at the tools we have available through the ArcGIS JavaScript API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了为什么我们应该构建移动应用程序，让我们看看通过ArcGIS JavaScript API我们可以使用哪些工具。
- en: The ArcGIS compact build
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcGIS紧凑型构建
- en: The ArcGIS JavaScript API can be loaded as a more compact library for mobile
    browsers. The compact build, as it is called, packs the bare minimum of the libraries
    needed to view map applications in a mobile browser. Other modules can be downloaded
    through Dojo's `require()` statements, but many will not be preloaded with the
    initial library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript API可以作为更紧凑的库加载到移动浏览器中。所谓的紧凑型构建，包含了在移动浏览器中查看地图应用程序所需的最小库。其他模块可以通过Dojo的`require()`语句下载，但许多模块不会与初始库一起预加载。
- en: Modules included in the compact build
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 紧凑型构建中包含的模块
- en: The ArcGIS compact build contains all the modules necessary to build a web map
    application. It loads the same as the regular ArcGIS API for JavaScript, using
    `require()` and `define()` statements. It also comes with the most frequently
    used modules, such as `esri/Map` and `esri/layers/ArcGISDynamicMapServiceLayer`,
    to quickly load your maps while using the least bandwidth.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS紧凑型构建包含构建网络地图应用程序所需的所有模块。它加载的方式与常规的ArcGIS API for JavaScript相同，使用`require()`和`define()`语句。它还包含最常用的模块，如`esri/Map`和`esri/layers/ArcGISDynamicMapServiceLayer`，以便在尽可能少使用带宽的情况下快速加载您的地图。
- en: What's not included
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未包含的内容
- en: With all the functionality the ArcGIS JavaScript compact build offers, you'd
    think they must sacrifice something. The first thing that the compact build gives
    up is weight. At 179.54 KB in version 3.13, the library weighs in 107.26 KB under
    its bulkier cousin. The regular build comes with a number of libraries preloaded,
    while the compact build uses `require()` or `define()` statements to request those
    modules separately. With this, you have better control over what library parts
    you send to the user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ArcGIS JavaScript 紧凑版构建提供了所有这些功能，但您可能会认为它们必须牺牲一些东西。紧凑版构建首先放弃的是重量。在 3.13 版本中，该库的重量为
    179.54 KB，而其更庞大的同侪为 107.26 KB。常规构建附带了一些预加载的库，而紧凑版构建使用 `require()` 或 `define()`
    语句单独请求这些模块。这样，您可以更好地控制发送给用户的库部分。
- en: Another item sacrificed in the ArcGIS JavaScript API compact build is the reliance
    on the `dijit` namespace. The first thing you'll notice is that the popups are
    replaced with a more simplified versions. Also, if you like the graduated zoom
    slider to zoom your map in and out, you can forget it in the compact build. It
    only supports the **+** and **–** buttons to zoom the map in and out. If you have
    widgets that rely on the `dijit/_Widgetbase` library, those can be downloaded
    separately through `require()` and `define()` statements.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ArcGIS JavaScript API 紧凑版构建中牺牲的另一项是依赖于 `dijit` 命名空间。你首先会注意到弹出窗口被替换为更简化的版本。此外，如果你喜欢使用渐变缩放滑块来缩放地图，在紧凑版构建中你可能要放弃了。它只支持
    **+** 和 **–** 按钮来缩放地图。如果你有依赖于 `dijit/_Widgetbase` 库的小部件，可以通过 `require()` 和 `define()`
    语句单独下载。
- en: What does this mean to you?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这对你意味着什么？
- en: The ArcGIS JavaScript compact build provides much of the same functionality
    as the regular build does. There are a few differences in some of the controls,
    but they both present the same maps and information. The smaller library size
    is perfect for dropping a map into an existing application, or for using other
    libraries, such as Angular, Knockout, or jQuery, to handle other component interactions.
    If you don't have a dependence on the few features lost by using the compact build,
    it's worth trying.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript 紧凑版构建提供了与常规构建相同的大部分功能。在一些控件上存在一些差异，但它们都呈现相同的地图和信息。较小的库大小非常适合将地图嵌入现有应用程序中，或者使用其他库，如
    Angular、Knockout 或 jQuery，来处理其他组件交互。如果你不依赖于紧凑版构建中丢失的少数功能，尝试一下是值得的。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the ArcGIS JavaScript API compact build, look at the
    ArcGIS JavaScript API documentation at [https://developers.arcgis.com/javascript/jshelp/inside_compactbuild.html](https://developers.arcgis.com/javascript/jshelp/inside_compactbuild.html).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 ArcGIS JavaScript API 紧凑版构建的更多信息，请参阅 [https://developers.arcgis.com/javascript/jshelp/inside_compactbuild.html](https://developers.arcgis.com/javascript/jshelp/inside_compactbuild.html)。
- en: ESRI Leaflet
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ESRI Leaflet
- en: The `Leaflet.js` library provides another alternative to the ArcGIS JavaScript
    API. It's a lightweight library that can show maps on a large range of browsers.
    Leaflet works well with any tiled map services, and points, lines, and polygons
    can be added through **geojson**, a popular open-source JSON format for geographical
    data. The library can support different tools and data sources with plugins. There
    is a rich plugin ecosystem for the Leaflet library, with more tools and data source
    plugins developed daily.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`Leaflet.js` 库为 ArcGIS JavaScript API 提供了另一种选择。这是一个轻量级的库，可以在广泛的浏览器上显示地图。Leaflet
    与任何瓦片地图服务都兼容，可以通过 **geojson**（一种流行的开源地理数据 JSON 格式）添加点、线和多边形。该库可以通过插件支持不同的工具和数据源。Leaflet
    库拥有丰富的插件生态系统，每天都有更多工具和数据源插件被开发。'
- en: 'ESRI has released the ESRI Leaflet plugin so that Leaflet maps can use ArcGIS
    Server Map Services. According to the ESRI Leaflet GitHub page, it supports the
    following map service layers:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ESRI 发布了 ESRI Leaflet 插件，以便 Leaflet 地图可以使用 ArcGIS 服务器地图服务。根据 ESRI Leaflet GitHub
    页面，它支持以下地图服务层：
- en: ESRI basemap services
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESRI 底图服务
- en: Feature services
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征服务
- en: Tiled map services
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓦片地图服务
- en: Dynamic map services
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态地图服务
- en: ImageServer map services
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImageServer 地图服务
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the `Leaflet.js` library, you can visit [http://leafletjs.com/](http://leafletjs.com/).
    For books on the library, you can check out *Leaflet.js Essentials* by Paul Crickard
    III, or *Interactive Map Designs with Leaflet JavaScript Library How-to* by Jonathan
    Derrough.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `Leaflet.js` 库的更多信息，您可以访问 [http://leafletjs.com/](http://leafletjs.com/)。关于该库的书籍，您可以查阅
    Paul Crickard III 的 *Leaflet.js Essentials* 或 Jonathan Derrough 的 *Interactive
    Map Designs with Leaflet JavaScript Library How-to*。
- en: Dojox mobile
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dojox 移动
- en: Don't you wish you could create an application that mimics the style of a mobile
    device, while looking like a native app? That's what some of the contributors
    to the Dojo framework thought, and that led to the modules in `dojox/mobile`.
    The modules provide controls that match many of the UI elements in native mobile
    apps, mimicking them in form and function. With the widgets in this library, buttons
    and sliders look like iPhone buttons and sliders on Safari, while appearing as
    native Android buttons and sliders on Android-based browsers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你不希望创建一个模仿移动设备风格的应用程序，同时看起来像原生应用吗？这正是 Dojo 框架的一些贡献者所想的，这导致了 `dojox/mobile` 中的模块。这些模块提供了与原生移动应用中的许多
    UI 元素相匹配的控件，在形式和功能上模仿它们。在这个库的部件中，按钮和滑块看起来像 Safari 上的 iPhone 按钮和滑块，而在基于 Android
    的浏览器上则表现为原生 Android 按钮和滑块。
- en: The `dojox/mobile` modules provide a visual interactive framework that mimics
    native mobile apps. Unlike their `dijit` form counterparts, the `dojox/mobile`
    user controls do not use so many HTML elements, improving the download speed and
    memory usage. The UI elements work well with other `dojox/mobile` controls, from
    the `dojox/mobile/View` that takes up the whole screen, down to the last `dojox/mobile/Button`.
    Let's take a look at a few of them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox/mobile` 模块提供了一种模仿原生移动应用的视觉交互框架。与它们的 `dijit` 表单对应物不同，`dojox/mobile` 用户控件不使用那么多
    HTML 元素，从而提高了下载速度和内存使用。UI 元素与其他 `dojox/mobile` 控件配合良好，从占据整个屏幕的 `dojox/mobile/View`
    到最后的 `dojox/mobile/Button`。让我们看看其中的一些。'
- en: Dojox mobile views
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dojox 移动视图
- en: The `dojox/mobile/View` module provides a visual separation between parts of
    the application. Views are full page containers that can be navigated to and from
    by swipes or button presses. These are somewhat analogous to the `dijit/layout/ContentPane`
    in how they organize content.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox/mobile/View` 模块在应用程序的部分之间提供了视觉分隔。视图是完整的页面容器，可以通过滑动或按钮点击进行导航。这些在组织内容方面与
    `dijit/layout/ContentPane` 有一定的相似性。'
- en: Related to the `dojox/mobile/View`, the `dojox/mobile/ScrollableView` provides
    extra scrolling functionality in a way mobile users expect. In many mobile devices,
    when the user swipes the screen to scroll down the page, that user expects the
    page will continue to scroll until it slows to a stop. `ScrollableView` implements
    that inertial scrolling down the page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `dojox/mobile/View` 相关，`dojox/mobile/ScrollableView` 以移动用户期望的方式提供了额外的滚动功能。在许多移动设备上，当用户滑动屏幕向下滚动页面时，该用户期望页面将继续滚动，直到减速停止。"ScrollableView"
    实现了页面上的惯性滚动。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As `ScrollableView` scrolling events interfere with panning a map on a touchscreen
    interface, you should not add an interactive map to this view. `ScrollableView`
    is better suited for forms and content that may extend beyond the height of the
    screen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `ScrollableView` 滚动事件会干扰触摸屏界面上地图的平移，因此您不应将交互式地图添加到该视图中。"ScrollableView" 更适合于表单和可能超出屏幕高度的内容。
- en: Working with touch
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与触摸一起工作
- en: If you're used to working with mouse events in JavaScript, touch events can
    be a bit confusing. The `touchstart` and `touchend` events look equivalent to
    the `mousedown` and `mouseup` events.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您习惯于在 JavaScript 中使用鼠标事件，触摸事件可能会有些令人困惑。`touchstart` 和 `touchend` 事件看起来与 `mousedown`
    和 `mouseup` 事件相当。
- en: In current versions of the ArcGIS JavaScript API, many of the touch events are
    already handled by the API modules. When working with the map, you don't need
    to assign a `map.on("touchstart")` event listener on top of a `map.on("click")`
    event listener. The `map.on("click")` event listener handles it for you. The same
    goes for any Dojo widgets and controls. That's one less thing you have to do to
    make your application mobile-ready.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的 ArcGIS JavaScript API 中，许多触摸事件已经被 API 模块处理。当与地图一起工作时，您不需要在 `map.on("click")`
    事件监听器之上分配 `map.on("touchstart")` 事件监听器。`map.on("click")` 事件监听器为您处理它。对于任何 Dojo
    小部件和控制也是如此。这又少了一件您需要做的事情来使您的应用程序移动化。
- en: Speaking of the map, there are touch events available that make some navigation
    tools obsolete. You can pinch or spread your fingers on the screen to zoom in
    and out respectively. Panning can be controlled by dragging your finger across
    the map. These actions remove the need for zoom in, zoom out, and pan buttons,
    which can free up valuable screen real estate.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 说到地图，有一些触摸事件可用，使得一些导航工具变得过时。您可以在屏幕上捏合或展开手指来分别放大和缩小。通过在地图上拖动手指可以控制平移。这些操作消除了放大、缩小和平移按钮的需求，从而可以释放宝贵的屏幕空间。
- en: Gestures
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手势
- en: JavaScript handling of complicated mobile gestures hasn't been as smooth as
    it has been in native applications. Native applications are developed to distinguish
    between a tap and a tap-and-hold, for instance. By default, many JavaScript-based
    applications treat them both as a click.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 处理复杂的移动手势并没有像在原生应用程序中那样顺畅。例如，原生应用程序被开发出来以区分点击和长按点击。默认情况下，许多基于 JavaScript
    的应用程序将它们都视为点击。
- en: 'The Dojo framework that comes with the ArcGIS JavaScript API has some experimental
    libraries to handle gestures, with the `dojox/gesture` modules. These modules
    allow you to assign events using `dojo/on`, as in the following snippet:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript API 中的 Dojo 框架提供了一些用于处理手势的实验性库，即 `dojox/gesture` 模块。这些模块允许你使用
    `dojo/on` 来分配事件，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For simple gesture definition, `dojox/gesture` modules allow you to define
    tap and swipe events using `dojox/gesture/tap` and `dojox/gesture/swipe` respectively.
    With tap events, you can define single tap, double tap, and tap-and-hold events.
    For swipe events, you can define events at the beginning and end of the swipe
    event. In the following, you can see a code snippet implementing it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的手势定义，`dojox/gesture` 模块允许你使用 `dojox/gesture/tap` 和 `dojox/gesture/swipe`
    分别定义点击和滑动事件。对于点击事件，你可以定义单次点击、双击和长按点击事件。对于滑动事件，你可以定义滑动事件开始和结束的事件。在下面的代码片段中，你可以看到实现它的示例：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can't find a gesture that does what you want? With the `dojox/gesture/Base`
    module, you can define your own custom gestures. As of now, you have to define
    your own methods to handle gestures such as rotating, pinching, and spreading
    your fingers. At some point, there will be more general support for those gestures,
    but not as of the time of writing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你找不到你想要的操作手势吗？使用 `dojox/gesture/Base` 模块，你可以定义你自己的自定义手势。到目前为止，你必须定义自己的方法来处理旋转、捏合和手指展开等手势。在某个时候，将会有对这些手势的更通用支持，但不是在撰写本文时。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about handling touch and gestures in Dojo applications,
    you can visit [https://dojotoolkit.org/reference-guide/1.10/dojox/gesture.html](https://dojotoolkit.org/reference-guide/1.10/dojox/gesture.html).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于在 Dojo 应用程序中处理触摸和手势的信息，你可以访问 [https://dojotoolkit.org/reference-guide/1.10/dojox/gesture.html](https://dojotoolkit.org/reference-guide/1.10/dojox/gesture.html)。
- en: Our application
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的应用程序
- en: As our story continues, we receive a call from the city of Hollister, California,
    regarding their incident reporting app. They like the application, and it works
    great for the receptionist who takes phone calls about those issues. Now, they
    want a version that's more mobile-friendly, and they've come to us for help. It's
    time for us to take our knowledge of mobile apps and create a tool they can use
    from a smartphone in the field.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的故事继续，我们收到了来自加利福尼亚州霍利斯特市的电话，关于他们的事故报告应用程序。他们喜欢这个应用程序，并且它对处理这些问题的电话接待员来说效果很好。现在，他们想要一个更适合移动设备的版本，并且他们来找我们寻求帮助。是我们利用我们对移动应用程序的知识来创建一个他们可以在现场使用的智能手机工具的时候了。
- en: The original incident reporting app was built using typical `dijit/layout` elements,
    where every panel had a place on the screen. Now, we have to consider that there's
    not enough room on a smaller screen for everything. Instead, we need to organize
    each panel into its own separate view. We'll need to control how we navigate between
    these views, and use the appropriate controls that work well with a mobile device.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的事故报告应用程序是使用典型的 `dijit/layout` 元素构建的，其中每个面板都在屏幕上有一个位置。现在，我们必须考虑在较小的屏幕上可能没有足够的空间来容纳所有内容。相反，我们需要将每个面板组织成它自己的独立视图。我们需要控制如何在这些视图之间导航，并使用适合移动设备的适当控件。
- en: We'll use the ArcGIS JavaScript API compact build, along with the `dojox/mobile`
    modules, to create a mobile-friendly web application. We'll put the map in one
    view, the incident picker in a second view, and a more detailed reporting form
    in the third view. For all of these, we'll use `dojox/mobile` user interface components,
    along with the ArcGIS JavaScript API editing widgets, to create not just a mobile-friendly,
    but a user-friendly reporting experience as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 ArcGIS JavaScript API 紧凑构建，以及 `dojox/mobile` 模块，来创建一个适合移动设备的网络应用程序。我们将地图放在一个视图中，事故选择器放在第二个视图中，更详细的报告表单放在第三个视图中。对于所有这些，我们将使用
    `dojox/mobile` 用户界面组件，以及 ArcGIS JavaScript API 编辑小部件，不仅创建一个适合移动设备的，而且创建一个用户友好的报告体验。
- en: Changing the layout
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改布局
- en: 'We will begin creating the mobile application by loading the ArcGIS compact
    build into the `index.html` file. In the head of the HTML document, we''ll change
    the link to the ArcGIS JavaScript API to load the compact build. We''ll keep the
    `esri.css` file and our own style sheet reference, but we can remove the `claro.css`
    style sheet reference, since our application won''t need it. Our `index.html`
    file should look like the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将 ArcGIS 紧凑构建加载到 `index.html` 文件中来开始创建移动应用程序。在 HTML 文档的头部，我们将更改指向 ArcGIS
    JavaScript API 的链接以加载紧凑构建。我们将保留 `esri.css` 文件和我们的样式表引用，但我们可以移除 `claro.css` 样式表引用，因为我们的应用程序不需要它。我们的
    `index.html` 文件应该看起来像以下这样：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The body of our application has three actionable parts. There''s a map where
    we place our incidences. There''s also a panel where we select what incident is
    on the map. Finally, there is a form where we fill out more information about
    the incident. We''ll lay those out into different views: `mapview`, `incidentview`,
    and `attributeview`. Inside each view, we''ll add the headings and controls we
    need for our application. It should look like the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序主体有三个可操作的部分。有一个地图，我们在其中放置事件。还有一个面板，我们可以从中选择地图上的事件。最后，还有一个表单，我们可以填写有关事件的更多信息。我们将这些内容布局到不同的视图中：`mapview`、`incidentview`
    和 `attributeview`。在每个视图中，我们将添加我们应用程序所需的标题和控制项。它应该看起来像以下这样：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, we've added the familiar `data-dojo-type` attributes
    to create the `dojox/mobile/View` modules on the page. Inside each view, we have
    a `dojox/mobile/Heading` module element, to show a heading at the top of the page.
    The heading also doubles up as a sort of a button bar, into which we can put back
    buttons inside. In the `data-dojo-props` attribute of the headings, we define
    a back button with the `back` attribute defining the button text, and the `moveTo`
    attribute defining the view it switches to.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了熟悉的 `data-dojo-type` 属性来在页面上创建 `dojox/mobile/View` 模块。在每个视图中，我们都有一个
    `dojox/mobile/Heading` 模块元素，用于在页面顶部显示标题。标题还充当一种按钮栏，我们可以将其中的返回按钮放入其中。在标题的 `data-dojo-props`
    属性中，我们定义了一个带有 `back` 属性（定义按钮文本）和 `moveTo` 属性（定义它切换到的视图）的返回按钮。
- en: Modifying the JavaScript
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 JavaScript
- en: 'In our `app.js` file, we''ll need to modify the `require` statement in order
    to load the appropriate modules for the mobile library. Instead of loading the
    `dijit/layout` modules for setting up the layout, we''ll need to add the `dojox/mobile`
    equivalent. In the `require()` statement in the `app.js` file, modify the code
    to add the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `app.js` 文件中，我们需要修改 `require` 语句以加载移动库的适当模块。而不是加载用于设置布局的 `dijit/layout`
    模块，我们需要添加 `dojox/mobile` 的等效模块。在 `app.js` 文件的 `require()` 语句中，修改代码以添加以下内容：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we replaced the normal `dojo/parser` with a `dojox/mobile/parser`
    equivalent. We've added the `dojox/mobile` base class, the `dojox/mobile/deviceTheme`
    that loads the appropriate theme based on your browser, and `dojox/mobile/compat`
    so that the site can also be seen on older desktop browsers such as Internet Explorer.
    For the elements we want to see out of the `dojox/mobile` library, we've loaded
    the `View`, the `Heading` to view title data, and the `ToolBarButton` to add buttons
    to the heading.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们用 `dojox/mobile/parser` 的等效项替换了正常的 `dojo/parser`。我们添加了 `dojox/mobile`
    基础类，`dojox/mobile/deviceTheme` 根据您的浏览器加载适当的主题，以及 `dojox/mobile/compat` 以确保网站也可以在较旧的桌面浏览器（如
    Internet Explorer）上查看。对于我们想要从 `dojox/mobile` 库中看到的元素，我们加载了 `View`、用于查看标题数据的 `Heading`
    和用于向标题添加按钮的 `ToolBarButton`。
- en: Working with the map on mobile
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在移动设备上处理地图
- en: Let's focus on making the map work. In our mobile application, we've added the
    map within the `mapview` div. We've set the width and height of the map to `100%`
    in our `style.css` file. The map should load as normal, right?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于使地图正常工作。在我们的移动应用程序中，我们在 `mapview` div 中添加了地图。我们在 `style.css` 文件中将地图的宽度和高度设置为
    `100%`。地图应该正常加载，对吧？
- en: When we load the map as it is, especially from a larger browser, we find that
    the map doesn't stretch all the way to the bottom. Using our favorite tools for
    examining DOM elements, we find that height of the map div has been set inline
    to `400px`. Where have we seen this before?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以这种方式加载地图时，尤其是从较大的浏览器中加载，我们发现地图并没有延伸到最底部。使用我们最喜欢的检查 DOM 元素的工具，我们发现地图 div
    的高度已被设置为内联的 `400px`。我们以前在哪里见过这种情况？
- en: 'After examining the DOM elements of features around the map, we see that the
    view''s height hasn''t been set. By default, the `mapview` div''s height depends
    on the height of its content. As its height has not been defined, the map sets
    its height to `400px`. To fix this, we need to manually define the `mapview` div''s
    height in our `style.css` file. We''ll also stop the `mapview` div from scrolling
    by setting its `overflow-y` to `hidden`. This will remove any unsightly scrollbars
    on our map, which may interfere with map navigation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查地图周围特征DOM元素后，我们发现视图的高度尚未设置。默认情况下，`mapview` div的高度取决于其内容的高度。由于其高度未定义，地图将其高度设置为`400px`。为了修复这个问题，我们需要在`style.css`文件中手动定义`mapview`
    div的高度。我们还将通过将`overflow-y`设置为`hidden`来停止`mapview` div的滚动。这将移除我们地图上的任何不美观的滚动条，这可能会干扰地图导航：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Fixing the LocateButton
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复LocateButton
- en: 'The `LocateButton`, which uses the browser''s GPS functionality to center the
    map on our location, has moved around. It appears that addition of the `dojox/mobile/Heading`
    and the mobile buttons to zoom in and out have caused our `LocateButton` to be
    displaced. We can use our favorite browser DOM explorer to reposition the Locate
    button to a good spot, and then include it in the `style.css` file to make it
    more permanent. The style for the `LocateButton` should look something like the
    following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器的GPS功能将地图中心定位到我们位置的`LocateButton`已经移动了位置。看起来是添加了`dojox/mobile/Heading`和用于缩放和平移的移动按钮，导致我们的`LocateButton`偏移。我们可以使用我们喜欢的浏览器DOM浏览器来重新定位Locate按钮到合适的位置，然后将其包含在`style.css`文件中以使其更加持久。`LocateButton`的样式应该看起来像以下这样：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you''re done, you should have a map that looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你应该有一个看起来像以下的地图：
- en: '![Fixing the LocateButton](img/6459OT_09_01.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![修复LocateButton](img/6459OT_09_01.jpg)'
- en: Working with the editor widgets
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用编辑小部件
- en: Now that we're using the ArcGIS compact build, we don't have access to the popup
    dijit that we used with the attachment editor. We don't have many of the other
    dijit-based modules either. This application may require a bit more work to make
    it mobile-ready.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用ArcGIS紧凑型构建，我们无法访问与附件编辑器一起使用的弹出dijit。我们也没有许多其他基于dijit的模块。这个应用程序可能需要更多的工作才能使其适合移动设备。
- en: Template picker
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板选择器
- en: 'To select from the list of incidents, we chose the `esri/dijit/editing/TemplatePicker`
    module to create buttons to select an incident. Now, we''ll keep using it, but
    we''re looking at it in a different view. The original one presented a vertical
    list of buttons down the side of the page for presenting incidents. Now, we''re
    going to remove those settings and define the template picker more normally. The
    code for initializing the template picker should look like the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从事件列表中选择，我们选择了`esri/dijit/editing/TemplatePicker`模块来创建选择事件的按钮。现在，我们将继续使用它，但我们将以不同的视角来看待它。原始的一个在页面的一侧呈现了垂直的按钮列表来展示事件。现在，我们将移除这些设置，并正常定义模板选择器。初始化模板选择器的代码应该看起来像以下这样：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To access the picker for our incidents, or to edit a currently selected feature,
    we need to call the `showInspector()` function. If we look over the existing function,
    it attempts to select features in a feature service based on a point around where
    we click. It uses the map's `infoWindow` to show the attribute editor. Now that
    we're using another location to edit the feature attributes, we need to modify
    the `showInspector()` code to handle our new functionality.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问事件选择器或编辑当前选定的特征，我们需要调用`showInspector()`函数。如果我们查看现有的函数，它尝试根据我们点击的点周围的位置在特征服务中选择特征。它使用地图的`infoWindow`来显示属性编辑器。现在，由于我们使用另一个位置来编辑特征属性，我们需要修改`showInspector()`代码以处理我们的新功能。
- en: 'Our first step in making our `showInspector()` function work on a mobile is
    to tweak the surface area that is selected compared to that if we click on the
    map. Currently, it creates a two pixel wide extent around our click point. We
    can expand it to 10 pixels, because our fingers are wider than a mouse pointer.
    Also, we need to modify the `callback` function after the query succeeds. If there
    are no features in the location clicked on the map, we''ll show the template picker.
    If none is selected, we''ll tell it to go to the attribute inspector instead:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使`showInspector()`函数在移动设备上工作的第一步是调整与在地图上点击相比所选的表面积。目前，它在我们点击点周围创建了一个两像素宽的范围。我们可以将其扩展到10像素，因为我们的手指比鼠标指针宽。此外，我们还需要在查询成功后修改`callback`函数。如果在地图上点击的位置没有特征，我们将显示模板选择器。如果没有选择，我们将告诉它转到属性检查器：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In our `goToPicker()` function, we''ll switch from `mapview` to `incidentview`.
    We''ll do this by using the `performTransition()` method provided by `dojox/mobile/View.`
    It accepts up to five arguments: an `id` for another view to see, a number-based
    direction (either `1` or `-1`), a transition style, and an object that defines
    `this` for the `callback` function that rounds out the fifth argument. We''ll
    tell `mapview` to make the transition to `incidentview`, moving from the right
    with a `slide` animation, and we''ll add a `callback` function once the process
    finishes:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`goToPicker()`函数中，我们将从`mapview`切换到`incidentview`。我们将通过使用`dojox/mobile/View`提供的`performTransition()`方法来实现这一点。它接受最多五个参数：一个用于查看另一个视图的`id`、基于数字的方向（`1`或`-1`）、过渡样式以及定义`this`的用于完成第五个参数的`callback`函数的对象。我们将告诉`mapview`过渡到`incidentview`，从右侧使用`slide`动画，并在过程完成后添加一个`callback`函数：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When we try to run the `goToPicker` function as it is, it goes to `incidentview`,
    but we don't see any incidents. This is due to an interesting feature of some
    dojo widgets. When not visible, the widgets set their widths and heights to `0`,
    effectively becoming invisible. We need to refresh the `TemplatePicker` internal
    grid and clear the template selection.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试以当前形式运行`goToPicker`函数时，它会跳转到`incidentview`，但我们看不到任何事件。这是由于一些dojo小部件的一个有趣特性。当不可见时，小部件将它们的宽度和高度设置为`0`，从而变得不可见。我们需要刷新`TemplatePicker`内部网格并清除模板选择。
- en: 'When the user selects a feature from the list, we need something to convey
    our selection to the attribute inspector. We''ll also add a single fire event
    using the `once()` method in the `dojo/on` module, and attach it to the `selection-change`
    event of the `TemplatePicker` widget. From there, we''ll collect the selected
    attributes, the current date, and a few other attributes, and pass them to a function
    that adds the incident to the map. The function should look like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从列表中选择一个特征时，我们需要某种方式将我们的选择传达给属性检查器。我们还将使用`dojo/on`模块中的`once()`方法添加一个单一的事件，并将其附加到`TemplatePicker`小部件的`selection-change`事件。从那里，我们将收集所选属性、当前日期以及一些其他属性，并将它们传递给一个将事件添加到地图的函数。该函数应如下所示：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For the `addIncident()` function, we''ll add our point location, symbol, and
    attributes into a graphic. From there, we''ll add the graphic feature to the editable
    `incidentLayer`. Once we have completed that, we''ll attempt to select it again
    using the `incidentLayer` layer''s `selectFeatures()` method, then send the result
    to the `goToAttributeInspector()` function. We''ll pass along the name of the
    current view (`incidentview`), as well as the first feature that''s selected.
    It should look like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`addIncident()`函数，我们将我们的点位置、符号和属性添加到一个图形中。然后，我们将图形特征添加到可编辑的`incidentLayer`。一旦完成，我们将尝试使用`incidentLayer`层的`selectFeatures()`方法再次选择它，然后将结果发送到`goToAttributeInspector()`函数。我们将传递当前视图的名称（`incidentview`），以及所选的第一个特征。它应如下所示：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If all works correctly, you should be able to access your incident picker with
    `incidentview`, and it should look like the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该能够使用`incidentview`访问你的事件选择器，并且它应该如下所示：
- en: '![Template picker](img/6459OT_09_02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![模板选择器](img/6459OT_09_02.jpg)'
- en: Attribute inspector
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性检查器
- en: Now that the map and the template picker have been properly updated for the
    mobile application, it's time to look at the third stage of our incident reporting
    application. Using our previous code, we'll select the incident through the `FeatureLayer`
    selection. We'll then load the attribute inspector and edit the data. Finally,
    we'll save the feature data, including any images, to the feature service.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在地图和模板选择器已经为移动应用程序正确更新，是时候查看我们事件报告应用程序的第三阶段了。使用我们之前的代码，我们将通过`FeatureLayer`选择来选择事件。然后我们将加载属性检查器并编辑数据。最后，我们将特征数据（包括任何图像）保存到特征服务中。
- en: In the previous desktop application, we loaded the attribute inspector in the
    map popup. However, we don't have the same popup widget we had before in the ArcGIS
    compact build. This one won't be so editable on the map screen. However, we have
    plenty of screen real estate on the attribute view, so we'll load the inspector
    there. Also, note that we'll remove any of the events where the map popup loads
    or changes the attribute inspector.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的桌面应用程序中，我们在地图弹出窗口中加载了属性检查器。然而，在ArcGIS紧凑型构建中，我们没有之前拥有的相同的弹出窗口小部件。在地图屏幕上，它将不会那么可编辑。然而，在属性视图中，我们有大量的屏幕空间，所以我们将在这里加载检查器。此外，请注意，我们将删除任何地图弹出窗口加载或更改属性检查器的相关事件。
- en: 'First, we need to create a location on the page for the attribute inspector
    within the attribute view. In the `index.html` page, within the `attributeview`
    div element, we''ll add a div element with an `id` of `attinspector`. When our
    application loads, it will create an attribute inspector in this location. It
    should look like the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在属性视图中为属性检查器在页面上创建一个位置。在`index.html`页面中，在`attributeview` div元素内，我们将添加一个具有`id`为`attinspector`的div元素。当我们的应用程序加载时，它将在该位置创建一个属性检查器。它应该看起来像以下这样：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In our `app.js` file, we will still use the `generateAttributeInspector()`
    function that is called by the `startEditing()` function when the map is loaded.
    However, the `generateAttributeInspector()` function will need a few changes to
    work with its more permanent surroundings. We will need to do the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`app.js`文件中，我们仍然会使用当地图加载时由`startEditing()`函数调用的`generateAttributeInspector()`函数。然而，`generateAttributeInspector()`函数需要一些更改才能与它的更永久的环境一起工作。我们需要做以下几件事：
- en: Initialize and start up the attribute inspector where the `attinspector` div
    element is located
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`attinspector` div元素所在的位置初始化和启动属性检查器
- en: Remove any references to the `infoWindow` property of the map
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除对地图的`infoWindow`属性的任何引用
- en: 'When the changes are applied to the `generateAttributeInspector()` function,
    it should look something like the following:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当更改应用到`generateAttributeInspector()`函数时，它应该看起来像以下这样：
- en: '[PRE13]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once we have made the changes, we can run the application in a browser and check
    out the attribute inspector. After clicking on a troublesome location on our map,
    and identifying the incident with `TemplatePicker`, we should be able to view
    and edit the incident attributes with the attribute inspector.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们做出了更改，我们就可以在浏览器中运行应用程序并检查属性检查器。在点击我们地图上的一个麻烦位置，并使用`TemplatePicker`识别事件后，我们应该能够使用属性检查器查看和编辑事件属性。
- en: Trouble in the app
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序中的问题
- en: 'Oops, we''ve run into a bit of a problem with the application. We tested the
    app by tapping on a spot on the map to report an incident. We selected the incident
    type from the template picker, and it made the selection. After a couple of seconds,
    it switched over to the attribute inspector, and we got the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，我们在应用程序中遇到了一点问题。我们通过在地图上轻触一个位置来测试应用程序，以报告一个事件。我们从模板选择器中选择了事件类型，并进行了选择。几秒钟后，它切换到了属性检查器，我们得到了以下内容：
- en: '![Trouble in the app](img/6459OT_09_03.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序中的问题](img/6459OT_09_03.jpg)'
- en: The attribute inspector form is very unsightly, and doesn't behave in the way
    it did as a desktop web application. The user controls to edit the feature attributes
    don't work very well. How could this happen?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 属性检查器表单非常难看，并且不像桌面网页应用程序那样表现。用于编辑特征属性的控件工作得不是很好。这怎么可能发生呢？
- en: The issues with the attribute inspector actually lead back to something we did
    at the beginning of this application. We removed the `claro.css` file at the head
    of the web page and, along with it, removed any other `dijit` references. This
    act saved significant bandwidth on our application, but we lost the styling and
    functionality of the user controls in the attribute inspector. Now, it's not going
    to do what we want it to.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 属性检查器的问题实际上回到了我们在应用程序开始时所做的某件事。我们在网页头部移除了`claro.css`文件，以及与之相关的任何其他`dijit`引用。这个行为为我们应用程序节省了大量的带宽，但我们也失去了属性检查器中用户控件的风格和功能。现在，它将无法按照我们的预期工作。
- en: Rebuilding the attribute inspector
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重建属性检查器
- en: There is another way, however. We can create our own form for updating the feature
    attributes. We can use form elements from the `dojox/mobile` modules to make our
    own form, instead of using the attribute inspector. Also, on closer inspection,
    the attachment editor portion of the attribute inspector worked well. We can load
    the attachment editor after our custom form, and use it to save images to the
    features.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有另一种方法。我们可以创建自己的表单来更新特征属性。我们可以使用`dojox/mobile`模块中的表单元素来创建自己的表单，而不是使用属性检查器。此外，经过仔细检查，属性检查器的附件编辑部分工作得很好。我们可以在自定义表单之后加载附件编辑器，并使用它来保存图像到特征中。
- en: Creating the form
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建表单
- en: 'To make the custom form, we''re going to need to load a few `dojox/mobile`
    modules to parse. In the `require()` list in our `app.js` file, we''ll add the
    `dojox/mobile/RoundRect` module to create a rounded body for the form. We''ll
    also use `dojox/mobile/TextBox` for text entry, as well as the combination of
    `dijit/form/DataList` and `dojox/mobile/ComboBox` to create a mobile drop-down
    menu. We''re also going to use `dojox/mobile/Button` to save our changes. Our
    `require` statement should look like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建自定义表单，我们需要加载几个`dojox/mobile`模块进行解析。在我们的`app.js`文件的`require()`列表中，我们将添加`dojox/mobile/RoundRect`模块以创建表单的圆角主体。我们还将使用`dojox/mobile/TextBox`进行文本输入，以及`dijit/form/DataList`和`dojox/mobile/ComboBox`的组合来创建移动下拉菜单。我们还将使用`dojox/mobile/Button`来保存我们的更改。我们的`require`语句应如下所示：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we''ll modify the attribute view to make the form for editing the incident
    attributes. We''ll use `DataList` and `ComboBox` in `index.html` as a selection
    tool for the incident type. In this way, if the wrong type is selected, the user
    will be able to correct it. Next, we''ll use `Textbox` to record the `Address`
    and `District` attributes. The date, time, and status are read-only at this point,
    since we don''t want the reporter to change the date and time of the incident
    and whether the incident has been opened or closed. Finally, we''ll add a `Save`
    button to the form to save the results. Once we add these to `index.html`, the
    file should look like the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将修改属性视图以制作编辑事件属性的表单。我们将在`index.html`中使用`DataList`和`ComboBox`作为事件类型的选取工具。这样，如果选择了错误类型，用户将能够进行更正。接下来，我们将使用`Textbox`记录`Address`和`District`属性。此时日期、时间和状态是只读的，因为我们不希望报告者更改事件日期和时间以及事件是否已打开或关闭。最后，我们将在表单中添加一个`Save`按钮以保存结果。一旦我们将这些添加到`index.html`中，文件应如下所示：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we need to modify our JavaScript to handle the form input and output.
    We''ll create two functions, `setupIncident()` and `saveEdits()`, to load and
    save the data from the incident details form. The `setupIncident()` function will
    accept the feature to be modified as an argument. Also, since `setupIncident()`
    can be called when tapping on an existing incident on the map, or after selecting
    an incident type in `TemplatePicker`, we''ll pass the view name along with the
    feature data so it can move to the incident details view:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要修改我们的JavaScript以处理表单的输入和输出。我们将创建两个函数，`setupIncident()`和`saveEdits()`，以从事件详情表单中加载数据和保存数据。`setupIncident()`函数将接受要修改的要素作为参数。由于`setupIncident()`可以在地图上点击现有事件时调用，或者在`TemplatePicker`中选择事件类型后调用，我们将传递视图名称以及要素数据，以便它可以移动到事件详情视图：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `saveEdits()` function will collect the values from the form, add those
    values as feature attributes, and save the feature back to the geodatabase:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`saveEdits()`函数将收集表单中的值，将这些值作为要素属性添加，并将要素保存回地理数据库：'
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The attachment editor
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附件编辑器
- en: The last feature we will be implementing is the addition of photos to the incident
    reports. The previous version used the attachment editor that was part of the
    attribute inspector. Now that we're implementing our own entry form, we need to
    include the attachment editor separately.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要实现的功能是向事件报告中添加照片。之前的版本使用了属性检查器中的附件编辑器。现在，随着我们实现自己的输入表单，我们需要单独包含附件编辑器。
- en: 'The first step in adding the attachment editor in our application is to add
    the module reference in the `app.js` file `require` statement. According to the
    API documentation, the module to use is in `esri/dijit/editing/AttachmentEditor`.
    We''ll add the reference in the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中添加附件编辑器的第一步是在`app.js`文件的`require`语句中添加模块引用。根据API文档，要使用的模块位于`esri/dijit/editing/AttachmentEditor`。我们将在以下代码中添加引用：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll initialize the attachment editor after the `TemplatePicker` in our `startEditing()`
    function and assign it to the variable `attachmentEditor`. We need the scope of
    the `attachmentEditor` to fit within the whole application since we''ll be connecting
    it with feature data in other functions. You can see the additions highlighted
    in the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`startEditing()`函数中的`TemplatePicker`之后初始化附件编辑器，并将其分配给变量`attachmentEditor`。我们需要`attachmentEditor`的作用域适用于整个应用程序，因为我们将在其他函数中将它与要素数据连接。您可以在以下代码中看到突出显示的添加内容：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When we connect our editing form with our data in the `setupIncident()` function,
    we also need to connect the `attachmentEditor` to its data. After we''ve updated
    the editing form with the feature values, we''ll call the `showAttachments()`
    method of the `attachmentEditor`. This method accepts the feature, as well as
    the layer to be edited. The attachment editor will handle how to display existing
    attachments, and how to add new ones. The code changes should look like the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将我们的编辑表单与`setupIncident()`函数中的数据连接时，我们还需要将`attachmentEditor`与其数据连接。在用功能值更新编辑表单后，我们将调用`attachmentEditor`的`showAttachments()`方法。此方法接受功能以及要编辑的图层。附件编辑器将处理如何显示现有附件以及如何添加新附件。代码更改应如下所示：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we need to supply an element to `index.html`, in which we will attach
    the attachment editor widget. At the bottom of the `attributeview` element, underneath
    the editing form, we''ll add a `div` element with the `id` of `attributediv`.
    That portion of our `index.html` page should look like the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要向`index.html`提供一个元素，我们将在此处附加附件编辑器小部件。在`attributeview`元素的底部，在编辑表单下方，我们将添加一个具有`id`为`attributediv`的`div`元素。我们的`index.html`页面的一部分应如下所示：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When you run the application and begin reporting an incident, you should eventually
    see a form that looks like the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序并开始报告事件时，你应该最终看到一个如下所示的形式：
- en: '![The attachment editor](img/6459OT_09_04.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![附件编辑器](img/6459OT_09_04.jpg)'
- en: The end result
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终结果
- en: 'After modifying our application layout and behavior, we now have a useful mobile
    reporting tool. A citizen could load this page in their browser and report any
    problems they find. City workers could also use this to report incidents. Your
    application should look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改我们的应用程序布局和行为后，我们现在有一个有用的移动报告工具。市民可以在他们的浏览器中加载此页面并报告他们发现的问题。城市工作人员也可以使用此工具报告事件。你的应用程序应该看起来像这样：
- en: '![The end result](img/6459OT_09_05.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![最终结果](img/6459OT_09_05.jpg)'
- en: More work could be done to improve the application. Currently, it requires a
    constant Internet connection to make edits. If your mobile device is in an area
    with bad network coverage, any edits will be lost.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可以做更多的工作来改进应用。目前，它需要持续的网络连接来编辑。如果你的移动设备处于网络覆盖较差的区域，任何编辑都将丢失。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have examined what makes a website mobile. We looked at
    the requirements for a mobile application, in screen real estate, functionality,
    and bandwidth. We looked at the ArcGIS compact build to use on mobile applications.
    We also modified an existing application previously formatted for desktop use,
    and made it mobile-ready.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使网站移动化的因素。我们研究了移动应用程序的需求，包括屏幕空间、功能带宽。我们研究了用于移动应用程序的ArcGIS紧凑型构建。我们还修改了一个以前为桌面使用格式化的现有应用程序，并使其适用于移动设备。
- en: In the next chapter, we'll investigate how to write testable code using test-driven
    development.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用测试驱动开发编写可测试的代码。
