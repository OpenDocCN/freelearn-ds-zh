["```py\n(defproject tm-sotu \"0.1.0-SNAPSHOT\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :plugins [[lein-cljsbuild \"0.3.2\"]]\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [enlive \"1.1.1\"]\n                 [org.clojure/data.csv \"0.1.2\"]\n                 [cc.mallet/mallet \"2.0.7\"]]\n  :cljsbuild {:builds [{:source-paths [\"src-cljs\"],\n                        :compiler {:pretty-printer true,\n                                   :output-to \"www/js/main.js\",\n                                   :optimizations :whitespace}}]})\n```", "```py\n(ns tm-sotu.download\n  (:require [net.cgrand.enlive-html :as enlive]\n            [clojure.java.io :as io])\n  (:import [java.net URL]\n           [java.io File]))\n```", "```py\n(defn get-index-links [index-url]\n  (->\n    index-url\t\n    enlive/html-resource\n    (enlive/select [:.doclist :a])\n    filter-year-content?))\n```", "```py\n(defn process-speech-page [outputdir a-tag]\n  (->> a-tag\n    :attrs\n    :href\n    URL.\n    enlive/html-resource\n    get-text-tags\n    extract-text\n    (save-text-seq\n      (unique-filename\n        (str outputdir \\/ (first (:content a-tag)))))))\n```", "```py\n(defprotocol Textful\n  (extract-text [x]\n    \"This pulls the text from an element.\n    Returns a seq of String.\"))\n\n(extend-protocol Textful\n  java.lang.String\n  (extract-text [x] (list x))\n\n clojure.lang.PersistentStructMap\n (extract-text [x]\n (concat\n (extract-text (:content x))\n (when (contains? #{:span :p} (:tag x))\n [\"\\n\\n\"])))\n\n  clojure.lang.LazySeq\n  (extract-text [x] (mapcat extract-text x))\n\n  nil\n  (extract-text [x] nil))\n```", "```py\n(defn download-corpus [datadir index-url]\n  (doseq [link (get-index-links (URL. index-url))]\n    (println (first (:content link)))\n    (process-speech-page datadir link)))\n```", "```py\n(ns tm-sotu.topic-model\n  (:require [clojure.java.io :as io]\n            [clojure.data.csv :as csv]\n            [clojure.string :as str])\n  (:import [cc.mallet.util.*]\n           [cc.mallet.types InstanceList]\n           [cc.mallet.pipe\n            Input2CharSequence TokenSequenceLowercase\n            CharSequence2TokenSequence SerialPipes\n            TokenSequenceRemoveStopwords\n            TokenSequence2FeatureSequence]\n           [cc.mallet.pipe.iterator FileListIterator]\n           [cc.mallet.topics ParallelTopicModel]\n           [java.io FileFilter]\n           [java.util Formatter Locale]))\n```", "```py\n(defn make-pipe-list []\n  (InstanceList.\n    (SerialPipes.\n      [(Input2CharSequence. \"UTF-8\")\n       (CharSequence2TokenSequence.\n         #\"\\p{L}[\\p{L}\\p{P}]+\\p{L}\")\n       (TokenSequenceLowercase.)\n       (TokenSequenceRemoveStopwords. false false)\n       (TokenSequence2FeatureSequence.)])))\n```", "```py\n(defn add-directory-files\n  \"Adds the files from a directory to the instance list.\"\n  [instance-list data-dir]\n  (.addThruPipe\n    instance-list\n    (FileListIterator.\n      (.listFiles (io/file data-dir))\n      (reify FileFilter\n        (accept [this pathname] true))\n      #\"/([^/]*).txt$\"\n      true)))\n```", "```py\n(defn train-model\n  ([instances] (train-model 100 4 50 instances))\n  ([num-topics num-threads num-iterations instances]\n   (doto (ParallelTopicModel. num-topics 1.0 0.01)\n     (.addInstances instances)\n     (.setNumThreads num-threads)\n     (.setNumIterations num-iterations)\n     (.estimate))))\n```", "```py\n<div class=\"container\"></div>\n```", "```py\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/d3.v3.min.js\"\n        charset=\"utf-8\"></script>\n<script src=\"img/main.js\"></script>\n<script type=\"application/javascript\">\n    tm_sotu.topic_plot.plot_topics();\n</script>\n```", "```py\n  :cljsbuild {:builds [{:source-paths [\"src-cljs\"],\n                        :compiler {:pretty-printer true,\n                                   :output-to \"www/js/main.js\",\n                                   :optimizations :whitespace}}]})\n```", "```py\n(ns tm-sotu.topic-plot\n  (:require [tm-sotu.utils :as utils]\n            [clojure.browser.dom :as dom]\n            [clojure.string :as str]))\n```", "```py\n(defn ^:export plot-topics []\n  (let [{:keys [x y]} (utils/get-scales)\n        {:keys [x-axis y-axis]} (utils/axes x y)\n        color (.. js/d3 -scale category20)\n        line (utils/get-line #(x (get-year %))\n                             #(y (get-distribution %)))\n        svg (utils/get-svg)]\n    (.csv js/d3 \"topic-dists.csv\"\n          (partial load-topic-weights\n                   svg line color x x-axis y y-axis))))\n```", "```py\n$ cd www\n$ python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 â€¦\n\n```", "```py\n(defn load-topic-weights [svg line color x x-axis y y-axis data]\n  (let [data (into-array (map parse-datum data))]\n    (.domain color (into-array (set (map get-topic data))))\n    (let [topics (into-array\n                   (map #(make-topic data %) (.domain color)))\n          wghts (map get-weighting data)]\n      (.domain x (.extent js/d3 data get-instance))\n      (.domain y (array (apply min wghts) (apply max wghts)))\n      (utils/setup-x-axis svg x-axis)\n      (utils/setup-y-axis svg y-axis \"Weightings\")\n      (let [topic-svg (make-topic-svg svg topics)]\n        (add-topic-lines line color topic-svg)\n        (add-topic-labels topic-svg x y)\n        (utils/caption\n          (str \"Topic Weightings over Time (topic count = \"\n               (count topics) \\))\n          650)))))\n```", "```py\n(defn make-topic-svg [svg topics]\n  (.. svg\n    (selectAll \".topic\")\n    (data topics)\n    (enter)\n    (append \"g\")\n    (attr \"class\" \"topic\")))\n```", "```py\n(defn add-topic-lines [line color topic-svg]\n  (.. topic-svg\n    (append \"path\")\n    (attr \"class\" \"line\")\n    (attr \"id\" #(str \"line\" (.-topic %)))\n    (attr \"d\" #(line (.-values %)))\n    (style \"stroke\" #(color (.-topic %)))))\n```", "```py\n(defn add-topic-labels [topic-svg x y]\n  (.. topic-svg\n    (append \"text\")\n    (datum make-text)\n    (attr \"transform\" #(str \"translate(\" (x (.-year (.-value %)))\n                            \\, (y (.-weighting (.-value %))) \\)))\n    (attr \"x\" 3)\n    (attr \"dy\" \".35em\")\n    (text get-name)))\n```"]