- en: Chapter 2. Visualizing and Styling the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collecting and organizing data from different sources is only half of the story.
    The next step is to present it on a map, accurately disclosing thematic content
    and features. For this purpose, various techniques of visual design, or styling
    layers based on their attributes, are used in GIS. QGIS has incredibly broad and
    flexible capabilities of cartographic visualization and data styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following topics and skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Good practices with respect to data organization within a single working document
    (project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual representation of data, revealing its thematic and spatial features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer labeling, which is done to enhance data readability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control over styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base maps used to provide spatial context and a background for your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main result of this chapter will be a project, designed according to the
    basic requirements of cartographic visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Loading layers from the spatial database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will use the database that we created earlier.
    As you remember, this is a SpatiaLite file database. In order to work with it,
    we must first establish a connection and then load the data. As always, there
    are a few alternative ways of doing this in QGIS:'
  prefs: []
  type: TYPE_NORMAL
- en: From the menu, go to **Layer** | **Add Layer** | **Add SpatiaLite Layer**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on ![Loading layers from the spatial database](img/image00305.jpeg), the
    **Add SpatiaLite Layer** button, in the **Manage Layers** toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *Ctrl* + *Shift* + *L* keyboard shortcut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the opened window, define the database you want to connect to by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have created the database as was described in the previous chapter, you
    are likely to notice that it has already been connected. If it is not, then click
    on the **New** button and navigate to the `.sqlite` file you want to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the database file is selected, click on the **Connect** button to see
    the list of available layers. You will see the layers' names and geometry types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the necessary layer (or layers, which is done by holding down the *Ctrl*
    key) and click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Set filter** button gives you more flexibility when adding the data,
    as it provides access to the **Query Builder** window, where you can make up a
    conditional expression to define the sub-dataset, as shown in the following figure.
    For example, if you want to select a multipurpose play area (MPPA) from the `athletic
    facilities` dataset, you can do the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the left side of the **Query Builder** window, select a necessary field called
    `primary_sp` (double-click on its name to add to the expression in the **Provider
    specific filter expression** textbox)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in or click on the operator button (the equality sign in our case)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Load the field values by clicking on the **All** button, and double-click on
    an `MPPA` value to add it to the expression
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Provider specific filter expression** textbox, you will see the following
    line: `"primary_sp" = ''MPPA''`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the query. If it returns a meaningful result, click on **OK**. After returning
    to the main window, you will see the condition beside the **geom** column. Click
    on the **Add** button to load the layers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Loading layers from the spatial database](img/image00306.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Loading layers is even simpler from the **Browser** panel. To see the available
    layers, successively expand **SpatiaLite** and the relevant database item. Now
    you can just drag and drop the layers onto the map canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping and reordering layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, layers are loaded in alphabetical order (reversely if you add them
    from the browser panel). Each new layer is laid on top of the previous layer and
    covers it. By default, all layers are turned on, styled with simple uniform symbols,
    and randomly assigned colors. The order of layers can be changed by simply dragging
    and dropping them up and down the legend. Also, it is strongly advisable to order
    and arrange layers in some logical groups, as it simplifies the navigation and
    understanding of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manage and rearrange layers and maintain their visibility, use the **Layer**
    toolbar in the **Layers** panel, which is shown in the following screenshot and
    contains the buttons described afterwards (in the order of appearance from left
    to right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Grouping and reordering layers](img/image00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Add Group**: This creates an empty layers group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage Layer Visibility**: This allows us to quickly show and hide layers
    and also customize their visibility with predefined layer combinations—so-called
    presets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filter Legend By Map Content**: If the filter is active, layer legend only
    shows those items that are actually visible inside the map canvas. All other symbols
    are hidden from the legend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expand All** / **Collapse All**: Buttons are used to expand or collapse layers,
    symbology legends, and layer groups, if any.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove Layer/Group**: This removes the selected legend entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two ways of creating a layer group:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on ![Grouping and reordering layers](img/image00308.jpeg), the **Add Group**
    button, from the **Layers** toolbar. A new group will appear at the bottom of
    the list of layers. Type in an appropriate name and then drag and drop the layers
    into the group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select several layers while holding down the *Ctrl* key, and use the **Group
    Selected** right-click contextual shortcut to place them in a single group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to develop a multilevel hierarchy with subgroups by selecting
    groups and applying **Add Group** to them. Any item of the layer legend, whether
    it's a single layer or a group, can be renamed with the **Rename** right-click
    shortcut. Renaming doesn't affect the dataset itself, but allows us to apply to
    it a proper and meaningful name within a project. Now try arranging the layers
    into several meaningful groups yourself, and name them appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Developing your own styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In QGIS, a style is a way of cartographic visualization that takes into account
    a layer's individual and thematic features. It encompasses basic characteristics
    of symbology, such as the color and presence of fill, outline parameters, the
    use of markers, scale-dependent rendering, layer transparency, interactions with
    other layers, and labels.
  prefs: []
  type: TYPE_NORMAL
- en: A well-chosen style greatly simplifies data perception and readability, so it
    is important to learn how to work with styles in order to be capable of representing
    your data in the best way. In this section, we will discuss vector and raster
    layers separately, as their stylization has some unique features.
  prefs: []
  type: TYPE_NORMAL
- en: Developing styles for vector layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Style** menu from the **Layer Properties** dialog provides you with all
    the necessary tools to symbolize and style your data. To open it, double-click
    on a layer name in the **Layers** panel, or use the **Properties** right-click
    contextual shortcut, and select the **Style** section. You will see something
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing styles for vector layers](img/image00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The very first thing you should pay your attention to is the small **Renderer**
    drop-down type list in the top-left corner. It contains the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single Symbol**: This is the simplest type that draws all the layer features
    with the same symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Categorized**: This defines data-driven categories and allows us to symbolize
    them individually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graduated**: This defines the categories based on quantitative attributes,
    allowing us to rank features gradually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule-based**: This is the most flexible and advanced renderer type. It allows
    the user to define their own categories using multiple criteria and style them
    individually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point displacement**: This renderer is useful when you are working with a
    point layer containing overlapping points that have similar coordinates or are
    located too close to each other. It is available only for single point layers,
    and will automatically shift the location of the markers so that all overlapping
    markers are visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inverted polygons**: These are used to style the area exterior to the polygon,
    and are available for polygon layers only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heatmap**: This represents a point layer with a continuous surface according
    to the points'' density, It is available for point layers only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the renderer type selected, the **Style** menu section changes
    its view, and if you mistakenly select an inappropriate type (for example, the
    heat map renderer for a line layer), you will get the corresponding message.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the renderer type is chosen, you can start adjusting the symbology with
    the **Symbol selector** dialog, whose accessibility depends on the renderer type
    selected. For example, for the **Single symbol** and the **Inverted polygons**
    renderer, this dialog is directly available from the **Style** section. For the
    **Categorized** and **Graduated** renderers, it is available from the **Symbol
    Change** button, which looks like this: ![Developing styles for vector layers](img/image00310.jpeg).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rule-based**, **Point displacement**, and **Heatmap** renderers have their
    own specifications for symbology selection and adjustment, which will be covered
    in the following sections. Nevertheless, regardless of the renderer type selected
    (except the **Heatmap** renderer), you always have access to the **Symbol selector**
    dialog, which looks similar to what is shown in the following screenshot and consists
    of several sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing styles for vector layers](img/image00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the top-left part of the window, you can see a symbol preview. Underneath
    the preview, there are symbol layers. By default, only one layer is used, but
    you can add more with the **Add symbol layer** button, ![Developing styles for
    vector layers](img/image00312.jpeg), or remove unnecessary layers with the **Remove
    symbol layer** button, ![Developing styles for vector layers](img/image00313.jpeg),
    which is active only if there are two or more layers available. With the **Lock
    layer's color** button, ![Developing styles for vector layers](img/image00314.jpeg),
    the layer's color will be locked for changes, which prevents colors from being
    modified by a categorized or graduated renderer. Layers can be reordered with
    the **Move up** (![Developing styles for vector layers](img/image00315.jpeg))
    and **Move down** (![Developing styles for vector layers](img/image00316.jpeg))
    buttons, and if you are satisfied with the result, **use the Save symbol button**
    in the symbol library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the right-hand side of the dialog window, there are options available for
    the symbol layer selected. Among them, **Symbol layer type** is the most important.
    The list of available types depends on the layer geometry. For a polygon layer,
    you can select from the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Centroid fill**: Polygons are symbolized by a marker at the polygon''s centroid,
    instead of rendering the entire area of the polygon. This is useful if you have
    a lot of small polygons that are better to visualize by a point than by a tiny
    polygon that is visible only after zooming in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradient fill**: Use a predefined gradient or create a custom gradient to
    fill the polygon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line pattern fill**: Line patterns can be combined to create various hatching
    effects. These effects are useful when you want to use the same fill color underneath
    but want to highlight some differences between objects with hatching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point pattern fill**: Regularly distributed points (or other symbols) can
    fill the polygon and create a pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raster image fill**: Any raster image can be used to create a background-filling
    texture or pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SVG fill**: A scalable vector graphics `.svg` file (or a marker) can be used
    to create a filling texture or pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shapeburst fill**: This shades the interior of a polygon, depending on the
    distance from the edge of the polygon, and creates amazing border buffering effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple fill**: This the default type, and is characterized by fill color,
    pattern, and border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outline: marker line**: A marker symbol is used as the outline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outline: Simple line**: Only the polygon''s outline is drawn and its properties
    defined by line color, width, and style.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a point layer, you can choose from different marker types represented by
    **Ellipse**, letters or signs (**Font marker**), various markers (**Simple marker**),
    icons (**SVG marker**), or attribute field values (**Vector Field marker**).
  prefs: []
  type: TYPE_NORMAL
- en: For a line layer, the **Simple** and **Marker line** types are available. In
    the first case, the line is rendered as usual, and in the second, a regularly
    recurring marker symbol is used. **Marker line** can be used, for example, to
    show a line's direction (movement on a road, a river flow, and so on) with an
    arrow marker symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the basics, we will closely explore different rendering
    styles in the example of some layers from our database.
  prefs: []
  type: TYPE_NORMAL
- en: Styling a layer with the Single Symbol renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we will use the `Brooklyn borough boundaries` layer to outline
    the area of interest on the map. As you can see in the following screenshot, we
    use two symbol layers, both defined as **Outline: Simple line**, but with different
    **Pen style** patterns. Underneath, we place a lighter **Solid line** and cover
    it with a darker **Dash Line** pen style. Selecting contrast colors allows us
    to implement a border-like stripe effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling a layer with the Single Symbol renderer](img/image00317.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Styling a layer with the Categorized renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s style the `public schools` layer to reflect the school type:'
  prefs: []
  type: TYPE_NORMAL
- en: After setting the renderer type to **Categorized**, select the column with the
    categories to be rendered under **Column**. The column is available from the drop-down
    list that contains all the layer attribute fields. As we want school types to
    be shown as categories, select the `sch_type` field to categorize the layer:![Styling
    a layer with the Categorized renderer](img/image00318.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Symbol Change** button to adjust the layer symbology. In the
    **Symbol selector** window, set **Symbol layer type** to **SVG marker** and navigate
    to the training dataset catalog called `svg`. Select the `school.svg` file and
    adjust the symbol's **Size** value to `3` mm. Click on the **OK** button to come
    back to the main window:![Styling a layer with the Categorized renderer](img/image00319.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Classify** button. The window with the **Symbol**, **Value**,
    and **Legend** columns will automatically be populated with the categories and
    their descriptions from the attribute field. The difference between **Value**
    and **Legend** is that values represent unique attributes, while the legend provides
    their descriptive characteristics. It's more obvious when values, for example,
    are some codes and the legend is supposed to explain their meaning. Also, values
    are not visible in the layer's legend, but their descriptions are. You can add
    or delete the categories, or manually edit the text of its elements (**Value**
    or **Legend**) by double-clicking on the item in the relevant column. For now,
    just click on **OK** to exit the **Style** dialog and take a look at the preliminary
    result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that the symbols on the map canvas are too dense and overlapped,
    which makes the map cluttered. To enhance readability, we should relate the appearance
    of symbols with a scale, and there are two basic approaches to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate **Scale dependent visibility** from the **General** tab of the **Properties**
    window, where you should enter values of **Minimum (exclusive)** and **Maximum
    (inclusive)** scales. For example, if you define the values, as shown in the following
    screenshot, the layer will become visible within a scale range of 1:49,999 (because
    the minimum value of `50000` is excluded) and more. This approach doesn't affect
    the symbol's size. It only regulates the scale range for its appearance while
    zooming in and out of the map canvas:![Styling a layer with the Categorized renderer](img/image00320.jpeg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The other approach, which we will actually use, is more sophisticated because
    it makes the symbol size dependent on the scale. To apply it, open the **Style**
    dialog in the **Properties** window, and click on ![Styling a layer with the Categorized
    renderer](img/image00321.jpeg), the **Symbol****Change** button, to open the **Symbol
    selector** dialog, as shown. Activate the necessary symbol layer, change its **Size**
    units to **Map unit**, and enter `30`. This means that the symbol size will be
    set 30 feet and changed according to the scale while zooming in or out. Click
    on the **OK** button to come back to the main window.![Styling a layer with the
    Categorized renderer](img/image00322.jpeg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In this case, the scale range can be defined through the **Adjust scaling range**
    button (![Styling a layer with the Categorized renderer](img/image00323.jpeg)),
    which opens a dialog window to define the minimum and maximum scale values.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, all categories are assigned the same **Symbol** marker according
    to the SVG file selected, but you can modify it by double-clicking and adjusting
    the necessary properties (that is, **Fill** and **Border**) in the **Symbol selector**
    dialog. Also, right-clicking on any item brings up a contextual menu with the
    **Copy**, **Paste**, **Change color**, **Change transparency**, **Change output
    unit**, and **Change size** shortcuts for simplifying some common actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This screenshot shows what the screen may look like if you choose the **Categorized**
    renderer and adjust the settings as described previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling a layer with the Categorized renderer](img/image00324.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you've clicked on the **OK** button, the layer's style properties will
    be applied, and you can explore the layer visibility in the map canvas. In the
    case of map unit related symbol size, you will probably not be able to see markers
    while zooming out, but they will appear on larger scales, changing in size accordingly.
    Note that the symbols in the layer's legend on the **Layers** panel behave similarly,
    that is, become larger on larger scales and shrink on smaller scales. This helps
    you know whether the layer is visible on this scale, and if it is, helps you see
    the appearance of its markers.
  prefs: []
  type: TYPE_NORMAL
- en: Styling a layer with the Graduated renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Graduated** renderer type is useful when you want to grade features according
    to some quantitative attribute. In our sample dataset, we have the `zipcodes`
    layer, which contains data about population in the `population` field. We will
    use this layer and field to rank ZIP code boundaries according to the number of
    people living and demonstrate how graduated rendering works.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of choosing an attribute field, you can click on the **Expression dialog**
    button ![Styling a layer with the Graduated renderer](img/image00325.jpeg), beside
    it. It will be useful if you need to use some values that are not in the attribute
    table, but can be derived from the field values. For example, you can use the
    `area/ 43560` expression to convert area in square feet into acres.
  prefs: []
  type: TYPE_NORMAL
- en: Set the renderer type to **Graduated** and select the `population` field in
    the **Column** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the number of classes you wish to show (normally, five to seven classes
    are recommended, otherwise it can be difficult to distinguish between them visually),
    and select a **Color ramp**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use a predefined standard color ramp or select from the advanced options.
    To use them, select **New color ramp** from the bottom of the drop-down list.
    In the **Color ramp type** window, you will get access to the following options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling a layer with the Graduated renderer](img/image00326.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Gradient**: This provides options to create and modify custom gradients.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Random**: This creates a random color ramp according to various customizable
    options, such as **Hue**, **Saturation**, **Value**, and **Classes**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ColorBrewer**: Use predefined color palettes for maps designed for optimal
    clarity. This includes several color schemes for different kinds of data (sequential,
    divergent, and qualitative).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cpt-city**: This provides access to dozens of color gradients for cartography,
    technical illustration, and design.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, select an appropriate graduation mode, which is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Equal interval**: The value range is divided into equal range classes according
    to the number of classes set (for example, values from 0 to 100 are divided into
    five classes of 20 units each).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quantile (Equal Count)**: All of the data will be divided into the number
    of classes set, and ranges will be chosen in such a way that each class will contain
    the same number of items.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural Breaks (Jenks)**: This method groups values according to their similarity.
    So the values within a class have minimum variance, but feature values across
    classes vary significantly.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard Deviation**: Classes are divided according to the standard deviation
    of the values, and this shows how the data differs from its mean value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pretty Breaks**: This creates *n+1* classes for the given range of values
    (that is, if 5 classes are set, the resulting amount will be 6), similar to **Equal
    interval**, but breaking points are selected so that the values are nicely rounded
    numbers (for example, multiples of 10 if using integers).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After you've clicked on the **Classify** button, the **Symbol**, **Values**,
    and **Legend** columns will be populated. Double-click on any of these to modify
    it. Right-clicking opens a contextual menu. It is strongly advisable to play around
    with the various classes and classification modes before deciding which is best
    for revealing the features of your data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling a layer with the Graduated renderer](img/image00327.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Styling a layer with the Rule-based renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Rule-based** renderer is the most flexible renderer because it allows
    you to divide data into your own complex categories and style them separately.
    We will explore the rule-based rendering capabilities in the example of the `bike
    routes` layer, which has a lot of attributes that are useful to visualize. For
    example, there are two fields that are of particular interest to visualize on
    map. The first one is `allclasses`, which contains the classification of the route
    types (for existing cycling facilities), based on the NYC Bicycle Master Plan
    classification. The types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**I**: Greenway/multi-use path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**II**: On-street striped bicycle lane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**III**: On-street signed bicycle route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0**: Planned, but not yet existing as a bike route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L**: Link. There is no facility present, but the element is suggested as
    a connection between portions of the bike network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S**: Stairs and pedestrian overpasses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second field is `lanecount`, which shows the number of lanes. Rules need
    to be used to combine these attributes into separate categories that show both
    the route type and lane count. Follow these steps to develop a Rule-based symbology
    for the layer:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Properties** | **Style** and select the **Rule-based renderer**
    type from the drop-down list. To create a rule, click on the **Add rule**![Styling
    a layer with the Rule-based renderer](img/image00312.jpeg) button. The **Rule
    properties** dialog window will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the window, click on the **...** button beside the **Filter** line. The
    **Expression string builder** window will open. This window consists of three
    sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The left section is **Expression**, with the row of operator buttons above it.
    You can either type the expression manually or double-click on field names, values,
    and functions to compose it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The central section of the window is **Functions**. To expand any item, click
    on the **+** sign beside it and double-click to add it to the expression. We're
    mostly interested in the **Field** and **Values** items that contain all the available
    attribute field names. When you highlight any of them and click on the **Load
    values** buttons that are **all unique** or **10 samples**, the list of values
    is returned. Again, you can either type a value in the expression manually or
    add it by double-clicking on it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're lost, look at the right part of the window. It contains contextual
    help for the item highlighted in **Functions**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our expression, we want to show greenways and multi-use paths that are in
    the **I** category. The `"allclasses" = ''I''` expression for this is shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling a layer with the Rule-based renderer](img/image00328.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After clicking on the **OK** button, you'll be in the **Rule properties** window
    again. First of all, test the consistency of the expression. You will get the
    message **Filter returned 'some number' of feature(s)**. If the number of features
    is `0`, it means that there are no features that satisfy the rule. Otherwise,
    you'll get a positive number that shows the number of features in the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then add a **Label** and, if necessary, **Description** to the class. If the
    **Scale range** toggle is activated, you can define the maximum-minimum scale
    range to visualize the class on a map. Class symbology is developed in the **Symbol**
    section of the window as shown:![Styling a layer with the Rule-based renderer](img/image00329.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the **OK** button, you will be back to the main **Style**
    window, where rules can be managed with the **Add rule** ![Styling a layer with
    the Rule-based renderer](img/image00312.jpeg), **Edit** **rule** ![Styling a layer
    with the Rule-based renderer](img/image00330.jpeg), or **Remove rule** ![Styling
    a layer with the Rule-based renderer](img/image00313.jpeg) buttons. Go ahead and
    add categories for the other classes available in this layer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the **Refine current rules** button, you can go further and develop multilevel
    hierarchy based on scales, categories, or ranges. For example, we can take `allclasses`
    as a major classification attribute and then divide it into subcategories by the
    number of lanes:'
  prefs: []
  type: TYPE_NORMAL
- en: Select category, navigate to **Refine current rule** | **Add categories to rule**,
    and select the **lanecount** field from the **Column** drop-down list. Click on
    the **Classify** button:![Styling a layer with the Rule-based renderer](img/image00331.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, add subcategories to other rules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we should check our rules to remove empty categories. Select all the available
    categories by holding down the *Ctrl* key, and click on the **Count features**
    button. Empty categories will be identified by the **0** count. Click on the **Remove
    rule** button ![Styling a layer with the Rule-based renderer](img/image00313.jpeg)
    to exclude them from the legend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, your rule-based style may look like this:![Styling a layer with
    the Rule-based renderer](img/image00332.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can greatly improve the visualization of multilevel symbols by clicking
    on the **Rendering order** button and adjusting the symbol levels. In the opened
    **Symbol Levels** dialog window, you can define the order in which the symbol
    layers are rendered. The numbers in the cells decide in which rendering pass the
    layer will be drawn. The idea is that some symbol levels should have a lower rendering
    order and others should have higher rendering order. Lower levels will be covered
    by higher ones, allowing the user to create smooth conjunctions and preserve the
    symbology hierarchy. Set up the rendering order as shown in the following screenshot
    and explore the results:![Styling a layer with the Rule-based renderer](img/image00333.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Styling a layer with the Point displacement renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some point layers (for example, the `wifi public` layer from the training dataset)
    contain points with the same or similar coordinates that are impossible to distinguish
    on the map because of their overlapping. In this case, **Point displacement**
    renderer can be of great use, as it locates overlapping points within an imaginary
    circle. It moves points to a small distance in such a way that they all become
    visible. Note that the renderer doesn't affect real point positions in the dataset,
    but visually changes placement to satisfy cartographic requirements. To be able
    to use this type of rendering, a layer should be a single point feature type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply **Point displacement** renderer to the `wifi public` layer follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the **Center symbol** marker around which the points will be displaced.
    By clicking on the symbol button, you get access to the conventional **Symbols
    selector** dialog. In the window, set **Symbol layer type** to **SVG marker**,
    navigate to the training dataset catalog called `svg`, and select the `Wi-Fi-Logo.svg`
    file. Set its size to `20` and select **Map unit** as the size measurements unit.
    After clicking on the **OK** button, you will be brought back to the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Renderer** | **Single symbol** for the points themselves. After clicking
    on the **Rendering settings** button below, you will be in the **Symbol selector**
    dialog. Again, set the symbol layer type to **SVG marker**, navigate to the training
    dataset catalog called `svg`, and select the `wi-fi.svg` file. Set its size to
    `30` and select **Map unit** as the size measurement unit. After clicking on **OK**,
    you will be taken back to the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Rendering circles** section defines the properties of the circles that
    appear on a map to group the points that have similar coordinates and are thus
    grouped around the common center. The following properties are included:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Circle pen width**: This defines the outline width of the bordering circle'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Circle color**: This defines the outline color of the bordering circle'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Circle radius modification**: The bigger this value, the bigger the circle
    will be'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point distance tolerance**: The bigger this value, the more the points to
    be snapped around the common center'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, we accept the default values and apply the settings. In the following
    screenshot, you can see what the result may look like in the case of several points
    that share similar coordinates and need to be grouped around a common center:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Styling a layer with the Point displacement renderer](img/image00334.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The **Labels** section contains some major labeling settings, for example, **Label
    attribute**, **font**, **color**, and so on. We temporarily omit this, as labeling
    will be covered later in the *Adding labels* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Styling a layer with the Inverted polygons renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Inverted polygons** renderer styles the polygon outside its boundary and
    allows us to achieve remarkable cartographic effects. One of its common uses is
    for showing water bodies with the "fading out" blur effects on the map. For this
    purpose, **Duplicate** the `NY borough boundaries` layer with the right-click
    contextual shortcut, right-click to **Rename** it to `water area`, open the **Style**
    properties dialog, and select the **Inverted polygons** renderer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a complex symbol that consists of two layers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first **Symbol layer type** is set to **Outline: simple line**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second one is **Shapeburst fill**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Gradient colors** section, we choose the **Two color** gradient from
    blue to white.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Shading style**, activate **Shade to a set distance:**. The bigger the
    value, the larger the shading effect will be.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, adjust the **Blur strength** slider to a value of `10` to make blurring
    softer. Click on the **OK** button and enjoy the result!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Styling a layer with the Inverted polygons renderer](img/image00335.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Styling a layer with the Heatmap renderer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Heatmap** is a relatively new renderer type. It was introduced in the QGIS
    2.8\. It represents a point as a continuous-density surface and allows us to apply
    cool styling effects. Note that in order to be able to apply this type of renderer,
    the layer and map canvas should be in the same coordinate reference system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will apply the renderer to the `trees` layer, which contains over 15000
    points. These are hard to show on the map individually because of their high density:'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the **Heatmap** renderer type from the drop-down list, select
    a predefined color ramp for the layer called **Greens**. If you are not satisfied
    with the color ramp, you can modify it by clicking on the **Edit** button beside
    it, or create your own color ramp by choosing **New color ramp** from the very
    end of the list, and finally **Invert** the color ramp if there is a need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Radius** field determines the search area for density estimation. It
    basically represents how close points must be to each other to influence the heat
    map. The larger the radius, the smoother the surface; and the smaller the radius,
    the finer the details in the heat map. You can define the radius of a point in
    different units: **Pixels**, **Millimeter**, or **Map unit**. Remember that map
    units are scale dependent. Pixels and millimeters change regardless of the scale,
    but reflect zooming effects as well.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Maximum** **value** is usually set automatically and is responsible for the
    maximum density of points per area unit, but you can adjust it to your needs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, you can use a **Weight points by** numerical field just in case you want
    the layer to reflect some important information in addition to density. For example,
    if we have the relevant data, we can weigh schools by the number of students,
    or cafés by the number of visitors per month.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Rendering** **quality** slider is used to adjust the smoothness of the
    surface. The higher the quality you choose, the slower the rendering process will
    be, while coarser surfaces are rendered faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Layer rendering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whichever rendering type you choose, there are always the same **Layer rendering**
    options at the bottom of the **Style** dialog window. The first one is a general
    **Layer transparency** percentage slider. You can move it to adjust the layer
    transparency. **Layer blending mode** provides some special graphics effects for
    the layer you work with to interact with the bottom layer (or layers). By default,
    the **Normal** mode is set, which means that the underlying layer is hidden underneath
    without mixing of colors with covering layer. This is written as `(a, b) = a`,
    where `a` is the top layer and `b` is the bottom layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer rendering](img/image00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Example of the Normal blend mode applied to the overlapping layers
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose from among 12 different blending modes divided into four groups,
    as described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Blend mode | Formula and description | The example of effects |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Lighten modes—this group of blending modes makes black disappear, preserves
    white, and lightens midtones.** |'
  prefs: []
  type: TYPE_TB
- en: '| Lighten | *max (a, b)*The maximum of RGB components from both layers are
    selected. | ![Layer rendering](img/image00337.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| Screen | *1-(1-a)×(1-b)*At first, RGB components of both layers are inverted.
    Then they are multiplied, and the final result is inverted again. | ![Layer rendering](img/image00338.jpeg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dodge | *b÷(1-a)*the bottom layer is divided by the inverted top layer. |
    ![Layer rendering](img/image00339.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| Addition | *a+b*This summarizes components for both layers. | ![Layer rendering](img/image00340.jpeg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Darken modes: this group is opposite to the previous one, which means that
    it preserves black, makes white disappear, and darkens midtones.** |'
  prefs: []
  type: TYPE_TB
- en: '| Darken | *min (a, b)*The minimum of RGB components from both layers are selected.
    | ![Layer rendering](img/image00341.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| Multiply | *a × b*The layers are multiplied. | ![Layer rendering](img/image00342.jpeg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Burn | *1 - (1-b)÷a*The bottom layer is inverted and divided by the top layer,
    and the result is inverted again. | ![Layer rendering](img/image00343.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Contrast modes: the modes drop midtones, and apply dark and light pixels
    from the top layer to darken or lighten pixels from the bottom layer respectively.**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Overlay | Combines two blend modes for different pixels. For lighter pixels,
    half-strength Screen mode is applied, and for darker pixels, it is Multiply mode.
    As a result, gray midtones become invisible. Calculations are based on the bottom
    layer, which means that pixels of the top layer are lightened or darkened by the
    bottom layer. | ![Layer rendering](img/image00344.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| Soft light | This is the same as the previous one, but instead of Screen
    and Multiply modes, Dodge and Burn modes are used for lightening and darkening
    respectively. | ![Layer rendering](img/image00345.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| Hard light | This is similar to Overlay, but the top and bottom layers are
    switched. | ![Layer rendering](img/image00346.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Inversion and cancellation modes: apply simple arithmetic actions to invert
    colors and suppress black** |'
  prefs: []
  type: TYPE_TB
- en: '| Difference | *b-a*This subtracts pixel values of the top layer from the bottom
    layer, preserving only positive values; that is, blending with black (0) has no
    changes, while blending with white (1) inverts the color. | ![Layer rendering](img/image00347.jpeg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Subtract | *b-a*This is similar to the Difference mode, but negative values
    are substituted by black. | ![Layer rendering](img/image00348.jpeg) |'
  prefs: []
  type: TYPE_TB
- en: '**Feature blending mode** applies the same effects to the overlapping features
    within the layer. We advise you to give the different modes a try in order to
    understand how they work with different data types and styling options. Getting
    familiar with them allows you to create professional-looking maps with stunning
    cartographic design effects.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer rendering](img/image00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is an example of the hurricane evacuation zones layer
    combined with the underlying primary residential zoning layer through simple 50
    percent transparency (on the left), versus the **Multiply blending mode** used
    without any transparency (on the right).
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer rendering](img/image00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, the `noise` point layer with simple marker fill
    opacity set to 20 percent; the **Layer blending mode** is **Hard light** and **Feature
    blending mode** is **Dodge**.
  prefs: []
  type: TYPE_NORMAL
- en: Developing styles for raster layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our dataset contains three raster layers: `landcover 2010`, `height a.s.l.,
    ft`, and `hillshade`. All of these are remote sensing derivatives that are useful
    for representing land use and relief features. We will develop styles for them
    to represent the DEM as a continuous layer, and combine it with a hillshade to
    obtain some semi-3D cartographic effects. The `landcover 2010` layer will be used
    to show how to work with the set of discrete classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s style the `landcover 2010` layer that contains several landcover
    classes. These are coded by integer values described in the metadata as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1`: `tree canopy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: `grass/shrub`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: `bare earth`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4`: `water`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5`: `buildings`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6`: `roads`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`7`: `other paved surfaces`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s develop the styles by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Style** tab from the **Properties** dialog window (double-click on
    the layer in the legend, or select the **Properties** right-click contextual shortcut).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Singleband pseudocolor** as **Render type**. As our raster has only one
    band, it will be loaded automatically as **Band 1 (Gray)** in the **Band** drop-down
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we work with discrete landcover classes, we go to **Color interpolation**
    | **Discrete**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add our classes into the legend window. Use the **Add values
    manually** button, ![Developing styles for raster layers](img/image00312.jpeg),
    to add classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, all the classes are assigned the **Value** of `0`, the same **Color**,
    and **Custom color map entry** instead of **Label**. You can change them by double-clicking
    on a correspondent item. When you're done, your **Style** section will look similar
    to what is shown in the following screenshot:![Developing styles for raster layers](img/image00351.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `height a.s.l., ft` layer, in the **Style** section, select **Render
    type** as **Singleband pseudocolor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The band will be set automatically, and in the case of smoothly changing values
    as in DEM, leave the default **Linear** option (under **Color interpolation**)
    unchangeable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to select an appropriate color ramp for the thematic content of
    the layer. A predefined ramps drop-down list doesn't show you all of the available
    diversity. To get this, select **New color ramp**. From the **Color ramp type**
    window drop-down list, select `cpt-city`. You will be shown all the available
    predefined color ramps, sorted into several thematic groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Topography** group, select the **elevation** ramp (or any other
    ramp you like), and click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be asked to enter a name for new color ramp. Click on **OK** as we're
    satisfied with the existing one. Then, we'll be back to the main **Style** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Mode** | **Continuous**, and QGIS will create classes after you
    click on the **Classify** button. The **min / max** values range within which
    these classes will be created is defined in the **Load min/max values** section
    with the following options, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cumulative count cut**: By default, this is set to 2-98 percent of the data
    range and helps cut very low or very high data outliers. Choosing this type of
    data range setting, the initial image gains more contrast and better reflects
    differences in the data values.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Min / max**: The entire data range is taken into account, but the resulting
    map may look dull.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean +/- standard deviation ×**: Values within the given standard deviations
    (or deviations) define the data range.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Developing styles for raster layers](img/image00352.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To load values according to the specified data range mode, choose **Actual (slower)**
    in the **Accuracy** section option and click on the **Load** button. Depending
    on the dataset, it may take some time, and when you see that the **Min** and **Max**
    values below the color ramp and **Mode** are updated, click on the **Classify**
    button. In the window to the left, you will see classes and their ranges set up
    automatically within the defined data range. This is as per the color ramp chosen.
    It is important to understand that every value represents the maximum limit of
    the class, and the highest value is not the real maximum value of the dataset,
    but the cumulative maximum count. You can adjust values by double-clicking on
    them and typing integer values, and clarify the legend by entering ranges instead
    of single values. Look at the preceding screenshot to understand these explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s style the `hillshade` raster to reveal details and roughness
    of relief. Before starting, make sure that the layer is above `height a.s.l.,
    ft`, and if not, drag it and place it properly. Hill-shading simulates how sunrays
    illuminate the terrain. Combining it with DEM is a very popular approach in cartographic
    visualization for implementing semi-3D effects and highlighting relief details.
    Conventionally, semi-transparent hill-shading is overlaid above the terrain layer
    to achieve this. As a result, the final terrain visualization loses color contrasts
    and becomes dull. To overcome this, we will first move the **Global transparency**
    slider to 50 percent in the **Transparency** section under **Layer properties**,
    and in the **Style** section, select **Multiply** from the **Blending mode** drop-down
    list. If you''re not sure about what exactly has happened, try to apply **Normal
    blending mode** using **Apply**, and then go back to **Multiply**. The following
    screenshot shows the difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing styles for raster layers](img/image00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows combined hillshade and DEM layers using simple
    50 percent transparency (above) and the Multiply layer blending mode with 50 percent
    transparency (below).
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Labeling is an important part of cartographic visualization. It significantly
    enhances data readability and understanding. Note that labeling is applicable
    only for vector layers because they contain landmarks and attributes (usually
    names) to be shown on the map. You can reach the **Labels** section from the **Layer
    Properties** dialog or by going to **Layer** | **Labeling** menu. Also, there
    is a **Label** toolbar that you can turn on or off by right-clicking on the toolbars
    panel contextual menu and use for fast access to the labeling options.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to add labels to your layer quickly, just turn on the **Label this
    layer with** option, select the attribute field to be used for labeling from the
    drop-down list beside it, and click on **OK**. Labels will be added immediately
    to the layer. While this works well for personal and temporary use, there are
    many more labeling options available for the following label properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text**: This defines the main properties of the text style, such as **Font**,
    **Size**, **Color**, **Type case**, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatting**: This is used to organize and format labels as multiple lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Buffer**: Text buffering defines properties of the buffer halo like size,
    color, transparency, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background**: They contain background options for the labels like shape,
    size, color of the background, and many more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shadow**: These are shadowing options for labels and backgrounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Placement**: These are advanced placement options for arranging labels and
    avoiding overlapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rendering**: These are options for labels and features for fast and clear
    label rendering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will go through some examples of layer labeling using advanced labeling
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling a point layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will label the `subway stations` point layer with station
    names and lines IDs. This means that in a label, we need to combine information
    from different fields, and to do this, we will use the `"name" || '\n' || "line"`
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Expressions give you advanced control over labeling options because with them,
    you can combine multiple fields, text, and functions to achieve the best result.
    The rules for constituting expressions are very simple: `field_name` is written
    in double quotes, and `text strings` in single. To merge them into a single expression,
    we use the `||` concatenation sign, and `\n` is used to start a new line.'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Font** drop-down list, choose for example **OpenSans** (or another
    desired font) and maximize its **Size** value to 9 points.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Formatting** section, we only set **Alignment** to **Center**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Buffer** section, activate **Draw text buffer**. Set **Buffer size**
    to `1` mm and **Pen join style** to **Round**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to choose the color for buffering. Also, if you want to achieve
    more stylish effects, play with the **Transparency** slider and the **Blend**
    modes. We will not use any background options, so in this example, this section
    is omitted and we'll go right to the **Shadow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Draw drop shadow** toggle. From the **Draw under** drop-down
    list, select **Lowest label component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to see the result without leaving the dialog window, click on the
    **Apply** button from time to time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Offset** section, you can define the drop shadow angle. The value is
    entered manually or adjusted with the mouse arrow in a rotary switch beside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the shadow's outline depends on the label rotation angle. If you want
    to ignore it, the **Use global shadow** toggle should be activated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maximizing the **Blur radius** value softens the shadow, and you can achieve
    more complex effects using the **Transparency**, **Color**, and **Blend** modes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By minimizing or maximizing the **Scale** value, the shadow can be made more
    subtle or obvious.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Placement** section, activate the **Offset from point** mode and you
    will see the placement quadrants. Click on the lowest central quadrant button
    to place the label centered under the symbol marker. If the label is complex,
    as in our case, there is a chance that it will partially overlap the symbol. To
    avoid overlapping, use **Offset X,Y**, which are the values for the label's horizontal
    and vertical displacement. Enter a small positive **Y** value (for example, `3.0`)
    to move the label slightly lower.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the **Rendering** section, activate **Scale-based visibility** and
    enter `10000` in the denominator for the maximum possible scale. This means that
    our labels will be visible only within the 1:1 to 1:10000 scale range. If you
    want to prevent QGIS from hiding overlapped labels, activate **Show all labels
    for this layer (including colliding labels)**. Some labels may be rotated for
    better placement, or even the map canvas can be rotated. Then, you can decide
    whether or not to allow upside-down label rotation using **Show upside down labels**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the layer contains a lot of features, it is possible to use a number for
    **Limit number of features to be labeled to**. You can also use **Discourage labels
    from covering features**. As a result, your map will look neater. Depending on
    the labeling options you have chosen, your labeled layer may look similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Labeling a point layer](img/image00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Labeling a line layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process of labeling a line layer is similar to the one described previously,
    but in the **Placement** section, you can find some line-specific options. The
    most important options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parallel**: The label is adjusted along a direction parallel to the major
    direction of the labeled line. This type of placement is good for conveying line
    curvature, but can miss small details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Curved**: The label will be curved so as to reflect an original line''s curvature.
    This is the best choice for labeling objects with complex geometry, such as rivers
    and pathways.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal**: Regardless of the line orientation, the label is always placed
    horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels can be placed above, on, or below line respectively. In the case of on-line
    placement, the line will be partially overlapped by the label. If you select several
    options at once, QGIS will define the best position and even take into account
    the line direction with **Line orientation** **dependent position** activated.
    The **Distance** option defines how far from the line the label will be placed
    (it is active only for **Above/ On line** positions). The maximum angle between
    curved characters defines how far you can bend a label. In the **Rendering** sections,
    the main line-specific options are located within **Feature options**. For example,
    here you can use **Merge connected lines to avoid duplicate labels**, which is
    very useful for working with a road network. With **Suppress labeling feature
    smaller than**, you can set up the values for small features to be ignored during
    labeling.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling a polygon layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will add labels to the `zipocodes` layer:'
  prefs: []
  type: TYPE_NORMAL
- en: Activate labeling and select the `zipcode` field to add labels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the text section, set **Font** to **Harlow Solid Italic** (or any other font
    you like) and enter `10` under **Size**. The labels are very simple, so we won't
    use any formatting, and instead of using buffer, we will work with **Background**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Draw background** toggle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Shape** drop-down list, there are several options available for defining
    the shape of the background. You can select from simple geometries (rectangle,
    square, ellipse, and so on) or more sophisticated shapes with SVG. Select **SVG**,
    navigate to the training `dataset/svg` folder, and select `plate.svg`. Set its
    type to **Buffer** and adjust **Size** to `1` mm. Also, if the SVG parameters
    are modifiable, you can select **Fill**, **Border color**, and **Border width**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Placement** section, you will see some polygon-specific options, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offset from centroid**: Labels will be placed in the center of polygon within
    a selected quadrant and with a specified offset, if any. You can also specify
    exactly which centroid to use, visible or whole. If you select the visible polygon
    centroid, then the label visibility and placement will change dynamically while
    zooming and panning the map. If you select the whole polygon centroid, the labels
    will be static. Additionally, if you activate **Force point inside polygon**,
    the labels will tend to stay inside the polygon only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Around centroid**: Labels will be placed in the center of the polygon within
    a specified distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Perimeter**: Labels will be placed along the border line (the **Above/
    On/ Below** placement options are available, and it is possible to combine them
    to allow QGIS to define the best position). Activate **Line orientation dependent
    position** if you want take the line direction into account. The **Distance**
    value defines how far from the line the label will be placed, and the **Repeat**
    values vary the repetition frequency. This type of labeling is very useful for
    boundaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal (slow)**: All labels will be placed horizontally and will change
    their position dynamically with zooming and panning to stay inside the polygon.
    As QGIS constantly defines the optimal position, this type of labeling can work
    slower for large datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free (slow)**: QGIS will define the optimal position (including rotation)
    for the label within the current map view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try the different options yourself for a better understanding of label placement.
    The **Rendering** section is the same as for line layers, so you can avoid labeling
    some small features or limit their number.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced labeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beside any labeling option, you can see the **Data defined override** button,
    ![Advanced labeling](img/image00355.jpeg). It provides advanced control over labeling
    parameters. You can do this with an expression or by using a specially created
    attribute field that overrides the defined settings with custom parameters. Data-defined
    properties are very useful when you want to distinguish between labels for objects
    with different properties (for example, cities and towns with different populations)
    or apply your own placement positions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create three types of `zipcode` labels depending on population. The smaller
    label will be for areas where the population is less than 40000, the medium-sized
    label will be for a population of 40000-80000, and the biggest will be for a population
    of over 80000.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we need to adjust the **Size** value of the font according
    to the `population` field values. From the **Data defined override** contextual
    menu, select **Edit…**, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced labeling](img/image00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In **Expression string builder**, enter the expression shown in the following
    screenshot. In this expression, we use the population as the condition for font
    size value definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced labeling](img/image00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'But what if we not only want to vary the size, but also want to underline the
    labels with the largest values? Then, we select **Edit** from the **Underline**
    button from the data override contextual menu and type the following expression:
    `case when "population" > 80000 then 1 else 0 end`.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are confused about exactly which values to enter for the parameter definition
    and how to combine them to get a meaningful result, select the **Description**
    item from **Data defined override**. A window, with a short explanation of the
    expected input, will be displayed. For example, from the following screenshot,
    which shows an explanation of the color input, we can conclude that if we want
    to change the label color according to the population, we can use `case when "population"
    > 80000 then ''255,0,0,0'' else ''25,81,119,0'' end`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced labeling](img/image00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Managing styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see from the previous section, developing styles is a time-consuming
    task. But the good thing is that once developed, styles are not lost. They can
    be saved, applied to other layers, and imported from and exported to external
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: The main style management options are available from the **Style** button at
    the bottom row of the **Style** section under **Properties** as shown. The menu
    is divided into sections separated by horizontal lines. The first section is responsible
    for loading and saving styles. The second and third are for managing multiple
    styles for the layer, and at the bottom is the toggle for activating different
    styles (inactive and grayed out by default, when there's only one style available).
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing styles](img/image00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get access to some of these options by right-clicking on the layer's
    **Styles** contextual shortcut. For example, you can copy and paste a style from
    one layer to another, add a new style, or rename an existing style. Also, this
    is very convenient for rapid switching between multiple layer styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have finished polishing your style, it is wise to save it. There are
    three main options for doing this from the **Style** button of the **Save Style**
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**QGIS Layer Style File**: The style is saved as a `.qml` file, which is a
    native QGIS format for storing styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLD File**: The style is exported to a style layer descriptor (`.sld`) file.
    This file type converts the original symbology into a single-symbol or rule-based
    type. This means categorized, graduated, heatmap, and other types of symbology
    may not be supported properly. Renderer-based symbology may not be supported properly.
    It may be convenient to save the symbology in an `.sld` file if you plan to work
    on it within an external application, such as GeoServer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save in database**: We use this option to store and distribute all our data
    and styles within a single SpatiaLite database. When loading a style, it is important
    to provide a meaningful name and an exhaustive description. This is very handy
    because if you want somebody else to work with your data and style it properly,
    they just need to connect to the database, load the spatial layers and styles,
    and apply them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the style is saved, you can use **Load from file** (**Style** | **Load
    Style** | **Load from file**) or **Load from database** to select and apply the
    style.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The QGIS community is very active in developing resources and eager to share
    them, so instead of spending a long time developing your own styles, you can apply
    ready styles provided by various users. We advise you to take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Charley Glynn's OSM shapefile QGIS style sheets available at [https://github.com/charleyglynn/OSM-Shapefile-QGIS-stylesheets](https://github.com/charleyglynn/OSM-Shapefile-QGIS-stylesheets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3liz styles for OpenStreetMap data in QGIS at [https://github.com/3liz/osm-in-qgis](https://github.com/3liz/osm-in-qgis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anita Graser's styles for SpatiaLite databases at [https://github.com/anitagraser/QGIS-resources/tree/master/qgis2/osm_spatialite](https://github.com/anitagraser/QGIS-resources/tree/master/qgis2/osm_spatialite)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ross McDonald's grayscale styles for OSM shapefiles in QGIS at [https://github.com/mixedbredie/OSM-Shapefile-QGIS-stylesheets/tree/master/QML%20files/greyscale](https://github.com/mixedbredie/OSM-Shapefile-QGIS-stylesheets/tree/master/QML%20files/greyscale)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download ready-to-use `.qml` files from there and apply them to your
    layers, but it's important that attributes of your layers be the same as those
    used in the ready styles. Otherwise, you can use these styles as basic templates
    and adjust the field names and values manually.
  prefs: []
  type: TYPE_NORMAL
- en: Using several styles for the same layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also get quick access to some styling properties from the layer''s
    contextual **Styles** right-click shortcut, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using several styles for the same layer](img/image00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, you can easily copy a style from one layer and paste it to another.
    Moreover, you can apply several styles for one layer and switch between them when
    necessary. To add a one more style to the layer, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the right-click contextual shortcut of **Add layer**, which is under
    **Styles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New style** window, type the name for the new style, and click on **OK**,
    as shown in the following screenshot![Using several styles for the same layer](img/image00361.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The layer''s appearance will not be changed, because it relies on the last
    applied style for now. Open the layer''s **Properties** dialog and adjust the
    new style like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can develop a new style in the **Style** section in a common way, as described
    earlier in the *Developing your own styles* section.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, it's possible to upload a ready style by going to **Style** | **Load Style**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the styling is done, click on the **OK** button. You will see that both
    the styles are available, either from the **Style** button menu or the **Styles**
    right-click contextual shortcut.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can develop as many styles as you wish, and use the toggle beside their
    names to switch between styles. Also, you can use the **Add**, **Remove Current**,
    and **Rename Current** shortcuts to manage multiple styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding base maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Base maps are ready-to-use background maps that provide contextual and spatial
    information additional to your data. They can be satellite imagery, general maps
    from various sources, or even self-prepared custom maps. In this section, we will
    take a look at the most popular types of background maps and how to load them
    into QGIS to combine them with your data.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenLayers plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the most popular QGIS plugins, as it allows simple addition of
    base maps from numerous popular map providers (OpenStreetMap, Google Maps, Bing
    Maps, and so on). Install the plugin as described in [Chapter 1](part0014.xhtml#aid-DB7S2
    "Chapter 1. Handling Your Data"), *Handling Your Data*, and make sure that it's
    active after installation.
  prefs: []
  type: TYPE_NORMAL
- en: Loading base maps is simple; go to **Web** | **OpenLayers**, select the provider,
    and click on the map you want to add. The map will be loaded into the map canvas
    and appear in the **Layers** panel. By default, layers are added to the first
    layer group, but you can drag and drop them wherever you want. The layer can be
    shown or hidden with the toggle beside its name, and deleted from the project
    with the **Remove** right-click contextual shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: You can gain extended control over layers and navigation by activating the **OpenLayers
    Overview** panel from the menu. The panel will appear in the bottom-left corner
    under the **Layers** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![The OpenLayers plugin](img/image00362.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Activate the **Enable map** toggle and select a map for overview from the drop-down
    list. You can use two different maps in the overview window and the map canvas
    window for comparison. If you want to load the map into the canvas, click on the
    **Add map** button beside the drop-down list. For simpler navigation, there is
    a red cross in the main map window. It marks the center of the overview extent.
    You can hide it by clicking on the corresponding toggle. Also, the overview map
    can be saved as a `.jpeg` image, or a rectangular extent can be copied to the
    clipboard as KML.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **OpenLayers** plugin is very useful because of its numerous maps and simplicity,
    but there are a number of constraints you should pay attention to while working
    with it. First of all, this plugin is aimed at providing base maps only, and before
    using it to perform other tasks, it is highly recommended to study the provider''s
    licensing terms. Secondly, note that adding any layer from the plugin''s list
    automatically changes the original map projection to **EPSG: 3857 WGS 84 / Pseudo
    Mercator**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because the plugin fetches data originally provided in EPSG: 3857,
    and instead of reprojecting, it suppresses map projection and automatically reprojects
    the user''s data. Last but not least is the fact that with the OpenLayers plugin,
    you cannot rely on scale and map measurements. This is because the EPSG: 3857
    WGS 84 / Pseudo Mercator projection it uses was designed not to minimize object
    distortions (shape, area, distance, and so on) but to fit the entire globe in
    such a way that it could be shown on the web map. All measurements in this projection
    are performed on a sphere, and will most likely be much larger than expected.
    In a few words, this projection is good for visual exploration but not for measurements.
    To overcome these limitations, you can use other approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding WMS/WMTS layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Web Map Service** / **Web Map Tile Service** (**WMS**/**WMTS**) is a
    popular web-protocol for spatial information transferring To add WMS/WMTS base
    layer to your map perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To load data from web services, go to **Layer** | **Add Layer** | **Add WMS/WMTS**,
    use the corresponding button in the **Mange layers** toolbar, or use the *Ctrl*
    + *Shift* + *W* keyboard shortcut.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add layer(s) from a WM(T)S Server** window, click on the **New** button
    to configure new connection parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Create a new WMS Connection**, enter connection details. Type **Name**
    and **URL** for the connection and authentication parameters, if any. After filling
    in these details, click on **OK**. A newly created connection will show up in
    the drop-down list under the **Layers** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Connect** button to get information about the available layers,
    select the layer you want to use, click on **Add**, and then click on **Close**
    to leave the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the case of using WMS-layers, the data will automatically be reprojected.
    Also, you will have access to the layer's **Properties** dialog and styling parameters,
    such as transparency, blending, and color mode available for modification. Of
    course, these layers are available for creating high-resolution printing maps.
  prefs: []
  type: TYPE_NORMAL
- en: Adding TMS layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Tile Map Service** (**TMS**) is another way of providing spatial data
    through the Internet in the form of georeferenced images (tiles). To load TMS
    data into QGIS, install and activate the **TileMapScale** plugin, as described
    in [Chapter 1](part0014.xhtml#aid-DB7S2 "Chapter 1. Handling Your Data"), *Handling
    Your Data*. After installation, the plugin is available from the **TileMapScale**
    menu under **Plugins**. The plugin's panel consists of two tabs. On the first
    tab, **Tool**, you can see a drop-down list with the available TMS datasets. With
    the **activate zoomlevels** toggle, scales will be set automatically to fit the
    tile's zoom level. Under the **Options** tab, you can activate **Use 'On-The-Fly'
    Transformation** if you want the tile layers to be adjusted to map projection.
    Set **min/max Zoomlevels** and click on the **DPI** button to set the resolution
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The plugin stores dataset descriptions in the `UserName\ .qgis2\ python\ plugins\
    TileMapScaleLevels\ datasets` folder as `.xml` files. These files use the GDAL
    TMS minidriver format to describe the data source parameters. You can read more
    about this at [http://www.gdal.org/frmt_wms.html](http://www.gdal.org/frmt_wms.html).
    Using the examples provided with the original plugin installation and by studying
    the documentation, you can create `.xml` files for your own data providers.
  prefs: []
  type: TYPE_NORMAL
- en: Other than this plugin, you can also use the **TileLayer** and **QuickMapServices**
    plugins to work with TMS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you know everything necessary for organizing and styling your data. You
    are also able to add informative labels, save your styles for future use and sharing,
    and provide some spatial background context with base maps from various sources.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to prepare your maps for printing.
  prefs: []
  type: TYPE_NORMAL
