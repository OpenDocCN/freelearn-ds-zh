["```py\n#import packages\nimport igraph as ig\nfrom igraph import Graph\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n#import Burkina Faso market millet prices\nFile=\"C:/users/njfar/OneDrive/Desktop/BF_Millet.csv\"\npwd=os.getcwd()\nos.chdir(os.path.dirname(File))\nmydata=pd.read_csv(os.path.basename(File),encoding='latin1')\n#import weight matrix of Burkina Faso markets\nFile=\"C:/users/njfar/OneDrive/Desktop/weights_bk.csv\"\npwd=os.getcwd()\nos.chdir(os.path.dirname(File))\nweights=pd.read_csv(os.path.basename(File),encoding='latin1')\n```", "```py\n#score in yearly sets with 3 quarter overlap\nvcurv_t=[]\nvcurv_ave=[]\neig_t=[]\neig_ave=[]\nnets=[]\nfor Year in range(4,29):\n    data=mydata.iloc[(Year-4):(Year),1:46]\n    cor=np.corrcoef(data.transpose())\n    weights_total=weights.iloc[:,1:46]\n    cor[cor>=0.9]=1\n    cor[cor<0.9]=0\n    cor_weighted=np.multiply(cor,weights_total)\n    bf_market_w=Graph.Adjacency(cor_weighted,diag=False)\n    edge_list=bf_market_w.get_edgelist()\n    self_loop=[]\n    for i in range(0,46):\n        self=(i,i)\n        self_loop.append(self)\n    to_remove=[]\n    for i in edge_list:\n        for j in self_loop:\n            if i==j:\n                to_remove.append(i)\n    bf_market_w.delete_edges(to_remove)\n    nets.append(bf_market_w)\n    d=Graph.degree(bf_market_w)\n    e=Graph.pagerank(bf_market_w)\n    eig_t.append(e)\n    eig_ave.append(np.mean(e))\n    ecurvw=[]\n    for edge in bf_market_w.es:\n        s=edge.source\n        t=edge.target\n        ecurvw.append(2-d[s]-d[t])\n    vcurvw=[]\n    for vertex in bf_market_w.vs:\n        inc=Graph.incident(bf_market_w,vertex)\n        inc_curv=[]\n        for I in inc:\n            inc_curv.append(ecurvw[i])\n        vcurvw.append(sum(inc_curv))\n    vcurv_t.append(vcurvw)\n    vcurv_ave.append(np.mean(vcurv_t))\n```", "```py\n#plot metric averages across time slices\ntime=range(0,25)\nplt.plot(time, eig_ave, label = \"PageRank Average\")\nplt.plot(time, vcurv_ave, label = \"Forman-Ricci Curvature Average\")\nplt.xlabel(\"Time Slice\")\nplt.ylabel(\"PageRank and Forman-Ricci Curvature Averages\")\nplt.legend()\nplt.show()\n```", "```py\n#examine different time points with Forman-Ricci\n#curvature plots, fourth slice\nig.plot(nets[4],vertex_size=np.array(vcurv_t[4])*-0.5)\n```", "```py\n#examine different time points with Forman-Ricci\n#curvature plots, 19th slice\nig.plot(nets[19],vertex_size=np.array(vcurv_t[19])*-0.5)\n```", "```py\n#import store sales data\nFile=\"C:/users/njfar/OneDrive/Desktop/Store_Sales.csv\"\npwd=os.getcwd()\nos.chdir(os.path.dirname(File))\nmydata=pd.read_csv(os.path.basename(File),encoding='latin1')\n```", "```py\n#score in yearly sets with monthly  overlap\nvcurv_t=[]\nvcurv_ave=[]\neig_t=[]\neig_ave=[]\nnets=[]\nfor Month in range(2,54):\n    data=mydata.iloc[(Month-2):(Month),1:6]\n    cor=np.corrcoef(data.transpose())\n    cor[cor>=0.9]=1\n    cor[cor<0.9]=0\n    stores=Graph.Adjacency(cor)\n    edge_list=stores.get_edgelist()\n    self_loop=[]\n    for i in range(0,52):\n        self=(i,i)\n        self_loop.append(self)\n    to_remove=[]\n    for i in edge_list:\n        for j in self_loop:\n            if i==j:\n                to_remove.append(i)\n    stores.delete_edges(to_remove)\n    nets.append(stores)\n    d=Graph.degree(stores)\n    e=Graph.pagerank(stores)\n    eig_t.append(e)\n    eig_ave.append(np.mean(e))\n    ecurvw=[]\n    for edge in stores.es:\n        s=edge.source\n        t=edge.target\n        ecurvw.append(2-d[s]-d[t])\n    vcurvw=[]\n    for vertex in stores.vs:\n        inc=Graph.incident(stores,vertex)\n        inc_curv=[]\n        for i in inc:\n            inc_curv.append(ecurvw[i])\n        vcurvw.append(sum(inc_curv))\n    vcurv_t.append(vcurvw)\n    vcurv_ave.append(np.mean(vcurv_t))\n```", "```py\n#plot metric averages across time slices\ntime=range(0,52)\nplt.plot(time, eig_ave, label = \"PageRank Average\")\nplt.plot(time, vcurv_ave, label = \"Forman-Ricci Curvature Average\")\nplt.xlabel(\"Time Slice\")\nplt.ylabel(\"PageRank and Forman-Ricci Curvature Averages\")\nplt.legend()\nplt.show()\n```", "```py\n#examine different time points with\n#Forman-Ricci curvature plots, tenth slice\nig.plot(nets[10],vertex_size=np.array(vcurv_t[10])*-0.5)\n```", "```py\n#examine different time points with\n#Forman-Ricci curvature plots, thirtieth slice\nig.plot(nets[30],vertex_size=np.array(vcurv_t[30])*-0.5)\n```"]