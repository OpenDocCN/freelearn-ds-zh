- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a Network?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces the basics of graph theory and its applications in network
    science. Network science is not a commonly taught area of data science, but many
    problems can be framed through a network science perspective. Network-based algorithms
    often scale better than other machine learning algorithms, making them ideal for
    analyzing datasets with many variables, exploring spatial datasets with many locations
    represented, or spotting trends in high-dimensional time series data. Later chapters
    will delve more deeply into the topics with hands-on examples.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will define terms that will be used throughout the book,
    explore some common uses of network science in analyzing social relationship data,
    and introduce two Python packages that will be used in subsequent chapters. After
    finishing this chapter, you’ll start to recognize data science problems that can
    be formulated as network science problems and how to represent them visually in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Formally, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to graph theory and networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of real-world social networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other type of networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have very few technical requirements or assumptions for this chapter. If
    you have not installed Python, you are encouraged to do so, as we will be using
    Python regularly—specifically, the Jupyter Notebooks that are installed with the
    Anaconda version of Python installation. If you have difficulty with installation,
    support can be found on Stack Overflow. The code for each chapter can be found
    under this GitHub link: [https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python](https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python).'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to graph theory and networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social connections are fundamental to society, including family ties, shared
    roles in communities, trading relationships, and many more. Social networks—from
    MySpace to Twitter to TikTok—have played a larger and larger role in marketing,
    job-hunting, and information sharing in the last decades. Software systems might
    even be built between engineers scattered across the globe collaborating on platforms
    such as GitHub or Slack to coordinate efforts from teams in Kenya, India, and
    Australia who have never met.
  prefs: []
  type: TYPE_NORMAL
- en: A branch of data science called **network science** studies these relationships
    between individuals, groups, and even societies within social networks using algorithms
    and statistical methods originating in a field of math called **graph theory**.
    Graph theory studies pairwise relationships between objects. Graph objects (including
    people, towns, ideas, points in time, and many more types of objects to study)
    are represented in network science as vertices, or points, within the network;
    note that some disciplines may use the term “*node*” instead of “*vertex*.” Relationships
    between objects (such as mutual collaborations between people or bridges connecting
    different islands or statistical connections between time points) are represented
    as edges within the network and connect pairs of vertices that share a relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this a little more concrete, let’s consider three young women: Ayanda
    in South Africa, Machiko in Japan, and Greta in Belgium:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Ayanda, Machiko, and Greta](img/B21087_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Ayanda, Machiko, and Greta
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps Ayanda, Machiko, and Greta join an online women’s coding hackathon
    aimed at sustainable energy solutions. Through the hackathon, they meet and form
    a team to work on solar power solutions for rural villages. They’ve formed a professional
    network with mutual relationships among the three women, as shown in *Figure 1**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A network representation of Ayanda, Machiko, and Greta showing
    pairwise connections between the women](img/B21087_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – A network representation of Ayanda, Machiko, and Greta showing
    pairwise connections between the women
  prefs: []
  type: TYPE_NORMAL
- en: 'As these women work on their hackathon project, Ayanda may invite colleagues
    within her social network, adding to the team and creating new connections for
    Machiko and Greta over time. Perhaps Amara, a colleague of Ayanda’s from Kenya,
    connects with Greta but not Machiko to code the backend of their project, adding
    another member to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Social network with the addition of Amara](img/B21087_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Social network with the addition of Amara
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of networks over time is a key problem in network science today,
    as we often have incomplete data on relationships that exist outside of what we
    explicitly observe and want to predict future phenomena, such as predicting the
    potential for bipartisan fake news spread in the next election or when new members
    may join a criminal organization based on ties that exist in the present. We will
    wrangle some problems related to dynamic social networks and their applications
    in [*Chapter 8*](B21087_08.xhtml#_idTextAnchor097), where we analyze the spread
    of disease over time as a social network evolves.
  prefs: []
  type: TYPE_NORMAL
- en: Before jumping into real-world problems and their solutions in Python, it’s
    important to understand the fundamentals of network science. Let’s dive into some
    of the terminology and conventions of graph theory and networks.
  prefs: []
  type: TYPE_NORMAL
- en: Formal definitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Real-world networks are usually formalized and studied with tools from graph
    theory. As we’ve mentioned, graph theory defines relationships between objects
    in the form of vertices and the edges that connect related vertices. Let’s formalize
    this a bit and explore the foundations of network science found in graph theory.
    A graph is defined as a set of vertices and a set of lines, or edges, that connect
    pairs of vertices (Berge, 2001). Thus, a graph represents the structure of a network
    well. Returning to our hackathon social network, we represent our colleagues as
    vertices and connect them with edges if they collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Graphs can represent different types of relationships. A self-relationship
    of a vertex can be shown with a loop connecting the vertex to itself. For instance,
    when writing emails, someone might copy themselves on the email or send an email
    to themselves as a reminder. Another type of relationship is directionality. For
    instance, reposting content is a unidirectional interaction (usually), but friending
    someone is a bidirectional interaction where both parties mutually connect. Unidirectional
    relationships are represented in a graph with directed edges, usually denoted
    with an arrow on visualizations of the graph. Bidirectional relationships have
    undirected edges, denoted as lines without arrows. *Figure 1**.4* shows a graph
    with loops, directed edges, and undirected edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – A graph with loops, directed edges, and undirected edges](img/B21087_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – A graph with loops, directed edges, and undirected edges
  prefs: []
  type: TYPE_NORMAL
- en: 'In scientific literature, the terms network and graph are used interchangeably,
    as are terms for edges and vertices. *Table 1.1* shows a few of the common terms
    encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Network Science** | **Graph Theory** |'
  prefs: []
  type: TYPE_TB
- en: '| Network | Graph |'
  prefs: []
  type: TYPE_TB
- en: '| Node | Vertex |'
  prefs: []
  type: TYPE_TB
- en: '| Link | Edge |'
  prefs: []
  type: TYPE_TB
- en: '| Collection | Set |'
  prefs: []
  type: TYPE_TB
- en: '| Relationship | Function |'
  prefs: []
  type: TYPE_TB
- en: '| Directed graph | Digraph |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – A terminology comparison between network science and graph theory
  prefs: []
  type: TYPE_NORMAL
- en: In practice, these distinctions are rarely made, so these two terminologies
    are often synonyms of each other. In this book, we’ll stick with *edges* and *vertices*
    as our graph components and networks as our preferred term for the collection
    of vertices and edges created from real-world data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many types of graphs exist within graph theory that are realized in real-world
    data. Let’s briefly define some types of graphs that exist:'
  prefs: []
  type: TYPE_NORMAL
- en: A directed graph contains one or more edges with a direction (to or from another
    vertex, called arcs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An undirected graph only has edges, which do not have an origin or destination
    vertex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*“A graph is simple if it has no multiple lines (typically used to represent
    multiple relationships that exist or denote the strength of a relationship).”*
    A simple undirected graph contains no loops, but a simple directed graph can contain
    loops. Let’s visualize what these graphs look like in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – (a) A directed graph, (b) simple graph, and (c) simple directed
    graph bottom](img/B21087_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – (a) A directed graph, (b) simple graph, and (c) simple directed
    graph bottom
  prefs: []
  type: TYPE_NORMAL
- en: We can define vertices and their connecting edges or arcs based on data to create
    a network for visualization or analysis in Python. In the next section, we’ll
    introduce some packages in Python that will be used throughout the book to create
    and study networks in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating networks in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we know a little bit about networks, let’s explore how they are created
    with two Python packages commonly used in network science: `igraph` and `NetworkX`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'igraph is a network science software available in C, R, and Python. igraph
    provides many network science tools, including network creation options, many
    network analytics algorithms, and network visualization plots. Let’s explore igraph
    network creation and visualization using our hackathon network:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s install **igraph**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll then import **igraph** and its **Graph** module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we’ll use the **Graph** module to create a graph with three vertices
    with undirected edges connecting each vertex with the remaining vertices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can use the **plot** function to visualize our hackathon network. igraph
    offers many customization options, including vertex color, vertex size, edge color,
    edge size, labeling of vertices, and the size of the plot (among others). For
    this plot, we’ll bound the size of the image and create vertices large enough
    to label with the first initials of our hackathon network members:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should give you a plot that looks like *Figure 1**.6*, showing *Machiko*,
    *Greta*, and *Ayanda’s* hackathon network:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.6 – A plot of the hackathon network in igraph](img/B21087_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – A plot of the hackathon network in igraph
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s repeat our network creation in NetworkX. NetworkX contains much of
    the functionality of igraph but provides easier integration with other network
    science tools and platforms, as well as simple ways to explore differential equations
    on networks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first install **NetworkX**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s import **NetworkX**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'NetworkX works a bit differently than igraph in the construction of a network.
    We first define an empty graph, fill in the vertices, and then define what edges
    exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll need to add attributes (our network member initials), import **matplotlib**,
    and then plot our graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should show a plot similar in structure but a bit different in style to
    the one we constructed in igraph:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.7 – A NetworkX plot of our hackathon network](img/B21087_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – A NetworkX plot of our hackathon network
  prefs: []
  type: TYPE_NORMAL
- en: We’ll be using both igraph and NetworkX in the coming chapters to show examples
    in both packages. For some problems, igraph will have better functionality; for
    others, NetworkX is preferable. In practice, you’ll encounter both as you implement
    network science on real-world problems. In the next sections, we’ll overview different
    network types and problems, laying the foundation for our future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Random graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As network science began to tackle more and more real-world problems, understanding
    processes of network growth became an avenue of research:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Was edge-building* *purely random?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Were there limits to the number of edges that any vertex might cultivate given
    the number* *of vertices?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Did vertices with many edges tend to encourage edges among unconnected vertices
    that shared an edge with a particular* *well-connected vertex?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Did vertices and edges separate into well-connected groups that didn’t connect
    well with* *other groups?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few growth process models gave rise to common types of growth patterns that
    are useful in network science research. Some of these, such as **Erdös-Renyi networks**,
    serve as comparisons for organized development in real-world networks. Erdös-Renyi
    networks are random networks, where edges between vertices are created probabilistically
    between any pair of vertices. For instance, to create a network with many edges,
    we might set the probability of vertex pair connections to 70%. To create a network
    with few edges, we might set the probability of vertex pair connections to 10%.
    *Figure 1**.8 (a)* shows an Erdös-Renyi network with edge connection probability
    of 70%; *Figure 1**.8 (b)* shows an Erdös-Renyi network with edge connection probability
    of 10%:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Erdös-Renyi networks with edge probabilities of (a) 70% and
    (b) 10%](img/B21087_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Erdös-Renyi networks with edge probabilities of (a) 70% and (b)
    10%
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, preferential attachment, where some vertices attract connections
    to other vertices, is a more realistic model of how edges are added between vertices.
    One of the best-known examples of preferential attachment is the **Barabasi-Albert
    model**, where networks form more connections around certain vertices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real-world example of preferential attachment, let’s consider a frontend
    engineer searching social media for backend engineers who are potential collaborators.
    Thus, the frontend engineer’s connections would not be random. They will be cultivated
    based on the engineer’s specific needs and the results of a search for backend
    engineers. **Scale-free networks** are models of this preference for attachment
    that often happens in real-world network formation processes. *Figure 1**.9* shows
    the frontend engineer’s social network after adding the needed connections, who
    may not know each other before connecting with the frontend engineer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – A scale-free network of engineering connections cultivated by
    the frontend engineer’s search of social media](img/B21087_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – A scale-free network of engineering connections cultivated by the
    frontend engineer’s search of social media
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the major criticisms of scale-free models of network formation is the
    lack of hubs, or regions with high connectivity between a set of vertices and
    relatively few connections with other sets of vertices. **Watts-Strogatz models**
    account for this tendency to form denser regions of connections. As an example,
    gene networks often form clusters of related genes that influence each other functionally;
    some gene clusters also influence other gene clusters, forming occasional connections
    between gene sets with high connectivity, as shown in *Figure 1**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – A network of related genes](img/B21087_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – A network of related genes
  prefs: []
  type: TYPE_NORMAL
- en: Recent research has shown that none of these random network models capture all
    the nuances that come with real networks. Many real networks have aspects of preferential
    attachment and aspects of dense clustering, as well as some random connections
    that would not be expected given what is known about the network. Friends of friends
    often meet. Individuals find others who share their interests by searching social
    networks or connecting to a friend’s other social groups. Some friendships randomly
    start when individuals are stuck in an elevator or on a ferry.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored how to create networks in Python, let’s turn back
    to some real-world examples of networks, including directed and undirected networks
    and networks that change structure over time.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of real-world social networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Real-world networks are often more complicated than the examples we’ve considered.
    Let’s consider some nuances in social media networks. In the simplest forms, a
    social network contains mutual connections between friends at a single point in
    time. However, some friends may interact more often on the social media platform
    than others; they may comment on posts, reshare content, and message each other
    frequently. Weighted networks assign numerical values to edges in a network according
    to some measurement of relationship strength or frequency of interactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s return to our hackathon network and weight our edges based on the average
    number of conversations per day of the hackathon between different team members.
    Perhaps *Machiko* is coordinating the business use case of the technology and
    does not interact much with *Ayanda*, the backend engineer, but needs to make
    sure the front end is intuitive (*Greta’s* team position). However, we’d expect
    *Ayanda* and *Greta* to work together more frequently, as they are integrating
    the backend and front end of the product. Perhaps we have a weighted network as
    shown in *Figure 1**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – A weighted hackathon network of conversations between team
    members](img/B21087_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – A weighted hackathon network of conversations between team members
  prefs: []
  type: TYPE_NORMAL
- en: In addition to weighting, relationships can be undirected or directed. So far,
    we’ve considered undirected networks, where relationships are mutual. Friendships,
    Zoom calls, shared classes, team membership, and many other real-world networks
    involve mutual relationships. However, messages are one-way interactions, between
    a sender and receiver. Reposts of social media content are one-way relationships,
    as well. Gene regulation, population migration, airline flights, and goods transportation
    also involve one-way interactions. Directed graphs allow us to capture directional
    information in our graph, and like undirected graphs, directed graphs can be weighted
    or unweighted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider a football game where the players pass a ball to each other
    over a 5-minute period. Perhaps one forward dribbles for a while and then passes
    the ball to the other forward, who quickly passes it to the open center striker.
    *Figure 1**.12* shows this weighted network of football field interactions among
    the teammates:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.12 – A network of \uFEFFfootball teammates passing to each other\
    \ over a 5-minute period](img/B21087_01_12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – A network of football teammates passing to each other over a 5-minute
    period
  prefs: []
  type: TYPE_NORMAL
- en: 'Networks are rarely static. Consider a group of friends graduating from university.
    Some will stay in touch over the next several years; some will lose contact. The
    strength of lasting friendships may change, as well. Those who stay in the same
    area where they went to university might strengthen their friendships as they
    enter the workforce. Those who move away may connect with others in their new
    location and start losing touch with friends in other areas. Let’s consider four
    close friends graduating from university in Cape Town to pursue different careers
    in different cities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – A friendship network of university graduates moving to different
    cities and pursuing different careers](img/B21087_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – A friendship network of university graduates moving to different
    cities and pursuing different careers
  prefs: []
  type: TYPE_NORMAL
- en: A decade later, some of these university friends are no longer in contact with
    each other, yielding a much different friendship network, shown in *Figure 1**.14:*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – The university friendship network a decade after graduation](img/B21087_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – The university friendship network a decade after graduation
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1**.14* shows that one friend (in the upper-right corner) has lost
    touch with all but one close university friend. One friend (lower-left corner)
    has maintained all her close university friendships. This change may seem rather
    trivial, as all friends have maintained at least one friend from the original
    group. However, in terms of information exchange across the network, the original
    friendship network was more amenable to information exchange from the friend in
    the upper-right corner to the others in the network. She could communicate directly
    with each friend.'
  prefs: []
  type: TYPE_NORMAL
- en: However, after a decade of drifting friendships, information exchange from the
    friend at the top right must go through the friend at the bottom left to reach
    the rest of the network. The time taken for important news (perhaps regarding
    a reunion or wedding) to reach the full network will be longer in the network
    in *Figure 1**.14* than in *Figure 1**.13*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ve introduced a few types of social networks. We’ve seen
    how relationships can be mutual or one-sided. We’ve seen how networks can change
    over time and how this may impact information exchange on networks. We’ll revisit
    social relationships in *Chapters 2, 3, 8*, and *9*. Now, let’s explore some other
    types of problems that can be formulated as networks.
  prefs: []
  type: TYPE_NORMAL
- en: Other type of networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we’ve mainly considered social networks. However, objects and their
    relationships can be defined on a much broader range of problems. Network science
    provides useful tools for understanding spatial data. For instance, consider a
    region with several small island towns connected by a series of bridges that allow
    goods and people to travel from region to region. During an epidemic, it might
    be useful to know which routes to close to minimize the spread of disease from
    one town to another. However, cutting off routes entirely would leave some areas
    without necessary supplies, such as food or medicine. Tools we’ll consider in
    later chapters can help regions plan the optimal routing of goods and minimize
    the potential spread of an epidemic.
  prefs: []
  type: TYPE_NORMAL
- en: We might also consider a map of stores, each with differing sale volumes of
    citrus fruit. Stores could be connected into a network based on shared management
    across stores, based on similarity of citrus fruit sales patterns, or based on
    geography (within the same county or country, for instance). How we define our
    network will impact what insight we can gain about regional citrus fruit sales
    and factors that might be impacting those sales patterns. We’ll explore this use
    case more in [*Chapter 4*](B21087_04.xhtml#_idTextAnchor053).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can wrangle time series data into networks and use network science
    tools to gain insight into patterns over time. For example, consider daily financial
    data across the tech, agriculture, and manufacturing sectors. We can consider
    weekly correlations among the sectors and build a weighted network with edges
    defined by correlation values and track network properties over the weeks that
    exist in our data to pinpoint changes that might signal a coming market crash.
    Correlation networks among stocks and financial sectors are well studied, and
    we’ll return to this example in [*Chapter 6*](B21087_06.xhtml#_idTextAnchor078).
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we have spatiotemporal data, where our data has spatial and time
    series components. Consider the price of grain across several urban markets across
    a country. Pricing will vary across markets, with influences of local supply and
    demand, regulations in certain regions of the country, and local salaries likely
    influencing the price of grain at a specific market. Proximity to other markets
    and influences over time (such as the conflict in Ukraine limiting grain supplies
    globally) also influence pricing. By creating a series of networks based on geography,
    time period, and some of these other aforementioned factors, we can understand
    which markets tend to behave similarly with respect to grain price, which areas
    might be most vulnerable to price increases, and which areas might be most vulnerable
    to supply chain issues. This could allow an aid organization to pivot food aid
    more quickly to areas where people are unlikely to be able to afford future grain
    prices or may lose access to grain altogether. We’ll tackle this problem in [*Chapter
    7*](B21087_07.xhtml#_idTextAnchor088).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen some use cases in spatial and temporal data, let’s turn
    to some more advanced problems in data science that can be formulated in terms
    of network science, including neural network architectures and language ontologies.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced use cases of network science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tools of network science extend beyond social networks, spatial data, and
    temporal data. Deep learning models are ubiquitous in data science today, solving
    problems in computer vision, natural language processing, time series forecasting,
    and generative artificial intelligence. **Large language models** (**LLMs**) and
    text-to-image generators rely on a type of deep learning architecture called transformer
    models, feed-forward neural networks that find patterns in data by embedding input
    data, tuning attention weights, and decoding the data with respect to the outcome.
    These models can have billions or even trillions of parameters to tune across
    many connected layers. When combined with pre-trained **contrastive language-image
    pre-training** (**CLIP**) models, transformer models such as DALL-E can even generate
    realistic images based on text input. For instance, inputting *hyperdetailed photorealistic
    king cobra, background desert market* into NightCafe’s DALL-E algorithm produced
    the image in *Figure 1**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – NightCafe’s DALL-E output image for the prompt “hyperdetailed
    photorealistic king cobra, background desert market.” ](img/B21087_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – NightCafe’s DALL-E output image for the prompt “hyperdetailed
    photorealistic king cobra, background desert market.”
  prefs: []
  type: TYPE_NORMAL
- en: However, given the size of deep learning models such as transformer models (or
    the convolutional neural networks often used to classify images), understanding
    connections across layers is critical to building good initial models that won’t
    require as much tuning and is helpful in tuning architectures based on network
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, networks themselves may be modeled through a special class of
    deep learning algorithms, called graph neural networks, that take networks as
    input data and build regression or classification models based on some output.
    For instance, say we want to understand which networks are most vulnerable to
    the spread of fake news; in the 2014 and 2018 Ebola outbreaks, fake news regarding
    public health measures and virus sources hindered public health efforts and resulted
    in a greater loss of life, as well as some violent attacks on treatment centers.
    We may have a few hundred networks that we have studied and classified as high,
    medium, or low risk based on network properties and simulations of fake news spread
    on these networks, but we want to assess several hundred thousand scraped real-world
    networks collected from social media sites around the world. We can train a graph
    neural network on our classified data and apply it to the much wider collection
    of scraped networks to classify their fake news risks.
  prefs: []
  type: TYPE_NORMAL
- en: Besides neural networks, many other advanced uses of networks exist, including
    in the mapping of ontologies. Ontologies organize relationships between objects,
    such as semantic relationships between words, regulatory relationships between
    genes, or symptoms shared between diseases. Often, multiple ontologies exist,
    such as the organization of consumer goods across store chains. Mapping one ontology
    to another provides a way to combine information from each ontology into a single
    entity. Given that each ontology exists as its own network being mapped onto other
    ontologies, the problem can be simplified to network mapping. We’ll explore this
    in more depth later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored different types of networks, introduced two network
    packages in Python, examined different theoretical models of network growth and
    their limitations, and considered several examples of networks not based on social
    relationships. We also touched on some more advanced topics in network science
    today, including network applications to deep learning, network classification,
    and ontology mapping. In the next chapter, we’ll dive deeper into igraph and NetworkX
    with practical network examples.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aganze, E., Kusinza, R., & Bukavu, D. R. (2020). The current state of fake news
    in the DR Congo and social impacts. *Global Journal of Computer Science* *and
    Technology*.
  prefs: []
  type: TYPE_NORMAL
- en: Aric A. Hagberg, Daniel A. Schult and Pieter J. Swart “Exploring network structure,
    dynamics, and function using NetworkX”. In Proceedings of the 7th Python in Science
    Conference (SciPy2008), Gäel Varoquaux, Travis Vaught, and Jarrod Millman (Eds),
    (Pasadena, CA USA), pp. 11–15, Aug 20
  prefs: []
  type: TYPE_NORMAL
- en: Berge, C. (2001, January 1). The Theory of Graphs. Courier Corporation.
  prefs: []
  type: TYPE_NORMAL
- en: BRANDES, U., ROBINS, G., McCRANIE, A., & WASSERMAN, S. (2013, April). What is
    network science? *Network Science,* *1*(1), 1–15.
  prefs: []
  type: TYPE_NORMAL
- en: Csárdi G., Nepusz T. The igraph software package for complex network research.
    *InterJournal Complex Systems*, 1695, 2006.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ducruet, C., & Beauguitte, L. (2014). Spatial science and network science:
    review and outcomes of a complex relationship. Networks and Spatial Economics,
    14(3-4), 297-316.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Estrada E. *The Structure of Complex Networks*: Theory and Applications. OUP
    Oxford, 2012.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fung, I. C. H., Fu, K. W., Chan, C. H., Chan, B. S. B., Cheung, C. N., Abraham,
    T., & Tse, Z. T. H. (2016). Social media’s initial reaction to information and
    misinformation on Ebola, August 2014: facts and rumors. Public health reports,
    131(3), 461-473.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hagberg, A., & Conway, D. (2020). Networkx: Network analysis with Python. [https://github.com/networkx](https://github.com/networkx).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kim, M., & Sayama, H. (2017). Predicting stock market movements using network
    science: An information theoretic approach. Applied network science, 2(1), 1-14.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kiss, I. Z., Miller, J. C., & Simon, P. L. (2017). Mathematics of epidemics
    on networks. Cham: Springer, 598, 31.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mehler, A., Lücking, A., Banisch, S., Blanchard, P., & Job, B. (Eds.). (2016).
    Towards a theoretical framework for analyzing complex linguistic networks (pp.
    3-26). Berlin: Springer.'
  prefs: []
  type: TYPE_NORMAL
- en: Mocanu, D. C., Mocanu, E., Stone, P., Nguyen, P. H., Gibescu, M., & Liotta,
    A. (2018). Scalable training of artificial neural networks with adaptive sparse
    connectivity inspired by network science. Nature communications, 9(1), 2383.
  prefs: []
  type: TYPE_NORMAL
- en: Valente, T. W. (2005). Network models and methods for studying the diffusion
    of innovations. Models and methods in social network analysis, 28, 98-116.
  prefs: []
  type: TYPE_NORMAL
