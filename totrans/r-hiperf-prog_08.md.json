["```py\nserialmax <- function(data) {\n    max = -Inf\n    for (i in data) {\n        if (i > max)\n            max = i\n    }\n    return max\n}\n```", "```py\n# Run this in parallel across 8 CPU cores\npart.results <- run.in.parallel(serialmax(data.part))\n# Compute global max\nglobal.max <- serialmax(part.results)\n```", "```py\n# Run 4 tasks in parallel across 4 cores\nfor (task in tasks)\n    run.in.parallel(task)\n# Collect the results of the 4 tasks\nresults <- collect.parallel.output()\n# Continue processing after all 4 tasks are complete\n```", "```py\nlibrary(tm)\ndata(\"acq\")\ntextdata <- rep(sapply(content(acq), content), 1e5)\n```", "```py\npattern <- \"\\\\d+(,\\\\d+)? mln dlrs\"\nsystem.time(res1 <- grepl(pattern, textdata))\n##   user  system elapsed \n## 65.601   0.114  65.721\n```", "```py\nlibrary(parallel)\ndetectCores()\n## [1] 4\ncl <- makeCluster(detectCores())\npart <- clusterSplit(cl, seq_along(textdata))\ntext.partitioned <- lapply(part, function(p) textdata[p])\nsystem.time(res2 <- unlist(\n    parSapply(cl, text.partitioned, grepl, pattern = pattern)\n)) \n##  user  system elapsed \n## 3.708   8.007  50.806 \nstopCluster(cl)\n```", "```py\ndoSomethingInParallel <- function(...) {\n    cl <- makeCluster(...)\n    on.exit(stopCluster(cl))\n    # do something\n}\n```", "```py\nsystem.time(res3 <- unlist(\n    mclapply(text.partitioned, grepl, pattern = pattern,\n             mc.cores = detectCores())\n))\n##    user  system elapsed \n## 127.012   0.350  33.264\n```", "```py\nRNGkind(\"L'Ecuyer-CMRG\")\nnsamples <- 5e8\nlambda <- 10\nsystem.time(random1 <- rpois(nsamples, lambda))\n##   user  system elapsed\n## 51.905   0.636  52.544\n```", "```py\ncores <- detectCores()\ncl <- makeCluster(ncores)\nsamples.per.process <-\n    diff(round(seq(0, nsamples, length.out = ncores+1)))\n```", "```py\nclusterSetRNGStream(cl)\nsystem.time(random2 <- unlist(\n    parLapply(cl, samples.per.process, rpois,\n               lambda = lambda)\n))\n##  user  system elapsed \n## 5.006   3.000  27.436\nstopCluster(cl)\n```", "```py\nsystem.time(random3 <- unlist(\n    mclapply(samples.per.process, rpois,\n             lambda = lambda,\n             mc.set.seed = TRUE, mc.cores = ncores)\n)) \n##   user  system elapsed \n## 76.283   7.272  25.052\n```", "```py\nRNGkind(\"L'Ecuyer-CMRG\")\nnsamples <- 5e7\npois.lambda <- 10\nsystem.time(random1 <- list(pois = rpois(nsamples,\n                                          pois.lambda),\n                            unif = runif(nsamples),\n                            norm = rnorm(nsamples),\n                            exp = rexp(nsamples)))\n##   user  system elapsed \n## 14.180   0.384  14.570\n```", "```py\ncores <- detectCores()\ncl <- makeCluster(cores)\ncalls <- list(pois = list(\"rpois\", list(n = nsamples,\n                                        lambda = pois.lambda)),\n              unif = list(\"runif\", list(n = nsamples)),\n              norm = list(\"rnorm\", list(n = nsamples)),\n              exp = list(\"rexp\", list(n = nsamples)))\nclusterSetRNGStream(cl)\nsystem.time(\n    random2 <- parLapply(cl, calls,\n                         function(call) {\n                             do.call(call[[1]], call[[2]])\n                         })\n)\n##  user  system elapsed \n## 2.185   1.629  10.403\nstopCluster(cl)\n```", "```py\nmc.reset.stream()\nsystem.time({\n    jobs <- list()\n    jobs[[1]] <- mcparallel(rpois(nsamples, pois.lambda),\n                            \"pois\", mc.set.seed = TRUE)\n    jobs[[2]] <- mcparallel(runif(nsamples),\n                            \"unif\", mc.set.seed = TRUE)\n    jobs[[3]] <- mcparallel(rnorm(nsamples),\n                            \"norm\", mc.set.seed = TRUE)\n    jobs[[4]] <- mcparallel(rexp(nsamples),\n                            \"exp\", mc.set.seed = TRUE)\n    random3 <- mccollect(jobs)\n})\n##   user  system elapsed \n## 14.535   3.569   7.972\n```", "```py\n$ ssh-host-config -y -c \"tty ntsec\"\n$ chmod 400 /etc/ssh_*_key\n$ cygrunsrv -S sshd\n```", "```py\n# Run all these commands on the master node\n# Generate an RSA key pair without password\n$ ssh-keygen -t rsa\n$ chmod 400 .ssh/id_rsa\n# Copy public key to worker node (run for every worker)\n$ ssh-copy-id -i .ssh/id_rsa.pub worker_username@worker_address\n# Test connection (run for every worker)\n$ ssh worker_username@worker_address\n# You should be able to log in without entering a password\n```", "```py\nworkers <- c(\"192.168.213.225\", \"192.168.213.226\")\nnworkers <- length(workers)\ncl <- makeCluster(workers, master = \"192.168.213.138\")\n```", "```py\nclusterSetRNGStream(cl)\nsamples.per.process <- c(2.5e8, 2.5e8)\nlambda <- 10\nrandom <- unlist(\n    parLapply(cl, samples.per.process,\n              function(n, lambda) rpois(n, lambda),\n              lambda)\n)\nstopCluster(cl)\n```", "```py\nlibrary(bigmemory)\na <- big.matrix(3, 3)\na[, ]\n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\nb <- a\nb[, ]\n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n```", "```py\nb[, ] <- diag(3)\nb[, ]\n##      [,1] [,2] [,3]\n## [1,]    1    0    0\n## [2,]    0    1    0\n## [3,]    0    0    1\na[, ]\n##      [,1] [,2] [,3]\n## [1,]    1    0    0\n## [2,]    0    1    0\n## [3,]    0    0    1\n```", "```py\na\n## An object of class \"big.matrix\"\n## Slot \"address\":\n## <pointer: 0x7fab5e2b8750>\nb\n## An object of class \"big.matrix\"\n## Slot \"address\":\n## <pointer: 0x7fab5e2b8750>\n```", "```py\nr <- 5e7\nm <- matrix(rnorm(r * 2), r, 2)\nbm <- as.big.matrix(m)\n```", "```py\ncl <- makeCluster(detectCores())\npart <- clusterSplit(cl, seq_len(r))\nsystem.time(res <- unlist(\n    parLapply(cl, part,\n              function(part, data) {\n                  abs(data[part, 1] - data[part, 2])\n              },\n              m)\n))\n##  user  system elapsed \n## 5.199   1.856  10.590 \nstopCluster(cl)\n```", "```py\ncl <- makeCluster(detectCores())\nsystem.time(res2 <- unlist(\n    parLapply(cl, part,\n              function(part, data.desc) {\n                  library(bigmemory)\n                  data <- attach.big.matrix(data.desc)\n                  abs(data[part, 1] - data[part, 2])\n              },\n              describe(bm))\n))\n##  user  system elapsed \n## 1.278   0.692   2.956 \nstopCluster(cl)\n```"]