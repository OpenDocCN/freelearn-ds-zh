["```py\n#import packages\nimport networkx as nx\n#create the Stores network\nSTRS = nx.Graph()\nSTRS.add_nodes_from([\"store1\",\"store2\",\"store3\",\"store4\",\"store5\"])\n#define weighted ebunches, which represent lists of edges\ne1 = [(\"store1\",\"store2\",2),(\"store1\",\"store3\",2.4),\n    (\"store1\",\"store4\",3),(\"store1\",\"store5\",3)]\ne2 = [(\"store2\",\"store3\",3.7),(\"store2\",\"store4\",1.4),\n    (\"store2\",\"store5\",4.3)]\ne3 = [(\"store3\",\"store4\",4.9),(\"store3\",\"store5\",0.9),\n    (\"store4\",\"store5\",5.4)]\n#add edges\nSTRS.add_weighted_edges_from(e1)\nSTRS.add_weighted_edges_from(e2)\nSTRS.add_weighted_edges_from(e3)\n#plot\nweight_labels=nx.get_edge_attributes(STRS,'weight')\npos = nx.spring_layout(STRS)\nnx.draw(STRS,pos,with_labels=True,)\nnx.draw_networkx_edge_labels(STRS, pos,edge_labels=weight_labels)\n```", "```py\n#create adjacency matrix\nadj1 = nx.adjacency_matrix(STRS)\nadj1.todense()\n#find all shortest paths starting at Store 1\nlength1, path1 = nx.single_source_dijkstra(STRS,\"store1\")\nlength1\n```", "```py\n#create a different Stores network\nSTRS2 = nx.Graph()\nSTRS2.add_nodes_from([\"store1\",\"store2\",\"store3\",\"store4\",\"store5\"])\n#define weighted ebunch\ne12 = [(\"store1\",\"store2\",2),(\"store1\",\"store4\",3)]\ne22 = [(\"store2\",\"store3\",3.7),(\"store2\",\"store4\",1.4)]\ne32 = [(\"store3\",\"store4\",4.9),(\"store4\",\"store5\",5.4)]\n#add edges\nSTRS2.add_weighted_edges_from(e12)\nSTRS2.add_weighted_edges_from(e22)\nSTRS2.add_weighted_edges_from(e32)\n#plot\nweight_labels=nx.get_edge_attributes(STRS2,'weight')\npos = nx.spring_layout(STRS2)\nnx.draw(STRS2,pos,with_labels=True,)\nnx.draw_networkx_edge_labels(STRS2,pos,edge_labels=weight_labels)\n```", "```py\n#find shortest path from Store 2 to Store 5\nnx.astar_path(STRS2,\"store2\",\"store5\", weight='weight')\n```", "```py\n#define traveling salesman algorithm and apply it to the stores's #networks\ntsp = nx.approximation.traveling_salesman_problem\ntsp(STRS)\n```", "```py\n#apply TSP algorithm to the second stores's networks\ntsp(STRS2)\n```", "```py\n#build the city intersection network\nG1=nx.DiGraph()\nG1.add_edge(\"a\", \"b\", capacity=2.0)\nG1.add_edge(\"a\", \"d\", capacity=0.5)\nG1.add_edge(\"b\", \"d\", capacity=3.0)\nG1.add_edge(\"c\", \"d\", capacity=2.5)\nG1.add_edge(\"c\", \"e\", capacity=1.0)\nG1.add_edge(\"e\", \"f\", capacity=4.0)\nG1.add_edge(\"f\", \"g\", capacity=1.0)\n#plot network\ncapacity_labels=nx.get_edge_attributes(G1,'capacity')\npos = nx.spring_layout(G1)\nnx.draw(G1,pos,with_labels=True,)\nnx.draw_networkx_edge_labels(G1,pos,edge_labels=capacity_labels)\n```", "```py\n#find cut-points\npartition = nx.minimum_cut(G1, \"a\", \"g\")\nprint(partition)\n```"]