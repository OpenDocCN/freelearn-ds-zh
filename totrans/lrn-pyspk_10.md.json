["```py\n1\\. # Create a local SparkContext and Streaming Contexts\n2\\. from pyspark import SparkContext\n3\\. from pyspark.streaming import StreamingContext\n4\\. \n5\\. # Create sc with two working threads \n6\\. sc = SparkContext(\"local[2]\", \"NetworkWordCount\")\n7\\. \n8\\. # Create local StreamingContextwith batch interval of 1 second\n9\\. ssc = StreamingContext(sc, 1)\n10\\. \n11\\. # Create DStream that connects to localhost:9999\n12\\. lines = ssc.socketTextStream(\"localhost\", 9999)\n```", "```py\n1\\. # Split lines into words\n2\\. words = lines.flatMap(lambda line: line.split(\" \"))\n3\\. \n4\\. # Count each word in each batch\n5\\. pairs = words.map(lambda word: (word, 1))\n6\\. wordCounts = pairs.reduceByKey(lambda x, y: x + y)\n7\\. \n8\\. # Print the first ten elements of each RDD in this DStream \n9\\. wordCounts.pprint()\n```", "```py\n# Start the computation\nssc.start()             \n\n# Wait for the computation to terminate\nssc.awaitTermination()  \n```", "```py\nnc –lk 9999\n\n```", "```py\n// Populate `meetup_stream` table\nsqlContext.sql(\"insert into meetup_stream select * from meetup_stream_json\")\n```", "```py\n 1\\. # Create a local SparkContext and Streaming Contexts\n 2\\. from pyspark import SparkContext\n 3\\. from pyspark.streaming import StreamingContext\n 4\\. \n 5\\. # Create sc with two working threads \n 6\\. sc = SparkContext(\"local[2]\", \"StatefulNetworkWordCount\")\n 7\\. \n 8\\. # Create local StreamingContext with batch interval of 1 sec\n 9\\. ssc = StreamingContext(sc, 1)\n10\\. \n11\\. # Create checkpoint for local StreamingContext\n12\\. ssc.checkpoint(\"checkpoint\")\n13\\. \n14\\. # Define updateFunc: sum of the (key, value) pairs\n15\\. def updateFunc(new_values, last_sum):\n16\\.   return sum(new_values) + (last_sum or 0)\n17\\. \n18\\. # Create DStream that connects to localhost:9999\n19\\. lines = ssc.socketTextStream(\"localhost\", 9999)\n```", "```py\n 1\\. # Calculate running counts\n 2\\. running_counts = lines.flatMap(lambda line: line.split(\" \"))\\\n 3\\.           .map(lambda word: (word, 1))\\\n 4\\.           .updateStateByKey(updateFunc)\n 5\\. \n 6\\. # Print the first ten elements of each RDD generated in this \n 7\\. # stateful DStream to the console\n 8\\. running_counts.pprint()\n 9\\. \n10\\. # Start the computation\n11\\. ssc.start()             \n12\\. \n13\\. # Wait for the computation to terminate\n14\\. ssc.awaitTermination()  \n```", "```py\nlogs = spark.read.json('s3://logs')\n\nlogs.groupBy(logs.UserId).agg(sum(logs.Duration))\n.write.jdbc('jdbc:mysql//...')\n```", "```py\nlogs = spark.readStream.json('s3://logs').load()\n\nsq = logs.groupBy(logs.UserId).agg(sum(logs.Duration))\n.writeStream.format('json').start()\n```", "```py\n# Will return true if the `sq` stream is active\nsq.isActive\n\n# Will terminate the `sq` stream\nsq.stop()\n```", "```py\n# Import the necessary classes and create a local SparkSession\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import explode\nfrom pyspark.sql.functions import split\n\nspark = SparkSession \\\n   .builder \\\n   .appName(\"StructuredNetworkWordCount\") \\\n   .getOrCreate()\n```", "```py\n 1\\. # Create DataFrame representing the stream of input lines\n 2\\. # from connection to localhost:9999\n 3\\.  lines = spark\\\n 4\\.    .readStream\\\n 5\\.    .format('socket')\\\n 6\\.    .option('host', 'localhost')\\\n 7\\.   .option('port', 9999)\\\n 8\\.   .load()\n 9.\n10\\. # Split the lines into words\n11\\. words = lines.select(\n12\\.   explode(\n13\\.          split(lines.value, ' ')\n14\\.   ).alias('word')\n15\\.   )\n16.\n17\\. # Generate running word count\n18\\. wordCounts = words.groupBy('word').count()\n```", "```py\n 1\\. # Start running the query that prints the \n 2\\. # running counts to the console\n 3\\. query = wordCounts\\\n 4\\.     .writeStream\\\n 5\\.     .outputMode('complete')\\\n 6\\.     .format('console')\\\n 7\\.     .start()\n 8\\. \n 9\\. # Await Spark Streaming termination\n10\\. query.awaitTermination()\n```", "```py\n$ nc –lk 9999\ngreen green green blue blue blue blue blue\ngohawks\ngreen green\n\n```"]