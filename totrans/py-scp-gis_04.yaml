- en: Data Types, Storage, and Conversion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型、存储和转换
- en: This chapter will focus on the many different data types that exist within GIS
    and will provide an overview of the major data types in GIS and how to use the
    previously covered Python code libraries to read and write geospatial data. Apart
    from reading and writing different geospatial data types, you'll learn how to
    use these libraries to perform file conversion between different data types and
    how to download data from geospatial databases and remote sources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍GIS中存在的多种不同数据类型，并提供GIS中主要数据类型的概述以及如何使用之前提到的Python代码库来读取和写入地理空间数据。除了读取和写入不同的地理空间数据类型外，你还将学习如何使用这些库在不同数据类型之间进行文件转换，以及如何从地理空间数据库和远程源下载数据。
- en: 'The following vector and raster data types will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下矢量和栅格数据类型：
- en: Shapefiles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shapefiles
- en: GeoJSON
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoJSON
- en: KML
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KML
- en: GeoPackages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoPackages
- en: GeoTIFF
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoTIFF
- en: 'The following file actions will also be covered, using Python geospatial data
    libraries covered in [Chapter 2](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml),
    *Introduction to Geospatial Code Libraries*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文件操作也将被涵盖，使用在[第2章](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml)，*地理空间代码库简介*中介绍的Python地理空间数据库：
- en: Opening existing files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开现有文件
- en: Reading and displaying different attributes (spatial and non-spatial)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和显示不同的属性（空间和非空间）
- en: Creating and writing new geospatial data in different formats
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以不同格式创建和写入新的地理空间数据
- en: Converting one file format to another
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一种文件格式转换为另一种格式
- en: Downloading geospatial data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载地理空间数据
- en: We'll provide an overview of the most used GIS data types before we head over
    to write some code for reading and writing them. Next, we will use some examples
    to explain how to use various Python libraries for reading, writing, downloading,
    and converting geospatial data. We'll start with an explanation of what geospatial
    data represents and the difference between vector and raster data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写读取和写入这些数据类型的代码之前，我们将概述最常用的GIS数据类型。接下来，我们将通过一些示例来解释如何使用各种Python库来读取、写入、下载和转换地理空间数据。我们将从解释地理空间数据代表什么以及矢量和栅格数据之间的区别开始。
- en: Raster and vector data
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栅格和矢量数据
- en: Before diving into some of the most used GIS data types, a little background
    is required about what type of information geographical data represents. Earlier
    in this book, the distinction between raster and vector data was mentioned. All
    GIS data is comprised of one or the other, but a combination of both vectors and
    rasters is also possible. When deciding on which data type to use, consider the
    scale and type of geographical information represented by the data, which in turn
    determines what Python data libraries to use. As is illustrated in the following
    examples, the choice for a certain Python library can also depend on personal
    preference, and there may be various ways to do the same task.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨一些最常用的GIS数据类型之前，需要先了解地理数据所代表的信息类型。本书早期提到了栅格数据和矢量数据之间的区别。所有GIS数据都是由其中一种或另一种组成，但也可以是两者的组合。在决定使用哪种数据类型时，要考虑数据所代表的地理信息的比例和类型，这反过来又决定了应该使用哪些Python数据库。正如以下示例所示，对某个Python库的选择也可能取决于个人偏好，并且可能存在多种完成同一任务的方法。
- en: In the geospatial world, raster data comes in the form of aerial imagery or
    satellite data, where each pixel has an associated value that corresponds to a
    different color or shade. Raster data is used for large continuous areas, such
    as differentiating between different temperature zones across various parts of
    the world. Other popular applications are elevation, vegetation, and precipitation
    mapping.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在地理空间领域，栅格数据以航空影像或卫星数据的形式出现，其中每个像素都有一个与之相关的值，该值对应于不同的颜色或阴影。栅格数据用于表示大范围的连续区域，例如区分世界各地的不同温度带。其他流行的应用包括高程、植被和降水图。
- en: Rasters can also be used as input for creating vector maps, where, for example,
    objects such as roads and buildings can be distinguished (an example being the
    standard map view when navigating to Google Maps). Vector data itself consists
    of points, lines, and polygons to distinguish features in a geographical space,
    such as administrative boundaries. These are built up from individual points that
    have spatial relationships with each other that are described in an associated
    data model. Vectors maintain the same sharpness the more you zoom-in, while raster
    data will look more coarse-grained.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格数据也可以用作创建矢量地图的输入，例如，可以区分道路和建筑物等对象（例如，在导航到谷歌地图时的标准地图视图）。矢量数据本身由点、线和多边形组成，用于在地理空间中区分特征，如行政边界。这些特征是由具有空间关系的单个点组成的，这些关系在相关数据模型中进行了描述。矢量数据在放大时保持相同的清晰度，而栅格数据则会显得更加粗糙。
- en: Now that you know what geographical data represents, let's discuss the most
    used geospatial data formats for vector and raster data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经知道了地理数据代表什么，那么让我们来讨论一下最常用的地理空间数据格式，用于矢量数据和栅格数据。
- en: Shapefiles
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shapefiles
- en: The shapefile is probably the most often-used data format for geographical vector
    data today. This file format was developed by Esri, based on a mostly open specification
    for data interoperability among Esri and other GIS software products. Although
    many other file formats have been introduced in an attempt to replace the shapefile,
    it remains a widely-used file format. These days, many third-party programming
    modules in Python exist for reading and writing shapefiles.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Shapefile可能是今天最常用于地理矢量数据的数据格式。这种文件格式是由Esri开发的，基于Esri和其他GIS软件产品之间数据互操作性的开放规范。尽管已经引入了许多其他文件格式试图取代shapefile，但它仍然是一种广泛使用的文件格式。如今，许多第三方Python编程模块可用于读取和写入shapefile。
- en: 'Although the name *shapefile* might suggest that there''s only one file associated
    with it, a single shapefile requires in fact at least three files that need to
    be stored in the same directory in order to work correctly:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名称*shapefile*可能暗示与之相关联的只有一个文件，但实际上一个shapefile需要至少三个文件，这些文件需要存储在同一个目录中才能正确工作：
- en: A `.shp` file with the feature geometry itself
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含特征几何本身的`.shp`文件
- en: A `.shx` file featuring a positional index of the feature geometry to allow
    seeking forwards and backwards quickly
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含特征几何位置索引的`.shx`文件，以便快速向前和向后搜索
- en: A `.dbf` file with columnar attributes for each shape
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含每个形状的列属性`.dbf`文件
- en: Shapefiles have their own structure. The main file (`.shp`) contains the geometry
    data, consisting of a single fixed-length header, followed by one or more variable-length
    records.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Shapefiles有其自身的结构。主文件（`.shp`）包含几何数据，由一个单一定长头部组成，后面跟着一个或多个变长记录。
- en: GeoJSON
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoJSON
- en: GeoJSON is a JSON-based file format that has become popular in a short time.
    GeoJSON uses the **JavaScript Object Notation** (**JSON**) open data standard
    for storing geographical features as key-value pairs. The files are easily readable,
    can be created using a simple text editor, and are now common in spatial databases,
    open data platforms, as well as commercial GIS software. You would use GeoJSON
    for various types of geospatial vector data, such as points, lines, and polygons. GeoJSON
    uses either `.json` or `.geojson` as the filename extension. This means that a
    filename doesn't have to be `.geojson` in order to be a GeoJSON file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON是一种基于JSON的文件格式，在短时间内变得流行。GeoJSON使用**JavaScript对象表示法**（**JSON**）开放数据标准将地理特征存储为键值对。这些文件易于阅读，可以使用简单的文本编辑器创建，现在在空间数据库、开放数据平台以及商业GIS软件中都很常见。你可以使用GeoJSON处理各种类型的地理空间矢量数据，如点、线和多边形。GeoJSON使用`.json`或`.geojson`作为文件扩展名。这意味着文件名不一定是`.geojson`才能是GeoJSON文件。
- en: KML
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KML
- en: '**Keyhole Markup Language** (**KML**), referring to the company that developed
    the format. It can be used to store geographic data which can be visualized using
    a host of applications such as Google Earth, Esri ArcGIS Explorer, Adobe Photoshop,
    and AutoCAD. KML is based on XML, using a tag-based structure with nested elements
    and attributes. KML files are often distributed in KMZ files, which are zipped
    KML files with a `.kmz` extension. For its reference system, KML uses longitude,
    latitude, and altitude coordinates, defined by the **World Geodetic System of
    1984** (**WGS84**).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键孔标记语言** (**KML**)，指的是开发该格式的公司。它可以用来存储地理数据，这些数据可以通过众多应用程序进行可视化，例如谷歌地球、Esri
    ArcGIS Explorer、Adobe Photoshop 和 AutoCAD。KML 基于XML，使用基于标签的结构，具有嵌套元素和属性。KML 文件通常以
    KMZ 文件的形式分发，这些是带有 `.kmz` 扩展名的压缩 KML 文件。对于其参考系统，KML 使用经度、纬度和海拔坐标，这些坐标由 **1984年世界大地测量系统**
    (**WGS84**) 定义。'
- en: GeoPackage
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoPackage
- en: An **Open Geospatial Consortium** (**OGC**) **GeoPackage** (**GPKG**) is an
    open data format for geographic information systems that support both vector and
    raster data. The format was defined by OGC and published in 2014, after which
    it has seen wide support from various government, commercial, and open source
    organizations. The GeoPackage data format was developed with the mobile user in
    mind—it was designed to be as efficient as possible, with all information contained
    in a single file. This makes it easy to rapidly share them on cloud storage and
    USB drives, and it is used in mobile applications that are disconnected. A GeoPackage
    file is built up as an extended SQLite 3 database file (`*.gpkg`) that combines
    data and metadata tables.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放地理空间联盟** (**OGC**) 的 **GeoPackage** (**GPKG**) 是一种开放数据格式，用于支持矢量和栅格数据的地理信息系统。该格式由
    OGC 定义并于 2014 年发布，此后得到了来自各个政府、商业和开源组织的广泛支持。GeoPackage 数据格式是在考虑到移动用户的情况下开发的——它被设计得尽可能高效，所有信息都包含在一个文件中。这使得它们在云存储和
    USB 驱动器上快速共享变得容易，并且它被用于断开连接的移动应用程序中。GeoPackage 文件由一个扩展的 SQLite 3 数据库文件 (`*.gpkg`)
    组成，该文件结合了数据和元数据表。'
- en: Raster data formats
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 栅格数据格式
- en: 'These are some of the most popular raster data formats used for geographical
    information today:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是目前用于地理信息的一些最流行的栅格数据格式：
- en: '**ECW** (**Enhanced Compressed Wavelet**): ECW is a compressed image format
    typically for aerial and satellite imagery. This GIS file type is known for its
    high compression ratios while still maintaining quality contrast in images.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ECW** (**增强压缩小波**)：ECW 是一种压缩图像格式，通常用于航空和卫星影像。这种 GIS 文件类型以其高压缩比而闻名，同时仍能保持图像中的质量对比度。'
- en: '**Esri grid**: A file format for adding attribute data to a raster file. Esri
    grid files are available as integer and floating point grids.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Esri 网格**：一种用于向栅格文件添加属性数据的文件格式。Esri 网格文件可用作整数和浮点网格。'
- en: '**GeoTIFF** (**Geographic Tagged Image File Format**): An industry image standard
    file for GIS and satellite remote sensing applications. Almost all GIS and image
    processing software packages have GeoTIFF compatibility.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GeoTIFF** (**地理标记图像文件格式**)：一种用于 GIS 和卫星遥感应用的行业图像标准文件。几乎所有 GIS 和图像处理软件包都支持
    GeoTIFF。'
- en: '**JPEG 2000**: An open source compressed raster format that allows both lossy
    and lossless compression. JPEG 2000 typically have a JP2 file extension. JPEG
    2000 can achieve a compression ratio of 20:1, which is similar to the MrSID format.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JPEG 2000**：一种开源的压缩栅格格式，允许有损和无损压缩。JPEG 2000 通常具有 JP2 文件扩展名。JPEG 2000 可以实现
    20:1 的压缩比，这与 MrSID 格式相似。'
- en: '**MrSID** (**Multi-Resolution Seamless Image Database**): A compressed wavelet
    format that allows for both lossy and lossless compression. LizardTech''s proprietary
    MrSID format is commonly used for orthoimages in need of compression. MrSID images
    have an extension of SID and are accompanied with a world file with the file extension
    SDW.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MrSID** (**多分辨率无缝图像数据库**)：一种允许有损和无损压缩的压缩小波格式。LizardTech 的专有 MrSID 格式常用于需要压缩的正射影像。MrSID
    图像具有 SID 扩展名，并附带一个文件扩展名为 SDW 的世界文件。'
- en: Reading and writing vector data with GeoPandas
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GeoPandas 读取和写入矢量数据
- en: It's time for some hands-on exercises. We'll start with reading and writing
    some vector data in the form of GeoJSON using the GeoPandas library, which is
    the application used to demonstrate all examples is Jupyter Notebook, which comes
    preinstalled with Anaconda3\. If you've installed all geospatial Python libraries
    from [Chapter 2](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml), *Introduction to
    Geospatial Code Libraries,* you're good to go. If not, do this first. You might
    decide to create virtual environments for different combinations of Python libraries
    because of different dependencies and versioning. Open up a new Jupyter Notebook
    and a browser window and head over to [http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/)
    and download the Natural Earth quick start kit at a convenient location. We'll
    examine some of that data for the rest of this chapter, along with some other
    geographical data files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行一些动手练习了。我们将使用GeoPandas库读取和写入一些以GeoJSON形式存在的矢量数据，GeoPandas库是演示所有示例的应用程序，它预安装在Anaconda3中。如果您已从[第2章](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml)，“地理空间代码库简介”中安装了所有地理空间Python库，那么您就可以开始了。如果没有，请先这样做。您可能会决定为不同的Python库组合创建虚拟环境，因为不同的依赖关系和版本。打开一个新的Jupyter
    Notebook和一个浏览器窗口，转到[http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/)并下载Natural
    Earth快速入门套件到方便的位置。我们将在本章的其余部分检查一些数据，以及一些其他地理数据文件。
- en: 'First, type the following code in a Jupyter Notebook with access to the GeoPandas
    library and run the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在具有GeoPandas库访问权限的Jupyter Notebook中输入以下代码并运行：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output looks as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![](img/b3c8a0ac-845c-4349-a7af-7395f808a1aa.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3c8a0ac-845c-4349-a7af-7395f808a1aa.png)'
- en: The code does the following—the first line imports the GeoPandas library and
    shortens its name, saving space whenever we reference it later. The second line
    reads the data on disk, in this case, a shapefile with land boundary lines. It
    is assigned to a dataframe variable, which refers to a `pandas` dataframe, namely
    a 2D object comparable to an Excel table with rows and columns. The data structures
    of GeoPandas mimic are subclasses from those of `pandas` and are named differently—the
    `pandas` dataframe in GeoPandas is called a **GeoDataFrame**. The third line prints
    the attribute table, which is limited to the first five rows. After running the
    code, a separate cell's output will list the attribute data from the referenced
    shapefile. You'll notice that the FID column has no name and that a `geometry`
    column has been added as the last column.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行以下操作——第一行导入GeoPandas库并缩短其名称，在以后引用它时节省空间。第二行从磁盘读取数据，在本例中是一个包含陆地边界线的shapefile。它被分配给一个dataframe变量，该变量指的是一个`pandas`
    dataframe，即一个类似于Excel表的二维对象，具有行和列。GeoPandas的数据结构是`pandas`子类，名称不同——GeoPandas中的`pandas`
    dataframe被称为**GeoDataFrame**。第三行打印属性表，仅限于前五行。运行代码后，单独单元格的输出将列出引用shapefile的属性数据。您会注意到FID列没有名称，并且已添加了一个作为最后一列的`geometry`列。
- en: 'This is not the only command to read data, as you can also read data from a
    PostGIS database, by using the `read_postgis()` command. Next, we''ll plot the
    data inside our Jupyter Notebook:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是读取数据的唯一命令，您还可以使用`read_postgis()`命令从PostGIS数据库中读取数据。接下来，我们将在Jupyter Notebook内部绘制数据：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the previous code is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的输出如下：
- en: '![](img/6b2011c9-8607-462d-8870-bce357d8173a.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b2011c9-8607-462d-8870-bce357d8173a.jpg)'
- en: The first line is a so-called magic command, only to be used inside a Jupyter
    Notebook, and tells it to use the plotting capabilities of the `matplotlib` library
    inside a cell of the Jupyter Notebook app. This way, you can plot map data directly
    as opposed to working with an IDE. The second line states that we want the dataframe
    plotted, in `black` (the default color is blue). The output resembles a world
    map with only land borders, which are visible as black lines.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是一个所谓的魔法命令，仅用于Jupyter Notebook内部，告诉它使用Jupyter Notebook应用程序单元格内的`matplotlib`库的绘图功能。这样，您可以直接绘制地图数据，而不是在IDE中工作。第二行表示我们想要绘制的dataframe，颜色为`black`（默认颜色是蓝色）。输出类似于只有陆地边界的世界地图，这些边界以黑色线条可见。
- en: 'Next, we''ll investigate some of the attributes of GeoPandas data objects:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究GeoPandas数据对象的一些属性：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tells us that the first five entries in our attribute table are made of
    line strings and multiline strings. For printing all entries, use the same line
    of code, without `.head()`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，我们的属性表中的前五个条目由线字符串和多行字符串组成。要打印所有条目，请使用相同的行代码，但不使用 `.head()`：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `crs` attribute refers to the **coordinate reference system** (**CRS**)
    of the dataframe, in this case, `epsg:4326`, a code defined by the **International
    Association of Oil and Gas Producers** (**IOGP**). Go to [www.spatialreference.org](http://www.spatialreference.org) for
    more information on EPSG. The CRS offers essential information about your spatial
    dataset. EPSG 4326 is also known as WGS 1984, a standard coordinate system for
    the Earth.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`crs` 属性指的是数据框的 **坐标参考系统**（**CRS**），在本例中为 `epsg:4326`，这是一个由 **国际油气生产商协会**（**IOGP**）定义的代码。有关
    EPSG 的更多信息，请访问 [www.spatialreference.org](http://www.spatialreference.org)。CRS
    提供了关于您的空间数据集的基本信息。EPSG 4326 也称为 WGS 1984，是地球的标准坐标系。'
- en: 'You can change the CRS as follows to a Mercator projection, showing a more
    vertically stretched image:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 CRS 更改为以下内容，以 Mercator 投影，显示更垂直拉伸的图像：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the previous code is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的输出如下：
- en: '![](img/1773eda6-d8f6-4636-9e34-fd21623b077d.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1773eda6-d8f6-4636-9e34-fd21623b077d.jpg)'
- en: 'Suppose we want to convert the shapefile data of our dataframe into `json`.
    GeoPandas does this in one line of code, and the output is listed in a new cell:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要将数据框的 shapefile 数据转换为 `json`。GeoPandas 可以用一行代码完成此操作，输出结果列在新单元格中：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This previous command converted the data to a new format but did not write
    it to a new file. Writing your dataframe to a new `geojson` file can be done like
    this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此前命令将数据转换为新的格式，但没有将其写入新文件。将数据框写入新的 `geojson` 文件可以这样做：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't be confused by JSON file extensions—a JSON file with spatial data is a
    GeoJSON file, even though there's also a separate `.geojson` file extension.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被 JSON 文件扩展名所迷惑——包含空间数据的 JSON 文件是 GeoJSON 文件，尽管也存在单独的 `.geojson` 文件扩展名。
- en: 'For file conversion, GeoPandas relies on the Fiona library. To list all available
    `drivers` (a software component that lets the operating system and a device communicate
    with each other), use the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件转换，GeoPandas 依赖于 Fiona 库。要列出所有可用的 `drivers`（一个软件组件，允许操作系统和设备相互通信），请使用以下命令：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Reading and writing vector data with OGR
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OGR 读取和写入矢量数据
- en: Now, let's turn to OGR for reading and writing a vector so that you can compare
    both OGR and GeoPandas functionality for performing the same kind of tasks. To
    follow the instructions that are mentioned as we proceed, you can download the
    MTBS wildfire data from: [https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/MTBS_Fire/data/composite_data/fod_pt_shapefile/mtbs_fod_pts_data.zip](https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/MTBS_Fire/data/composite_data/fod_pt_shapefile/mtbs_fod_pts_data.zip) and
    store them on your PC. The file that will be analyzed here is the `mtbs_fod_pts_20170501`
    shapefile's attribute table, which has 20,340 rows and 30 columns.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向 OGR 来读取和写入矢量数据，这样您就可以比较 OGR 和 GeoPandas 在执行相同类型任务时的功能。要遵循我们继续提到的说明，您可以下载
    MTBS 火灾数据，从： [https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/MTBS_Fire/data/composite_data/fod_pt_shapefile/mtbs_fod_pts_data.zip](https://edcintl.cr.usgs.gov/downloads/sciweb1/shared/MTBS_Fire/data/composite_data/fod_pt_shapefile/mtbs_fod_pts_data.zip) 并将它们存储在您的电脑上。这里将要分析的是
    `mtbs_fod_pts_20170501` shapefile 的属性表，该表有 20,340 行和 30 列。
- en: 'We''ll start with the `ogrinfo` command which works in a terminal window and
    can be used for describing vector data. These are not Python commands, but we''ll
    include them here as you can easily run them in a Jupyter Notebook with a simple
    prefix (adding an exclamation mark before the used command). Take, for instance,
    the following command, which is similar to the Fiona driver command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `ogrinfo` 命令开始，该命令在终端窗口中运行，可以用于描述矢量数据。这些不是 Python 命令，但我们将在这里包括它们，因为您可以在
    Jupyter Notebook 中通过简单的前缀（在使用的命令前添加感叹号）轻松运行它们。以以下命令为例，该命令类似于 Fiona 驱动器命令：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command lists the available formats that `ogrinfo` can access, by using
    the general option `--formats`. The results also tells us whether GDAL/OGR can
    only read/open the format, or whether it can also write new layers in that format.
    As you can see from the output, there are many supported file formats with OGR.
    Looking at Esri shapefiles in the list, the addition of (rw+v) means OGR supports
    read, write, update (meaning create), and virtual formats for Esri shapefiles:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出`ogrinfo`可以访问的可用格式，通过使用通用选项`--formats`。结果还告诉我们GDAL/OGR是否只能读取/打开该格式，或者它是否还可以在该格式中写入新层。如输出所示，OGR支持许多支持的文件格式。查看列表中的Esri
    shapefiles，添加的(rw+v)表示OGR支持Esri shapefiles的读取、写入、更新（意味着创建）和虚拟格式：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous command lists the summary information about all the layers in
    a data source, which in this case is all the shapefiles in the folder called `"pts"`.
    The addition of `-so` stands for summary option. You can see that this command
    lists similar information as we saw with GeoPandas, such as the CRS. The same
    line of code, but without the `-so` addition will print all features and attributes,
    and takes some time to process. This is comparable to creating a GeoDataFrame
    in GeoPandas, but all attribute info is printed per feature on a new line instead
    of preserving the tabular form:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令列出了数据源中所有层的摘要信息，在这种情况下是名为“pts”的文件夹中的所有shapefile。添加的`-so`代表摘要选项。您可以看到，此命令列出了与GeoPandas中看到的信息类似的信息，例如CRS。相同的代码行，但如果没有添加`-so`，将打印所有要素和属性，并且需要一些时间来处理。这与在GeoPandas中创建GeoDataFrame类似，但所有属性信息都是按特征在新行上打印，而不是保留表格形式：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we want to convert this shapefile into a GeoJSON file, we will use the following
    command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要将此shapefile转换为GeoJSON文件，我们将使用以下命令：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-f` prefix stands for the format, followed by the output driver name, the
    output file name, and the location and the input file. You might receive error
    warnings doing file conversions, for example when a bad feature is encountered,
    but an output file will be written anyway.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f`前缀代表格式，后面跟着输出驱动程序名称、输出文件名、位置和输入文件。在文件转换过程中可能会收到错误警告，例如遇到不良特征时，但无论如何都会写入输出文件。'
- en: 'OGR has also read and write capabilities for KML files. Download this KML sample
    file ([https://developers.google.com/kml/documentation/KML_Samples.kml](https://developers.google.com/kml/documentation/KML_Samples.kml))
    with the following code and run the following code to read its contents:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: OGR也支持读取和写入KML文件。使用以下代码下载此KML样本文件（[https://developers.google.com/kml/documentation/KML_Samples.kml](https://developers.google.com/kml/documentation/KML_Samples.kml)）并运行以下代码来读取其内容：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For a more Pythonic approach for OGR, let's see some examples of how you can
    read and write data with OGR.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OGR的Pythonic方法，让我们看看一些示例，了解如何使用OGR读取和写入数据。
- en: 'The following code lists all 30 field names of our wildfire shapefile using
    OGR:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用OGR列出了我们野火shapefile的30个字段名称：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see from the preceding code, this is a little more involved than
    using GeoPandas, where you can directly load all attribute data into one GeoDataFrame
    using little code. With OGR, you need to iterate over the individual features
    which need to be referenced from a layer definition and appended to an empty list.
    But first, you need to use the `GetLayer` function— this is because OGR has its
    own data model that does not adapt itself automatically to the file format it
    reads.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，这比使用GeoPandas要复杂一些，在GeoPandas中，您可以使用少量代码直接将所有属性数据加载到一个GeoDataFrame中。使用OGR，您需要遍历单个要素，这些要素需要从层定义中引用并附加到空列表中。但首先，您需要使用`GetLayer`函数——这是因为OGR有自己的数据模型，它不会自动适应它所读取的文件格式。
- en: 'Now that we have all the field names, we can iterate over the individual features,
    for instance, for the state field:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所有字段名称，我们可以遍历单个要素，例如，对于州字段：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Judging from the output of the last cell, there are apparently many features,
    but exactly how many? The total feature count can be printed as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从最后一个单元的输出来看，显然有很多要素，但确切有多少呢？可以使用以下方式打印总要素计数：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As we''ve seen previously, the CRS is essential information about your spatial
    data. You can print this information in two ways—from the layer and the geometry
    of the layer. In the following code, two spatial reference variables will print
    the same output, as it should be (only the output of the first option is listed
    here to save space):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，CRS 是关于您空间数据的重要信息。您可以通过两种方式打印此信息——从层和层的几何形状。在以下代码中，两个空间参考变量将打印相同的输出，正如它应该的那样（这里只列出了第一个选项的输出以节省空间）：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can check if we''re dealing with points and print the *x* and *y* values
    of all individual features as well as their centroids as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查我们是否在处理点，并按照以下方式打印所有单个特征的 *x* 和 *y* 值以及它们的质心：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Reading and writing raster data with Rasterio
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Rasterio 读取和写入栅格数据
- en: 'After covering how to read and write various vector data formats in Python,
    we''ll now do the same for raster data. We''ll start with the Rasterio library
    and have a look at how we can read and write raster data. Open up a new Jupyter
    Notebook where you have access to the Rasterio library and type the following
    code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了如何在 Python 中读取和写入各种矢量数据格式之后，我们现在将做同样的事情来处理栅格数据。我们将从 Rasterio 库开始，看看我们如何读取和写入栅格数据。打开一个新的
    Jupyter Notebook，其中包含对 Rasterio 库的访问权限，并输入以下代码：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This imports the `rasterio` library and opens a GeoTIFF file. We can now perform
    some simple data description commands, such as printing the number of image bands.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这导入 `rasterio` 库并打开一个 GeoTIFF 文件。我们现在可以执行一些简单的数据描述命令，例如打印图像带的数量。
- en: Raster images contain either a single or multiple bands. All bands are contained
    in a single file, with each band covering the same area. When the image is read
    by your computer, these bands are overlayed on top of each other so that you'll
    see one single image. Each band contains a 2D array with rows and columns of data.
    Each data cell of each array contains a numeric value that corresponds to a color
    value (or elevation value, which is also possible). If a raster image has multiple
    bands, each band corresponds to a segment of the electromagnetic spectrum that
    was collected by a sensor. Users can display one or multiple bands, combining
    different bands together to make their own color composites. [Chapter 9](399c3041-569f-400a-83f0-e13020a177cf.xhtml), *ArcGIS
    API for Python and ArcGIS Online* features some examples of these color composites
    when discussing displaying raster data using the ArcGIS API for Python.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格图像包含单个或多个带。所有带都包含在单个文件中，每个带覆盖相同的区域。当您的计算机读取图像时，这些带将叠加在一起，因此您将看到一个单独的图像。每个带包含一个二维数组，具有行和列的数据。每个数组的每个数据单元包含一个与颜色值（或可能的高度值）相对应的数值。如果一个栅格图像有多个带，则每个带对应于传感器收集的电磁谱的一部分。用户可以显示一个或多个带，将不同的带组合在一起以创建自己的彩色合成。[第
    9 章](399c3041-569f-400a-83f0-e13020a177cf.xhtml)，*ArcGIS API for Python 和 ArcGIS
    Online* 在讨论使用 ArcGIS API for Python 显示栅格数据时提供了一些这些彩色合成的示例。
- en: 'In this case, there are three different bands:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有三个不同的带：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A `dataset` band is an array of values representing the partial distribution
    of a single variable in a 2D space. The number of columns is returned by the `width`
    attribute:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `dataset` 带是一个表示二维空间中单个变量部分分布的值数组。列数由 `width` 属性返回：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The number of rows is returned by the `height` attribute:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 行数由 `height` 属性返回：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following code returns the spatial bounding box in meters, so you can calculate
    the area it covers:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码返回以米为单位的空间边界框，因此您可以计算它覆盖的区域：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The CRS of the dataset can be printed as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的 CRS 可以按照以下方式打印：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can access and return a NumPy ndarray with the raster array for a raster
    band as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问并返回一个 NumPy ndarray，该 ndarray 表示栅格带的栅格数组，如下所示：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you want to visualize the image, use the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想可视化图像，请使用以下代码：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output map will look like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出地图将看起来像这样：
- en: '![](img/3a5807c2-e0b5-4e62-9d69-be725f7b2100.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a5807c2-e0b5-4e62-9d69-be725f7b2100.png)'
- en: Reading and writing raster data using GDAL
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GDAL 读取和写入栅格数据
- en: 'Here are some commands for reading and writing raster data with GDAL:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些使用 GDAL 读取和写入栅格数据的命令：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This command lists all supported file formats in GDAL. For a summary including
    the CRS, use `!gdalinfo` without any prefixes:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出了 GDAL 支持的所有文件格式。要包括 CRS 的摘要，请使用 `!gdalinfo` 而不带任何前缀：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can convert a GeoTIFF to a JPEG file as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 GeoTIFF 转换为 JPEG 文件，如下所示：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output, `NE1_50M_SR_W.jpg`, will look like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输出，`NE1_50M_SR_W.jpg`，将看起来像这样：
- en: '![](img/5f0da7fa-655a-491f-a105-2227c3c45978.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f0da7fa-655a-491f-a105-2227c3c45978.jpg)'
- en: 'Now, let''s open a GeoPackage using GDAL. GeoPackages can be either vector
    or raster-based, but in this case, we''ll open a raster-based one, which becomes
    clear from the following output. For reading and writing GeoPackages, we need
    GDAL version 2.2.2, so the following example won''t work for lower version numbers.
    Download the following GeoPackage file ([http://www.geopackage.org/data/gdal_sample_v1.2_no_extensions.gpkg](http://www.geopackage.org/data/gdal_sample_v1.2_no_extensions.gpkg))
    and reference it as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用GDAL打开一个GeoPackage。GeoPackages可以是基于矢量或栅格的，但在这个例子中，我们将打开一个基于栅格的GeoPackage，这从下面的输出中可以清楚地看出。对于读取和写入GeoPackages，我们需要GDAL版本2.2.2，因此以下示例对于较低版本号将不会工作。下载以下GeoPackage文件（[http://www.geopackage.org/data/gdal_sample_v1.2_no_extensions.gpkg](http://www.geopackage.org/data/gdal_sample_v1.2_no_extensions.gpkg)）并按照以下方式引用：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The GDAL **Web Map Service** (**WMS**) driver allows for interacting with online
    web mapping services. You can use it to download various geospatial datasets,
    subsets, or information about available datasets directly from a command prompt
    (or in this case, a Jupyter Notebook) without using a browser to navigate to a
    website and download data manually. There are many different options, so refer
    to the online documentation for more information. The following example requires
    GDAL version 2.0 or higher. The following command uses the URL of a **REpresentational
    State Transfer** (**REST**) definition for an ArcGIS MapServer and returns the
    information about the requested image service, such as the amount of bands, band
    names, CRS, corner coordinates, and more:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL的**Web地图服务**（**WMS**）驱动程序允许与在线网络地图服务进行交互。你可以使用它从命令提示符（或在这种情况下，Jupyter Notebook）直接下载各种地理空间数据集、子集或有关可用数据集的信息，而无需使用浏览器导航到网站并手动下载数据。有许多不同的选项，因此请参考在线文档以获取更多信息。以下示例需要GDAL版本2.0或更高版本。以下命令使用ArcGIS
    MapServer的**表示性状态转移**（**REST**）定义的URL，并返回有关请求的图像服务的信息，例如波段数量、波段名称、CRS、角坐标等：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that you added some information to the URL of the image service, in this
    case, `f=json&pretty=true`. This means the requested file format by the user is
    `pretty json`, which is a nicely formatted `json` that is easier to read for humans.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你向图像服务的URL中添加了一些信息，在这种情况下，`f=json&pretty=true`。这意味着用户请求的文件格式是`pretty json`，这是一种格式良好的`json`，更容易供人类阅读。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter provided an overview of major data types in GIS. After explaining
    the difference between vector and raster data, the following vector and raster
    data types were covered—Esri shapefiles, GeoJSON, KML, GeoPackages, and GeoTIFF
    files. Next, we explained how to use some of the earlier described Python code
    libraries to read and write geospatial data. The following geospatial Python libraries
    for reading and writing raster and vector data were covered in particular—GeoPandas,
    OGR, GDAL, and Rasterio. Apart from reading and writing different geospatial data
    types, you learned how to use these libraries to perform file conversion between
    different data types and how to upload and download data from geospatial databases
    and remote sources.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了GIS中的主要数据类型。在解释了矢量和栅格数据之间的区别之后，接下来介绍了以下矢量栅格数据类型——Esri形状文件、GeoJSON、KML、GeoPackages和GeoTIFF文件。然后，我们解释了如何使用一些之前描述的Python代码库来读取和写入地理空间数据。特别介绍了以下用于读取和写入栅格和矢量数据的地理空间Python库——GeoPandas、OGR、GDAL和Rasterio。除了读取和写入不同的地理空间数据类型之外，你还学习了如何使用这些库在不同数据类型之间进行文件转换，以及如何从地理空间数据库和远程源上传和下载数据。
- en: The next chapter will cover geospatial analysis and processing. Python libraries
    covered are OGR, Shapely and GeoPandas. The reader will learn how to use these
    libraries and write scripts for geospatial analysis, using real-world examples.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍地理空间分析和处理。涉及到的Python库有OGR、Shapely和GeoPandas。读者将学习如何使用这些库编写用于地理空间分析的脚本，并使用实际案例进行学习。
