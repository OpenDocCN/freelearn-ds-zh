- en: Chapter 4. Finding and Fixing Broken Data Links
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：查找和修复损坏的数据链接
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Finding broken data sources in your map document and layer files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的地图文档和图层文件中查找损坏的数据源
- en: Fixing broken data sources with MapDocument.findAndReplaceWorkspacePaths()
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MapDocument.findAndReplaceWorkspacePaths()修复损坏的数据源
- en: Fixing broken data sources with MapDocument.replaceWorkspaces()
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MapDocument.replaceWorkspaces()修复损坏的数据源
- en: Fixing individual Layer and Table objects with replaceDataSource()
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用replaceDataSource()修复单个图层和表格对象
- en: Finding all broken data sources in all map documents in a folder
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文件夹中的所有地图文档中查找所有损坏的数据源
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It is not uncommon for your GIS data sources to move, migrate to a new data
    format or be deleted. The result can be broken data sources in many map document
    or layer files. These broken data sources can't be used until they have been fixed,
    which can be an overwhelming process if the same changes need to be made across
    numerous map documents. You can automate the process of finding and fixing these
    data sources using `arcpy.mapping`, without ever having to open the affected map
    documents. Finding broken data sources is a simple process requiring the use of
    the `ListBrokenDataSources()` function, which returns a Python list of all broken
    data sources in a map document or layer file. Typically, this function is used
    as the first step in a script that iterates through the list and fixes the data
    sources. Fixing broken data sources can be performed on the individual data layer
    or across all the layers in a common workspace.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您的GIS数据源移动、迁移到新的数据格式或被删除的情况并不少见。结果可能导致许多地图文档或图层文件中的数据源损坏。这些损坏的数据源在修复之前无法使用，如果需要在多个地图文档中进行相同的更改，这可能是一个令人难以承受的过程。您可以使用`arcpy.mapping`自动化查找和修复这些数据源的过程，而无需打开受影响的地图文档。查找损坏的数据源是一个简单的过程，需要使用`ListBrokenDataSources()`函数，该函数返回一个包含地图文档或图层文件中所有损坏数据源的Python列表。通常，此函数用作脚本中的第一步，该脚本遍历列表并修复数据源。可以在单个数据层或公共工作空间中的所有图层上执行修复损坏数据源的操作。
- en: Finding broken data sources in your map document and layer files
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的地图文档和图层文件中查找损坏的数据源
- en: Broken data sources are a very common problem with map document files. You can
    use `arcpy.mapping` to identify data sources that have moved, been deleted, or
    changed format.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 损坏的数据源是地图文档文件中非常常见的问题。您可以使用`arcpy.mapping`来识别已移动、已删除或更改格式的数据源。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In ArcMap, a broken data connection is signified by a red exclamation point
    just before the layer name. This is illustrated in the following screenshot. The
    `ListBrokenDataSources()` function in `arcpy.mapping` returns a list of layer
    objects from a map document or layer file that have a broken data connection:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcMap中，损坏的数据连接由图层名称前的红色感叹号表示。以下截图展示了这一点。`arcpy.mapping`中的`ListBrokenDataSources()`函数返回来自地图文档或图层文件的具有损坏数据连接的图层对象列表：
- en: '![Getting ready](img/4445_04_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/4445_04_1.jpg)'
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Follow the steps below to learn how to find broken data sources in a map document
    file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤操作，了解如何在地图文档文件中查找损坏的数据源。
- en: Open `C:\ArcpyBook\Ch4\Crime_BrokenDataLinks.mxd` in ArcMap.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ArcMap中打开`C:\ArcpyBook\Ch4\Crime_BrokenDataLinks.mxd`。
- en: 'You will see that each of the data sources have been broken. In this case,
    the data has been moved to another folder, but you''d see the same indicator if
    the data had been deleted or migrated to a different format. For example, it is
    not uncommon to convert data from a personal geodatabase to a file geodatabase:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到每个数据源都已损坏。在这种情况下，数据已移动到另一个文件夹，但如果数据已被删除或迁移到不同的格式，您也会看到相同的指示器。例如，将数据从个人地理数据库转换为文件地理数据库的情况并不少见：
- en: '![How to do it…](img/4445_04_2.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/4445_04_2.jpg)'
- en: Close ArcMap.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭ArcMap。
- en: Open IDLE and create a new script window.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy.mapping`模块：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用`Crime_BrokenDataLinks.mxd`地图文档文件：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Get a list of the broken data sources:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取损坏数据源的列表：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Iterate the list and print out the layer names:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历列表并打印出图层名称：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The ouptput will be printed as follows:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将按以下方式打印：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your script as `FindFixBrokenData.py` in the `c:\ArcpyBook\Ch4` folder.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的脚本保存为`FindFixBrokenData.py`，保存在`c:\ArcpyBook\Ch4`文件夹中。
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `ListBrokenDataSources()` function returns a Python list of layers that
    have a broken data source. We then use a `for` loop to iterate this list and perform
    some sort of action for each layer. In this case, we printed out the layer names
    simply to illustrate the data returned by this function. In a later recipe, we'll
    build on this code by fixing these broken data sources.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to returning a list of broken data sources from a map document file,
    the `ListBrokenDataSources()` function can also find broken data sources in a
    layer file (`.lyr`). Simply pass in the path to the layer file to have the function
    examine the file for broken data sources. Keep in mind that these functions are
    not needed with `Map` or `Layer` packages, since the data is bundled with these
    files, unlike a layer file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.findAndReplaceWorkspacePaths()
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MapDocument.findAndReplaceWorkspacePaths()` method is used to perform a
    global find and replace of workspace paths for all the layers and tables in a
    map document. You can also replace the paths to multiple workspace types at once.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to cover some definitions before examining the methods used to fix datasets.
    You'll see these terms used frequently when discussing the methods used to fix
    broken data sources, so you'll need to understand what they mean in this context.
    A **workspace** is simply a container for data. This can be a folder (in the case
    of shapefiles), personal geodatabase, file geodatabase, or ArcSDE connection.
    A **workspace path** is the system path to the **workspace**. In the case of file
    geodatabases, this would include the name of the **geodatabase**. A dataset is
    simply a feature class or table within a workspace, and finally, a data source
    is the combination of the workspace and dataset. Don't confuse a dataset with
    a feature dataset. The former is just a generic term for data, while the latter
    is an object within a geodatabase that serves as a container for feature classes
    and other datasets.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: There are three `acpy.mapping` classes involved in fixing broken data sources.
    They are `MapDocument`, `Layer`, and `TableView`. Each class contains methods
    that can be used to fix data sources. In this recipe, we'll examine how you can
    use the `findAndReplaceWorkspacePaths()` method in the `MapDocument` class to
    perform a global find and replace operation on the layers and tables in a map
    document.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix layers and tables in a map document
    using `findAndReplaceWorkspacePaths()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch4\Crime_BrokenDataLinks.mxd` in ArcMap.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on any of the layers and select **Properties**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Source** tab and you will notice that the location for the layer
    refers to `C:\ArcpyBook\Ch4\Data\OldData\CityOfSanAntonio.gdb`. This is a file
    geodatabase but the location no longer exists; it has moved to the `C:\ArcpyBook\data`
    folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `MapDocument.findAndReplaceWorkspacePaths()` to fix the source path for
    each data source in the map document:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save the results to a new `.mxd` file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the script as `C:\ArcpyBook\Ch4\MapDocumentFindReplace.py`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap, open the `C:\ArcpyBook\Ch4\Crime_DataLinksFixed.mxd` file. You will
    notice that all the data sources get fixed, as shown in the following screenshot:![How
    to do it…](img/4445_04_3.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MapDocument.findAndReplaceWorkspacePaths()` method is used to perform a
    global find and replace of workspace paths for all layers and tables in a map
    document. You can replace the paths to multiple workspace types at once.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Layer` and `TableView` objects also have a `findAndReplaceWorkspacePaths()`
    method that performs the same type of operation. The difference is that this method,
    on the `Layer` and `TableView` objects, is used to fix an individual broken data
    source rather than a global find and replace of all broken data sources in a map
    document.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Fixing broken data sources with MapDocument.replaceWorkspaces()
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of normal GIS operations, it is a fairly common practice to
    migrate data from one file type to another. For example, many organizations migrate
    data from the older personal geodatabase formats to the new file geodatabase types
    or perhaps even enterprise ArcSDE geodatabases. You can automate the process of
    updating your datasets to a different format with `MapDocument.replaceWorkspaces()`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MapDocument.replaceWorkspaces()` is similar to `MapDocument.findAndReplaceWorkspacePaths()`,
    but it also allows you to switch from one workspace type to another. For example,
    you can switch from a file geodatabase to a personal geodatabase. However, it
    only works on one workspace at a time. In this recipe, we''ll use `MapDocument.replaceWorkspaces()`
    to switch our data source from a file geodatabase to a personal geodatabase.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix broken data sources using `MapDocument.replaceWorkspaces()`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch4\Crime_DataLinksFixed.mxd` in ArcMap.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that all the layers and tables are loaded from a file geodatabase called
    `CityOfSanAntonio.gdb`, as shown in the following screenshot:![How to do it…](img/4445_04_4.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Call `replaceWorkspaces()`, passing a reference to the old geodatabase type
    as well as the new geodatabase type:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save a copy of the map document file.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the script as `c:\ArcpyBook\Ch4\MapDocumentReplaceWorkspace.py`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap, open the `c:\ArcpyBook\Ch4\Crime_DataLinksUpdated.mxd` file. As shown
    in the following screenshot, all data sources now reference a personal geodatabase
    (note the `.mdb` extension):![How to do it…](img/4445_04_5.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MapDocument.replaceWorkspaces()` method accepts several parameters including
    old and new workspace paths along with the old and new workspace types. Paths
    to the workspaces are self-explanatory, but some discussion of the workspace types
    is helpful. The workspace types are passed into the method as string keywords.
    In this case, the old workspace type was a file geodatabase so its keyword is
    `FILEGDB_WORKSPACE`. The new workspace type is `ACCESS_WORKSPACE`, which indicates
    a personal geodatabase. Personal geodatabases are stored in Microsoft Access files.
    There are a number of different workspace types that can store GIS data. Make
    sure you provide the workspace type that is appropriate for your dataset. The
    following is a list of valid workspace types (many people still work with shapefiles,
    so in this case the workspace type would be `SHAPEFILE_WORKSPACE`):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`ACCESS_WORKSPACE`: A personal geodatabase or Access workspace'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARCINFO_WORKSPACE`: An ArcInfo coverage workspace'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAD_WORKSPACE`: A CAD file workspace'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXCEL_WORKSPACE`: An Excel file workspace'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILEGDB_WORKSPACE`: A file geodatabase workspace'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NONE`: Used to skip the parameter'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OLEDB_WORKSPACE`: An OLE database workspace'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PCCOVERAGE_WORKSPACE`: A PC ARC/INFO Coverage workspace'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RASTER_WORKSPACE`: A raster workspace'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SDE_WORKSPACE`: An SDE geodatabase workspace'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHAPEFILE_WORKSPACE`: A shapefile workspace'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TEXT_WORKSPACE`: A text file workspace'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIN_WORKSPACE`: A TIN workspace'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VPF_WORKSPACE`: A VPF workspace'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing individual Layer and Table objects with replaceDataSource()
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipes in this chapter have used various methods on the `MapDocument`
    object to fix broken data links. The `Layer` and `Table` objects also have methods
    that can be used to fix broken data links at the individual object level rather
    than working on all datasets in a map document file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the `Layer` and `TableView` classes have a `replaceDataSource()` method.
    This method can be used to change the workspace path, workspace type, and/or dataset
    name for a single layer or table. In this recipe, you'll write a script that changes
    the workspace path and workspace type for a single layer. The `replaceDataSource()`
    method is available to the `Layer` and `TableView` classes. In the case of a layer
    it can be in either a map document or layer file. For a table, it can refer to
    the map document only, since `Table` objects can't be contained inside a layer
    file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to fix individual `Layer` and `Table` objects
    in a map document using `replaceDataSource()`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch4\Crime_DataLinksLayer.mxd` in ArcMap. The **Crime** data
    frame contains a layer called **Burglary**, which is a feature class in the `CityOfSanAntonio`
    file geodatabase. You're going to replace this feature class with a shapefile
    layer containing the same data:![How to do it…](img/4445_04_6.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy.mapping` 模块：
- en: '[PRE13]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Reference the `Crime_BrokenDataLinks.mxd` map document file:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用 `Crime_BrokenDataLinks.mxd` 地图文档文件：
- en: '[PRE14]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Get a reference to the `Crime` data frame:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 `Crime` 数据框的引用：
- en: '[PRE15]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Find the `Burglary` layer and store it in a variable:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找 `Burglary` 层并将其存储在一个变量中：
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Call the `replaceDataSource()` method on the `Layer` object and pass in the
    path to the shapefile, a keyword indicating that this will be a shapefile workspace,
    and the name of the shapefile:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Layer` 对象上调用 `replaceDataSource()` 方法，并传入 shapefile 的路径、一个表示这将是一个 shapefile
    工作区的关键词以及 shapefile 的名称：
- en: '[PRE17]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the results to a new map document file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果保存到新的地图文档文件中。
- en: '[PRE18]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save the script as `c:\ArcpyBook\Ch4\LayerReplaceDataSource.py`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `c:\ArcpyBook\Ch4\LayerReplaceDataSource.py`。
- en: Run the script.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。
- en: Open `C:\ArcpyBook\Ch4\Crime_DataLinksNewLayer.mxd` in ArcMap. You should see
    that the **Burglary** layer now references a new workspace:![How to do it…](img/4445_04_7.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ArcMap 中打开 `C:\ArcpyBook\Ch4\Crime_DataLinksNewLayer.mxd`。你应该看到 **Burglary**
    层现在引用了一个新的工作区：![如何操作…](img/4445_04_7.jpg)
- en: Right-click on the **Burglary** layer and select **Properties**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **Burglary** 层并选择 **属性**。
- en: Click on the **Source** tab and note the new workspace, workspace type, and
    dataset name:![How to do it…](img/4445_04_8.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **源** 选项卡并注意新的工作区、工作区类型和数据集名称：![如何操作…](img/4445_04_8.jpg)
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `replaceDataSource()` method accepts two required parameters and two optional
    parameters. The first two parameters define the workspace path and workspace type
    for the layer that will be used as the replacement. The third parameter, `dataset_name`,
    is an optional parameter that defines the name of the dataset that will be used
    as the replacement layer. This name needs to be an exact match. For example, in
    this recipe, we passed in a `dataset_name` attribute `Burglaries_2009`, which
    is the name of the shapefile that will now be used as the replacement layer in
    the data frame. If a name is not provided, the method will attempt to replace
    the dataset by finding a table with the same name as the current layer's dataset
    property. The final optional parameter is `validate`. By default, this value is
    set to `true`. When set to `true`, a workspace will only be updated if the `workspace_path`
    value is a valid workspace. If it is not a valid workspace, then the workspace
    will not be replaced. If set to `false`, the method will set the source to match
    `workspace_path` regardless of whether it is a valid match or not. This can result
    in a broken data source, but can be useful if you are creating or modifying a
    map document in preparation for data that does not yet exist.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`replaceDataSource()` 方法接受两个必需参数和两个可选参数。前两个参数定义了用作替换的层的 workspace 路径和工作区类型。第三个参数
    `dataset_name` 是一个可选参数，它定义了用作替换层的数据集名称。此名称需要完全匹配。例如，在这个菜谱中，我们传递了一个 `dataset_name`
    属性 `Burglaries_2009`，这是现在将用作数据框中替换层的 shapefile 名称。如果没有提供名称，该方法将尝试通过查找与当前层的 dataset
    属性同名的表来替换数据集。最后一个可选参数是 `validate`。默认情况下，此值设置为 `true`。当设置为 `true` 时，只有当 `workspace_path`
    值是一个有效的工作区时，工作区才会被更新。如果不是有效的工作区，则工作区不会被替换。如果设置为 `false`，则方法将设置源以匹配 `workspace_path`，无论它是否是有效的匹配。这可能会导致损坏的数据源，但在创建或修改地图文档以准备尚未存在的数据时可能很有用。'
- en: There's more…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The `Layer` and `TableView` classes also contain a `findAndReplaceWorkspacePath()`
    method. This method is very similar to the `MapDocument.findAndReplaceWorkspacePaths()`
    method. The only difference is that it works against a single `Layer` or `TableView`
    class instead of iterating the entire map document or layer file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Layer` 和 `TableView` 类还包含一个 `findAndReplaceWorkspacePath()` 方法。此方法与 `MapDocument.findAndReplaceWorkspacePaths()`
    方法非常相似。唯一的区别是它针对单个 `Layer` 或 `TableView` 类，而不是迭代整个地图文档或层文件。'
- en: Finding all broken data sources in all map documents in a folder
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文件夹中查找所有地图文档中的所有损坏的数据源
- en: A common scenario in many organizations involves the movement of data from one
    workspace to another or from one workspace type to another. When this happens,
    any map documents or layers that reference these data sources become broken. Finding
    each of these data sources can be a huge task if undertaken manually. Fortunately,
    you can create a geoprocessing script that will find all broken data sources in
    a folder or list of folders.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，一个常见的场景涉及数据从一个工作区移动到另一个工作区，或者从一个工作区类型移动到另一个工作区类型。当这种情况发生时，任何引用这些数据源的地图文档或图层都会损坏。如果手动执行，找到每个这些数据源可能是一项巨大的任务。幸运的是，你可以创建一个地理处理脚本，该脚本将找到文件夹或文件夹列表中的所有损坏的数据源。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will learn how to recursively search directories for map
    document files, find any broken data sources within those map documents, and write
    the names of the broken data layers to a file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何递归搜索目录中的地图文档文件，找到这些地图文档中的任何损坏的数据源，并将损坏的数据层名称写入文件。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to learn how to find all broken data sources in all map
    documents in a folder:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何在文件夹中找到所有损坏的数据源：
- en: Open IDLE and create a new script window.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDLE并创建一个新的脚本窗口。
- en: 'Import the `arcpy` and `os` packages:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`和`os`包：
- en: '[PRE19]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define a path where you''d like to begin the search. In this case, we''re going
    to begin the search from the `C:` directory, which will then recursively search
    all directories inside the `C:` drive. You may want to define a more specific
    path:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个你想要开始搜索的路径。在这种情况下，我们将从`C:`目录开始搜索，然后递归搜索`C:`驱动器内的所有目录。你可能想要定义一个更具体的路径：
- en: '[PRE20]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open a file that you will use to which you will write the broken layer names:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个文件，你将用它来写入损坏的图层名称：
- en: '[PRE21]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Use the `os.walk()` method along with a `for` loop to walk the directory tree:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`os.walk()`方法和`for`循环遍历目录树：
- en: '[PRE22]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Inside the `for` loop, create a second `for` loop that loops through all the
    files returned. For each file, use the `os.path.splitext()` method to obtain the
    base file name as well as the extension:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环内部，创建一个第二个`for`循环，遍历所有返回的文件。对于每个文件，使用`os.path.splitext()`方法获取基本文件名以及扩展名：
- en: '[PRE23]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Test the file extension to see if it is a map document file. If so, get the
    full path to the map document file, create a new map document object instance
    using the path, write the map document name, loop through each of the broken data
    sources, and write to a file:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试文件扩展名以查看它是否是地图文档文件。如果是，获取地图文档文件的完整路径，使用路径创建一个新的地图文档对象实例，写入地图文档名称，遍历每个损坏的数据源，并将其写入文件：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Close the file:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭文件：
- en: '[PRE25]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The entire script should appear as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE26]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Run the script to generate the file.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本以生成文件。
- en: Open the file to see the results. Your output will vary depending upon the path
    you've defined. The following screenshot shows my output file:![How to do it...](img/4445_04_9.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件以查看结果。你的输出将取决于你定义的路径。以下截图显示了我的输出文件：![如何操作...](img/4445_04_9.jpg)
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This script uses a combination of methods from the Python `os` package and `arcpy.mapping`
    package. The `os.walk()` method walks a directory tree and returns the path, a
    list of directories, and a list of files for each directory starting with a root
    directory that you have defined as the `c:` directory. This root directory could
    have been any directory. The `os.walk()` method returns a three item tuple consisting
    of the root directory, a list of directories, and a list of files. We then loop
    through this list of files and use the `os.path.splitext()` method to split each
    file into a base file name and file extension. The extension is tested to see
    if it matches the string `.mxd`, which indicates a map document file. Files identified
    as map documents have their filenames written to a text file, and a new `MapDocument`
    object instance is created. The `ListBrokenDataSources()` method is then used
    with a reference to the map document to generate a list of broken data sources
    within the file, and these broken data sources are written to the file as well.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本结合了 Python `os` 包和 `arcpy.mapping` 包中的方法。`os.walk()` 方法遍历目录树，并返回从您定义的根目录（`c:`
    目录）开始的路径、目录列表和文件列表。这个根目录可以是任何目录。`os.walk()` 方法返回一个包含三个元素的元组，分别是根目录、目录列表和文件列表。然后我们遍历这个文件列表，并使用
    `os.path.splitext()` 方法将每个文件拆分为基本文件名和文件扩展名。扩展名被测试以查看它是否与字符串 `.mxd` 匹配，这表示地图文档文件。被识别为地图文档的文件将它们的文件名写入文本文件，并创建一个新的
    `MapDocument` 对象实例。然后使用 `ListBrokenDataSources()` 方法与地图文档的引用一起生成文件内的损坏数据源列表，并将这些损坏数据源也写入文件中。
