- en: Chapter 9. Listing and Describing GIS Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with the ArcPy list functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of fields in a feature class or table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a feature
    class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a raster
    image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python provides you with the ability to batch process data through scripting.
    This helps you automate workflows and to increase the efficiency of your data
    processing. For example, you may need to iterate through all datasets on disk
    and perform a specific action for each dataset. The first step is often to perform
    an initial gathering of data before proceeding to the main body of the geoprocessing
    task. This initial data gathering is often accomplished through the use of one
    or more list methods found in ArcPy. These lists are returned as true Python list
    objects. These list objects can then be iterated for further processing. ArcPy
    provides a number of functions that can be used to generate lists of data. These
    methods work on many different types of GIS data. In this chapter, we will examine
    the many functions provided by ArcPy to create lists of data. In [Chapter 2](ch02.html
    "Chapter 2. Managing Map Documents and Layers"), *Managing Map Documents and Layers*,
    we also covered a number of list functions. However, these functions were related
    to working with the `arcpy.mapping` module, and specifically, for working with
    map documents and layers. The list functions we cover in this chapter reside directly
    in ArcPy and are more generic in nature.
  prefs: []
  type: TYPE_NORMAL
- en: We will also cover the `Describe()` function to return a dynamic object that
    will contain property groups. These dynamically generated `Describe` objects contain
    property groups that are dependent on the type of data that has been described.
    For instance, when the `Describe()` function is run against a feature class, properties
    specific to a feature class will be returned. In addition to this, all data, regardless
    of the data type, acquires a set of generic properties, which we'll discuss shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the ArcPy list functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting a list of data is often the first step in a multistep geoprocessing
    operation. ArcPy provides many list functions that you can use to gather lists
    of information, whether they are feature classes, tables, workspaces, and so on.
    After gathering a list of data, you will often perform geoprocessing operations
    against the items in the list. For example, you might want to add a new field
    to all the feature classes in a file geodatabase. To do this, you'd first need
    to get a list of all the feature classes in the workspace. In this recipe, you'll
    learn how to use the list functions in ArcPy by working with the `ListFeatureClasses()`
    function. All the ArcPy list functions work in the same fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcPy provides functions to get lists of fields, indexes, datasets, feature
    classes, files, rasters, tables, and more. All the list functions perform the
    same type of basic operations. The `ListFeatureClasses()` function can be used
    to generate a list of all feature classes in a workspace. The `ListFeatureClasses()`
    function has three optional arguments that can be passed into the function that
    will serve to limit the returned list. The first optional argument is a wildcard
    that can be used to limit the feature classes that are returned based on a name,
    and the second optional argument can be used to limit the feature classes that
    are returned based on a data type (such as point, line, polygon, and so on). The
    third optional parameter limits the returned feature classes by a feature dataset.
    In this recipe, you will learn how to use the `ListFeatureClasses()` function
    to return a list of feature classes. You'll also learn how to restrict the list
    that is returned.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `ListFeatureClasses()` function
    to retrieve a list of the feature classes in a workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `C:\ArcpyBook\Ch9\ListFeatureClasses.py.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You should always remember to set the workspace using the environment settings
    before calling any list function in a script developed with IDLE or any other
    Python development environment. If this isn't done, the list function would not
    know which dataset the list should be pulled from. If the script is run inside
    ArcMap, it returns the feature classes from the default geodatabase if you don't
    set the workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `ListFeatureClasses()` function and assign the results to a variable
    called `fcList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through each of the feature classes in `fcList` and print them to the
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step1.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run the script. You should see this output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The list of feature classes returned by the `ListFeatureClasses()` function
    can be restricted through the use of a wildcard passed as the first parameter.
    The wildcard is used to restrict the contents of your list based on a name. For
    example, you may want to return only a list of feature classes that start with
    `C`. To accomplish this, you can use an asterisk along with a combination of characters.
    Update the `ListFeatureClasses()` function to include a wildcard that will find
    all feature classes that begin with an uppercase `C` and also have any number
    of characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step2.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run the script to see this output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to using a wildcard to restrict the list returned by the `ListFeatureClasses()`
    function, a type restriction can also be applied, either in conjunction with the
    wildcard or by itself. For example, you could restrict the list of feature classes
    that are returned to contain only feature classes that begin with `C` and have
    a `polygon` data type. Update the `ListFeatureClasses()` function to include a
    wildcard that will find all feature classes that begin with an uppercase `C` and
    have a polygon data type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step3.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run the script. You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before calling any list functions, you will need to set the workspace environment
    setting that sets the current workspace from which you will generate the list.
    The `ListFeatureClasses()` function can accept three optional parameters, which
    will limit the feature classes that are returned. The three optional parameters
    include a wild card, feature type, and feature dataset. In this recipe, we've
    applied two of the optional parameters including a wildcard and a feature type.
    Most of the other list functions work the same way. The parameter types will vary,
    but how you call the functions will essentially be the same.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of returning a list of feature classes in a workspace, you may need
    to get a list of tables. The `ListTables()` function returns a list of standalone
    tables in a workspace. This list can be filtered by name or table type. Table
    types can include dBase, INFO, and ALL. All values in the list are of the `string`
    data type and contain table names. Other list functions include `ListFields()`,
    `ListRasters()`, `ListWorkspaces()`, `ListIndexes()`, `ListDatasets()`, `ListFiles()`,
    and `ListVersions()`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of fields in a feature class or table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature classes and tables contain one or more columns of attribute information.
    You can get a list of the fields in a feature class through the `ListFields()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListFields()` function returns a list containing individual `Field` objects
    for each field in a feature class or table. Some functions, such as `ListFields()`
    and `ListIndexes()`, require an input dataset to operate on. You can use a wildcard
    or field type to constrain the list that is returned. Each `Field` object contains
    various read-only properties including `Name`, `AliasName`, `Type`, `Length`,
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to return a list of fields in a feature class.
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `C:\ArcpyBook\Ch9\ListOfFields.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListFields()` method on the `Burglary` feature class inside a try
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through each of the fields in the list of fields and print out the name,
    type, and length. Make sure you indent as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Exception` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListOfFields.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListFields()` function returns a list of fields from a feature class or
    a table. This function accepts one required parameter, which is a reference to
    the feature class or table the function should be executed against. You can limit
    the fields returned by using a wildcard or a field type. In this recipe, we only
    specified a feature class that indicates that all the fields will be returned.
    For each field returned, we printed the name, field type, and field length. As
    I mentioned earlier when discussing the `ListFeatureClasses()` function, `ListFields()`
    and all the other list functions are often called as the first step in a multistep
    process within a script. For example, you might want to update the population
    statistics contained within a `population` field for a census tract feature class.
    To do this, you could get a list of all the fields within a feature class, loop
    through this list by looking for a specific field name that contains information
    on the population, and then update the population information for each row. Alternatively,
    the `ListFields()` function accepts a wildcard as one of its parameters, so if
    you already know the name of the `population` field, you would pass this as the
    wildcard and only a single field will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a feature
    class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All datasets contain information that is descriptive in nature. For example,
    a feature class has a name, shape type, spatial reference, and so on. This information
    can be valuable to your scripts when you are seeking specific information before
    continuing with further processing in the script. For example, you might want
    to perform a buffer only on `polyline` feature classes instead of points or polygons.
    Using the `Describe()` function, you can obtain basic descriptive information
    about any dataset. You can think of this information as metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Describe()` function provides you with the ability to get basic information
    about datasets. These datasets could include feature classes, tables, ArcInfo
    coverages, layer files, workspaces, rasters, and so on. A `Describe` object is
    returned and contains specific properties, based on the data type being described.
    Properties on the `Describe` object are organized into property groups and all
    datasets fall into at least one property group. For example, performing `Describe()`
    against a geodatabase would return the `GDB FeatureClass`, `FeatureClass`, `Table`,
    and `Dataset` property groups. Each of these property groups contains specific
    properties that can be examined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Describe()` function accepts a string parameter, which is a pointer to
    a datasource. In the following code example, we pass a feature class that is contained
    within a file geodatabase. The function returns a `Describe` object that contains
    a set of dynamic properties called **property groups**. We can then access these
    various properties as we have done in this case by simply printing out the properties
    using the print function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: All datasets, regardless of their type, contain a default set of properties
    located on the `Describe` object. These are read-only properties. Some of the
    more commonly used properties include `dataType`, `catalogPath`, `name`, `path`,
    and `file`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will write a script that obtains descriptive information
    about a feature class using the `Describe()` function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to obtain descriptive information about a feature
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `C:\ArcpyBook\Ch9\DescribeFeatureClass.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Describe()` function on the `Burglary` feature class and print out
    the shape type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of fields in the feature class and print out the name, type, and
    length of each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the geographic extent of the feature class and print out the coordinates
    that define the extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Exception` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\DescribeFeatureClass.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Performing a `Describe()` against a feature class, which we have done in this
    script, returns a `FeatureClass` property group along with access to the `Table`
    and `Dataset` property groups, respectively. In addition to returning a `FeatureClass`
    property group, you also have access to a `Table` properties group.
  prefs: []
  type: TYPE_NORMAL
- en: The `Table` property group is important primarily because it gives you access
    to the fields in a standalone table or feature class. You can also access any
    indexes on the table or feature class through this property group. The `Fields`
    property in `Table` Properties returns a Python list containing one `Field` object
    for each field in the feature class. Each field has a number of read-only properties
    including the `name`, `alias`, `length`, `type`, `scale`, `precision`, and so
    on. The most obviously useful properties are name and type. In this script, we
    printed out the field name, type, and length. Note the use of a Python `for` loop
    to process each `field` in the Python list.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we printed out the geographic extent of the layer through the use of
    the `Extent` object, returned by the extent property in the `Dataset` property
    group. The `Dataset` property group contains a number of useful properties. Perhaps,
    the most used properties include `extent` and `spatialReference`, as many geoprocessing
    tools and scripts require this information at some point during execution. You
    can also obtain the `datasetType` and versioning information along with several
    other properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Describe() function to return descriptive information about a raster
    image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raster files also contain descriptive information that can be returned by the
    `Describe()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A raster dataset can also be described through the use of the `Describe()` function.
    In this recipe, you will describe a raster dataset by returning its extent and
    spatial reference. The `Describe()` function contains a reference to the general
    purpose `Dataset` properties group and also contains a reference to the `SpatialReference`
    object for the dataset. The `SpatialReference` object can then be used to get
    detailed spatial reference information for the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to obtain descriptive information about a raster
    image file.
  prefs: []
  type: TYPE_NORMAL
- en: Open **IDLE** and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script as `C:\ArcpyBook\Ch9\DescribeRaster.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Describe()` function on a raster dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the extent of the raster dataset and print it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `SpatialReference` object and print it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Exception` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\DescribeRaster.py`
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save and run the script. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is very similar to previous recipes. The difference is that we're
    using the `Describe()` function against a raster dataset instead of a `vector`
    feature class. In both cases, we've returned the geographic extent of the datasets
    using the extent object. However, in the script, we've also obtained the `SpatialReference`
    object for the raster dataset and printed out information about this object including
    its name and type.
  prefs: []
  type: TYPE_NORMAL
