- en: Chapter 9. Listing and Describing GIS Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。列出和描述 GIS 数据
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Working with the ArcPy list functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ArcPy 列表函数
- en: Getting a list of fields in a feature class or table
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取要素类或表中的字段列表
- en: Using the Describe() function to return descriptive information about a feature
    class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Describe() 函数返回关于要素类的描述信息
- en: Using the Describe() function to return descriptive information about a raster
    image
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Describe() 函数返回栅格图像的描述信息
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Python provides you with the ability to batch process data through scripting.
    This helps you automate workflows and to increase the efficiency of your data
    processing. For example, you may need to iterate through all datasets on disk
    and perform a specific action for each dataset. The first step is often to perform
    an initial gathering of data before proceeding to the main body of the geoprocessing
    task. This initial data gathering is often accomplished through the use of one
    or more list methods found in ArcPy. These lists are returned as true Python list
    objects. These list objects can then be iterated for further processing. ArcPy
    provides a number of functions that can be used to generate lists of data. These
    methods work on many different types of GIS data. In this chapter, we will examine
    the many functions provided by ArcPy to create lists of data. In [Chapter 2](ch02.html
    "Chapter 2. Managing Map Documents and Layers"), *Managing Map Documents and Layers*,
    we also covered a number of list functions. However, these functions were related
    to working with the `arcpy.mapping` module, and specifically, for working with
    map documents and layers. The list functions we cover in this chapter reside directly
    in ArcPy and are more generic in nature.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 通过脚本提供批量处理数据的能力。这有助于您自动化工作流程并提高数据处理效率。例如，您可能需要遍历磁盘上的所有数据集并对每个数据集执行特定操作。第一步通常是先进行初步的数据收集，然后再进行地理处理任务的主要部分。这种初步的数据收集通常是通过使用
    ArcPy 中找到的一个或多个列表方法来完成的。这些列表作为真正的 Python 列表对象返回。然后，这些列表对象可以用于进一步处理。ArcPy 提供了许多用于生成数据列表的函数。这些方法适用于许多不同类型的
    GIS 数据。在本章中，我们将检查 ArcPy 提供的许多用于创建数据列表的函数。在 [第 2 章](ch02.html "第 2 章。管理地图文档和图层")
    中，*管理地图文档和图层*，我们也介绍了一些列表函数。然而，这些函数与使用 `arcpy.mapping` 模块有关，特别是用于处理地图文档和图层。本章中我们介绍的列表函数直接位于
    ArcPy 中，并且更具有通用性。
- en: We will also cover the `Describe()` function to return a dynamic object that
    will contain property groups. These dynamically generated `Describe` objects contain
    property groups that are dependent on the type of data that has been described.
    For instance, when the `Describe()` function is run against a feature class, properties
    specific to a feature class will be returned. In addition to this, all data, regardless
    of the data type, acquires a set of generic properties, which we'll discuss shortly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍 Describe() 函数，以返回包含属性组的动态对象。这些动态生成的 Describe 对象包含依赖于所描述数据类型的属性组。例如，当
    Describe() 函数针对要素类运行时，将返回特定于要素类的属性。此外，所有数据，无论数据类型如何，都会获得一组通用属性，我们将在稍后讨论。
- en: Working with the ArcPy list functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ArcPy 列表函数
- en: Getting a list of data is often the first step in a multistep geoprocessing
    operation. ArcPy provides many list functions that you can use to gather lists
    of information, whether they are feature classes, tables, workspaces, and so on.
    After gathering a list of data, you will often perform geoprocessing operations
    against the items in the list. For example, you might want to add a new field
    to all the feature classes in a file geodatabase. To do this, you'd first need
    to get a list of all the feature classes in the workspace. In this recipe, you'll
    learn how to use the list functions in ArcPy by working with the `ListFeatureClasses()`
    function. All the ArcPy list functions work in the same fashion.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 获取数据列表通常是多步骤地理处理操作的第一步。ArcPy 提供了许多列表函数，您可以使用它们收集信息列表，无论是要素类、表、工作空间等。在收集数据列表后，您通常会对列表中的项目执行地理处理操作。例如，您可能希望向文件地理数据库中的所有要素类添加新字段。为此，您首先需要获取工作空间中所有要素类的列表。在本食谱中，您将通过使用
    `ListFeatureClasses()` 函数来学习如何使用 ArcPy 中的列表函数。所有 ArcPy 列表函数的工作方式相同。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: ArcPy provides functions to get lists of fields, indexes, datasets, feature
    classes, files, rasters, tables, and more. All the list functions perform the
    same type of basic operations. The `ListFeatureClasses()` function can be used
    to generate a list of all feature classes in a workspace. The `ListFeatureClasses()`
    function has three optional arguments that can be passed into the function that
    will serve to limit the returned list. The first optional argument is a wildcard
    that can be used to limit the feature classes that are returned based on a name,
    and the second optional argument can be used to limit the feature classes that
    are returned based on a data type (such as point, line, polygon, and so on). The
    third optional parameter limits the returned feature classes by a feature dataset.
    In this recipe, you will learn how to use the `ListFeatureClasses()` function
    to return a list of feature classes. You'll also learn how to restrict the list
    that is returned.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy提供了获取字段列表、索引、数据集、特征类、文件、栅格、表格等列表的函数。所有列表函数执行相同类型的基本操作。`ListFeatureClasses()`函数可用于生成工作空间中所有特征类的列表。`ListFeatureClasses()`函数有三个可选参数可以传递给函数，这些参数将用于限制返回的列表。第一个可选参数是一个通配符，可用于根据名称限制返回的特征类，第二个可选参数可用于根据数据类型（如点、线、多边形等）限制返回的特征类。第三个可选参数通过特征数据集限制返回的特征类。在本菜谱中，您将学习如何使用`ListFeatureClasses()`函数返回特征类列表。您还将学习如何限制返回的列表。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to use the `ListFeatureClasses()` function
    to retrieve a list of the feature classes in a workspace:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何使用`ListFeatureClasses()`函数检索工作空间中的特征类列表：
- en: Open **IDLE** and create a new script window.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**IDLE**并创建一个新的脚本窗口。
- en: Save the script as `C:\ArcpyBook\Ch9\ListFeatureClasses.py.`
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为`C:\ArcpyBook\Ch9\ListFeatureClasses.py。`
- en: 'Import the `arcpy` module:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`模块：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set the workspace:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should always remember to set the workspace using the environment settings
    before calling any list function in a script developed with IDLE or any other
    Python development environment. If this isn't done, the list function would not
    know which dataset the list should be pulled from. If the script is run inside
    ArcMap, it returns the feature classes from the default geodatabase if you don't
    set the workspace.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该始终记住在调用使用IDLE或任何其他Python开发环境开发的脚本中的任何列表函数之前，使用环境设置设置工作空间。如果没有这样做，列表函数将不知道应该从哪个数据集中提取列表。如果在ArcMap中运行脚本，并且没有设置工作空间，它将返回默认地理数据库中的特征类。
- en: 'Call the `ListFeatureClasses()` function and assign the results to a variable
    called `fcList`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`ListFeatureClasses()`函数并将结果分配给名为`fcList`的变量：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Loop through each of the feature classes in `fcList` and print them to the
    screen:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历`fcList`中的每个特征类并将它们打印到屏幕上：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step1.py`
    solution file.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step1.py`解决方案文件来验证您的作品。
- en: Save and run the script. You should see this output.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。您应该看到以下输出。
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The list of feature classes returned by the `ListFeatureClasses()` function
    can be restricted through the use of a wildcard passed as the first parameter.
    The wildcard is used to restrict the contents of your list based on a name. For
    example, you may want to return only a list of feature classes that start with
    `C`. To accomplish this, you can use an asterisk along with a combination of characters.
    Update the `ListFeatureClasses()` function to include a wildcard that will find
    all feature classes that begin with an uppercase `C` and also have any number
    of characters:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递给`ListFeatureClasses()`函数的第一个参数的通配符，可以限制由该函数返回的特征类列表。通配符用于根据名称限制列表的内容。例如，您可能只想返回以`C`开头的特征类列表。为了实现这一点，您可以使用星号与字符组合。更新`ListFeatureClasses()`函数以包含一个通配符，该通配符将找到所有以大写`C`开头并具有任意数量的字符的特征类：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step2.py`
    solution file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step2.py`解决方案文件来验证您的作品。
- en: 'Save and run the script to see this output:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本以查看以下输出：
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition to using a wildcard to restrict the list returned by the `ListFeatureClasses()`
    function, a type restriction can also be applied, either in conjunction with the
    wildcard or by itself. For example, you could restrict the list of feature classes
    that are returned to contain only feature classes that begin with `C` and have
    a `polygon` data type. Update the `ListFeatureClasses()` function to include a
    wildcard that will find all feature classes that begin with an uppercase `C` and
    have a polygon data type:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了使用通配符来限制 `ListFeatureClasses()` 函数返回的列表外，还可以应用类型限制，无论是与通配符结合使用还是单独使用。例如，您可以限制返回的特征类列表只包含以
    `C` 开头且具有 `polygon` 数据类型的特征类。更新 `ListFeatureClasses()` 函数以包含一个通配符，该通配符将找到所有以大写
    `C` 开头且具有多边形数据类型的特征类：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step3.py`
    solution file.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查 `C:\ArcpyBook\code\Ch9\ListFeatureClasses_Step3.py` 解决方案文件来验证您的作品。
- en: 'Save and run the script. You will see the following output:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。您将看到以下输出：
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Before calling any list functions, you will need to set the workspace environment
    setting that sets the current workspace from which you will generate the list.
    The `ListFeatureClasses()` function can accept three optional parameters, which
    will limit the feature classes that are returned. The three optional parameters
    include a wild card, feature type, and feature dataset. In this recipe, we've
    applied two of the optional parameters including a wildcard and a feature type.
    Most of the other list functions work the same way. The parameter types will vary,
    but how you call the functions will essentially be the same.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用任何列表函数之前，您需要设置工作空间环境设置，该设置将当前工作空间设置为从中生成列表的工作空间。`ListFeatureClasses()` 函数可以接受三个可选参数，这些参数将限制返回的特征类。这三个可选参数包括通配符、特征类型和特征数据集。在这个配方中，我们应用了两个可选参数，包括通配符和特征类型。大多数其他列表函数的工作方式相同。参数类型将不同，但调用函数的方式基本上是相同的。
- en: There's more…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Instead of returning a list of feature classes in a workspace, you may need
    to get a list of tables. The `ListTables()` function returns a list of standalone
    tables in a workspace. This list can be filtered by name or table type. Table
    types can include dBase, INFO, and ALL. All values in the list are of the `string`
    data type and contain table names. Other list functions include `ListFields()`,
    `ListRasters()`, `ListWorkspaces()`, `ListIndexes()`, `ListDatasets()`, `ListFiles()`,
    and `ListVersions()`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是返回工作空间中的特征类列表，您可能需要获取表列表。`ListTables()` 函数返回工作空间中的独立表列表。此列表可以通过名称或表类型进行筛选。表类型可以包括
    dBase、INFO 和 ALL。列表中的所有值都是 `string` 数据类型，并包含表名。其他列表函数包括 `ListFields()`、`ListRasters()`、`ListWorkspaces()`、`ListIndexes()`、`ListDatasets()`、`ListFiles()`
    和 `ListVersions()`。
- en: Getting a list of fields in a feature class or table
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取特征类或表中的字段列表
- en: Feature classes and tables contain one or more columns of attribute information.
    You can get a list of the fields in a feature class through the `ListFields()`
    function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 特征类和表包含一个或多个属性信息列。您可以通过 `ListFields()` 函数获取特征类中的字段列表。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `ListFields()` function returns a list containing individual `Field` objects
    for each field in a feature class or table. Some functions, such as `ListFields()`
    and `ListIndexes()`, require an input dataset to operate on. You can use a wildcard
    or field type to constrain the list that is returned. Each `Field` object contains
    various read-only properties including `Name`, `AliasName`, `Type`, `Length`,
    and others.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListFields()` 函数返回一个包含特征类或表中的每个字段的单个 `Field` 对象的列表。一些函数，如 `ListFields()` 和
    `ListIndexes()`，需要输入数据集来操作。您可以使用通配符或字段类型来约束返回的列表。每个 `Field` 对象包含各种只读属性，包括 `Name`、`AliasName`、`Type`、`Length`
    等。'
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: Follow these steps to learn how to return a list of fields in a feature class.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何返回特征类中的字段列表。
- en: Open **IDLE** and create a new script window.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **IDLE** 并创建一个新的脚本窗口。
- en: Save the script as `C:\ArcpyBook\Ch9\ListOfFields.py`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `C:\ArcpyBook\Ch9\ListOfFields.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE9]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Set the workspace:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Call the `ListFields()` method on the `Burglary` feature class inside a try
    block:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 try 块中对 `Burglary` 特征类调用 `ListFields()` 方法：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Loop through each of the fields in the list of fields and print out the name,
    type, and length. Make sure you indent as needed:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历字段列表中的每个字段，并打印出名称、类型和长度。确保根据需要缩进：
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the `Exception` block:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Exception` 块：
- en: '[PRE13]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The entire script should appear as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE14]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\ListOfFields.py`
    solution file.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch9\ListOfFields.py`解决方案文件来检查您的工作。
- en: 'Save and run the script. You should see the following output:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。您应该看到以下输出：
- en: '[PRE15]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ListFields()` function returns a list of fields from a feature class or
    a table. This function accepts one required parameter, which is a reference to
    the feature class or table the function should be executed against. You can limit
    the fields returned by using a wildcard or a field type. In this recipe, we only
    specified a feature class that indicates that all the fields will be returned.
    For each field returned, we printed the name, field type, and field length. As
    I mentioned earlier when discussing the `ListFeatureClasses()` function, `ListFields()`
    and all the other list functions are often called as the first step in a multistep
    process within a script. For example, you might want to update the population
    statistics contained within a `population` field for a census tract feature class.
    To do this, you could get a list of all the fields within a feature class, loop
    through this list by looking for a specific field name that contains information
    on the population, and then update the population information for each row. Alternatively,
    the `ListFields()` function accepts a wildcard as one of its parameters, so if
    you already know the name of the `population` field, you would pass this as the
    wildcard and only a single field will be returned.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListFields()`函数返回要素类或表中的字段列表。此函数接受一个必需参数，即函数应执行的要素类或表的引用。您可以使用通配符或字段类型来限制返回的字段。在本例中，我们仅指定了一个要素类，表示将返回所有字段。对于返回的每个字段，我们打印了名称、字段类型和字段长度。正如我之前在讨论`ListFeatureClasses()`函数时提到的，`ListFields()`和其他所有列表函数通常在脚本中的多步过程中作为第一步被调用。例如，您可能想更新包含在人口普查区要素类中的`population`字段的人口统计数据。为此，您可以获取要素类中所有字段的列表，通过查找包含有关人口信息的特定字段名称来遍历此列表，然后更新每行的人口信息。或者，`ListFields()`函数接受通配符作为其参数之一，因此如果您已经知道`population`字段的名称，您就可以将其作为通配符传递，这样只会返回单个字段。'
- en: Using the Describe() function to return descriptive information about a feature
    class
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Describe()`函数返回关于要素类的描述性信息
- en: All datasets contain information that is descriptive in nature. For example,
    a feature class has a name, shape type, spatial reference, and so on. This information
    can be valuable to your scripts when you are seeking specific information before
    continuing with further processing in the script. For example, you might want
    to perform a buffer only on `polyline` feature classes instead of points or polygons.
    Using the `Describe()` function, you can obtain basic descriptive information
    about any dataset. You can think of this information as metadata.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据集都包含描述性信息。例如，要素类具有名称、形状类型、空间参考等信息。在脚本中继续进一步处理之前，这些信息对于您寻找特定信息时非常有价值。例如，您可能只想在`polyline`要素类上执行缓冲区操作，而不是点或多边形。使用`Describe()`函数，您可以获取任何数据集的基本描述性信息。您可以将这些信息视为元数据。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `Describe()` function provides you with the ability to get basic information
    about datasets. These datasets could include feature classes, tables, ArcInfo
    coverages, layer files, workspaces, rasters, and so on. A `Describe` object is
    returned and contains specific properties, based on the data type being described.
    Properties on the `Describe` object are organized into property groups and all
    datasets fall into at least one property group. For example, performing `Describe()`
    against a geodatabase would return the `GDB FeatureClass`, `FeatureClass`, `Table`,
    and `Dataset` property groups. Each of these property groups contains specific
    properties that can be examined.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Describe()`函数为您提供了获取数据集基本信息的功能。这些数据集可能包括要素类、表、ArcInfo覆盖、图层文件、工作空间、栅格等。返回一个`Describe`对象，并包含基于描述的数据类型的特定属性。`Describe`对象上的属性组织到属性组中，所有数据集至少属于一个属性组。例如，对地理数据库执行`Describe()`操作将返回`GDB
    FeatureClass`、`FeatureClass`、`Table`和`Dataset`属性组。每个属性组都包含可以检查的特定属性。'
- en: 'The `Describe()` function accepts a string parameter, which is a pointer to
    a datasource. In the following code example, we pass a feature class that is contained
    within a file geodatabase. The function returns a `Describe` object that contains
    a set of dynamic properties called **property groups**. We can then access these
    various properties as we have done in this case by simply printing out the properties
    using the print function:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Describe()` 函数接受一个字符串参数，该参数是指向数据源的一个指针。在下面的代码示例中，我们传递一个包含在文件地理数据库中的要素类。该函数返回一个包含一组动态属性的
    `Describe` 对象，这些属性被称为 **属性组**。然后我们可以像在这个例子中那样通过简单地使用打印函数打印属性来访问这些各种属性：'
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: All datasets, regardless of their type, contain a default set of properties
    located on the `Describe` object. These are read-only properties. Some of the
    more commonly used properties include `dataType`, `catalogPath`, `name`, `path`,
    and `file`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据集，无论其类型如何，都包含在 `Describe` 对象上的一组默认属性。这些属性是只读的。一些更常用的属性包括 `dataType`、`catalogPath`、`name`、`path`
    和 `file`。
- en: In this recipe, you will write a script that obtains descriptive information
    about a feature class using the `Describe()` function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你将编写一个脚本，使用 `Describe()` 函数获取要素类的描述信息。
- en: How to do it…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to learn how to obtain descriptive information about a feature
    class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何获取要素类的描述信息：
- en: Open **IDLE** and create a new script window.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **IDLE** 并创建一个新的脚本窗口。
- en: Save the script as `C:\ArcpyBook\Ch9\DescribeFeatureClass.py`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为 `C:\ArcpyBook\Ch9\DescribeFeatureClass.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `arcpy` 模块：
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set the workspace:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE18]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start a `try` block:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个 `try` 块：
- en: '[PRE19]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Call the `Describe()` function on the `Burglary` feature class and print out
    the shape type:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Burglary` 要素类上调用 `Describe()` 函数并打印出形状类型：
- en: '[PRE20]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Get a list of fields in the feature class and print out the name, type, and
    length of each:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取要素类中的字段列表并打印出每个字段的名称、类型和长度：
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Get the geographic extent of the feature class and print out the coordinates
    that define the extent:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取要素类的地理范围并打印出定义范围的坐标：
- en: '[PRE22]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the `Exception` block:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Exception` 块：
- en: '[PRE23]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The entire script should appear as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应该如下所示：
- en: '[PRE24]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\DescribeFeatureClass.py`
    solution file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过检查 `C:\ArcpyBook\code\Ch9\DescribeFeatureClass.py` 解决方案文件来检查你的工作。
- en: 'Save and run the script. You should see the following output:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。你应该看到以下输出：
- en: '[PRE25]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Performing a `Describe()` against a feature class, which we have done in this
    script, returns a `FeatureClass` property group along with access to the `Table`
    and `Dataset` property groups, respectively. In addition to returning a `FeatureClass`
    property group, you also have access to a `Table` properties group.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对要素类执行 `Describe()` 操作，正如我们在脚本中所做的，返回一个 `FeatureClass` 属性组以及分别访问 `Table` 和 `Dataset`
    属性组。除了返回 `FeatureClass` 属性组外，你还可以访问 `Table` 属性组。
- en: The `Table` property group is important primarily because it gives you access
    to the fields in a standalone table or feature class. You can also access any
    indexes on the table or feature class through this property group. The `Fields`
    property in `Table` Properties returns a Python list containing one `Field` object
    for each field in the feature class. Each field has a number of read-only properties
    including the `name`, `alias`, `length`, `type`, `scale`, `precision`, and so
    on. The most obviously useful properties are name and type. In this script, we
    printed out the field name, type, and length. Note the use of a Python `for` loop
    to process each `field` in the Python list.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Table` 属性组非常重要，主要是因为它让你可以访问独立表或要素类中的字段。你还可以通过这个属性组访问表或要素类上的任何索引。`Table` 属性中的
    `Fields` 返回一个包含每个要素类中 `Field` 对象的 Python 列表。每个字段都有许多只读属性，包括 `name`、`alias`、`length`、`type`、`scale`、`precision`
    等。最显然有用的属性是名称和类型。在这个脚本中，我们打印出了字段名称、类型和长度。注意使用 Python `for` 循环来处理 Python 列表中的每个
    `field`。'
- en: Finally, we printed out the geographic extent of the layer through the use of
    the `Extent` object, returned by the extent property in the `Dataset` property
    group. The `Dataset` property group contains a number of useful properties. Perhaps,
    the most used properties include `extent` and `spatialReference`, as many geoprocessing
    tools and scripts require this information at some point during execution. You
    can also obtain the `datasetType` and versioning information along with several
    other properties.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过使用`Dataset`属性组中的范围属性返回的`Extent`对象打印出了图层的地域范围。`Dataset`属性组包含许多有用的属性。也许，最常用的属性包括`extent`和`spatialReference`，因为许多地理处理工具和脚本在执行过程中某个时刻都需要这些信息。您还可以获取`datasetType`和版本信息以及其他几个属性。
- en: Using the Describe() function to return descriptive information about a raster
    image
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`Describe()`函数返回关于栅格图像的描述性信息
- en: Raster files also contain descriptive information that can be returned by the
    `Describe()` function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格文件也包含描述性信息，这些信息可以通过`Describe()`函数返回。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: A raster dataset can also be described through the use of the `Describe()` function.
    In this recipe, you will describe a raster dataset by returning its extent and
    spatial reference. The `Describe()` function contains a reference to the general
    purpose `Dataset` properties group and also contains a reference to the `SpatialReference`
    object for the dataset. The `SpatialReference` object can then be used to get
    detailed spatial reference information for the dataset.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 栅格数据集也可以通过使用`Describe()`函数来描述。在这个菜谱中，您将通过返回其范围和空间参考来描述栅格数据集。`Describe()`函数包含对通用`Dataset`属性组的引用，同时也包含对数据集的`SpatialReference`对象的引用。然后可以使用`SpatialReference`对象来获取数据集的详细空间参考信息。
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Follow these steps to learn how to obtain descriptive information about a raster
    image file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何获取关于栅格图像文件描述性信息的方法。
- en: Open **IDLE** and create a new script window.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**IDLE**并创建一个新的脚本窗口。
- en: Save the script as `C:\ArcpyBook\Ch9\DescribeRaster.py`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本保存为`C:\ArcpyBook\Ch9\DescribeRaster.py`。
- en: 'Import the `arcpy` module:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`arcpy`模块：
- en: '[PRE26]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Set the workspace:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置工作空间：
- en: '[PRE27]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Start a `try` block:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个`try`块：
- en: '[PRE28]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Call the `Describe()` function on a raster dataset:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在栅格数据集上调用`Describe()`函数：
- en: '[PRE29]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Get the extent of the raster dataset and print it out:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取栅格数据集的范围并打印出来：
- en: '[PRE30]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Get a reference to the `SpatialReference` object and print it out:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取对`SpatialReference`对象的引用并打印出来：
- en: '[PRE31]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the `Exception` block:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Exception`块：
- en: '[PRE32]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The entire script should appear as follows:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE33]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can check your work by examining the `C:\ArcpyBook\code\Ch9\DescribeRaster.py`
    solution file.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过检查`C:\ArcpyBook\code\Ch9\DescribeRaster.py`解决方案文件来验证您的操作。
- en: 'Save and run the script. You should see the following output:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行脚本。您应该看到以下输出：
- en: '[PRE34]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This recipe is very similar to previous recipes. The difference is that we're
    using the `Describe()` function against a raster dataset instead of a `vector`
    feature class. In both cases, we've returned the geographic extent of the datasets
    using the extent object. However, in the script, we've also obtained the `SpatialReference`
    object for the raster dataset and printed out information about this object including
    its name and type.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱与之前的菜谱非常相似。不同之处在于我们使用的是对栅格数据集的`Describe()`函数，而不是`vector`要素类。在这两种情况下，我们都使用范围对象返回了数据集的地理范围。然而，在脚本中，我们还获取了栅格数据集的`SpatialReference`对象，并打印出有关该对象的信息，包括其名称和类型。
