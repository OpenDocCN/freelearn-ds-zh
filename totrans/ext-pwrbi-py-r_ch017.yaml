- en: 16 Interactive R Custom Visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *Chapter 15, Advanced Visualizations*, you saw that it is possible to make
    very complex graphs thanks to the flexibility introduced by **ggplot**. Sometimes,
    however, you have the feeling that you can''t take full advantage of the information
    shown in the graph because of a lack interactivity, such as tooltips. In this
    chapter, you''ll learn how to introduce interactivity into custom graphics created
    using R and by directly using *HTML widgets*. Here are the topics we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Why interactive R custom visuals?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a dash of interactivity with Plotly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting the interactivity provided by HTML widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging all into a Power BI custom visual
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the custom visual package in Power BI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter requires you to have a working internet connection and **Power
    BI Desktop** installed on your machine. You must have properly configured the
    R and Python engines and IDEs as outlined in *Chapter 2, Configuring R with Power
    BI*, and *Chapter 3, Configuring Python with Power BI*.
  prefs: []
  type: TYPE_NORMAL
- en: Why interactive R custom visuals?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with a graph you''ve already implemented in R. Consider, for example,
    the raincloud plot of `Fare` vs `Pclass` variables introduced in *Chapter 14,
    Exploratory Data Analysis*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – Raincloud plot for Fare (transformed) and Pclass variables](img/file398.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – Raincloud plot for Fare (transformed) and Pclass variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Focus for a moment only on the boxplots you see in *Figure 16.1*. Although
    the `Fare` variable is already transformed according to Yeo-Johnson to try to
    reduce skewness, there remain some extreme outliers for each of the passenger
    classes described by the categorical variable, `Pclass`. If, for example, you
    want to know the values of the transformed variable `Fare` corresponding to the
    whiskers (fences) of the boxplot on the left so that you can then determine the
    outliers located beyond those whiskers, it would be convenient that these values
    appear when you pass the mouse near that boxplot, as in *Figure 16.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Main labels shown in the Fare (transformed) boxplot for the
    first class](img/file399.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – Main labels shown in the Fare (transformed) boxplot for the first
    class
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be even more interesting to know the actual value of a specific isolated
    outlier when you hover the mouse over the point representing it, as in *Figure
    16.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Values of Fare (transformed) and Pclass for the highlighted
    outlier](img/file400.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – Values of Fare (transformed) and Pclass for the highlighted outlier
  prefs: []
  type: TYPE_NORMAL
- en: There is no doubt that these interactivities would be welcomed by the analyst
    reading the charts if they were introduced.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's see how to add these interactivities to an existing graphic developed
    using ggplot.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dash of interactivity with Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is an open source JavaScript library for data visualization, which is
    declarative and high-level and allows you to create dozens of types of interactive
    graphs, named **Plotly.js**. This library is the core of other Plotly client libraries,
    developed for Python, Scala, R, and ggplot. In particular, the library developed
    for R, named **Plotly.R** ([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly)),
    provides the `ggplotly()` function, which does all the magic for us: it detects
    all the basic attributes contained in an existing graph developed with ggplot
    and transforms them into an interactive web visualization. Let''s see an example.'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to install the Plotly.R library ([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly))
    on your latest CRAN R engine via the `install.packages('plotly')` script.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For simplicity, we'll make sure to run the custom visual on the latest version
    of the CRAN R engine, since all the necessary libraries were already installed
    in the previous chapters. If the goal is to publish a report with the custom visual
    on Power BI, you have to make sure that the custom visual is correctly rendered
    on the same R engine present on Power BI (in our case, CRAN R 3.4.4).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then run the script you can find in the `01-interactive-boxplots.R` file in
    the `Chapter16` folder. The content of the script is extrapolated from the various
    scripts used in *Chapter 14, Exploratory Data Analysis*, so there’s nothing new
    to you. The only portion of the script you haven''t seen before is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is the part of code that transforms a static graph into a dynamic HTML-based
    one, and as you can see, it''s one simple call to the `ggplotly()` function. The
    result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Result of applying the ggplotly() function to the raincloud
    plot](img/file401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – Result of applying the ggplotly() function to the raincloud plot
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, in RStudio the result is no longer shown in the **Plots** tab,
    but in the **Viewer** tab, dedicated to HTML output. You will also notice the
    presence of the **Modebar** in the top-right corner, which allows you to set some
    operations on the chart, such as zoom and hover options.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the most striking thing is that you no longer see a series of raincloud
    plots, as you expected, but simple boxplots! If you look at the RStudio console,
    you will notice that there are three identical warning messages, one for each
    raincloud plot that should have been represented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed that only the density plots have disappeared. This means
    that in the current version of Plotly (4.9.4.1), the objects created by the `ggdist`
    library are not yet managed. Moreover, `ggplotly()` renders fill and color aesthetics
    as distinct, as opposed to `ggplot` static graphs. Surely this functionality still
    needs to be improved and, most likely, these bugs will be handled in future versions.
    In any case, the graph is still usable and shows how easy it is to add interactivity
    to a ggplot graph.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you would think that any chart made in HTML and JavaScript could
    then be used in Power BI. Obviously, this is not the case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Every interactive graphic that can be used in Power BI must be an *HTML widget*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In fact, Plotly.R exposes graphs via HTML widgets. Let's see what this is all
    about.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the interactivity provided by HTML widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**HTML widgets** are R packages that allow you to build interactive web pages.
    These packages are generated by a framework used to create a binding between R
    and JavaScript libraries. This framework is made available by the `htmlwidgets`
    package developed by RStudio. HTML widgets are always hosted within an R package,
    including the source code and dependencies, in order to make sure that the widgets
    are fully reproducible even without being able to access the internet. For more
    details on how to develop an HTML widget from scratch, take a look at the references.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to being able to embed HTML widgets in **RMarkdown** files (dynamic
    documents with R) or **Shiny** applications (interactive web apps built directly
    from R), the `htmlwidgets` package allows you to save them also in standalone
    web page files thanks to the `saveWidget()` function.
  prefs: []
  type: TYPE_NORMAL
- en: That said, there are hundreds of R packages that expose their functionalities
    in HTML widgets. You can explore the **htmlwidgets gallery** ([http://gallery.htmlwidgets.org/](http://gallery.htmlwidgets.org/))
    to search for interactive graphics that may be appropriate for you.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, it is possible to visualize these HTML widgets, both those in the gallery
    and those made through Plotly, in Power BI. That sounds good. But how do you embed
    a dynamic graph made in HTML and JavaScript into Power BI? You must compile an
    R-powered visual via the *pbiviz tools*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how it's done.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging it all into a Power BI Custom Visual
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Power BI Visual Tools** (**pbiviz**) are the easiest way to build custom
    visuals in Power BI. They are written in **JavaScript** (using **Node.js**) and
    are used to compile the source code of **.pbiviz packages**. A .pbiviz package
    is a zipped version of the **Power BI Visual Project**, which in turn is a set
    of folders, scripts, and assets needed to create the custom visualization you
    want to implement. Generally, a standard Power BI Visual Project is created from
    a template thanks to the pbiviz command-line tools. The template contents depend
    on the method by which you want to create the custom visual (**TypeScript**, **R
    Visual**, or **R HTML**).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The pbiviz tools do not support any technology that uses Python behind the scenes,
    such as the *ipywidget widgets*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the light of this, it is worth learning R and ggplot a little more in order
    to be able to develop interesting custom visuals using the R Visual and R HTML
    modes. In addition to this, as mentioned at the end of *Chapter 2, Configuring
    R With Power BI*, take the following note into account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The *Publish to web* option in Power BI does not allow you to publish reports
    that contain standard R Visuals. You can work around this limitation by creating
    R custom visuals, which are allowed to be published with this option.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now let's see how to install the pbiviz tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the pbiviz package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pbiviz command-line tools provide everything you need to develop visuals and
    test them in reports and dashboards on Power BI service. For this very last reason,
    you need to install an SSL certificate too, so that your laptop can interact securely
    with the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to do everything step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://nodejs.org/en/](https://nodejs.org/en/) and install the Node.js
    version recommended for all users, following the default options set by the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart your laptop, as this is mandatory for the *Step 4* command to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Windows **Start** button and start entering the string `“power”`,
    then click on the **Windows PowerShell** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in the PowerShell console: `npm i -g powerbi-visuals-tools`.
    If you get some deprecation warnings, don’t worry and wait for the installation
    to complete.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in the PowerShell console: `pbiviz --install-cert`.
    It returns a location in which the PFX file is created (it should be `C:\Users\<your-username>\AppData\Roaming\npm\node_modules\powerbi-visuals-tools\certs`)
    and a numeric passphrase. Take note of both as you’ll need them later.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Win**+**R** and enter `mmc` in the **Open** textbox. It will open the
    **Microsoft Management Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **File**, then click on **Add/Remove Snap-in…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Certificates** and click on **Add**, then select **My user account**
    and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **OK** on the **Add or Remove Snap-in** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main window, expand the **Certificates** node and the **Trusted Root
    Certification Authorities** one, select **Certificates** under this node. You’ll
    see all the certificates listed in the middle panel. On the **Action** panel on
    the right, click on **More Actions**, select **All Tasks…** and the click on **Import…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** on the **Certificate Import Wizard** welcome window. Click **Browse**
    on the next window and navigate to the location you noted in *Step 5*. Select
    **Personal Information Exchange (*.pfx, *.p12)** from the file type combobox near
    the **File name** textbox. Then the `PowerBICustomVisualTest_public.pfx` file
    will appear. Select it and click **Open**. Then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the numeric password you noted in *Step 5*, keep the default **Import
    options** and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep **Trusted Root Certification Authorities** as **Certificate store**, click
    **OK**. Click **Next** on the main window, then click **Finish**. You’ll get a
    **Security Warning** window asking if you want to install the certificate. Click
    **Yes** and a **The import was successful** dialog box will appear. Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to verify that everything went well, go back to the PowerShell console,
    enter the `pbiviz` command and press *Enter*. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.5 – pbiviz is installed correctly](img/file402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.5 – pbiviz is installed correctly
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now you have your pbiviz tools properly configured and ready to compile
    a custom visual.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put them to the test right now with an R HTML custom visual.
  prefs: []
  type: TYPE_NORMAL
- en: Developing your first R HTML custom visual
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to create an R HTML custom visual, you must first generate a standard
    Power BI Visual Project of R HTML type starting from the template provided by
    pbiviz tools. Then it is sufficient to modify the scripts provided by the project
    in order to create the visual you want to develop.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will package the dynamic boxplots graph that you met in
    a previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to obtain the `.pbiviz` package:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Windows PowerShell** console from the **Start** menu if you have
    closed it since the last use. The folder in which the console will start by default
    is `C:\Usersers\<your-username>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder dedicated to custom visuals called `Power-BI-Custom-Visuals`
    using the `md Power-BI-Custom-Visuals` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move into the folder you just created using the `cd Power-BI-Custom-Visuals`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a standard R HTML Power BI Visual project from the template by using
    the `pbiviz new interactiveboxplots -t rhtml` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the template folder you just created in VS Code. You will see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.6 – View of the content of the interactiveboxplots folder in VS
    Code](img/file403.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.6 – View of the content of the interactiveboxplots folder in VS Code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will find a complete project ready to be compiled in the `Chapter16\PBI-Visual-Project\interactiveboxplots`
    folder in the GitHub repository. You can use it as a reference for the next steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `pbiviz.json` file of your just-created template to enter the basic
    information about the custom visual you are going to compile. Format it properly
    (right-click on the document and click on **Format Document**). In *Figure 16.7*
    and in the following figures you find on the left a part of the template code,
    and on the right, how it should be modified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Editing of the pbiviz.json file content in VS Code](img/file404.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.7 – Editing of the pbiviz.json file content in VS Code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here are the details of attributes to edit for the `"visual"` node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"name"`: <name-of-your-custom-visual>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"displayName"`: <name-to-display-of-your-visual>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"description"`: <description-of-your-custom-visual>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"supportUrl"`: <url-to-be-contacted-for-support>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the details of attributes to edit for the `"author"` node:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"name"`: <full-name-of-the-author>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"email"`: < email-of-the-author >'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now open the `capabilities.json` file. It is used to declare what data types
    the visualization accepts, what customizable attributes to put in the properties
    panel, and other information needed to create the visualization. It contains several
    root objects. The first one whose contents you need to edit is `dataRoles` ([https://bit.ly/pbiviz-dataroles](https://bit.ly/pbiviz-dataroles)).
    In this section, you can define the data fields that your visual expects. The
    default template has just the unique `Values` field as default, like the standard
    R Visual. In our case, the multivariate boxplot visual needs three fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.8 – Editing the dataRoles section of the capabilities.json file](img/file405.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.8 – Editing the dataRoles section of the capabilities.json file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Based on the items added in the `dataRoles`, you have to change the `capabilities.json`
    file’s `dataViewMappings` root object content accordingly ([https://bit.ly/pbiviz-dataviewmappings](https://bit.ly/pbiviz-dataviewmappings)).
    They describe how data roles relate to each other and allow you to specify conditional
    requirements for data visualization. In our case, we need to declare the three
    fields created in the `dataRoles` as components of the script''s input dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.9 – Editing the dataViewMappings section of the capabilities.json
    file](img/file406.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.9 – Editing the dataViewMappings section of the capabilities.json
    file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, the `“script”` subsection the template refers to the `rcv_script`
    object. We will see that it is defined in the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `capabilities.json` file’s `objects` section describes the customizable
    properties that are associated with the visual and that appear in the **Format**
    pane ([https://bit.ly/pbiviz-objects](https://bit.ly/pbiviz-objects)). In our
    case, we want to parameterize the type of transformation we can apply to the variable
    y. Therefore, we will make sure that the user can select the transformation type
    from the **Y Transformation Type** combobox present in the **Variables Settings**
    section just below the **General** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.10 – Custom parameters into the Format panel](img/file407.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.10 – Custom parameters into the Format panel
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The changes to the script needed to achieve what you see in *Figure 16.10*
    is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.11 – Editing the objects section of the capabilities.json file](img/file408.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.11 – Editing the objects section of the capabilities.json file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `suppressDefaultTitle` parameter allows you to suppress the title that generally
    appears at the top left of each R Visual. As you can see in *Figure 16.11*, the
    `rcv_script` object referenced in the `dataViewMappings` section is defined in
    this section. Contrary to the one you just added, the `rcv_script` object is not
    to be displayed in the **Format** pane, but is only used to describe the attributes
    of the `source` and `provider` objects that define the R script. In order to actually
    declare what parameters are to be displayed in the **Format** pane, you need to
    make a small change to the `settings.ts` file. Let's see how.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `settings.ts` file found in the `src` folder of your Power BI Visual
    project. It contains the settings in TypeScript for the elements to be displayed
    in your visual. Instead of displaying the `rcv_script` object, we can display
    the `settings_variables_params` object that contains our parameter associated
    with the type of transformation to be applied to the y variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.12 – Editing the settings.ts file](img/file409.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.12 – Editing the settings.ts file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For further details about the classes used in this script, take a look at the
    references.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `dependencies.json` file. It contains a reference to each library
    used in the R code that generates the visual. In addition to the ones already
    present (`ggplot2`, `plotly`, `htmlwidgets`, and `xml2`), you also need to add
    the following: `RColorBrewer`, `cowplot`, `dplyr`, `purrr`, `forcats`, and `recipes`.
    Just follow the syntax already used for the existing libraries, keeping in mind
    that you can put any string in `displayName`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, you can enter the R code that generates the visual in the `script.r`
    file. You can replace its entire content with that of the file of the same name
    that you find within the Power BI Visual project shared in the GitHub repository.At
    the beginning of the script, you will find some commented rows used to debug any
    issues in RStudio. Then there is a `source()` command that will load the utility
    functions from the provided `flatten_HTML.r` file in the `r_files` folder. They
    help to convert Plotly or widget objects to self-contained HTML. The next code
    is very similar to what you''ve already seen in the previous sections. There are
    integrated pieces of code to handle the presence of the fields passed to the visual
    as input data and the parameter that handles the type of transformation of the
    variable y. Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `settings_variable_params_y_transf_name` variable name is given by the
    union of the name of the section containing the parameter and the name of the
    parameter itself.Finally, there are two pieces of code at the end of the script.
    One is used to remove some of the icons in the Plotly Modebar:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The other is a workaround for a Plotly bug that displays the outliers of a
    boxplot despite passing the `outlier.shape = NA` parameter to `geom_boxplot()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, the `internalSaveWidget(p, 'out.html')` command uses one of the utility
    functions loaded at the beginning of the script to generate the flattened visual
    in a self-contained HTML with the standard name `out.html` properly managed by
    Power BI.The latest command invokes the `ReadFullFileReplaceString()` function.
    It allows you to replace strings inside the `out.html` file generated by the code
    in order to modify the default configurations generated by Plotly. Specifically,
    the command used here corrects a setting on the padding of the generated HTML
    widget.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now go back to the Windows PowerShell console and make sure you are in the
    `Power-BI-Custom-Visuals\interactiveboxplots` folder. If you were in the `Power-BI-Custom-Visuals`
    folder, just use the `cd interactiveboxplots` command. Then, enter the `pbiviz
    package` command to compile the `.pbiviz` package containing your custom visual.
    At the end of the compiling operations of pbiviz tools, you will see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.13 – Successful compiling of the custom visual](img/file410.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.13 – Successful compiling of the custom visual
  prefs: []
  type: TYPE_NORMAL
- en: 'Very nice job! You compiled your very first R HTML custom visual using the
    pbiviz tools. Okay, but where is the compiled package? Don''t worry, look inside
    the `dist` folder of your Power BI Visual Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.14 – Your .pbiviz package just compiled](img/file411.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.14 – Your .pbiviz package just compiled
  prefs: []
  type: TYPE_NORMAL
- en: There it is! Let's now import it into Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the custom visual package into Power BI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the bulk of the work is done, importing your custom visual into Power
    BI is a breeze. First of all, you need to install the `xml2` package in your R
    engine, as it is used by the provided utility functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open RStudio and make sure it is referencing your latest CRAN R (version 4.0.2
    in our case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Console** window and enter this command: `install.packages(''xml2'')`.
    If you remember, this library is listed in the dependency file you saw in the
    previous section. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now import the custom visual in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that Power BI Desktop references the correct R engine (the latest
    one) in the **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Get Data**, search for `web`, select **Web**, and click on **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following URL as source: [http://bit.ly/titanic-dataset-csv](http://bit.ly/titanic-dataset-csv).
    Then press **OK**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the **File Origin** is **65001: Unicode (UTF-8)** and press
    **Load**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the ellipses under the **Visuals** pane, then click on **Import a visual
    from a file**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.15 – Import a custom visual from file](img/file412.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.15 – Import a custom visual from file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the next open windows, move to the following folder: `C:\Users\<your-username>\Power-BI-Custom-Visuals\interactiveboxplots\dist`.
    Then select your `.pbiviz` package and click on **Open**. Click **OK** on the
    next dialog box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, a new icon has appeared on the **Visuals** pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.16 – Import a custom visual from file](img/file413.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.16 – Import a custom visual from file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep in mind that if you want to use a custom icon for your visual, just replace
    it with the `icon.png` file you find in the `assets` folder of your Power BI Visual
    Project before compiling.Click on it to add your custom visual to your report
    canvas. Then click on **Enable** on the next dialog window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enlarge your custom visual area, then expand the **titanic-dataset-csv** table
    on the **Fields** pane and check first the **Pclass** field, then the **Fare**
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17 – Select the Pclass and Fare fields as X and Y variables](img/file414.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.17 – Select the Pclass and Fare fields as X and Y variables
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take a look at your custom visual. You will see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.18 – Your custom visual showing boxplots for Fare vs Pclass](img/file415.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.18 – Your custom visual showing boxplots for Fare vs Pclass
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now click on the **Format** icon of the visual, expand the **Variables Settings**
    section, and select **Yeo-Johnson** for **Y Transformation Type**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.19 – Select Yeo-Johnson for Y Transformation Type](img/file416.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.19 – Select Yeo-Johnson for Y Transformation Type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take now a look at your custom visual. You will see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.20 – Your custom visual showing boxplots for Fare (transformed)
    vs Pclass](img/file417.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 16.20 – Your custom visual showing boxplots for Fare (transformed) vs
    Pclass
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now go back to the **titanic-dataset-csv** table on the **Fields** pane, check
    the **Sex** field (it will be associated to the visual’s **Grouping Variable**),
    and take a look at the visual again. It will be like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.20 – Your custom visual showing boxplots for Fare (transformed)
    vs Pclass grouped by Sex](img/file418.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.20 – Your custom visual showing boxplots for Fare (transformed) vs
    Pclass grouped by Sex
  prefs: []
  type: TYPE_NORMAL
- en: Really impressive! Your custom interactive visual is awesome and works great!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we learned the advantages of using an interactive visual in
    comparison to a static visual in some cases. We learned how to add some basic
    interactivity to charts developed with Ggplot via Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that the key to making interactive visuals on Power BI is that they
    are based on HTML widgets. We have been therefore guided step by step in the realization
    of a custom visual compiled through the pbiviz tools.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we imported the compiled package into Power BI to test its functionality.
    With this, we’ve come to the end of the book. I hope this journey was fruitful
    and rewarding!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For additional reading, check out the following books and articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Plotly R Open Source Graphing Library* ([https://plotly.com/r/](https://plotly.com/r/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*[Course] R: Interactive Visualizations with htmlwidgets* ([https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome](https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Creating a widget* ([http://www.htmlwidgets.org/develop_intro.html](http://www.htmlwidgets.org/develop_intro.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Power BI Visual Project Structure* ([https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure](https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Schema used in the pbiviz.json file* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Schema used in the capabilities.json file* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Power BI Custom Visual Part 5 – Formatting* ([https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/](https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
