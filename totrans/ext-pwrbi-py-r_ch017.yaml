- en: 16 Interactive R Custom Visuals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16 交互式R自定义视觉
- en: 'In *Chapter 15, Advanced Visualizations*, you saw that it is possible to make
    very complex graphs thanks to the flexibility introduced by **ggplot**. Sometimes,
    however, you have the feeling that you can''t take full advantage of the information
    shown in the graph because of a lack interactivity, such as tooltips. In this
    chapter, you''ll learn how to introduce interactivity into custom graphics created
    using R and by directly using *HTML widgets*. Here are the topics we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第15章，高级可视化*中，您了解到由于**ggplot**引入的灵活性，可以制作非常复杂的图表。然而，有时您可能会觉得由于缺乏交互性，如工具提示，您无法充分利用图表中显示的信息。在本章中，您将学习如何通过直接使用*HTML小部件*将交互性引入使用R创建的自定义图形。以下是我们将要涵盖的主题：
- en: Why interactive R custom visuals?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要交互式R自定义视觉？
- en: Adding a dash of interactivity with Plotly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Plotly添加一点交互性
- en: Exploiting the interactivity provided by HTML widgets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用HTML小部件提供的交互性
- en: Packaging all into a Power BI custom visual
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容打包成Power BI自定义视觉
- en: Importing the custom visual package in Power BI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Power BI中导入自定义视觉包
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to have a working internet connection and **Power
    BI Desktop** installed on your machine. You must have properly configured the
    R and Python engines and IDEs as outlined in *Chapter 2, Configuring R with Power
    BI*, and *Chapter 3, Configuring Python with Power BI*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您拥有一个正常工作的互联网连接，并在您的机器上安装**Power BI桌面版**。您必须已按照*第2章，配置Power BI中的R*和*第3章，配置Power
    BI中的Python*中概述的方式正确配置了R和Python引擎以及IDE。
- en: Why interactive R custom visuals?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么需要交互式R自定义视觉？
- en: 'Let''s start with a graph you''ve already implemented in R. Consider, for example,
    the raincloud plot of `Fare` vs `Pclass` variables introduced in *Chapter 14,
    Exploratory Data Analysis*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从您已经在R中实现的图形开始。例如，考虑*第14章，探索性数据分析*中引入的`Fare`与`Pclass`变量的raincloud图：
- en: '![Figure 16.1 – Raincloud plot for Fare (transformed) and Pclass variables](img/file398.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1 – 票价（转换后）和Pclass变量的Raincloud图](img/file398.png)'
- en: Figure 16.1 – Raincloud plot for Fare (transformed) and Pclass variables
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – 票价（转换后）和Pclass变量的Raincloud图
- en: 'Focus for a moment only on the boxplots you see in *Figure 16.1*. Although
    the `Fare` variable is already transformed according to Yeo-Johnson to try to
    reduce skewness, there remain some extreme outliers for each of the passenger
    classes described by the categorical variable, `Pclass`. If, for example, you
    want to know the values of the transformed variable `Fare` corresponding to the
    whiskers (fences) of the boxplot on the left so that you can then determine the
    outliers located beyond those whiskers, it would be convenient that these values
    appear when you pass the mouse near that boxplot, as in *Figure 16.2*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请暂时只关注您在*图16.1*中看到的箱线图。尽管`Fare`变量已经根据Yeo-Johnson进行了转换以尝试减少偏度，但根据分类变量`Pclass`描述的每个乘客类别仍然存在一些极端的异常值。例如，如果您想了解与左侧箱线图的胡须（围栏）对应的转换变量`Fare`的值，以便您然后确定位于这些胡须之外的异常值，那么当您将鼠标移至该箱线图附近时，这些值出现将会很方便，就像*图16.2*中所示：
- en: '![Figure 16.2 – Main labels shown in the Fare (transformed) boxplot for the
    first class](img/file399.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – 在票价（转换后）箱线图中显示的主要标签](img/file399.png)'
- en: Figure 16.2 – Main labels shown in the Fare (transformed) boxplot for the first
    class
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 在第一类的票价（转换后）箱线图中显示的主要标签
- en: 'It would be even more interesting to know the actual value of a specific isolated
    outlier when you hover the mouse over the point representing it, as in *Figure
    16.3*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将鼠标悬停在表示特定孤立异常值的点上时，了解其实际值将会更有趣，就像*图16.3*中所示：
- en: '![Figure 16.3 – Values of Fare (transformed) and Pclass for the highlighted
    outlier](img/file400.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图16.3 – 高亮显示的异常值对应的票价（转换后）和Pclass的值](img/file400.png)'
- en: Figure 16.3 – Values of Fare (transformed) and Pclass for the highlighted outlier
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3 – 高亮显示的异常值对应的票价（转换后）和Pclass的值
- en: There is no doubt that these interactivities would be welcomed by the analyst
    reading the charts if they were introduced.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，如果引入这些交互式功能，分析图表的读者将会欢迎。
- en: So, let's see how to add these interactivities to an existing graphic developed
    using ggplot.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何将这些交互式功能添加到使用ggplot开发的现有图形中。
- en: Adding a dash of interactivity with Plotly
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Plotly添加一点交互性
- en: 'There is an open source JavaScript library for data visualization, which is
    declarative and high-level and allows you to create dozens of types of interactive
    graphs, named **Plotly.js**. This library is the core of other Plotly client libraries,
    developed for Python, Scala, R, and ggplot. In particular, the library developed
    for R, named **Plotly.R** ([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly)),
    provides the `ggplotly()` function, which does all the magic for us: it detects
    all the basic attributes contained in an existing graph developed with ggplot
    and transforms them into an interactive web visualization. Let''s see an example.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个开源的 JavaScript 数据可视化库，它是声明性和高级的，允许您创建数十种交互式图表，名为 **Plotly.js**。这个库是其他 Plotly
    客户端库的核心，为 Python、Scala、R 和 ggplot 开发。特别是，为 R 开发的库，名为 **Plotly.R** ([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly))，提供了
    `ggplotly()` 函数，为我们完成了所有的魔法：它检测了使用 ggplot 开发的现有图形中包含的所有基本属性，并将它们转换为交互式网络可视化。让我们看一个例子。
- en: First, you need to install the Plotly.R library ([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly))
    on your latest CRAN R engine via the `install.packages('plotly')` script.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要通过 `install.packages('plotly')` 脚本在您最新的 CRAN R 引擎上安装 Plotly.R 库([https://github.com/ropensci/plotly](https://github.com/ropensci/plotly))。
- en: '**Important Note**'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For simplicity, we'll make sure to run the custom visual on the latest version
    of the CRAN R engine, since all the necessary libraries were already installed
    in the previous chapters. If the goal is to publish a report with the custom visual
    on Power BI, you have to make sure that the custom visual is correctly rendered
    on the same R engine present on Power BI (in our case, CRAN R 3.4.4).
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将确保在最新的 CRAN R 引擎上运行自定义视觉，因为所有必要的库已经在之前的章节中安装了。如果目标是发布带有自定义视觉的报告到 Power
    BI，您必须确保自定义视觉在 Power BI 上（在我们的案例中，CRAN R 3.4.4）正确渲染。
- en: 'Then run the script you can find in the `01-interactive-boxplots.R` file in
    the `Chapter16` folder. The content of the script is extrapolated from the various
    scripts used in *Chapter 14, Exploratory Data Analysis*, so there’s nothing new
    to you. The only portion of the script you haven''t seen before is the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行您可以在 `Chapter16` 文件夹中的 `01-interactive-boxplots.R` 文件中找到的脚本。脚本的内容是从 *第
    14 章，数据探索* 中使用的各种脚本中提取的，所以对您来说没有什么新的。您之前没有见过的脚本部分如下：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is the part of code that transforms a static graph into a dynamic HTML-based
    one, and as you can see, it''s one simple call to the `ggplotly()` function. The
    result is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将静态图形转换为基于 HTML 的动态图形的代码部分，如您所见，它是对 `ggplotly()` 函数的一个简单调用。结果如下：
- en: '![Figure 16.4 – Result of applying the ggplotly() function to the raincloud
    plot](img/file401.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.4 – 将 ggplotly() 函数应用于 raincloud 图的结果](img/file401.png)'
- en: Figure 16.4 – Result of applying the ggplotly() function to the raincloud plot
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – 将 ggplotly() 函数应用于 raincloud 图的结果
- en: As you can see, in RStudio the result is no longer shown in the **Plots** tab,
    but in the **Viewer** tab, dedicated to HTML output. You will also notice the
    presence of the **Modebar** in the top-right corner, which allows you to set some
    operations on the chart, such as zoom and hover options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在 RStudio 中，结果不再显示在 **Plots** 选项卡中，而是在 **Viewer** 选项卡中显示，该选项卡专门用于 HTML
    输出。您还会注意到右上角存在 **Modebar**，它允许您对图表设置一些操作，例如缩放和悬停选项。
- en: 'But the most striking thing is that you no longer see a series of raincloud
    plots, as you expected, but simple boxplots! If you look at the RStudio console,
    you will notice that there are three identical warning messages, one for each
    raincloud plot that should have been represented:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但最引人注目的是，您没有看到一系列如预期中的 raincloud 图，而是简单的箱线图！如果您查看 RStudio 控制台，您会注意到有三个相同的警告信息，每个信息对应一个本应表示的
    raincloud 图：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may have noticed that only the density plots have disappeared. This means
    that in the current version of Plotly (4.9.4.1), the objects created by the `ggdist`
    library are not yet managed. Moreover, `ggplotly()` renders fill and color aesthetics
    as distinct, as opposed to `ggplot` static graphs. Surely this functionality still
    needs to be improved and, most likely, these bugs will be handled in future versions.
    In any case, the graph is still usable and shows how easy it is to add interactivity
    to a ggplot graph.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，只有密度图消失了。这意味着在Plotly当前版本（4.9.4.1）中，由`ggdist`库创建的对象尚未得到管理。此外，`ggplotly()`将填充和颜色美学渲染为不同的，这与`ggplot`静态图形不同。当然，这项功能仍需改进，而且很可能会在未来版本中解决这些错误。无论如何，图形仍然可用，并展示了如何轻松地将交互性添加到ggplot图形中。
- en: At this point, you would think that any chart made in HTML and JavaScript could
    then be used in Power BI. Obviously, this is not the case.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能认为任何用HTML和JavaScript制作的图表都可以在Power BI中使用。显然，情况并非如此。
- en: '**Important Note**'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Every interactive graphic that can be used in Power BI must be an *HTML widget*.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在Power BI中使用的每个交互式图形都必须是*HTML小部件*。
- en: In fact, Plotly.R exposes graphs via HTML widgets. Let's see what this is all
    about.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Plotly.R通过HTML小部件暴露图形。让我们看看这是怎么回事。
- en: Exploiting the interactivity provided by HTML widgets
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用HTML小部件提供的交互性
- en: '**HTML widgets** are R packages that allow you to build interactive web pages.
    These packages are generated by a framework used to create a binding between R
    and JavaScript libraries. This framework is made available by the `htmlwidgets`
    package developed by RStudio. HTML widgets are always hosted within an R package,
    including the source code and dependencies, in order to make sure that the widgets
    are fully reproducible even without being able to access the internet. For more
    details on how to develop an HTML widget from scratch, take a look at the references.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML小部件**是允许你构建交互式网页的R包。这些包由一个框架生成，该框架用于在R和JavaScript库之间创建绑定。这个框架由RStudio开发的`htmlwidgets`包提供。HTML小部件始终托管在R包中，包括源代码和依赖项，以确保即使无法访问互联网，小部件也能完全可重复。有关如何从头开始开发HTML小部件的更多详细信息，请参阅参考资料。'
- en: In addition to being able to embed HTML widgets in **RMarkdown** files (dynamic
    documents with R) or **Shiny** applications (interactive web apps built directly
    from R), the `htmlwidgets` package allows you to save them also in standalone
    web page files thanks to the `saveWidget()` function.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够在**RMarkdown**文件（带有R的动态文档）或**Shiny**应用程序（直接从R构建的交互式Web应用程序）中嵌入HTML小部件之外，`htmlwidgets`包还允许你通过`saveWidget()`函数将它们保存为独立的网页文件。
- en: That said, there are hundreds of R packages that expose their functionalities
    in HTML widgets. You can explore the **htmlwidgets gallery** ([http://gallery.htmlwidgets.org/](http://gallery.htmlwidgets.org/))
    to search for interactive graphics that may be appropriate for you.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，有成百上千的R包通过HTML小部件暴露其功能。你可以通过**htmlwidgets图库**([http://gallery.htmlwidgets.org/](http://gallery.htmlwidgets.org/))来搜索可能适合你的交互式图形。
- en: Okay, it is possible to visualize these HTML widgets, both those in the gallery
    and those made through Plotly, in Power BI. That sounds good. But how do you embed
    a dynamic graph made in HTML and JavaScript into Power BI? You must compile an
    R-powered visual via the *pbiviz tools*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在Power BI中可视化这些HTML小部件是可能的，无论是图库中的还是通过Plotly制作的，这听起来不错。但如何将用HTML和JavaScript制作的动态图形嵌入到Power
    BI中呢？你必须通过*pbiviz工具*编译一个由R驱动的视觉。
- en: Let's see how it's done.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何操作。
- en: Packaging it all into a Power BI Custom Visual
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容打包成Power BI自定义视觉
- en: '**Power BI Visual Tools** (**pbiviz**) are the easiest way to build custom
    visuals in Power BI. They are written in **JavaScript** (using **Node.js**) and
    are used to compile the source code of **.pbiviz packages**. A .pbiviz package
    is a zipped version of the **Power BI Visual Project**, which in turn is a set
    of folders, scripts, and assets needed to create the custom visualization you
    want to implement. Generally, a standard Power BI Visual Project is created from
    a template thanks to the pbiviz command-line tools. The template contents depend
    on the method by which you want to create the custom visual (**TypeScript**, **R
    Visual**, or **R HTML**).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Power BI 视觉工具**（**pbiviz**）是构建 Power BI 中定制视觉元素的最简单方法。它们是用 **JavaScript**（使用
    **Node.js**）编写的，并用于编译 **.pbiviz 软件包**的源代码。一个 .pbiviz 软件包是 **Power BI 视觉项目**的压缩版本，而
    **Power BI 视觉项目**又是一组文件夹、脚本和资产，用于创建你想要实现的定制可视化。通常，标准的 Power BI 视觉项目是通过 pbiviz
    命令行工具从模板创建的。模板内容取决于你想要创建定制视觉的方法（**TypeScript**、**R Visual** 或 **R HTML**）。'
- en: '**Important Note**'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The pbiviz tools do not support any technology that uses Python behind the scenes,
    such as the *ipywidget widgets*.
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: pbiviz 工具不支持任何在后台使用 Python 的技术，例如 *ipywidget 小部件*。
- en: In the light of this, it is worth learning R and ggplot a little more in order
    to be able to develop interesting custom visuals using the R Visual and R HTML
    modes. In addition to this, as mentioned at the end of *Chapter 2, Configuring
    R With Power BI*, take the following note into account.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，为了能够使用 R Visual 和 R HTML 模式开发有趣的定制视觉元素，值得稍微学习 R 和 ggplot。此外，如 *第 2 章，配置
    Power BI 中的 R* 的结尾所述，请注意以下事项。
- en: '**Important Note**'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The *Publish to web* option in Power BI does not allow you to publish reports
    that contain standard R Visuals. You can work around this limitation by creating
    R custom visuals, which are allowed to be published with this option.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Power BI 中的 **发布到 Web** 选项不允许你发布包含标准 R 视觉元素的报告。你可以通过创建允许与该选项一起发布的 R 定制视觉来绕过这个限制。
- en: Now let's see how to install the pbiviz tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何安装 pbiviz 工具。
- en: Installing the pbiviz package
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 pbiviz 软件包
- en: pbiviz command-line tools provide everything you need to develop visuals and
    test them in reports and dashboards on Power BI service. For this very last reason,
    you need to install an SSL certificate too, so that your laptop can interact securely
    with the Power BI service.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: pbiviz 命令行工具提供了你在 Power BI 服务上开发视觉元素和测试报告和仪表板所需的一切。正因为如此，你需要安装一个 SSL 证书，以便你的笔记本电脑可以安全地与
    Power BI 服务交互。
- en: 'Let''s see how to do everything step by step:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地看看如何做：
- en: Go to [https://nodejs.org/en/](https://nodejs.org/en/) and install the Node.js
    version recommended for all users, following the default options set by the installer.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://nodejs.org/en/](https://nodejs.org/en/) 并安装为所有用户推荐的 Node.js 版本，按照安装程序的默认选项进行。
- en: Restart your laptop, as this is mandatory for the *Step 4* command to work.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动你的笔记本电脑，因为这是 *步骤 4* 命令正常工作的必要条件。
- en: Click on the Windows **Start** button and start entering the string `“power”`,
    then click on the **Windows PowerShell** app.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Windows **开始** 按钮，开始输入字符串 `“power”`，然后点击 **Windows PowerShell** 应用程序。
- en: 'Enter the following command in the PowerShell console: `npm i -g powerbi-visuals-tools`.
    If you get some deprecation warnings, don’t worry and wait for the installation
    to complete.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 控制台中输入以下命令：`npm i -g powerbi-visuals-tools`。如果你收到一些弃用警告，不要担心，等待安装完成。
- en: 'Enter the following command in the PowerShell console: `pbiviz --install-cert`.
    It returns a location in which the PFX file is created (it should be `C:\Users\<your-username>\AppData\Roaming\npm\node_modules\powerbi-visuals-tools\certs`)
    and a numeric passphrase. Take note of both as you’ll need them later.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 控制台中输入以下命令：`pbiviz --install-cert`。它返回一个位置，其中创建了 PFX 文件（应该是 `C:\Users\<你的用户名>\AppData\Roaming\npm\node_modules\powerbi-visuals-tools\certs`）和一个数字密码。注意这两个，因为你稍后需要它们。
- en: Press **Win**+**R** and enter `mmc` in the **Open** textbox. It will open the
    **Microsoft Management Console**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 **Win**+**R** 并在 **打开** 文本框中输入 `mmc`。它将打开 **Microsoft 管理控制台**。
- en: Click on **File**, then click on **Add/Remove Snap-in…**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件**，然后点击 **添加/删除插件…**。
- en: Select **Certificates** and click on **Add**, then select **My user account**
    and click **Finish**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **证书**，然后点击 **添加**，接着选择 **我的用户帐户** 并点击 **完成**。
- en: Press **OK** on the **Add or Remove Snap-in** window.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加或删除插件** 窗口中点击 **确定**。
- en: In the main window, expand the **Certificates** node and the **Trusted Root
    Certification Authorities** one, select **Certificates** under this node. You’ll
    see all the certificates listed in the middle panel. On the **Action** panel on
    the right, click on **More Actions**, select **All Tasks…** and the click on **Import…**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主窗口中，展开**证书**节点和**受信任根证书颁发机构**节点，选择此节点下的**证书**。您将在中间面板中看到所有证书的列表。在右侧的**操作**面板上，点击**更多操作**，选择**所有任务…**，然后点击**导入…**。
- en: Click **Next** on the **Certificate Import Wizard** welcome window. Click **Browse**
    on the next window and navigate to the location you noted in *Step 5*. Select
    **Personal Information Exchange (*.pfx, *.p12)** from the file type combobox near
    the **File name** textbox. Then the `PowerBICustomVisualTest_public.pfx` file
    will appear. Select it and click **Open**. Then click **Next**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**证书导入向导**的欢迎窗口中点击**下一步**。在下一个窗口中点击**浏览**，导航到您在*步骤5*中记录的位置。从**文件名**文本框附近的文件类型组合框中选择**个人信息交换
    (*.pfx, *.p12)**。然后会出现`PowerBICustomVisualTest_public.pfx`文件。选择它并点击**打开**。然后点击**下一步**。
- en: Enter the numeric password you noted in *Step 5*, keep the default **Import
    options** and click on **Next**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您在*步骤5*中记录的数字密码，保留默认的**导入选项**，并点击**下一步**。
- en: Keep **Trusted Root Certification Authorities** as **Certificate store**, click
    **OK**. Click **Next** on the main window, then click **Finish**. You’ll get a
    **Security Warning** window asking if you want to install the certificate. Click
    **Yes** and a **The import was successful** dialog box will appear. Click **OK**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**受信任根证书颁发机构**作为**证书存储**，点击**确定**。在主窗口中点击**下一步**，然后点击**完成**。您将看到一个**安全警告**窗口询问您是否要安装证书。点击**是**，将出现一个**导入成功**对话框。点击**确定**。
- en: 'In order to verify that everything went well, go back to the PowerShell console,
    enter the `pbiviz` command and press *Enter*. You should see the following output:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证一切是否顺利，返回到PowerShell控制台，输入`pbiviz`命令并按*Enter*。您应该看到以下输出：
- en: '![Figure 16.5 – pbiviz is installed correctly](img/file402.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – pbiviz已正确安装](img/file402.png)'
- en: Figure 16.5 – pbiviz is installed correctly
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – pbiviz已正确安装
- en: Great! Now you have your pbiviz tools properly configured and ready to compile
    a custom visual.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在您已经正确配置了pbiviz工具，并准备好编译自定义视觉。
- en: Let's put them to the test right now with an R HTML custom visual.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在用R HTML自定义视觉来测试它们。
- en: Developing your first R HTML custom visual
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发您的第一个R HTML自定义视觉
- en: In order to create an R HTML custom visual, you must first generate a standard
    Power BI Visual Project of R HTML type starting from the template provided by
    pbiviz tools. Then it is sufficient to modify the scripts provided by the project
    in order to create the visual you want to develop.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个R HTML自定义视觉，您必须首先从pbiviz工具提供的模板开始生成一个标准的Power BI Visual项目，类型为R HTML。然后，您只需修改项目提供的脚本，以创建您想要开发的视觉。
- en: In this section, you will package the dynamic boxplots graph that you met in
    a previous section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将包装在前一节中遇到的动态箱线图图形。
- en: 'Here are the steps to obtain the `.pbiviz` package:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`.pbiviz`包的步骤如下：
- en: Open the **Windows PowerShell** console from the **Start** menu if you have
    closed it since the last use. The folder in which the console will start by default
    is `C:\Usersers\<your-username>`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您上次使用后已关闭，请从**开始**菜单打开**Windows PowerShell**控制台。控制台将默认启动的文件夹是`C:\Usersers\<您的用户名>`。
- en: Create a folder dedicated to custom visuals called `Power-BI-Custom-Visuals`
    using the `md Power-BI-Custom-Visuals` command.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`md Power-BI-Custom-Visuals`命令创建一个名为`Power-BI-Custom-Visuals`的文件夹，专门用于自定义视觉。
- en: Move into the folder you just created using the `cd Power-BI-Custom-Visuals`
    command.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd Power-BI-Custom-Visuals`命令进入您刚刚创建的文件夹。
- en: Generate a standard R HTML Power BI Visual project from the template by using
    the `pbiviz new interactiveboxplots -t rhtml` command.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pbiviz new interactiveboxplots -t rhtml`命令从模板生成一个标准的R HTML Power BI Visual项目。
- en: 'Open the template folder you just created in VS Code. You will see something
    like this:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中打开您刚刚创建的模板文件夹。您会看到如下内容：
- en: '![Figure 16.6 – View of the content of the interactiveboxplots folder in VS
    Code](img/file403.png)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.6 – VS Code中交互式箱线图文件夹的内容视图](img/file403.png)'
- en: Figure 16.6 – View of the content of the interactiveboxplots folder in VS Code
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.6 – VS Code中交互式箱线图文件夹的内容视图
- en: You will find a complete project ready to be compiled in the `Chapter16\PBI-Visual-Project\interactiveboxplots`
    folder in the GitHub repository. You can use it as a reference for the next steps.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在 GitHub 仓库的 `Chapter16\PBI-Visual-Project\interactiveboxplots` 文件夹中找到一个完整的、准备好编译的项目。您可以用它作为下一步的参考。
- en: 'Open the `pbiviz.json` file of your just-created template to enter the basic
    information about the custom visual you are going to compile. Format it properly
    (right-click on the document and click on **Format Document**). In *Figure 16.7*
    and in the following figures you find on the left a part of the template code,
    and on the right, how it should be modified:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您刚刚创建的模板的 `pbiviz.json` 文件，以输入您将要编译的自定义视觉的基本信息。请正确格式化（右键点击文档并点击 **格式文档**）。在
    *图16.7* 和随后的图中，您可以在左侧找到模板代码的一部分，在右侧，您可以找到应该如何修改：
- en: '![Figure 16.7 – Editing of the pbiviz.json file content in VS Code](img/file404.png)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.7 – 在 VS Code 中编辑 pbiviz.json 文件内容](img/file404.png)'
- en: Figure 16.7 – Editing of the pbiviz.json file content in VS Code
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.7 – 在 VS Code 中编辑 pbiviz.json 文件内容
- en: 'Here are the details of attributes to edit for the `"visual"` node:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是编辑 `"visual"` 节点属性详情：
- en: '`"name"`: <name-of-your-custom-visual>'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"name"`: <您的自定义视觉名称>'
- en: '`"displayName"`: <name-to-display-of-your-visual>'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"displayName"`: <显示的自定义视觉名称>'
- en: '`"description"`: <description-of-your-custom-visual>'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"description"`: <自定义视觉的描述>'
- en: '`"supportUrl"`: <url-to-be-contacted-for-support>'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"supportUrl"`: <支持联系网址>'
- en: 'Here are the details of attributes to edit for the `"author"` node:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是编辑 `"author"` 节点属性详情：
- en: '`"name"`: <full-name-of-the-author>'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"name"`: <作者的全名>'
- en: '`"email"`: < email-of-the-author >'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"email"`: <作者的电子邮件>'
- en: 'Now open the `capabilities.json` file. It is used to declare what data types
    the visualization accepts, what customizable attributes to put in the properties
    panel, and other information needed to create the visualization. It contains several
    root objects. The first one whose contents you need to edit is `dataRoles` ([https://bit.ly/pbiviz-dataroles](https://bit.ly/pbiviz-dataroles)).
    In this section, you can define the data fields that your visual expects. The
    default template has just the unique `Values` field as default, like the standard
    R Visual. In our case, the multivariate boxplot visual needs three fields:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `capabilities.json` 文件。它用于声明可视化接受的哪些数据类型，在属性面板中放置哪些可自定义属性，以及其他创建可视化所需的信息。它包含几个根对象。您需要编辑的第一个是
    `dataRoles` ([https://bit.ly/pbiviz-dataroles](https://bit.ly/pbiviz-dataroles))。在这个部分，您可以定义您的视觉期望的数据字段。默认模板只有唯一的
    `Values` 字段作为默认值，就像标准的 R Visual 一样。在我们的案例中，多元方差箱线图视觉需要三个字段：
- en: '![Figure 16.8 – Editing the dataRoles section of the capabilities.json file](img/file405.png)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.8 – 编辑 capabilities.json 文件中的 dataRoles 部分](img/file405.png)'
- en: Figure 16.8 – Editing the dataRoles section of the capabilities.json file
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.8 – 编辑 capabilities.json 文件中的 dataRoles 部分
- en: 'Based on the items added in the `dataRoles`, you have to change the `capabilities.json`
    file’s `dataViewMappings` root object content accordingly ([https://bit.ly/pbiviz-dataviewmappings](https://bit.ly/pbiviz-dataviewmappings)).
    They describe how data roles relate to each other and allow you to specify conditional
    requirements for data visualization. In our case, we need to declare the three
    fields created in the `dataRoles` as components of the script''s input dataset:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据在 `dataRoles` 中添加的项目，您必须相应地更改 `capabilities.json` 文件的 `dataViewMappings` 根对象内容（[https://bit.ly/pbiviz-dataviewmappings](https://bit.ly/pbiviz-dataviewmappings)）。它们描述了数据角色之间的关系，并允许您指定数据可视化的条件要求。在我们的案例中，我们需要声明在
    `dataRoles` 中创建的三个字段作为脚本输入数据集的组成部分：
- en: '![Figure 16.9 – Editing the dataViewMappings section of the capabilities.json
    file](img/file406.png)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.9 – 编辑 capabilities.json 文件中的 dataViewMappings 部分](img/file406.png)'
- en: Figure 16.9 – Editing the dataViewMappings section of the capabilities.json
    file
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.9 – 编辑 capabilities.json 文件中的 dataViewMappings 部分
- en: As you can see, the `“script”` subsection the template refers to the `rcv_script`
    object. We will see that it is defined in the next section.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，模板中引用的 `“script”` 子部分指的是 `rcv_script` 对象。我们将在下一节中看到它是如何定义的。
- en: 'The `capabilities.json` file’s `objects` section describes the customizable
    properties that are associated with the visual and that appear in the **Format**
    pane ([https://bit.ly/pbiviz-objects](https://bit.ly/pbiviz-objects)). In our
    case, we want to parameterize the type of transformation we can apply to the variable
    y. Therefore, we will make sure that the user can select the transformation type
    from the **Y Transformation Type** combobox present in the **Variables Settings**
    section just below the **General** section:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`capabilities.json`文件的`objects`部分描述了与可视化关联并可出现在**格式**面板中的可自定义属性（[https://bit.ly/pbiviz-objects](https://bit.ly/pbiviz-objects)）。在我们的情况下，我们想要参数化可以应用于变量y的转换类型。因此，我们将确保用户可以从位于**常规**部分下方**变量设置**部分的**Y转换类型**组合框中选择转换类型：'
- en: '![Figure 16.10 – Custom parameters into the Format panel](img/file407.png)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.10 – 将自定义参数添加到格式面板](img/file407.png)'
- en: Figure 16.10 – Custom parameters into the Format panel
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.10 – 将自定义参数添加到格式面板
- en: 'The changes to the script needed to achieve what you see in *Figure 16.10*
    is as follows:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现如图16.10所示效果的脚本更改如下：
- en: '![Figure 16.11 – Editing the objects section of the capabilities.json file](img/file408.png)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.11 – 编辑`capabilities.json`文件的对象部分](img/file408.png)'
- en: Figure 16.11 – Editing the objects section of the capabilities.json file
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.11 – 编辑`capabilities.json`文件的对象部分
- en: The `suppressDefaultTitle` parameter allows you to suppress the title that generally
    appears at the top left of each R Visual. As you can see in *Figure 16.11*, the
    `rcv_script` object referenced in the `dataViewMappings` section is defined in
    this section. Contrary to the one you just added, the `rcv_script` object is not
    to be displayed in the **Format** pane, but is only used to describe the attributes
    of the `source` and `provider` objects that define the R script. In order to actually
    declare what parameters are to be displayed in the **Format** pane, you need to
    make a small change to the `settings.ts` file. Let's see how.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`suppressDefaultTitle`参数允许你抑制通常出现在每个R可视化左上角的标题。正如你在图16.11中看到的那样，`dataViewMappings`部分中引用的`rcv_script`对象在此部分定义。与刚刚添加的不同，`rcv_script`对象不应在**格式**面板中显示，而仅用于描述定义R脚本的`source`和`provider`对象的属性。为了实际上声明要在**格式**面板中显示的参数，你需要对`settings.ts`文件进行一些小的修改。让我们看看如何做。'
- en: 'Open the `settings.ts` file found in the `src` folder of your Power BI Visual
    project. It contains the settings in TypeScript for the elements to be displayed
    in your visual. Instead of displaying the `rcv_script` object, we can display
    the `settings_variables_params` object that contains our parameter associated
    with the type of transformation to be applied to the y variable:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于Power BI Visual项目`src`文件夹中的`settings.ts`文件。它包含要在你的可视化中显示的元素的TypeScript设置。我们不是显示`rcv_script`对象，而是显示包含与要对y变量应用转换类型关联的参数的`settings_variables_params`对象：
- en: '![Figure 16.12 – Editing the settings.ts file](img/file409.png)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图16.12 – 编辑`settings.ts`文件](img/file409.png)'
- en: Figure 16.12 – Editing the settings.ts file
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.12 – 编辑`settings.ts`文件
- en: For further details about the classes used in this script, take a look at the
    references.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于此脚本中使用的类的更多详细信息，请参阅参考资料。
- en: 'Open the `dependencies.json` file. It contains a reference to each library
    used in the R code that generates the visual. In addition to the ones already
    present (`ggplot2`, `plotly`, `htmlwidgets`, and `xml2`), you also need to add
    the following: `RColorBrewer`, `cowplot`, `dplyr`, `purrr`, `forcats`, and `recipes`.
    Just follow the syntax already used for the existing libraries, keeping in mind
    that you can put any string in `displayName`.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`dependencies.json`文件。它包含了对生成可视化的R代码中使用的每个库的引用。除了已经存在的（`ggplot2`、`plotly`、`htmlwidgets`和`xml2`）之外，你还需要添加以下库：`RColorBrewer`、`cowplot`、`dplyr`、`purrr`、`forcats`和`recipes`。只需遵循现有库已使用的语法，同时记住你可以在`displayName`中放入任何字符串。
- en: 'Finally, you can enter the R code that generates the visual in the `script.r`
    file. You can replace its entire content with that of the file of the same name
    that you find within the Power BI Visual project shared in the GitHub repository.At
    the beginning of the script, you will find some commented rows used to debug any
    issues in RStudio. Then there is a `source()` command that will load the utility
    functions from the provided `flatten_HTML.r` file in the `r_files` folder. They
    help to convert Plotly or widget objects to self-contained HTML. The next code
    is very similar to what you''ve already seen in the previous sections. There are
    integrated pieces of code to handle the presence of the fields passed to the visual
    as input data and the parameter that handles the type of transformation of the
    variable y. Here’s an example:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以在`script.r`文件中输入生成视觉的R代码。您可以用在GitHub仓库中共享的Power BI视觉项目中的同名文件内容替换其全部内容。在脚本的开头，您会找到一些用于在RStudio中调试任何问题的注释行。然后是一个`source()`命令，它将从`r_files`文件夹中提供的`flatten_HTML.r`文件加载实用函数。它们有助于将Plotly或小部件对象转换为自包含的HTML。接下来的代码与您在前面章节中看到的非常相似。这里集成了处理传递给视觉作为输入数据的字段和用于处理变量y转换类型的参数的代码片段。以下是一个示例：
- en: '[PRE2]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `settings_variable_params_y_transf_name` variable name is given by the
    union of the name of the section containing the parameter and the name of the
    parameter itself.Finally, there are two pieces of code at the end of the script.
    One is used to remove some of the icons in the Plotly Modebar:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`settings_variable_params_y_transf_name`变量名由包含该参数的节名称和参数本身的名称的并集给出。最后，在脚本末尾有两段代码。一段用于从Plotly
    Modebar中删除一些图标：'
- en: '[PRE3]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The other is a workaround for a Plotly bug that displays the outliers of a
    boxplot despite passing the `outlier.shape = NA` parameter to `geom_boxplot()`:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个是针对Plotly错误的解决方案，即使传递了`outlier.shape = NA`参数给`geom_boxplot()`，它也会显示箱线图的异常值：
- en: '[PRE4]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, the `internalSaveWidget(p, 'out.html')` command uses one of the utility
    functions loaded at the beginning of the script to generate the flattened visual
    in a self-contained HTML with the standard name `out.html` properly managed by
    Power BI.The latest command invokes the `ReadFullFileReplaceString()` function.
    It allows you to replace strings inside the `out.html` file generated by the code
    in order to modify the default configurations generated by Plotly. Specifically,
    the command used here corrects a setting on the padding of the generated HTML
    widget.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，`internalSaveWidget(p, 'out.html')`命令使用脚本开头加载的其中一个实用函数来生成一个自包含的HTML格式的扁平化视觉，并以标准名称`out.html`正确管理，由Power
    BI管理。最后的命令调用了`ReadFullFileReplaceString()`函数。它允许您替换由代码生成的`out.html`文件中的字符串，以便修改由Plotly生成的默认配置。具体来说，这里使用的命令纠正了生成的HTML小部件的填充设置。
- en: 'Now go back to the Windows PowerShell console and make sure you are in the
    `Power-BI-Custom-Visuals\interactiveboxplots` folder. If you were in the `Power-BI-Custom-Visuals`
    folder, just use the `cd interactiveboxplots` command. Then, enter the `pbiviz
    package` command to compile the `.pbiviz` package containing your custom visual.
    At the end of the compiling operations of pbiviz tools, you will see something
    like this:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到Windows PowerShell控制台，确保您位于`Power-BI-Custom-Visuals\interactiveboxplots`文件夹中。如果您在`Power-BI-Custom-Visuals`文件夹中，只需使用`cd
    interactiveboxplots`命令。然后，输入`pbiviz package`命令来编译包含您的自定义视觉的.pbiviz包。在pbiviz工具的编译操作结束时，您将看到类似以下内容：
- en: '![Figure 16.13 – Successful compiling of the custom visual](img/file410.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图16.13 – 自定义视觉编译成功](img/file410.png)'
- en: Figure 16.13 – Successful compiling of the custom visual
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.13 – 自定义视觉编译成功
- en: 'Very nice job! You compiled your very first R HTML custom visual using the
    pbiviz tools. Okay, but where is the compiled package? Don''t worry, look inside
    the `dist` folder of your Power BI Visual Project:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 干得非常好！您已使用pbiviz工具编译了您的第一个R HTML自定义视觉。好吧，编译好的包在哪里？别担心，查看您的Power BI视觉项目中的`dist`文件夹。
- en: '![Figure 16.14 – Your .pbiviz package just compiled](img/file411.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图16.14 – 您刚刚编译的.pbiviz包](img/file411.png)'
- en: Figure 16.14 – Your .pbiviz package just compiled
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.14 – 您刚刚编译的.pbiviz包
- en: There it is! Let's now import it into Power BI.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里！现在让我们将其导入Power BI。
- en: Importing the custom visual package into Power BI
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自定义视觉包导入Power BI
- en: 'Now that the bulk of the work is done, importing your custom visual into Power
    BI is a breeze. First of all, you need to install the `xml2` package in your R
    engine, as it is used by the provided utility functions:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在大部分工作已经完成，将自定义视觉导入 Power BI 就变得非常简单。首先，您需要在 R 引擎中安装 `xml2` 包，因为它被提供的实用函数所使用：
- en: Open RStudio and make sure it is referencing your latest CRAN R (version 4.0.2
    in our case).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 RStudio 并确保它引用的是您最新的 CRAN R（在我们的案例中是版本 4.0.2）。
- en: 'Click on the **Console** window and enter this command: `install.packages(''xml2'')`.
    If you remember, this library is listed in the dependency file you saw in the
    previous section. Then, press *Enter*.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **控制台** 窗口并输入以下命令：`install.packages('xml2')`。如果您记得，这个库在之前章节中看到的依赖文件中列出。然后，按
    *Enter*。
- en: 'Let''s now import the custom visual in Power BI:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将自定义视觉导入 Power BI：
- en: Make sure that Power BI Desktop references the correct R engine (the latest
    one) in the **Options**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Power BI Desktop 在 **选项** 中引用的是正确的 R 引擎（最新的一个）。
- en: Click on **Get Data**, search for `web`, select **Web**, and click on **Connect**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **获取数据**，搜索 `web`，选择 **Web**，然后点击 **连接**。
- en: 'Enter the following URL as source: [http://bit.ly/titanic-dataset-csv](http://bit.ly/titanic-dataset-csv).
    Then press **OK**.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下 URL 作为源：[http://bit.ly/titanic-dataset-csv](http://bit.ly/titanic-dataset-csv)。然后按
    **确定**。
- en: 'Make sure that the **File Origin** is **65001: Unicode (UTF-8)** and press
    **Load**.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保文件源是 **65001: Unicode (UTF-8**) 并按 **加载**。'
- en: 'Click the ellipses under the **Visuals** pane, then click on **Import a visual
    from a file**:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **视觉** 面板下的省略号，然后点击 **从文件导入视觉**：
- en: '![Figure 16.15 – Import a custom visual from file](img/file412.png)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.15 – 从文件导入自定义视觉](img/file412.png)'
- en: Figure 16.15 – Import a custom visual from file
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.15 – 从文件导入自定义视觉
- en: 'In the next open windows, move to the following folder: `C:\Users\<your-username>\Power-BI-Custom-Visuals\interactiveboxplots\dist`.
    Then select your `.pbiviz` package and click on **Open**. Click **OK** on the
    next dialog box.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个打开的窗口中，移动到以下文件夹：`C:\Users\<your-username>\Power-BI-Custom-Visuals\interactiveboxplots\dist`。然后选择您的
    `.pbiviz` 包并点击 **打开**。在下一个对话框中点击 **确定**。
- en: 'As you can see, a new icon has appeared on the **Visuals** pane:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，在 **视觉** 面板上出现了一个新的图标：
- en: '![Figure 16.16 – Import a custom visual from file](img/file413.png)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.16 – 从文件导入自定义视觉](img/file413.png)'
- en: Figure 16.16 – Import a custom visual from file
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.16 – 从文件导入自定义视觉
- en: Keep in mind that if you want to use a custom icon for your visual, just replace
    it with the `icon.png` file you find in the `assets` folder of your Power BI Visual
    Project before compiling.Click on it to add your custom visual to your report
    canvas. Then click on **Enable** on the next dialog window.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，如果您想为您的视觉使用自定义图标，只需在编译前用 `assets` 文件夹中的 `icon.png` 文件替换它。点击它以将您的自定义视觉添加到报告画布上。然后在下一个对话框中点击
    **启用**。
- en: 'Enlarge your custom visual area, then expand the **titanic-dataset-csv** table
    on the **Fields** pane and check first the **Pclass** field, then the **Fare**
    field:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩大自定义视觉区域，然后在 **字段** 面板上展开 **titanic-dataset-csv** 表，首先检查 **舱等** 字段，然后是 **票价**
    字段：
- en: '![Figure 16.17 – Select the Pclass and Fare fields as X and Y variables](img/file414.png)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.17 – 选择舱等和票价字段作为 X 和 Y 变量](img/file414.png)'
- en: Figure 16.17 – Select the Pclass and Fare fields as X and Y variables
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.17 – 选择舱等和票价字段作为 X 和 Y 变量
- en: 'Take a look at your custom visual. You will see something like this:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看您的自定义视觉。您将看到类似以下内容：
- en: '![Figure 16.18 – Your custom visual showing boxplots for Fare vs Pclass](img/file415.png)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.18 – 显示票价与舱等对比的箱线图的自定义视觉](img/file415.png)'
- en: Figure 16.18 – Your custom visual showing boxplots for Fare vs Pclass
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.18 – 显示票价与舱等对比的箱线图的自定义视觉
- en: 'Now click on the **Format** icon of the visual, expand the **Variables Settings**
    section, and select **Yeo-Johnson** for **Y Transformation Type**:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击视觉的 **格式** 图标，展开 **变量设置** 部分，并选择 **Yeo-Johnson** 作为 **Y 变换类型**：
- en: '![Figure 16.19 – Select Yeo-Johnson for Y Transformation Type](img/file416.png)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.19 – 选择 Yeo-Johnson 作为 Y 变换类型](img/file416.png)'
- en: Figure 16.19 – Select Yeo-Johnson for Y Transformation Type
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.19 – 选择 Yeo-Johnson 作为 Y 变换类型
- en: 'Take now a look at your custom visual. You will see something like this:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在查看您的自定义视觉。您将看到类似以下内容：
- en: '![Figure 16.20 – Your custom visual showing boxplots for Fare (transformed)
    vs Pclass](img/file417.png)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 16.20 – 显示票价（转换后）与舱等对比的箱线图的自定义视觉](img/file417.png)'
- en: Figure 16.20 – Your custom visual showing boxplots for Fare (transformed) vs
    Pclass
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.20 – 显示票价（转换后）与舱等对比的箱线图的自定义视觉
- en: 'Now go back to the **titanic-dataset-csv** table on the **Fields** pane, check
    the **Sex** field (it will be associated to the visual’s **Grouping Variable**),
    and take a look at the visual again. It will be like the following:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到 **titanic-dataset-csv** 表格上的 **字段** 面板，检查 **Sex** 字段（它将与视觉的 **分组变量** 关联），然后再看看这个视觉。它将如下所示：
- en: '![Figure 16.20 – Your custom visual showing boxplots for Fare (transformed)
    vs Pclass grouped by Sex](img/file418.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.20 – 您的自定义可视化，显示票价（转换后）与 Pclass 按性别分组的箱线图](img/file418.png)'
- en: Figure 16.20 – Your custom visual showing boxplots for Fare (transformed) vs
    Pclass grouped by Sex
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.20 – 您的自定义可视化，显示票价（转换后）与 Pclass 按性别分组的箱线图
- en: Really impressive! Your custom interactive visual is awesome and works great!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很令人印象深刻！您的自定义交互式可视化效果棒极了，而且工作得非常好！
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the advantages of using an interactive visual in
    comparison to a static visual in some cases. We learned how to add some basic
    interactivity to charts developed with Ggplot via Plotly.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了在某些情况下使用交互式可视化相对于静态可视化的优势。我们学习了如何通过 Plotly 为使用 Ggplot 开发的图表添加一些基本交互性。
- en: We learned that the key to making interactive visuals on Power BI is that they
    are based on HTML widgets. We have been therefore guided step by step in the realization
    of a custom visual compiled through the pbiviz tools.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，在 Power BI 上制作交互式视觉的关键在于它们基于 HTML 小部件。因此，我们通过 pbiviz 工具逐步实现了自定义可视化。
- en: Finally, we imported the compiled package into Power BI to test its functionality.
    With this, we’ve come to the end of the book. I hope this journey was fruitful
    and rewarding!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将编译好的包导入 Power BI 以测试其功能。至此，本书的内容就结束了。希望这次旅程是富有成效且令人满意的！
- en: References
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'For additional reading, check out the following books and articles:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于进一步阅读，请参阅以下书籍和文章：
- en: '*Plotly R Open Source Graphing Library* ([https://plotly.com/r/](https://plotly.com/r/))'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Plotly R 开源绘图库* ([https://plotly.com/r/](https://plotly.com/r/))'
- en: '*[Course] R: Interactive Visualizations with htmlwidgets* ([https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome](https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome))'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*[课程] R: 使用 htmlwidgets 进行交互式可视化* ([https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome](https://www.linkedin.com/learning/r-interactive-visualizations-with-htmlwidgets/welcome))'
- en: '*Creating a widget* ([http://www.htmlwidgets.org/develop_intro.html](http://www.htmlwidgets.org/develop_intro.html))'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*创建小部件* ([http://www.htmlwidgets.org/develop_intro.html](http://www.htmlwidgets.org/develop_intro.html))'
- en: '*Power BI Visual Project Structure* ([https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure](https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure))'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Power BI 可视化项目结构* ([https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure](https://docs.microsoft.com/en-us/power-bi/developer/visuals/visual-project-structure))'
- en: '*Schema used in the pbiviz.json file* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json))'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*pbiviz.json 文件中使用的模式* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.pbiviz.json))'
- en: '*Schema used in the capabilities.json file* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json))'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*capabilities.json 文件中使用的模式* ([https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json](https://github.com/microsoft/PowerBI-visuals-tools/blob/main/templates/visuals/.api/v1.13.0/schema.capabilities.json))'
- en: '*Power BI Custom Visual Part 5 – Formatting* ([https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/](https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/))'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Power BI 自定义可视化第 5 部分 – 格式化* ([https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/](https://shetland.azurewebsites.net/2021/02/18/power-bi-custom-visual-part-5-formatting/))'
