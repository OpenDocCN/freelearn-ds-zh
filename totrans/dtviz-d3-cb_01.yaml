- en: Chapter 1. Getting Started with D3.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a simple D3 development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an NPM-based development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding D3-style JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is designed to get you up and running with D3.js, covering fundamental
    aspects, such as what D3.js is, and how to set up a typical D3.js data visualization
    environment. One particular section is also devoted in covering some lesser known
    areas of JavaScript that D3.js relies heavily on.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is D3? D3 refers to **Data-Driven Documents**, and according to the official
    D3 Wiki:'
  prefs: []
  type: TYPE_NORMAL
- en: D3.js is a JavaScript library for manipulating documents based on data. D3 helps
    you bring data to life using HTML, SVG, and CSS. D3's emphasis on web standards
    gives you the full capabilities of modern browsers without tying yourself to a
    proprietary framework, combining powerful visualization components and a data-driven
    approach to DOM manipulation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: D3 Wiki (2013, August)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In a sense, D3 is a specialized JavaScript library that allows you to create
    amazing data visualizations using a simpler (data driven) approach by leveraging
    existing web standards. D3.js was created by Mike Bostock ([http://bost.ocks.org/mike/](http://bost.ocks.org/mike/))
    and superseded his previous work on a different JavaScript data visualization
    library called Protovis. For more information on how D3 was created and on the
    theory that influenced both Protovis and D3.js, please check out links in the
    following information box. Here in this book we will focus more on how to use
    D3.js to power your visualization. Initially, some aspects of D3 may be a bit
    confusing due to its different approach to data visualization using JavaScript.
    I hope that over the course of this book, a large number of topics, both basic
    and advanced, will make you comfortable and effective with D3\. Once properly
    understood, D3 can improve your productivity and expressiveness with data visualizations
    by orders of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more formal introduction to the idea behind D3 see the *Declarative Language
    Design for Interactive Visualization* paper published by Mike Bostock on IEEE
    InfoVis 2010 [http://vis.stanford.edu/papers/protovis-design](http://vis.stanford.edu/papers/protovis-design).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested to know how D3 came about, I recommend you to check out
    the *D3: Data-Driven Document* paper published by Mike Bostock on IEEE InfoVis
    2011 at [http://vis.stanford.edu/papers/d3](http://vis.stanford.edu/papers/d3).'
  prefs: []
  type: TYPE_NORMAL
- en: Protovis, the predecessor of D3.js, also created by Mike Bostock and Jeff Heer
    of the Stanford Visualization Group can be found at [http://mbostock.github.io/protovis/](http://mbostock.github.io/protovis/).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a simple D3 development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First thing you need when starting a D3 powered data visualization project is
    a working development environment. In this recipe, we will show you how a simple
    D3 development environment can be set up within minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start, make sure you have your favorite text editor installed and
    ready on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by downloading D3.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest stable version of D3.js from [http://d3js.org/](http://d3js.org/).
    You can download the archived, older releases from [https://github.com/mbostock/d3/tags](https://github.com/mbostock/d3/tags).
    Additionally, if you are interested in trying out the bleeding edge D3 build on
    master branch, then you can fork [https://github.com/mbostock/d3](https://github.com/mbostock/d3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once downloaded and unzipped, you will find three files `d3.v3.js`, `d3.v3.min.js`,
    and its license in the extracted folder. For development it is recommended to
    use `d3.v3.js`, the "non-uglified" (minimized) version, since it can help you
    trace and debug JavaScript inside D3 library. Once extracted place the `d3.v3.js`
    file in the same folder with an `index.html` file containing the following HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you download D3 from a source or a tagged version, the JavaScript file name
    will be slightly different. Instead of `d3.v3.js`, it will simply be called `d3.js`.
  prefs: []
  type: TYPE_NORMAL
- en: This is all you need to create, in its simplest form, a D3-powered data visualization
    development environment. With this setup you can essentially open the HTML file
    using your favorite text editor to start your development and also view your visualization
    by opening the file in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code for this recipe can be found at [https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/simple-dev-env).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 JavaScript library is very self-sufficient. It has no dependency on any JavaScript
    library than other what your browser already provides. In fact, it can even be
    used in a non-browser environment such as **Node.js** with some minimum setup
    (I will cover this in more detail in later chapters).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your visualization's target browser environment includes Internet Explorer
    9, it is recommended to use the compatibility library **Aight**, which can be
    found at [https://github.com/shawnbot/aight](https://github.com/shawnbot/aight),
    and **Sizzle selector engine** at [http://sizzlejs.com/](http://sizzlejs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Having the following character encoding instruction in header section is critical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The character encoding instructs browsers and validators what set of characters
    to use when rendering web pages. Otherwise your browser will not be able to load
    D3 JavaScript library since D3 uses utf-8 character for certain symbols such as
    π.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: D3 is completely open source, and it is open sourced under a custom license
    agreement created by its author Michael Bostock. This license is pretty similar
    to the popular MIT license with only one exception where it explicitly states
    that Michael Bostock's name cannot be used to endorse or promote products derived
    from this software without permission.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this cookbook numerous recipe code examples will be provided. All
    example source code are provided and hosted on GitHub ([https://github.com/](https://github.com/))
    a popular open source social coding repository platform.
  prefs: []
  type: TYPE_NORMAL
- en: How to get source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to get all the recipe source code that you need is to clone
    the Git repository ([https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook))
    for this book. If you are not planning to set up a development environment for
    the recipes then you can safely skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not familiar with Git, clone is similar to the check-out concept
    in other versions of control software. However cloning does a lot more than simply
    checking out the files. It also copies all branches and histories to your local
    machine effectively cloning the entire repository to your local machine so you
    can work completely offline with this cloned repository in your own environment.
  prefs: []
  type: TYPE_NORMAL
- en: First install a Git client on your computer. You can find a list of Git client
    software here [http://git-scm.com/downloads](http://git-scm.com/downloads), and
    a detailed guide on how to install it on different operating systems here [http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another popular way to get Git and GitHub working is to install the GitHub client,
    which gives you a richer set of features than simply Git. However, at the time
    of writing, GitHub only offered client software for Windows and Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub for Windows: [http://windows.github.com/](http://windows.github.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub for Mac: [http://mac.github.com/](http://mac.github.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Git client is installed, simply issuing the following command will
    download all recipe source code to your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Or if you choose to use GitHub client, then simply click the **Fork** button
    on the repository page [https://github.com/NickQiZhu/d3-cookbook](https://github.com/NickQiZhu/d3-cookbook).
    This will make this repository appear in your GitHub client.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an NPM-based development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are working on a more complex data visualization project that requires
    the use of a number of JavaScript libraries, the simple solution we discussed
    before might become a bit clumsy and unwieldy. In this section, we will demonstrate
    an improved setup using **Node Packaged Modules** (**NPM**)—a de facto JavaScript
    library repository management system. If you are as impatient as me and want to
    get to the meaty part of the book—the recipes—you can safely skip this section
    and come back when you need to set up a more production-ready environment for
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start please make sure you have NPM properly installed. NPM comes
    as part of the Node.js installation. You can download Node.js from [http://nodejs.org/download/](http://nodejs.org/download/).
    Select the correct Node.js binary build for your OS. Once installed the `npm`
    command will become available in your terminal console.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command prints out the version number of your NPM client indicating
    the installation is successful.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With NPM installed, now we can create a package descriptor file to automate
    some of the manual setup steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, under your project folder, create a file named `package.json` containing
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the `package.json` file is defined, you can simply run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the fields in the `package.json` file are for informational purpose
    only, such as the name, description, homepage, author, and the repository. The
    name and version field will be used if you decide to publish your library into
    an NPM repository in the future. What we really care about, at this point, is
    the `dependencies` and `devDependencies` fields.
  prefs: []
  type: TYPE_NORMAL
- en: The `dependencies` field describes the runtime library dependencies that your
    project has, meaning the libraries your project needs to run properly in a browser.
    In this simple example we only have one dependency on d3\. `d3` is the name that
    D3 library is published under in the NPM repository. The version number `3.x`
    signifies that this project is compatible with any version 3 releases, and NPM
    should retrieve the latest stable version 3 build to satisfy this dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: D3 is a self-sufficient library with zero external runtime dependency. However,
    this does not mean that it cannot work with other popular JavaScript libraries.
    I regularly use D3 with other libraries to make my job easier, for example, JQuery,
    Zepto.js, Underscore.js, and Backbone.js.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `devDependencies` field describes development time (compile time) library
    dependencies. What this means is that, libraries specified under this category
    are only required in order to build this project, and not required for running
    your JavaScript project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Detailed NPM package JSON file documentation can be found at [https://npmjs.org/doc/json.html](https://npmjs.org/doc/json.html).
  prefs: []
  type: TYPE_NORMAL
- en: Executing the `npm install` command will automatically trigger NPM to download
    all dependencies that your project requires including your dependencies' dependencies
    recursively. All dependency libraries will be downloaded into `node_modules` folder
    under your project root folder. When this is done you can just simply create your
    HTML file as it has been shown in the previous recipe, and load your D3 JavaScript
    library directly from `node_modules/d3/d3.js`.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this recipe with an automated build script can be found
    at [https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env](https://github.com/NickQiZhu/d3-cookbook/tree/master/src/chapter1/npm-dev-env).
  prefs: []
  type: TYPE_NORMAL
- en: Relying on NPM is a simple and yet effective way to save you from all the trouble
    of downloading JavaScript libraries manually and the constant need of keeping
    them up-to-date. However, an astute reader might have already noticed that with
    this power we can easily push our environment setup to the next level. Imagine
    if you are building a large visualization project where thousands of lines of
    JavaScript code will be created, obviously our simple setup described here is
    no longer sufficient. However modular JavaScript development by itself can fill
    an entire book; therefore we are not going to try to cover this topic since our
    focus is on data visualization and D3\. If you are interested please refer the
    source code for this recipe where it is demonstrated how a more modular approach
    can be implemented on top of what we described here with a simple automated build
    script. In later chapters, when unit test related recipes are discussed, we will
    expand the coverage on this topic to show how our setup can be enhanced to run
    automated unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though in previous sections, it was mentioned that you can just open the HTML
    page that you have created using your browser to view your visualization result
    directly, this approach does have its limitations. This simple approach stops
    working once we need to load data from separate data file (this is what we will
    do in later chapters and it is also the most likely case in your daily working
    environment) due to the browser's built-in security policy. To get around this
    security constraint it is highly recommended that you set up a local HTTP server
    so your HTML page and the data file can be served from this server instead of
    loaded from file system directly.
  prefs: []
  type: TYPE_NORMAL
- en: Setup a local HTTP server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are probably a dozen ways to set up an HTTP server on your computer based
    on which operating system you use and which software package you decide to use
    to act as an HTTP server. Here I will attempt to cover some of the most popular
    setups.
  prefs: []
  type: TYPE_NORMAL
- en: Python Simple HTTP Server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is my favorite for development and fast prototyping. If you have Python
    installed on your OS, which is usually the case with any Unix/Linux/Mac OS distro,
    then you can simply type this command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or with newer Python distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This little python program will launch an HTTP server and start serving any
    file right from the folder where this program is launched. This is by far the
    easiest way to get an HTTP server running on any OS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have python installed on your computer yet, you can get it from
    [http://www.python.org/getit/](http://www.python.org/getit/). It works on all
    modern OS including Windows, Linux and Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js HTTP Server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have Node.js installed, perhaps as part of the development environment
    setup exercise we did in the previous section, then you can simply install the
    **http-server** module. Similar to Python Simple HTTP Server, this module will
    allow you to launch a lightweight HTTP server from any folder and starting serving
    pages right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'First install the http-server module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-g` option in this command will install http-server module globally so
    it will become available in your command line terminal automatically. Once this
    is done, then you can launch the server from any folder you are in by simply issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This command will launch a Node.js powered HTTP server on the default port 8080
    or if you want you can use the `–p` option to provide a custom port number for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are running the `npm install` command on Linux/Unix/Mac OS, you will
    need to run the command in `sudo` mode or as root in order to use the `–g` global
    installation option.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding D3-style JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3 is designed and built using functional style JavaScript which might come
    as to seem unfamiliar or even alien to someone who is more comfortable with the
    procedural or object-oriented JavaScript styles. This recipe is designed to cover
    some of the most fundamental concepts in functional JavaScript required to make
    sense of D3, and furthermore enable you to write your visualization code in D3
    style.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser: [https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html](http://
    https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter1/functional-js.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s dig a little deeper into the good part of JavaScript—the more functional
    side. Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet generates the following simple widget on your web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Simple Widget with functional JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Despite its simplicity, the interface of this widget has this undeniable similarity
    to D3 style of JavaScript. This is not by coincidence but rather by leveraging
    a JavaScript programming paradigm called functional objects. Like many interesting
    topics, this is another topic that can fill an entire book by itself; nevertheless
    I will try to cover the most important and useful aspects of this particular paradigm
    in this section so you the reader cannot only understand D3''s syntax but will
    also be able to create a library in this fashion. As stated on D3''s project Wiki
    this functional programming style gives D3 much of its flexibility:'
  prefs: []
  type: TYPE_NORMAL
- en: D3's functional style allows code reuse through a diverse collection of components
    and plugins.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: D3 Wiki (2013, August)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Functions are objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Functions in JavaScript are objects. Like any other object, function is just
    a collection of name and value pair. The only difference between a function object
    and a regular object is that function can be invoked and additionally associated
    with two hidden properties: function context and function code. This might come
    as a surprise and unnatural, especially if you are coming from a more procedural
    programming background. Nevertheless this is the critical insight most of us need,
    to make sense of some of the strange ways that D3 uses function.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript in its current form is generally considered not very object oriented,
    however, function object is probably one aspect where it outshines some of the
    other more object-oriented cousins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now with this insight in mind, let''s take a look at the code snippet again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At line marked as A, B, and C we can clearly see that `instance`, `headline`,
    and `description` are all internal private variables belonging to the `SimpleWidget`
    function object. While the `render` function is a function associated with the
    `instance` object which itself is defined as an object literal. Since functions
    are just an object it can also be stored in an object/function, other variables,
    arrays, and being passed as function arguments. The result of the execution of
    function `SimpleWidget` is the returning of object instance at line I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `render` function uses some of the D3 functions that we have not covered
    yet, but let's not pay too much attention to them for now since we will cover
    each of them in depth in the next couple of chapters. Also they basically just
    render the visual representation of this widget, not having much to do with our
    topic on hand.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Static variable scoping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Curious readers are probably asking by now how the variable scoping is resolved
    in this example since the render function has seemingly strange access to not
    only the `instance`, `headline`, and `description` variables but also the `spec`
    variable that is passed into the base `SimpleWidget` function. This seemingly
    strange variable scoping is actually determined by a simple static scoping rule.
    This rule can be thought as the following: whenever searching for a variable reference,
    variable search will be first performed locally. When variable declaration is
    not found (as in the case of `headline` on line C) then the search continues to
    the parent object (in this case `SimpleWidget` function is its static parent and
    `headline` variable declaration is found at line B). If still not found, then
    this process will continue recursively to the next static parent so on and so
    forth till it reaches global variable definition, if still not found then a reference
    error will be generated for this variable. This scoping behavior is very different
    from variable resolution rules in some of the most popular languages such as Java
    and C#; it might take some time to get used to, however don''t worry too much
    about it if you still find it confusing. With more practice and keeping static
    scoping rule in mind you will be comfortable with this kind of scoping in no time.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One word of caution here—again for folks from Java and C# backgrounds—is that
    JavaScript does not implement block scoping. The static scoping rule we described
    only applies to function/object but not at the block level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be inclined to think this code should produce 20 numbers. However
    in JavaScript this code creates an infinite loop. This is because JavaScript does
    not implement block scoping so the `i` in the inner loop is the same `i` used
    by the the outer loop. Therefore it gets reset by the inner loop thus and can
    never end the outer loop.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern is usually referred as functional when compared with the more popular
    prototype-based **Pseudo-classical pattern**. The advantage of the functional
    pattern is that it provides a much better mechanism for information hiding and
    encapsulation since the private variables—in our case the `headline` and `description`
    variables—are only accessible by nested functions via the static scoping rule
    therefore the object returned by the `SimpleWidget` function is flexible yet more
    tamper-proof and durable.
  prefs: []
  type: TYPE_NORMAL
- en: If we create an object in the functional style, and if all of the methods of
    the object make no use of this, then the object is durable. A durable object is
    simply a collection of functions that act as capabilities.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Crockfort D. 2008)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Variable-parameter function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Something strange happens on line G:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You might be asking where this `arguments` variable on line G came from. It
    was never defined anywhere in this example. The `arguments` variable is a built-in
    hidden parameter that is available to functions when they are invoked. The `arguments`
    variable contains all arguments for a function invocation in an array.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In fact, `arguments` is not really a JavaScript array object. It has length
    and can be accessed using an index, however it does not have many of the methods
    associated with a typical JavaScript array object such as `slice` or `concat`.
    When you need to use a standard JavaScript array method on `arguments`, you need
    to use the apply invocation pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This hidden parameter when combined with the ability to omit function argument
    in JavaScript allows you to write a function like `instance.headline` with unspecified
    number of parameters. In this case, we can either have one argument `h` or none.
    Because `arguments.length` returns 0 when no parameter is passed; therefore the
    `headline` function returns `h` if no parameter is passed, otherwise it turns
    into a setter if parameter `h` is provided. To clarify this explanation let''s
    take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here you can see how headline function can be used as both setter and getter
    with different parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Function chaining
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next interesting aspect of this particular example is the capability of
    chaining functions to each other. This is also the predominant function invocation
    pattern that the D3 library deploys since most of the D3 functions are designed
    to be chainable to provide a more concise and contextual programming interface.
    This is actually quite simple once you understand the variable-parameter function
    concept. Since a variable-parameter function—such as the `headline` function—can
    serve as setter and getter at the same time, then returning the `instance` object
    when it is acting as a setter allows you to immediately invoke another function
    on the invocation result; hence the chaining.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `SimpleWidget` function returns the `instance` object (as
    on line I). Then, the `headline` function is invoked as a setter, which also returns
    the `instance` object (as on line H). The `description` function can then be invoked
    directly on return which again returns the `instance` object. Then finally the
    `render` function can be called.
  prefs: []
  type: TYPE_NORMAL
- en: Now with the knowledge of functional JavaScript and a working ready-to-go D3
    data visualization development environment, we are ready to dive into the rich
    concepts and techniques that D3 has to offer. However before we take off, I would
    like to cover a few more important areas—how to find and share code and how to
    get help when you are stuck.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at some additional helpful resources.
  prefs: []
  type: TYPE_NORMAL
- en: Finding and sharing code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the great things about D3 when compared with other visualization options
    is that it offers a wealth of examples and tutorials that you can draw your inspiration
    from. During the course of creating my own open source visualization charting
    library and the creation of this book, I had drawn heavily on these resources.
    I am going to list some of the most popular options available in this aspect.
    This list is by no means a comprehensive directory but rather a starting place
    for you to explore:'
  prefs: []
  type: TYPE_NORMAL
- en: The D3 gallery ([https://github.com/mbostock/d3/wiki/Gallery](https://github.com/mbostock/d3/wiki/Gallery))
    contains some of the most interesting examples that you can find online regarding
    D3 usage. It contains examples on different visualization charts, specific techniques,
    and some interesting visualization implementations in the wild, among others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BioVisualize[(http://biovisualize.github.io/d3visualization](http://(http://biovisualize.github.io/d3visualization))
    is another D3 gallery with categorization, to help you find your desired visualization
    example online quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The D3 tutorials page ([https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials))
    contains a collection of tutorials, talks and slides created by various contributors
    over time, to demonstrate in detail how to use a lot of D3 concepts and techniques.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D3 plugins ([https://github.com/d3/d3-plugins](https://github.com/d3/d3-plugins)).
    Maybe some features are missing in D3 for your visualization needs? Before you
    decide to implement your own, make sure to check out D3 plugin repository. It
    contains a wide variety of plugins that provide some of the common and, sometimes,
    uncommon features in the visualization world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The D3 API ([https://github.com/mbostock/d3/wiki/API-Reference](https://github.com/mbostock/d3/wiki/API-Reference))
    is very well documented. This is where you can find detailed explanations for
    every function and property that the D3 library has to offer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike Bostok's Blocks ([http://bl.ocks.org/mbostock](http://bl.ocks.org/mbostock))
    is a D3 example site, where some of the more intriguing visualization example
    can be found and which is maintained by its author Mike Bostock.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JS Bin ([http://jsbin.com/ugacud/1/edit](http://jsbin.com/ugacud/1/edit)) is
    a pre-built D3 test and experiment environment completely hosted online. You can
    easily prototype a simple script using this tool or share your creation with other
    members in the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JS Fiddle ([http://jsfiddle.net/qAHC2/](http://jsfiddle.net/qAHC2/)) is similar
    to JS Bin; it also is a hosted-online JavaScript code prototyping and sharing
    platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even with all the examples, tutorial, and cookbook like this, you might still
    run into challenges when creating your visualization. Good news here is that D3
    has a broad and active support community. Simply "googling" your question can
    most often yield a satisfying answer. Even if it does not, don''t worry; D3 has
    a robust community-based support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'D3.js on Stack Overflow ([http://stackoverflow.com/questions/tagged/d3.js](http://stackoverflow.com/questions/tagged/d3.js)):
    Stack Overflow is the most popular community-based free Q&A site for technologists.
    D3 is a specific category on the Stack Overflow site to help you reach the experts
    and get an answer to your question quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The D3 Google group ([https://groups.google.com/forum/?fromgroups#!forum/d3-js](https://groups.google.com/forum/?fromgroups#!forum/d3-js)):
    This is the official user group for not just D3 but also other related libraries
    in its ecosystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
