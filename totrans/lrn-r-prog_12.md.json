["```py\nlibrary(readr) \nproduct_info <- read_csv(\"data/product-info.csv\") \nproduct_info \n##    id      name  type   class released \n## 1 T01    SupCar   toy vehicle      yes \n## 2 T02  SupPlane   toy vehicle       no \n## 3 M01     JeepX model vehicle      yes \n## 4 M02 AircraftX model vehicle      yes \n## 5 M03    Runner model  people      yes \n## 6 M04    Dancer model  people       no \n\n```", "```py\nsapply(product_info, class) \n##          id        name        type       class    released  \n## \"character\" \"character\" \"character\" \"character\" \"character\" \n\n```", "```py\nproduct_info[product_info$type == \"toy\", ] \n##    id     name type   class released \n## 1 T01   SupCar  toy vehicle      yes \n## 2 T02 SupPlane  toy vehicle       no \n\n```", "```py\nproduct_info[product_info$released == \"no\", ] \n##    id     name  type   class released \n## 2 T02 SupPlane   toy vehicle       no \n## 6 M04   Dancer model  people       no \n\n```", "```py\nproduct_info[, c(\"id\", \"name\", \"type\")] \n##    id      name  type \n## 1 T01    SupCar   toy \n## 2 T02  SupPlane   toy \n## 3 M01     JeepX model \n## 4 M02 AircraftX model \n## 5 M03    Runner model \n## 6 M04    Dancer model \n\n```", "```py\nproduct_info[c(\"id\", \"name\", \"class\")] \n##    id      name   class \n## 1 T01    SupCar vehicle \n## 2 T02  SupPlane vehicle \n## 3 M01     JeepX vehicle \n## 4 M02 AircraftX vehicle \n## 5 M03    Runner  people \n## 6 M04    Dancer  people \n\n```", "```py\nproduct_info[product_info$type == \"toy\", c(\"name\", \"class\", \"released\")] \n##       name   class released \n## 1   SupCar vehicle      yes \n## 2 SupPlane vehicle       no \n\n```", "```py\nsubset(product_info,  \n  subset = type == \"model\" & released == \"yes\", \n  select = name:class) \n##        name  type   class \n## 3     JeepX model vehicle \n## 4 AircraftX model vehicle \n## 5    Runner model  people \n\n```", "```py\nwith(product_info, name[released == \"no\"]) \n## [1] \"SupPlane\" \"Dancer\" \n\n```", "```py\nwith(product_info, table(type[released == \"yes\"])) \n##  \n## model   toy  \n##     3     1 \n\n```", "```py\nproduct_stats <- read_csv(\"data/product-stats.csv\")  \nproduct_stats  \n##    id material size weight \n## 1 T01    Metal  120   10.0 \n## 2 T02    Metal  350   45.0 \n## 3 M01 Plastics   50     NA \n## 4 M02 Plastics   85    3.0 \n## 5 M03     Wood   15     NA \n## 6 M04     Wood   16    0.6 \n\n```", "```py\ntop_3_id <- product_stats[order(product_stats$size, decreasing = TRUE), \"id\"][1:3] \nproduct_info[product_info$id %in% top_3_id, ] \n##    id      name  type   class released \n## 1 T01    SupCar   toy vehicle      yes \n## 2 T02  SupPlane   toy vehicle       no \n## 4 M02 AircraftX model vehicle      yes \n\n```", "```py\nproduct_table <- merge(product_info, product_stats, by = \"id\") \nproduct_table \n##    id      name  type   class released material size weight \n## 1 M01     JeepX model vehicle      yes Plastics   50     NA \n## 2 M02 AircraftX model vehicle      yes Plastics   85    3.0 \n## 3 M03    Runner model  people      yes     Wood   15     NA \n## 4 M04    Dancer model  people       no     Wood   16    0.6 \n## 5 T01    SupCar   toy vehicle      yes    Metal  120   10.0 \n## 6 T02  SupPlane   toy vehicle       no    Metal  350   45.0 \n\n```", "```py\nproduct_table[order(product_table$size), ] \n##    id      name  type   class released material size weight \n## 3 M03    Runner model  people      yes     Wood   15     NA \n## 4 M04    Dancer model  people       no     Wood   16    0.6 \n## 1 M01     JeepX model vehicle      yes Plastics   50     NA \n## 2 M02 AircraftX model vehicle      yes Plastics   85    3.0 \n## 5 T01    SupCar   toy vehicle      yes    Metal  120   10.0 \n## 6 T02  SupPlane   toy vehicle       no    Metal  350   45.0 \n\n```", "```py\nproduct_table[order(product_table$size, decreasing = TRUE), \"name\"][1:3] \n## [1] \"SupPlane\"  \"SupCar\"    \"AircraftX\" \n\n```", "```py\nproduct_table[order(product_table$weight, decreasing = TRUE), ][ \n  product_table$type == \"model\",] \n##    id      name  type   class released material size weight \n## 6 T02  SupPlane   toy vehicle       no    Metal  350   45.0 \n## 5 T01    SupCar   toy vehicle      yes    Metal  120   10.0 \n## 2 M02 AircraftX model vehicle      yes Plastics   85    3.0 \n## 4 M04    Dancer model  people       no     Wood   16    0.6 \n\n```", "```py\ntransform(product_table,  \n  released = ifelse(released == \"yes\", TRUE, FALSE), \n  density = weight / size) \n##    id      name  type   class released material size weight \n## 1 M01     JeepX model vehicle     TRUE Plastics   50     NA \n## 2 M02 AircraftX model vehicle     TRUE Plastics   85    3.0 \n## 3 M03    Runner model  people     TRUE     Wood   15     NA \n## 4 M04    Dancer model  people    FALSE     Wood   16    0.6 \n## 5 T01    SupCar   toy vehicle     TRUE    Metal  120   10.0 \n## 6 T02  SupPlane   toy vehicle    FALSE    Metal  350   45.0 \n##      density \n## 1         NA \n## 2 0.03529412 \n## 3         NA \n## 4 0.03750000 \n## 5 0.08333333 \n## 6 0.12857143 \n\n```", "```py\nproduct_tests <- read_csv(\"data/product-tests.csv\")  \nproduct_tests \n##    id quality durability waterproof \n## 1 T01      NA         10         no \n## 2 T02      10          9         no \n## 3 M01       6          4        yes \n## 4 M02       6          5        yes \n## 5 M03       5         NA        yes \n## 6 M04       6          6        yes \n\n```", "```py\nna.omit(product_tests) \n##    id quality durability waterproof \n## 2 T02      10          9         no \n## 3 M01       6          4        yes \n## 4 M02       6          5        yes \n## 6 M04       6          6        yes \n\n```", "```py\ncomplete.cases(product_tests) \n## [1] FALSE  TRUE  TRUE  TRUE FALSE  TRUE \n\n```", "```py\nproduct_tests[complete.cases(product_tests), \"id\"] \n## [1] \"T02\" \"M01\" \"M02\" \"M04\" \n\n```", "```py\nproduct_tests[!complete.cases(product_tests), \"id\"] \n## [1] \"T01\" \"M03\" \n\n```", "```py\nproduct_full <- merge(product_table, product_tests, by = \"id\") \nproduct_full \n##    id      name  type   class released material size weight \n## 1 M01     JeepX model vehicle      yes Plastics   50     NA \n## 2 M02 AircraftX model vehicle      yes Plastics   85    3.0 \n## 3 M03    Runner model  people      yes     Wood   15     NA \n## 4 M04    Dancer model  people       no     Wood   16    0.6 \n## 5 T01    SupCar   toy vehicle      yes    Metal  120   10.0 \n## 6 T02  SupPlane   toy vehicle       no    Metal  350   45.0 \n##   quality durability waterproof \n## 1       6          4        yes \n## 2       6          5        yes \n## 3       5         NA        yes \n## 4       6          6        yes \n## 5      NA         10         no \n## 6      10          9         no \n\n```", "```py\nmean_quality1 <- tapply(product_full$quality, \n  list(product_full$type), \n  mean, na.rm = TRUE) \nmean_quality1 \n## model   toy  \n##  5.75 10.00 \n\n```", "```py\nstr(mean_quality1) \n##  num [1:2(1d)] 5.75 10 \n##  - attr(*, \"dimnames\")=List of 1 \n##   ..$ : chr [1:2] \"model\" \"toy\" \n\n```", "```py\nis.array(mean_quality1) \n## [1] TRUE \n\n```", "```py\nmean_quality2 <- tapply(product_full$quality,  \n  list(product_full$type, product_full$class),  \n  mean, na.rm = TRUE) \nmean_quality2 \n##       people vehicle \n## model    5.5       6 \n## toy       NA      10 \n\n```", "```py\nmean_quality2[\"model\", \"vehicle\"] \n## [1] 6 \n\n```", "```py\nmean_quality3 <- with(product_full, \n  tapply(quality, list(type, material, released), \n    mean, na.rm = TRUE)) \nmean_quality3 \n## , , no \n##  \n##       Metal Plastics Wood \n## model    NA       NA    6 \n## toy      10       NA   NA \n##  \n## , , yes \n##  \n##       Metal Plastics Wood \n## model    NA        6    5 \n## toy     NaN       NA   NA\n```", "```py\nstr(mean_quality3) \n##  num [1:2, 1:3, 1:2] NA 10 NA NA 6 NA NA NaN 6 NA ... \n##  - attr(*, \"dimnames\")=List of 3 \n##   ..$ : chr [1:2] \"model\" \"toy\" \n##   ..$ : chr [1:3] \"Metal\" \"Plastics\" \"Wood\" \n##   ..$ : chr [1:2] \"no\" \"yes\" \n\n```", "```py\nmean_quality3[\"model\", \"Wood\", \"yes\"] \n## [1] 5 \n\n```", "```py\ntoy_tests <- read_csv(\"data/product-toy-tests.csv\") \ntoy_tests \n##    id     date sample quality durability \n## 1 T01 20160201    100       9          9 \n## 2 T01 20160302    150      10          9 \n## 3 T01 20160405    180       9         10 \n## 4 T01 20160502    140       9          9 \n## 5 T02 20160201     70       7          9 \n## 6 T02 20160303     75       8          8 \n## 7 T02 20160403     90       9          8 \n## 8 T02 20160502     85      10          9 \n\n```", "```py\ndate      T01   T02 \n20160201    9     9 \n20160301    10    9 \n\n```", "```py\ninstall.packages(\"reshape2\") \n\n```", "```py\nlibrary(reshape2) \ntoy_quality <- dcast(toy_tests, date ~ id, value.var = \"quality\") \ntoy_quality \n##       date T01 T02 \n## 1 20160201   9   7 \n## 2 20160302  10  NA \n## 3 20160303  NA   8 \n## 4 20160403  NA   9 \n## 5 20160405   9  NA \n## 6 20160502   9  10 \n\n```", "```py\ninstall.packages(\"zoo\") \n\n```", "```py\nzoo::na.locf(c(1, 2, NA, NA, 3, 1, NA, 2, NA)) \n## [1] 1 2 2 2 3 1 1 2 2 \n\n```", "```py\ntoy_quality$T01 <- zoo::na.locf(toy_quality$T01) \ntoy_quality$T02 <- zoo::na.locf(toy_quality$T02) \n\n```", "```py\ntoy_quality[-1] <- lapply(toy_quality[-1], zoo::na.locf) \ntoy_quality \n##       date T01 T02 \n## 1 20160201   9   7 \n## 2 20160302  10   7 \n## 3 20160303  10   8 \n## 4 20160403  10   9 \n## 5 20160405   9   9 \n## 6 20160502   9  10 \n\n```", "```py\ntoy_tests$ym <- substr(toy_tests$date, 1, 6) \ntoy_tests \n##    id     date sample quality durability     ym \n## 1 T01 20160201    100       9          9 201602 \n## 2 T01 20160302    150      10          9 201603 \n## 3 T01 20160405    180       9         10 201604 \n## 4 T01 20160502    140       9          9 201605 \n## 5 T02 20160201     70       7          9 201602 \n## 6 T02 20160303     75       8          8 201603 \n## 7 T02 20160403     90       9          8 201604 \n## 8 T02 20160502     85      10          9 201605 \n\n```", "```py\ntoy_quality <- dcast(toy_tests, ym ~ id,  \n    value.var = \"quality\") \ntoy_quality \n##       ym T01 T02 \n## 1 201602   9   7 \n## 2 201603  10   8 \n## 3 201604   9   9 \n## 4 201605   9  10 \n\n```", "```py\ntoy_tests2 <- melt(toy_tests, id.vars = c(\"id\", \"ym\"),  \n  measure.vars = c(\"quality\", \"durability\"), \n  variable.name = \"measure\") \ntoy_tests2 \n##     id     ym    measure value \n## 1  T01 201602    quality     9 \n## 2  T01 201603    quality    10 \n## 3  T01 201604    quality     9 \n## 4  T01 201605    quality     9 \n## 5  T02 201602    quality     7 \n## 6  T02 201603    quality     8 \n## 7  T02 201604    quality     9 \n## 8  T02 201605    quality    10 \n## 9  T01 201602 durability     9 \n## 10 T01 201603 durability     9 \n## 11 T01 201604 durability    10 \n## 12 T01 201605 durability     9 \n## 13 T02 201602 durability     9 \n## 14 T02 201603 durability     8 \n## 15 T02 201604 durability     8 \n## 16 T02 201605 durability     9 \n\n```", "```py\nlibrary(ggplot2) \nggplot(toy_tests2, aes(x = ym, y = value)) +  \n  geom_point() + \n  facet_grid(id ~ measure) \n\n```", "```py\nggplot(toy_tests2, aes(x = ym, y = value, color = id)) +  \n  geom_point() + \n  facet_grid(. ~ measure) \n\n```", "```py\ninstall.packages(\"sqldf\") \n\n```", "```py\nlibrary(sqldf) \n## Loading required package: gsubfn \n## Loading required package: proto \n## Loading required package: RSQLite \n## Loading required package: DBI \n\n```", "```py\nproduct_info <- read_csv(\"data/product-info.csv\") \nproduct_stats <- read_csv(\"data/product-stats.csv\") \nproduct_tests <- read_csv(\"data/product-tests.csv\") \ntoy_tests <- read_csv(\"data/product-toy-tests.csv\") \n\n```", "```py\nsqldf(\"select * from product_info\") \n## Loading required package: tcltk \n##    id      name  type   class released \n## 1 T01    SupCar   toy vehicle      yes \n## 2 T02  SupPlane   toy vehicle       no \n## 3 M01     JeepX model vehicle      yes \n## 4 M02 AircraftX model vehicle      yes \n## 5 M03    Runner model  people      yes \n## 6 M04    Dancer model  people       no \n\n```", "```py\nsqldf(\"select id, name, class from product_info\") \n##    id      name   class \n## 1 T01    SupCar vehicle \n## 2 T02  SupPlane vehicle \n## 3 M01     JeepX vehicle \n## 4 M02 AircraftX vehicle \n## 5 M03    Runner  people \n## 6 M04    Dancer  people \n\n```", "```py\nsqldf(\"select id, name from product_info where released = 'yes'\") \n##    id      name \n## 1 T01    SupCar \n## 2 M01     JeepX \n## 3 M02 AircraftX \n## 4 M03    Runner \n\n```", "```py\nsqldf(\"select id, material, size / weight as density from product_stats\") \n##    id material   density \n## 1 T01    Metal 12.000000 \n## 2 T02    Metal  7.777778 \n## 3 M01 Plastics        NA \n## 4 M02 Plastics 28.333333 \n## 5 M03     Wood        NA \n## 6 M04     Wood 26.666667 \n\n```", "```py\nsqldf(\"select * from product_stats order by size desc\") \n##    id material size weight \n## 1 T02    Metal  350   45.0 \n## 2 T01    Metal  120   10.0 \n## 3 M02 Plastics   85    3.0 \n## 4 M01 Plastics   50     NA \n## 5 M04     Wood   16    0.6 \n## 6 M03     Wood   15     NA \n\n```", "```py\nsqldf(\"select * from product_info join product_stats using (id)\") \n##    id      name  type   class released material size weight \n## 1 T01    SupCar   toy vehicle      yes    Metal  120   10.0 \n## 2 T02  SupPlane   toy vehicle       no    Metal  350   45.0 \n## 3 M01     JeepX model vehicle      yes Plastics   50     NA \n## 4 M02 AircraftX model vehicle      yes Plastics   85    3.0 \n## 5 M03    Runner model  people      yes     Wood   15     NA \n## 6 M04    Dancer model  people       no     Wood   16    0.6 \n\n```", "```py\nsqldf(\"select * from product_info where id in  \n  (select id from product_stats where material = 'Wood')\") \n##    id   name  type  class released \n## 1 M03 Runner model people      yes \n## 2 M04 Dancer model people       no \n\n```", "```py\nsqldf(\"select * from product_info join product_stats using (id)  \n  where material = 'Wood'\") \n##    id   name  type  class released material size weight \n## 1 M03 Runner model people      yes     Wood   15     NA \n## 2 M04 Dancer model people       no     Wood   16    0.6 \n\n```", "```py\nsqldf(\"select waterproof, avg(quality), avg(durability) from product_tests \n  group by waterproof\") \n##   waterproof avg(quality) avg(durability) \n## 1         no        10.00             9.5 \n## 2        yes         5.75             5.0 \n\n```", "```py\nsqldf(\"select id, avg(quality), avg(durability) from toy_tests  \n  group by id\") \n##    id avg(quality) avg(durability) \n## 1 T01         9.25            9.25 \n## 2 T02         8.50            8.50 \n\n```", "```py\nsqldf(\"select * from product_info join  \n  (select id, avg(quality), avg(durability) from toy_tests  \n    group by id) using (id)\") \n##    id     name type   class released avg(quality) \n## 1 T01   SupCar  toy vehicle      yes         9.25 \n## 2 T02 SupPlane  toy vehicle       no         8.50 \n##   avg(durability) \n## 1            9.25 \n## 2            8.50 \n\n```", "```py\ninstall.packages(\"plyr\") \n\n```", "```py\nplyr::ddply(product_stats, \"material\",  \n  function(x) { \n    head(x[order(x$size, decreasing = TRUE),], 1L) \n  }) \n##    id material size weight \n## 1 T02    Metal  350   45.0 \n## 2 M02 Plastics   85    3.0 \n## 3 M04     Wood   16    0.6 \n\n```", "```py\nplyr::ddply(toy_tests, \"id\",  \n  function(x) { \n    head(x[order(x$sample, decreasing = TRUE), ], 2) \n  }) \n##    id     date sample quality durability \n## 1 T01 20160405    180       9         10 \n## 2 T01 20160302    150      10          9 \n## 3 T02 20160403     90       9          8 \n## 4 T02 20160502     85      10          9 \n\n```", "```py\ninstall.packages(\"data.table\") \n\n```", "```py\nlibrary(data.table) \n##  \n## Attaching package: 'data.table' \n## The following objects are masked from 'package:reshape2': \n##  \n##     dcast, melt \n\n```", "```py\ndt <- data.table(x = 1:3, y = rnorm(3), z = letters[1:3]) \ndt \n##    x           y z \n## 1: 1 -0.50219235 a \n## 2: 2  0.13153117 b \n## 3: 3 -0.07891709 c \n\n```", "```py\nstr(dt) \n## Classes 'data.table' and 'data.frame':   3 obs. of  3 variables: \n##  $ x: int  1 2 3 \n##  $ y: num  -0.5022 0.1315 -0.0789 \n##  $ z: chr  \"a\" \"b\" \"c\" \n##  - attr(*, \".internal.selfref\")=<externalptr> \n\n```", "```py\nproduct_info <- fread(\"data/product-info.csv\") \nproduct_stats <- fread(\"data/product-stats.csv\") \nproduct_tests <- fread(\"data/product-tests.csv\") \ntoy_tests <- fread(\"data/product-toy-tests.csv\") \n\n```", "```py\nproduct_info \n##     id      name  type   class released \n## 1: T01    SupCar   toy vehicle      yes \n## 2: T02  SupPlane   toy vehicle       no \n## 3: M01     JeepX model vehicle      yes \n## 4: M02 AircraftX model vehicle      yes \n## 5: M03    Runner model  people      yes \n## 6: M04    Dancer model  people       no \n\n```", "```py\nstr(product_info) \n## Classes 'data.table' and 'data.frame':   6 obs. of  5 variables: \n##  $ id      : chr  \"T01\" \"T02\" \"M01\" \"M02\" ... \n##  $ name    : chr  \"SupCar\" \"SupPlane\" \"JeepX\" \"AircraftX\" ... \n##  $ type    : chr  \"toy\" \"toy\" \"model\" \"model\" ... \n##  $ class   : chr  \"vehicle\" \"vehicle\" \"vehicle\" \"vehicle\" ... \n##  $ released: chr  \"yes\" \"no\" \"yes\" \"yes\" ... \n##  - attr(*, \".internal.selfref\") =< externalptr> \n\n```", "```py\nproduct_info[1] \n##     id   name type   class released \n## 1: T01 SupCar  toy vehicle      yes \nproduct_info[1:3] \n##     id     name  type   class released \n## 1: T01   SupCar   toy vehicle      yes \n## 2: T02 SupPlane   toy vehicle       no \n## 3: M01    JeepX model vehicle      yes \n\n```", "```py\nproduct_info[-1] \n##     id      name  type   class released \n## 1: T02  SupPlane   toy vehicle       no \n## 2: M01     JeepX model vehicle      yes \n## 3: M02 AircraftX model vehicle      yes \n## 4: M03    Runner model  people      yes \n## 5: M04    Dancer model  people       no \n\n```", "```py\nproduct_info[.N] \n##     id   name  type  class released \n## 1: M04 Dancer model people       no \n\n```", "```py\nproduct_info[c(1, .N)] \n##     id   name  type   class released \n## 1: T01 SupCar   toy vehicle      yes \n## 2: M04 Dancer model  people       no \n\n```", "```py\nproduct_info[released == \"yes\"] \n##     id      name  type   class released \n## 1: T01    SupCar   toy vehicle      yes \n## 2: M01     JeepX model vehicle      yes \n## 3: M02 AircraftX model vehicle      yes \n## 4: M03    Runner model  people      yes \n\n```", "```py\nproduct_info[released == \"yes\", id] \n## [1] \"T01\" \"M01\" \"M02\" \"M03\" \n\n```", "```py\nproduct_info[released == \"yes\", \"id\"] \n## [1] \"id\" \n\n```", "```py\nproduct_info[released == \"yes\", \"id\", with = FALSE] \n##     id \n## 1: T01 \n## 2: M01 \n## 3: M02 \n## 4: M03 \nproduct_info[released == \"yes\", c(\"id\", \"name\"), with = FALSE] \n##     id      name \n## 1: T01    SupCar \n## 2: M01     JeepX \n## 3: M02 AircraftX \n## 4: M03    Runner \n\n```", "```py\nproduct_info[released == \"yes\", table(type, class)] \n##        class \n## type    people vehicle \n##   model      1       2 \n##   toy        0       1 \n\n```", "```py\nproduct_info[released == \"yes\", list(id, name)] \n##     id      name \n## 1: T01    SupCar \n## 2: M01     JeepX \n## 3: M02 AircraftX \n## 4: M03    Runner \n\n```", "```py\nproduct_info[, list(id, name, released = released == \"yes\")] \n##     id      name released \n## 1: T01    SupCar     TRUE \n## 2: T02  SupPlane    FALSE \n## 3: M01     JeepX     TRUE \n## 4: M02 AircraftX     TRUE \n## 5: M03    Runner     TRUE \n## 6: M04    Dancer    FALSE \n\n```", "```py\nproduct_stats[, list(id, material, size, weight,  \n  density = size / weight)] \n##     id material size weight   density \n## 1: T01    Metal  120   10.0 12.000000 \n## 2: T02    Metal  350   45.0  7.777778 \n## 3: M01 Plastics   50     NA        NA \n## 4: M02 Plastics   85    3.0 28.333333 \n## 5: M03     Wood   15     NA        NA \n## 6: M04     Wood   16    0.6 26.666667 \n\n```", "```py\nproduct_info[, .(id, name, type, class)] \n##     id      name  type   class \n## 1: T01    SupCar   toy vehicle \n## 2: T02  SupPlane   toy vehicle \n## 3: M01     JeepX model vehicle \n## 4: M02 AircraftX model vehicle \n## 5: M03    Runner model  people \n## 6: M04    Dancer model  people \nproduct_info[released == \"yes\", .(id, name)] \n##     id      name \n## 1: T01    SupCar \n## 2: M01     JeepX \n## 3: M02 AircraftX \n## 4: M03    Runner \n\n```", "```py\nproduct_stats[order(size, decreasing = TRUE)] \n##     id material size weight \n## 1: T02    Metal  350   45.0 \n## 2: T01    Metal  120   10.0 \n## 3: M02 Plastics   85    3.0 \n## 4: M01 Plastics   50     NA \n## 5: M04     Wood   16    0.6 \n## 6: M03     Wood   15     NA \n\n```", "```py\nproduct_stats \n##     id material size weight \n## 1: T01    Metal  120   10.0 \n## 2: T02    Metal  350   45.0 \n## 3: M01 Plastics   50     NA \n## 4: M02 Plastics   85    3.0 \n## 5: M03     Wood   15     NA \n## 6: M04     Wood   16    0.6 \n\n```", "```py\nproduct_stats[, density := size / weight] \n\n```", "```py\nproduct_stats \n##     id material size weight   density \n## 1: T01    Metal  120   10.0 12.000000 \n## 2: T02    Metal  350   45.0  7.777778 \n## 3: M01 Plastics   50     NA        NA \n## 4: M02 Plastics   85    3.0 28.333333 \n## 5: M03     Wood   15     NA        NA \n## 6: M04     Wood   16    0.6 26.666667 \n\n```", "```py\nproduct_info[, released := released == \"yes\"] \nproduct_info \n##     id      name  type   class released \n## 1: T01    SupCar   toy vehicle     TRUE \n## 2: T02  SupPlane   toy vehicle    FALSE \n## 3: M01     JeepX model vehicle     TRUE \n## 4: M02 AircraftX model vehicle     TRUE \n## 5: M03    Runner model  people     TRUE \n## 6: M04    Dancer model  people    FALSE \n\n```", "```py\nsetkey(product_info, id) \n\n```", "```py\nproduct_info \n##     id      name  type   class released \n## 1: M01     JeepX model vehicle     TRUE \n## 2: M02 AircraftX model vehicle     TRUE \n## 3: M03    Runner model  people     TRUE \n## 4: M04    Dancer model  people    FALSE \n## 5: T01    SupCar   toy vehicle     TRUE \n## 6: T02  SupPlane   toy vehicle    FALSE \n\n```", "```py\nkey(product_info) \n## [1] \"id\" \n\n```", "```py\nproduct_info[\"M01\"] \n##     id  name  type   class released \n## 1: M01 JeepX model vehicle     TRUE \n\n```", "```py\nproduct_stats[\"M01\"] \n## Error in `[.data.table`(product_stats, \"M01\"): When i is a data.table (or character vector), x must be keyed (i.e. sorted, and, marked as sorted) so data.table knows which columns to join to and take advantage of x being sorted. Call setkey(x,...) first, see ?setkey. \n\n```", "```py\nsetkeyv(product_stats, \"id\") \n\n```", "```py\nproduct_stats[\"M02\"] \n##     id material size weight  density \n## 1: M02 Plastics   85      3 28.33333 \n\n```", "```py\nproduct_info[product_stats] \n##     id      name  type   class released material size \n## 1: M01     JeepX model vehicle     TRUE Plastics   50 \n## 2: M02 AircraftX model vehicle     TRUE Plastics   85 \n## 3: M03    Runner model  people     TRUE     Wood   15 \n## 4: M04    Dancer model  people    FALSE     Wood   16 \n## 5: T01    SupCar   toy vehicle     TRUE    Metal  120 \n## 6: T02  SupPlane   toy vehicle    FALSE    Metal  350 \n##    weight   density \n## 1:     NA        NA \n## 2:    3.0 28.333333 \n## 3:     NA        NA \n## 4:    0.6 26.666667 \n## 5:   10.0 12.000000 \n## 6:   45.0  7.777778 \n\n```", "```py\nsetkey(toy_tests, id, date) \n\n```", "```py\ntoy_tests[.(\"T01\", 20160201)] \n##     id     date sample quality durability \n## 1: T01 20160201    100       9          9 \n\n```", "```py\ntoy_tests[\"T01\"] \n##     id     date sample quality durability \n## 1: T01 20160201    100       9          9 \n## 2: T01 20160302    150      10          9 \n## 3: T01 20160405    180       9         10 \n## 4: T01 20160502    140       9          9 \n\n```", "```py\ntoy_tests[.(20160201)] \n## Error in bmerge(i, x, leftcols, rightcols, io, xo, roll, rollends, nomatch, : x.'id' is a character column being joined to i.'V1' which is type 'double'. Character columns must join to factor or character columns. \n\n```", "```py\ntoy_tests[.(20160201, \"T01\")] \n## Error in bmerge(i, x, leftcols, rightcols, io, xo, roll, rollends, nomatch, : x.'id' is a character column being joined to i.'V1' which is type 'double'. Character columns must join to factor or character columns. \n\n```", "```py\nproduct_info[, .N, by = released] \n##    released N \n## 1:     TRUE 4 \n## 2:    FALSE 2 \n\n```", "```py\nproduct_info[, .N, by = .(type, class)] \n##     type   class N \n## 1: model vehicle 2 \n## 2: model  people 2 \n## 3:   toy vehicle 2 \n\n```", "```py\nproduct_tests[, mean(quality, na.rm = TRUE),  \n  by = .(waterproof)] \n##    waterproof    V1 \n## 1:         no 10.00 \n## 2:        yes  5.75 \n\n```", "```py\nproduct_tests[, .(mean_quality = mean(quality, na.rm = TRUE)), \n  by = .(waterproof)] \n##    waterproof mean_quality \n## 1:         no        10.00 \n## 2:        yes         5.75 \n\n```", "```py\nproduct_info[product_tests][released == TRUE, \n  .(mean_quality = mean(quality, na.rm = TRUE), \n    mean_durability = mean(durability, na.rm = TRUE)), \n  by = .(type, class)] \n##     type   class mean_quality mean_durability \n## 1:   toy vehicle          NaN            10.0 \n## 2: model vehicle            6             4.5 \n## 3: model  people            5             NaN \n\n```", "```py\ntype_class_tests <- product_info[product_tests][released == TRUE, \n  .(mean_quality = mean(quality, na.rm = TRUE), \n    mean_durability = mean(durability, na.rm = TRUE)), \n  keyby = .(type, class)] \ntype_class_tests \n##     type   class mean_quality mean_durability \n## 1: model  people            5             NaN \n## 2: model vehicle            6             4.5 \n## 3:   toy vehicle          NaN            10.0 \nkey(type_class_tests) \n## [1] \"type\"  \"class\" \n\n```", "```py\ntype_class_tests[.(\"model\", \"vehicle\"), mean_quality] \n## [1] 6 \n\n```", "```py\nn <- 10000000 \ntest1 <- data.frame(id = 1:n, x = rnorm(n), y = rnorm(n)) \n\n```", "```py\nsystem.time(row <- test1[test1$id == 876543, ]) \n##    user  system elapsed  \n##   0.156   0.036   0.192 \nrow \n##            id          x        y \n## 876543 876543 0.02300419 1.291588 \n\n```", "```py\nsetDT(test1, key = \"id\") \nclass(test1) \n## [1] \"data.table\" \"data.frame\" \n\n```", "```py\nsystem.time(row <- test1[.(8765432)]) \n##    user  system elapsed  \n##   0.000   0.000   0.001 \nrow \n##         id         x         y \n## 1: 8765432 0.2532357 -2.121696 \n\n```", "```py\ntoy_tests[, ym := substr(date, 1, 6)] \ntoy_quality <- dcast(toy_tests, ym ~ id, value.var = \"quality\") \ntoy_quality \n##        ym T01 T02 \n## 1: 201602   9   7 \n## 2: 201603  10   8 \n## 3: 201604   9   9 \n## 4: 201605   9  10 \n\n```", "```py\ntoy_tests2 <- dcast(toy_tests, ym ~ id, value.var = c(\"quality\", \"durability\")) \ntoy_tests2 \n##        ym quality_T01 quality_T02 durability_T01 \n## 1: 201602           9           7              9 \n## 2: 201603          10           8              9 \n## 3: 201604           9           9             10 \n## 4: 201605           9          10              9 \n##    durability_T02 \n## 1:              9 \n## 2:              8 \n## 3:              8 \n## 4:              9 \n\n```", "```py\nkey(toy_tests2) \n## [1] \"ym\" \n\n```", "```py\ntoy_tests2[.(201602)] \n## Error in bmerge(i, x, leftcols, rightcols, io, xo, roll, rollends, nomatch, : x.'ym' is a character column being joined to i.'V1' which is type 'double'. Character columns must join to factor or character columns. \n\n```", "```py\nsapply(toy_tests2, class) \n##             ym    quality_T01    quality_T02 durability_T01  \n##    \"character\"      \"integer\"      \"integer\"      \"integer\"  \n## durability_T02  \n##      \"integer\" \n\n```", "```py\ntoy_tests2[\"201602\"] \n##        ym quality_T01 quality_T02 durability_T01 \n## 1: 201602           9           7              9 \n##    durability_T02 \n## 1:              9 \n\n```", "```py\nclass(20160101) \n## [1] \"numeric\" \nclass(substr(20160101, 1, 6)) \n## [1] \"character\" \n\n```", "```py\nproduct_stats \n##     id material size weight   density \n## 1: M01 Plastics   50     NA        NA \n## 2: M02 Plastics   85    3.0 28.333333 \n## 3: M03     Wood   15     NA        NA \n## 4: M04     Wood   16    0.6 26.666667 \n## 5: T01    Metal  120   10.0 12.000000 \n## 6: T02    Metal  350   45.0  7.777778 \nsetDF(product_stats) \nclass(product_stats) \n## [1] \"data.frame\" \n\n```", "```py\nsetDT(product_stats, key = \"id\") \nclass(product_stats) \n## [1] \"data.table\" \"data.frame\" \n\n```", "```py\nsetnames(product_stats, \"size\", \"volume\") \nproduct_stats \n##     id material volume weight   density \n## 1: M01 Plastics     50     NA        NA \n## 2: M02 Plastics     85    3.0 28.333333 \n## 3: M03     Wood     15     NA        NA \n## 4: M04     Wood     16    0.6 26.666667 \n## 5: T01    Metal    120   10.0 12.000000 \n## 6: T02    Metal    350   45.0  7.777778 \n\n```", "```py\nproduct_stats[, i := .I] \nproduct_stats \n##     id material volume weight   density i \n## 1: M01 Plastics     50     NA        NA 1 \n## 2: M02 Plastics     85    3.0 28.333333 2 \n## 3: M03     Wood     15     NA        NA 3 \n## 4: M04     Wood     16    0.6 26.666667 4 \n## 5: T01    Metal    120   10.0 12.000000 5 \n## 6: T02    Metal    350   45.0  7.777778 6 \n\n```", "```py\nsetcolorder(product_stats,  \n  c(\"i\", \"id\", \"material\", \"weight\", \"volume\", \"density\")) \nproduct_stats \n##    i  id material weight volume   density \n## 1: 1 M01 Plastics     NA     50        NA \n## 2: 2 M02 Plastics    3.0     85 28.333333 \n## 3: 3 M03     Wood     NA     15        NA \n## 4: 4 M04     Wood    0.6     16 26.666667 \n## 5: 5 T01    Metal   10.0    120 12.000000 \n## 6: 6 T02    Metal   45.0    350  7.777778 \n\n```", "```py\nmarket_data <- data.table(date = as.Date(\"2015-05-01\") + 0:299) \nhead(market_data) \n##          date \n## 1: 2015-05-01 \n## 2: 2015-05-02 \n## 3: 2015-05-03 \n## 4: 2015-05-04 \n## 5: 2015-05-05 \n## 6: 2015-05-06 \n\n```", "```py\nset.seed(123) \nmarket_data[, `:=`( \n  price = round(30 * cumprod(1 + rnorm(300, 0.001, 0.05)), 2), \n  volume = rbinom(300, 5000, 0.8) \n)] \n\n```", "```py\nhead(market_data) \n##          date price volume \n## 1: 2015-05-01 29.19   4021 \n## 2: 2015-05-02 28.88   4000 \n## 3: 2015-05-03 31.16   4033 \n## 4: 2015-05-04 31.30   4036 \n## 5: 2015-05-05 31.54   3995 \n## 6: 2015-05-06 34.27   3955 \n\n```", "```py\nplot(price ~ date, data = market_data,  \n  type = \"l\", \n  main = \"Market data\") \n\n```", "```py\nmarket_data[, range(date)] \n## [1] \"2015-05-01\" \"2016-02-24\" \n\n```", "```py\nmonthly <- market_data[,  \n  .(open = price[[1]], high = max(price),  \n    low = min(price), close = price[[.N]]), \n  keyby = .(year = year(date), month = month(date))] \nhead(monthly) \n##    year month  open  high   low close \n## 1: 2015     5 29.19 37.71 26.15 28.44 \n## 2: 2015     6 28.05 37.63 28.05 37.21 \n## 3: 2015     7 36.32 40.99 32.13 40.99 \n## 4: 2015     8 41.52 50.00 30.90 30.90 \n## 5: 2015     9 30.54 34.46 22.89 27.02 \n## 6: 2015    10 25.68 33.18 24.65 29.32 \n\n```", "```py\noldpar <- par(mfrow = c(1, 2)) \nmarket_data[, { \n  plot(price ~ date, type = \"l\", \n    main = sprintf(\"Market data (%d)\", year)) \n}, by = .(year = year(date))] \npar(oldpar) \n\n```", "```py\ndata(\"diamonds\", package = \"ggplot2\") \nsetDT(diamonds) \nhead(diamonds) \n##    carat       cut color clarity depth table price    x \n## 1:  0.23     Ideal     E     SI2  61.5    55   326 3.95 \n## 2:  0.21   Premium     E     SI1  59.8    61   326 3.89 \n## 3:  0.23      Good     E     VS1  56.9    65   327 4.05 \n## 4:  0.29   Premium     I     VS2  62.4    58   334 4.20 \n## 5:  0.31      Good     J     SI2  63.3    58   335 4.34 \n## 6:  0.24 Very Good     J    VVS2  62.8    57   336 3.94 \n##       y    z \n## 1: 3.98 2.43 \n## 2: 3.84 2.31 \n## 3: 4.07 2.31 \n## 4: 4.23 2.63 \n## 5: 4.35 2.75 \n## 6: 3.96 2.48 \n\n```", "```py\ndiamonds[, { \n  m <- lm(log(price) ~ carat + depth) \n  as.list(coef(m)) \n}, keyby = .(cut)] \n##          cut (Intercept)    carat        depth \n## 1:      Fair    7.730010 1.264588 -0.014982439 \n## 2:      Good    7.077469 1.973600 -0.014601101 \n## 3: Very Good    6.293642 2.087957 -0.002890208 \n## 4:   Premium    5.934310 1.852778  0.005939651 \n## 5:     Ideal    8.495409 2.125605 -0.038080022 \n\n```", "```py\naverage <- function(column) { \n  market_data[, .(average = mean(.SD[[column]])), \n    by = .(year = year(date))] \n} \n\n```", "```py\naverage(\"price\") \n##    year  average \n## 1: 2015 32.32531 \n## 2: 2016 32.38364 \n\n```", "```py\naverage(\"volume\") \n##    year  average \n## 1: 2015 3999.931 \n## 2: 2016 4003.382 \n\n```", "```py\nprice_cols <- paste0(\"price\", 1:3) \nmarket_data[, (price_cols) := lapply(1:3,  \n  function(i) round(price + rnorm(.N, 0, 5), 2))] \nhead(market_data) \n##          date price volume price1 price2 price3 \n## 1: 2015-05-01 29.19   4021  30.55  27.39  33.22 \n## 2: 2015-05-02 28.88   4000  29.67  20.45  36.00 \n## 3: 2015-05-03 31.16   4033  34.31  26.94  27.24 \n## 4: 2015-05-04 31.30   4036  29.32  29.01  28.04 \n## 5: 2015-05-05 31.54   3995  36.04  32.06  34.79 \n## 6: 2015-05-06 34.27   3955  30.12  30.96  35.19 \n\n```", "```py\ncols <- colnames(market_data) \nprice_cols <- cols[grep(\"^price\", cols)] \nprice_cols \n## [1] \"price\"  \"price1\" \"price2\" \"price3\" \n\n```", "```py\nmarket_data[, (price_cols) := lapply(.SD, zoo::na.locf), \n  .SDcols = price_cols] \n\n```", "```py\ninstall.packages(\"dplyr\") \n\n```", "```py\nlibrary(readr) \nproduct_info <- read_csv(\"data/product-info.csv\") \nproduct_stats <- read_csv(\"data/product-stats.csv\") \nproduct_tests <- read_csv(\"data/product-tests.csv\") \ntoy_tests <- read_csv(\"data/product-toy-tests.csv\") \n\n```", "```py\nlibrary(dplyr) \n##  \n## Attaching package: 'dplyr' \n## The following objects are masked from 'package:data.table': \n##  \n##     between, last \n## The following objects are masked from 'package:stats': \n##  \n##     filter, lag \n## The following objects are masked from 'package:base': \n##  \n##     intersect, setdiff, setequal, union \n\n```", "```py\nselect(product_info, id, name, type, class) \n## Source: local data frame [6 x 4] \n##  \n##      id      name  type   class \n##   (chr)     (chr) (chr)   (chr) \n## 1   T01    SupCar   toy vehicle \n## 2   T02  SupPlane   toy vehicle \n## 3   M01     JeepX model vehicle \n## 4   M02 AircraftX model vehicle \n## 5   M03    Runner model  people \n## 6   M04    Dancer model  people \n\n```", "```py\nfilter(product_info, released == \"yes\") \n## Source: local data frame [4 x 5] \n##  \n##      id      name  type   class released \n##   (chr)     (chr) (chr)   (chr)    (chr) \n## 1   T01    SupCar   toy vehicle      yes \n## 2   M01     JeepX model vehicle      yes \n## 3   M02 AircraftX model vehicle      yes \n## 4   M03    Runner model  people      yes \n\n```", "```py\nfilter(product_info, \n  released == \"yes\", type == \"model\") \n## Source: local data frame [3 x 5] \n##  \n##      id      name  type   class released \n##   (chr)     (chr) (chr)   (chr)    (chr) \n## 1   M01     JeepX model vehicle      yes \n## 2   M02 AircraftX model vehicle      yes \n## 3   M03    Runner model  people      yes \n\n```", "```py\nmutate(product_stats, density = size / weight) \n## Source: local data frame [6 x 5] \n##  \n##      id material  size weight   density \n##   (chr)    (chr) (int)  (dbl)     (dbl) \n## 1   T01    Metal   120   10.0 12.000000 \n## 2   T02    Metal   350   45.0  7.777778 \n## 3   M01 Plastics    50     NA        NA \n## 4   M02 Plastics    85    3.0 28.333333 \n## 5   M03     Wood    15     NA        NA \n## 6   M04     Wood    16    0.6 26.666667 \n\n```", "```py\narrange(product_stats, material, desc(size), desc(weight)) \n## Source: local data frame [6 x 4] \n##  \n##      id material  size weight \n##   (chr)    (chr) (int)  (dbl) \n## 1   T02    Metal   350   45.0 \n## 2   T01    Metal   120   10.0 \n## 3   M02 Plastics    85    3.0 \n## 4   M01 Plastics    50     NA \n## 5   M04     Wood    16    0.6 \n## 6   M03     Wood    15     NA \n\n```", "```py\nproduct_info_tests <- left_join(product_info, product_tests, by = \"id\") \nproduct_info_tests \n## Source: local data frame [6 x 8] \n##  \n##      id      name  type   class released quality durability \n##   (chr)     (chr) (chr)   (chr)    (chr)   (int)      (int) \n## 1   T01    SupCar   toy vehicle      yes      NA         10 \n## 2   T02  SupPlane   toy vehicle       no      10          9 \n## 3   M01     JeepX model vehicle      yes       6          4 \n## 4   M02 AircraftX model vehicle      yes       6          5 \n## 5   M03    Runner model  people      yes       5         NA \n## 6   M04    Dancer model  people       no       6          6 \n## Variables not shown: waterproof (chr) \n\n```", "```py\nsummarize(group_by(product_info_tests, type, class), \n  mean_quality = mean(quality, na.rm = TRUE), \n  mean_durability = mean(durability, na.rm = TRUE)) \n## Source: local data frame [3 x 4] \n## Groups: type [?] \n##  \n##    type   class mean_quality mean_durability \n##   (chr)   (chr)        (dbl)           (dbl) \n## 1 model  people          5.5             6.0 \n## 2 model vehicle          6.0             4.5 \n## 3   toy vehicle         10.0             9.5 \n\n```", "```py\nproduct_info %>% \n  filter(released == \"yes\") %>% \n  inner_join(product_tests, by = \"id\") %>% \n  group_by(type, class) %>% \n  summarize( \n    mean_quality = mean(quality, na.rm = TRUE), \n    mean_durability = mean(durability, na.rm = TRUE)) %>% \n  arrange(desc(mean_quality)) \n## Source: local data frame [3 x 4] \n## Groups: type [2] \n##  \n##    type   class mean_quality mean_durability \n##   (chr)   (chr)        (dbl)           (dbl) \n## 1 model vehicle            6             4.5 \n## 2 model  people            5             NaN \n## 3   toy vehicle          NaN            10.0 \n\n```", "```py\nd1 <- f1(d0, arg1) \nd2 <- f2(d1, arg2) \nd3 <- f3(d2, arg3) \n\n```", "```py\nf3(f2(f1(d0, arg1), arg2), arg3) \n\n```", "```py\nd0 %>% \n  f1(arg1) %>% \n  f2(arg2) %>% \n  f3(arg3) \n\n```", "```py\ndata(diamonds, package = \"ggplot2\") \nplot(density(diamonds$price, from = 0), \n  main = \"Density plot of diamond prices\") \n\n```", "```py\ndiamonds$price %>% \n  density(from = 0) %>% \n  plot(main = \"Density plot of diamonds prices\") \n\n```", "```py\nmodels <- diamonds %>% \n  group_by(cut) %>% \n  do(lmod = lm(log(price) ~ carat, data = .)) \nmodels \n## Source: local data frame [5 x 2] \n## Groups: <by row> \n##  \n##         cut    lmod \n##      (fctr)   (chr) \n## 1      Fair <S3:lm> \n## 2      Good <S3:lm> \n## 3 Very Good <S3:lm> \n## 4   Premium <S3:lm> \n## 5     Ideal <S3:lm> \n\n```", "```py\nmodels$lmod[[1]] \n##  \n## Call: \n## lm(formula = log(price) ~ carat, data = .) \n##  \n## Coefficients: \n## (Intercept)        carat   \n##       6.785        1.251 \n\n```", "```py\ntoy_tests %>% \n  group_by(id) %>% \n  arrange(desc(sample)) %>% \n  do(head(., 3)) %>% \n  summarize( \n    quality = sum(quality * sample) / sum(sample),  \n    durability = sum(durability * sample) / sum(sample)) \n## Source: local data frame [2 x 3] \n##  \n##      id  quality durability \n##   (chr)    (dbl)      (dbl) \n## 1   T01 9.319149   9.382979 \n## 2   T02 9.040000   8.340000 \n\n```", "```py\ntoy_tests %>% \n  group_by(id) %>% \n  arrange(desc(sample)) \n## Source: local data frame [8 x 5] \n## Groups: id [2] \n##  \n##      id     date sample quality durability \n##   (chr)    (int)  (int)   (int)      (int) \n## 1   T01 20160405    180       9         10 \n## 2   T01 20160302    150      10          9 \n## 3   T01 20160502    140       9          9 \n## 4   T01 20160201    100       9          9 \n## 5   T02 20160403     90       9          8 \n## 6   T02 20160502     85      10          9 \n## 7   T02 20160303     75       8          8 \n## 8   T02 20160201     70       7          9 \n\n```", "```py\ntoy_tests %>% \n  group_by(id) %>% \n  arrange(desc(sample)) %>% \n  do(head(., 3)) \n## Source: local data frame [6 x 5] \n## Groups: id [2] \n##  \n##      id     date sample quality durability \n##   (chr)    (int)  (int)   (int)      (int) \n## 1   T01 20160405    180       9         10 \n## 2   T01 20160302    150      10          9 \n## 3   T01 20160502    140       9          9 \n## 4   T02 20160403     90       9          8 \n## 5   T02 20160502     85      10          9 \n## 6   T02 20160303     75       8          8 \n\n```", "```py\ninstall.packages(\"rlist\") \n\n```", "```py\n{ \n    \"id\": \"T01\", \n    \"name\": \"SupCar\", \n    \"type\": \"toy\", \n    \"class\": \"vehicle\", \n    \"released\": true, \n    \"stats\": { \n      \"material\": \"Metal\", \n      \"size\": 120, \n      \"weight\": 10 \n    }, \n    \"tests\": { \n      \"quality\": null, \n      \"durability\": 10, \n      \"waterproof\": false \n    }, \n    \"scores\": [8, 9, 10, 10, 6, 5] \n  } \n\n```", "```py\nlibrary(rlist) \n\n```", "```py\nproducts <- list.load(\"data/products.json\") \nstr(products[[1]]) \n## List of 8 \n##  $ id      : chr \"T01\" \n##  $ name    : chr \"SupCar\" \n##  $ type    : chr \"toy\" \n##  $ class   : chr \"vehicle\" \n##  $ released: logi TRUE \n##  $ stats   :List of 3 \n##   ..$ material: chr \"Metal\" \n##   ..$ size    : int 120 \n##   ..$ weight  : int 10 \n##  $ tests   :List of 3 \n##   ..$ quality   : NULL \n##   ..$ durability: int 10 \n##   ..$ waterproof: logi FALSE \n##  $ scores  : int [1:6] 8 9 10 10 6 5 \n\n```", "```py\nstr(list.map(products, id)) \n## List of 6 \n##  $ : chr \"T01\" \n##  $ : chr \"T02\" \n##  $ : chr \"M01\" \n##  $ : chr \"M02\" \n##  $ : chr \"M03\" \n##  $ : chr \"M04\" \n\n```", "```py\nlist.mapv(products, name) \n## [1] \"SupCar\"    \"SupPlane\"  \"JeepX\"     \"AircraftX\" \n## [5] \"Runner\"    \"Dancer\" \n\n```", "```py\nreleased_products <- list.filter(products, released) \nlist.mapv(released_products, name) \n## [1] \"SupCar\"    \"JeepX\"     \"AircraftX\" \"Runner\" \n\n```", "```py\nproducts %>% \n  list.filter(released) %>% \n  list.mapv(name) \n## [1] \"SupCar\"    \"JeepX\"     \"AircraftX\" \"Runner\" \n\n```", "```py\nproducts %>% \n  list.filter(released, tests$waterproof) %>% \n  list.select(id, name, scores) %>% \n  str() \n## List of 3 \n##  $ :List of 3 \n##   ..$ id    : chr \"M01\" \n##   ..$ name  : chr \"JeepX\" \n##   ..$ scores: int [1:6] 6 8 7 9 8 6 \n##  $ :List of 3 \n##   ..$ id    : chr \"M02\" \n##   ..$ name  : chr \"AircraftX\" \n##   ..$ scores: int [1:7] 9 9 10 8 10 7 9 \n##  $ :List of 3 \n##   ..$ id    : chr \"M03\" \n##   ..$ name  : chr \"Runner\" \n##   ..$ scores: int [1:10] 6 7 5 6 5 8 10 9 8 9 \n\n```", "```py\nproducts %>% \n  list.filter(mean(scores) >= 8) %>% \n  list.select(name, scores, mean_score = mean(scores)) %>% \n  str() \n## List of 3 \n##  $ :List of 3 \n##   ..$ name      : chr \"SupCar\" \n##   ..$ scores    : int [1:6] 8 9 10 10 6 5 \n##   ..$ mean_score: num 8 \n##  $ :List of 3 \n##   ..$ name      : chr \"SupPlane\" \n##   ..$ scores    : int [1:5] 9 9 10 10 10 \n##   ..$ mean_score: num 9.6 \n##  $ :List of 3 \n##   ..$ name      : chr \"AircraftX\" \n##   ..$ scores    : int [1:7] 9 9 10 8 10 7 9 \n##   ..$ mean_score: num 8.86 \n\n```", "```py\nproducts %>% \n  list.select(name, mean_score = mean(scores)) %>% \n  list.sort(-mean_score) %>% \n  list.stack() \n##        name mean_score \n## 1  SupPlane   9.600000 \n## 2 AircraftX   8.857143 \n## 3    SupCar   8.000000 \n## 4    Dancer   7.833333 \n## 5     JeepX   7.333333 \n## 6    Runner   7.300000 \n\n```", "```py\nproducts %>% \n  list.select(name, type, released) %>% \n  list.group(type) %>% \n  str() \n## List of 2 \n##  $ model:List of 4 \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"JeepX\" \n##   .. ..$ type    : chr \"model\" \n##   .. ..$ released: logi TRUE \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"AircraftX\" \n##   .. ..$ type    : chr \"model\" \n##   .. ..$ released: logi TRUE \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"Runner\" \n##   .. ..$ type    : chr \"model\" \n##   .. ..$ released: logi TRUE \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"Dancer\" \n##   .. ..$ type    : chr \"model\" \n##   .. ..$ released: logi FALSE \n##  $ toy  :List of 2 \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"SupCar\" \n##   .. ..$ type    : chr \"toy\" \n##   .. ..$ released: logi TRUE \n##   ..$ :List of 3 \n##   .. ..$ name    : chr \"SupPlane\" \n##   .. ..$ type    : chr \"toy\" \n##   .. ..$ released: logi FALSE \n\n```", "```py\nproducts %>% \n  list.table(type, class) \n##        class \n## type    people vehicle \n##   model      2       2 \n##   toy        0       2 \n\n```", "```py\nproducts %>% \n  list.filter(released) %>% \n  list.table(type, waterproof = tests$waterproof) \n##        waterproof \n## type    FALSE TRUE \n##   model     0    3 \n##   toy       1    0 \n\n```", "```py\nproducts %>% \n  list.filter(length(scores) >= 5) %>% \n  list.sort(-mean(scores)) %>% \n  list.take(2) %>% \n  list.select(name,  \n    mean_score = mean(scores), \n    n_score = length(scores)) %>% \n  list.stack() \n##        name mean_score n_score \n## 1  SupPlane   9.600000       5 \n## 2 AircraftX   8.857143       7 \n\n```"]