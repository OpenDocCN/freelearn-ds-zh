["```py\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```", "```py\nhist(iris$Sepal.Width)\npar(mfrow = c(2,2))\nfor (species in unique(iris$Species)) {\n  hist(iris$Sepal.Width[iris$Species == species], main = species,\n         xlab = species)\n}\nhist(iris$Sepal.Width, main = \"All Species\")\npar(mfrow = c(1,1))\n```", "```py\n# Make a histogram of the sepal width for all species\niris |>\nggplot(aes(x = Sepal.Width)) +\n  geom_histogram(alpha = 0.328) +\n  theme_minimal()\n# Make a histogram of the sepal width for each species\niris |>\nggplot(aes(x = Sepal.Width, fill = Species)) +\n  geom_histogram(alpha = 0.328) +\n  theme_minimal()\n```", "```py\niris |>\n  ggplot(aes(x = Sepal.Width, fill = Species)) +\n  geom_histogram(alpha = 0.328) +\n  facet_wrap(~ Species, scales = \"free\") +\n  theme_minimal()\n```", "```py\n# Install Libraries\ninstall.packages(\"ggplot2\")\ninstall.packages(\"cowplot\")\n# Load required libraries\nlibrary(ggplot2)\nlibrary(cowplot)\n# Load the Iris dataset\ndata(iris)\n```", "```py\n# Create separate histograms for each species\nhistograms <- list()\nfor (species in unique(iris$Species)) {\n  data_subset <- iris[iris$Species == species, ]\n  histogram <- ggplot(data_subset, aes(x = Sepal.Width)) +\n     geom_histogram(binwidth = 0.1, fill = \"lightblue\", color = \"black\") +\n     labs(title = paste(\"Sepal Width Histogram for\", species)) +\n     labs(x = \"\", y = \"\") +\n     theme_minimal()\n  histograms[[species]] <- histogram\n}\n```", "```py\nhistograms <- lapply(unique(iris$Species), function(species) {\n  data_subset <- iris[iris$Species == species, ]\n  histogram <- ggplot(data_subset, aes(x = Sepal.Width)) +\n     geom_histogram(binwidth = 0.1, fill = \"lightblue\", color = \"black\") +\n     labs(title = paste(\"Sepal Width Histogram for\", species)) +\n     labs(x = \"\", y = \"\") +\n     theme_minimal()\n  return(histogram)\n})\n```", "```py\n# Create histogram for all species combined\nall_species_hist <- ggplot(iris, aes(x = Sepal.Width)) +\n  geom_histogram(binwidth = 0.1, fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Sepal Width Histogram for All Species\") +\n  theme_minimal()\n# Arrange histograms using cowplot\nplot_grid(\n  histograms[[\"setosa\"]],\n  histograms[[\"versicolor\"]],\n  histograms[[\"virginica\"]],\n  all_species_hist,\n  ncol = 2,\n  align = \"hv\"\n  )\n```", "```py\nlibrary(healthyR.data)\nlibrary(healthyR)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(purrr)\n```", "```py\ndf <- healthyR_data |>\n  filter(payer_grouping != '?') |>\n  category_counts_tbl(\n     .count_col = payer_grouping\n     , .arrange = TRUE\n     , ip_op_flag\n  ) |>\n  group_by(ip_op_flag) |>\n  mutate(order_var = paste0(\n     sprintf(\"%02i\", as.integer(rank(n))),\n     \" - \",\n     payer_grouping\n     )) |>\n  ungroup()\n```", "```py\nggplot(df, aes(x = order_var, y = n)) +\n  geom_col(alpha = 0.328) +\n  labs(x = \"\", y = \"\") +\n  theme(legend.position = \"none\") +\n  facet_wrap(~ ip_op_flag, scale = \"free\") +\n  scale_x_discrete(\n     labels =  with(df, as.character(payer_grouping) |>\n                              set_names(order_var))) +\n  xlab(NULL) +\n  theme(axis.text.x = element_text(\n     angle = 90, hjust=1, vjust=.5)) +\n  coord_flip() +\n  theme_minimal()\n```", "```py\n# Sample data\ndata <- data.frame(\n  Category = c(\"A\", \"B\", \"C\", \"D\"),\n  Initial = c(10, 15, 8, 12),\n  Final = c(18, 22, 14, 16)\n)\n```", "```py\ndata <- data |>\n  mutate(Midpoint = (Initial + Final)/2)\n```", "```py\n# Create the dumbbell plot using ggplot2\ndumbbell_plot <- ggplot(data, aes(x = Category, xend = Category, \n    y = Initial, yend = Final)) +\n  geom_segment(color = \"gray50\") +  # Lines connecting dots\n  geom_point(color = \"blue\", size = 3) +  # Initial values\n  geom_point(aes(y = Final),\n                  color = \"orange\", size = 3) +  # Final values\n  geom_text(aes(label = Midpoint),\n                 vjust = -0.5, size = 3) +  # Midpoint labels\n  labs(title = \"Dumbbell Plot\",\n         x = \"Category\",\n         y = \"Values\") +\n  theme_minimal()\n# Print the plot\ndumbbell_plot\n```", "```py\n    from plotnine import ggplot, aes, geom_point, geom_bar, geom_histogram, geom_boxplot, geom_tile, geom_violin, theme_minimal, labs\n    import pandas\n    # Sample data\n    data = pandas.DataFrame({'x': [1, 2, 3, 4, 5],\n                             'y': [2, 4, 1, 3, 5]})\n    # Create a scatter plot\n    gg = ggplot(aes(x='x', y='y'), data) + geom_point()\n    print(gg)\n    ```", "```py\n    # Sample data\n    data = pandas.DataFrame({'category': ['A', 'B', 'C', 'D'],\n                             'value': [10, 25, 15, 30]})\n    # Create a bar chart\n    gg = ggplot(aes(x='category', y='value'), \n        data) + geom_bar(stat='identity')\n    print(gg)\n    ```", "```py\n    # Sample data\n    data = pandas.DataFrame({'values': [1, 2, 2, 3, 3, 3, 4, 4, 5]})\n    # Create a histogram\n    gg = ggplot(aes(x='values'), data) + geom_histogram(binwidth=1,\n        fill='blue', color='black', alpha = 0.5)\n    print(gg)\n    ```", "```py\n    # Sample data\n    data = pandas.DataFrame({'category': ['A', 'A', 'B', 'B', 'C', 'C'],\n                             'value': [10, 15, 20, 25, 30, 35]})\n    # Create a box plot\n    gg = ggplot(aes(x='category', y='value'), data) + geom_boxplot()\n    print(gg)\n    ```", "```py\n    data = {\n            'x': ['A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D'],\n            'y': ['W', 'X', 'Y', 'Z', 'W', 'X', 'Y', 'Z', 'W', 'X', 'Y', 'Z', 'W', 'X', 'Y', 'Z'],\n            'value': [10, 15, 5, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]\n    }\n    # Convert data to a DataFrame\n    data = pandas.DataFrame(data)\n    # Create a heatmap\n    gg = (ggplot(data, aes(x='x', y='y', fill='value'))\n                + geom_tile()\n                + theme_minimal()\n                + labs(title='Heatmap Example', x='X-Axis', y='Y-Axis', fill='Values'))\n    print(gg)\n    ```", "```py\n    # Sample data\n    data = {\n            'Category': ['A', 'A', 'B', 'B', 'B', 'C', 'C', 'D', 'D', 'D'],\n            'Value': [10, 15, 25, 30, 35, 45, 50, 65, 70, 75]\n    }\n    # Convert data to a DataFrame\n    df = pandas.DataFrame(data)\n    # Create a violin plot\n    gg = (ggplot(df, aes(x='Category', y='Value', fill='Category'))\n                + geom_violin()\n                + theme_minimal()\n                + labs(title='Violin Plot Example', x='Category', y='Value', fill='Category'))\n    print(gg)\n    ```", "```py\n    # Customize labels and titles\n    gg = gg + xlab(\"Custom X Label\") + ylab(\"Custom Y Label\")\n    gg = gg + ggtitle(\"Custom Plot Title\") + labs(subtitle=\"Custom Subtitle\")\n    ```", "```py\n    # Customize axes and legends\n    gg = gg + scale_x_continuous(breaks=[1, 2, 3, 4, 5],\n        labels=[\"One\", \"Two\", \"Three\", \"Four\", \"Five\"])\n    gg = gg + scale_y_continuous(limits=(0, 10))\n    gg = gg + scale_color_manual(values={'A': 'red', 'B': 'blue'})\n    ```", "```py\n    # Apply themes\n    # gg = gg + theme_minimal()\n    gg = gg + theme_light()\n    ```", "```py\n    # Control text formatting\n    gg = gg + theme(text=element_text(size=12, family=\"Arial\",\n        face=\"bold\", color=\"black\"),\n        axis_text_x=element_text(angle=45, hjust=1)\n    ```", "```py\nfrom plotnine import (\n    ggplot, aes, geom_line, geom_point, geom_errorbar, \n    position_dodge, geom_text, labs, geom_smooth\n    )\nimport pandas\nimport numpy\n# Sample data\ndata = pandas.DataFrame({\n        'x': [1, 2, 3, 4, 5],\n        'y': [10, 15, 8, 12, 18],\n        'group': ['A', 'A', 'B', 'B', 'C'],\n        'error': [1, 2, 1.5, 1, 2.5],\n        'label_x': [2, 4, 3, 1, 5],\n        'label_y': [16, 11, 6, 13, 17],\n        'annotation_text': ['Peak', 'Valley', 'Low', 'High', 'Bottom']\n})\n# Create a ggplot object\ngg = ggplot(data, aes(x='x', y='y', group='group')) + \\\n        geom_line() + \\\n        geom_point() + \\\n        geom_errorbar(aes(ymin='y - error', ymax='y + error'), \n        width=0.1, size=0.5, \n        position=position_dodge(width=0.2)) + \\\n        geom_text(aes(x='label_x', y='label_y', \n        label='annotation_text'), size=10)\n# Draw the plot\nprint(gg)\n```", "```py\n# Sample data\ndata = pandas.DataFrame({\n        'X': numpy.arange(1, 21),\n        'Y': numpy.random.randint(1, 101, size=20)\n})\n# Create a base plot\ngg = (ggplot(data, aes(x='X', y='Y')) +\n            geom_point() +\n            labs(title='Scatter Plot with Trendline')\n         )\n# Add a trendline\ngg = gg + geom_smooth(method='lm', se=False, linetype='dashed',\n    color='red', size=1)\nprint(gg)\n```", "```py\n# Sample data\ndata = pandas.DataFrame({\n        'X': numpy.arange(1, 11),\n        'Y': numpy.random.randint(1, 101, size=10)\n})\n# Create a base plot\ngg = (ggplot(data, aes(x='X', y='Y')) +\n            geom_point() +\n            labs(title='Scatter Plot with Annotations')\n         )\n# Add an annotation and adjust the position of the labels along the y-axis using nudge_y by 5 units\ngg = gg + geom_text(aes(label='Y'), nudge_y=5, color='blue')\nprint(gg)\n```", "```py\n    import numpy\n    import pandas\n    import matplotlib.pyplot as plt\n    ### scatter plot\n    data = {\n            'Height': [155, 162, 168, 173, 179],\n            'Weight': [50, 56, 61, 65, 72]\n    }\n    df = pandas.DataFrame(data)\n    # Create a scatter plot\n    df.plot.scatter(x='Height', y='Weight', \n        title='Scatter Plot of Height vs. Weight')\n    # Save the plot to a file (e.g., .png) in your working directory\n    plt.savefig('matplotlib_scatter_plot.png')\n    # Show the plot\n    plt.show()()\n    ```", "```py\n    data = {'Category': ['A', 'B', 'C', 'D', 'E'],\n                    'Values': [15, 28, 24, 20, 32]}\n    df = pandas.DataFrame(data)\n    # Create a basic bar chart\n    plt.figure(figsize=(8, 6))\n    plt.bar(df['Category'], df['Values'], color='skyblue')\n    plt.xlabel('Categories')\n    plt.ylabel('Values')\n    plt.title('Basic Bar Chart')\n    # Save the plot to a file (e.g., .png)\n    plt.savefig('matplotlib_bar_chart.png')\n    plt.show()\n    ```", "```py\n    # Generate some random data for the histogram\n    data = numpy.random.normal(0, 1, 1000)\n    # Create a basic histogram\n    plt.figure(figsize=(8, 6))\n    plt.hist(data, bins=20, color='lightblue', edgecolor='black')\n    plt.xlabel('Values')\n    plt.ylabel('Frequency')\n    plt.title('Basic Histogram')\n    # Save the plot to a file (e.g., .png)\n    plt.savefig('matplotlib_histogram.png')\n    plt.show()\n    ```", "```py\n    # Generate some random data for the box plot\n    data = [numpy.random.normal(0, 1, 100) for _ in range(3)]  # Three sets of random data\n    # Create a basic box plot\n    plt.figure(figsize=(8, 6))\n    plt.boxplot(data, vert=False, \n        labels=['Set 1', 'Set 2', 'Set 3'])\n    plt.xlabel('Values')\n    plt.ylabel('Data Sets')\n    plt.title('Basic Box Plot')\n    # Save the plot to a file (e.g., .png)\n    plt.savefig('matplotlib_boxplot.png')\n    plt.show()\n    ```", "```py\n    # Generate some random data for the heatmap\n    numpy.random.seed(42)\n    data = numpy.random.rand(5, 5)  # Create a 5x5 matrix of random values\n    # Create a heatmap\n    plt.figure(figsize=(8, 6))\n    heatmap = plt.imshow(data, cmap='viridis', \n        interpolation='nearest')\n    plt.colorbar(heatmap)\n    plt.title('Heatmap Example')\n    # Save the plot to a file (e.g., .png)\n    plt.savefig('matplotlib_heatmap.png')\n    plt.show()\n    ```", "```py\n    # Generate some random data for the violin plot\n    numpy.random.seed(42)\n    data = [numpy.random.normal(0, std, 100) for std in range(1, 4)]\n    # Create a violin plot\n    plt.figure(figsize=(8, 6))\n    plt.violinplot(data, showmedians=True)\n    plt.title('Violin Plot Example')\n    plt.xticks([1, 2, 3], ['Group 1', 'Group 2', 'Group 3'])\n    plt.xlabel('Groups')\n    plt.ylabel('Values')\n    # Save the plot to a file (e.g., .png)\n    plt.savefig('matplotlib_violinplot.png')\n    plt.show()\n    ```", "```py\n# Sample data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 35]\n# Create a scatter plot\nplt.scatter(x, y)\n# Customize labels and titles\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Custom Title')\nplt.suptitle('Subtitle for Additional Context')\n# Display the plot\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n# Sample data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 35]\n# Create a line plot\nplt.plot(x, y, label='Data Series A')\n# Customize axes and legend\nplt.xlim(0, 6)\nplt.ylim(0, 40)\nplt.xticks([1, 2, 3, 4, 5])\nplt.yticks([0, 10, 20, 30, 40])\nplt.legend()\n# Display the plot\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n# Apply a different theme\nplt.style.use('ggplot')\n# Sample data and plot\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 35]\nplt.plot(x, y)\n# Display the plot\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\n# Sample data and plot\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 35]\nplt.plot(x, y)\n# Customize text formatting\nplt.title('Custom Title', fontsize=16, fontweight='bold', \n    color='blue')\nplt.xlabel('X-axis Label', fontsize=12, fontstyle='italic', \n    color='green')\nplt.ylabel('Y-axis Label', fontsize=12, fontweight='bold', \n    color='red')\n# Display the plot\nplt.show()\n```", "```py\n    import win32com.client as win32\n    # Initialize Excel\n    excel = win32.gencache.EnsureDispatch('Excel.Application')\n    excel.Visible = True\n    # Create a new workbook\n    workbook = excel.Workbooks.Add()\n    # Define the (absolute) image path\n    image_path = 'path\\\\to\\\\your\\\\image.png'\n    # Insert the image into a specific sheet and cell\n    sheet = workbook.ActiveSheet\n    cell = sheet.Range(\"A1\")  # You can specify the cell where you want to insert the image\n    # Add the image to the worksheet (note that Width and Height might need to be adjusted)\n    sheet.Shapes.AddPicture(image_path, LinkToFile=False,\n        SaveWithDocument=True, Left=cell.Left, \n        Top=cell.Top, Width=300, Height=200)\n    # Save the workbook\n    workbook.SaveAs('your_excel_with_image.xlsx')\n    # Close Excel\n    excel.Application.Quit()\n    ```"]