- en: Visualizing and Working with Time Series Data
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of whether the data source is from a file or database, we have now
    defined a repeatable analysis workflow. This is used to load the data into either
    an array or DataFrame and then answer business questions by running a few Python
    commands using their respective libraries.
  prefs: []
  type: TYPE_NORMAL
- en: This process has served us well so far and is a necessary step to *up-skill*
    our learning of how to work with data, which ultimately improves data literacy. Now,
    we are going to take yet another exciting step to help you communicate analysis
    by visualizing your data. In this chapter, we will learn how to create visual
    artifacts that can support structured data. We will break down the anatomy of
    a chart by uncovering the fundamentals of how data visualizations are created.
    Using the plotting features available in Python, you will create your first time
    series chart using the `matplotlib` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Data modeling for results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of a chart and data viz best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparative analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shape of the curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the GitHub repository for this book at [https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter06](https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: You can download and install the required software from [https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual).
  prefs: []
  type: TYPE_NORMAL
- en: Data modeling for results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The introduction to data modeling we provided in [Chapter 5](bea8a62c-4469-47e3-a668-10fbb91815ea.xhtml),
    *Gathering and Loading Data in Python*, gave us an understanding of relational
    databases and fundamental statistics that can be performed against structured
    data. In those examples, we learned about the relationships of data and how data
    can be modeled from the perspective of the data producer. **Data producers** are
    responsible for storing data in a structure to ensure the data's integrity is
    consistent. In the previous chapter, we also learned how an**Entity Relationship
    Diagram** (**ERD**) can be used to define the relationships between tables. In
    this chapter, we will apply these same concepts with the *data consumer* in mind.
    As a result, we will focus on creating new relationships with data, making it
    easier for analysis. This concept was an evolution in reporting and spawned a
    new industry commonly known as **Business Intelligence **(**BI**) and **Analytics**.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing dimensions and measures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data modeling for analysis means we are building new relationships from the
    source tables with the intention of answering business questions for the consumer. Creating
    a new data model with this focus scales up your analysis beyond single SQL `SELECT`
    statements that are run one at a time to answer one question. On the contrary,
    using a newly derived data model for analysis will provide answers to dozens of questions
    using only a few or even one table. How is this possible? It's all about why the
    new analysis tables are needed and how those relationships are defined. For example,
    the database tables required to support a mobile application used for social media
    would not be the same data model that's used for a sales analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the data model that is created from the data producer may be
    reused for a consumer so that you don't have to make any changes, such as in our
    example in the previous chapter. In other cases, you will simply extend the existing
    data model with the addition of new fields, which could be from new data sources
    or derived from the existing data rows and columns. In either case, from a data
    analyst perspective, we are changing how we look at an existing data model by
    looking at how we could use columns as either dimensions or measures.
  prefs: []
  type: TYPE_NORMAL
- en: '*Dimensions* in data models are values with descriptive attributes that are
    commonly used to identify a person, place, or thing. The easiest way to remember
    dimensional fields is that they can be classified as a *noun*. A good example
    would be a date dimension where any given date value, such as `12/03/1975`, would
    have multiple attributes that can be derived from this one value, as shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Field Value** |'
  prefs: []
  type: TYPE_TB
- en: '| Date | `12/03/1975` |'
  prefs: []
  type: TYPE_TB
- en: '| Year | `1975` |'
  prefs: []
  type: TYPE_TB
- en: '| Month Number | `12` |'
  prefs: []
  type: TYPE_TB
- en: '| Month Name | `December` |'
  prefs: []
  type: TYPE_TB
- en: '| WeekDay | `Wednesday` |'
  prefs: []
  type: TYPE_TB
- en: '| Quarter | `Q4` |'
  prefs: []
  type: TYPE_TB
- en: '| Is_Weekend_Flag | `FALSE` |'
  prefs: []
  type: TYPE_TB
- en: A measure in a data model is any field that has values that can be aggregated
    using statistical calculations such as `sum`, `min`, `max`, or `average`. An easy
    way to identify a measure field is to question whether the values are in action
    so you could classify them as verbs. In many cases, measure values repeat with
    high frequency in a table source. Common fields that can be identified as a measure
    include a sales amount, sales quantity, or stock closing price. Measure fields
    are typically stored in tables that you can abstract to a `fact` table. A `fact`
    table will already be defined by the producer or could be derived during analysis.
    A fact table represents an event, transaction, or entity defined by a single row
    in a database table. A primary key, which we defined in [Chapter 5](https://cdp.packtpub.com/python_data_analysis_beginners_guide/wp-admin/post.php?post=28&action=edit),
    *Gathering and Loading Data in Python*, is used to uniquely identify each row
    to ensure consistency for reporting and analysis. If multiple fields are required
    to uniquely identify a record, a surrogate key field would be created.
  prefs: []
  type: TYPE_NORMAL
- en: Joined to the fact table will be one or more dimensional tables organized in
    a way that they answer business questions in a repeatable manner. Unlike a relational
    data model, which is used to support systems and applications, a dimensional data
    model should be built for analysis and reporting.
  prefs: []
  type: TYPE_NORMAL
- en: These concepts were introduced to me over 10 years ago by my mentor and former
    colleague Rich Hunter while we worked at Axis Group, LLC in Berkley Heights, NJ.
    I would define the people who worked at this boutique BI consulting company as
    *data marines* because of their ability to understand, adapt, and overcome problems
    using data. Solving problems and creating data solutions were part of their standard
    operating procedures. It was during this time that Rich changed my perspective
    on how to work with data by introducing me to a new way to look at data that changed
    my career. I am excited to share the same foundational data analysis concepts
    with you now. I will forever be grateful for working with my former colleagues
    at Axis Group.
  prefs: []
  type: TYPE_NORMAL
- en: It begins with learning about the data modeling methods created by Ralph Kimball
    and Bill Inmon, who are commonly known as the founding fathers of data warehousing. Both
    men defined approaches that can be used to structure data that scales with any
    size of company and subject area, with a focus on the analysis of data and creating
    reports against it. Their contributions to the data technology industry were so
    monumental that I identified them as part of the *Evolution of Data Analysis*,
    which I discussed in [Chapter 1](https://cdp.packtpub.com/python_data_analysis_beginners_guide/wp-admin/post.php?post=24&action=edit),* Fundamentals
    of Data Analysis.*
  prefs: []
  type: TYPE_NORMAL
- en: A data warehouse, which is commonly known as an **Enterprise Data Warehouse **(**EDW**),
    is a centralized location of data from multiple sources with the purpose of providing,
    reporting, and analyzing data. Traditional data warehouses are organized by subjects
    such as human resources, sales, or accounting. Depending on the complexity of
    the Vs of data (**Variety**, **Volume**, and **Velocity**), a data warehouse may
    be centrally located in one technology solution or distributed across different
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Why would an organization create a centralized data warehouse? Because the consistency
    and accuracy of reporting against the data source are worth the cost. In some
    cases, the importance of quality is so high that companies invest in the creation
    of one or more data warehouses. Once an organization has defined a need for a
    centralized location for all data, it would be commonly known as a *single version
    of the truth* for all reporting and analysis. Ideally, this is where different
    datasets from different technology sources could be collected and conformed with
    defined and consistent business rules. A sales manager and **human resources**
    (**HR**) manager can individually look at data from different reports but have
    the same accuracy so that data-driven decisions can be made.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand why a data warehouse is an important concept, let's
    briefly review the two common approaches that are used to build them. First, they
    are not defined to a specific technology, so when a data architect is creating
    them, the focus is on defining the structure, which is known as the database schema,
    to support the different subject areas. Data subject areas are typically organized
    by lines of business or organizational structures. For example, the HR warehouse
    will have a focus on employee attributes such as hire date, manager, and job title. Once
    the tables and relationships have been defined, a unique employee identifier can
    be shared across the organization and other downstream systems such as employee
    benefits and compensation.
  prefs: []
  type: TYPE_NORMAL
- en: The approach we use to build the warehouse design up and out across the company
    follows two different approaches. Bill Inmon suggests a top-down approach where
    the organization makes a strategic solution to define a common standard before
    implementation. Ralph Kimball recommends a bottom-up approach, where each subject
    area is built to support management decision needs with less enforcement to a
    rigid standard.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I was with a client where the sales teams did geographic hierarchal
    reporting with defined regions to organize the counties they did business with. So,
    a region was defined in the warehouse with the precise short abbreviations to
    represent the values and provide consistency between any reports or analytic applications. **EMEA**
    represented all countries in Europe, the Middle East, and Africa, for example.
  prefs: []
  type: TYPE_NORMAL
- en: This approach worked fine until the HR team decided they wanted to break out
    the counties in EMEA for better reporting and analysis. To solve this, they had
    a few options, including creating a second level in the hierarchy in between the
    country and the region so that reporting would need a drill-down; for example,
    EMEA to the Middle East to Israel.
  prefs: []
  type: TYPE_NORMAL
- en: Another option was to create an HR region field that was independent of how
    the sales regions were defined. This allowed us to send reporting and analysis
    details to executives without impacting anything related to sales analysis. This
    option worked as a solution because the engineering team was able to please business
    users across multiple departments while still creating the value of consistency
    across all downstream reporting solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensionally modeling your data for reporting and analysis is technology-agnostic.
    While the concept and techniques are commonly found in SQL solutions, you are
    not restricted to using only database technologies to model your data for analysis.
    The first step is to understand what questions you are *trying* to answer with
    the data. Then, you can decide which model will best answer the questions at hand.
    Some common questions you can apply to almost any data model are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Who?** Identifying the who in data should be straightforward. For employee
    data, the who is the actual employee unique identifier, along with all the attributes
    that make up that individual, including their first name, last name, date of birth,
    email, hire date, and so on. For sales-related data, the customer would be the
    *who*, so this would be the customer''s name, mailing address, email, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What?** What product or server is being purchased? This would also include
    all the attributes (columns) unique to each product. So, if I purchased a cup
    of coffee, the size, flavor, and unit cost should be included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When?** When is a very common question and with it, it''s easy to identify
    the different fields associated with answering this question. All date, time,
    and timestamp fields are used to answer the question of when. For example, if
    a web user accesses a website, the *when* is the specific date and time that was
    recorded for that event. This becomes more complicated if the date/time data type
    is not standardized or doesn''t account for time zones such as **Coordinated Universal
    Time**. (**UTC**). Once you have the specific grain of detail behind all associated
    values, *Year*, *Month*, *Week*, and *Weekday* can be determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Where?** Where did the sale of the product or service occur? Do we have geographic
    location details or was it a store located with a street address?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How?** How does the event occur and how did it happen? Was the *how* of an
    activity, event, or outcome like a user clicking on a button to add an item to
    their shopping cart?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Why?** I think *why* is usually the most important question in data analysis
    and the one that''s requested the most often by business users. Was the *why*
    a promotion or marketing campaign such as a flash sale for a specific product
    or service?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A visual representation of this can be seen in the following diagram, which
    shows all these key questions as dimensions, with an **Event Fact** in the center.
    This is commonly known as a **star schema** relationship, where high-volume transactions
    with many rows are stored in the **Event Fact** and distinct and unique values
    are stored in dimensional tables that address the questions of **Who**, **What**,
    **When**, **Where**, **How**, and **Why**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7c577ab-f1c0-4802-8238-8532734dcd67.png)'
  prefs: []
  type: TYPE_IMG
- en: The rule of thumb is that the Event Fact table is narrow (a low number of fields
    with multiple join key fields) with a high number of rows. Dimensional tables
    will have district records with wide attributes (a high number of fields with
    a single join key).
  prefs: []
  type: TYPE_NORMAL
- en: In the process of asking and answering these questions, you end up grouping
    one or more fields together from the source data into defined relationships. For
    example, for all the customer attributes, you could create a table, CSV file,
    or DataFrame with all the different fields using a single unique key to identify
    each customer. Creating a data model is the foundation of building out charts
    and data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of a chart and data viz best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what makes a good chart or visualization? The answer depends on a few factors,
    most of which boils down to the dataset you are working with. Think of a dataset
    as a table of rows and columns that has consistency for each column or field available.
    For example, Year should have values of `2013`, `2014`, and `2015` all in the
    same consistent format. If your dataset has inconsistent formats or a mix of values,
    then cleansing your dataset before creating the chart is recommended. Data cleansing,
    or scrubbing, is the process of fixing or removing inaccurate records from your
    dataset. Charts need uniformity for reasons such as sorting the year values in
    ascending order to present a trend accurately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go with a simple example, as shown in the following diagram. Here, on
    the left-hand side of this dataset, we have a uniform table of data with four
    rows, two columns, and a header row. To ensure that you understand this concept,
    a table is a type of chart where you can define dimensions and measures. The header
    of this chart makes it easy for us to understand what the values should represent
    for each row because each column has consistent formats. As we covered in [Chapter
    1](https://cdp.packtpub.com/python_data_analysis_beginners_guide/wp-admin/post.php?post=24&action=edit),
    *Fundamentals of Data Analysis*, we call this a *data type*, where every value
    in the same column will help to create a chart that will be much faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7574ddd2-e518-45e5-b122-675e14e88a5f.png)'
  prefs: []
  type: TYPE_IMG
- en: For the preceding chart, we have some obvious cleanup work to do before creating
    any visualization. The Year column in this chart has a mixture of values that
    will make it difficult for us to create a visual trend because of all the inconsistencies.
    Also, for the Sales (in Millions) column, it will be hard to create any aggregation,
    such as the sum of the total sales, because the values are a blend of numbers
    and characters. Regardless of the tool that's used to create a chart, having the
    data cleansed will ensure its quality and accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing your data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have a clean dataset, we are ready to classify the fields of the dataset
    by the fundamentals of a chart – a dimension and a measure. As we discussed earlier,
    the easiest way to explain this difference is that a dimension is a noun, which
    is classified as a person, place, or thing. The most common dimensional field
    that can be applied to many different datasets is date/time, which allows you
    to create trends over time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Measures** are verbs, which are action columns from your data that allow
    aggregation (sum, count, average, min, max, and so on). In the following diagram,
    we have a bar chart labeled **Sales (in Millions)** where I have identified the
    distinction between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d56f3ef2-2fe6-4ba8-b6a0-fcf6ee0708c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Any field with any data type can be used as either a dimension or measure in
    a chart, so be sure the visual you choose answers the business question or provides
    the required insights.
  prefs: []
  type: TYPE_NORMAL
- en: So, why are these concepts important when it comes to creating a chart? They
    are common across almost all the different chart types, regardless of the technology
    used to create it. A bar chart that shows trends over time must have a date dimension
    (day, month, or year) and something to measure – sales, average price, or count
    of users.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now that we understand the basics, let''s walk through a few examples.
    The bar trend chart shown in the following diagram has a dimension of **year** and
    a measure of **Sales by Product**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44ca9dc0-1496-471d-91e9-d0a4ef728945.png)'
  prefs: []
  type: TYPE_IMG
- en: To mix it up, the chart has multiple dimensions. In this case, we have two dimensions—the year
    and the product. The year is displayed in a series on the *x* axis and is not
    labeled. The **Product** values are represented as stacked bars with consistent
    colors for each value corresponding to the legend measured on the *y *axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Charts can be visualized in different types, including the most common: bar,
    line, and pie. The line chart shown in the following screenshot visually offers
    us an easy way to identify the accelerated growth over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5438bad5-5744-41ac-9ac1-cf2cfc7161c5.png)'
  prefs: []
  type: TYPE_IMG
- en: The **Combo** chart in the preceding screenshot has both a line and bars in
    the same chart, with two different measures on the two different axes. In this
    example, the bars represent the measure of **Avg. Temperature (F)**. These can
    be seenon the right axis and are using Fahrenheit as a scale. The line shows the
    **Avg. Rain Fall (in)** measure, which is labeled on the left-hand side axis from
    1.50 to 6.00 inches.
  prefs: []
  type: TYPE_NORMAL
- en: Having two measures allows us to perform a comparative analysis against different
    measures using a common dimension, which is a date in the prior example. Depending
    on the charting technology used in this example, different date dimensions such
    as timestamp, date, or numeric month values can be used on the *x* axis as a month
    represented in MMM format. The end result of this chart tells a dramatic story
    of how these two measures compare throughout time by highlighting the low and
    high outliers without scanning or searching for them in a table.
  prefs: []
  type: TYPE_NORMAL
- en: Why pie charts have lost ground
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pie charts have lost favor as the go-to chart, but were widely used in the past.
    In fact, an entire book written by Stephen Few covers the *dos and don'ts of dashboarding*,
    where he points out why pie charts should be replaced by alternatives, such as
    the horizontal bar chart provided here. I have provided a reference to the book
    in the *Further reading* section if you want to find out more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key advantages of horizontal bar charts over a pie chart are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of consumption**: I don''t have to look at a legend to look up the dimension''s
    values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sort ability**: You can sort by the highest or lowest values to emphasize
    importance within your dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Best of both worlds**: They have distribution and relative value, just like
    a pie chart. If you look at the following chart, you''ll see that **Product 1** is
    twice as large as **Product 5**. Here, you can quickly see by how much because
    the same *x* axis is used for easy reference to the bar width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of a horizontal bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98aee36c-51de-4187-820d-7c8e9fe39afa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you still find a need to use pie charts, they work best if you only have
    two distinct values. In the following example, you can easily see the distribution
    between the **Yes** and **No** values. The use of a primary color for emphasis,
    as well as using a muted grey color for the negative, helps communicate a positive
    message in this chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d016341-0f40-429b-a7f5-282a61dc55d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the right chart is a balance between what story the author wants to
    tell using the data and the number of dimensions and measures available from the
    data. I find it to be an *art and science* approach where practice improves how
    you create good visualizations. There are numerous resources available regarding
    which chart helps you tell the best story. Now that you know the ingredients of
    any chart type that use dimensions and measures, you have a common framework that
    you can apply across any technology and subject area. Choosing the right visual
    chart that helps you convey the right message also takes time, experience, and
    even trial and error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since I classify data visualization as *an* *art and a science*, it does take
    time to go through the profile and understand the business questions you are trying
    to answer. Feel free to use the chart options outlined in the *Further reading*
    section for guidance. Be sure to remember a few of these tips:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reusing code is highly encouraged**: Don''t reinvent the wheel by creating
    a new chart from scratch. Find a good example and attempt to fit your data into
    the dimensions and measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less is more**: Avoid distractions and let the data tell the story – use
    visual cues for emphasis and highlighting outliers. Overusing multiple colors
    is distracting to the consumer, so only use one color to highlight what you want
    the audience of the chart to focus on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**There are plenty of experts out there**: Use them! I have placed a few URL
    links in the *Further reading* section to help.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Art versus science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For me, data visualization is *an* a*rt and a science*. For me, it started
    in fourth grade with my teacher, Mr. Segar, who inspired creativity and introduced
    me to master craftsmen such as Van Gogh, Chaggal, and Cezzane. Art is creating
    and inspiring free thought through visual imagery. How art is defined is subjective,
    but it commonly includes the *elements of art*, which are shape, form, value,
    line, color, space, and texture. Let''s break down each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shape** as an element of art is defined as the *area defined by edges*. Shape
    provides visual context and boundaries outside the work of art to the consumer
    of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form** is defined as the *perceived volume or dimensionality* of an artwork.
    So, form would control the boundaries inside the shape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value** is the use of lightness and darkness within the artwork. Light is
    obviously an important element for any work of art and includes the full spectrum
    of light and lack thereof.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line** as an element of art, which can be straight or curved, spans the distance
    between two points, which allows the artist to define intensity in the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color** is probably the most well-known elements of art and is from when
    light impacts an object. This helps the consumer of the work of art to visually
    interpret pieces individually or in their totality. The properties of color include
    hue, which is what we commonly identify with colors such as *red*, *yellow*, and *blue*.
    Color also includes intensity, which is controlled by the full spectrum of colors
    available, along with value, which controls the brightness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Space** is the area defined by the artist when they include the background
    and foreground. The distance in or around the space is another important factor
    to consider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Texture** for the consumer of the artwork is the visual feeling portrayed
    in two-dimensional art.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Science** is all about empirical evidence, which can be defined as data that''s
    acquired by observation or experimentation. Data has always been part of the scientific
    method and is critical to collecting evidence to prove a theory or hypothesis.'
  prefs: []
  type: TYPE_NORMAL
- en: When these two concepts come together, they allow you to tell a story with information
    using data visualizations that provide insights and give us the ability to understand
    trends instantly.
  prefs: []
  type: TYPE_NORMAL
- en: What makes great data visualizations?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For me, it has been a subjective question with my answer evolving over time,
    which means it can be a challenge to provide a straightforward answer.
  prefs: []
  type: TYPE_NORMAL
- en: What I find beautiful and intuitive might not be as insightful to others. This
    is similar to works of art where different styles, periods, and artists will have
    lovers and critics. Over the last few years, I have witnessed how data visualizations
    have evolved into an art form where technology and coding have allowed creativity
    to flourish. This movement from creating simple charts, plots, and graphics has
    evolved to what is commonly known as **data viz**.
  prefs: []
  type: TYPE_NORMAL
- en: Data viz can be anything from an infographic to an animated visual that can
    tell a story with data. When I see something that is aesthetically pleasing and
    inspires me to take action, I would classify that as a great data visualization. These
    actions can vary based on the information provided, but common responses include
    sharing the data viz with others with the intention of sparking a dialog about
    it. Also, a great data viz should reveal patterns and trends. This helps the consumer
    easily separate the actionable information from the noise. Noise in data means
    the audience is confused by the chart or no recognizable visual patterns are evident.
    The graphic that's displayed should be intuitive to the audience and not require
    additional context or force the consumer to look up additional information just
    to understand the chart.
  prefs: []
  type: TYPE_NORMAL
- en: There are experts in the field of data viz that I've included in the *Evolution
    of data analysis* section of [Chapter 1](https://cdp.packtpub.com/python_data_analysis_beginners_guide/wp-admin/post.php?post=24&action=edit),
    *Fundamentals of Data Analysis*. They include Stephen Few, Edward Tufte, and Alberto
    Cairo. I would encourage you to research their many different books and writings
    about this subject – I have also added some of their works in the *Further reading*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Another champion in the world of data viz is Naomi B Robinson, who is the founder
    of the **Data Visualization New York** chapter on [Meetup.com](http://meetup.com). This
    public community brings together professional experts across any industry with
    spectrum specialty skills including journalism, software development, data architects,
    UI/UX experts, graphic designers, and data scientists. With members from around
    the world, their mission is to share best practices, expertise, and create an
    open forum to promote data as a craft. Membership is open to anyone, so I would
    encourage you to join as a member and hope you enjoy the events as much as I do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the insights I have gained over the years about data viz include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Data viz is a craft* that will take time to master but will have rewards as
    a career because the more techniques you learn, the better you will get at creating
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technology alone will not make a great data visualization. Technology enables
    the author of a chart, dashboard, or app to create data solutions, but there is
    a learning curve when it comes to mastering each tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *great data viz will inspire people to promote and evangelize the story* about
    data without the context of how it was created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of a great data viz can be found in the documentary *The Inconvenient
    Truth*, where a single line chart was the focal point of why people should pay
    attention to climate change. The inclusion of this one graph, which was shaped
    like a hockey stick, sparked both controversy and conversation. More importantly,
    this data visualization conveyed a story using data to an audience beyond the
    scientific community.
  prefs: []
  type: TYPE_NORMAL
- en: Comparative analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a better understanding of the anatomy of a chart, we can start
    looking at time series charts in depth by explaining some of the differences between
    the date and time trends in charts.
  prefs: []
  type: TYPE_NORMAL
- en: Date and time trends explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll begin with the example shown in the following graph, where we have a
    line chart with each data point represented by a single value. The first great
    thing about visualizing data is how easy it is to interpret the results without
    having all the context of how it was generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d34afebe-4037-4ce4-a9e9-a46ac9b4cb21.png)'
  prefs: []
  type: TYPE_IMG
- en: A best practice to emphasize in the preceding chart is the date values that
    are presented are in the standard and consistent format of YYYY-MM-DD. There are
    multiple reasons why this is important. For the producer of the chart, having
    a consistent data type ensures all the values are accurate for sorting and completion,
    which means the data visual matches the source data. Another factor to consider
    as the producer of the chart is regarding what the lowest available date value
    available is in the source data across all the values. This concept is known as
    the *grain of data*, which determines which date can be used as the dimension
    for the chart. If a mix of daily and monthly data values exists in the same field,
    you should not display them in the same chart *as is* as this may confuse the
    consumer.
  prefs: []
  type: TYPE_NORMAL
- en: My colleague Mike Ursitti is fond of saying good dashboard design is when you
    have created a solution where the consumer does not have to think, so interpretation
    by any audience becomes natural. He's right, of course – it's easy to create distractions
    where the date values that are displayed are inconsistent or overuse color leads,
    which leads to more questions about what the producer of the chart was attempting
    to portray. So, as a data analyst, spend time thinking about which layout and
    design will present your analysis in a logical fashion that is easy to consume
    by any audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chart, we have the same data source as in the previous example
    but now the data has been aggregated by month, represented as an integer value
    from 1 to 12\. The labels used in this case are important to help the consumer
    understand which aggregation is used to represent the values displayed for each
    period of time. The ability to look at data from different date formats is a crucial
    skill to learn for data analysis and improves your data literacy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d911b58-f838-4875-b2b9-4dafe9bdf4fd.png)'
  prefs: []
  type: TYPE_IMG
- en: To *argue* about the insights from this chart requires that you understand whether
    the correct aggregation is used appropriately. In many cases, that requires both
    the consumer and producer to have an understanding of the data subject and how
    it should be used. For this example, summing the values in the *Daily Close Stock
    price* per month would not be relevant for this data domain and a subject matter
    expert would call this type of measure inaccurate.
  prefs: []
  type: TYPE_NORMAL
- en: However, offering a different date format provides us with an opportunity to
    look at the data in a way that may not have been originally considered. You also
    can provide insights faster because you don't have to hunt to find a specific
    value at the individual date value. For example, looking at a 12-month trend shows
    12 data points on a line chart versus displaying dozens or even hundreds of individual
    days.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing results over periods of time in a chart allows you to quickly spot
    outliers or identify trends in the data. For example, if you plot a chart of Apple's
    closing stock prices for each day, you will see upward or downward trends visually
    based on the skew of the line. This allows the consumer to identify patterns in
    the data faster and may not be as evident if you looked at each value individually.
  prefs: []
  type: TYPE_NORMAL
- en: Another popular and useful data analysis is **year over year**. If you are looking
    at the current year, this analysis is commonly known as **year to date** (**YTD**)
    versus **prior year to date** (**PYTD**). In this case, you have to define a fixed
    point in the current year, such as the current day or month, and then only include
    the days or months from last year that align to the prior year.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chartis an example of this useful analysis where we compare the
    volume of Apple shares traded over every month from January to April in the current
    year, which was identified as 2019, and then compared the results with the same
    months during the prior year, which was identified as 2018\. I find using a line
    chart is a useful way to visualize this type of analysis because it''s easy to
    contrast the differences between the two lines. A simple tabular view would also
    demonstrate the differences between them to the consumer of this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70b24385-569b-4589-a31f-96b80f045ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table shows an example of the same data but displayed in a different
    chart type. The preference of how to present this data visually can vary and you
    should be able to produce either option for your audience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56c8c61e-08c2-458a-b335-fe002feabf58.png)'
  prefs: []
  type: TYPE_IMG
- en: The shape of the curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now dive into creating visualizations from data using a new library
    named `matplotlib`, which was installed when you used Anaconda for the first time. According
    to the history page from [matplotlib.org](http://matplotlib.org), this library
    evolved from MATLAB graphics and was created by John D. Hunter with the philosophy
    that *you should be able to create simple plots with just a few commands, or just
    one!*
  prefs: []
  type: TYPE_NORMAL
- en: Like many of the libraries we've introduced, there is a multitude of features
    and capabilities available to help you create charts and data visualizations. The
    `matplotlib` library has an ecosystem that you can apply to different use cases
    that nicely compliment the libraries of `pandas` and `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: There are many tutorials and additional resources available to help you learn
    the library. I have added the necessary links in the *Further reading* section
    for your reference.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to load a CSV file that contains stock price details
    for a publicly-traded company on the **National Association of Securities Dealers
    Automated Quotations Exchange** (**NASDAQ**). We are going to visualize one dimension
    and one measure using a line chart to see if we can identify any trends in the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: To dive in, let's create a new Jupyter Notebook and name it `create_chart_with_matplotlib`.
    For this example, we will use a few libraries and commands we learned in prior
    chapters. I'll walk you through each step in the code, so feel free to follow
    along. I have placed a copy on GitHub for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first time series chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create your first time series chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To load the `pandas` library, use the following command in your Jupyter Notebook
    and run the cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This library should already be available using Anaconda. Refer to [Chapter 2](https://cdp.packtpub.com/python_data_analysis_beginners_guide/wp-admin/post.php?post=24&action=edit),
    *Overview of Python and Installing Jupyter Notebook*, for help with setting up
    your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can load the CSV file in a new DataFrame as `df_stock_price` to make
    it easier to identify. To reduce the number of steps to prepare the data for analysis,
    we are passing some parameter commands to the `pd.read_csv` function to index
    the first column in the file. We will also include the `parse_dates` parameter
    to define the data type of the `Date` field as `datetime64`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Be sure you have copied the `AAPL.csv` file to the correct Jupyter folder directory
    to avoid errors when importing the data file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a good best practice before visualizing the data, let''s ensure the DataFrame can
    be read using the `head()` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the source CSV file has been loaded
    into a DataFrame with a labeled header row with the index column defined as `Date`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a28abb62-4c10-4f33-aaef-6fbe2a1c6d89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To validate that the data type of the index field is accurate, you can run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the data type (**dtype**) of the index
    that was defined for this DataFrame is assigned to the `Date` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03216224-5b9d-4c4d-9367-80c702f68fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Having the index defined as a `datetime` data type field series will make the
    plot features much easier to work with. The more data preparation that's done
    before visualizing will ensure faster creation of charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can import the `matplotlib` library so that we can reference functions
    to visualize data. Matplotlib is a powerful library with multiple modules. We
    will explicitly focus on the `pyplot`module for this example. We''ll use the common `plt` shortcut
    for easy reference and adoption of the best practice standards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a quick line chart using the `plot()` function against our DataFrame.
    To avoid confusion when it comes to interpreting the visualization or an error
    processing the chart, let''s include the specific `Close` field. Be sure to include
    a semicolon at the end of the line when using this library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You may need to include an additional line of `%matplotlib inline` to display
    results in your Jupyter Notebook. This extra line is known as a magic function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look as follows, where a line chart is displayed, which is
    the default option. This displays a trend line with the *x *axis using the `Date` field,
    which is also the dimension, and the *y* axis using the `Close` price field values,
    which is our measure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edd46fea-9afa-4e1f-bb6c-0b7ad64f2364.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `plot()` function has many different parameters that can be used to customize
    the visualization. Let''s explore a few easy changes by adjusting the line width,
    color, and line style using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the same line chart is displayed, except
    the color has changed, the line width has been reduced, and the style of the line
    is dotted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c90a0db-06a9-4a52-83c0-81834690e0c9.png)'
  prefs: []
  type: TYPE_IMG
- en: There are many different parameters that allow you to change the style of the
    visualization with some minor adjustments. I've put a reference to the library
    for you to explore in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s enrich the chart features by including more details for the consumer
    by adding labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the same line chart is displayed before,
    except now we include context details such as dimension and measure labels, along
    with the header of the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fbd914fc-ea90-4c33-a8c5-652bb03d351a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another data visualization feature available in this library is a bar chart.
    To use this feature, we have to make a few adjustments to the commands. To answer
    the question, *What is the stock volume trend?*, we can use this command. Note
    the use of `.index` to pass the `Date` field values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the chart displays values as a bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9868f90-22bf-4ab1-8449-5f61ce439ae4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, I see some issues with how this chart is presented to the consumer.
    The labels are overlapping, so it''s difficult to understand the visualization.
    Let''s add a few minor adjustments to make the chart more aesthetically pleasing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look as follows, where the chart displays values as a bar chart.
    Note, however, that the labels have been added to make the chart easier to consume
    and understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3874fb0b-e55a-4440-bdb4-69919c9298b6.png)'
  prefs: []
  type: TYPE_IMG
- en: These steps define the best practice for producing an analysis workflow to visualize
    your data. Once you store data in a DataFrame and load the `matplotlib` library, visualizing
    your data becomes much faster. A little trial and error as you make adjustments
    to the parameters during this process is common. Always save your work and examples
    so that you can easily recreate the data visualizations that provide insights
    quickly without you having to sift through rows of data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations – you have now learned some exciting new ways to visualize data
    and interpret various chart types to help expand your data literacy skills! In
    this chapter, you learned some best practices to find the right chart for the
    right type of analysis. You also learned the difference between a dimension and
    a measure, along with how to model data for analysis to answer questions.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned some essential skills for making various plots, such as line
    graphs and bar charts, by exploring the various time series and date functionality
    in pandas. We highlighted leaders such as Alberto Cairo and Naomi B. Robbins in
    the world of data visualization and discussed how they have influenced the evolution
    of data analysis. Finally, you used the `.plot()` method to create time series
    charts using the `matplotlib` library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore techniques we can use to clean, refine,
    and blend multiple datasets together.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reference to all the Matplotlib library features: [https://matplotlib.org/index.html](https://matplotlib.org/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization pitfalls to avoid: [https://www.ometis.co.uk/data-visualisation-pitfalls/](https://www.ometis.co.uk/data-visualisation-pitfalls/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nice writeup to help you choose the right chart: [http://extremepresentation.typepad.com/blog/2006/09/choosing_a_good.html](http://extremepresentation.typepad.com/blog/2006/09/choosing_a_good.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A great website to help you find the right chart for the right type of analysis:[ http://labs.juiceanalytics.com/chartchooser/index.html](http://labs.juiceanalytics.com/chartchooser/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A nice cheat sheet to improve data viz: [http://billiondollargraphics.com/wp-content/uploads/2015/09/Billion-Dollar-Graphics-Graphic-Cheat-Sheet.pdf](http://billiondollargraphics.com/wp-content/uploads/2015/09/Billion-Dollar-Graphics-Graphic-Cheat-Sheet.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data visualization guide: [http://www.excelcharts.com/blog/god-and-moses-the-differences-between-edward-tufte-and-stephen-few/](http://www.excelcharts.com/blog/god-and-moses-the-differences-between-edward-tufte-and-stephen-few/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Functional Art blog: [http://www.thefunctionalart.com/](http://www.thefunctionalart.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NYC Data Visualization Meetup chapter, which is open to members from around
    the world: [https://www.meetup.com/DataVisualization/](https://www.meetup.com/DataVisualization/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kimball Group Dimensional Modeling Techniques: [https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
