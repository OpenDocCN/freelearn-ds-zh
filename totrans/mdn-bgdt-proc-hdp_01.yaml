- en: Enterprise Data Architecture Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, enterprises have embraced data warehouses to store, process,
    and access large volumes of data. These warehouses are typically large RDBMS databases
    capable of storing a very-large-scale variety of datasets. As the data complexity,
    volume, and access patterns have increased, many enterprises have started adopting
    big data as a model to redesign their data organization and define the necessary
    policies around it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This figure depicts how a typical data warehouse looks in an Enterprise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd2772aa-5642-432c-af19-189def518610.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As Enterprises have many different departments, organizations, and geographies,
    each one tends to own a warehouse of their own and presents a variety of challenges
    to the Enterprise as a whole. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple sources and destinations of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data duplication and redundancy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data access regulatory issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-standard data definitions across the Enterprise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software and hardware scalability and reliability issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data movement and auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration between various warehouses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is becoming very easy to build very-large-scale systems at less costs compared
    to what it was a few decades ago due to several advancements in technology, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: Cost per terabyte
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation power per nanometer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gigabits of network bandwidth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With globalization, markets have gone global and the consumers are also global.
    This has increased the reach manifold. These advancements also pose several challenges
    to the Enterprises in terms of:'
  prefs: []
  type: TYPE_NORMAL
- en: Human capital management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warehouse management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logistics management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data privacy and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sales and billing management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding demand and supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to stay on top of the demands of the market, Enterprises have started
    collecting more and more metrics about themselves; thereby, there is an increase
    in the dimensions data is playing with in the current situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Data architecture principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data governance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data as a Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data architecture evolution with Hadoop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data architecture principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data at the current state can be defined in the following four dimensions (four
    Vs).
  prefs: []
  type: TYPE_NORMAL
- en: Volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The volume of data is an important measure needed to design a big data system.
    This is an important factor that decides the investment an Enterprise has to make
    to cater to the present and future storage requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of data in an enterprise need different capacities to store,
    archive, and process. Petabyte storage systems are a very common in the industry
    today, which was almost impossible to reach a few decades ago.
  prefs: []
  type: TYPE_NORMAL
- en: Velocity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is another dimension of the data that decides the mobility of data. There
    exist varieties of data within organizations that fall under the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Streaming data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time/near-real-time data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data at rest:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immutable data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This dimension has some impact on the network architecture that Enterprise uses
    to consume and process data.
  prefs: []
  type: TYPE_NORMAL
- en: Variety
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This dimension talks about the form and shape of the data. We can further classify
    this into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Streaming data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-wire data format (for example, JSON, MPEG, and Avro)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data At Rest:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immutable data (for example, media files and customer invoices)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable data (for example, customer details, product inventory, and employee
    data)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Application data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration files, secrets, passwords, and so on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As an organization, it's very important to embrace very few technologies to
    reduce the variety of data. Having many different types of data poses a very big
    challenge to an Enterprise in terms of managing and consuming it all.
  prefs: []
  type: TYPE_NORMAL
- en: Veracity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This dimension talks about the accuracy of the data. Without having a solid
    understanding of the guarantee that each system within an Enterprise provides
    to keep the data safe, available, and reliable, it becomes very difficult to understand
    the Analytics generated out of this data and to further generate insights.
  prefs: []
  type: TYPE_NORMAL
- en: Necessary auditing should be in place to make sure that the data that flows
    through the system passes all the quality checks and finally goes through the
    big data system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how a typical big data system looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/695a9258-e5b2-4dc8-94a9-a49e5e772e78.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, many different types of applications are interacting with the
    big data system to store, process, and generate analytics.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we try to understand the importance of Metadata, let's try to understand
    what metadata is. Metadata is simply **data about data**. This sounds confusing
    as we are defining the definition in a recursive way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a typical big data system, we have these three levels of verticals:'
  prefs: []
  type: TYPE_NORMAL
- en: Applications writing data to a big data system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing data within the big data system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications consuming data from the big data system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This brings up a few challenges as we are talking about millions (even billions)
    of data files/segments that are stored in the big data system. We should be able
    to correctly identify the ownership, usage of these data files across the Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example of a TV broadcasting company that owns a TV channel; it
    creates television shows and broadcasts it to all the target audience over wired
    cable networks, satellite networks, the internet, and so on. If we look carefully,
    the source of content is only one. But it's traveling through all possible mediums
    and finally reaching the user’s Location for viewing on TV, mobile phone, tablets,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Since the viewers are accessing this TV content on a variety of devices, the
    applications running on these devices can generate several messages to indicate
    various user actions and preferences, and send them back to the application server.
    This data is pretty huge and is stored in a big data system.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how the data is organized within the big data system, it's almost
    impossible for outside applications or peer applications to know about the different
    types of data being stored within the system. In order to make this process easier,
    we need to describe and define how data organization takes place within the big
    data system. This will help us better understand the data organization and access
    within the big data system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extend this example even further and say there is another application
    that reads from the big data system to understand the best times to advertise
    in a given TV series. This application should have a better understanding of all
    other data that is available within the big data system. So, without having a
    well-defined metadata system, it''s very difficult to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the diversity of data that is stored, accessed, and processed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build interfaces across different types of datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correctly tag the data from a security perspective as highly sensitive or insensitive
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the dots between the given sets of systems in the big data ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit and troubleshoot issues that might arise because of data inconsistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having very large volumes of data is not enough to make very good decisions
    that have a positive impact on the success of a business. It's very important
    to make sure that only quality data should be collected, preserved, and maintained.
    The data collection process also goes through evolution as new types of data are
    required to be collected. During this process, we might break a few interfaces
    that read from the previous generation of data. Without having a well-defined
    process and people, handling data becomes a big challenge for all sizes of organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'To excel in managing data, we should consider the following qualities:'
  prefs: []
  type: TYPE_NORMAL
- en: Good policies and processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accountability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formal decision structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcement of rules in management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of these types of qualities is called **data governance**.
    At a high level, we'll define data governance as data that is managed well. This
    definition also helps us to clarify that data management and data governance are
    not the same thing. Managing data is concerned with the use of data to make good
    business decisions and ultimately run organizations. Data governance is concerned
    with the degree to which we use disciplined behavior across our entire organization
    in how we manage that data.
  prefs: []
  type: TYPE_NORMAL
- en: It's an important distinction. So what's the bottom line? Most organizations
    manage data, but far fewer govern those management techniques well.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of data governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to understand the fundamentals of data governance:'
  prefs: []
  type: TYPE_NORMAL
- en: Accountability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transparency ensures that all the employees within an organization and outside
    the organization understand their role when interacting with the data that is
    related to the organization. This will ensure the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Building trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding surprises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accountability makes sure that teams and employees who have access to data describe
    what they can do and cannot do with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Standardization deals with how the data is properly labeled, describe, and categorized.
    One example is how to generate email address to the employees within the organization.
    One way is to use [firstname-lastname@company.com](mailto:firstname-lastname@company.com),
    or any other combination of these. This will ensure that everyone who has access
    to these email address understands which one is first and which one is last, without
    anybody explaining those in person.
  prefs: []
  type: TYPE_NORMAL
- en: Standardization improves the quality of data and brings order to multiple data
    dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Data security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is not a new concept. It's been adopted since the early UNIX time-sharing
    operating system design. In the recent past, security awareness has increased
    among individuals and organizations on this security front due to the widespread
    data breaches that led to a lot of revenue loss to organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Security, as a general concept, can be applied to many different things. When
    it comes to data security, we need to understand the following fundamental questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*What types of data exist?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Who owns the data?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Who has access to the data?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*When does the data exit the system?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Is the data physically secured?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s have a look at a simple big data system and try to understand these
    questions in more detail. The scale of the systems makes security a nightmare
    for everyone. So, we should have proper policies in place to keep everyone on
    the same page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3bd7e50-5fd2-4082-8c18-b407c4eee4ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we have the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Heterogeneous applications running across the globe in multiple geographical
    regions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large volume and variety of input data is generated by the applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the data is ingested into a big data system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETL/ELT applications consume the data from a big data system and put the consumable
    results into RDBMS (this is optional).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business intelligence applications read from this storage and further generate
    insights into the data. These are the ones that power the leadership team's decisions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can imagine the scale and volume of data that flows through this system.
    We can also see that the number of servers, applications, and employees that participate
    in this whole ecosystem is very large in number. If we do not have proper policies
    in place, its not a very easy task to secure such a complicated system.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if an attacker uses social engineering to gain access to the system, we
    should make sure that the data access is limited only to the lowest possible level.
    When poor security implementations are in place, attackers can have access to
    virtually all the business secrets, which could be a  serious loss to the business.
  prefs: []
  type: TYPE_NORMAL
- en: Just to think of an example, a start-up is building a next-generation computing
    device to host all its data on the cloud and does not have proper security policies
    in place. When an attacker compromises the security of the servers that are on
    the cloud, they can easily figure out what is being built by this start-up and
    can steal the intelligence. Once the intelligence is stolen, we can imagine how
    hackers use this for their personal benefit.
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding of security's importance, let's define what needs to
    be secured.
  prefs: []
  type: TYPE_NORMAL
- en: Application security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications are the front line of product-based organizations, since consumers
    use these applications to interact with the products and services provided by
    the applications. We have to ensure that proper security standards are followed
    while programming these application interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Since these applications generate data to the backend system, we should make
    sure only proper access mechanisms are allowed in terms of firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: Also, these applications interact with many other backend systems, we have to
    ensure that the correct data related to the user is shown. This boils down to
    implementing proper authentication and authorization, not only for the user but
    also for the application when accessing different types of an organization's resources.
  prefs: []
  type: TYPE_NORMAL
- en: Without proper auditing in place, it is very difficult to analyze the data access
    patterns by the applications. All the logs should be collected at a central place
    away from the application servers and can be further ingested into the big data
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Input data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the applications generate several metrics, they can be temporarily stored
    locally that are further consumed by periodic processes or they are further pushed
    to streaming systems like Kafka.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we should carefully think through and design where the data is
    stores and which uses can have access to this data. If we are further writing
    this data to systems like Kafka or MQ, we have to make sure that further authentication,
    authorization, and access controls are in place.
  prefs: []
  type: TYPE_NORMAL
- en: Here we can leverage the operating-system-provided security measures such as
    process user ID, process group ID, filesystem user ID, group ID, and also advanced
    systems (such as SELinux) to further restrict access to the input data.
  prefs: []
  type: TYPE_NORMAL
- en: Big data security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on which data warehouse solution is chosen, we have to ensure that
    authorized applications and users can write to and read from the data warehouse.
    Proper security policies and auditing should be in place to make sure that this
    large scale of data is not easily accessible to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: In order to implement all these access policies, we can use the operating system
    provided mechanisms like file access controls and use access controls. Since we're
    talking about geographically distributed big data systems, we have to think and
    design centralized authentication systems to provide a seamless experience for
    employees when interacting with these big data systems.
  prefs: []
  type: TYPE_NORMAL
- en: RDBMS security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many RDBMSes are highly secure and can provide the following access levels 
    to users:'
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They also have built-in auditing mechanisms to tell which users have accessed
    what types of data and when. This data is vital to keeping the systems secure,
    and proper monitoring should be in place to keep a watch on these system's health
    and safety.
  prefs: []
  type: TYPE_NORMAL
- en: BI security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These can be applications built in-house for specific needs of the company,
    or external applications that can power the insights that business teams are looking
    for. These applications should also be properly secured by practicing single sign-on,
    role-based access control, and network-based access control.
  prefs: []
  type: TYPE_NORMAL
- en: Since the amount of insights these applications provide is very much crucial
    to the success of the organization, proper security measures should be taken to
    protect them.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen the different parts of an enterprise system and understood
    what things can be followed to improve the security of the overall enterprise
    data design. Let's talk about some of the common things that can be applied everywhere
    in the data design.
  prefs: []
  type: TYPE_NORMAL
- en: Physical security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This deals with physical device access, data center access, server access, and
    network access. If an unauthorized person gains access to the equipment owned
    by an Enterprise, they can gain access to all the data that is present in it.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the previous sections, when an operating system is running,
    we are able to protect the resources by leveraging the security features of the
    operating system. When an intruder gains physical access to the devices (or even
    decommissioned servers), they can connect these devices to another operating system
    that's in their control and access all the data that is present on our servers.
  prefs: []
  type: TYPE_NORMAL
- en: Care must be taken when we decommission servers, as there are ways in which
    data that's written to these devices (even after formatting) can be recovered.
    So we should follow industry-standard device erasing techniques to properly clean
    all of the data that is owned by enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: In order to prevent those, we should consider encrypting data.
  prefs: []
  type: TYPE_NORMAL
- en: Data encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encrypting data will ensure that even when authorized persons gain access to
    the devices, they will not be able to recover the data. This is a standard practice
    that is followed nowadays due to the increase in mobility of data and employees.
    Many big Enterprises encrypt hard disks on laptops and mobile phones.
  prefs: []
  type: TYPE_NORMAL
- en: Secure key management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have worked with any applications that need authentication, you will
    have used a combination of username and password to access the services. Typically
    these secrets are stored within the source code itself. This poses a challenge
    for programs which are non-compiled, as attackers can easily access the username
    and password to gain access to our resources.
  prefs: []
  type: TYPE_NORMAL
- en: Many enterprises started adopting centralized key management, using which applications
    can query these services to gain access to the resources that are authentication
    protected. All these access patterns are properly audited by the KMS
  prefs: []
  type: TYPE_NORMAL
- en: Employees should also access these systems with their own credentials to access
    the resources. This makes sure that secret keys are protected and accessible only
    to the authorized applications.
  prefs: []
  type: TYPE_NORMAL
- en: Data as a Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data as a Service** (**DaaS**) is a concept that has become popular in recent
    times due to the increase in adoption of cloud. When it comes to data. It might
    some a little confusing that how can data be added to as a service model?'
  prefs: []
  type: TYPE_NORMAL
- en: DaaS offers great flexibility to users of the service in terms of not worrying
    about the scale, performance, and maintenance of the underlying infrastructure
    that the service is being run on. The infrastructure automatically takes care
    of it for us, but given that we are dealing with a cloud model, we have all the
    benefits of the cloud such as *pay as you go*, capacity planning, and so on. This
    will reduce the burden of data management.
  prefs: []
  type: TYPE_NORMAL
- en: If we try to understand this carefully we are taking out the data management
    part alone. But data governance should be well-defined here as well or else we
    will lose all the benefits of the service model.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we are talking about the *Service in the cloud* concept. *Does it mean
    that we cannot use this within the Enterprise or even smaller organizations?*
    The answer is *No*. Because this is a generic concept that tells us the following
    things.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we are talking about a service model, we should keep in mind the following
    things, or else chaos will ensue:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will guarantee that only well-defined users, IP addresses, and services
    can access the data exposed as a service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of an organization that has the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: Employees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers and data centers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intranet documentation sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, all these are independent datasets. But, as a whole when we
    want the organization to succeed. There is lot of overlap and we should try to
    embrace the DaaS model here so that all these applications that are authoritative
    for the data will still manage the data. But for other applications, they are
    exposed as a simple service using REST API; therefore, this increases collaboration
    and fosters innovation within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take further examples of how this is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The team that manages all the employee data in the form of a database can provide
    a simple **Data Service**. All other applications can use this dataset without
    worrying about the underlying infrastructure on which this employee data is stored:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will free the consumers of the data services in such a way that the consumers:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Need not worry about the underlying infrastructure
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Need not worry about the protocols that are used to communicate with these data
    servers
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can just focus on the REST model to design the application
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Typical examples of this would be:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing the employee data in a database like `LDAP` or the `Microsoft Active`
    directory
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The team that manages the infrastructure for the entire organization can design
    their own system to keep off the entire hardware inventory of the organization,
    and can provide a simple data service. The rest of the organization can use this
    to build applications that are of interest to them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will make the Enterprise more agile
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It ensures there is a single source of truth for the data about the entire hardware
    of the organization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves trust in the data and increases confidence in the applications that
    are built on top of this data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Every team in the organization might use different technology to build and
    deploy their applications on to the servers. Following this, they also need to
    build a data store that keeps track of the active versions of software that are
    deployed on the servers. Having a data source like this helps the organization
    in the following ways:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services that are built using this data can constantly monitor and see where
    the software deployments are happening more often
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The services can also figure out which applications are vulnerable and are actively
    deployed in production so that further action can be taken to fix the loopholes,
    either by upgrading the OS or the software
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the challenges in the overall software deployment life cycle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides a single platform for the entire organization to do things in a standard
    way, which promotes a sense of ownership
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation is one of the very important things for an organization. Instead
    of running their own infrastructure, with the DaaS model, organizations and teams
    can focus on the documents that are related to their company and pay only for
    those. Here, services such as Google Docs and Microsoft Office Online are very
    popular as they give us flexibility to pay as we go and, most importantly, not
    worry about the technology required to build these.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having such a service model for data will help us do the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay only for the service that is used
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase or decrease the scale of storage as needed
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Access the data from anywhere if the service is on the Cloud and connected to
    the internet
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Access corporate resources when connected via VPN as decided by the Enterprise
    policy
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding examples, we have seen a variety of applications that are used
    in Enterprises and how data as a model can help Enterprises in variety of ways
    to bring collaboration, innovation, and trust.
  prefs: []
  type: TYPE_NORMAL
- en: But, *when it comes to big data, what can DaaS Do?*
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like all other data pieces, big data can also be fit into a DaaS model
    and provides the same flexibility as we saw previously:'
  prefs: []
  type: TYPE_NORMAL
- en: No worry about the underlying hardware and technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale the infrastructure as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay only for the data that is owned by the Enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational and maintenance challenges are taken away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data can be made geographically available for high availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated backup and recovery for DR requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these few advantages, enterprises can be more agile and build applications
    that can leverage this data as service.
  prefs: []
  type: TYPE_NORMAL
- en: Evolution data architecture with Hadoop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hadoop is a software that helps in scalable and distributed computing. Before
    Hadoop came into existence, there were many technologies that were used by the
    industry to take care of their data needs. Let''s classify these storage mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relational database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's understand what these data architectures are.
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical database architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This model of storing Enterprise data was invented by IBM in the early 60s and
    was used in their applications. The basic concept of hierarchical databases is
    that the data is organized in the form of a **rooted tree**. The root node is
    the beginning of the tree and then all the children are linked only to one of
    its parent nodes. This is a very unique way of storing and retrieving things.
  prefs: []
  type: TYPE_NORMAL
- en: If you have some background in computer science, trees are one of the unique
    ways of storing data so that it has some relation with each other (like a parent
    and child relationship).
  prefs: []
  type: TYPE_NORMAL
- en: 'This picture illustrates how data is organized in a typical HDBMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a822afac-45fe-4dab-9a31-d65bc11157d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the root node is the organization itself and all the data associated
    with the organization follows a tree structure which depicts several relationships.
    These relationships can be understood like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Employee** owns **Laptop**, **Mobile phone**, **Workstation**, and **iMac**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Employee** belongs to **organization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many vendors supply different requirements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer vendors supply **iMac** and **Workstation**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Catering is in both India and USA; two vendors, *The Best Caterers* and *Bay
    Area Caterers,* serve these
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though we have expressed multiple types of relationships in this one gigantic
    data store, we can see that the data gets duplicated and also querying data for
    different types of needs becomes a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a simple question like: *Which vendor supplied the iMac owned by
    Employee-391?*
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we need to traverse the tree and find information from
    two different sub-trees.
  prefs: []
  type: TYPE_NORMAL
- en: Network database architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The network database management system also has its roots in computer science:
    graph theory, where there are a vast and different types of nodes and relationships
    connect them together. There is no specific root node in this structure. It was
    invented in the early 70s:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1aec683-9863-4b4b-a2be-fe16d7fecb94.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, in this structure, there are a few core datasets and there are
    other datasets linked with the core datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how we can understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: The main hospital is defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has many subhospitals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subhospitals are in India and USA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Indian hospital uses the data in patients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The USA hospital uses the data in patients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The patients store is linked to the main hospital
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employees belong to the hospital and are linked with other organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this structure, depending upon the design we come up with, the data is represented
    as a network of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Relational database architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This system was developed again in IBM in the early 80s and is considered one
    of the most reputed database systems to date. A few notable examples of the software
    that adopted this style are Oracle and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: In this model, data is stored in the form of records where each record in turn
    has several attributes. All the record collections are stored in a table. Relationships
    exist between the data attributes across tables. Sets of related tables are stored
    in a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a typical example of how this RDBMS table looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a892b224-45ab-43c4-8638-ceacd2a8d5ec.png)'
  prefs: []
  type: TYPE_IMG
- en: We are defining the following types of tables and relationships
  prefs: []
  type: TYPE_NORMAL
- en: Employees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The table consists of all the employee records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each record is defined in terms of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee unique identifier
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee date of birth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee phone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee mobile
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The table consists of all the devices that are owned by employees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each ownership record is defined in terms of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device ownership identifier
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Device model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Device manufacturer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Device ownership date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Device unique number
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Employee ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Department
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A table consisting of all the departments in the organization:'
  prefs: []
  type: TYPE_NORMAL
- en: Unique department ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique department name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Department and employee mapping table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a special table that consists of only the relationships between the
    department and employee using their unique identifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: Unique department ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unique employee ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hadoop data architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have explored several types of data architectures that have been
    in use by Enterprises. In this section, we will understand how the data architecture
    is made in Hadoop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to give a quick introduction, Hadoop has multiple components:'
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform to run jobs on data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the layer where all of the data is stored in the form of files. These
    files are internally split by the Hadoop system into multiple parts and replicated
    across the servers for high availability.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are talking about the data stored in terms of files, it is very important
    to understand how these files are organized for better governance.
  prefs: []
  type: TYPE_NORMAL
- en: The next diagram shows how the data can be organized in one of the Hadoop storage
    layers. The content of the data can be in any form as Hadoop does not enforce
    them to be in a specific structure. So, we can safely store Blu-Ray™ Movies, **CSV**
    (**Comma Separated Value)** Files, AVRO Encoded Files, and so on inside this data
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering why we are not using the word **HDFS** (**Hadoop Distributed
    File System**) here. It's because Hadoop is designed to run on top of any distributed
    file system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c71360c-9c53-4e50-90f6-f7cea33957bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Data management layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This layer is responsible for keeping track of where the data is stored for
    a given file or path (in terms of servers, offsets, and so on). Since this is
    just a bookkeeping layer, it's very important that the contents of this layer
    are protected with high reliability and durability. Any corruption of the data
    in this layer will cause the entire data files to be lost forever.
  prefs: []
  type: TYPE_NORMAL
- en: In Hadoop terminology, this is also called **NameNode**.
  prefs: []
  type: TYPE_NORMAL
- en: Job execution layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have the data problem sorted out, next come the programs that read and
    write data. When we talk about data on a single server or a laptop, we are well
    aware where the data is and accordingly we can write programs that read and write
    data to the corresponding locations.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar fashion, the Hadoop storage layer has made it very easy for applications
    to give file paths to read and write data to the storage as part of the computation.
    This is a very big win for the programming community as they need not worry about
    the underlying semantics about where the data is physically stored across the
    distributed Hadoop cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Since Hadoop promotes the *compute near the data model*, which gives very high
    performance and throughput, the programs that were run can be scheduled and executed
    by the Hadoop engine closer to where the data is  in the entire cluster. The entire
    transport of data and movement of the software execution is all taken care of
    by Hadoop.
  prefs: []
  type: TYPE_NORMAL
- en: So, end users of Hadoop see the system as a simple one with massive computing
    power and storage. This abstraction has won everyone’s requirements and has become
    the standard in big data computing today.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how many organizations have adopted data warehouses
    to store, process, and access large volumes of data they possess. We learned about
    data architecture principles, their governance, and security. In the next chapter,
    we will take a look at some concepts of data pre-processing.
  prefs: []
  type: TYPE_NORMAL
