- en: Chapter 4. Tipping the Scales
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。衡量尺度
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Using quantitative scales
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定量尺度
- en: Using time scale
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用时间尺度
- en: Using ordinal scale
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用序数尺度
- en: Interpolating string
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值字符串
- en: Interpolating colors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值颜色
- en: Interpolating compound object
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值复合对象
- en: Implementing custom interpolator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义插值器
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As a data visualization developer, one key task that you need to perform over
    and over is to map values from your data domain to visual domain, for example,
    mapping your most recent purchase of a fancy tablet of $453.00 to a 653px-long
    bar, and your last night's pub bill of $23.59 to a 34px-long bar, respectively.
    In a sense, this is what data visualization is all about—mapping data elements
    to their visual metaphor in an efficient and accurate manner. Because this is
    an absolutely essential task in data visualization and animation (animation will
    be discussed in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, in detail), D3 provides rich and robust support on this topic, which
    is the focus of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据可视化开发者，你需要反复执行的一个关键任务是不断地将数据域中的值映射到视觉域中，例如，将你最近购买的一块价值453.00美元的平板电脑映射为653像素长的条形，以及将你昨晚酒吧的消费23.59美元映射为34像素长的条形，分别。从某种意义上说，这就是数据可视化的全部——以高效和准确的方式将数据元素映射到它们的视觉隐喻。因为这是数据可视化和动画（动画将在[第6章](ch06.html
    "第6章。以风格过渡")，“以风格过渡”中详细讨论）中绝对必要的任务，D3提供了丰富且强大的支持，这是本章的重点。
- en: What are scales?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是尺度？
- en: D3 provides various constructs called **scales** to help you perform this kind
    of mapping. Proper understanding of these constructs conceptually is crucial to
    become an effective visualization developer. This is because scales are not only
    used to perform the mapping we have mentioned previously, but also to serve as
    fundamental building blocks for many other D3 constructs, such as transition and
    axes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: D3提供了各种称为**尺度**的结构来帮助您执行此类映射。对这些结构概念上的正确理解对于成为一名有效的可视化开发者至关重要。这是因为尺度不仅用于执行我们之前提到的映射，而且还作为许多其他D3结构（如过渡和坐标轴）的基本构建块。
- en: What are these scales anyway?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些尺度究竟是什么？
- en: 'In short, scales can be thought of as mathematical **functions**. Mathematical
    functions differ from functions defined in imperative programming languages, such
    as JavaScript functions. In mathematics, a function is defined as mapping between
    two sets:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，尺度可以被视为数学**函数**。数学函数与在命令式编程语言（如JavaScript函数）中定义的函数不同。在数学中，函数被定义为两个集合之间的映射：
- en: Let A and B be nonempty sets. A *function f* from A to B is an assignment of
    exactly one element of B to each element of A. We write *f*(a) = b if b is the
    unique element of B assigned by the function *f* to the element a of A.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设 A 和 B 为非空集合。从 A 到 B 的函数 *f* 是将 B 中恰好一个元素分配给 A 中每个元素的赋值。我们写 *f*(a) = b，如果 b
    是函数 *f* 分配给 A 中元素 a 的唯一元素。
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Rosen K. H. 2007)
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (Rosen K. H. 2007)
- en: Despite the dryness of this definition, we still could not help but notice how
    nicely it fits the task we need to perform—mapping elements from the data domain
    to visual domain.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个定义很枯燥，我们还是忍不住注意到它如何完美地符合我们需要执行的任务——将数据域中的元素映射到视觉域中。
- en: Another fundamentally important concept we need to illustrate here is the **domain**
    and **range** of a given function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里需要说明的另一个基本重要概念是给定函数的**定义域**和**值域**。
- en: If *f* is a function from A to B, we say that A is the **domain** of *f* and
    B is the codomain of *f*. If *f*(a) = b, we say that b is the image of a and a
    is a preimage of b. The **range, or image,** of *f* is the set of all images of
    elements of A. Also, if *f* is a function from A to B, we say that *f* maps A
    to B.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 *f* 是从 A 到 B 的函数，我们说 A 是 *f* 的**定义域**，B 是 *f* 的**值域**。如果 *f*(a) = b，我们说 b
    是 a 的**像**，a 是 b 的**原像**。*f* 的**值域**或**像**是 A 中所有元素的像的集合。此外，如果 *f* 是从 A 到 B 的函数，我们说
    *f* 将 A 映射到 B。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Rosen K. H. 2007)
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (Rosen K. H. 2007)
- en: 'To help us understand this concept, let''s take a look at the following illustration:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们理解这个概念，让我们看看以下插图：
- en: '![What are scales?](img/2162OS_04_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![什么是尺度？](img/2162OS_04_01.jpg)'
- en: Function f maps A to B
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 f 将 A 映射到 B
- en: We can clearly see now, in the preceding illustration for function *f,* the
    domain is set **A** and the range is set **B**. Imagine if set A represents our
    data domain and B represents the visual domain, then a function *f* defined here
    is essentially a scale in D3 that maps elements from set A to set B.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以清楚地看到，在前面关于函数 *f* 的说明中，定义域设置为 **A**，范围设置为 **B**。想象一下，如果集合 A 代表我们的数据域，B
    代表视觉域，那么在这里定义的函数 *f* 本质上就是 D3 中的一个尺度，它将集合 A 中的元素映射到集合 B。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the mathematically inclined readers, scale function in data visualization
    are usually **one-to-one** but not **onto** functions. This is a useful insight
    to know but not critical to the purpose of this book. Therefore, we will not discuss
    it further here.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数学倾向的读者，数据可视化中的尺度函数通常是 **一对一** 但不是 **满射** 的函数。这是一个有用的见解，但不是本书目的的关键。因此，我们不会进一步讨论它。
- en: Now, we have discussed the conceptual definition of scale functions in D3, so
    let's take a look at how it can be used to help us develop our visualization project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经讨论了 D3 中尺度函数的概念定义，让我们看看它是如何帮助我们开发可视化项目的。
- en: Using quantitative scales
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用定量尺度
- en: In this recipe, we will examine the most commonly-used scales provided by D3—the
    quantitative scales including linear, power, and logarithmic scales.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将检查 D3 提供的最常用的尺度——包括线性、幂和对数尺度在内的定量尺度。
- en: Getting Ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/quantitative-scales.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/quantitative-scales.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/quantitative-scales.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/quantitative-scales.html)'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s take a look at the following code example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码示例：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code generates the following output in your browser:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在你的浏览器中生成以下输出：
- en: '![How to do it...](img/2162OS_04_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_04_02.jpg)'
- en: Quantitative scale output
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 定量尺度输出
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we have demonstrated some of the most common scales provided
    by D3.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们展示了 D3 提供的一些最常见的尺度。
- en: '**Linear Scale**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性尺度**'
- en: In the preceding code example, we have our data array filled with integers from
    `0` to `10`—as shown on the line marked as `A`—we created a **linear scale** by
    calling the `d3.scale.linear()` function. This returns a linear quantitative scale
    with the default domain set to `[0, 1]` and the default range set to `[0, 1]`.
    Thus the default scale is essentially the **identity function** for numbers. Therefore,
    this default function is not that useful to us, but typically needs to be further
    customized by using its `domain` and `range` functions on line `B` and `C`. In
    this case, we set them both to `[1, 10]`. This scale basically defines the function
    *f(n) = n*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们的数据数组填充了从 `0` 到 `10` 的整数——如标记为 `A` 的行所示——我们通过调用 `d3.scale.linear()`
    函数创建了一个 **线性尺度**。这个函数返回一个默认域设置为 `[0, 1]`、默认范围设置为 `[0, 1]` 的线性定量尺度。因此，默认尺度本质上就是数字的
    **恒等函数**。因此，这个默认函数对我们来说并不那么有用，但通常需要通过使用其 `domain` 和 `range` 函数在行 `B` 和 `C` 上进行进一步定制。在这种情况下，我们将它们都设置为
    `[1, 10]`。这个尺度基本上定义了函数 *f(n) = n*。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![How it works...](img/2162OS_04_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2162OS_04_03.jpg)'
- en: Identity scale
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 标准尺度
- en: 'The second linear scale is a little bit more interesting and it illustrates
    the mapping between two sets better. On line `D`, we set the range as `[1, 20]`,
    which is different from its domain. Hence, now this function is essentially representing
    the following equations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个线性尺度更有趣一些，它更好地说明了两个集合之间的映射。在行 `D` 中，我们将范围设置为 `[1, 20]`，这与它的定义域不同。因此，现在这个函数本质上代表以下方程：
- en: '*f(n) = a * n + b*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f(n) = a * n + b*'
- en: '*1 <= f(n) <= 20*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1 <= f(n) <= 20*'
- en: This is by far the most common case when using D3 scales because your data set
    will be an identical match of your visual set.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是使用 D3 尺度时最常见的情况，因为你的数据集将与你的视觉集完全匹配。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![How it works...](img/2162OS_04_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2162OS_04_04.jpg)'
- en: Linear scale
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 线性尺度
- en: In this second scale, D3 will automatically calculate and assign the value of
    constants `a` and `b` to satisfy the equation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第二个尺度中，D3 将自动计算并分配常数 `a` 和 `b` 的值以满足方程。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some basic algebraic calculation will tell you that `a` is approximately 2.11
    and `b` is -1.11, as in the previous example.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一些基本的代数计算将告诉你，`a` 大约是 2.11，`b` 是 -1.11，就像前面的例子一样。
- en: '**Pow Scale**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**幂尺度**'
- en: The second scale we have created is a **power scale** . On line `E`, we defined
    a power scale with `exponent` of 2\. The `d3.scale.pow()` function returns a default
    power scale function with its `exponent` set as `1`. This scale effectively defines
    the function *f(n) = n^2*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第二种尺度是一种 **幂尺度**。在线 `E` 上，我们定义了一个指数为 2 的幂尺度。`d3.scale.pow()` 函数返回一个默认的幂尺度函数，其
    `指数` 设置为 `1`。此尺度有效地定义了函数 *f(n) = n^2*。
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How it works...](img/2162OS_04_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_05.jpg)'
- en: Simple power scale
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的幂尺度
- en: On line `F`, a second power scale was defined, this time with a different range
    set on line `G` with rounding; the `rangeRound()` function works pretty much the
    same as the `range()` function, which sets the range for a scale. However, the
    `rangeRound` function rounds the output number so that there are no decimal fractions.
    This is very handy since scales are commonly used to map elements from the data
    domain to visual domain. So, the output of a scale is very likely to be a number
    describing some visual characteristics, for example, the number of pixels. Avoiding
    sub-pixel numbers is a useful technique that prevents anti-alias in rendering.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `F` 上定义了第二个幂尺度，这次在 `G` 线上设置了不同的范围并进行四舍五入；`rangeRound()` 函数基本上与 `range()`
    函数相同，它为尺度设置范围。然而，`rangeRound` 函数将输出数字四舍五入，以便没有小数部分。这非常方便，因为尺度通常用于将数据域中的元素映射到视觉域。因此，尺度的输出很可能是一个描述某些视觉特征的数字，例如像素数。避免亚像素数是一种有用的技术，可以防止渲染时的反走样。
- en: The second power scale defines the following function *f(n) = a*n^2 + b, 1 <=
    f(n) <= 10*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个幂尺度定义了以下函数 *f(n) = a*n^2 + b, 1 <= f(n) <= 10*。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![How it works...](img/2162OS_04_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_06.jpg)'
- en: Power scale
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 幂尺度
- en: Similar to the linear scale, D3 will automatically find the suitable constants
    `a` and `b` to satisfy the constraints defined by `domain` and `range` on a power
    scale.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与线性尺度类似，D3 将自动找到合适的常数 `a` 和 `b`，以满足幂尺度上由 `domain` 和 `range` 定义的约束。
- en: '**Log Scale**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**对数尺度**'
- en: On line `H`, a third kind of quantitative scale was created using the `d3.scale.log()`
    function. The default log scale has a `base` of `10`. Line H essentially defines
    the following mathematical function *f(n) = log(n)*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `H` 上，使用 `d3.scale.log()` 函数创建了一种第三种类型的定量尺度。默认对数尺度的基础值为 `10`。线 H 实质上定义了以下数学函数
    *f(n) = log(n)*。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![How it works...](img/2162OS_04_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_07.jpg)'
- en: Simple log scale
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 简单对数尺度
- en: On line `I`, we customized the log scale to have a domain of `[1, 10]` and a
    rounded range of `[1, 10]`, which defines the following constrained mathematical
    function *f(n) = a*log(n) + b, 1 <= f(n) <= 10*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `I` 上，我们自定义了对数尺度，使其域为 `[1, 10]`，范围四舍五入为 `[1, 10]`，这定义了以下约束数学函数 *f(n) = a*log(n)
    + b, 1 <= f(n) <= 10*。
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![How it works...](img/2162OS_04_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_08.jpg)'
- en: Log scale
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对数尺度
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: D3 also provides other additional quantitative scales including quantize, threshold,
    quantile, and identity scales. Due to limited scope in this book and their relatively
    less common usage, they are not discussed here, however, the basic understanding
    of scales discussed and explained here will definitely help your understanding
    of other additional quantitative scales provided by the D3 library. For more information
    on other types of quantitative scales please visit [https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-quantitative](https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-quantitative)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: D3 还提供了其他额外的定量尺度，包括量化、阈值、分位数和恒等尺度。由于本书的范围有限且它们的使用相对较少，这里没有讨论，然而，对这里讨论和解释的尺度的基本理解将肯定有助于您理解
    D3 库提供的其他额外定量尺度。有关其他类型定量尺度的更多信息，请访问 [https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-quantitative](https://github.com/mbostock/d3/wiki/Quantitative-Scales#wiki-quantitative)。
- en: Using the time scale
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间尺度
- en: Often, we perform analysis on a data set that is time- and date-sensitive, therefore,
    D3 provides a built-in time scale to help perform this type of mapping. In this
    recipe, we will learn how to use D3 time scale.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们对时间敏感和日期敏感的数据集进行数据分析，因此，D3 提供了一个内置的时间尺度来帮助执行此类映射。在本教程中，我们将学习如何使用 D3 时间尺度。
- en: Getting Ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/time-scale.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/time-scale.html)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/time-scale.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/time-scale.html)'
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, let''s take a look at the following code example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下以下代码示例：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This recipe generates the following visual output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱生成了以下视觉输出：
- en: '![How to do it...](img/2162OS_04_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_04_09.jpg)'
- en: Time scale
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 时间尺度
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we have a `Date` range defined on line `A` between January 1,
    2013 and December 31, 2013.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们在行 `A` 上定义了一个日期范围，从2013年1月1日到2013年12月31日。
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The JavaScript `Date` object starts its month from `0` and day from `1`. Therefore,
    `new Date(2013, 0, 1)` gives you January 1, 2013 while `new Date(2013, 0, 0)`
    actually gives you December 31, 2012.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript `Date`对象从 `0` 开始月份，从 `1` 开始日期。因此，`new Date(2013, 0, 1)` 给你2013年1月1日，而
    `new Date(2013, 0, 0)` 实际上给你2012年12月31日。
- en: This range was then used to create a D3 **time scale** on line `B` using the
    `d3.time.scale` function. Similar to quantitative scales, time scale also supports
    separate `domain` and `range` definition, which is used to map date- and time-based
    data points to visual range. In this example, we set the range of the scale to
    `[0, 900]`. This effectively defines a mapping from any date-and-time value in
    time range between January 1, 2013 and December 31, 2013 to a number between 0
    and 900.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 `d3.time.scale` 函数在行 `B` 上创建了一个D3 **时间尺度**，这个范围被用来创建时间尺度。与定量尺度类似，时间尺度也支持单独的
    `domain` 和 `range` 定义，用于将基于日期和时间的点映射到视觉范围。在此示例中，我们将尺度的范围设置为 `[0, 900]`。这实际上定义了从2013年1月1日到2013年12月31日之间的任何日期和时间值到0到900之间的数字的映射。
- en: With the time scale defined, we can now map any given `Date` object by calling
    the scale function, for example, `time(new Date(2013, 4, 1))` will return `395`
    and `time(new Date(2013, 11, 15))` will return `1147`, and so on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了时间尺度后，我们现在可以通过调用尺度函数将任何给定的 `Date` 对象映射，例如，`time(new Date(2013, 4, 1))` 将返回
    `395`，`time(new Date(2013, 11, 15))` 将返回 `1147`，依此类推。
- en: 'On line `D`, we create our data array consisting 12 months from January to
    December in 2013:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `D` 上，我们创建了一个数据数组，包含2013年1月到12月的12个月份：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, on line `E`, we created 12 cells representing each month in a year using
    the `render` function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在行 `E` 上，我们使用 `render` 函数创建了12个单元格，代表一年中的每个月份。
- en: 'To spread the cells horizontally, line `F` performs a mapping from the month
    to the `margin-left` CSS style using the time scale we defined:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了水平展开单元格，行 `F` 使用我们定义的时间尺度将月份映射到 `margin-left` CSS样式：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Line `G` generates the label to demonstrating what the scale-based mapping
    produces in this example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 行 `G` 生成标签以展示在此示例中基于缩放的映射产生的结果：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To generate human-readable strings from a JavaScript `Date` object, we used
    a D3 time formatter on line `H`. D3 ships with a powerful and flexible time-formatting
    library, which is extremely useful when dealing with the `Date` object.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要从JavaScript `Date`对象生成可读的字符串，我们在行 `H` 上使用了D3时间格式化器。D3附带了一个强大且灵活的时间格式化库，当处理`Date`对象时非常有用。
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here are some of the most useful `d3.time.format` patterns:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些最有用的 `d3.time.format` 模式：
- en: '`%a`: This is the abbreviated weekday name'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%a`: 这是以缩写形式表示的星期名称'
- en: '`%A`: This is the full weekday name'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%A`: 这是以全称形式表示的星期名称'
- en: '`%b`: This is the abbreviated month name'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`: 这是以缩写形式表示的月份名称'
- en: '`%B`: This is the full month name'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%B`: 这是以全称形式表示的月份名称'
- en: '`%d`: This is the zero-padded day of the month as a decimal number [01,31]'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%d`: 这是以十进制数字表示的零填充的月份天数 [01,31]'
- en: '`%e`: This is the space-padded day of the month as a decimal number [ 1,31]'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%e`: 这是以空格填充的月份天数，以十进制数字表示 [ 1,31]'
- en: '`%H`: This is the hour (24-hour clock) as a decimal number [00,23]'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%H`: 这是以十进制数字表示的小时（24小时制）[00,23]'
- en: '`%I`: This is the hour (12-hour clock) as a decimal number [01,12]'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%I`: 这是以十进制数字表示的小时（12小时制）[01,12]'
- en: '`%j`: This is the day of the year as a decimal number [001,366]'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%j`: 这是以十进制数字表示的年份中的天数 [001,366]'
- en: '`%m`: This is the month as a decimal number [01,12]'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`: 这是以十进制数字表示的月份 [01,12]'
- en: '`%M`: This is the minute as a decimal number [00,59]'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%M`: 这是以十进制数字表示的分钟 [00,59]'
- en: '`%L`: This is the milliseconds as a decimal number [000, 999]'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%L`: 这是以十进制数字表示的毫秒数 [000, 999]'
- en: '`%p`: This is the either AM or PM'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%p`: 这表示上午或下午'
- en: '`%S`: This is the second as a decimal number [00,61]'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%S`: 这是以十进制数字表示的秒 [00,61]'
- en: '`%x`: This is the date, as "`%m/%d/%Y`"'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%x`: 这是以 "`%m/%d/%Y`" 格式表示的日期'
- en: '`%X`: This is the time, as "`%H:%M:%S`"'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%X`: 这是以 "`%H:%M:%S`" 格式表示的时间'
- en: '`%y`: This is the year without century as a decimal number [00,99]'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%y`: 这是以十进制数字表示的没有世纪的年份 [00,99]'
- en: '`%Y`: This is the year with century as a decimal number'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%Y`: 这是以十进制数字表示的包含世纪的年份'
- en: See also
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For the complete reference on D3 time format pattern visit the following link:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看D3时间格式模式的完整参考，请访问以下链接：
- en: '[https://github.com/mbostock/d3/wiki/Time-Formatting#wiki-format](https://github.com/mbostock/d3/wiki/Time-Formatting#wiki-format)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[时间格式化](https://github.com/mbostock/d3/wiki/Time-Formatting#wiki-format)'
- en: Using the ordinal scale
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用序数等级
- en: In some cases, we might need to map our data to some ordinal values, for example,
    `["a", "b", "c"]` or `["#1f77b4", "#ff7f0e", "#2ca02c"]`. So, how can we perform
    this kind of mapping using D3 scales? This recipe is dedicated to address this
    kind of question.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要将我们的数据映射到某些序数值，例如，`["a", "b", "c"]`或`["#1f77b4", "#ff7f0e", "#2ca02c"]`。那么，我们如何使用D3等级来执行这种映射？本食谱旨在回答这类问题。
- en: Getting Ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/ordinal-scale.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/ordinal-scale.html)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[序数等级示例](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/ordinal-scale.html)'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'This kind of ordinal mapping is quite common in data visualization. For example,
    you might want to map certain data points through categorization into some textual
    value or perhaps into RGB color code, which in turn can be used in CSS styling.
    D3 offers a specialized scale implementation to handle this kind of mapping. We
    will explore its usage here. Here is the code of the `ordinal.scale.html` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这种序数映射在数据可视化中相当常见。例如，你可能想要通过分类将某些数据点映射到某些文本值或RGB颜色代码，这反过来又可以用于CSS样式。D3提供了一种专门的等级实现来处理这种映射。我们将在下面探讨其用法。以下是`ordinal.scale.html`文件的代码：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code outputs the following in your browser:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在你的浏览器中输出以下内容：
- en: '![How to do it...](img/2162OS_04_10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/2162OS_04_10.jpg)'
- en: Ordinal scale
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 序数等级
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'In the above code example, a simple data array containing integers from `0`
    to `9` is defined on line `A`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码示例中，第`A`行定义了一个简单的数据数组，包含从`0`到`9`的整数：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then an ordinal scale was created using the `d3.scale.ordinal` function on line
    `B`. The domain of this scale was set to our integer array data while range is
    set to a list of alphabets from `a` to `j`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第`B`行使用`d3.scale.ordinal`函数创建了一个序数等级。这个等级的定义域被设置为我们的整数数组数据，而范围被设置为从`a`到`j`的字母列表。
- en: With this scale defined, we can perform the mapping by simply invoking the scale
    function, for example, `alphabet(0)` will return `a`, `alphabet(4)` will return
    `e`, and so on.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了这个等级后，我们可以通过简单地调用等级函数来进行映射，例如，`alphabet(0)`将返回`a`，`alphabet(4)`将返回`e`，依此类推。
- en: 'On line `C`, the `render` function was defined to generate a number of `div`
    elements on the page to represent the 10 elements in a data array. Each `div`
    has its `background-color` set to scale function''s output or `white` if the output
    is not an RGB color string:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`C`行，定义了`render`函数以在页面上生成多个`div`元素来表示数据数组中的10个元素。每个`div`的`background-color`被设置为等级函数的输出或`white`，如果输出不是RGB颜色字符串：
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On line `E`, we also set the text of each cell to display scale function''s
    output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`E`行，我们还设置了每个单元格的文本以显示等级函数的输出：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, with all the structures in place, from line `F` to `G`, the `render` function
    was repetitively called with different ordinal scales to produce different visual
    outputs. On line `F`, calling `render` with the `alphabet` ordinal scale produces
    the following output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有结构都已就绪，从第`F`行到第`G`行，`render`函数被重复调用，使用不同的序数等级来产生不同的视觉输出。在第`F`行，调用`render`与`alphabet`序数等级产生以下输出：
- en: '![How it works...](img/2162OS_04_11.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_11.jpg)'
- en: Alphabetic ordinal scale
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 字母序数等级
- en: 'While on line `G`, calling the `render` function with the built-in `d3.scale.category20c`
    ordinal color scale produces the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当在第`G`行调用内置的`d3.scale.category20c`序数颜色等级的`render`函数时，会产生以下输出：
- en: '![How it works...](img/2162OS_04_12.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_04_12.jpg)'
- en: Color ordinal scale
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色序数等级
- en: Because assigning different colors to different elements in visualization is
    a common task, for example, assigning different colors in Pie and Bubble charts,
    D3 provides a number of different built-in ordinal color scales as we have seen
    in this recipe.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在可视化中将不同颜色分配给不同的元素是一个常见任务，例如，在饼图和气泡图中分配不同的颜色，D3提供了一系列不同的内置序数颜色等级，正如我们在本食谱中看到的。
- en: 'It is quite easy to build your own simple custom ordinal color scale. Just
    create an ordinal scale with the range set to the colors you want to use, for
    example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自己的简单自定义序数颜色尺度相当容易。只需创建一个范围设置为所需颜色的序数尺度，例如：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Interpolating a string
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串插值
- en: In some cases, you might need to interpolate numbers embedded in a string; perhaps
    a CSS style for font.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要插值字符串中嵌入的数字；例如，字体样式的 CSS。
- en: In this recipe, we will examine how you can do that using D3 scale and interpolation.
    However, before we jump right into string interpolation, a bit of background research
    on interpolator is due and the following section will cover what interpolation
    is and how D3 implements interpolator functions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用 D3 规模和插值来完成这项工作。然而，在我们直接进入字符串插值之前，需要对插值器进行一些背景研究，接下来的部分将介绍什么是插值以及
    D3 如何实现插值函数。
- en: Interpolator
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值器
- en: 'In the first three recipes, we have gone over three different D3 scale implementations,
    now it is time to delve a little deeper into D3 scales. You are probably already
    asking the question, "How different scale knows what value to use for different
    inputs?" In fact this question can be generalized to:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三个菜谱中，我们已经介绍了三种不同的 D3 规模实现，现在是时候深入探讨 D3 规模了。你可能已经提出了问题，“不同的规模如何知道对不同输入使用什么值？”实际上，这个问题可以概括为：
- en: We are given the values of a function f(x) at different points x0, x1, … ,xn.
    We want to find approximate values of the function f(x) for "new" x's that lie
    between these points . This process is called **interpolation**.
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们给出了函数 f(x) 在不同点 x0, x1, … ,xn 的值。我们想要找到函数 f(x) 在这些点之间“新”的 x 的近似值。这个过程被称为 **插值**。
- en: ''
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kreyszig E & Kreyszig H & Norminton E. J. (2010)
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Kreyszig E & Kreyszig H & Norminton E. J. (2010)
- en: 'Interpolation is not only important in scale implementation but also essential
    to many other core D3 capabilities, for example, animation and layout management.
    It is because of this essential role, D3 has designed a separate and re-usable
    construct called **interpolator** so that this common cross-functional concern
    can be addressed in a centralized and consistent fashion. Let''s take a simple
    interpolator as an example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 插值不仅在规模实现中很重要，而且对于许多其他核心 D3 功能也是必不可少的，例如动画和布局管理。正因为这个基本作用，D3 设计了一个单独且可重用的结构，称为
    **插值器**，以便这个常见的跨功能问题可以集中和一致地解决。让我们以一个简单的插值器为例：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this simple example, we created a D3 number interpolator with a range of
    `[0, 100]`. The `d3.interpolateNumber` function returns an `interpolate` function
    which we can use to perform number-based interpolations. The `interpolate` function
    is an equivalent to the following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们创建了一个范围在 `[0, 100]` 的 D3 数字插值器。`d3.interpolateNumber` 函数返回一个 `interpolate`
    函数，我们可以使用它来执行基于数字的插值。`interpolate` 函数等同于以下代码：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this function, `a` represents the start of the range and `b` represents the
    end of the range. The parameter `t` passed into the `interpolate()` function,
    is a float-point number ranging from 0 to 1, and it signifies how far the return
    value is from `a`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，`a` 代表范围的起始值，`b` 代表范围的结束值。传递给 `interpolate()` 函数的参数 `t` 是一个介于 0 到 1 之间的浮点数，它表示返回值与
    `a` 的距离。
- en: D3 provides a number of built-in interpolators. Due to limited scope in this
    book, we will focus on some of the more interesting interpolators for the next
    few recipes; we are ending our discussion on simple number interpolation here.
    Nevertheless, the fundamental approach and mechanism remains the same whether
    it is a number or an RGB color code interpolator.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: D3 提供了许多内置的插值器。由于本书的范围有限，我们将专注于接下来几个菜谱中一些更有趣的插值器；我们在这里结束对简单数字插值的讨论。尽管如此，无论是数字还是
    RGB 颜色代码插值器，基本方法和机制都是相同的。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on number and round interpolation, please refer to the D3 reference
    documents at [https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolateNumber](https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolateNumber)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数字和四舍五入插值的更多详细信息，请参阅 D3 参考文档[https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolateNumber](https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolateNumber)
- en: Now with general interpolation concepts behind, let's take a look at how string
    interpolator works in D3.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了通用的插值概念，让我们来看看 D3 中字符串插值器是如何工作的。
- en: Getting Ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/string-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/string-interpolation.html)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/string-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/string-interpolation.html)'
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'String interpolator finds the numbers embedded in the string, then performs
    interpolation using D3 number interpolator:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值器会找到字符串中嵌入的数字，然后使用 D3 数字插值器进行插值：
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding code produces the following output:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了以下输出：
- en: '![How to do it...](img/2162OS_04_13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_04_13.jpg)'
- en: String interpolation
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this example, we created a linear scale on line `A` with range specified
    between two strings representing start and end `font` styles:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在行 `A` 上创建了一个线性比例尺，其范围由表示起始和结束 `font` 样式的两个字符串指定：
- en: '[PRE20]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see in the code of the `string-interpolation.html` file, the `font`
    style strings contain `font-size` numbers `12px/30px` and `120px/180px`, which
    we want to interpolate in this recipe.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在 `string-interpolation.html` 文件中的代码所见，`font` 样式字符串包含 `font-size` 数字 `12px/30px`
    和 `120px/180px`，这是我们在这个菜谱中想要插值的。
- en: On line `C`, the `render()` function simply creates 10 cells containing each
    one's index numbers (line `E`) styled using interpolated `font` style string calculated
    on line `D`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `C` 上，`render()` 函数简单地创建了包含每个索引数字（行 `E`）的 10 个单元格，这些单元格使用在行 `D` 上计算的插值 `font`
    样式字符串进行样式化。
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Though we demonstrated string interpolation in D3 using a CSS font style as
    an example, D3 string interpolator is not only limited handling CSS styles. It
    can basically handle any string, and interpolates the embedded number as long
    as the number matches the following **Regex pattern**:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用 CSS 字体样式作为示例演示了 D3 中的字符串插值，但 D3 字符串插值器不仅限于处理 CSS 样式。它可以基本上处理任何字符串，并且只要数字与以下
    **正则表达式模式** 匹配，就会插值嵌入的数字：
- en: '[PRE22]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When generating a string using interpolation, very small values, when stringified,
    may get converted to scientific notation, for example, **1e-7**. To avoid this
    particular conversion, you need to keep your value larger than 1e-6.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用插值生成字符串时，非常小的值在转换为字符串时可能会被转换为科学记数法，例如，**1e-7**。为了避免这种特定的转换，您需要确保您的值大于 1e-6。
- en: Interpolating colors
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色插值
- en: It is sometimes necessary to interpolate colors when you are interpolating values
    that do not contain numbers but rather RGB or HSL color code. This recipe addresses
    the question *how can you define* *scales for color codes and perform interpolation
    on them?*
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在插值不包含数字而包含 RGB 或 HSL 颜色代码的值时，需要插值颜色。这个菜谱解决了如何定义颜色代码的比例尺并在其上进行插值的问题。
- en: Getting Ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/color-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/color-interpolation.html)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/color-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/color-interpolation.html)'
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Color interpolation is such a common operation in visualization that D3 actually
    provides four different kinds of interpolators dedicated for color supporting—RGB,
    HSL, L*a*b*, and HCL color space. In this recipe, we will demonstrate how color
    interpolation can be performed in RGB color space. However, all other color interpolators
    work in the same way.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色插值在可视化中是一个非常常见的操作，D3 实际上提供了四种不同类型的插值器，专门用于支持颜色——RGB、HSL、L*a*b* 和 HCL 颜色空间。在这个菜谱中，我们将演示如何在
    RGB 颜色空间中执行颜色插值。然而，所有其他颜色插值器的工作方式相同。
- en: Tip
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: D3 color interpolate function always returns interpolated color in RGB space
    no matter what the original color space it is since not all browsers support HSL
    or L*a*b* color spaces.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: D3 颜色插值函数总是返回在 RGB 空间中的插值颜色，无论原始颜色空间是什么，因为并非所有浏览器都支持 HSL 或 L*a*b* 颜色空间。
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code produces the following visual output:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了以下视觉输出：
- en: '![How to do it...](img/2162OS_04_14.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_04_14.jpg)'
- en: Color interpolation
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色插值
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first step in this recipe is defining a linear color scale on line `A` with
    its range set as `["white", "#4169e1"]`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的第一步是在行 `A` 上定义一个线性颜色比例尺，其范围设置为 `["white", "#4169e1"]`。
- en: '[PRE24]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: One new technique used in this recipe, that we haven't encountered yet, is the
    **poly-linear scale** , which is defined in the `divergingScale` function on line
    `B`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中使用了我们尚未遇到的一种新技术，即 **多线性刻度**，它在行 `B` 上的 `divergingScale` 函数中定义。
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A poly-linear scale is a scale with non-uniformed linear progression. It is
    achieved by providing a poly-linear domain on a linear scale as we can see on
    line `C`. You can think of a poly-linear scale as stitching two linear scales
    with different domains together. So this poly-linear color scale is effectively
    the two following linear scales combined together.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 多线性刻度是一个具有非均匀线性进度的刻度。它通过在线性刻度上提供一个多线性域来实现，正如我们在行 `C` 上所看到的。你可以将多线性刻度视为将具有不同域的两个线性刻度拼接在一起。因此，这个多线性颜色刻度实际上是以下两个线性刻度的组合。
- en: '[PRE26]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: No surprise in the rest of the recipe. The `render()` function defined on line
    `D` generates 20 cells that are numbered by its index and colored using the output
    of two color scales we defined earlier. Clicking the buttons on the web page (such
    as **Pivot at 5**) will show you the effect of pivoting at different positions
    in a poly-linear color scale.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜谱的其余部分没有惊喜。在行 `D` 上定义的 `render()` 函数生成 20 个单元格，这些单元格按其索引编号，并使用我们之前定义的两个颜色刻度的输出进行着色。点击网页上的按钮（例如
    **在 5 处旋转**）将显示在多线性颜色刻度中不同位置旋转的效果。
- en: See also
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a complete list of supported color keywords in CSS3, please refer to W3C
    official reference [http://www.w3.org/TR/css3-color/#html4](http://www.w3.org/TR/css3-color/#html4)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 CSS3 中支持的完整颜色关键字列表，请参阅 W3C 官方参考 [http://www.w3.org/TR/css3-color/#html4](http://www.w3.org/TR/css3-color/#html4)
- en: Interpolating compound objects
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复合对象插值
- en: There will be cases when what you need to interpolate in your visualization
    is not a simple value but rather an object consisting of multiple and different
    values, for example, a rectangular object with width, height, and color attributes.
    Fortunately, D3 has a built-in support for this type of compound object interpolation.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要在你的可视化中插值的内容不是一个简单的值，而是一个由多个不同值组成的对象，例如，具有宽度、高度和颜色属性的矩形对象。幸运的是，D3
    对这种复合对象插值有内置的支持。
- en: Getting Ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/compound-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/compound-interpolation.html)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/compound-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/compound-interpolation.html)'
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will examine how compound object interpolation is performed
    in D3\. The code for the `compound-interpolation.html` file is as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何在 D3 中执行复合对象插值。`compound-interpolation.html` 文件的代码如下：
- en: '[PRE27]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/2162OS_04_15.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_04_15.jpg)'
- en: Compound object interpolation
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 复合对象插值
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is different from the previous recipes of this chapter by the fact
    that the scale we use in this recipe has a range defined using two objects rather
    than simple primitive data types:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱与本章前面的菜谱不同之处在于，我们在这个菜谱中使用的刻度范围是由两个对象定义的，而不是简单的原始数据类型：
- en: '[PRE28]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can see on line `A` and `B` that the start and end of the scale range are
    two objects which contain two different kinds of values; one for RGB color and
    the other one for CSS height style. When you interpolate this kind of a scale
    containing compound range, D3 will iterate through each of the fields inside an
    object and recursively apply the simple interpolation rule on each one of them.
    Thus, in other words, for this example, D3 will interpolate the `color` field
    using color interpolation from `#add8e6` to `#4169e1` while using string interpolation
    on height field from `15px` to `150px`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在行 `A` 和 `B` 上看到，刻度范围的起始和结束是包含两种不同类型值的两个对象；一个用于 RGB 颜色，另一个用于 CSS 高度样式。当你插值这种包含复合范围的刻度时，D3
    将遍历对象内的每个字段，并递归地对每个字段应用简单的插值规则。换句话说，对于这个例子，D3 将使用颜色插值从 `#add8e6` 到 `#4169e1` 插值
    `color` 字段，同时在高度字段上使用字符串插值从 `15px` 到 `150px`。
- en: Tip
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The recursive nature of this algorithm allows D3 to interpolate on even nested
    objects. Therefore you can interpolate on an object like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的递归性质允许 D3 在嵌套对象上进行插值。因此，你可以对如下对象进行插值：
- en: '[PRE29]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'A compound scale function, when invoked, returns a compound object that matches
    the given range definition:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用复合比例函数时，它返回一个与给定范围定义相匹配的复合对象：
- en: '[PRE30]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As we can see on line `D` and `E`, the returned value is a compound object,
    and this is why we can access its attribute to retrieve the interpolated values.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在行 `D` 和 `E` 上所见，返回值是一个复合对象，这就是为什么我们可以访问其属性来检索插值值。
- en: Tip
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Though it is not a common case, if the start and end of your compound scale
    range do not have identical attributes, D3 won''t complain but rather it will
    just treat the missing attribute as a constant. The following scale will render
    the height to be `15px` for all the `div` elements:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一个常见的案例，但如果你的复合比例范围的起始和结束没有相同的属性，D3 不会抱怨，而是将缺失的属性视为一个常数。以下比例将使所有 `div`
    元素的高度渲染为 `15px`：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Implementing a custom interpolator
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义插值器
- en: In some rare cases, you might find that the built-in D3 interpolators are not
    enough to handle your visualization requirement. In such situations, you can choose
    to implement your own interpolator with specific logic to handle your needs. In
    this recipe, we will examine this approach and demonstrate some interesting use
    cases.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些罕见的情况下，你可能会发现内置的 D3 插值器不足以处理你的可视化需求。在这种情况下，你可以选择实现自己的插值器，使用特定的逻辑来处理你的需求。在这个菜谱中，我们将检查这种方法并展示一些有趣的用例。
- en: Getting Ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/custom-interpolator.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/custom-interpolator.html)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/custom-interpolator.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter4/custom-interpolator.html)'
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s take a look at two different examples of custom interpolator implementation.
    In the first example, we will implement a custom function capable of interpolating
    price in dollars, while in the second one we will implement custom interpolator
    for alphabets. Here is the code to this implementation:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看两个不同自定义插值器实现的例子。在第一个例子中，我们将实现一个能够插值美元价格的自定义函数，而在第二个例子中，我们将实现字母的自定义插值器。以下是实现此功能的代码：
- en: '[PRE32]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/2162OS_04_16.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_04_16.jpg)'
- en: Custom interpolation
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义插值
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first custom interpolator we encounter in this recipe is defined on line
    `A`. The custom interpolator function is a bit more involved, so, let''s take
    a closer look at how it works:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们遇到的第一个自定义插值器是在行 `A` 上定义的。自定义插值器函数稍微复杂一些，所以，让我们更仔细地看看它是如何工作的：
- en: '[PRE33]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This custom interpolator in the following link was directly extracted from
    D3 Wiki:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接中的自定义插值器直接从 D3 Wiki 中提取：
- en: '[https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolators](https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolators)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolators](https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_interpolators)'
- en: 'On the line `A`, we push an interpolator function into `d3.interpolators`.
    This is a global interpolator registry array that contains all known registered
    interpolators. By default, this registry contains the following interpolators:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `A` 上，我们将一个插值函数推入 `d3.interpolators`。这是一个全局插值器注册数组，包含所有已知的注册插值器。默认情况下，此注册表中包含以下插值器：
- en: Number interpolator
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字插值器
- en: String interpolator
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串插值器
- en: Color interpolator
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色插值器
- en: Object interpolator
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象插值器
- en: Array interpolator
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组插值器
- en: Any new custom interpolator implementation can be pushed to the tail of the
    interpolators array which then becomes globally available. An interpolator function
    is expected to be a factory function that takes the start of the range (`a`) and
    the end of the range (`b`) as its input parameters while returning an implementation
    of the interpolate function as seen on line `E`. You might be wondering how D3
    knows which interpolator to use when a certain string value is presented. The
    key to this lies on line `B`. Typically we use a variable called `re` defined
    as a regex pattern of `/^\$([0-9,.]+)$/`, which is then used to match both parameter
    `a` and `b` for any number with a leading dollar sign. If both parameters match
    the given pattern then the matching interpolate function is constructed and returned;
    otherwise D3 will continue iterating through `d3.interpolators` array to find
    a suitable interpolator.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 任何新的自定义插值器实现都可以推送到插值器数组的末尾，这使得它成为全局可用的。预期的插值器函数是一个工厂函数，它接受范围的起始值（`a`）和结束值（`b`）作为输入参数，并返回插值函数的实现，正如第`E`行所示。你可能想知道当呈现某个字符串值时，D3是如何知道使用哪个插值器的。这个问题的关键在于第`B`行。通常我们使用一个名为`re`的变量，它被定义为正则表达式模式`/^\$([0-9,.]+)$/`，然后用于匹配任何以美元符号开头的数字的参数`a`和`b`。如果这两个参数都匹配给定的模式，则构建并返回匹配的插值函数；否则，D3将继续迭代`d3.interpolators`数组以找到合适的插值器。
- en: Instead of an array, `d3.interpolators` is actually better considered as a FILO
    stack (though not exactly implemented as a stack), where new interpolators can
    be pushed to the top of the stack. When selecting an interpolator, D3 will pop
    and check each suitable interpolator from the top. Therefore, in this case, the
    interpolator pushed later in the stack takes precedence.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组不同，`d3.interpolators`实际上更应被视为一个FILO栈（尽管并非完全按栈实现），新插值器可以被推送到栈顶。当选择插值器时，D3会从顶部弹出并检查每个合适的插值器。因此，在这种情况下，后来推送到栈中的插值器具有优先权。
- en: The anonymous `interpolate()` function created on line `E` takes a single parameter
    `t` with a value ranging from `0` to `1` indicating how far off the interpolated
    value is from base `a`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`E`行创建的匿名`interpolate()`函数接受一个名为`t`的单个参数，其值介于`0`到`1`之间，表示插值值与基础值`a`的偏差程度。
- en: '[PRE34]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You can think of it as a percentage of how far the desired value has traveled
    from `a` to `b`. With that in mind, it becomes clear that in line `F` it performs
    the interpolation and calculates the desired value based on the offset `t`, which
    effectively interpolates a price string.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其视为从`a`到`b`的期望值所经过距离的百分比。考虑到这一点，就可以清楚地看出，在第`F`行它执行插值并基于偏移量`t`计算期望值，这实际上插值了一个价格字符串。
- en: Tip
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: One thing to watch out for here is that the `b` parameter's value has been changed
    on line `D` from the end of the range to the difference between `a` and `b`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的一点是，第`D`行中`b`参数的值已经被从范围的末尾更改为`a`和`b`之间的差值。
- en: '[PRE35]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is generally considered a bad practice for readability. So, in your own
    implementations you should avoid modifying input parameters' value in a function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常被认为是一种不便于阅读的坏做法。因此，在你的实现中，你应该避免在函数中修改输入参数的值。
- en: 'On the line `G`, a second custom interpolator was registered to handle single-character
    lowercase alphabets from `a` to `z`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`G`行，注册了一个第二个自定义插值器来处理从`a`到`z`的单个字符小写字母：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We quickly noticed that this interpolator function follows a very similar pattern
    with the previous one. Firstly, it has a regex pattern defined on line `H` that
    matches single lowercase alphabets. After the matching is conducted on line `I`,
    the start and end of the range `a` and `b` were both converted from `character`
    values into `integer` values. A difference between `a` and `b` was calculated
    on line `J`. The interpolate function again follows exactly the same formula as
    the first interpolator as shown on line `K`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快注意到这个插值器函数与之前的非常相似。首先，它在第`H`行定义了一个正则表达式模式，用于匹配单个小写字母。在执行匹配操作的第`I`行之后，范围的起始和结束值`a`和`b`都被从`字符`值转换为`整数`值。在第`J`行计算了`a`和`b`之间的差值。插值函数再次严格遵循与第一个插值器相同的公式，如第`K`行所示。
- en: 'Once these custom interpolators are registered with D3, we can define scales
    with corresponding ranges without doing any additional work and we will be able
    to interpolate their values:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些自定义插值器被注册到D3中，我们就可以定义具有相应范围的刻度，而无需做任何额外的工作，我们还将能够插值它们的值：
- en: '[PRE37]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As expected, the `dollarScale` function will automatically use the price interpolator,
    while the `alphabetScale` function will use our alphabet interpolator, respectively.
    No additional work is required when invoking the scale function to obtain the
    value we need, as demonstrated on line `N`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`dollarScale`函数将自动使用价格插值器，而`alphabetScale`函数将分别使用我们的字母插值器。在调用缩放函数以获取所需值时，不需要做额外的工作，正如在行`N`中所示：
- en: '[PRE38]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In isolation, custom interpolator does not appear to be a very important concept;
    however, later on when exploring other D3 concepts in [Chapter 6](ch06.html "Chapter 6. Transition
    with Style"), *Transition with Style*, we will explore more powerful techniques
    when custom interpolator is combined with other D3 constructs to achieve interesting
    custom effects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在孤立状态下，自定义插值器似乎不是一个非常重要的概念；然而，在后续探索第6章中其他D3概念的[第6章](ch06.html "第6章。以风格进行转换")，*以风格进行转换*时，我们将探讨当自定义插值器与其他D3结构结合时，实现有趣的自定义效果时更强大的技术。
- en: See also
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If the regular expression used in this chapter is a new concept or a well-known
    tool in your toolbox and you need a little bit of dusting, you can find a lot
    of useful resources at [http://www.regular-expressions.info](http://www.regular-expressions.info)
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果本章中使用的正则表达式是一个新概念或你工具箱中的已知工具，并且你需要一点点的复习，你可以在[http://www.regular-expressions.info](http://www.regular-expressions.info)找到很多有用的资源。
