["```py\ndata <- read.csv(\"./data_brexit_referendum.csv\") \ndata[data$Leave == -1, \"Leave\"] <- NA \n```", "```py\nsum(is.na(data$Leave))\n#> [1] 267\n```", "```py\ndata$Proportion <- data$Leave / data$NVotes\n```", "```py\ndata$Vote <- ifelse(data$Proportion > 0.5, \"Leave\", \"Remain\")\n```", "```py\ndata[data$Proportion >  0.5, \"Vote\"] <- \"Leave\"\ndata[data$Proportion <= 0.5, \"Vote\"] <- \"Remain\"\n\n#> Error in `[<-.data.frame`(`*tmp*`, data$Proportion 0.5, \"Vote\", value = \"Leave\"): \n#>   missing values are not allowed in subscripted assignments of data frames\n```", "```py\ndata[which(data$Proportion >  0.5), \"Vote\"] <- \"Leave\"\ndata[which(data$Proportion <= 0.5), \"Vote\"] <- \"Remain\"\n```", "```py\ndata$RegionName <- as.character(data$RegionName)\ndata[data$RegionName == \"London\", \"RegionName\"]                   <- \"L\"\ndata[data$RegionName == \"North West\", \"RegionName\"]               <- \"NW\"\ndata[data$RegionName == \"North East\", \"RegionName\"]               <- \"NE\"\ndata[data$RegionName == \"South West\", \"RegionName\"]               <- \"SW\"\ndata[data$RegionName == \"South East\", \"RegionName\"]               <- \"SE\"\ndata[data$RegionName == \"East Midlands\", \"RegionName\"]            <- \"EM\"\ndata[data$RegionName == \"West Midlands\", \"RegionName\"]            <- \"WM\"\ndata[data$RegionName == \"East of England\", \"RegionName\"]          <- \"EE\"\ndata[data$RegionName == \"Yorkshire and The Humber\", \"RegionName\"] <- \"Y\"\n```", "```py\nsummary(data)\n#>       ID        RegionName              NVotes          Leave\n#> Min.   :  1    Length: 1070        Min.   : 1039    Min.   : 287\n#> 1st Qu.: 268   Class : character   1st Qu.: 4252    1st Qu.: 1698\n#> Median : 536   Mode  : character   Median : 5746    Median : 2874\n#> Mean   : 536                       Mean   : 5703    Mean   : 2971\n#> 3rd Qu.: 803                       3rd Qu.: 7020    3rd Qu.: 3936\n#> Max.   : 1070                      Max.   : 15148   Max.   : 8316\n(Truncated output)\n```", "```py\nsummary <- summary(data) \nclass(summary) \n#> [1] \"table\"\nsummary[1]\n#> [1] \"Min.   : 1  \"\nclass(summary[1])\n#> [1] \"character\"\n```", "```py\nis.numeric(data$Proportion) \n#> [1] TRUE\nis.numeric(data$RegionName)\n#> [1] FALSE\n```", "```py\nnumerical_variables <- sapply(data, is.numeric) \nnumerical_variables \n#>            ID   RegionName         NVotes       Leave   Residents\n#>          TRUE        FALSE           TRUE        TRUE        TRUE\n#>    Households      MeanAge   AdultMeanAge   Aget_0to4   Age_5to7\n#>          TRUE         TRUE           TRUE        TRUE        TRUE\n(Truncated output)\n\ndata_numerical <- data[, numerical_variables] \ncolnames(data_numerical)\n#>  [1] \"ID\"           \"Nvotes\"       \"Leave\"          \"Residents\"\n#>  [5] \"Households\"   \"MeanAge\"      \"AdultMeanAge\"   \"Age_0to4\"\n#>  [9] \"Age_5to7\"     \"Age_8to9\"     \"Age_10to14\"     \"Age_15\"\n#> [13] \"Age_16to17    \"Age_18to19\"   \"Age_20to24\"     \"Age_25to29\"\n(Truncated output)\n```", "```py\nnumerical_variables[[\"ID\"]] <- FALSE \ndata_numerical <- data[, numerical_variables]\n```", "```py\nlapply(data[, numerical_variables], summary)\n#> $NVotes\n#>    Min. 1st Qu. Median  Mean 3rd Qu.  Max.\n#>    1039    4252   5746  5703   7020  15148\n#>\n#> $Leave\n#>    Min. 1st Qu. Median  Mean 3rd Qu.  Max.\n#>     287    1698   2874  2971    3936  8316\n#>\n#> $Residents\n#>    Min. 1st Qu. Median   Mean 3rd Qu.   Max.\n#>    1932    8288  11876  11646   14144  34098\n#>\n(Truncated output)\n```", "```py\nnumerical_summary <- do.call(cbind, lapply(data_numerical, summary))\n#> Warning in (function (..., deparse.level = 1) : number of rows of result is\n#> not a multiple of vector length (arg 1)\n\nnumerical_summary\n#>          NVotes Leave Residents Households MeanAge AdultMeanAge Age_0to4\n#> Min.       1039   287      1932       779    27.80        29.20    2.200\n#> 1st Qu.    4252  1698      8288      3466    35.60        44.10    5.400\n#> Median     5746  2874     11876      4938    38.70        47.40    6.300\n#> Mean       5703  2971     11646      4767    38.45        46.85    6.481\n#> 3rd Qu.    7020  3936     14144      5832    41.40        49.90  7.50058\n#> Max.      15148  8316     34098     15726    51.60        58.10   12.300\n#> NA's       1039   267      1932       779    27.80        29.20    2.200\n```", "```py\ndata <- data[complete.cases(data), ] \ndata_numerical <- data[, numerical_variables] \nnumerical_summary <- do.call(cbind, lapply(data_numerical, summary))\nnumerical_summary\n#>         NVotes Leave Residents Households MeanAge AdultMeanAge Age_0to4\n#> Min.      1039   287      1932        779   28.40        30.50    2.200\n#> 1st Qu.   4242  1698      8405       3486   35.70        44.10    5.400\n#> Median    5739  2874     11911       4935   38.60        47.40    6.300\n#> Mean      5725  2971     11739       4793   38.43        46.83    6.479\n#> 3rd Qu.   7030  3936     14200       5850   41.40        49.90    7.500\n#> Max.     15148 8316      34098      15726   47.30        56.10   12.300\n(Truncated output)\n```", "```py\ndo.call(rbind, lapply(data_numerical, summary))\n#>                  Min.    1st Qu.    Median       Mean     3rd Qu.      Max.\n#> NVotes     1039.0000  4241.5000  5.739e+03  5.725e+03  7.030e+03  1.515e+04\n#> Leave       287.0000  1697.5000  2.874e+03  2.971e+03  3.936e+03  8.316e+03\n#> Residents  1932.0000  8405.0000  1.191e+04  1.174e+04  1.420e+04  3.410e+04\n#> Households  779.0000  3486.0000  4.935e+03  4.793e+03  5.850e+03  1.573e+04\n#> MeanAge      28.4000    35.7000  3.860e+01  3.843e+01  4.140e+01  4.730e+01\n```", "```py\nnumerical_summary[\"Max.\", \"Proportion\"] - numerical_summary[\"Min.\", \"Proportion\"] \ndesired_variables <- c( \n    \"ID\", \n    \"NoQuals\", \n    \"Proportion\", \n    \"AdultMeanAge\", \n    \"L4Quals_plus\", \n    \"RegionName\" \n) \n\n>data[which.max(data$Proportion), desired_variables]\n#>        ID NoQuals Proportion AdultMeanAge L4Quals_plus RegionName\n#> 754   754    35.8     0.7897         48.7         13.7          L\n\ndata[which.min(data$Proportion), desired_variables]\n#>      ID NoQuals Proportion AdultMeanAge L4Quals_plus RegionName\n#> 732 732     2.8     0.1216         31.2         44.3         EE\n```", "```py\ntable(data$RegionName) \n#> EE EM   L NE  NW SE SW  WM  Y\n#> 94 20 210 32 134 79 23 133 78\n\nprop.table(table(data$RegionName))\n#>      EE      EM       L      NE      NW      SE      SW      WM       Y\n#> 0.11706 0.02491 0.26152 0.03985 0.16687 0.09838 0.02864 0.16563 0.09714\n\nbarplot( \n    height = prop.table(table(data$RegionName)), \n    main = \"Vote Proportion by Region\", \n    ylab = \"Frequency\", \n    col = \"white\"\n)\n```", "```py\nlibrary(ggplot2)\nlibrary(viridis)\n\nplot <- ggplot(data, aes(x = RegionName, y = Proportion, color = White))\nplot <- plot + geom_point() + scale_color_viridis()\nprint(plot)\n```", "```py\nhist(data$NoQuals, main = \"Histogram for NoQuals\", xlab = \"\")\nhist(data$L4Quals_plus, main = \"Histogram for L4Quals_plus\", xlab = \"\")\nhist(data$AdultMeanAge, main = \"Histogram for AdultMeanAge\", xlab =\"\")\n```", "```py\nplot(x = data$NoQuals, y = data$AdultMeanAge, ylab = \"AdultMeanAge\", xlab = \"NoQuals\")\nplot(x = data$L4Quals_plus, y = data$AdultMeanAge, ylab = \"AdultMeanAge\", xlab = \"L4Quals_plus\")\n```", "```py\ndesired_variables <- c(\n    \"AdultMeanAge\",\n    \"White\",\n    \"Owned\",\n    \"NoQuals\",\n    \"L4Quals_plus\",\n    \"Unemp\",\n    \"HigherOccup\",\n    \"Deprived\",\n    \"Proportion\"\n)\npairs(data[, desired_variables])\n```", "```py\nplot <- ggplot(data, aes(x = NoQuals, y = AdultMeanAge, color = Proportion))\nplot <- plot + stat_smooth(method = \"lm\", col = \"darkgrey\", se = FALSE)\nplot <- plot + scale_color_viridis()\nplot <- plot + geom_point()\nprint(plot)\n```", "```py\ncreate_plots_iteratively <- function(data, plot_function) {\n    vars <- colnames(data)\n    vars <- vars(!which(vars == \"Proportion\"))\n    for (i in 1:(length(vars) - 1)) {\n        for (j in (i + 1):length(vars)) {\n            save_to <- paste(vars[i], \"_\", vars[j], \".png\", sep = \"\")\n            plot_function(data, vars[i], vars[j], save_to)\n        }\n    }\n}\n```", "```py\nprototype_scatter_plot <- function(data, var_x, var_y, var_color = \"Proportion\", save_to = \"\") {\n    if (is.na(as.logical(var_color))) {\n        plot <- ggplot(data, aes_string(x = var_x, y = var_y, color = var_color))\n    } else {\n        plot <- ggplot(data, aes_string(x = var_x, y = var_y))\n    }\n    plot <- plot + stat_smooth(method = \"lm\", col = \"darkgrey\", se = FALSE)\n    plot <- plot + scale_color_viridis()\n    plot <- plot + geom_point()\n    if (not_empty(save_to)) png(save_to)\n    print(plot)\n    if (not_empty(save_to)) dev.off()\n}\n```", "```py\nnot_empty <- function(file) {\n    return(file != \"\")\n}\n```", "```py\nprototype_scatter_plot(data, \"L4Quals_plus\", \"AdultMeanAge\")\n```", "```py\ncreate_plots_iteratively(data, prototype_scatter_plot)\n```", "```py\nlibrary(corrplot)\ncorrplot(corr = cor(data_numerical), tl.col = \"black\", tl.cex = 0.6)\n```", "```py\ndata$Age_18to44 <- (\n    data$Age_18to19 +\n    data$Age_20to24 +\n    data$Age_25to29 +\n    data$Age_30to44\n)\ndata$Age_45plus <- (\n    data$Age_45to59 +\n    data$Age_60to64 +\n    data$Age_65to74 +\n    data$Age_75to84 +\n    data$Age_85to89 +\n    data$Age_90plus\n)\ndata$NonWhite <- (\n    data$Black +\n    data$Asian +\n    data$Indian +\n    data$Pakistani\n)\ndata$HighEducationLevel <- data$L4Quals_plus\ndata$LowEducationLevel  <- data$NoQuals\n```", "```py\ncolumn_names <- colnames(data)\nnew_variables <- !logical(length(column_names))\nnew_variables <- setNames(new_variables, column_names)\nage_variables <- sapply(column_names, function(x) grepl(\"Age\", x))\nnew_variables[age_variables]     <- FALSE\nnew_variables[[\"AdultMeanAge\"]]  <- TRUE\nnew_variables[[\"Age_18to44\"]]    <- TRUE\nnew_variables[[\"Age_45plus\"]]    <- TRUE\nnew_variables[[\"Black\"]]         <- FALSE\nnew_variables[[\"Asian\"]]         <- FALSE\nnew_variables[[\"Indian\"]]        <- FALSE\nnew_variables[[\"Pakistani\"]]     <- FALSE\nnew_variables[[\"NoQuals\"]]       <- FALSE\nnew_variables[[\"L4Quals_plus\"]]  <- FALSE\nnew_variables[[\"OwnedOutright\"]] <- FALSE\nnew_variables[[\"MultiDeprived\"]] <- FALSE\n```", "```py\ndata_adjusted <- data[, new_variables]\nnumerical_variables_adjusted <- sapply(data_adjusted, is.numeric)\nwrite.csv(data_adjusted, file = \"data_brexit_referendum_adjusted.csv\")\n```", "```py\nnumerical_variables_adjusted[[\"NVotes\"]] <- FALSE\nnumerical_variables_adjusted[[\"Leave\"]]  <- FALSE\ndata_numerical_adjusted <- data_adjusted[, numerical_variables_adjusted]\npca <- prcomp(data_numerical_adjusted, center = TRUE, scale. = TRUE)\npca\n#> Standard deviations (1, .., p=21):\n#> [1] 2.93919 2.42551 1.25860 1.13300 1.00800 0.94112 0.71392 0.57613\n#> [9] 0.54047 0.44767 0.37701 0.30166 0.21211 0.17316 0.13759 0.11474\n#> [17] 0.10843 0.09797 0.08275 0.07258 0.02717\n#>\n#> Rotation (n x k) = (21 x 21):\n#>                     PC1       PC2      PC3       PC4      PC5\n#> ID             0.008492 -0.007276  0.14499  0.174484 -0.82840\n#> Residents      0.205721  0.004321  0.54743  0.303663  0.06659\n#> Households     0.181071  0.008752  0.49902  0.470793  0.13119\n#> AdultMeanAge  -0.275210  0.192311  0.14601 -0.011834  0.12951\n#> White         -0.239842  0.112711 -0.25766  0.471189 -0.02500\n#> Owned         -0.289544  0.085502  0.26954 -0.179515 -0.11673\n(Truncated output)\n```", "```py\nas.matrix(data_numerical_adjusted[1, ]) %*% pca$rotation[, 1]\n```", "```py\nas.matrix(data_numerical_adjusted) %*% pca$rotation\n```", "```py\nsummary(pca)\n#> Importance of components:\n#>                          PC1   PC2    PC3    PC4    PC5    PC6    PC7\n#> Standard deviation     2.939 2.426 1.2586 1.1330 1.0080 0.9411 0.7139\n#> Proportion of Variance 0.411 0.280 0.0754 0.0611 0.0484 0.0422 0.0243\n#> Cumulative Proportion  0.411 0.692 0.7670 0.8281 0.8765 0.9186 0.9429\n#>                           PC8    PC9    PC10    PC11    PC12    PC13\n#> Standard deviation     0.5761 0.5405 0.44767 0.37701 0.30166 0.21211\n#> Proportion of Variance 0.0158 0.0139 0.00954 0.00677 0.00433 0.00214\n#> Cumulative Proportion  0.9587 0.9726 0.98217 0.98894 0.99327 0.99541\n#>                           PC14   PC15    PC16    PC17    PC18    PC19\n#> Standard deviation     0.17316 0.1376 0.11474 0.10843 0.09797 0.08275\n#> Proportion of Variance 0.00143 0.0009 0.00063 0.00056 0.00046 0.00033\n#> Cumulative Proportion  0.99684 0.9977 0.99837 0.99893 0.99939 0.99971\n(Truncated output)\n```", "```py\nplot(pca, type = \"l\", main = \"Principal Components' Variances\" )\n```", "```py\nlibrary(ggbiplot)\nbiplot <- ggbiplot(pca, groups = data$Vote)\nbiplot <- biplot + scale_color_discrete(name = \"\")\nbiplot <- biplot + theme(legend.position = \"top\", legend.direction = \"horizontal\")\nprint(biplot)\n```", "```py\nempty_directories <- function(directories) {\n    for (directory in directories) {\n        unlink(directory, recursive = TRUE)\n        dir.create(directory, showWarnings = FALSE)\n    }\n}\n```", "```py\nstart_time <- proc.time()\n\nsource(\"./functions.R\")\n\nempty_directories(c(\n    \"./results/original/\",\n    \"./results/adjusted/\",\n    \"./results/original/scatter_plots/\"\n))\n\ndata <- prepare_data(\"./data_brexit_referendum.csv\", complete_cases = TRUE)\n\ndata_adjusted           <- adjust_data(data)\nnumerical_variables     <- get_numerical_variable_names(data)\nnumerical_variables_adj <- get_numerical_variable_names(data_adjusted)\n\nprint(\"Working on summaries...\")\n\nfull_summary(data, save_to = \"./results/original/summary_text.txt\")\nnumerical_summary(\n    data,\n    numerical_variables = numerical_variables,\n    save_to = \"./results/original/summary_numerical.csv\"\n)\n\nprint(\"Working on histograms...\")\n\nplot_percentage(\n    data,\n    variable = \"RegionName\",\n    save_to = \"./results/original/vote_percentage_by_region.png\"\n)\n\nprint(\"Working on matrix scatter plots...\")\n\nmatrix_scatter_plots(\n    data_adjusted,\n    numerical_variables = numerical_variables_adj,\n    save_to = \"./results/adjusted/matrix_scatter_plots.png\"\n)\n\nprint(\"Working on scatter plots...\")\n\nplot_scatter_plot(\n    data,\n    var_x = \"RegionName\",\n    var_y = \"Proportion\",\n    var_color = \"White\",\n    regression = TRUE,\n    save_to = \"./results/original/regionname_vs_proportion_vs_white.png\"\n)\nall_scatter_plots(\n    data,\n    numerical_variables = numerical_variables,\n    save_to = \"./results/original/scatter_plots/\"\n)\n\nprint(\"Working on correlations...\")\n\ncorrelations_plot(\n    data,\n    numerical_variables = numerical_variables,\n    save_to = \"./results/original/correlations.png\"\n)\n\nprint(\"Working on principal components...\")\n\nprincipal_components(\n    data_adjusted,\n    numerical_variables = numerical_variables_adj,\n    save_to = \"./results/adjusted/principal_components\"\n)\n\nend_time <- proc.time()\ntime_taken <- end_time - start_time\nprint(paste(\"Time taken:\", taken[1]))\n\nprint(\"Done.\")\n```", "```py\nprepare_data <- function(path, complete_cases = TRUE) {\n    data <- read.csv(path)\n    data <- clean_data(data)\n    data <- transform_data(data)\n    if (complete_cases) {\n        data <- data[complete.cases(data), ]\n    }\n    return(data)\n}\n```", "```py\nclean_data <- function(data) {\n    data[data$Leave == -1, \"Leave\"] <- NA\n    return(data)\n}\n```", "```py\ntransform_data <- function(data) {\n    data$Proportion <- data$Leave / data$NVotes\n    data$Vote <- ifelse(data$Proportion > 0.5, \"Leave\", \"Remain\")\n    data$RegionName <- as.character(data$RegionName)\n    data[data$RegionName == \"London\", \"RegionName\"]                   <- \"L\"\n    data[data$RegionName == \"North West\", \"RegionName\"]               <- \"NW\"\n    data[data$RegionName == \"North East\", \"RegionName\"]               <- \"NE\"\n    data[data$RegionName == \"South West\", \"RegionName\"]               <- \"SW\"\n    data[data$RegionName == \"South East\", \"RegionName\"]               <- \"SE\"\n    data[data$RegionName == \"East Midlands\", \"RegionName\"]            <- \"EM\"\n    data[data$RegionName == \"West Midlands\", \"RegionName\"]            <- \"WM\"\n    data[data$RegionName == \"East of England\", \"RegionName\"]          <- \"EE\"\n    data[data$RegionName == \"Yorkshire and The Humber\", \"RegionName\"] <- \"Y\"\n    return(data)\n}\n```", "```py\nplot_scatter_plot <- function(data,\n                             var_x,\n                             var_y,\n                             var_color = \"Proportion\",\n                             regression = FALSE,\n                             save_to = \"\") {\n    if (var_color) {\n        plot <- ggplot(data, aes_string(x = var_x, y = var_y, color = var_color))\n    } else {\n        plot <- ggplot(data, aes_string(x = var_x, y = var_y))\n    }\n    plot <- plot + scale_color_viridis()\n    plot <- plot + geom_point()\n    if (regression) {\n        plot <- plot + stat_smooth(method = \"lm\", col = \"grey\", se = FALSE)\n    }\n    if (not_empty(save_to)) png(save_to)\n    print(plot)\n    if (not_empty(save_to)) dev.off()\n}\n```", "```py\nall_scatter_plots <- function(data, numerical_variables, save_to = \"\") {\n    create_graphs_iteratively(data, numerical_variables, plot_scatter_plot, save_to)\n}\n\ncreate_graphs_iteratively <- function(data,\n                                      numerical_variables,\n                                      plot_function,\n                                      save_to = \"\") {\n\n    numerical_variables[[\"Proportion\"]] <- FALSE\n    variables <- names(numerical_variables[numerical_variables == TRUE])\n\n    n_variables <- (length(variables) - 1)\n    progress_bar <- progress_bar$new(\n        format = \"Progress [:bar] :percent ETA: :eta\",\n        total = n_variables\n    )\n    for (i in 1:n_variables) {\n        progress_bar$tick()\n        for (j in (i + 1):length(variables)) {\n            image_name <- paste(\n                save_to,\n                variables[i], \"_\",\n                variables[j], \".png\",\n                sep = \"\"\n            )\n            plot_function(\n                data,\n                var_x = variables[i],\n                var_y = variables[j],\n                save_to = image_name,\n                regression = TRUE\n            )\n        }\n    }\n}\n```"]