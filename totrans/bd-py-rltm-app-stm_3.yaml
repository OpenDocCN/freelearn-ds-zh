- en: Chapter 3. Introducing Petrel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in [Chapter 1](ch01.html "Chapter 1. Getting Acquainted with Storm"),
    *Getting Acquainted with Storm*, Storm is a platform for processing large amounts
    of data in real time. Storm applications are often written in Java, but Storm
    supports other languages as well, including Python. While the concepts are similar
    across languages, the details vary by language. In this chapter, we''ll get our
    first hands-on experience using Storm with Python. First, you''ll learn about
    a Python library called Petrel, which is necessary for creating topologies in
    Python. Next, we''ll set up our Python/Storm development environment. Then, we''ll
    take a close look at a working Storm topology written in Python. Finally, we''ll
    run the topology and you will learn some key techniques to ease the process of
    developing and debugging topologies. After you complete this chapter, you''ll
    have a good high-level understanding of developing basic Storm topologies. In
    this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Petrel?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Petrel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Productivity tips with Petrel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Petrel?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All Python topologies in this book rely on an open source Python library called
    Petrel. If you have prior experience with Storm, you may recall that there is
    a GitHub project called `storm-starter` that includes examples of using Storm
    with various languages (you can find the latest version of `storm-starter` at
    [https://github.com/apache/storm/tree/master/examples/storm-starter](https://github.com/apache/storm/tree/master/examples/storm-starter)).
    The `storm-starter` project includes a module called `storm.py`, which allows
    you to implement Storm topologies in Python. Given the availability of `storm.py`,
    is it really necessary to use another library? While it is certainly possible
    to build topologies using `storm.py`, it lacks some important features. To work
    around those gaps, a developer must use languages and tools that won't be familiar
    to most Python developers. If you are already familiar with these tools and do
    not mind juggling multiple technology stacks as you work with Storm, you may be
    happy with `storm.py`. But most developers who are new to Storm find the `storm.py`
    approach to be overly complex, even overwhelming. Let's discuss the weaknesses
    of `storm.py` in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Building a topology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to run a topology, Storm needs a description of spouts, bolts, and
    streams within it. This description is encoded in a format called **Thrift**.
    The `storm.py` module does not support the creation of this description; the developer
    must create it using another programming language (typically Java or Clojure).
  prefs: []
  type: TYPE_NORMAL
- en: Packaging a topology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A topology is submitted to Storm in the form of a Java `.jar` file (similar
    to Python `.egg` or `.tar.gz` files). In addition to the topology description,
    a Python topology `.jar` must also include the Python code for the topology. Creating
    a JAR file typically involves using Java development tools such as Ant or Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Logging events and errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is much easier to debug and monitor a topology if it includes logging messages
    to allow tracking of the data that flows through it. If things go wrong in a Python
    topology and the code crashes, it's invaluable to see what the error was and where
    it occurred. The `storm.py` module provides no help in these areas. If a component
    crashes, it simply exits without capturing any information. In my experience,
    this is the most frustrating aspect of working with `storm.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing third-party dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Real-world Python applications often use third-party libraries. If a cluster
    needs to run multiple topologies, each topology may have different, even conflicting
    versions of these libraries. Python virtual environments are a great tool for
    managing this. However, `storm.py` does not help you create, activate, or install
    third-party libraries in a Python virtual environment. Petrel addresses all of
    these limitations of Storm''s built-in Python support, providing a simpler, more
    streamlined development experience. Petrel''s key features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Python API for building a topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging a topology for submission to Storm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging events and errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On worker nodes, setting up a topology-specific Python runtime environment using
    `setup.sh`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll talk about the first three points. We'll see an example
    of the fourth in [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"),
    *Example Topology – Twitter*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Petrel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up our Python development environment. We assume here that you have
    already followed the instructions in [Chapter 1](ch01.html "Chapter 1. Getting
    Acquainted with Storm"), *Getting Acquainted with Storm*, to install Storm 0.9.3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install `virtualenv`, a tool for managing Python libraries.
    On Ubuntu, simply run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create a Python virtual environment. This provides a way to install
    Python libraries without requiring root access to the machine and without interfering
    with the system''s Python packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see something like the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run this command to activate the virtual environment. Your shell prompt
    will change to include the `virtualenv` name, indicating that the virtual environment
    is active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need to run this command again—each time you open a new terminal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, install Petrel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The first three digits of the Petrel version number must match the version of
    Storm that you're using. If you're using a version of Storm with no corresponding
    Petrel release, you can install Petrel from source. Check out [https://github.com/AirSage/Petrel#installing-petrel-from-source](https://github.com/AirSage/Petrel#installing-petrel-from-source)
    for instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we''ll create a Storm topology that breaks sentences into words and then
    counts the number of occurrences of each word. Implementing this topology in Storm
    requires the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sentence spout (`randomsentence.py`): A topology always begins with a spout;
    that''s how data gets into Storm. The sentence spout will emit an infinite stream
    of sentences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Splitter bolt (`splitsentence.py`): This receives sentences and splits them
    into words.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Word count bolt (`wordcount.py`): This receives words and counts the occurrences.
    For each word processed, output the word along with the number of occurrences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows how data flows through the topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your first topology](img/B03471_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Word count topology
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen the basic data flow, let's implement the topology and see
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Sentence spout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we implement a spout that generates random sentences. Enter
    this code in a file called `randomsentence.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The spout inherits from Petrel's `Spout` class.
  prefs: []
  type: TYPE_NORMAL
- en: Petrel requires every spout and bolt class to implement `__init__()` and pass
    its filename to the `(script=__file__)` base class. The `script` parameter tells
    Petrel which Python script to run while launching an instance of the component.
  prefs: []
  type: TYPE_NORMAL
- en: The `declareOutputFields()` function tells Storm about the structure of the
    tuples emitted by this spout. Each tuple consists of a single field named `sentence`.
  prefs: []
  type: TYPE_NORMAL
- en: Storm calls `nextTuple()` each time it is ready for more data from the spout.
    In a real-world spout, you might be reading from an external data source, such
    as Kafka or Twitter. This spout is just an example, so it generates its own data.
    It simply makes a random choice between one of two sentences.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the spout sleeps for 0.25 seconds on every call to
    `nextTuple()`. Why is this so? It's not technically necessary, but it slows things
    down and makes the output easier to read when the topology runs in local mode.
  prefs: []
  type: TYPE_NORMAL
- en: What does the `run()` function do? It's a bit of *glue* code required by Petrel.
    When a spout or bolt script is loaded into Storm, Petrel calls the `run()` function
    to create the component and begins processing messages. If your spout or bolt
    needs to do additional initialization, this is a good place for it to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Splitter bolt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section provides the splitter bolt, which consumes sentences from the
    spout and splits them into words. Enter this code in a file called `splitsentence.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`SplitSentenceBolt` inherits from the `BasicBolt` Petrel class. This class
    is used for most simple bolts. You may recall that Storm has a feature for ensuring
    that every message is processed, "replaying" previous tuples if they were not
    processed to completion. `BasicBolt` simplifies working with this feature. It
    does so by automatically acknowledging to Storm as each tuple is processed. The
    more flexible `Bolt` class allows the programmer to directly acknowledge tuples,
    but is it beyond the scope of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: The split sentence bolt has a run function, similar to the spout.
  prefs: []
  type: TYPE_NORMAL
- en: The `process()` function receives sentences from the spout and splits them into
    words. Each word is emitted as an individual tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Word Counting Bolt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section implements the word count bolt, which consumes words from the
    spout and counts them. Enter the following code in the `wordcount.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The word count bolt has a new wrinkle; unlike the sentence bolt, it needs to
    store information from one tuple to the next—the word count. The `__init__()`
    function sets up a `_count` field to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: The word count bolt uses Python's handy `defaultdict` class, which simplifies
    counting things by automatically providing a `0` entry when we access a nonexistent
    key.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a topology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The previous sections provided the spout and bolts for the word count topology.
    Now, we need to tell Storm how the components combine to form a topology. In Petrel,
    this is done with a `create.py` script. This script provides the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Spouts and bolts that make up the topology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each bolt, where its input data comes from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How tuples are partitioned among the instances of the bolt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the `create.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It is vital that the word count bolt uses Storm's `fieldsGrouping` behavior
    (as described in the *Stream grouping* section of [Chapter 2](ch02.html "Chapter 2. The
    Storm Anatomy"), *The Storm Anatomy*).This setting for a bolt lets you group the
    tuples in your data stream on one or more fields. For the word count topology,
    `fieldsGrouping` ensures that all instances of a word will be counted by the same
    Storm worker process.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the topology is deployed on a cluster, there will probably be many separate
    running instances of the word count bolt. If we didn''t configure `fieldsGrouping`
    on the `"word"` field, then we might get the following results by processing the
    sentence, "the cow jumped over the moon":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two entries for `"the"`, and because of this, the count is wrong!
    We want something like this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running the topology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just a few more details and we''ll be ready to run the topology:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `topology.yaml` file. This is a configuration file for Storm. A complete
    explanation of this file is beyond the scope of this book, but you can see the
    entire set of available options at [https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an empty `manifest.txt` file. You can use an editor to do this or simply
    run `touch manifest.txt`. This is a Petrel-specific file that tells Petrel what
    additional files (if any) should be included in the `.jar` file that it submits
    to Storm. In [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"), *Example
    Topology – Twitter* we'll see an example that really uses this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before running the topology, let''s review the list of files we''ve created.
    Make sure you have created these files correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`randomsentence.py`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`splitsentence.py`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wordcount.py`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create.py`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`topology.yaml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manifest.txt`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the topology with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations! You have created and run your first topology!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Petrel runs the `create.py` script to discover the structure of the topology,
    and then uses that information plus the `manifest.txt` file to build a `topology.jar`
    file and submit it to Storm. Next, Storm unpacks the `topology.jar` file and prepares
    the workers. With Petrel, this requires creating a Python virtual environment
    and installing Petrel from the Internet. In about 30 seconds, the topology will
    be up and running in Storm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll see an endless stream of output, sprinkled with messages similar to
    the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you''ve seen enough, press *Ctrl* + *C* to kill Storm. Sometimes, it doesn''t
    exit cleanly. If it doesn''t, typically the following steps will clean things
    up: press *Ctrl* + *C* a few more times, and press *Ctrl* + *Z* to pause Storm.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `ps` to get a list of `processesLook` for a Java process and get its process
    `idType "kill -9 processid"`, replacing `processid` with the ID of the Java process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the topology doesn''t run correctly, review the log files created in the
    current directory. Errors are often caused by using a version of Storm that does
    not have a corresponding version of Petrel on the PyPI website ([https://pypi.python.org/pypi/petrel](https://pypi.python.org/pypi/petrel)).
    At the time of writing this book, two Storm versions are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.9.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 0.9.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using an unsupported version of Storm, you are likely to see an
    error similar to one of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Productivity tips with Petrel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot of ground in this chapter. While we don't know every detail
    of Storm, we've seen how to construct a topology with multiple components and
    send data between them.
  prefs: []
  type: TYPE_NORMAL
- en: The Python code for the topology is quite short—only about 75 lines in all.
    This makes a nice example, but really, it's just a little too short. When you
    start writing your own topologies, things probably won't work perfectly the first
    time. New code usually has bugs, and may even crash sometimes. To get things working
    correctly, you'll need to know what's happening in the topology, especially when
    there are problems. As you work on fixing problems, you'll be running the same
    topology over and over, and the 30-second startup time for a topology can seem
    like eternity.
  prefs: []
  type: TYPE_NORMAL
- en: Improving startup performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s address startup performance first. By default, when a Petrel topology
    starts up, it creates a new Python `virtualenv` and installs Petrel and other
    dependencies in it. While this behavior is very useful for deploying a topology
    on a cluster, it is very inefficient during development, when you may be launching
    the topology dozens of times. To skip the `virtualenv` creation step, simply change
    the `submit` command to have Petrel reuse the existing Python virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This cuts the startup time from 30 seconds down to about 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling and using logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like many languages, Python has a logging framework that provides a way to
    capture information on what is happening inside a running application. This section
    describes how to use logging with Storm:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same directory as that of the word count topology, create a new file,
    called `logconfig.ini`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: What you just saw is a simple log configuration for demonstration purposes.
    For more information about Python logging, consult the logging module documentation
    at [https://www.python.org/](https://www.python.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `wordcount.py` to log its input and output. The newly added lines are
    highlighted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now launch the updated topology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the topology runs, a log file for the word count component will be written
    to the current directory, capturing what''s happening. The filename varies from
    run to run, but it will be something like `petrel22011_wordcount.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Automatic logging of fatal errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a spout or bolt crashes due to a runtime error, you''ll need to know what
    happened in order to fix it. To help with this, Petrel automatically writes fatal
    runtime errors to the log:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a line at the beginning of the word count bolt''s `process()` function
    so that it crashes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the topology again and examine the word count log file. It''ll contain
    a backtrace for the failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how Petrel makes it possible to develop Storm topologies
    in pure Python. We created and ran a simple topology, and you learned how it works.
    You also learned how to use Petrel's `--venv self` option and Python logging to
    streamline your development and debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see some more complex topologies, including a spout
    that reads from a real-world data source (Twitter), rather than randomly generated
    data.
  prefs: []
  type: TYPE_NORMAL
