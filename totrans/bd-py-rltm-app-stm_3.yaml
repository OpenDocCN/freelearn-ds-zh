- en: Chapter 3. Introducing Petrel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 介绍Petrel
- en: 'As discussed in [Chapter 1](ch01.html "Chapter 1. Getting Acquainted with Storm"),
    *Getting Acquainted with Storm*, Storm is a platform for processing large amounts
    of data in real time. Storm applications are often written in Java, but Storm
    supports other languages as well, including Python. While the concepts are similar
    across languages, the details vary by language. In this chapter, we''ll get our
    first hands-on experience using Storm with Python. First, you''ll learn about
    a Python library called Petrel, which is necessary for creating topologies in
    Python. Next, we''ll set up our Python/Storm development environment. Then, we''ll
    take a close look at a working Storm topology written in Python. Finally, we''ll
    run the topology and you will learn some key techniques to ease the process of
    developing and debugging topologies. After you complete this chapter, you''ll
    have a good high-level understanding of developing basic Storm topologies. In
    this chapter, we will cover these topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](ch01.html "第1章. 熟悉Storm")中所述，*熟悉Storm*，Storm是一个用于实时处理大量数据的平台。Storm应用程序通常用Java编写，但Storm也支持其他语言，包括Python。虽然跨语言的概念相似，但细节因语言而异。在本章中，我们将通过Python使用Storm获得我们的第一次动手经验。首先，你将了解一个名为Petrel的Python库，这是在Python中创建拓扑所必需的。接下来，我们将设置我们的Python/Storm开发环境。然后，我们将仔细研究一个用Python编写的实际运行的Storm拓扑。最后，我们将运行该拓扑，并学习一些简化拓扑开发和调试过程的关键技术。完成本章后，你将对开发基本的Storm拓扑有一个很好的高级理解。在本章中，我们将涵盖以下主题：
- en: What is Petrel?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Petrel？
- en: Installing Petrel
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Petrel
- en: Creating your first topology
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个拓扑
- en: Running the topology
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行拓扑
- en: Productivity tips with Petrel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Petrel的生产力技巧
- en: What is Petrel?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Petrel？
- en: All Python topologies in this book rely on an open source Python library called
    Petrel. If you have prior experience with Storm, you may recall that there is
    a GitHub project called `storm-starter` that includes examples of using Storm
    with various languages (you can find the latest version of `storm-starter` at
    [https://github.com/apache/storm/tree/master/examples/storm-starter](https://github.com/apache/storm/tree/master/examples/storm-starter)).
    The `storm-starter` project includes a module called `storm.py`, which allows
    you to implement Storm topologies in Python. Given the availability of `storm.py`,
    is it really necessary to use another library? While it is certainly possible
    to build topologies using `storm.py`, it lacks some important features. To work
    around those gaps, a developer must use languages and tools that won't be familiar
    to most Python developers. If you are already familiar with these tools and do
    not mind juggling multiple technology stacks as you work with Storm, you may be
    happy with `storm.py`. But most developers who are new to Storm find the `storm.py`
    approach to be overly complex, even overwhelming. Let's discuss the weaknesses
    of `storm.py` in more detail.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有Python拓扑都依赖于一个名为Petrel的开源Python库。如果你之前有使用Storm的经验，你可能还记得有一个名为`storm-starter`的GitHub项目，该项目包含了使用Storm和各种语言（你可以在[https://github.com/apache/storm/tree/master/examples/storm-starter](https://github.com/apache/storm/tree/master/examples/storm-starter)）的示例（你可以在这里找到`storm-starter`的最新版本）。`storm-starter`项目包含一个名为`storm.py`的模块，它允许你使用Python实现Storm拓扑。鉴于`storm.py`的可用性，是否真的有必要使用另一个库？虽然使用`storm.py`构建拓扑是可能的，但它缺少一些重要功能。为了弥补这些差距，开发者必须使用大多数Python开发者不熟悉的语言和工具。如果你已经熟悉这些工具，并且不介意在处理Storm时同时处理多个技术栈，你可能会对`storm.py`感到满意。但大多数新接触Storm的开发者发现`storm.py`的方法过于复杂，甚至令人难以承受。让我们更详细地讨论`storm.py`的弱点。
- en: Building a topology
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建拓扑
- en: In order to run a topology, Storm needs a description of spouts, bolts, and
    streams within it. This description is encoded in a format called **Thrift**.
    The `storm.py` module does not support the creation of this description; the developer
    must create it using another programming language (typically Java or Clojure).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行一个拓扑，Storm需要描述其内部的spouts、bolts和streams。这个描述被编码在一个称为**Thrift**的格式中。`storm.py`模块不支持创建这种描述；开发者必须使用另一种编程语言（通常是Java或Clojure）来创建它。
- en: Packaging a topology
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包拓扑
- en: A topology is submitted to Storm in the form of a Java `.jar` file (similar
    to Python `.egg` or `.tar.gz` files). In addition to the topology description,
    a Python topology `.jar` must also include the Python code for the topology. Creating
    a JAR file typically involves using Java development tools such as Ant or Maven.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑以Java `.jar`文件的形式提交给Storm（类似于Python `.egg`或`.tar.gz`文件）。除了拓扑描述外，Python拓扑`.jar`文件还必须包含拓扑的Python代码。创建JAR文件通常涉及使用Java开发工具，如Ant或Maven。
- en: Logging events and errors
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录事件和错误
- en: It is much easier to debug and monitor a topology if it includes logging messages
    to allow tracking of the data that flows through it. If things go wrong in a Python
    topology and the code crashes, it's invaluable to see what the error was and where
    it occurred. The `storm.py` module provides no help in these areas. If a component
    crashes, it simply exits without capturing any information. In my experience,
    this is the most frustrating aspect of working with `storm.py`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拓扑包含日志消息以允许跟踪通过它的数据，则调试和监控拓扑会更加容易。如果在Python拓扑中出现问题并且代码崩溃，看到错误是什么以及它发生在哪里是无价的。`storm.py`模块在这些方面没有提供帮助。如果组件崩溃，它将简单地退出而不捕获任何信息。根据我的经验，这是使用`storm.py`最令人沮丧的方面。
- en: Managing third-party dependencies
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理第三方依赖项
- en: 'Real-world Python applications often use third-party libraries. If a cluster
    needs to run multiple topologies, each topology may have different, even conflicting
    versions of these libraries. Python virtual environments are a great tool for
    managing this. However, `storm.py` does not help you create, activate, or install
    third-party libraries in a Python virtual environment. Petrel addresses all of
    these limitations of Storm''s built-in Python support, providing a simpler, more
    streamlined development experience. Petrel''s key features include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的Python应用程序通常使用第三方库。如果集群需要运行多个拓扑，每个拓扑可能具有不同的，甚至冲突的这些库版本。Python虚拟环境是管理这些的绝佳工具。然而，`storm.py`无法帮助您在Python虚拟环境中创建、激活或安装第三方库。Petrel解决了Storm内置Python支持的这些所有限制，提供了一个更简单、更流畅的开发体验。Petrel的关键特性包括以下内容：
- en: A Python API for building a topology
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python API用于构建拓扑
- en: Packaging a topology for submission to Storm
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包拓扑以提交给Storm
- en: Logging events and errors
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录事件和错误
- en: On worker nodes, setting up a topology-specific Python runtime environment using
    `setup.sh`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作节点上，使用`setup.sh`设置拓扑特定的Python运行时环境
- en: In this chapter, we'll talk about the first three points. We'll see an example
    of the fourth in [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"),
    *Example Topology – Twitter*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论前三点。我们将看到第四点的示例，在[第4章](ch04.html "第4章。示例拓扑 – Twitter") *示例拓扑 – Twitter*。
- en: Installing Petrel
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Petrel
- en: 'Let''s set up our Python development environment. We assume here that you have
    already followed the instructions in [Chapter 1](ch01.html "Chapter 1. Getting
    Acquainted with Storm"), *Getting Acquainted with Storm*, to install Storm 0.9.3:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置我们的Python开发环境。我们假设您已经遵循了[第1章](ch01.html "第1章。熟悉Storm") *熟悉Storm*中的说明来安装Storm
    0.9.3：
- en: 'First, we need to install `virtualenv`, a tool for managing Python libraries.
    On Ubuntu, simply run this command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装`virtualenv`，这是一个用于管理Python库的工具。在Ubuntu上，只需运行此命令：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we create a Python virtual environment. This provides a way to install
    Python libraries without requiring root access to the machine and without interfering
    with the system''s Python packages:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个Python虚拟环境。这提供了一种在不要求对机器具有root访问权限且不干扰系统Python包的情况下安装Python库的方法：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see something like the following output:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下类似输出：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, run this command to activate the virtual environment. Your shell prompt
    will change to include the `virtualenv` name, indicating that the virtual environment
    is active:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行此命令以激活虚拟环境。您的shell提示符将更改以包含`virtualenv`名称，表示虚拟环境已激活：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You'll need to run this command again—each time you open a new terminal.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要再次运行此命令——每次打开新终端时。
- en: 'Finally, install Petrel:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，安装Petrel：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The first three digits of the Petrel version number must match the version of
    Storm that you're using. If you're using a version of Storm with no corresponding
    Petrel release, you can install Petrel from source. Check out [https://github.com/AirSage/Petrel#installing-petrel-from-source](https://github.com/AirSage/Petrel#installing-petrel-from-source)
    for instructions.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Petrel 版本号的前三位必须与您使用的 Storm 版本相匹配。如果您使用的是没有相应 Petrel 发布版本的 Storm 版本，您可以从源代码安装
    Petrel。有关说明，请参阅 [https://github.com/AirSage/Petrel#installing-petrel-from-source](https://github.com/AirSage/Petrel#installing-petrel-from-source)。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您
- en: Creating your first topology
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个拓扑
- en: 'Now, we''ll create a Storm topology that breaks sentences into words and then
    counts the number of occurrences of each word. Implementing this topology in Storm
    requires the following components:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个 Storm 拓扑，该拓扑将句子分解成单词，然后计算每个单词的出现次数。在 Storm 中实现此拓扑需要以下组件：
- en: 'Sentence spout (`randomsentence.py`): A topology always begins with a spout;
    that''s how data gets into Storm. The sentence spout will emit an infinite stream
    of sentences.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '句子喷嘴 (`randomsentence.py`): 拓扑总是从喷嘴开始；这是数据进入 Storm 的方式。句子喷嘴将发出无限流量的句子。'
- en: 'Splitter bolt (`splitsentence.py`): This receives sentences and splits them
    into words.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '分词 bolt (`splitsentence.py`): 这个 bolt 接收句子并将它们分解成单词。'
- en: 'Word count bolt (`wordcount.py`): This receives words and counts the occurrences.
    For each word processed, output the word along with the number of occurrences.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '单词计数 bolt (`wordcount.py`): 这个 bolt 接收单词并计算它们的出现次数。对于每个处理的单词，输出单词及其出现次数。'
- en: 'The following figure shows how data flows through the topology:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了数据如何在拓扑中流动：
- en: '![Creating your first topology](img/B03471_03_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个拓扑](img/B03471_03_01.jpg)'
- en: Word count topology
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数拓扑
- en: Now that we've seen the basic data flow, let's implement the topology and see
    how it works.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了基本的数据流，让我们实现拓扑并看看它是如何工作的。
- en: Sentence spout
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 句子喷嘴
- en: 'In this section, we implement a spout that generates random sentences. Enter
    this code in a file called `randomsentence.py`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了一个生成随机句子的喷嘴。将以下代码输入一个名为 `randomsentence.py` 的文件中：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The spout inherits from Petrel's `Spout` class.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 喷嘴继承自 Petrel 的 `Spout` 类。
- en: Petrel requires every spout and bolt class to implement `__init__()` and pass
    its filename to the `(script=__file__)` base class. The `script` parameter tells
    Petrel which Python script to run while launching an instance of the component.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Petrel 要求每个喷嘴和 bolt 类实现 `__init__()` 并将其文件名传递给 `(script=__file__)` 基类。`script`
    参数告诉 Petrel 在启动组件实例时运行哪个 Python 脚本。
- en: The `declareOutputFields()` function tells Storm about the structure of the
    tuples emitted by this spout. Each tuple consists of a single field named `sentence`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`declareOutputFields()` 函数告诉 Storm 这个喷嘴发出的元组的结构。每个元组由一个名为 `sentence` 的单个字段组成。'
- en: Storm calls `nextTuple()` each time it is ready for more data from the spout.
    In a real-world spout, you might be reading from an external data source, such
    as Kafka or Twitter. This spout is just an example, so it generates its own data.
    It simply makes a random choice between one of two sentences.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Storm 每次准备好从喷嘴获取更多数据时都会调用 `nextTuple()`。在现实世界的喷嘴中，您可能正在从外部数据源读取，例如 Kafka 或 Twitter。这个喷嘴只是一个示例，因此它生成自己的数据。它只是从两个句子中选择一个进行随机选择。
- en: You may have noticed that the spout sleeps for 0.25 seconds on every call to
    `nextTuple()`. Why is this so? It's not technically necessary, but it slows things
    down and makes the output easier to read when the topology runs in local mode.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在每次调用 `nextTuple()` 时，喷嘴会暂停 0.25 秒。为什么是这样呢？这从技术上讲并不是必要的，但它会减慢速度，使得在本地模式下运行拓扑时输出更容易阅读。
- en: What does the `run()` function do? It's a bit of *glue* code required by Petrel.
    When a spout or bolt script is loaded into Storm, Petrel calls the `run()` function
    to create the component and begins processing messages. If your spout or bolt
    needs to do additional initialization, this is a good place for it to do so.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`run()`函数的作用是什么？它是Petrel所需的一点点*胶水*代码。当spout或bolt脚本被加载到Storm中时，Petrel调用`run()`函数来创建组件并开始处理消息。如果你的spout或bolt需要执行额外的初始化，这是一个很好的地方来做。'
- en: Splitter bolt
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Splitter bolt
- en: 'This section provides the splitter bolt, which consumes sentences from the
    spout and splits them into words. Enter this code in a file called `splitsentence.py`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了splitter bolt，它从spout消耗句子并将它们拆分为单词。将以下代码输入名为`splitsentence.py`的文件中：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`SplitSentenceBolt` inherits from the `BasicBolt` Petrel class. This class
    is used for most simple bolts. You may recall that Storm has a feature for ensuring
    that every message is processed, "replaying" previous tuples if they were not
    processed to completion. `BasicBolt` simplifies working with this feature. It
    does so by automatically acknowledging to Storm as each tuple is processed. The
    more flexible `Bolt` class allows the programmer to directly acknowledge tuples,
    but is it beyond the scope of this book.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`SplitSentenceBolt`从`BasicBolt` Petrel类继承。这个类用于大多数简单的bolt。你可能还记得，Storm有一个确保每条消息都被处理的功能，“重放”未处理完成的先前元组。`BasicBolt`简化了与这个功能的工作。它是通过在处理每个元组时自动向Storm确认来实现的。更灵活的`Bolt`类允许程序员直接确认元组，但这超出了本书的范围。'
- en: The split sentence bolt has a run function, similar to the spout.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分割句子bolt有一个类似于spout的run函数。
- en: The `process()` function receives sentences from the spout and splits them into
    words. Each word is emitted as an individual tuple.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`process()`函数从spout接收句子并将它们拆分为单词。每个单词作为一个单独的元组发出。'
- en: Word Counting Bolt
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单词计数bolt
- en: 'This section implements the word count bolt, which consumes words from the
    spout and counts them. Enter the following code in the `wordcount.py` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本节实现了单词计数bolt，它从spout消耗单词并计数。将以下代码输入`wordcount.py`文件中：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The word count bolt has a new wrinkle; unlike the sentence bolt, it needs to
    store information from one tuple to the next—the word count. The `__init__()`
    function sets up a `_count` field to handle this.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数bolt有一个新的特点；与句子bolt不同，它需要从一条元组存储到另一条元组的信息——单词计数。`__init__()`函数设置一个`_count`字段来处理这一点。
- en: The word count bolt uses Python's handy `defaultdict` class, which simplifies
    counting things by automatically providing a `0` entry when we access a nonexistent
    key.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 单词计数bolt使用Python的方便的`defaultdict`类，它通过在访问不存在的键时自动提供`0`条目来简化计数。
- en: Defining a topology
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义拓扑
- en: 'The previous sections provided the spout and bolts for the word count topology.
    Now, we need to tell Storm how the components combine to form a topology. In Petrel,
    this is done with a `create.py` script. This script provides the following information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前几节提供了单词计数拓扑的spout和bolts。现在，我们需要告诉Storm组件如何组合形成一个拓扑。在Petrel中，这是通过一个`create.py`脚本完成的。此脚本提供以下信息：
- en: Spouts and bolts that make up the topology
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构成拓扑的spouts和bolts
- en: For each bolt, where its input data comes from
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个bolt，它的输入数据来自哪里
- en: How tuples are partitioned among the instances of the bolt
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组如何在bolt的实例之间分区
- en: 'Here is the `create.py` script:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`create.py`脚本：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is vital that the word count bolt uses Storm's `fieldsGrouping` behavior
    (as described in the *Stream grouping* section of [Chapter 2](ch02.html "Chapter 2. The
    Storm Anatomy"), *The Storm Anatomy*).This setting for a bolt lets you group the
    tuples in your data stream on one or more fields. For the word count topology,
    `fieldsGrouping` ensures that all instances of a word will be counted by the same
    Storm worker process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是单词计数bolt使用Storm的`fieldsGrouping`行为（如第2章中*Stream grouping*部分所述），*Stream grouping*。这个设置允许你在数据流的一个或多个字段上对元组进行分组。对于单词计数拓扑，`fieldsGrouping`确保所有单词实例都将由同一个Storm工作进程计数。
- en: 'When the topology is deployed on a cluster, there will probably be many separate
    running instances of the word count bolt. If we didn''t configure `fieldsGrouping`
    on the `"word"` field, then we might get the following results by processing the
    sentence, "the cow jumped over the moon":'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当拓扑在集群上部署时，可能会运行许多单独的单词计数bolt实例。如果我们没有在`"word"`字段上配置`fieldsGrouping`，那么在处理句子“the
    cow jumped over the moon”时，我们可能会得到以下结果：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are two entries for `"the"`, and because of this, the count is wrong!
    We want something like this instead:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个 `"the"` 的条目，因此计数是错误的！我们想要的是这样的东西：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running the topology
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行拓扑
- en: 'Just a few more details and we''ll be ready to run the topology:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 只需再提供一些细节，我们就可以运行拓扑了：
- en: 'Create a `topology.yaml` file. This is a configuration file for Storm. A complete
    explanation of this file is beyond the scope of this book, but you can see the
    entire set of available options at [https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml):'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `topology.yaml` 文件。这是 Storm 的一个配置文件。这个文件的完整解释超出了本书的范围，但你可以在[https://github.com/apache/storm/blob/master/conf/defaults.yaml](https://github.com/apache/storm/blob/master/conf/defaults.yaml)查看所有可用的选项：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create an empty `manifest.txt` file. You can use an editor to do this or simply
    run `touch manifest.txt`. This is a Petrel-specific file that tells Petrel what
    additional files (if any) should be included in the `.jar` file that it submits
    to Storm. In [Chapter 4](ch04.html "Chapter 4. Example Topology – Twitter"), *Example
    Topology – Twitter* we'll see an example that really uses this file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的 `manifest.txt` 文件。你可以使用编辑器来完成这个任务，或者简单地运行 `touch manifest.txt`。这是一个 Petrel
    特定的文件，它告诉 Petrel 应该包含在提交给 Storm 的 `.jar` 文件中的附加文件（如果有的话）。在[第 4 章](ch04.html "第
    4 章。示例拓扑 – Twitter")中，我们将看到一个真正使用此文件的例子。
- en: 'Before running the topology, let''s review the list of files we''ve created.
    Make sure you have created these files correctly:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行拓扑之前，让我们回顾一下我们创建的文件列表。确保你已经正确创建了这些文件：
- en: '`randomsentence.py`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`randomsentence.py`'
- en: '`splitsentence.py`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitsentence.py`'
- en: '`wordcount.py`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wordcount.py`'
- en: '`create.py`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create.py`'
- en: '`topology.yaml`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`topology.yaml`'
- en: '`manifest.txt`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest.txt`'
- en: 'Run the topology with the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行拓扑：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Congratulations! You have created and run your first topology!
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恭喜！你已经创建并运行了你的第一个拓扑！
- en: Petrel runs the `create.py` script to discover the structure of the topology,
    and then uses that information plus the `manifest.txt` file to build a `topology.jar`
    file and submit it to Storm. Next, Storm unpacks the `topology.jar` file and prepares
    the workers. With Petrel, this requires creating a Python virtual environment
    and installing Petrel from the Internet. In about 30 seconds, the topology will
    be up and running in Storm.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Petrel 运行 `create.py` 脚本来发现拓扑的结构，然后使用这些信息加上 `manifest.txt` 文件来构建 `topology.jar`
    文件并将其提交给 Storm。接下来，Storm 解包 `topology.jar` 文件并准备工作者。使用 Petrel，这需要创建一个 Python 虚拟环境并从互联网上安装
    Petrel。大约 30 秒后，拓扑将在 Storm 中启动并运行。
- en: 'You''ll see an endless stream of output, sprinkled with messages similar to
    the following:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到一个无尽的输出流，其中穿插着类似于以下的消息：
- en: '[PRE13]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you''ve seen enough, press *Ctrl* + *C* to kill Storm. Sometimes, it doesn''t
    exit cleanly. If it doesn''t, typically the following steps will clean things
    up: press *Ctrl* + *C* a few more times, and press *Ctrl* + *Z* to pause Storm.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你看得足够多了，按 *Ctrl* + *C* 来终止 Storm。有时，它不会干净地退出。如果它没有，通常以下步骤可以清理：再按几次 *Ctrl* +
    *C*，然后按 *Ctrl* + *Z* 来暂停 Storm。
- en: Type `ps` to get a list of `processesLook` for a Java process and get its process
    `idType "kill -9 processid"`, replacing `processid` with the ID of the Java process.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `ps` 来获取 `processesLook` 的列表，查找 Java 进程并获取其进程 `idType "kill -9 processid"`，将
    `processid` 替换为 Java 进程的 ID。
- en: Troubleshooting
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'If the topology doesn''t run correctly, review the log files created in the
    current directory. Errors are often caused by using a version of Storm that does
    not have a corresponding version of Petrel on the PyPI website ([https://pypi.python.org/pypi/petrel](https://pypi.python.org/pypi/petrel)).
    At the time of writing this book, two Storm versions are supported:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拓扑没有正确运行，请检查当前目录中创建的日志文件。错误通常是由于使用了没有在 PyPI 网站上对应 Petrel 版本的 Storm 版本([https://pypi.python.org/pypi/petrel](https://pypi.python.org/pypi/petrel))。在撰写本书时，支持两个
    Storm 版本：
- en: 0.9.3
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.9.3
- en: 0.9.4
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.9.4
- en: 'If you are using an unsupported version of Storm, you are likely to see an
    error similar to one of these:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是不受支持的 Storm 版本，你可能会看到类似于以下错误之一：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Productivity tips with Petrel
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Petrel 的生产力技巧
- en: We've covered a lot of ground in this chapter. While we don't know every detail
    of Storm, we've seen how to construct a topology with multiple components and
    send data between them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们覆盖了很多内容。虽然我们并不了解 Storm 的每一个细节，但我们已经看到了如何构建一个包含多个组件的拓扑，并在它们之间发送数据。
- en: The Python code for the topology is quite short—only about 75 lines in all.
    This makes a nice example, but really, it's just a little too short. When you
    start writing your own topologies, things probably won't work perfectly the first
    time. New code usually has bugs, and may even crash sometimes. To get things working
    correctly, you'll need to know what's happening in the topology, especially when
    there are problems. As you work on fixing problems, you'll be running the same
    topology over and over, and the 30-second startup time for a topology can seem
    like eternity.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑的Python代码相当简短——总共只有大约75行。这做了一个很好的示例，但实际上，它可能还是有点短。当你开始编写自己的拓扑时，事情可能不会第一次就完美工作。新代码通常会有错误，有时甚至可能崩溃。为了使拓扑正确工作，你需要了解拓扑中发生的事情，尤其是在有问题的时候。当你努力解决问题时，你会一遍又一遍地运行相同的拓扑，而拓扑的30秒启动时间可能会感觉像永恒。
- en: Improving startup performance
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高启动性能
- en: 'Let''s address startup performance first. By default, when a Petrel topology
    starts up, it creates a new Python `virtualenv` and installs Petrel and other
    dependencies in it. While this behavior is very useful for deploying a topology
    on a cluster, it is very inefficient during development, when you may be launching
    the topology dozens of times. To skip the `virtualenv` creation step, simply change
    the `submit` command to have Petrel reuse the existing Python virtual environment:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先谈谈启动性能。默认情况下，当Petrel拓扑启动时，它会创建一个新的Python `virtualenv`并在其中安装Petrel和其他依赖项。虽然这种行为对于在集群上部署拓扑非常有用，但在开发过程中，你可能需要多次启动拓扑，这会非常低效。为了跳过`virtualenv`创建步骤，只需将`submit`命令更改为让Petrel重用现有的Python虚拟环境：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This cuts the startup time from 30 seconds down to about 10 seconds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动时间从30秒缩短到大约10秒。
- en: Enabling and using logging
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用和使用日志记录
- en: 'Like many languages, Python has a logging framework that provides a way to
    capture information on what is happening inside a running application. This section
    describes how to use logging with Storm:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言一样，Python有一个日志框架，它提供了一种捕获运行中的应用程序内部发生情况信息的方法。本节描述了如何使用Storm进行日志记录：
- en: 'In the same directory as that of the word count topology, create a new file,
    called `logconfig.ini`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单词计数拓扑所在的同一目录中创建一个新文件，命名为`logconfig.ini`：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What you just saw is a simple log configuration for demonstration purposes.
    For more information about Python logging, consult the logging module documentation
    at [https://www.python.org/](https://www.python.org/).
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你刚才看到的是一个简单的日志配置，用于演示目的。有关Python日志记录的更多信息，请参阅[https://www.python.org/](https://www.python.org/)的日志模块文档。
- en: 'Update `wordcount.py` to log its input and output. The newly added lines are
    highlighted:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`wordcount.py`更新为记录其输入和输出。新添加的行已突出显示：
- en: '[PRE17]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now launch the updated topology:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在启动更新后的拓扑：
- en: '[PRE18]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As the topology runs, a log file for the word count component will be written
    to the current directory, capturing what''s happening. The filename varies from
    run to run, but it will be something like `petrel22011_wordcount.log`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当拓扑运行时，单词计数组件的日志文件将被写入当前目录，记录正在发生的事情。文件名会随着每次运行而变化，但可能会像`petrel22011_wordcount.log`这样的格式：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Automatic logging of fatal errors
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动记录致命错误
- en: 'If a spout or bolt crashes due to a runtime error, you''ll need to know what
    happened in order to fix it. To help with this, Petrel automatically writes fatal
    runtime errors to the log:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个spout或bolt由于运行时错误而崩溃，你需要知道发生了什么才能修复它。为了帮助解决这个问题，Petrel会自动将致命的运行时错误写入日志：
- en: 'Add a line at the beginning of the word count bolt''s `process()` function
    so that it crashes:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单词计数bolt的`process()`函数的开始处添加一行，使其崩溃：
- en: '[PRE20]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the topology again and examine the word count log file. It''ll contain
    a backtrace for the failure:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行拓扑并检查单词计数日志文件。它将包含失败的回溯信息：
- en: '[PRE21]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how Petrel makes it possible to develop Storm topologies
    in pure Python. We created and ran a simple topology, and you learned how it works.
    You also learned how to use Petrel's `--venv self` option and Python logging to
    streamline your development and debugging process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Petrel如何使纯Python开发Storm拓扑成为可能。我们创建并运行了一个简单的拓扑，并学习了它是如何工作的。你还学习了如何使用Petrel的`--venv
    self`选项和Python日志记录来简化你的开发和调试过程。
- en: In the next chapter, we will see some more complex topologies, including a spout
    that reads from a real-world data source (Twitter), rather than randomly generated
    data.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到一些更复杂的拓扑，包括从真实世界数据源（Twitter）读取而不是随机生成数据的spout。
