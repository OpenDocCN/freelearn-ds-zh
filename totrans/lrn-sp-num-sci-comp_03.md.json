["```py\n>>> import numpy\n>>> vectorA = numpy.array([1,2,3,4,5,6,7])\n>>> vectorA\n\n```", "```py\narray([1, 2, 3, 4, 5, 6, 7])\n\n```", "```py\n>>> vectorB = vectorA[::-1].copy()\n>>> vectorB\n\n```", "```py\narray([7, 6, 5, 4, 3, 2, 1])\n\n```", "```py\n>>> vectorB[0]=123\n>>> vectorB\n\n```", "```py\narray([123,   6,   5,   4,   3,   2,   1])\n\n```", "```py\n>>> vectorA\n\n```", "```py\narray([1, 2, 3, 4, 5, 6, 7])\n\n```", "```py\n>>> vectorB = vectorA[::-1].copy()\n>>> vectorB\n\n```", "```py\narray([7, 6, 5, 4, 3, 2, 1])\n\n```", "```py\n>>> vectorC = vectorA + vectorB\n>>> vectorC\n\n```", "```py\narray([8, 8, 8, 8, 8, 8, 8])\n\n```", "```py\n>>> vectorD = vectorB - vectorA\n>>> vectorD\n\n```", "```py\narray([ 6,  4,  2,  0, -2, -4, -6])\n\n```", "```py\n>>> dotProduct1 = numpy.dot(vectorA,vectorB)\n>>> dotProduct1\n\n```", "```py\n84\n\n```", "```py\n>>> dotProduct2 = (vectorA*vectorB).sum()\n>>> dotProduct2\n\n```", "```py\n84\n\n```", "```py\n>>> vectorA = numpy.array([5, 6, 7])\n>>> vectorB = numpy.array([7, 6, 5])\n>>> crossProduct = numpy.cross(vectorA,vectorB)\n>>> crossProduct\n\n```", "```py\narray([-12,  24, -12])\n\n```", "```py\n>>> crossProduct = numpy.cross(vectorB,vectorA)\n>>> crossProduct\n\n```", "```py\narray([ 12, -24,  12])\n\n```", "```py\nnumpy.matrix(data=object, dtype=None, copy=True)\n```", "```py\n>>> A=numpy.matrix(\"1,2,3;4,5,6\")\n>>> A\n\n```", "```py\nmatrix([[1, 2, 3],\n [4, 5, 6]])\n\n```", "```py\n>>> A=numpy.matrix([[1,2,3],[4,5,6]])\n>>> A\n\n```", "```py\nmatrix([[1, 2, 3],\n [4, 5, 6]])\n\n```", "```py\n>>> A=numpy.matrix([ [0,10,0,0,0], [0,0,20,0,0], [0,0,0,30,0], [0,0,0,0,40], [0,0,0,0,0] ])\n>>> A\n\n```", "```py\nmatrix([[ 0, 10,  0,  0,  0],\n [ 0,  0, 20,  0,  0],\n [ 0,  0,  0, 30,  0],\n [ 0,  0,  0,  0, 40],\n [ 0,  0,  0,  0,  0]])\n\n```", "```py\n>>> import numpy\n>>> rows=numpy.array([0,1,2,3])\n>>> cols=numpy.array([1,2,3,4])\n>>> vals=numpy.array([10,20,30,40])\n\n```", "```py\n>>> import scipy.sparse\n>>> A=scipy.sparse.coo_matrix( (vals,(rows,cols)) )\n>>> print (A); print (A.todense())\n\n```", "```py\n (0, 1)  10\n (1, 2)  20\n (2, 3)  30\n (3, 4)  40\n[[  0\\.  10   0\\.   0\\.   0.]\n [  0\\.   0\\.  20   0\\.   0.]\n [  0\\.   0\\.   0\\.  30   0.]\n [  0\\.   0\\.   0\\.   0\\.  40]]\n\n```", "```py\n>>> scipy.sparse.isspmatrix_coo(A)\n\n```", "```py\nTrue\n\n```", "```py\n>>> B=numpy.mat(numpy.ones((3,3)))\n>>> W=numpy.mat(numpy.zeros((3,3)))\n>>> print (numpy.bmat('B,W;W,B'))\n\n```", "```py\n[[ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]]\n\n```", "```py\n>>> a=numpy.array([[1,2],[3,4]])\n>>> a*a\n\n```", "```py\narray([[ 1,  4],\n [ 9, 16]])\n\n```", "```py\n>>> A=numpy.mat(a)\n>>> A*A\n\n```", "```py\nmatrix([[ 7, 10],\n [15, 22]])\n\n```", "```py\n>>> b=numpy.array([[1,2,3],[3,4,5]])\n>>> numpy.dot(a,b)\n\n```", "```py\narray([[ 7, 10, 13],\n [15, 22, 29]])\n\n```", "```py\n>>> numpy.multiply(A,A)\n\n```", "```py\nmatrix([[ 1,  4],\n [ 9, 16]])\n\n```", "```py\n>>> a=numpy.arange(5); A=numpy.mat(a)\n>>> a.shape, A.shape, a.transpose().shape, A.transpose().shape\n\n```", "```py\n((5,), (1, 5), (5,), (5, 1))\n\n```", "```py\n>>> import scipy.linalg\n>>> A=scipy.linalg.hadamard(8)\n>>> zero_sum_rows = (numpy.sum(A,0)==0)\n>>> B=A[zero_sum_rows,:]\n>>> print (B[0:3,:])\n\n```", "```py\n[[ 1 -1  1 -1  1 -1  1 -1]\n [ 1  1 -1 -1  1  1 -1 -1]\n [ 1 -1 -1  1  1 -1 -1  1]]\n\n```", "```py\n>>> A = numpy.matrix(\"1+1j, 2-1j; 3-1j, 4+1j\")\n>>> print (A.T); print (A.H)\n\n```", "```py\n[[ 1.+1.j  3.-1.j]\n [ 2.-1.j  4.+1.j]]\n[[ 1.-1.j  3.+1.j]\n [ 2.+1.j  4.-1.j]]\n\n```", "```py\n>>> import numpy\n>>> import scipy.linalg\n>>> mu = 1/numpy.sqrt(2)\n>>> A = numpy.matrix([[mu,0,mu],[0,1,0],[mu,0,-mu]])\n>>> B = scipy.linalg.kron(A,A)\n\n```", "```py\n>>> print (B[:,0:-1:2])\n\n```", "```py\n[[ 0.5  0.5  0\\.   0.5]\n [ 0\\.   0\\.   0\\.   0\\. ]\n [ 0.5 -0.5  0\\.   0.5]\n [ 0\\.   0\\.   0\\.   0\\. ]\n [ 0\\.   0\\.   1\\.   0\\. ]\n [ 0\\.  -0\\.   0\\.   0\\. ]\n [ 0.5  0.5  0\\.  -0.5]\n [ 0\\.   0\\.   0\\.  -0\\. ]\n [ 0.5 -0.5  0\\.  -0.5]]\n\n```", "```py\n>>> A=numpy.matrix(\"1,1j;21,3\")\n>>> A; A*A; A**2\n\n```", "```py\nmatrix([[  1.+0.j,   0.+1.j],\n [ 21.+0.j,   3.+0.j]])\nmatrix([[  1.+21.j,   0\\. +4.j],\n [ 84\\. +0.j,   9.+21.j]])\nmatrix([[  1.+21.j,   0\\. +4.j],\n [ 84\\. +0.j,   9.+21.j]])\n\n```", "```py\n>>> numpy.asarray(A); numpy.asarray(A)*numpy.asarray(A); numpy.asarray(A)**2\n\n```", "```py\narray([[  1.+0.j,   0.+1.j],\n [ 21.+0.j,   3.+0.j]])\narray([[   1.+0.j,   -1.+0.j],\n [ 441.+0.j,    9.+0.j]])\narray([[   1.+0.j,   -1.+0.j],\n [ 441.+0.j,    9.+0.j]])\n\n```", "```py\n>>> import numpy\n>>> import scipy.linalg\n>>> a=numpy.arange(0,2*numpy.pi,1.6)\n>>> A = scipy.linalg.toeplitz(a)\n>>> print (A)\n\n```", "```py\n[[ 0\\.   1.6  3.2  4.8]\n [ 1.6  0\\.   1.6  3.2]\n [ 3.2  1.6  0\\.   1.6]\n [ 4.8  3.2  1.6  0\\. ]]\n\n```", "```py\n>>> print (numpy.exp(A))\n\n```", "```py\n[[   1\\.            4.95303242   24.5325302   121.51041752]\n [   4.95303242    1\\.            4.95303242   24.5325302 ]\n [  24.5325302     4.95303242    1\\.            4.95303242]\n [ 121.51041752   24.5325302     4.95303242    1\\.        ]]\n\n```", "```py\n>>> print (scipy.linalg.expm(A))\n\n```", "```py\n[[ 1271.76972856   916.49316549   916.63015271  1271.70874469]\n [  916.49316549   660.86560972   660.5306514    916.63015271]\n [  916.63015271   660.5306514    660.86560972   916.49316549]\n [ 1271.70874469   916.63015271   916.49316549  1271.76972856]]\n\n```", "```py\n>>> import numpy\n>>> import scipy.linalg\n>>> x=10**100; y=9; v=numpy.matrix([x,y])\n>>> scipy.linalg.norm(v,2)\n\n```", "```py\n1e+100\n\n```", "```py\n>>> numpy.sqrt(x*x+y*y)\n\n```", "```py\nTraceback (most recent call last)\n File \"<stdin>\", line 1, in <module>\nAttributeError: 'long' object has no attribute 'sqrt'\n\n```", "```py\neigvals(A, B=None, overwrite_a=False)\n```", "```py\n>>> import numpy\n>>> import scipy.misc\n>>> from scipy.linalg import svd\n>>> import matplotlib.pyplot as plt\n>>> img=scipy.misc.lena()\n>>> U,s,Vh=svd(img)      # Singular Value Decomposition\n>>> A = numpy.dot( U[:,0:32],  # use only 32 singular values\n numpy.dot( numpy.diag(s[0:32]),\n Vh[0:32,:]))\n>>> plt.subplot(121,aspect='equal'); plt.imshow(img); plt.gray()\n>>> plt.subplot(122,aspect='equal'); plt.imshow(A)\n>>> plt.show()\n\n```", "```py\nsolve(A, b, sym_pos=False, lower=False, overwrite_a=False, overwrite_b=False, debug=False)\nspsolve(A, b[, permc_spec, use_umfpack])\n```", "```py\nlstsq(A, b, cond=None, overwrite_a=False, overwrite_b=False)\n```", "```py\n>>> import numpy\n>>> import scipy.linalg\n>>> A=numpy.mat(numpy.eye(3,k=1))\n>>> print(A)\n\n```", "```py\n[[ 0\\.  1\\.  0.]\n [ 0\\.  0\\.  1.]\n [ 0\\.  0\\.  0.]]\n\n```", "```py\n>>> b=numpy.mat(numpy.arange(3) + 1).T\n>>> print(b)\n\n```", "```py\n[[1]\n [2]\n [3]]\n\n```", "```py\n>>> xinfo=scipy.linalg.lstsq(A,b)\n>>> print (xinfo[0].T)      # output the solution\n\n```", "```py\n[[ 0\\.  1\\.  2.]]\n\n```"]