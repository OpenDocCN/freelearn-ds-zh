- en: Chapter 2. Querying Vector Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a vector layer from a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a vector layer from a geodatabase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining vector layer features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining vector layer attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a layer by geometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering a layer by attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffering a feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the distance between two points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the distance along a line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the area of a polygon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a spatial index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the bearing of a line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter demonstrates how to work with vector data through Python in QGIS.
    We will first work through loading different sources of vector data. Next, we'll
    move on to examining the contents of the data. Then, we'll spend the remainder
    of the chapter performing spatial and database operations on vector data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a vector layer from a file sample
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes the most common type of data used in QGIS, a file. In
    most cases, you'll start a QGIS project by loading a shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For ease of following the examples in this book, it is recommended that you
    create a directory called `qgis_data` in your root or user directory, which provides
    a short pathname. This setup will help prevent the occurrence of any frustrating
    errors resulting from path-related issues on a given system. In this recipe and
    others, we'll use a point shapefile of New York City museums, which you can download
    from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip this file and place the shapfile's contents in a directory named `nyc`
    within your `qgis_data` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we''ll walk through the steps of loading a shapefile and adding it to
    the map, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Plugins** menu, select **Python Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Python console, create the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, ensure that the layer was created as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the layer to the layer registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your QGIS map looks similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QgsVectorLayer` object requires the location of the file, a name for the
    layer in QGIS, and a data provider that provides the right parser and capabilities
    managed for the file format. Most vector layers are covered by the `ogr` data
    provider, which attempts to guess the format from the file name extension in order
    to use the appropriate driver. The formats available with this data provider are
    listed at [http://www.gdal.org/ogr_formats.html](http://www.gdal.org/ogr_formats.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once we have created the `QgsVector` object, we do a quick check using the `layer.isValid()`
    method to see whether the file was loaded properly. We won't use this method in
    every recipe to keep the code short, but this method is often very important.
    It's usually the only indication that something has gone wrong. If you have a
    typo in the filename or you try to connect to an online data source but have no
    network connection, you won't see any errors. Your first indication will be another
    method failing further into your code, which will make tracking down the root
    cause more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: In the last line, we add the vector layer to the `QgsMapLayerRegistry`, which
    makes it available on the map. The registry keeps track of all the layers in the
    project. The reason why QGIS works this way is so you can load multiple layers,
    style them, filter them, and do other operations before exposing them to the user
    on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a vector layer from a spatial database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PostGIS geodatabase is based on the open source Postgres database. The geodatabase
    provides powerful geospatial data management and operations. PyQGIS fully supports
    PostGIS as a data source. In this recipe, we'll add a layer from a PostGIS database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing and configuring PostGIS is beyond the scope of this book, so we'll
    use a sample geospatial database interface from the excellent service [www.QGISCloud.com](http://www.QGISCloud.com).
    [www.QGISCloud.com](http://www.QGISCloud.com) has its own Python plugin called
    **QGIS Cloud**. You can sign up for free and create your own geodatabase online
    by following the site's instructions, or you can use the example used in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to load a PostGIS layer into a QGIS map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new `DataSourceURI` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the database connection string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, describe the data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just to be safe, make sure everything works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the layer to the map if everything is okay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can see the `islands` layer in the map, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyQGIS provides an object in the API to create a PostGIS data source in `QgsDataSourceURI()`.
    The `connection` string parameters in the second line of code are the database
    server, port, database name, user, and password. In the example, the database,
    username, and password are randomly generated unique names. The data source parameters
    are the schema name, table name, geometry column, and an optional SQL `WHERE`
    to subset the layer as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Examining vector layer features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a vector layer is loaded, you may want to investigate the data. In this
    recipe, we'll load a vector point layer from a shapefile and take a look at the
    *x* and *y* values of the first point.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the same New York City Museums layer from *Loading a vector layer
    from a file* recipe in this chapter. You can download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will load the layer, get the features, grab the first feature,
    obtain its geometry, and take a look at the values for the first point:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, get an iterator of the layer''s features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, get the first feature from the iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, get the feature''s geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, get the point''s values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the Python console output is similar to the following QgsPoint
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you access a layer's features or geometry using the previously demonstrated
    methods, PyQGIS returns a Python iterator. The iterator data structure allows
    Python to work efficiently with very large data sets without keeping the entire
    dataset in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Examining vector layer attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A true GIS layer contains both spatial geometry and database attributes. In
    this recipe, we'll access a vector point layer's attributes in PyQGIS. We'll use
    a file-based layer from a shapefile, but once a layer is loaded in QGIS, every
    vector layer works the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, we'll use the same New York City Museums layer from the *Loading
    a vector layer from a file* recipe in this chapter. You can download the layer
    from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we''ll load the layer, access the `features` iterator,
    grab the first feature, and then view the attributes as a Python list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, load the shapefile as a vector layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, get the features iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, grab the first feature from the iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, examine the attributes as a Python list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the Python console''s output resembles the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Examining attributes is consistent with accessing the point values of a layer's
    geometry. Note that all string attribute values are returned as unicode strings,
    which is the case for all QGIS strings. Unicode allows the internationalization
    (that is, translation) of QGIS for other languages besides English.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The attribute values don''t mean much without the knowledge of what those values
    represent. You will also need to know the fields. You can get the fields as a
    list by accessing the `fields` iterator and calling the `name()` method for each
    field. This operation is easily accomplished with a Python list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This example returns the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Filtering a layer by geometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll perform a spatial operation to select a subset of a point
    layer based on the points contained in an overlapping polygon layer. We'll use
    shapefiles in both cases, with one being a point layer and the other a polygon.
    This kind of subset is one of the most common GIS operations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need two new shapefiles that have not been used in previous recipes.
    You can download the point layer from [https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip](https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can download the geometry layer from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip these shapefiles and place them in a directory named `ms` within your
    `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will perform several steps to select features in the point
    layer that fall within the polygon layer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, load the point layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, load the polygon layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the layers to the map using a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the polygon layer''s features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, iterate through the polygon''s features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Grab each feature''s geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the point features and filter the point features by the polygon''s bounding
    box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Iterate through each point and check whether it''s within the polygon itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the polygon contains the point, print the point''s ID and select the point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, set the polygon layer as the active map layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Zoom to the polygon layer''s maximum extent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your map looks similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While QGIS has a number of tools for spatial selection, PyQGIS doesn't have
    a dedicated API for these types of functions. However, there are just enough methods
    in the API, thanks to the underlying `ogr/GEOS` library, that you can easily create
    your own spatial filters for two layers. Step 7 isn't entirely necessary, but
    we gain some efficiency using the bounding box of the polygon to limit the number
    of point features we're examining. Calculations involving rectangles are far quicker
    than detailed point-in-polygon queries. So, we quickly reduce the number of points
    we need to iterate through for the more expensive spatial operations.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering a layer by attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the spatial queries outlined in the previous recipe, we can also
    subset a layer by its attributes. This type of query resembles a more traditional
    relational database query and in fact uses SQL statements. In this recipe, we
    will filter a point shapefile-based layer by an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the same New York City Museums layer used in the previous recipes
    in this chapter. You can download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll filter the layer by an attribute, select the filtered
    features, and zoom to them, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we load the point layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add the layer to the map in order to visualize the points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we filter the point layer to points with attributes that match a specific
    zip code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we use a list comprehension to create a list of feature IDs that are
    fed to the feature selection method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we zoom to the selection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the point layer has three selected features, shown in yellow.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe takes advantage of QGIS filter expressions, highlighted in step
    3\. These filter expressions are a subset of SQL. The `QgsFeatureRequest` handles
    the query expression as an optional argument to return an iterator with just the
    features you want. These queries also allow some basic geometry manipulation.
    This recipe also introduces the `mapCanvas().zoomToSelected()` method, which is
    a convenient way to set the map's extent to the features of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Buffering a feature intermediate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buffering a feature creates a polygon around a feature as a selection geometry
    or just a simple visualization. In this recipe, we'll buffer a point in a point
    feature and add the returned polygon geometry to the map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again, we'll use the same New York City Museums layer. You can download
    the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe involves both a spatial operation and multiple visualizations.
    To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, visualize the layer on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the layer''s features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Grab the first feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select this feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the buffer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up a memory layer for the buffer''s geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the layer''s data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the feature''s geometry with the buffer geometry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the feature to the data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the buffer layer''s extents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the buffer layer''s transparency so that you can see other features as
    well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the buffer layer to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your map looks similar to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The interesting portion of this recipe starts with Step 6, which creates the
    buffer geometry. The parameters for the `buffer()` method are the distance in
    map units for the buffer followed by the number of straight line segments used
    to approximate curves. The more segments you specify, the more the buffer appears
    like a circle. However, more segments equals greater geometric complexity and
    therefore slower rendering, as well as slower geometry calculations. The other
    interesting feature of this recipe is Step 13, in which we set the transparency
    of the layer to 70 percent. We also introduce the way to create a new layer, which
    is done in memory. Later chapters will go more in depth on creating data.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the distance between two points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `QgsDistanceArea` object, PyQGIS has excellent capabilities for measuring
    the distance. We'll use this object for several recipes, starting with measuring
    the distance between two points.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't already have the New York City Museums layer used in the previous
    recipes in this chapter, download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we''ll extract the first and last points in the layer''s
    point order and measure their distance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the library that contains the QGIS contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the first feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a placeholder for the last feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Iterate through the features until you get the last one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a measurement object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Measure the distance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the measurement value from decimal degrees to meters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that your Python console output looks similar to this tuple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QgsDistanceArea` object accepts different types of geometry as input. In
    this case, we use two points. The map units for this layer are in decimal degrees,
    which isn't meaningful for a distance measurement. So, we use the `QgsDistanceArea.convertMeasurement()`
    method to covert the output to meters. The parameters for the method are the measurement
    output, the input units (in decimal degrees), the output units (meters), and a
    boolean to denote whether this conversion is an area calculation verses a linear
    measurement.
  prefs: []
  type: TYPE_NORMAL
- en: The returned tuple is the measurement value and the units. The value 0 tells
    us that the output is in meters.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the distance along a line sample
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll measure the distance along a line with multiple vertices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll use a line shapefile with two features. You can download
    the shapefile as a `.ZIP` file from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the shapefile into a directory named `qgis_data/shapes` within your root
    or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for this recipe are fairly straightforward. We''ll extract the geometry
    from the first line feature and pass it to the measurement object, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must load the QGIS constants library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the line layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Grab the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the first feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the measurement object instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we must configure the QgsDistanceArea object to use the ellipsoidal mode
    for accurate measurements in meters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the line''s geometry to the `measureLine` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the measurement output to miles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that your output looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The QgsDistanceArea object can perform any type of measurement, based on the
    method you call. When you convert the measurement from meters (represented by
    0) to miles (identified by the number 7), you will get a tuple with the measurement
    in miles and the unit identifier. The QGIS API documentation shows the values
    for all the unit constants
  prefs: []
  type: TYPE_NORMAL
- en: ([http://qgis.org/api/classQGis.html](http://qgis.org/api/classQGis.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the area of a polygon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe simply measures the area of a polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll use a single-feature polygon shapefile, which you can
    download from [https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip)
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the shapefile and put it in a directory named **qgis_data/ms** within
    your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to measure the area of a large polygon:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the QGIS constants library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the layer''s features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the boundary feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the measurement object instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the polygon list to the `measureArea()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the measurement from decimal degrees to miles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your output looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyQIS has no `measureArea()` method, but it has a `measurePolygon()` method
    in the `QgsDistanceArea` object. The method accepts a list of points. In this
    case, when we convert the measurement output from decimal degrees to miles, we
    also specify `True` in the `convertMeasurement()` method so that QGIS knows that
    it is an area calculation. Note that when we get the boundary geometry as a polygon,
    we use an index of 0, suggesting that there is more than one polygon. A polygon
    geometry can have inner rings, which are specified as additional polygons. The
    outermost ring, in this case the only ring, is the first polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a spatial index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, the recipes in this book used the raw geometry for each layer of
    operations. In this recipe, we'll take a different approach and create a spatial
    index for a layer before we run operations on it. A spatial index optimizes a
    layer for spatial queries by creating additional, simpler geometries that can
    be used to narrow down the field of possibilities within the complex geometry.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't already have the New York City Museums layer used in the previous
    recipes in this chapter, download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll create a spatial index for a point layer and then we''ll
    use it to perform a spatial query, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the first feature in the set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the spatial index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Begin loading the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the remaining features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, select the IDs of 3 points nearest to the first point. We use the number
    `4` because the starting point is included in the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The index speeds up spatial operations. However, you must add each feature one
    by one. Also, note that the `nearestNeighbor()` method returns the ID of the starting
    point as part of the output. So, if you want `4` points, you must specify `5`.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the bearing of a line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to know the compass bearing of a line to create specialized
    symbology or use as input in a spatial calculation. Even though its name only
    mentions distance and area, the versatile `QgsDistanceArea` object includes this
    function as well. In this recipe, we'll calculate the bearing of the end points
    of a line. However, this recipe will work with any two points.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use the line shapefile used in a previous recipe. You can download the
    shapefile as a `.ZIP` file from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the shapefile into a directory named `qgis_data/shapes` within your root
    or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to be performed are as simple as getting the two points we need and
    running them through the bearing function, converting from radians to degrees,
    and then converting to a positive compass bearing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the Python math module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, load the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, grab the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, grab the first line feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the measurement object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You must set the ellipsoidal mode to `True` in order to project the data before
    calculating the bearing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get all the points as a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the first point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Grab the last point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the bearing in radians:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now convert radians to degrees:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the bearing is positive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the bearing is close to the following number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default output of the bearing calculation is in radians. However, the Python
    `math` module makes conversion a snap of the fingers. If the conversion of degrees
    results in a negative number, most of the time we will want to add that number
    to 360 in order to get a compass bearing, as we did here.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data from a spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spreadsheets are one of the most common methods used to collect and store simple
    geographic data. QGIS can work with text files called CSV or comma-separated values
    files. Any spreadsheet can be converted to a CSV using the spreadsheet program.
    As long as the CSV data has a column representing *x* values, one column representing
    *y* values, and other columns representing data with the first row containing
    field names, QGIS can import it. Many organizations distribute geographic information
    as a CSV, so sooner or later you will find yourself importing a CSV. Moreover,
    PyQGIS let's you do it programmatically. Note that a CSV can be delimited by any
    character as long as it is consistent. Also, the file extension of the CSV file
    doesn't matter as long as you specify the file type for QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll use a sample CSV file with point features representing points of interest
    in a region. You can download this sample from [https://geospatialpython.googlecode.com/svn/MS_Features.txt](https://geospatialpython.googlecode.com/svn/MS_Features.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Save this to your `qgis_data/ms` directory in your root or home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will build a `URI` string to load the CSV as a vector layer. All of the
    parameters used to describe the structure of the CSV are included in the URI,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we build the base `URI` string with the filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we tell QGIS that the file is a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we specify our delimiter, which is a pipe (**"|"**), as a URL-encoded
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we tell QGIS to trim any spaces at the ends of the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the most important part, we specify the x field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we specify the y field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We decline the spatial index option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We decline the subset option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We tell QGIS not to watch the file for changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we complete the `uri` with the CRS of the layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We load the layer using the `delimitedtext` data provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your map looks similar to the map shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The URI is quite extensive, but necessary to give QGIS enough information to
    properly load the layer. We used strings in this simple example, but using the
    `QUrl` object is safer, as it handles the encoding for you. The documentation
    for the `QUrl` class is in the `Qt` documentation at [http://qt-project.org/doc/qt-4.8/qurl.html](http://qt-project.org/doc/qt-4.8/qurl.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the URI, we tell QGIS that the type is **CSV**, but when we load
    the layer, the type is **delimitedtext**. QGIS will ignore empty fields as long
    as all of the columns are balanced.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're having trouble loading a layer, you can use the **QGIS Add Delimited
    Text Layer…** dialog under the **Layer** menu to figure out the correct parameters.
    Once the layer is loaded, you can take a look at its metadata to see the URI QGIS
    constructed to load it. You can also get the correct parameters from a loaded,
    delimited text layer using the `layer.source()` method programmatically. And,
    of course, both of these methods work with any type of layer, not just delimited
    text. Unlike other layer types, however, you cannot edit delimited text layers
    in QGIS.
  prefs: []
  type: TYPE_NORMAL
