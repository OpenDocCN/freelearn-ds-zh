- en: Chapter 2. Querying Vector Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 查询矢量数据
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Loading a vector layer from a file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件加载矢量图层
- en: Loading a vector layer from a geodatabase
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从地理数据库中加载矢量图层
- en: Examining vector layer features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查矢量图层要素
- en: Examining vector layer attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查矢量图层属性
- en: Filtering a layer by geometry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过几何形状过滤图层
- en: Filtering a layer by attributes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过属性过滤图层
- en: Buffering a feature
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲要素
- en: Measuring the distance between two points
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量两点之间的距离
- en: Measuring the distance along a line
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沿着线测量距离
- en: Calculating the area of a polygon
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算多边形的面积
- en: Creating a spatial index
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建空间索引
- en: Calculating the bearing of a line
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算线的方位角
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter demonstrates how to work with vector data through Python in QGIS.
    We will first work through loading different sources of vector data. Next, we'll
    move on to examining the contents of the data. Then, we'll spend the remainder
    of the chapter performing spatial and database operations on vector data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了如何在 QGIS 中通过 Python 处理矢量数据。我们首先将加载不同来源的矢量数据。接下来，我们将检查数据的内容。然后，我们将在本章的剩余部分对矢量数据进行空间和数据库操作。
- en: Loading a vector layer from a file sample
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件样本中加载矢量图层
- en: This recipe describes the most common type of data used in QGIS, a file. In
    most cases, you'll start a QGIS project by loading a shapefile.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱描述了 QGIS 中最常用的数据类型，即文件。在大多数情况下，您将通过加载 shapefile 来开始一个 QGIS 项目。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For ease of following the examples in this book, it is recommended that you
    create a directory called `qgis_data` in your root or user directory, which provides
    a short pathname. This setup will help prevent the occurrence of any frustrating
    errors resulting from path-related issues on a given system. In this recipe and
    others, we'll use a point shapefile of New York City museums, which you can download
    from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于跟随本书中的示例，建议你在根目录或用户目录中创建一个名为 `qgis_data` 的目录，这提供了一个简短的路径名。这种设置将有助于防止因特定系统上路径相关问题的出现而导致的任何令人沮丧的错误。在本食谱和其他食谱中，我们将使用纽约市博物馆的点要素图层，您可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载。
- en: Unzip this file and place the shapfile's contents in a directory named `nyc`
    within your `qgis_data` directory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解压此文件，并将 shapfile 的内容放置在 `qgis_data` 目录中名为 `nyc` 的目录内。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now, we''ll walk through the steps of loading a shapefile and adding it to
    the map, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将逐步说明加载 shapefile 并将其添加到地图中的步骤，如下所示：
- en: Start QGIS.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 QGIS。
- en: From the **Plugins** menu, select **Python Console**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **插件** 菜单中选择 **Python 控制台**。
- en: 'In the Python console, create the layer:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 控制台中创建图层：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, ensure that the layer was created as expected:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保图层已按预期创建：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, add the layer to the layer registry:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将图层添加到图层注册表中：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify that your QGIS map looks similar to the following image:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 确认你的 QGIS 地图看起来与以下图像相似：
- en: '![How to do it...](img/00017.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00017.jpeg)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `QgsVectorLayer` object requires the location of the file, a name for the
    layer in QGIS, and a data provider that provides the right parser and capabilities
    managed for the file format. Most vector layers are covered by the `ogr` data
    provider, which attempts to guess the format from the file name extension in order
    to use the appropriate driver. The formats available with this data provider are
    listed at [http://www.gdal.org/ogr_formats.html](http://www.gdal.org/ogr_formats.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`QgsVectorLayer` 对象需要文件的位置、QGIS 中图层的名称以及提供正确解析器和为文件格式管理功能的提供者。大多数矢量图层都由 `ogr`
    提供者覆盖，它试图从文件名扩展名中猜测格式，以便使用适当的驱动程序。此提供者可用的格式列在[http://www.gdal.org/ogr_formats.html](http://www.gdal.org/ogr_formats.html)。'
- en: Once we have created the `QgsVector` object, we do a quick check using the `layer.isValid()`
    method to see whether the file was loaded properly. We won't use this method in
    every recipe to keep the code short, but this method is often very important.
    It's usually the only indication that something has gone wrong. If you have a
    typo in the filename or you try to connect to an online data source but have no
    network connection, you won't see any errors. Your first indication will be another
    method failing further into your code, which will make tracking down the root
    cause more difficult.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了 `QgsVector` 对象，我们使用 `layer.isValid()` 方法进行快速检查，以查看文件是否正确加载。我们不会在每一个菜谱中使用此方法以保持代码简短，但此方法通常非常重要。它通常是唯一表明出错的指示。如果您在文件名中输入了拼写错误，或者您尝试连接到在线数据源但没有网络连接，您将看不到任何错误。您的第一个指示将是代码中更远处的另一个方法失败，这将使追踪根本原因更加困难。
- en: In the last line, we add the vector layer to the `QgsMapLayerRegistry`, which
    makes it available on the map. The registry keeps track of all the layers in the
    project. The reason why QGIS works this way is so you can load multiple layers,
    style them, filter them, and do other operations before exposing them to the user
    on the map.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行，我们将矢量图层添加到 `QgsMapLayerRegistry` 中，使其在地图上可用。注册表跟踪项目中的所有图层。QGIS 以这种方式工作的原因是为了您可以在将图层暴露给地图上的用户之前，加载多个图层，对它们进行样式设置，过滤它们，并执行其他操作。
- en: Loading a vector layer from a spatial database
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从空间数据库加载矢量图层
- en: The PostGIS geodatabase is based on the open source Postgres database. The geodatabase
    provides powerful geospatial data management and operations. PyQGIS fully supports
    PostGIS as a data source. In this recipe, we'll add a layer from a PostGIS database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: PostGIS 地理数据库基于开源的 Postgres 数据库。地理数据库提供了强大的地理空间数据管理和操作功能。PyQGIS 完全支持 PostGIS
    作为数据源。在这个菜谱中，我们将从一个 PostGIS 数据库中添加一个图层。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Installing and configuring PostGIS is beyond the scope of this book, so we'll
    use a sample geospatial database interface from the excellent service [www.QGISCloud.com](http://www.QGISCloud.com).
    [www.QGISCloud.com](http://www.QGISCloud.com) has its own Python plugin called
    **QGIS Cloud**. You can sign up for free and create your own geodatabase online
    by following the site's instructions, or you can use the example used in the recipe.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置 PostGIS 超出了本书的范围，因此我们将使用来自优秀服务 [www.QGISCloud.com](http://www.QGISCloud.com)
    的示例地理空间数据库接口。 [www.QGISCloud.com](http://www.QGISCloud.com) 有自己的 Python 插件，称为
    **QGIS Cloud**。您可以免费注册并按照网站说明在线创建自己的地理数据库，或者您可以使用菜谱中使用的示例。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to load a PostGIS layer into a QGIS map:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将 PostGIS 图层加载到 QGIS 地图中：
- en: 'First, create a new `DataSourceURI` instance:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的 `DataSourceURI` 实例：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, create the database connection string:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建数据库连接字符串：
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, describe the data source:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，描述数据源：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, create the layer:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建图层：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just to be safe, make sure everything works:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保安全，请确保一切正常工作：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, add the layer to the map if everything is okay:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果一切正常，将图层添加到地图中：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see the `islands` layer in the map, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在地图中看到 `islands` 图层，如下面的截图所示：
- en: '![How to do it...](img/00018.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00018.jpeg)'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: PyQGIS provides an object in the API to create a PostGIS data source in `QgsDataSourceURI()`.
    The `connection` string parameters in the second line of code are the database
    server, port, database name, user, and password. In the example, the database,
    username, and password are randomly generated unique names. The data source parameters
    are the schema name, table name, geometry column, and an optional SQL `WHERE`
    to subset the layer as needed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: PyQGIS 在 API 中提供了一个对象，用于在 `QgsDataSourceURI()` 中创建 PostGIS 数据源。代码第二行的 `connection`
    字符串参数是数据库服务器、端口、数据库名、用户和密码。在示例中，数据库、用户名和密码是随机生成的唯一名称。数据源参数是模式名称、表名称、几何列以及可选的 SQL
    `WHERE` 子句，根据需要子集图层。
- en: Examining vector layer features
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查矢量图层特征
- en: Once a vector layer is loaded, you may want to investigate the data. In this
    recipe, we'll load a vector point layer from a shapefile and take a look at the
    *x* and *y* values of the first point.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了矢量图层，您可能想调查数据。在这个菜谱中，我们将从一个 shapefile 中加载矢量点图层，并查看第一个点的 *x* 和 *y* 值。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the same New York City Museums layer from *Loading a vector layer
    from a file* recipe in this chapter. You can download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中*从文件加载矢量图层*配方中的相同的纽约市博物馆图层。你可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载该图层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解压该文件，并将shapefile的内容放置在你的根目录或主目录下的`qgis_data`目录中的`nyc`目录内。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will load the layer, get the features, grab the first feature,
    obtain its geometry, and take a look at the values for the first point:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将加载图层，获取特征，获取第一个特征，获取其几何形状，并查看第一个点的值：
- en: 'First, load the layer:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载图层：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, get an iterator of the layer''s features:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，获取图层特征的迭代器：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, get the first feature from the iterator:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从迭代器中获取第一个特征：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, get the feature''s geometry:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，获取特征的几何形状：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, get the point''s values:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，获取点的值：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Verify that the Python console output is similar to the following QgsPoint
    object:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认Python控制台输出类似于以下QgsPoint对象：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When you access a layer's features or geometry using the previously demonstrated
    methods, PyQGIS returns a Python iterator. The iterator data structure allows
    Python to work efficiently with very large data sets without keeping the entire
    dataset in memory.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用之前演示的方法访问图层的特征或几何形状时，PyQGIS返回一个Python迭代器。迭代器数据结构允许Python在不需要将整个数据集保留在内存中的情况下，高效地处理非常大的数据集。
- en: Examining vector layer attributes
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查矢量图层属性
- en: A true GIS layer contains both spatial geometry and database attributes. In
    this recipe, we'll access a vector point layer's attributes in PyQGIS. We'll use
    a file-based layer from a shapefile, but once a layer is loaded in QGIS, every
    vector layer works the same way.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的GIS图层包含空间几何和数据库属性。在本配方中，我们将使用PyQGIS访问矢量点图层的属性。我们将使用来自shapefile的基于文件的图层，但一旦图层在QGIS中加载，每个矢量图层的工作方式都是相同的。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, we'll use the same New York City Museums layer from the *Loading
    a vector layer from a file* recipe in this chapter. You can download the layer
    from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们将使用本章中*从文件加载矢量图层*配方中的相同的纽约市博物馆图层。你可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载该图层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 解压该文件，并将shapefile的内容放置在你的根目录或主目录下的`qgis_data`目录中的`nyc`目录内。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following steps, we''ll load the layer, access the `features` iterator,
    grab the first feature, and then view the attributes as a Python list:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将加载图层，访问`features`迭代器，获取第一个特征，然后以Python列表的形式查看属性：
- en: 'First, load the shapefile as a vector layer:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将shapefile作为矢量图层加载：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, get the features iterator:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，获取特征迭代器：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, grab the first feature from the iterator:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从迭代器中获取第一个特征：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, examine the attributes as a Python list:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，以Python列表的形式检查属性：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Verify that the Python console''s output resembles the following list:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认Python控制台的输出类似于以下列表：
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Examining attributes is consistent with accessing the point values of a layer's
    geometry. Note that all string attribute values are returned as unicode strings,
    which is the case for all QGIS strings. Unicode allows the internationalization
    (that is, translation) of QGIS for other languages besides English.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 检查属性与访问图层几何形状的点值是一致的。请注意，所有字符串属性值都作为unicode字符串返回，这是所有QGIS字符串的情况。Unicode允许QGIS除了英语以外的其他语言的国际化（即翻译）。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The attribute values don''t mean much without the knowledge of what those values
    represent. You will also need to know the fields. You can get the fields as a
    list by accessing the `fields` iterator and calling the `name()` method for each
    field. This operation is easily accomplished with a Python list comprehension:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 属性值如果没有了解这些值代表的意义，那么它们就没有太多意义。你还需要了解字段。你可以通过访问`fields`迭代器并调用每个字段的`name()`方法来获取字段列表。这个操作可以通过Python列表推导式轻松完成：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This example returns the following result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例返回以下结果：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Filtering a layer by geometry
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过几何形状过滤图层
- en: In this recipe, we'll perform a spatial operation to select a subset of a point
    layer based on the points contained in an overlapping polygon layer. We'll use
    shapefiles in both cases, with one being a point layer and the other a polygon.
    This kind of subset is one of the most common GIS operations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将执行空间操作，根据重叠的多边形图层中的点选择点图层的一个子集。我们将在这两种情况下都使用 shapefiles，其中一个是点图层，另一个是多边形。这种子集是
    GIS 操作中最常见的一种。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need two new shapefiles that have not been used in previous recipes.
    You can download the point layer from [https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip](https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个新的 shapefiles，这些 shapefiles 在之前的配方中尚未使用。你可以从 [https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip](https://geospatialpython.googlecode.com/files/MSCities_Geo_Pts.zip)
    下载点图层。
- en: Similarly, you can download the geometry layer from [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以从 [https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip](https://geospatialpython.googlecode.com/files/GIS_CensusTract.zip)
    下载几何图层。
- en: Unzip these shapefiles and place them in a directory named `ms` within your
    `qgis_data` directory, within your root or home directory.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 解压这些 shapefiles 并将它们放置在你根目录或主目录下的 `qgis_data` 目录中的 `ms` 目录内。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will perform several steps to select features in the point
    layer that fall within the polygon layer, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将执行几个步骤来选择点图层中位于多边形图层内的要素，如下所示：
- en: 'First, load the point layer:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载点图层：
- en: '[PRE22]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, load the polygon layer:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，加载多边形图层：
- en: '[PRE23]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the layers to the map using a list:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列表将图层添加到地图中：
- en: '[PRE24]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Access the polygon layer''s features:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问多边形图层的要素：
- en: '[PRE25]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, iterate through the polygon''s features:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，迭代多边形的要素：
- en: '[PRE26]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Grab each feature''s geometry:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取每个要素的几何形状：
- en: '[PRE27]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Access the point features and filter the point features by the polygon''s bounding
    box:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问点要素并通过多边形的边界框过滤点要素：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Iterate through each point and check whether it''s within the polygon itself:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代每个点并检查它是否位于多边形本身内：
- en: '[PRE29]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If the polygon contains the point, print the point''s ID and select the point:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果多边形包含该点，打印点的 ID 并选择该点：
- en: '[PRE30]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, set the polygon layer as the active map layer:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将多边形图层设置为活动地图图层：
- en: '[PRE31]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Zoom to the polygon layer''s maximum extent:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图缩放到多边形图层的最大范围：
- en: '[PRE32]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Verify that your map looks similar to the following image:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 确认你的地图看起来与以下图像相似：
- en: '![How to do it...](img/00019.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00019.jpeg)'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: While QGIS has a number of tools for spatial selection, PyQGIS doesn't have
    a dedicated API for these types of functions. However, there are just enough methods
    in the API, thanks to the underlying `ogr/GEOS` library, that you can easily create
    your own spatial filters for two layers. Step 7 isn't entirely necessary, but
    we gain some efficiency using the bounding box of the polygon to limit the number
    of point features we're examining. Calculations involving rectangles are far quicker
    than detailed point-in-polygon queries. So, we quickly reduce the number of points
    we need to iterate through for the more expensive spatial operations.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 QGIS 提供了多种空间选择工具，但 PyQGIS 没有专门用于这些类型功能的 API。然而，由于底层 `ogr/GEOS` 库的存在，API 中有足够的方法，你可以轻松地为两层创建自己的空间过滤器。第
    7 步并非完全必要，但使用多边形的边界框来限制我们检查的点特征数量可以提高一些效率。涉及矩形的计算比详细的点在多边形内查询要快得多。因此，我们快速减少需要迭代的点数量，以便进行更昂贵的空间操作。
- en: Filtering a layer by attributes
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过属性过滤图层
- en: In addition to the spatial queries outlined in the previous recipe, we can also
    subset a layer by its attributes. This type of query resembles a more traditional
    relational database query and in fact uses SQL statements. In this recipe, we
    will filter a point shapefile-based layer by an attribute.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前一个配方中概述的空间查询之外，我们还可以通过属性对图层进行子集划分。这种查询类似于更传统的数据库查询，实际上使用了 SQL 语句。在本配方中，我们将通过一个属性过滤基于点
    shapefile 的图层。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the same New York City Museums layer used in the previous recipes
    in this chapter. You can download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章中之前配方中使用的相同的纽约市博物馆层。您可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载该层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 解压该文件，并将shapefile的内容放置在您的根目录或主目录中的`qgis_data`目录下的`nyc`目录中。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we''ll filter the layer by an attribute, select the filtered
    features, and zoom to them, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将通过属性过滤层，选择过滤后的要素，并缩放到它们，如下所示：
- en: 'First, we load the point layer:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们加载点层：
- en: '[PRE33]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we add the layer to the map in order to visualize the points:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将层添加到地图中以便可视化点：
- en: '[PRE34]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we filter the point layer to points with attributes that match a specific
    zip code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们过滤点层以匹配特定邮编的属性点：
- en: '[PRE35]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, we use a list comprehension to create a list of feature IDs that are
    fed to the feature selection method:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用列表推导来创建一个特征ID列表，该列表被馈送到特征选择方法：
- en: '[PRE36]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we zoom to the selection:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将缩放到选择区域：
- en: '[PRE37]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Verify that the point layer has three selected features, shown in yellow.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 验证点层有三个选定的要素，以黄色显示。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe takes advantage of QGIS filter expressions, highlighted in step
    3\. These filter expressions are a subset of SQL. The `QgsFeatureRequest` handles
    the query expression as an optional argument to return an iterator with just the
    features you want. These queries also allow some basic geometry manipulation.
    This recipe also introduces the `mapCanvas().zoomToSelected()` method, which is
    a convenient way to set the map's extent to the features of interest.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方利用QGIS过滤表达式，在第3步中突出显示。这些过滤表达式是SQL的一个子集。`QgsFeatureRequest`将查询表达式作为可选参数处理，以返回仅包含您想要的要素的迭代器。这些查询还允许一些基本的几何操作。此配方还介绍了`mapCanvas().zoomToSelected()`方法，这是一种方便地将地图范围设置为感兴趣要素的方法。
- en: Buffering a feature intermediate
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓冲要素的中间过程
- en: Buffering a feature creates a polygon around a feature as a selection geometry
    or just a simple visualization. In this recipe, we'll buffer a point in a point
    feature and add the returned polygon geometry to the map.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲一个要素会在要素周围创建一个多边形，作为选择几何或简单的可视化。在此配方中，我们将缓冲点要素中的点，并将返回的多边形几何添加到地图上。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Once again, we'll use the same New York City Museums layer. You can download
    the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将使用相同的纽约市博物馆层。您可以从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载该层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 解压该文件，并将shapefile的内容放置在您的根目录或主目录中的`qgis_data`目录下的`nyc`目录中。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This recipe involves both a spatial operation and multiple visualizations.
    To do this, perform the following steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方涉及空间操作和多个可视化。为此，执行以下步骤：
- en: 'First, load the layer:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，加载层：
- en: '[PRE38]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, visualize the layer on the map:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在地图上可视化层：
- en: '[PRE39]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Access the layer''s features:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问层的要素：
- en: '[PRE40]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Grab the first feature:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取第一个要素：
- en: '[PRE41]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Select this feature:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择此要素：
- en: '[PRE42]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create the buffer:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建缓冲区：
- en: '[PRE43]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Set up a memory layer for the buffer''s geometry:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为缓冲的几何设置内存层：
- en: '[PRE44]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Access the layer''s data provider:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问层的提供者：
- en: '[PRE45]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a new feature:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新要素：
- en: '[PRE46]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Set the feature''s geometry with the buffer geometry:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用缓冲几何设置要素的几何：
- en: '[PRE47]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the feature to the data provider:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要素添加到数据提供者：
- en: '[PRE48]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Update the buffer layer''s extents:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新缓冲层的范围：
- en: '[PRE49]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Set the buffer layer''s transparency so that you can see other features as
    well:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置缓冲层的透明度，以便您可以看到其他要素：
- en: '[PRE50]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the buffer layer to the map:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将缓冲层添加到地图：
- en: '[PRE51]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Verify that your map looks similar to this screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您的地图看起来与这张截图相似：
- en: '![How to do it...](img/00020.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00020.jpeg)'
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The interesting portion of this recipe starts with Step 6, which creates the
    buffer geometry. The parameters for the `buffer()` method are the distance in
    map units for the buffer followed by the number of straight line segments used
    to approximate curves. The more segments you specify, the more the buffer appears
    like a circle. However, more segments equals greater geometric complexity and
    therefore slower rendering, as well as slower geometry calculations. The other
    interesting feature of this recipe is Step 13, in which we set the transparency
    of the layer to 70 percent. We also introduce the way to create a new layer, which
    is done in memory. Later chapters will go more in depth on creating data.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的有趣部分从第6步开始，该步创建缓冲几何体。`buffer()`方法的参数是缓冲区的地图单位距离，然后是用于近似曲线的直线段数。您指定的段数越多，缓冲区就越像圆形。然而，更多的段数意味着更大的几何复杂性，因此渲染速度和几何计算速度都会变慢。本菜谱的另一个有趣特性是第13步，其中我们将图层的透明度设置为70%。我们还介绍了创建新图层的方法，这是在内存中完成的。后面的章节将更深入地介绍创建数据。
- en: Measuring the distance between two points
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量两点之间的距离
- en: In the `QgsDistanceArea` object, PyQGIS has excellent capabilities for measuring
    the distance. We'll use this object for several recipes, starting with measuring
    the distance between two points.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在`QgsDistanceArea`对象中，PyQGIS具有出色的测量距离功能。我们将使用此对象进行多个菜谱，从测量两点之间的距离开始。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't already have the New York City Museums layer used in the previous
    recipes in this chapter, download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有本章之前菜谱中使用的纽约市博物馆图层，请从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载图层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 解压该文件，并将shapefile的内容放置在您的根目录或主目录下的`qgis_data`目录中的名为`nyc`的目录内。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following steps, we''ll extract the first and last points in the layer''s
    point order and measure their distance:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将提取图层点顺序中的第一个和最后一个点并测量它们之间的距离：
- en: 'First, import the library that contains the QGIS contents:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入包含QGIS内容的库：
- en: '[PRE52]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, load the layer:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，加载图层：
- en: '[PRE53]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Access the features:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问功能：
- en: '[PRE54]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Get the first feature:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取第一个特征：
- en: '[PRE55]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Set a placeholder for the last feature:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为最后一个特征设置占位符：
- en: '[PRE56]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Iterate through the features until you get the last one:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历特征直到获取最后一个：
- en: '[PRE57]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a measurement object:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测量对象：
- en: '[PRE58]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Measure the distance:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量距离：
- en: '[PRE59]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Convert the measurement value from decimal degrees to meters:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测量值从十进制度数转换为米：
- en: '[PRE60]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Ensure that your Python console output looks similar to this tuple:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的Python控制台输出类似于以下元组：
- en: '[PRE61]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `QgsDistanceArea` object accepts different types of geometry as input. In
    this case, we use two points. The map units for this layer are in decimal degrees,
    which isn't meaningful for a distance measurement. So, we use the `QgsDistanceArea.convertMeasurement()`
    method to covert the output to meters. The parameters for the method are the measurement
    output, the input units (in decimal degrees), the output units (meters), and a
    boolean to denote whether this conversion is an area calculation verses a linear
    measurement.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`QgsDistanceArea`对象接受不同类型的几何体作为输入。在这种情况下，我们使用两个点。该图层的地图单位是十进制度数，对于距离测量来说没有意义。因此，我们使用`QgsDistanceArea.convertMeasurement()`方法将输出转换为米。该方法参数包括测量输出、输入单位（十进制度数）、输出单位（米）以及一个布尔值，表示此转换是面积计算还是线性测量。'
- en: The returned tuple is the measurement value and the units. The value 0 tells
    us that the output is in meters.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的元组是测量值和单位。值0告诉我们输出是在米。
- en: Measuring the distance along a line sample
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沿线样测量距离
- en: In this recipe, we'll measure the distance along a line with multiple vertices.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将测量具有多个顶点的线上的距离。
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll use a line shapefile with two features. You can download
    the shapefile as a `.ZIP` file from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本菜谱，我们将使用具有两个特征的线状shapefile。您可以从[https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)下载shapefile作为`.ZIP`文件。
- en: Unzip the shapefile into a directory named `qgis_data/shapes` within your root
    or home directory.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将 shapefile 解压到根目录或主目录下的 `qgis_data/shapes` 目录中。
- en: How to do it...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for this recipe are fairly straightforward. We''ll extract the geometry
    from the first line feature and pass it to the measurement object, as shown here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱的步骤相当直接。我们将从第一行要素中提取几何形状，并将其传递给测量对象，如下所示：
- en: 'First, we must load the QGIS constants library:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须加载 QGIS 常量库：
- en: '[PRE62]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Load the line layer:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载线图层：
- en: '[PRE63]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Grab the features:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取要素：
- en: '[PRE64]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Get the first feature:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取第一个要素：
- en: '[PRE65]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Create the measurement object instance:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测量对象实例：
- en: '[PRE66]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Then, we must configure the QgsDistanceArea object to use the ellipsoidal mode
    for accurate measurements in meters:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须配置 QgsDistanceArea 对象以使用椭圆模式进行米级的精确测量：
- en: '[PRE67]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Pass the line''s geometry to the `measureLine` method:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行的几何形状传递给 `measureLine` 方法：
- en: '[PRE68]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Convert the measurement output to miles:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测量输出转换为英里：
- en: '[PRE69]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Ensure that your output looks similar to the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的输出看起来类似于以下内容：
- en: '[PRE70]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用原理...
- en: The QgsDistanceArea object can perform any type of measurement, based on the
    method you call. When you convert the measurement from meters (represented by
    0) to miles (identified by the number 7), you will get a tuple with the measurement
    in miles and the unit identifier. The QGIS API documentation shows the values
    for all the unit constants
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: QgsDistanceArea 对象可以根据你调用的方法执行任何类型的测量。当你将测量值从米（用 0 表示）转换为英里（用数字 7 表示）时，你将得到一个包含测量值和单位标识符的元组。QGIS
    API 文档显示了所有单位常量的值
- en: ([http://qgis.org/api/classQGis.html](http://qgis.org/api/classQGis.html)).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ([http://qgis.org/api/classQGis.html](http://qgis.org/api/classQGis.html)).
- en: Calculating the area of a polygon
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算多边形的面积
- en: This recipe simply measures the area of a polygon.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱仅测量多边形的面积。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll use a single-feature polygon shapefile, which you can
    download from [https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此菜谱，我们将使用单个要素的多边形 shapefile，您可以从 [https://geospatialpython.googlecode.com/files/Mississippi.zip](https://geospatialpython.googlecode.com/files/Mississippi.zip)
    下载
- en: Unzip the shapefile and put it in a directory named **qgis_data/ms** within
    your root or home directory.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 解压 shapefile 并将其放入根目录或主目录下的 **qgis_data/ms** 目录中。
- en: How to do it...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to measure the area of a large polygon:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以测量大多边形的面积：
- en: 'First, import the QGIS constants library, as follows:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入 QGIS 常量库，如下所示：
- en: '[PRE71]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Load the layer:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载图层：
- en: '[PRE72]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Access the layer''s features:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问图层的要素：
- en: '[PRE73]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Get the boundary feature:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取边界要素：
- en: '[PRE74]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create the measurement object instance:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测量对象实例：
- en: '[PRE75]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Pass the polygon list to the `measureArea()` method:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将多边形列表传递给 `measureArea()` 方法：
- en: '[PRE76]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Convert the measurement from decimal degrees to miles:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测量值从十进制度数转换为英里：
- en: '[PRE77]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Verify that your output looks similar to the following:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的输出看起来类似于以下内容：
- en: '[PRE78]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用原理...
- en: PyQIS has no `measureArea()` method, but it has a `measurePolygon()` method
    in the `QgsDistanceArea` object. The method accepts a list of points. In this
    case, when we convert the measurement output from decimal degrees to miles, we
    also specify `True` in the `convertMeasurement()` method so that QGIS knows that
    it is an area calculation. Note that when we get the boundary geometry as a polygon,
    we use an index of 0, suggesting that there is more than one polygon. A polygon
    geometry can have inner rings, which are specified as additional polygons. The
    outermost ring, in this case the only ring, is the first polygon.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: PyQIS 没有提供 `measureArea()` 方法，但在 `QgsDistanceArea` 对象中有一个 `measurePolygon()`
    方法。该方法接受一个点列表。在这种情况下，当我们从十进制度数转换为英里时，我们还在 `convertMeasurement()` 方法中指定 `True`，这样
    QGIS 就知道这是一个面积计算。请注意，当我们获取边界几何形状作为多边形时，我们使用索引 0，这表明存在多个多边形。多边形几何形状可以具有内环，这些内环被指定为额外的多边形。最外层的环，在这种情况下是唯一的环，是第一个多边形。
- en: Creating a spatial index
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建空间索引
- en: Until now, the recipes in this book used the raw geometry for each layer of
    operations. In this recipe, we'll take a different approach and create a spatial
    index for a layer before we run operations on it. A spatial index optimizes a
    layer for spatial queries by creating additional, simpler geometries that can
    be used to narrow down the field of possibilities within the complex geometry.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中的食谱使用了每个操作层的原始几何形状。在本食谱中，我们将采取不同的方法，在运行操作之前为图层创建空间索引。空间索引通过创建额外的、更简单的几何形状来优化图层，这些几何形状可以用来缩小复杂几何形状中的可能性范围。
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't already have the New York City Museums layer used in the previous
    recipes in this chapter, download the layer from [https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有在本书前面的食谱中使用的纽约市博物馆图层，请从[https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip](https://geospatialpython.googlecode.com/svn/NYC_MUSEUMS_GEO.zip)下载图层。
- en: Unzip that file and place the shapefile's contents in a directory named `nyc`
    within your `qgis_data` directory, within your root or home directory.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩该文件，并将形状文件的内容放置在根目录或主目录中的`qgis_data`目录下的`nyc`目录中。
- en: How to do it...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we''ll create a spatial index for a point layer and then we''ll
    use it to perform a spatial query, as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将为点图层创建空间索引，然后我们将使用它来执行空间查询，如下所示：
- en: 'Load the layer:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载图层：
- en: '[PRE79]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Get the features:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特征：
- en: '[PRE80]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Get the first feature in the set:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取集合中的第一个特征：
- en: '[PRE81]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now, create the spatial index:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建空间索引：
- en: '[PRE82]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Begin loading the features:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始加载特征：
- en: '[PRE83]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Insert the remaining features:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入剩余的特征：
- en: '[PRE84]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now, select the IDs of 3 points nearest to the first point. We use the number
    `4` because the starting point is included in the output:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择距离第一个点最近的3个点的ID。我们使用数字`4`，因为起始点包含在输出中：
- en: '[PRE85]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: How it works...
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The index speeds up spatial operations. However, you must add each feature one
    by one. Also, note that the `nearestNeighbor()` method returns the ID of the starting
    point as part of the output. So, if you want `4` points, you must specify `5`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 索引可以加快空间操作的速度。但是，你必须逐个添加每个特征。此外，请注意，`nearestNeighbor()`方法将起始点的ID作为输出的一部分返回。因此，如果你想获取`4`个点，你必须指定`5`。
- en: Calculating the bearing of a line
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算线的方位角
- en: Sometimes, you need to know the compass bearing of a line to create specialized
    symbology or use as input in a spatial calculation. Even though its name only
    mentions distance and area, the versatile `QgsDistanceArea` object includes this
    function as well. In this recipe, we'll calculate the bearing of the end points
    of a line. However, this recipe will work with any two points.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要知道线的罗盘方位角来创建专门的符号或将其用作空间计算中的输入。尽管其名称只提到距离和面积，但多功能的`QgsDistanceArea`对象也包括这个功能。在本食谱中，我们将计算线的端点的方位角。然而，这个食谱可以适用于任何两个点。
- en: Getting ready
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the line shapefile used in a previous recipe. You can download the
    shapefile as a `.ZIP` file from [https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前食谱中使用的线形状文件。您可以从[https://geospatialpython.googlecode.com/svn/paths.zip](https://geospatialpython.googlecode.com/svn/paths.zip)下载形状文件作为`.ZIP`文件。
- en: Unzip the shapefile into a directory named `qgis_data/shapes` within your root
    or home directory.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 将形状文件解压缩到根目录或主目录中的`qgis_data/shapes`目录下。
- en: How to do it...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to be performed are as simple as getting the two points we need and
    running them through the bearing function, converting from radians to degrees,
    and then converting to a positive compass bearing:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行的操作步骤与获取所需的两个点并将它们通过方位角函数运行一样简单，从弧度转换为度数，然后转换为正罗盘方位角：
- en: 'First, import the Python math module:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入Python数学模块：
- en: '[PRE86]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Next, load the layer:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，加载图层：
- en: '[PRE87]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Now, grab the features:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，获取特征：
- en: '[PRE88]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Then, grab the first line feature:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，获取第一条线特征：
- en: '[PRE89]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Create the measurement object:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测量对象：
- en: '[PRE90]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'You must set the ellipsoidal mode to `True` in order to project the data before
    calculating the bearing:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须将椭球模式设置为`True`，以便在计算方位角之前投影数据：
- en: '[PRE91]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Get all the points as a list:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取所有点作为列表：
- en: '[PRE92]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Get the first point:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取第一个点：
- en: '[PRE93]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Grab the last point:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最后一个点：
- en: '[PRE94]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Calculate the bearing in radians:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以弧度计算方位角：
- en: '[PRE95]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Now convert radians to degrees:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将弧度转换为度数：
- en: '[PRE96]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Ensure that the bearing is positive:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保方位角为正值：
- en: '[PRE97]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'View the output:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看输出：
- en: '[PRE98]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Verify that the bearing is close to the following number:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 确认方位角接近以下数字：
- en: '[PRE99]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: How it works...
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The default output of the bearing calculation is in radians. However, the Python
    `math` module makes conversion a snap of the fingers. If the conversion of degrees
    results in a negative number, most of the time we will want to add that number
    to 360 in order to get a compass bearing, as we did here.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 磁方位角计算默认输出为弧度。然而，Python 的 `math` 模块使得转换变得轻而易举。如果度数的转换结果为负数，大多数情况下我们都会想将这个数加到
    360 上，以得到罗盘方位角，就像我们在这里做的那样。
- en: Loading data from a spreadsheet
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从电子表格加载数据
- en: Spreadsheets are one of the most common methods used to collect and store simple
    geographic data. QGIS can work with text files called CSV or comma-separated values
    files. Any spreadsheet can be converted to a CSV using the spreadsheet program.
    As long as the CSV data has a column representing *x* values, one column representing
    *y* values, and other columns representing data with the first row containing
    field names, QGIS can import it. Many organizations distribute geographic information
    as a CSV, so sooner or later you will find yourself importing a CSV. Moreover,
    PyQGIS let's you do it programmatically. Note that a CSV can be delimited by any
    character as long as it is consistent. Also, the file extension of the CSV file
    doesn't matter as long as you specify the file type for QGIS.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格是收集和存储简单地理数据最常用的方法之一。QGIS 可以处理称为 CSV 或逗号分隔值文件的文本文件。任何电子表格都可以使用电子表格程序转换为
    CSV。只要 CSV 数据有一个表示 *x* 值的列，一个表示 *y* 值的列，以及其他包含第一行字段名的数据列，QGIS 就可以导入它。许多组织以 CSV
    的形式分发地理信息，所以迟早您会发现自己正在导入 CSV。此外，PyQGIS 允许您以编程方式完成此操作。请注意，只要一致，CSV 可以由任何字符分隔。此外，CSV
    文件的文件扩展名并不重要，只要您为 QGIS 指定文件类型即可。
- en: Getting ready
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use a sample CSV file with point features representing points of interest
    in a region. You can download this sample from [https://geospatialpython.googlecode.com/svn/MS_Features.txt](https://geospatialpython.googlecode.com/svn/MS_Features.txt).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个包含点特征的样本 CSV 文件，这些特征代表一个区域内感兴趣点的位置。您可以从 [https://geospatialpython.googlecode.com/svn/MS_Features.txt](https://geospatialpython.googlecode.com/svn/MS_Features.txt)
    下载此样本。
- en: Save this to your `qgis_data/ms` directory in your root or home directory.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存到您的根目录或主目录下的 `qgis_data/ms` 目录中。
- en: How to do it...
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will build a `URI` string to load the CSV as a vector layer. All of the
    parameters used to describe the structure of the CSV are included in the URI,
    as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个用于将 CSV 作为矢量图层加载的 `URI` 字符串。描述 CSV 结构的所有参数都包含在以下 URI 中：
- en: 'First, we build the base `URI` string with the filename:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们构建包含文件名的基本 `URI` 字符串：
- en: '[PRE100]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Next, we tell QGIS that the file is a CSV file:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们告诉 QGIS 该文件是 CSV 文件：
- en: '[PRE101]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Now, we specify our delimiter, which is a pipe (**"|"**), as a URL-encoded
    value:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们指定我们的分隔符，它是一个管道（**"|"**），作为一个 URL 编码值：
- en: '[PRE102]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Next, we tell QGIS to trim any spaces at the ends of the fields:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们告诉 QGIS 去除字段两端的任何空格：
- en: '[PRE103]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Now, the most important part, we specify the x field:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，最重要的部分，我们指定 x 字段：
- en: '[PRE104]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Then, we specify the y field:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们指定 y 字段：
- en: '[PRE105]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We decline the spatial index option:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们拒绝空间索引选项：
- en: '[PRE106]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'We decline the subset option:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们拒绝子集选项：
- en: '[PRE107]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'We tell QGIS not to watch the file for changes:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们告诉 QGIS 不要监视文件变化：
- en: '[PRE108]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Finally, we complete the `uri` with the CRS of the layer:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用图层的坐标参考系统（CRS）完成 `uri`：
- en: '[PRE109]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'We load the layer using the `delimitedtext` data provider:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `delimitedtext` 数据提供者加载图层：
- en: '[PRE110]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Finally, we add it to the map:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将它添加到地图上：
- en: '[PRE111]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Verify that your map looks similar to the map shown in the following screenshot:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 确认您的地图看起来与以下截图中的地图相似：
- en: '![How to do it...](img/00021.jpeg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00021.jpeg)'
- en: How it works...
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The URI is quite extensive, but necessary to give QGIS enough information to
    properly load the layer. We used strings in this simple example, but using the
    `QUrl` object is safer, as it handles the encoding for you. The documentation
    for the `QUrl` class is in the `Qt` documentation at [http://qt-project.org/doc/qt-4.8/qurl.html](http://qt-project.org/doc/qt-4.8/qurl.html).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: URI 非常详细，但这是必要的，以便 QGIS 获取足够的信息来正确加载图层。在这个简单的例子中，我们使用了字符串，但使用 `QUrl` 对象更安全，因为它为您处理编码。`QUrl`
    类的文档在 `Qt` 文档中，网址为 [http://qt-project.org/doc/qt-4.8/qurl.html](http://qt-project.org/doc/qt-4.8/qurl.html)。
- en: Note that in the URI, we tell QGIS that the type is **CSV**, but when we load
    the layer, the type is **delimitedtext**. QGIS will ignore empty fields as long
    as all of the columns are balanced.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 URI 中，我们告诉 QGIS 类型是 **CSV**，但当我们加载图层时，类型是 **delimitedtext**。只要所有列都平衡，QGIS
    会忽略空字段。
- en: There's more...
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you're having trouble loading a layer, you can use the **QGIS Add Delimited
    Text Layer…** dialog under the **Layer** menu to figure out the correct parameters.
    Once the layer is loaded, you can take a look at its metadata to see the URI QGIS
    constructed to load it. You can also get the correct parameters from a loaded,
    delimited text layer using the `layer.source()` method programmatically. And,
    of course, both of these methods work with any type of layer, not just delimited
    text. Unlike other layer types, however, you cannot edit delimited text layers
    in QGIS.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在加载图层时遇到困难，可以使用**QGIS添加分隔文本图层…**对话框，在**图层**菜单下找出正确的参数。一旦图层加载成功，你可以查看其元数据以了解QGIS构建的用于加载它的URI。你也可以通过使用`layer.source()`方法程序化地从已加载的分隔文本图层中获取正确的参数。当然，这两种方法都适用于任何类型的图层，而不仅仅是分隔文本图层。然而，与其他图层类型不同，你无法在QGIS中编辑分隔文本图层。
