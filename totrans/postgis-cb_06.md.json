["```py\nALTER ROLE me SET search_path TO chp06,public;\n```", "```py\nCREATE EXTENSION postgis;\nCREATE EXTENSION pgrouting;\n```", "```py\nCREATE TABLE chp06.edge_table (\n id BIGSERIAL,\n dir character varying,\n source BIGINT,\n target BIGINT,\n cost FLOAT,\n reverse_cost FLOAT,\n capacity BIGINT,\n reverse_capacity BIGINT,\n category_id INTEGER,\n reverse_category_id INTEGER,\n x1 FLOAT,\n y1 FLOAT,\n x2 FLOAT,\n y2 FLOAT,\n the_geom geometry\n);\n```", "```py\nSELECT pgr_createTopology('chp06.edge_table',0.001);\n```", "```py\nSELECT * FROM pgr_dijkstra(\n  'SELECT id, source, target, cost\n  FROM chp06.edge_table_vertices_pgr', 2, 9,\n); \n```", "```py\nWITH dijkstra AS (\n SELECT pgr_dijkstra(\n 'SELECT id, source, target, cost, x1, x2, y1, y2\n FROM chp06.edge_table', 2, 9\n )\n)\nSELECT id, ST_AsText(the_geom)\nFROM chp06.edge_table et, dijkstra d\nWHERE et.id = (d.pgr_dijkstra).edge;\n```", "```py\nosm2pgrouting --file cleveland.osm --conf /usr/share/osm2pgrouting/mapconfig.xml --dbname postgis_cookbook --user me --schema chp06 --host localhost --prefix cleveland_ --clean\n```", "```py\nWITH astar AS (\n  SELECT * FROM pgr_astar(\n    'SELECT gid AS id, source, target,\n    length AS cost, x1, y1, x2, y2 \n     FROM chp06.cleveland_ways', 89475, 14584, false\n  ) \n) \nSELECT gid, the_geom\nFROM chp06.cleveland_ways w, astar a\nWHERE w.gid = a.edge;\n```", "```py\nSELECT * FROM pgr_drivingDistance(\n 'SELECT id, source, target, cost FROM chp06.edge_table',\n 2, 3\n);\n```", "```py\nWITH DD AS (\n  SELECT * FROM pgr_drivingDistance(\n    'SELECT id, source, target, cost \n    FROM chp06.edge_table', 2, 3\n  )\n)\n\nSELECT ST_AsText(the_geom)\nFROM chp06.edge_table_vertices_pgr w, DD d\nWHERE w.id = d.node; \n```", "```py\nWITH DD AS (\n  SELECT * FROM pgr_drivingDistance(\n    'SELECT id, source, target, cost FROM chp06.edge_table',\n     2, 3\n  )\n)\nSELECT id::integer, ST_X(the_geom)::float AS x, ST_Y(the_geom)::float AS y \nFROM chp06.edge_table_vertices_pgr w, DD d\nWHERE w.id = d.node;\n```", "```py\nWITH alphashape AS (\n  SELECT pgr_alphaShape('\n    WITH DD AS (\n    SELECT * FROM pgr_drivingDistance(\n       ''SELECT id, source, target, cost \n    FROM chp06.edge_table'', 2, 3\n      )\n    ),\n    dd_points AS(\n    SELECT id::integer, ST_X(the_geom)::float AS x, \n      ST_Y(the_geom)::float AS y\n      FROM chp06.edge_table_vertices_pgr w, DD d\n      WHERE w.id = d.node\n    )\n    SELECT * FROM dd_points\n  ')\n),  \n```", "```py\nalphapoints AS (\n  SELECT ST_MakePoint((pgr_alphashape).x, (pgr_alphashape).y) FROM alphashape\n),\n```", "```py\nalphaline AS (\n  SELECT ST_Makeline(ST_MakePoint) FROM alphapoints\n)\nSELECT ST_MakePolygon(ST_AddPoint(ST_Makeline, ST_StartPoint(ST_Makeline))) FROM alphaline;\n```", "```py\nWITH alphashape AS (\n SELECT pgr_alphaShape('\n WITH DD AS (\n SELECT * FROM pgr_drivingDistance(\n ''SELECT id, source, target, cost\n FROM chp06.edge_table'', 2, 3\n )\n ),\n dd_points AS(\n SELECT id::integer, ST_X(the_geom)::float AS x,\n ST_Y(the_geom)::float AS y\n FROM chp06.edge_table_vertices_pgr w, DD d\n WHERE w.id = d.node\n )\n SELECT * FROM dd_points\n ')\n),\nalphapoints AS (\n SELECT ST_MakePoint((pgr_alphashape).x,\n (pgr_alphashape).y)\n FROM alphashape\n),\nalphaline AS (\n SELECT ST_Makeline(ST_MakePoint) FROM alphapoints\n)\nSELECT ST_MakePolygon(\n ST_AddPoint(ST_Makeline, ST_StartPoint(ST_Makeline))\n)\nFROM alphaline;\n```", "```py\nCREATE OR REPLACE FUNCTION chp02.proportional_sum(geometry, geometry, numeric)\nRETURNS numeric AS\n$BODY$\nSELECT $3 * areacalc FROM\n(\n  SELECT (ST_Area(ST_Intersection($1, $2))/ST_Area($2))::numeric AS areacalc\n) AS areac\n;\n$BODY$\nLANGUAGE sql VOLATILE;\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom census chp06.census | psql -U me -d postgis_cookbook -h localhost\n```", "```py\nCREATE TABLE chp06.zoo_bikezone AS (\n  WITH alphashape AS (\n    SELECT pgr_alphaShape('\n      WITH DD AS (\n    SELECT * FROM pgr_drivingDistance(\n          ''SELECT gid AS id, source, target, reverse_cost \n          AS cost FROM chp06.cleveland_ways'',\n          24746, 0.05, false\n        )\n      ),\n      dd_points AS(\n        SELECT id::int4, ST_X(the_geom)::float8 as x, \n          ST_Y(the_geom)::float8 AS y\n        FROM chp06.cleveland_ways_vertices_pgr w, DD d\n        WHERE w.id = d.node\n      )\n      SELECT * FROM dd_points\n    ')\n  ),\n  alphapoints AS (\n    SELECT ST_MakePoint((pgr_alphashape).x, (pgr_alphashape).y) \n    FROM alphashape\n  ),\n  alphaline AS (\n    SELECT ST_Makeline(ST_MakePoint) FROM alphapoints\n  )\n  SELECT 1 as id, ST_SetSRID(ST_MakePolygon(ST_AddPoint(ST_Makeline, ST_StartPoint(ST_Makeline))), 4326) AS the_geom FROM alphaline\n);  \n```", "```py\nSELECT ROUND(SUM(chp02.proportional_sum(\n  ST_Transform(a.the_geom,3734), b.the_geom, b.pop))) AS population \nFROM Chp06.zoo_bikezone AS a, chp06.census as b\nWHERE ST_Intersects(ST_Transform(a.the_geom, 3734), b.the_geom)\nGROUP BY a.id;\n```", "```py\n(1 row)\n```", "```py\nSELECT ROUND(SUM(chp02.proportional_sum(\n  ST_Transform(a.the_geom,3734), b.the_geom, b.pop))) AS population \n FROM (SELECT 1 AS id, ST_Buffer(ST_Transform(the_geom, 3734), 17000) \n    AS the_geom \n FROM chp06.cleveland_ways_vertices_pgr WHERE id = 24746\n) AS a,  chp06.census as b\nWHERE ST_Intersects(ST_Transform(a.the_geom, 3734), b.the_geom)\nGROUP BY a.id;\n```", "```py\n(1 row)\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom ebrr_polygon chp06.voronoi_hydro | psql -U me -d postgis_cookbook\n```", "```py\nCREATE TABLE chp06.voronoi_points AS(\n  SELECT (ST_DumpPoints(ST_Segmentize(the_geom, 5))).geom AS the_geom \n    FROM chp06.voronoi_hydro\n  UNION ALL\n  SELECT (ST_DumpPoints(ST_Extent(the_geom))).geom AS the_geom \n    FROM chp06.voronoi_hydro\n)\n```", "```py\nCREATE TABLE chp06.voronoi AS(\n  SELECT (ST_Dump(\n    ST_SetSRID(\n      ST_VoronoiPolygons(points.the_geom),\n      3734))).geom as the_geom\nFROM (SELECT ST_Collect(ST_SetSRID(the_geom, 3734)) as the_geom FROM chp06.voronoi_points) as points);\n```", "```py\nCREATE INDEX chp06_voronoi_geom_gist\nON chp06.voronoi\nUSING gist(the_geom);\n\nDROP TABLE IF EXISTS voronoi_intersect;\n\nCREATE TABLE chp06.voronoi_intersect AS WITH vintersect AS (\n  SELECT ST_Intersection(ST_SetSRID(ST_MakeValid(a.the_geom), 3734), \n  ST_MakeValid(b.the_geom)) AS the_geom \n  FROM Chp06.voronoi a, chp06.voronoi_hydro b\n  WHERE ST_Intersects(ST_SetSRID(a.the_geom, 3734), b.the_geom)\n),\nlinework AS (\n  SELECT chp02.polygon_to_line(the_geom) AS the_geom \n  FROM vintersect\n),\npolylines AS (\n  SELECT ((ST_Dump(ST_Union(lw.the_geom))).geom)\n    ::geometry(linestring, 3734) AS the_geom \n  FROM linework AS lw\n),\nexternalbounds AS (\n  SELECT chp02.polygon_to_line(the_geom) AS the_geom \n  FROM voronoi_hydro\n)\n\nSELECT (ST_Dump(ST_Union(p.the_geom))).geom \n  FROM polylines p, externalbounds b \n  WHERE NOT ST_DWithin(p.the_geom, b.the_geom, 5);\n```", "```py\nALTER TABLE chp06.voronoi_intersect ADD COLUMN gid serial;\nALTER TABLE chp06.voronoi_intersect ADD PRIMARY KEY (gid);\n\nALTER TABLE chp06.voronoi_intersect ADD COLUMN source integer;\nALTER TABLE chp06.voronoi_intersect ADD COLUMN target integer;\n```", "```py\nSELECT pgr_createTopology('voronoi_intersect', 0.001, 'the_geom', 'gid', 'source', 'target', 'true');\n\nCREATE INDEX source_idx ON chp06.voronoi_intersect(\"source\");\nCREATE INDEX target_idx ON chp06.voronoi_intersect(\"target\");\n\nALTER TABLE chp06.voronoi_intersect ADD COLUMN length double precision;\nUPDATE chp06.voronoi_intersect SET length = ST_Length(the_geom);\n\nALTER TABLE chp06.voronoi_intersect ADD COLUMN reverse_cost double precision;\nUPDATE chp06.voronoi_intersect SET reverse_cost = length;\n```", "```py\nCREATE TABLE chp06.voronoi_route AS\nWITH dijkstra AS (\n  SELECT * FROM pgr_dijkstra('SELECT gid AS id, source, target, length \n    AS cost FROM chp06.voronoi_intersect', 10851, 3, false)\n)\n\nSELECT gid, geom\nFROM voronoi_intersect et, dijkstra d\nWHERE et.gid = d.edge;\n```"]