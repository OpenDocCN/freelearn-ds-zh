["```py\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import *\n    from qgis.analysis import *\n\n    ```", "```py\n    rasterName = \"farm\"\n    raster = QgsRasterLayer(\"/Users/joellawhead/qgis_data/\\\n    rasters/farm-field.tif\", rasterName)\n\n    ```", "```py\n    ir = QgsRasterCalculatorEntry()\n    r = QgsRasterCalculatorEntry()\n\n    ```", "```py\n    ir.raster = raster\n    r.raster = raster\n\n    ```", "```py\n    ir.bandNumber = 2\n    r.bandNumber = 1\n\n    ```", "```py\n    ir.ref = rasterName + \"@2\"\n    r.ref = rasterName + \"@1\"\n\n    ```", "```py\n    references = (ir.ref, r.ref, ir.ref, r.ref)\n    exp = \"1.0 * (%s - %s) / 1.0 + (%s + %s)\" % references\n\n    ```", "```py\n    output = \"/Users/joellawhead/qgis_data/rasters/ndvi.tif\"\n\n    ```", "```py\n    e = raster.extent()\n    w = raster.width()\n    h = raster.height()\n    entries = [ir,r]\n\n    ```", "```py\n    ndvi =  QgsRasterCalculator(exp, output, \"GTiff\", e, w, h, entries)\n    ndvi.processCalculation()\n\n    ```", "```py\n    lyr = QgsRasterLayer(output, \"NDVI\")\n\n    ```", "```py\n    algorithm = QgsContrastEnhancement.StretchToMinimumMaximum\n    limits = QgsRaster.ContrastEnhancementMinMax\n    lyr.setContrastEnhancement(algorithm, limits)\n\n    ```", "```py\n    s = QgsRasterShader()\n    c = QgsColorRampShader()\n    c.setColorRampType(QgsColorRampShader.INTERPOLATED)\n\n    ```", "```py\n    i = []\n    qri = QgsColorRampShader.ColorRampItem\n    i.append(qri(0, QColor(0,0,0,0), 'NODATA')) \n    i.append(qri(214, QColor(120,69,25,255), 'Lowest Biomass'))\n    i.append(qri(236, QColor(255,178,74,255), 'Lower Biomass'))\n    i.append(qri(258, QColor(255,237,166,255), 'Low Biomass'))\n    i.append(qri(280, QColor(173,232,94,255), 'Moderate Biomass'))\n    i.append(qri(303, QColor(135,181,64,255), 'High Biomass'))\n    i.append(qri(325, QColor(3,156,0,255), 'Higher Biomass'))\n    i.append(qri(400, QColor(1,100,0,255), 'Highest Biomass'))\n\n    ```", "```py\n    c.setColorRampItemList(i)\n    s.setRasterShaderFunction(c)\n    ps = QgsSingleBandPseudoColorRenderer(lyr.dataProvider(), 1, s)\n    lyr.setRenderer(ps)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```", "```py\n    from GeoCoding.geopy.geocoders import Nominatim\n\n    ```", "```py\n    geocoder = Nominatim()\n\n    ```", "```py\n    location = geocoder.geocode(\"The Ugly Pirate, Bay Saint Louis, MS 39520\")\n\n    ```", "```py\n    print location\n\n    ```", "```py\n    (u'The Ugly Pirate, 144, Demontluzin Street, Bay St. Louis, Hancock County, Mississippi, 39520, United States of America', (30.3124059, -89.3281418))\n\n    ```", "```py\n    ##Vector=group\n    ##Input_Raster_Directory=folder\n    ##Output_Footprints_Vector=output vector\n\n    ```", "```py\n    import os\n    from qgis.core import *\n\n    ```", "```py\n    files = os.listdir(Input_Raster_Directory)\n\n    ```", "```py\n    footprints = []\n    crs = \"\"\n\n    ```", "```py\n    for f in files:\n     try:\n     fn = os.path.join(Input_Raster_Directory, f)\n     lyr = QgsRasterLayer(fn, \"Input Raster\")\n     crs = lyr.crs()\n     e = lyr.extent()\n     ulx = e.xMinimum()\n     uly = e.yMaximum()\n     lrx = e.xMaximum()\n     lry = e.yMinimum()\n     ul = (ulx, uly)\n     ur = (lrx, uly)\n     lr = (lrx, lry)\n     ll = (ulx, lry)\n     fp = {}\n     points = []\n     points.append(QgsPoint(*ul))\n     points.append(QgsPoint(*ur))\n     points.append(QgsPoint(*lr)) \n     points.append(QgsPoint(*ll)) \n     points.append(QgsPoint(*ul))\n     fp[\"points\"] = points\n     fp[\"raster\"] = fn\n     footprints.append(fp)\n     except:\n     progress.setInfo(\"Warning: The file %s does not appear to be a \\\n    valid raster file.\" % f)\n\n    ```", "```py\n    vectorLyr =  QgsVectorLayer(\"Polygon?crs=%s&field=raster:string(100)\" \\\n    % crs, \"Footprints\" , \"memory\")\n    vpr = vectorLyr.dataProvider()\n\n    ```", "```py\n    features = []\n    for fp in footprints:\n     poly = QgsGeometry.fromPolygon([fp[\"points\"]])\n     f = QgsFeature()\n     f.setGeometry(poly)\n     f.setAttributes([fp[\"raster\"]])\n     features.append(f)\n    vpr.addFeatures(features)\n    vectorLyr.updateExtents()\n\n    ```", "```py\n    driver = \"Esri Shapefile\"\n    epsg = crs.postgisSrid()\n    srs = \"EPSG:%s\" % epsg\n\n    ```", "```py\n    error = QgsVectorFileWriter.writeAsVectorFormat\\ (vectorLyr, Output_Footprints_Vector, \\\"utf-8\", srs, driver)\n    if error == QgsVectorFileWriter.NoError:\n     pass\n    else:\n     progress.setInfo(\"Unable to output footprints.\")\n\n    ```", "```py\n    from qgis.core import *\n    from qgis.gui import *\n    from qgis.networkanalysis import *\n    from PyQt4.QtCore import *\n\n    ```", "```py\n    network = QgsVectorLayer(\"/Users/joellawhead/qgis_data/shapes/\\Network.shp\", \"Network Layer\", \"ogr\")\n    waypoints = QgsVectorLayer(\"/Users/joellawhead/qgis_data/shapes/\\ NetworkPoints.shp\", \"Waypoints\", \"ogr\")\n\n    ```", "```py\n    director = QgsLineVectorLayerDirector(network, -1, '', '', '', 3)\n    properter = QgsDistanceArcProperter()\n    director.addProperter(properter)\n    crs = network.crs()\n\n    ```", "```py\n    builder = QgsGraphBuilder(crs)\n\n    ```", "```py\n    ptStart = QgsPoint(-0.8095638694, -0.1578175511)\n    ptStop = QgsPoint(0.8907435677, 0.4430834924)\n\n    ```", "```py\n    tiePoints = director.makeGraph(builder, [ptStart, ptStop])\n\n    ```", "```py\n    graph = builder.graph()\n\n    ```", "```py\n    tStart = tiePoints[0]\n    tStop = tiePoints[1]\n    idStart = graph.findVertex(tStart)\n    idStop = graph.findVertex(tStop)\n\n    ```", "```py\n    (tree, cost) = QgsGraphAnalyzer.dijkstra(graph, idStart, 0)\n\n    ```", "```py\n    p = []\n    curPos = idStop\n    while curPos != idStart:\n    p.append(graph.vertex(graph.arc(tree[curPos]).inVertex()).point())\n    curPos = graph.arc(tree[curPos]).outVertex()\n    p.append(tStart)\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([network,waypoints])\n    rb = QgsRubberBand(iface.mapCanvas())\n    rb.setColor(Qt.red)\n\n    ```", "```py\n    for pnt in p:\n     rb.addPoint(pnt)\n\n    ```", "```py\n    import qgis.utils\n    from GeoSearch import geosearchdialog, GoogleMapsApi\n\n    ```", "```py\n    openLyrs = qgis.utils.plugins['openlayers_plugin']\n\n    ```", "```py\n    g = geosearchdialog.GeoSearchDialog(iface)\n    g.SearchRoute([])\n\n    ```", "```py\n    d = GoogleMapsApi.directions.Directions()\n\n    ```", "```py\n    origin = \"Boston, MA\"\n    dest = \"2517 Main Rd, Dedham, ME 04429\"\n\n    ```", "```py\n    route = d.GetDirections(origin, dest, mode = \"driving\", \\ waypoints=None, avoid=None, units=\"imperial\")\n\n    ```", "```py\n    layerType = openLyrs._olLayerTypeRegistry.getById(4)\n    openLyrs.addLayer(layerType)\n\n    ```", "```py\n    g.CreateVectorLayerGeoSearch_Route(route)\n\n    ```", "```py\n    import urllib\n    import urllib2\n    import time\n\n    ```", "```py\n    url = 'http://freenmea.net/api/emitnmea'\n    values = {'types' : 'default'}\n    data = urllib.urlencode(values)\n    req = urllib2.Request(url, data)\n    response = urllib2.urlopen(req)\n    results = response.read().split(\"\\n\")\n\n    ```", "```py\n    wb = \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\"\n    basemap = QgsVectorLayer(wb, \"Countries\", \"ogr\")\n    qmr = QgsMapLayerRegistry.instance()\n    qmr.addMapLayer(basemap)\n\n    ```", "```py\n    vectorLyr = QgsVectorLayer('Point?crs=epsg:4326', \\'GPS Point' , \"memory\")\n    vpr = vectorLyr.dataProvider()\n\n    ```", "```py\n    cLat = None\n    cLon = None\n    canvas = iface.mapCanvas()\n\n    ```", "```py\n    c = QgsNMEAConnection(None)\n\n    ```", "```py\n    firstPt = True\n\n    ```", "```py\n    for r in results:\n     l = len(r)\n     if \"GGA\" in r:\n     c.processGGASentence(r,l)\n     elif \"RMC\" in r:\n     c.processRMCSentence(r,l)\n     elif \"GSV\" in r:\n     c.processGSVSentence(r,l)\n     elif \"VTG\" in r:\n     c.processVTGSentence(r,l)\n     elif \"GSA\" in r:\n     c.processGSASentence(r,l)\n\n    ```", "```py\n     i=c.currentGPSInformation()\n\n    ```", "```py\n     if i.latitude and i.longitude:\n     lat = i.latitude\n     lon = i.longitude\n     if lat==cLat and lon==cLon:\n     continue\n     cLat = lat\n     cLon = lon\n     pnt = QgsGeometry.fromPoint(QgsPoint(lon,lat))\n\n    ```", "```py\n     if firstPt:\n     firstPt = False\n     f = QgsFeature()\n     f.setGeometry(pnt)\n     vpr.addFeatures([f])\n     qmr.addMapLayer(vectorLyr)\n     else:\n     print lon, lat\n     vectorLyr.startEditing()\n     vectorLyr.changeGeometry(1,pnt)\n     vectorLyr.commitChanges()\n\n    ```", "```py\n     vectorLyr.setCacheImage(None)\n     vectorLyr.updateExtents()\n     vectorLyr.triggerRepaint()\n     time.sleep(1)\n\n    ```", "```py\nsudo easy_install PyPDF2\n\n```", "```py\neasy_install PyPDF2\n\n```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    from qgis.core import *\n    import PyPDF2\n    import os\n\n    ```", "```py\n    filenames = []\n    mapbook = \"/Users/joellawhead/qgis_data/atlas/mapbook.pdf\"\n    coverage = \"/Users/joellawhead/qgis_data/shapes/countries.shp\"\n    atlasPattern = \"/Users/joellawhead/qgis_data/atlas/output_\"\n\n    ```", "```py\n    vlyr = QgsVectorLayer(coverage, \"Countries\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayer(vlyr)\n\n    ```", "```py\n    mr = QgsMapRenderer()\n    mr.setLayerSet([vlyr.id()])\n    mr.setProjectionsEnabled(True)\n    mr.setMapUnits(QGis.DecimalDegrees)\n    crs = QgsCoordinateReferenceSystem()\n    crs.createFromSrid(4326)\n    mr.setDestinationCrs(crs)\n\n    ```", "```py\n    c = QgsComposition(mr)\n    c.setPaperSize(297, 210)\n\n    ```", "```py\n    gray = {\"color\": \"155,155,155\"}\n    mapSym = QgsFillSymbolV2.createSimple(gray)\n    renderer = QgsSingleSymbolRendererV2(mapSym)\n    vlyr.setRendererV2(renderer)\n\n    ```", "```py\n    atlasMap = QgsComposerMap(c, 20, 20, 130, 130)\n    atlasMap.setFrameEnabled(True)\n    c.addComposerMap(atlasMap)\n\n    ```", "```py\n    atlas = c.atlasComposition()\n    atlas.setCoverageLayer(vlyr)\n    atlas.setHideCoverage(False)\n    atlas.setEnabled(True)\n    c.setAtlasMode(QgsComposition.ExportAtlas)\n\n    ```", "```py\n    ov = QgsComposerMap(c, 180, 20, 50, 50)\n    ov.setFrameEnabled(True)\n    ov.setOverviewFrameMap(atlasMap.id())\n    c.addComposerMap(ov)\n    rect = QgsRectangle(vlyr.extent())\n    ov.setNewExtent(rect)\n\n    ```", "```py\n    yellow = {\"color\": \"255,255,0,255\"}\n    ovSym = QgsFillSymbolV2.createSimple(yellow)\n    ov.setOverviewFrameMapSymbol(ovSym)\n\n    ```", "```py\n    lbl = QgsComposerLabel(c)\n    c.addComposerLabel(lbl)\n    lbl.setText('[% \"CNTRY_NAME\" %]')\n    lbl.setFont(QgsFontUtils.getStandardTestFont())\n    lbl.adjustSizeToText()\n    lbl.setSceneRect(QRectF(150, 5, 60, 15))\n\n    ```", "```py\n    atlasMap.setAtlasDriven(True)\n    atlasMap.setAtlasScalingMode(QgsComposerMap.Auto)\n    atlasMap.setAtlasMargin(0.10)\n\n    ```", "```py\n    atlas.setFilenamePattern(\"'%s' || $feature\" % atlasPattern)\n    atlas.beginRender()\n    for i in range(0, atlas.numFeatures()):\n     atlas.prepareForFeature(i)\n     filename = atlas.currentFilename() + \".pdf\"\n     print \"Writing file %s\" % filename\n     filenames.append(filename)\n     c.exportAsPDF(filename)\n    atlas.endRender()\n\n    ```", "```py\n    output = PyPDF2.PdfFileWriter()\n    for f in filenames:\n     pdf = open(f, \"rb\")\n     page = PyPDF2.PdfFileReader(pdf)\n     output.addPage(page.getPage(0))\n     os.remove(f)\n    print \"Writing final mapbook...\"\n    book = open(mapbook, \"wb\")\n    output.write(book)\n    with open(mapbook, 'wb') as book:\n     output.write(book)\n\n    ```", "```py\n    import processing\n\n    ```", "```py\n    path = \"/Users/joellawhead/qgis_data/rasters\"/\"\n    dem = path + \"dem.asc\"\n    start = path + \"start-point.shp\"\n    finish = path + \"end-point.shp\"\n\n    ```", "```py\n    demLyr = QgsRasterLayer(dem, \"DEM\")\n    ext = demLyr.extent()\n    xmin = ext.xMinimum()\n    ymin = ext.yMinimum()\n    xmax = ext.xMaximum()\n    ymax = ext.xMaximum()\n    box = \"%s,%s,%s,%s\" % (xmin,xmax,ymin,ymax)\n\n    ```", "```py\n    a = QgsVectorLayer(start, \"Start\", \"ogr\")\n    b = QgsVectorLayer(finish, \"End\", \"ogr\")\n\n    ```", "```py\n    tmpCost = processing.runalg(\"grass:r.cost\",dem,a,b,\\\n    False,False,box,0,-1,0.0001,None)\n    cost = tmpCost[\"output\"]\n\n    ```", "```py\n    tmpMerge = processing.runalg(\"saga:mergeshapeslayers\",\\start,finish,None)\n    merge = tmpMerge[\"OUT\"]\n\n    ```", "```py\n    vLyr = QgsVectorLayer(merge, \"Destination Points\", \"ogr\")\n    rLyr = QgsRasterLayer(cost, \"Accumulated Cost\")\n    line = path + \"path.shp\"\n\n    ```", "```py\n    results = processing.runalg(\"saga:leastcostpaths\",\\lyr,rLyr,demLyr,None,line)\n\n    ```", "```py\n    path = QgsVectorLayer(line, \"Least Cost Path\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayers([demLyr, \\ vLyr, path])\n\n    ```", "```py\n    from mmqgis import mmqgis_library as mmqgis\n\n    ```", "```py\n    srcPath = \"/qgis_data/ufo/ufo-sightings.shp\"\n    dstPath = \"/qgis_data/ufo/major-cities.shp\"\n    usPth = \"/qgis_data/ufo/continental-us.shp\"\n    output = \"/qgis_data/ufo/alien_invasion.shp\"\n    srcName = \"UFO Sightings\"\n    dstName = \"Major Cities\"\n    usName = \"Continental US\"\n    source = QgsVector(srcPath, srcName, \"ogr\")\n    dest = QgsVector(dstPath, dstName, \"ogr\")\n    us = QgsVector(usPath, usName, \"ogr\")\n\n    ```", "```py\n    mmqgis.mmqgis_hub_distance(iface, srcName, dstName, \\\"NAME\", \"Miles\", True, output, True)\n\n    ```", "```py\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n    import processing\n\n    ```", "```py\n    countries = \"https://raw.githubusercontent.com/johan/\\world.geo.json/master/countries.geo.json\"\n    quakes = \"https://geospatialpython.googlecode.com/\\svn/quakes2014.geojson\"\n    output = \"/Users/joellawhead/qgis_data/rasters/heat.tif\"\n\n    ```", "```py\n    basemap = QgsVectorLayer(countries, \"World\", \"ogr\")\n    quakeLyr = QgsVectorLayer(quakes, \"Earthquakes\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayers([quakeLyr, basemap])\n\n    ```", "```py\n    ext = quakeLyr.extent()\n    xmin = ext.xMinimum()\n    ymin = ext.yMinimum()\n    xmax = ext.xMaximum()\n    ymax = ext.xMaximum()\n    box = \"%s,%s,%s,%s\" % (xmin,xmax,ymin,ymax)\n\n    ```", "```py\n    processing.runalg(\"saga:kerneldensityestimation\",quakeLyr,\"mag\",10,0,0,box,1,output)\n\n    ```", "```py\n    heat = QgsRasterLayer(output, \"Earthquake Heatmap\")\n\n    ```", "```py\n    algorithm = QgsContrastEnhancement.StretchToMinimumMaximum\n    limits = QgsRaster.ContrastEnhancementMinMax\n    heat.setContrastEnhancement(algorithm, limits)\n    s = QgsRasterShader() \n    c = QgsColorRampShader() \n    c.setColorRampType(QgsColorRampShader.INTERPOLATED) \n    i = [] \n    qri = QgsColorRampShader.ColorRampItem\n    i.append(qri(0, QColor(255,255,178,255), \\\n    'Lowest Earthquake Impact')) \n    i.append(qri(0.106023, QColor(254,204,92,255), \\\n    'Lower Earthquake Impact')) \n    i.append(qri(0.212045, QColor(253,141,60,255), \\\n    'Moderate Earthquake Impact')) \n    i.append(qri(0.318068, QColor(240,59,32,255), \\\n    'Higher Earthquake Impact'))\n    i.append(qri(0.42409, QColor(189,0,38,255), \\\n    'Highest Earthquake Impact')) \n    c.setColorRampItemList(i) \n    s.setRasterShaderFunction(c) \n    ps = QgsSingleBandPseudoColorRenderer(heat.dataProvider(),\\ 1,  s) \n    heat.setRenderer(ps) \n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayers([heat])\n\n    ```", "```py\n    import random\n\n    ```", "```py\n    src = \"/Users/joellawhead/qgis_data/census/\\\n    GIS_CensusTract_poly.shp\"\n    tractLyr = QgsVectorLayer(src, \"Census Tracts\", \"ogr\")\n\n    ```", "```py\n    popLyr =  QgsVectorLayer('Point?crs=epsg:4326', \"Population\" , \"memory\")\n\n    ```", "```py\n    i = tractLyr.fieldNameIndex('POPULAT11')\n\n    ```", "```py\n    features = tractLyr.getFeatures()\n\n    ```", "```py\n    vpr = popLyr.dataProvider()\n\n    ```", "```py\n    dotFeatures = []\n\n    ```", "```py\n    for feature in features:\n     pop = feature.attributes()[i]\n     density = pop / 100\n     found = 0\n     dots = []\n     g = feature.geometry()\n     minx =  g.boundingBox().xMinimum()\n     miny =  g.boundingBox().yMinimum()\n     maxx =  g.boundingBox().xMaximum()\n     maxy =  g.boundingBox().yMaximum()\n     while found < density:\n     x = random.uniform(minx,maxx)\n     y = random.uniform(miny,maxy)\n     pnt = QgsPoint(x,y)\n     if g.contains(pnt):\n     dots.append(pnt)\n     found += 1\n     geom = QgsGeometry.fromMultiPoint(dots)\n     f = QgsFeature()\n     f.setGeometry(geom)\n     dotFeatures.append(f)\n\n    ```", "```py\n    vpr.addFeatures(dotFeatures)\n    popLyr.updateExtents()\n    QgsMapLayerRegistry.instance().addMapLayers(\\ [popLyr,tractLyr])\n\n    ```", "```py\n    wb = \"https://raw.githubusercontent.com/johan/\\ world.geo.json/master/countries.geo.json\"\n    basemap = QgsVectorLayer(wb, \"Countries\", \"ogr\")\n    observations = \\\n    QgsVectorLayer(\"http://bit.ly/QGISFieldApp\", \\\n    \"Field Observations\", \"ogr\")\n    QgsMapLayerRegistry.instance().addMapLayers(\\ [basemap, observations])\n\n    ```", "```py\n code for the mobile page on GitHub.com (https://github.com/GeospatialPython/qgis).\n```", "```py\n    from qgis.core import *\n    from PyQt4.QtGui import *\n    import processing\n\n    ```", "```py\n    myCrs = QgsCoordinateReferenceSystem(26910, QgsCoordinateReferenceSystem.EpsgCrsId)\n    iface.mapCanvas().mapRenderer().setDestinationCrs(myCrs)\n    iface.mapCanvas().setMapUnits(QGis.Meters)\n    iface.mapCanvas().refresh()\n\n    ```", "```py\n    src_dir = \"/Users/joellawhead/qgis_data/road/\" \n    dem = os.path.join(src_dir, \"dem.asc\")\n    road = os.path.join(src_dir, \"road.shp\")\n    slope = os.path.join(src_dir, \"slope.tif\")\n    segRoad = os.path.join(src_dir, \"segRoad.shp\")\n    steepness = os.path.join(src_dir, \"steepness.shp\")\n    hillshade = os.path.join(src_dir, \"hillshade.tif\") \n\n    ```", "```py\n    demLyr = QgsRasterLayer(dem, \"DEM\")\n    roadLyr = QgsVectorLayer(road, \"Road\", \"ogr\")\n\n    ```", "```py\n    ext = demLyr.extent()\n    xmin = ext.xMinimum()\n    ymin = ext.yMinimum()\n    xmax = ext.xMaximum()\n    ymax = ext.yMaximum()\n    demBox = \"%s,%s,%s,%s\" % (xmin,xmax,ymin,ymax)\n\n    ```", "```py\n    processing.runalg(\"grass:r.slope\",dem,0,0,1,0,True,\\ demBox,0,slope)\n\n    ```", "```py\n    ext = roadLyr.extent()\n    xmin = ext.xMinimum()\n    ymin = ext.yMinimum()\n    xmax = ext.xMaximum()\n    ymax = ext.yMaximum()\n    roadBox = \"%s,%s,%s,%s\" % (xmin,xmax,ymin,ymax)\n\n    ```", "```py\n    processing.runalg(\"grass:v.split.length\",road,500,\\\n    roadBox,-1,0.0001,0,segRoad)\n\n    ```", "```py\n    slopeLyr = QgsRasterLayer(slope, \"Slope\")\n    segRoadLyr = QgsVectorLayer(segRoad, \\\n    \"Segmented Road\", \"ogr\")\n    QgsMapLayerRegistry\n    .instance().addMapLayers([\\ segRoadLyr,slopeLyr], False)\n\n    ```", "```py\n    processing.runalg(\"saga:addgridvaluestoshapes\",\\ segRoad,slope,0,steepness)\n\n    ```", "```py\n    steepLyr = QgsVectorLayer(steepness, \\ \"Road Gradient\", \"ogr\")\n\n    ```", "```py\n    roadGrade = ( (\"Rolling Hill\", 0.0, 20.0, \"green\"), \n    (\"Steep\", 20.0, 40.0, \"yellow\"),\n    (\"Very Steep\", 40.0, 90.0, \"red\"))\n    ranges = []\n    for label, lower, upper, color in roadGrade:\n     sym = QgsSymbolV2.defaultSymbol(steepLyr.geometryType())\n     sym.setColor(QColor(color))\n     sym.setWidth(3.0)\n     rng = QgsRendererRangeV2(lower, upper, sym, label)\n     ranges.append(rng)\n\n    field = \"slope\"\n    renderer = QgsGraduatedSymbolRendererV2(field, ranges)\n    steepLyr.setRendererV2(renderer)\n\n    ```", "```py\n    processing.runalg(\"saga:analyticalhillshading\",dem,\\\n    0,315,45,4,hillshade)\n    hs = QgsRasterLayer(hillshade, \"Terrain\")\n    QgsMapLayerRegistry.instance().addMapLayers([steepLyr, hs])\n\n    ```", "```py\n    import glob\n    import Image\n    from ExifTags import TAGS\n\n    ```", "```py\n    def exif(img):\n     exif_data = {}\n     try: \n     i = Image.open(img)\n     tags = i._getexif()\n     for tag, value in tags.items():\n     decoded = TAGS.get(tag, tag)\n     exif_data[decoded] = value\n     except:\n     pass\n     return exif_data\n\n    ```", "```py\n    def dms2dd(d, m, s, i):\n     sec = float((m * 60) + s)\n     dec = float(sec / 3600)\n     deg = float(d + dec)\n     if i.upper() == 'W':\n     deg = deg * -1\n     elif i.upper() == 'S':\n     deg = deg * -1\n     return float(deg)\n\n    ```", "```py\n    def gps(exif):\n     lat = None\n     lon = None\n     if exif['GPSInfo']: \n     # Lat\n     coords = exif['GPSInfo']\n     i = coords[1]\n     d = coords[2][0][0]\n     m = coords[2][1][0]\n     s = coords[2][2][0]\n     lat = dms2dd(d, m ,s, i)\n     # Lon\n     i = coords[3]\n     d = coords[4][0][0]\n     m = coords[4][1][0]\n     s = coords[4][2][0]\n     lon = dms2dd(d, m ,s, i)\n     return lat, lon\n\n    ```", "```py\n    photos = {}\n    photo_dir = \"/Users/joellawhead/qgis_data/photos/\"\n    files = glob.glob(photo_dir + \"*.jpg\")\n    for f in files:\n     e = exif(f)\n     lat, lon = gps(e)\n     photos[f] = [lon, lat]\n\n    ```", "```py\n    lyr_info = \"Point?crs=epsg:4326&field=photo:string(75)\" \n    vectorLyr =  QgsVectorLayer(lyr_info, \\\"Geotagged Photos\" , \"memory\")\n    vpr = vectorLyr.dataProvider()\n\n    ```", "```py\n    features = []\n    for pth, p in photos.items():\n     lon, lat = p\n     pnt = QgsGeometry.fromPoint(QgsPoint(lon,lat))\n     f = QgsFeature()\n     f.setGeometry(pnt)\n     f.setAttributes([pth])\n     features.append(f)\n    vpr.addFeatures(features)\n    vectorLyr.updateExtents()\n\n    ```", "```py\n    QgsMapLayerRegistry.instance().addMapLayer(vectorLyr)\n    iface.setActiveLayer(vectorLyr)\n    activeLyr = iface.activeLayer()\n\n    ```", "```py\n    actions = activeLyr.actions() \n    actions.addAction(QgsAction.OpenUrl, \"Photos\", \\'[% \"photo\" %]')\n\n    ```", "```py\n    from PyQt4.QtGui import *\n    from PyQt4.QtCore import *\n    from qgis.analysis import *\n\n    ```", "```py\n    before = \"/Users/joellawhead/qgis_data/rasters/change-detection/before.tif\"\n    after = \"/Users/joellawhead/qgis_data/rasters/change-detection/after.tif\"\n    beforeName = \"Before\"\n    afterName = \"After\"\n\n    ```", "```py\n    beforeRaster = QgsRasterLayer(before, beforeName)\n    afterRaster = QgsRasterLayer(after, afterName)\n\n    ```", "```py\n    beforeEntry = QgsRasterCalculatorEntry()\n    afterEntry = QgsRasterCalculatorEntry()\n    beforeEntry.raster = beforeRaster\n    afterEntry.raster = afterRaster\n    beforeEntry.bandNumber = 1\n    afterEntry.bandNumber = 2\n    beforeEntry.ref = beforeName + \"@1\"\n    afterEntry.ref = afterName + \"@2\"\n    entries = [afterEntry, beforeEntry]\n\n    ```", "```py\n    exp = \"%s - %s\" % (afterEntry.ref, beforeEntry.ref)\n\n    ```", "```py\n    output = \"/Users/joellawhead/qgis_data/rasters/change-detection/change.tif\"\n    e = beforeRaster.extent()\n    w = beforeRaster.width()\n    h = beforeRaster.height()\n\n    ```", "```py\n    change = QgsRasterCalculator(exp, output, \"GTiff\", e, w, h, entries)\n    change.processCalculation()\n\n    ```", "```py\n    lyr = QgsRasterLayer(output, \"Change\")\n    algorithm = QgsContrastEnhancement.StretchToMinimumMaximum\n    limits = QgsRaster.ContrastEnhancementMinMax\n    lyr.setContrastEnhancement(algorithm, limits)\n    s = QgsRasterShader() \n    c = QgsColorRampShader() \n    c.setColorRampType(QgsColorRampShader.INTERPOLATED) \n    i = [] \n    qri = QgsColorRampShader.ColorRampItem\n    i.append(qri(0, QColor(0,0,0,0), 'NODATA')) \n    i.append(qri(-101, QColor(123,50,148,255), 'Significant Itensity Decrease')) \n    i.append(qri(-42.2395, QColor(194,165,207,255), 'Minor Itensity Decrease')) \n    i.append(qri(16.649, QColor(247,247,247,0), 'No Change'))\n    i.append(qri(75.5375, QColor(166,219,160,255), 'Minor Itensity Increase')) \n    i.append(qri(135, QColor(0,136,55,255), 'Significant Itensity Increase'))\n    c.setColorRampItemList(i) \n    s.setRasterShaderFunction(c) \n    ps = QgsSingleBandPseudoColorRenderer(lyr.dataProvider(), 1,  s) \n    lyr.setRenderer(ps) \n    QgsMapLayerRegistry.instance().addMapLayer(lyr)\n\n    ```"]