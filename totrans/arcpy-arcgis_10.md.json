["```py\ndef createCSV(data, csvname, mode ='ab'):\n 'creates a csv file'\n import csv\n with open(csvname, mode) as csvfile:\n csvwriter = csv.writer(csvfile, delimiter=',')\n csvwriter.writerow(data)\n del csv\n\n```", "```py\n>>> from common.useful import createCSV>>>\n\n```", "```py\nfrom common.useful import createCSV, formatSQLMultiple\n\n```", "```py\ndef nonIntersect(poly1,poly2):\n 'returns area of non-intersect between two polygons'\n if poly1.overlaps(poly2) == True:\n return poly1.difference(poly2)\n\n```", "```py\ndef nonIntersect(poly1,poly2):\n 'returns area of non-intersect between two polygons'\n if poly1.overlaps(poly2) == True:\n return poly1.difference(poly2)\n else:\n return poly1\n\n```", "```py\ndef generatePoints(fc, pop,constrant, workspace='in_memory'):\n 'generate random points'\n import os, arcpy\n arcpy.CreateRandomPoints_management(workspace, fc,                  constrant, \"\", pop, \"\")\n return os.path.join(workspace, fc)\n\n```", "```py\n# Import the necessary modules\nimport arcpy, os\nfrom common.useful import nonIntersect, generatePoints,createCSV\n\n# Add an overwrite statement\narcpy.env.overwriteOutput = True\n\n# Define the data inputs\nbusStops = r'C:\\Projects\\SanFrancisco.gdb\\SanFrancisco\\Bus_Stops'\nparks = r'C:\\Projects\\SanFrancisco.gdb\\SanFrancisco\\RPD_Parks'\ncensusBlocks = r'C:\\Projects\\SanFrancisco.gdb\\SanFrancisco\\CensusBlocks2010'\ncsvName = r'C:\\Projects\\Output\\Chapter10Analysis.csv'\n\n# Create the spreadsheet in memory and add field headers\nheaders = 'Line Name','Stop ID', 'Total Population Served'\ncreateCSV(headers,csvName,mode='wb')\n\n# Copy the census block data into a feature layer\narcpy.MakeFeatureLayer_management(censusBlocks,'census_lyr')\n\n# Copy the park data geometries into a list and union them allparkGeoms = arcpy.CopyFeatures_management(parks,arcpy.Geometry())\nparkUnion = parkGeoms[0]\nfor park in parkGeoms[1:]:\n parkUnion = parkUnion.union(park)\n\n# Create a search cursor to iterate the bus stop data\nsql = \"NAME = '71 IB' AND BUS_SIGNAG = 'Ferry Plaza'\"\nwith arcpy.da.SearchCursor(busStops, ['NAME','STOPID','SHAPE@'],sql) as cursor:\n for row in cursor:\n\nlineName = row[0]\n stopID = row[1]\n stop = row[2]\n busBuf = stop.buffer(400)\n # Select census blocks that intersect the bus buffer\n arcpy.SelectLayerByLocation_management(\"census_lyr\",\"intersect\", busBuf,'','NEW_SELECTION')\n # Use a second Cursor to find the selected population\n totalPopulation = 0\n with arcpy.da.SearchCursor(\"census_lyr\",['SHAPE@','POP10',\n 'BLOCKID10']) as ncursor:\n for nrow in ncursor:\n block = nrow[0]\n checkedBlock = nonIntersect(block, parkUnion)\n\nblockName = nrow[2]\n population = nrow[1]\n if population != 0:\n points = generatePoints(\"PopPoints\",\n population,checkedBlock)\n pointsGeoms = arcpy.CopyFeatures_management(points,arcpy.Geometry())\n pointsUnion = pointsGeoms[0]\n for point in pointsGeoms[1:]:\n pointsUnion = pointsUnion.union(point)\n pointsInBuffer=busBuf.intersect(pointsUnion, 1)\n intersectedPoints = pointsInBuffer.pointCount\n totalPopulation += intersectedPoints\n # Add the tallied data to the spreadsheet\n\ndata = lineName, stopID, totalPopulation\n print 'data written', data\n createCSV(data, csvName)\n\n#Start the spreadsheet to see the results\nos.startfile(csvName)\n\n```", "```py\nimport arcpy, os\nfrom common.useful import nonIntersect\nfrom common.useful import generatePoints\nfrom common.useful import formatSQLMultiple\nfrom common.useful import nonIntersectcreateCSV\n\n```", "```py\narcpy.env.overwriteOutput = True\n\n```", "```py\nbusStops = r'C:\\PacktDB.gdb\\SanFrancisco\\Bus_Stops'\nparks = r'C:\\PacktDB.gdb\\SanFrancisco\\RPD_Parks'\ncensusBlocks = r'C:\\PacktDB.gdb\\SanFrancisco\\CensusBlocks2010'\ncsvName = r'C:\\Projects\\Output\\Chapter10Analysis.csv'\nheaders = 'Line Name','Stop ID', 'Total Population Served'\ncreateCSV(headers,csvName,mode='wb')\n\n```", "```py\narcpy.MakeFeatureLayer_management(censusBlocks,'census_lyr')parkGeoms = arcpy.CopyFeatures_management(parks,arcpy.Geometry())\nparkUnion = parkGeoms[0]\nfor park in parkGeoms[1:]:\n parkUnion = parkUnion.union(park)\n\n```", "```py\nsql = \"NAME = '71 IB' AND BUS_SIGNAG = 'Ferry Plaza'\"\nwith arcpy.da.SearchCursor(busStops, ['NAME','STOPID','SHAPE@'],sql) as cursor:\n for row in cursor:\n lineName = row[0]\n stopID = row[1]\n stop = row[2]\n busBuf = stop.buffer(400)\n arcpy.SelectLayerByLocation_management(\"census_lyr\",\"intersect,busBuf,'','NEW_SELECTION')\n totalPopulation = 0\n\n```", "```py\nwith arcpy.da.SearchCursor(\"census_lyr\",['SHAPE@','POP10',\n 'BLOCKID10']) as ncursor:\n for nrow in ncursor:\n\nblock = nrow[0]\n checkedBlock = nonIntersect(block, parkUnion)\n blockName = nrow[2]\n population = nrow[1]\n\n```", "```py\nif population != 0:\n points = generatePoints(\"PopPoints\",population,checkedBlock)\n pointsGeoms = arcpy.CopyFeatures_management(points,arcpy.Geometry())\n pointsUnion = pointsGeoms[0]\n for point in pointsGeoms[1:]:\n pointsUnion = pointsUnion.union(point)\n pointsInBuffer = busBuf.intersect(pointsUnion,1)\n intersectedPoints = pointsInBuffer.pointCount\n totalPopulation += intersectedPoints\n\n```", "```py\n data = lineName, stopID,totalPopulation\n print 'data written', data\n createCSV(data, csvName)\nos.startfile(csvName)\n\n```", "```py\ndef generateXLS(indatas, sheetName, fileName):\n import xlwt\n workbook = xlwt.Workbook()\n sheet = workbook.add_sheet(sheetName)\n for YCOUNTER, data in enumerate(indatas):\n for XCOUNTER, value in enumerate(data):\n sheet.write(YCOUNTER, XCOUNTER, value)\n workbook.save(fileName)\n\n```", "```py\nimport arcpy, os\nfrom common.useful import nonIntersect, generatePoints, generateXLS\n\narcpy.env.overwriteOutput = True\n\nbusStops = r'C:\\Projects\\PacktDB.gdb\\SanFrancisco\\Bus_Stops'\nparks = r'C:\\Projects\\PacktDB.gdb\\SanFrancisco\\RPD_Parks'\ncensusBlocks = r'C:\\Projects\\PacktDB.gdb\\SanFrancisco\\CensusBlocks2010'\nxlsName = r'C:\\Projects\\Output\\Chapter10Analysis.xls'\n\nheaders = 'Line Name','Stop ID', 'Total Population Served'\nindatas = [headers]\n\narcpy.MakeFeatureLayer_management(censusBlocks,'census_lyr')parkGeoms = arcpy.CopyFeatures_management(parks,arcpy.Geometry())\nparkUnion = parkGeoms[0]\nfor park in parkGeoms[1:]:\n\nparkUnion = parkUnion.union(park)\n\nsql = \"NAME = '71 IB' AND BUS_SIGNAG = 'Ferry Plaza'\"\nwith arcpy.da.SearchCursor(busStops, ['NAME','STOPID',\n 'SHAPE@'],sql) as cursor:\n for row in cursor:\n lineName = row[0]\n stopID = row[1]\n stop = row[2]\n busBuf = stop.buffer(400)\n arcpy.SelectLayerByLocation_management(\"census_lyr\",\"intersect\",busBuf,'','NEW_SELECTION')\n totalPopulation = 0\n with arcpy.da.SearchCursor(\"census_lyr\", ['SHAPE@','POP10',\n 'BLOCKID10']) as ncursor:\n for nrow in ncursor:\n\nblock = nrow[0]\n checkedBlock = nonIntersect(block, parkUnion)\n blockName = nrow[2]\n population = nrow[1]\n if population != 0:\n points = generatePoints(\"PopPoints\",population,checkedBlock)\n\n pointsGeoms = arcpy.CopyFeatures_management(points,arcpy.Geometry())\n pointsUnion = pointsGeoms[0]\n for point in pointsGeoms[1:]:\n pointsUnion = pointsUnion.union(point)\n pointsInBuffer = busBuf.intersect(pointsUnion,1)\n\nintersectedPoints = pointsInBuffer.pointCount\n totalPopulation += intersectedPoints\n data = lineName, stopID, totalPopulation\n indatas.append(data)\ngenerateXLS(indatas, \"Results\", xlsName)\nos.startfile(xlsName)\n\n```"]