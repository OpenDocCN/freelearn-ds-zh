- en: Chapter 7. Interacting with the User
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 与用户交互
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Using log files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志文件
- en: Creating a simple message dialog
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的消息对话框
- en: Creating a warning dialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个警告对话框
- en: Creating an error dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个错误对话框
- en: Displaying a progress bar
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示进度条
- en: Creating a simple text input dialog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的文本输入对话框
- en: Creating a file input dialog
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个文件输入对话框
- en: Creating a combobox
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个组合框
- en: Creating radio buttons
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建单选按钮
- en: Creating checkboxes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建复选框
- en: Creating tabs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建标签页
- en: Stepping the user through a wizard
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导用户通过向导
- en: Keeping dialogs on top
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持对话框在最前面
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: QGIS has been built using the comprehensive graphical user interface framework
    called Qt. Both QGIS and Qt have Python APIs. In this chapter, we'll learn how
    to interact with the user in order to collect and display information outside
    the default QGIS interface. Qt has excellent documentation of its own, and since
    QGIS is built on top of Qt, all of this documentation applies to QGIS. You can
    find the Qt documentation at [http://qt-project.org](http://qt-project.org).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS是使用名为Qt的综合图形用户界面框架构建的。QGIS和Qt都有Python API。在本章中，我们将学习如何与用户交互，以便在默认QGIS界面之外收集和显示信息。Qt有自己出色的文档，由于QGIS是基于Qt构建的，因此所有这些文档都适用于QGIS。您可以在[http://qt-project.org](http://qt-project.org)找到Qt文档。
- en: Using log files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志文件
- en: Log files provide a way to track exactly what is going on in a Python plugin
    or script, by creating messages that are available even if the script or QGIS
    crashes. These log messages make troubleshooting easier. In this recipe, we'll
    demonstrate two methods used for logging. One method is using actual log files
    on the filesystem, and the other is using the QGIS **Log Messages** window, which
    is available by clicking on the yellow triangle with an exclamation point at the
    bottom-right corner of the QGIS application window, or by selecting **View** menu,
    then clicking on **Panels**, and then checking **Log Messages**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件提供了一种跟踪Python插件或脚本中确切发生情况的方法，即使脚本或QGIS崩溃，这些消息仍然可用。这些日志消息使故障排除变得更容易。在本配方中，我们将演示两种用于日志记录的方法。一种方法是在文件系统上使用实际的日志文件，另一种方法是使用QGIS
    **日志消息**窗口，可以通过点击QGIS应用程序窗口右下角的黄色感叹号三角形或通过选择**视图**菜单，然后点击**面板**，然后勾选**日志消息**来实现。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use log files, we must configure the `QGIS_LOG_FILE` environment variable
    by performing the following steps so that QGIS knows where to write log messages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用日志文件，我们必须通过执行以下步骤来配置`QGIS_LOG_FILE`环境变量，以便QGIS知道在哪里写入日志消息：
- en: From the QGIS **Settings** menu, select **Options**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从QGIS **设置**菜单中选择**选项**。
- en: In the **Options** dialog, select **System** panel.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选项**对话框中，选择**系统**面板。
- en: In the **System** panel, scroll down to the **Environment** section.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**系统**面板中，向下滚动到**环境**部分。
- en: In the **Environment** section, check the **Use custom variables** checkbox.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**环境**部分，勾选**使用自定义变量**复选框。
- en: Click on the **Add** button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: In the **Variable** field, enter `QGIS_LOG_FILE`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**变量**字段中，输入`QGIS_LOG_FILE`。
- en: In the **Value** field, enter `/qgis_data/log.txt` or the path to another directory
    where you have write permissions.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**值**字段中，输入`/qgis_data/log.txt`或您有写权限的另一个目录的路径。
- en: Click on the **OK** button to close the **Options** dialog.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮关闭**选项**对话框。
- en: Restart QGIS for the environment variable to take effect.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动QGIS以使环境变量生效。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will write a message to our custom log file configured in the previous section,
    and then write a message to the tabbed QGIS **Log Messages** window. To do this,
    we need to perform the following steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向之前配置的定制日志文件写入一条消息，然后向标签页式的QGIS **日志消息**窗口写入一条消息。为此，我们需要执行以下步骤：
- en: First, open the **Python Console** in QGIS.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在QGIS中打开**Python控制台**。
- en: 'Next, we''ll write the following log file message:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写以下日志文件消息：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we''ll write a message to the QGIS **Log Messages** window, specifying
    the message as the first argument and a name for the tab in which the message
    will appear:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将向QGIS **日志消息**窗口写入一条消息，指定消息作为第一个参数，以及消息将出现的标签页名称：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, open the log file and check whether the message has appeared.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开日志文件并检查消息是否出现。
- en: Finally, open the QGIS **Log Messages** window, click on the **Python Console**
    tab, and verify that the second log message appears.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开QGIS **日志消息**窗口，点击**Python控制台**标签，并验证第二个日志消息是否出现。
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The traditional log file provides a simple and portable way to record information
    from QGIS using Python. The **Log Messages** window is a more structured way to
    view information from many different sources, with a tabbed interface and a convenient
    timestamp on each message. In most cases, you'll probably want to use the **Log
    Messages** window because QGIS users are familiar with it. However, use it sparingly.
    It's OK to log lots of messages when testing code, but restrict logging for plugins
    or applications to serious errors only. Heavy logging — for example, logging messages
    while looping over every feature in a layer — can slow down QGIS or even cause
    it to crash.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的日志文件提供了使用 Python 从 QGIS 记录信息的简单且便携的方式。**日志消息**窗口是一种更结构化的方式来查看来自许多不同来源的信息，具有标签式界面和每条消息的方便时间戳。在大多数情况下，你可能想使用
    **日志消息**窗口，因为 QGIS 用户对此很熟悉。然而，请谨慎使用。在测试代码时记录大量消息是可以的，但将插件或应用程序的日志记录限制在严重错误上。大量的日志记录——例如，在遍历图层中的每个要素时记录消息——可能会减慢
    QGIS 的速度，甚至导致其崩溃。
- en: Creating a simple message dialog
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的消息对话框
- en: Message dialogs pop up to grab the user's attention and to display important
    information. In this recipe, we'll create a simple information dialog.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 消息对话框弹出以吸引用户的注意力并显示重要信息。在本例中，我们将创建一个简单的信息对话框。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python** **Console** by going to the **Plugins** menu and selecting
    **Python** **Console**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转到 **插件** 菜单并选择 **Python** **控制台** 来打开 QGIS **Python** **控制台**。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will create a message dialog and display some text in it, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个消息对话框并在其中显示一些文本，如下所示：
- en: 'First, we need to import the GUI library:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入 GUI 库：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we''ll create the message dialog:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建消息对话框：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''ll set the message we want to display:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置要显示的消息：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we call the execution method to display the message dialog:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用执行方法来显示消息对话框：
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Note that we are directly using the underlying Qt framework from which QGIS
    is built. QGIS API's objects begin with `Qgs`, while Qt objects begin with just
    the letter `Q`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们直接使用构建 QGIS 的底层 Qt 框架。QGIS API 的对象以 `Qgs` 开头，而 Qt 对象仅以字母 `Q` 开头。
- en: There's more…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: A message dialog box should also be used sparingly because it is a popup that
    can become annoying to the user or can get lost in the array of open windows and
    dialogs on a user's desktop. The preferred method for a QGIS information message
    is to use the `QgsMessageBar() method`, which is well-documented in the PyQGIS
    Developer Cookbook found at [http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 消息对话框也应该谨慎使用，因为它是一个弹出窗口，可能会让用户感到烦恼，或者可能会在用户桌面上的打开窗口和对话框中丢失。QGIS 信息消息的首选方法是使用
    `QgsMessageBar()` 方法，这在位于 [http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html)
    的 PyQGIS 开发者手册中有详细说明。
- en: Creating a warning dialog
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个警告对话框
- en: Sometimes, you need to notify a user when an issue is detected, which might
    lead to problems if the user continues. This situation calls for a warning dialog,
    which we will demonstrate in this recipe.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当检测到问题可能会引起问题，如果用户继续操作，就需要通知用户。这种情况需要警告对话框，我们将在本例中演示。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by going to the **Plugins** menu and selecting
    **Python Console**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转到 **插件** 菜单并选择 **Python 控制台** 来打开 QGIS **Python 控制台**。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will create a dialog, set the warning message and a warning
    icon, and display the dialog, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将创建一个对话框，设置警告信息和警告图标，并显示对话框，如下所示：
- en: 'First, we import the GUI library:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入 GUI 库：
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we initialize the warning dialog:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化警告对话框：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we set the warning message:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置警告信息：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add a warning icon to the dialog that has an enumeration index of `2`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向对话框添加一个具有枚举索引 `2` 的警告图标：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we call the execution method to display the dialog:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用执行方法来显示对话框：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Message dialogs should be used sparingly because they interrupt the user experience
    and can easily become annoying. However, sometimes it is important to prevent
    a user from taking an action that may cause data corruption or a program to crash.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 消息对话框应该谨慎使用，因为它们会打断用户体验，并可能很快变得令人烦恼。然而，有时防止用户执行可能导致数据损坏或程序崩溃的操作是很重要的。
- en: Creating an error dialog
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个错误对话框
- en: You can issue an error dialog box when you need to end a process due to a serious
    error. In this recipe, we'll create an example of an error dialog.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要因为严重错误而结束一个进程时，你可以发出一个错误对话框。在这个菜谱中，我们将创建一个错误对话框的示例。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单然后点击**Python控制台**来打开QGIS的**Python控制台**。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will create a dialog, assign an error message, set an error
    icon, and display the dialog, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个对话框，分配一个错误信息，设置一个错误图标，并显示对话框，如下所示：
- en: 'First, we need to import the GUI library:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入GUI库：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we initialize the dialog:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化对话框：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we set the error message:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置错误信息：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Subsequently, we set an icon number for the error icon:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为错误图标设置一个图标编号：
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we execute the error dialog:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们执行错误对话框：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An important feature of modal windows is that they always stay on top of the
    application, regardless of whether the user changes the window's focus. This feature
    ensures that the user addresses the dialog before they proceed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 模态窗口的一个重要特性是它们总是保持在应用程序的最前面，无论用户是否更改窗口的焦点。这个特性确保用户在继续之前先处理对话框。
- en: Displaying a progress bar
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示进度条
- en: A progress bar is a dynamic dialog that displays the percentage complete bar
    for a running process that the user must wait for before continuing. A progress
    bar is more advanced than a simple dialog because it needs to be updated continuously.
    In this recipe, we'll create a simple progress dialog based on a timer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条是一个动态对话框，显示用户必须等待的运行进程的完成百分比。进度条比简单对话框更高级，因为它需要不断更新。在这个菜谱中，我们将基于计时器创建一个简单的进度对话框。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: No groundwork is required for this recipe.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱不需要做任何准备工作。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for this recipe include creating a custom class based on the `QProgressBar`,
    initializing the dialog and setting its size and title, creating a timer, connecting
    the progress bar to the timer, starting the time, and displaying the progress.
    To do this, we need to perform the following steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的步骤包括基于`QProgressBar`创建一个自定义类，初始化对话框并设置其大小和标题，创建一个计时器，将进度条连接到计时器，开始计时，并显示进度。为此，我们需要执行以下步骤：
- en: 'First, we must import both the GUI and QGIS core libraries:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须导入GUI和QGIS核心库：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we create a custom class for our progress bar, including a method to
    increase the value of the progress bar:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为我们的进度条创建一个自定义类，包括一个用于增加进度条值的`increaseValue`方法：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we set the progress bar:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们设置进度条：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we set the progress bar''s size and title:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置进度条的大小和标题：
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we initialize the timer, which will serve as the process we monitor:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们初始化计时器，它将作为我们监控的进程：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, connect the the timer's `timeout` signal to the `increaseValue` method,
    which we created earlier. Whenever the timer finishes its countdown, it will emit
    the `timeout` signal and notify the `increaseValue` method.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将计时器的`timeout`信号连接到我们之前创建的`increaseValue`方法。每当计时器完成倒计时，它将发出`timeout`信号并通知`increaseValue`方法。
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we will start the timer, specifying an interval of `500` milliseconds.
    The timer will call its `timeout()` signal every 0.5 seconds:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将开始计时器，指定一个500毫秒的间隔。计时器将每0.5秒调用其`timeout()`信号：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we show the progress bar and start the progress meter:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们显示进度条并开始进度计：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The progress bar will stop when its value reaches 100, but our timer will continue
    to run until the `stop()` method is called. In a more realistic implementation,
    you will need a way to determine whether the monitored process is complete. The
    indicator might be the creation of a file, or even better, a signal. The Qt framework
    uses the concept of signals and slots to connect GUI elements. A GUI is event-based,
    with multiple events occurring at different times, including user actions and
    other triggers. The signal/slot system allows you to define reactions to events
    when they occur, without writing code to continuously monitor changes. In this
    recipe, we use the predefined signal from the timer and create our own slot. A
    slot is just a method identified as a slot by passing it to a signal''s `connect()`
    method. The following screenshot shows an example of the progress bar:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当进度条值达到100时，进度条将停止，但我们的计时器将继续运行，直到调用`stop()`方法。在更现实的实现中，你需要一种方法来确定被监控的过程是否完成。指示器可能是文件的创建，或者更好的是，一个信号。Qt框架使用信号和槽的概念来连接GUI元素。GUI是事件驱动的，在多个不同时间发生多个事件，包括用户操作和其他触发器。信号/槽系统允许你在事件发生时定义反应，而无需编写代码来持续监控变化。在这个菜谱中，我们使用计时器预定义的信号并创建我们自己的槽。槽只是一个通过传递给信号`connect()`方法而被标识为槽的方法。以下截图显示了进度条的示例：
- en: '![How it works...](img/00051.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00051.jpeg)'
- en: There's more…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In a complex GUI application such as QGIS, you will end up with multiple signals
    that trigger multiple slots simultaneously. You must take care that a rapidly
    updating element such as a progress bar doesn't slow down the application. Using
    a thread to only update the progress bar when something has truly changed is more
    efficient. For an example of this technique, take a look at [http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/](http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在像QGIS这样的复杂GUI应用程序中，你将会有多个同时触发多个槽的信号。你必须注意，快速更新的元素，如进度条，不会减慢应用程序的速度。仅当确实有变化时使用线程来更新进度条会更有效。关于这种技术的示例，请参阅[http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/](http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/)。
- en: Using the `QgsMessageBar` object is preferred to display informative messages,
    but it can also accept widgets such as the progress bar. The PyQGIS Developer
    Cookbook has an example that shows how to place the progress bar in the `QgsMessageBar`
    object ([http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html))
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`QgsMessageBar`对象来显示信息性消息是首选的，但它也可以接受进度条等小部件。PyQGIS开发者手册有一个示例，展示了如何将进度条放置在`QgsMessageBar`对象中（[http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html)）
- en: Creating a simple text input dialog
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的文本输入对话框
- en: In this recipe, we'll demonstrate one of the simplest methods used for accepting
    input from a user, a text input dialog.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将演示用于从用户那里接受输入的最简单方法之一，即文本输入对话框。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单然后点击**Python控制台**来打开QGIS **Python控制台**。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, we will initialize the dialog and then configure its title
    and label. We''ll set the editing mode and the default text. When you click on
    the **OK** button, the text will be printed to the **Python Console**. To do this,
    we need to perform the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将初始化对话框并配置其标题和标签。我们将设置编辑模式和默认文本。当你点击**确定**按钮时，文本将被打印到**Python控制台**。为此，我们需要执行以下步骤：
- en: 'First, we need to import the GUI library:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入GUI库：
- en: '[PRE24]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we initialize the dialog:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化对话框：
- en: '[PRE25]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we set the window''s title, label text, editing mode, and default text:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们设置窗口标题、标签文本、编辑模式和默认文本：
- en: '[PRE26]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We configure the dialog while capturing the user input and the return code
    in variables:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在捕获用户输入和返回代码的同时配置对话框：
- en: '[PRE27]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the dialog appears, type in some text and click on the **OK** button.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当对话框出现时，输入一些文本并点击**确定**按钮。
- en: 'Now, we print the user input to the console:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将用户输入打印到控制台：
- en: '[PRE28]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Finally, verify that the correct text is printed to the **Python Console**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，验证是否正确地将文本打印到了**Python控制台**。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The editing mode differentiates between **normal**, which we used here, and
    **password**, to obscure typed passwords. Although we haven't used it in this
    example, the return code is a Boolean, which can be used to verify that the user
    input occurred.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑模式区分**正常**，这是我们在这里使用的，和**密码**，以隐藏输入的密码。尽管我们没有在这个例子中使用它，但返回码是一个布尔值，可以用来验证用户输入是否发生。
- en: Creating a file input dialog
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件输入对话框
- en: The best way to get a filename from the user is to have them browse to the file
    using a dialog. You can have the user type in a filename using the text input
    dialog, but this method is prone to errors. In this recipe, we'll create a file
    dialog and print the chosen filename to the console.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户那里获取文件名的最佳方式是让他们使用对话框浏览文件。您可以让用户使用文本输入对话框输入文件名，但这种方法容易出错。在这个菜谱中，我们将创建一个文件对话框并将选定的文件名打印到控制台。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单然后点击**Python控制台**来打开QGIS **Python控制台**。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will create and configure the dialog, browse to a file,
    and print the chosen filename, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建和配置对话框，浏览文件，并打印选定的文件名，如下所示：
- en: 'First, we import the GUI library:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入GUI库：
- en: '[PRE29]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we initialize the file dialog and specify its window title:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化文件对话框并指定其窗口标题：
- en: '[PRE30]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we specify a path to the directory we want the file dialog to start in:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们指定文件对话框开始时的目录路径：
- en: '[PRE31]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we configure the file dialog with the preceding parameters and assign
    the output to a variable:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用前面的参数配置文件对话框并将输出分配给一个变量：
- en: '[PRE32]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the dialog appears, browse to a file, select it, and click on the **OK**
    button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当对话框出现时，浏览文件，选择它，然后点击**确定**按钮。
- en: 'Finally, we print the chosen filename to the console:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将选定的文件名打印到控制台：
- en: '[PRE33]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The file dialog simply provides a filename. After the user selects the file,
    you must open it or perform some other operation on it. If the user cancels the
    file dialog, the file variable is just an empty string. You can use the `QFileInfo`
    object to get the path of the selected file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 文件对话框仅提供文件名。在用户选择文件后，您必须打开它或对其执行其他操作。如果用户取消文件对话框，文件变量将是一个空字符串。您可以使用`QFileInfo`对象来获取所选文件的路径：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then, you can save this path in the project settings, as demonstrated in [Chapter
    1](part0015_split_000.html#page "Chapter 1. Automating QGIS"), *Automating QGIS*.
    This way, next time when you open a file dialog, you will start in the same directory
    location as the previous file, which is usually more convenient.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将此路径保存到项目设置中，如[第1章](part0015_split_000.html#page "第1章. 自动化QGIS")中所示，*自动化QGIS*。这样，下次打开文件对话框时，您将开始于与上次文件相同的目录位置，这通常更方便。
- en: There's more…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: You can also use the `QFileDialog() method` to get the filenames to be saved.
    You can use the `FileMode` enumeration to restrict the user to selecting directories
    as well.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`QFileDialog()`方法获取要保存的文件名。您可以使用`FileMode`枚举来限制用户选择目录。
- en: Creating a combobox
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组合框
- en: A combobox provides a drop-down list to limit the user's selection to a defined
    set of choices. In this recipe, we'll create a simple combobox.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框提供了一个下拉列表，以限制用户的选项为定义好的选择集。在这个菜谱中，我们将创建一个简单的组合框。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单然后点击**Python控制台**来打开QGIS **Python控制台**。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will initialize the combobox widget, add choices to it,
    resize it, display it, and then capture the user input in a variable for printing
    to the console. To do this, we need to perform the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将初始化组合框小部件，向其中添加选项，调整其大小，显示它，然后捕获用户输入以打印到控制台。为此，我们需要执行以下步骤：
- en: 'Frist, we import the GUI library:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入GUI库：
- en: '[PRE35]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we create our combobox object:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建我们的组合框对象：
- en: '[PRE36]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, we add the items that we want the user to choose from:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加用户可以选择的项目：
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, we resize the widget:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们调整小部件的大小：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now we can display the widget to the user:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以向用户显示小部件：
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Next, we need to select an item from the list.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要从列表中选择一个项目。
- en: 'Now, we set the user''s choice to a variable:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将用户的选项设置为一个变量：
- en: '[PRE40]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, we can print the selection:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以打印选择：
- en: '[PRE41]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Verify that the selection is printed to the console.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认选择已打印到控制台。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Items added to the combobox are a Python list. This feature makes it easy to
    dynamically generate choices using Python as the result of a database query or
    other dynamic data. You may also want the index of the object in the list, which
    you can access with the `currentIndex` property.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到组合框中的项是一个Python列表。此功能使得使用Python作为数据库查询或其他动态数据的结果动态生成选项变得容易。您可能还希望访问对象在列表中的索引，您可以通过`currentIndex`属性来访问它。
- en: Creating radio buttons
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单选按钮
- en: Radio buttons are good for user input when you want the user to select an exclusive
    choice from a list of options, as opposed to checkboxes, which let a user select
    many or all of the options available. For longer lists of choices, a combobox
    is a better option. Once a radio button is selected, you can unselect it only
    by choosing another radio button.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望用户从选项列表中选择一个唯一的选择时，单选按钮非常适合用户输入，与允许用户选择多个或所有可用选项的复选框相比。对于更长的选项列表，组合框是一个更好的选择。一旦选中单选按钮，您只能通过选择另一个单选按钮来取消选中它。
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单并然后点击**Python控制台**来打开QGIS **Python控制台**。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Radio buttons are easier to manage as part of a class, so we''ll create a custom
    class that also includes a textbox to view which radio button is selected. To
    do this, perform the following steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮作为类的一部分更容易管理，因此我们将创建一个自定义类，该类还包括一个文本框来查看哪个单选按钮被选中。为此，请执行以下步骤：
- en: 'First, we''ll import both the GUI and the core QGIS libraries:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将导入GUI和核心QGIS库：
- en: '[PRE42]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we''ll create the `RadioButton` class and set up the radio buttons and
    the textbox:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建`RadioButton`类并设置单选按钮和文本框：
- en: '[PRE43]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We must also define a layout to manage the placement of the widgets, as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须定义一个布局来管理小部件的位置，如下所示：
- en: '[PRE44]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we''ll connect the toggled signal of each radio button to the methods
    you''ll define in just a moment, in order to detect when a radio button is selected:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将每个单选按钮的切换信号连接到您即将定义的方法，以便检测何时选中单选按钮：
- en: '[PRE45]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we''ll add the radio buttons and the textbox to the layout:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将单选按钮和文本框添加到布局中：
- en: '[PRE46]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, we can define the layout for the custom widget we are building:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以定义我们正在构建的自定义小部件的布局：
- en: '[PRE47]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we can define the methods to indicate which radio button is selected.
    You can also define these options in a single method, but for a better understanding,
    three methods are easier:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以定义表示哪个单选按钮被选中的方法。您也可以在单个方法中定义这些选项，但为了更好的理解，三个方法更容易：
- en: '[PRE48]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We are now ready to initialize our class and display the radio buttons:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以初始化我们的类并显示单选按钮：
- en: '[PRE49]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Finally, click on each of the three radio buttons and verify that the text in
    the textbox changes to indicate that the radio button you clicked on is selected.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击每个单选按钮并验证文本框中的文本是否更改以指示您点击的单选按钮已被选中。
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Radio buttons are almost always grouped together as a single object because
    they are related options. Many GUI frameworks expose them as a single object in
    the API; however, Qt keeps them as separate objects for maximum control.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮几乎总是作为一个单独的对象分组，因为它们是相关的选项。许多GUI框架在API中将它们暴露为单个对象；然而，Qt将它们作为单独的对象来保持最大的控制。
- en: Creating checkboxes
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建复选框
- en: Checkboxes are closely related to radio buttons, in that they offer options
    around a single theme. However, unlike radio buttons, checkboxes can be selected
    or unselected. You can also select more than one checkbox at a time. In this recipe,
    we'll create a dialog with checkboxes and some textboxes to programmatically track
    which checkboxes are selected.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框与单选按钮密切相关，因为它们围绕一个主题提供选项。然而，与单选按钮不同，复选框可以被选中或取消选中。您还可以同时选中多个复选框。在本例中，我们将创建一个带有复选框和一些文本框的对话框，以编程方式跟踪哪些复选框被选中。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单并然后点击**Python** **控制台**来打开QGIS **Python控制台**。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In this recipe, we''ll use a class to manage the checkboxes and the textbox
    widgets, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用一个类来管理复选框和文本框小部件，如下所示：
- en: 'First, we import the GUI and QGIS core libraries:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入GUI和QGIS核心库：
- en: '[PRE50]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we create our custom class for the checkboxes and textboxes:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的自定义类用于复选框和文本框：
- en: '[PRE51]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we''ll need a `layout` object to manage the placement of the widgets:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个`layout`对象来管理小部件的位置：
- en: '[PRE52]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we''ll add three checkboxes and three textboxes:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加三个复选框和三个文本框：
- en: '[PRE53]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, we''ll connect the status signals of the checkboxes to the methods that
    we''ll define later:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将复选框的状态信号连接到我们将定义的方法：
- en: '[PRE54]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we must add the widgets to the layout:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须将小部件添加到布局中：
- en: '[PRE55]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we set our custom class''s layout to the layout we created:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将我们的自定义类的布局设置为创建的布局：
- en: '[PRE56]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We then create the methods that change the textboxes each time a checkbox is
    toggled:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建在每次复选框切换时更改文本框的方法：
- en: '[PRE57]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we are ready to initialize our custom class and display the dialog:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已准备好初始化我们的自定义类并显示对话框：
- en: '[PRE58]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Toggle the checkboxes separately and simultaneously and then verify that the
    textboxes reflect the changes.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别和同时切换复选框，然后验证文本框是否反映了这些变化。
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'Textboxes allow you to verify that you are programmatically catching the signal
    from the checkboxes as they are toggled. You can also use a single checkbox as
    a Boolean for an option with only two choices. When you run this recipe, the result
    should look similar to the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 文本框允许你验证当复选框切换时，你是否以编程方式捕获了复选框的信号。你也可以使用单个复选框作为只有两个选择的选项的布尔值。当你运行这个菜谱时，结果应该类似于以下截图：
- en: '![How it works...](img/00052.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/00052.jpeg)'
- en: Creating tabs
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建标签
- en: Tabs allow you to condense the information from several screens into a relatively
    small place. Tabs provide titles at the top of the window, which present an individual
    widget layout for each title when clicked. In this recipe, we'll create a simple
    tabbed interface.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 标签允许你将多个屏幕的信息压缩到相对较小的空间。标签在窗口顶部提供标题，当点击时，每个标题都呈现一个单独的小部件布局。在这个菜谱中，我们将创建一个简单的标签界面。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单然后点击**Python** **控制台**来打开 QGIS **Python 控制台**。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will create an overarching tab widget. Then, we''ll create three generic
    widgets to represent our tabs. We''ll set up layouts with three different GUI
    widgets and assign each layout to our tab widgets. Finally, we''ll add our tabs
    to the tab widget and display it. To do this, we need to perform the following
    steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个总体的标签小部件。然后，我们将创建三个通用小部件来表示我们的标签。我们将设置包含三个不同 GUI 小部件的布局，并将每个布局分配给我们的标签小部件。最后，我们将添加我们的标签到标签小部件并显示它。为此，我们需要执行以下步骤：
- en: 'First, we need to import the GUI and QGIS core libraries:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入 GUI 和 QGIS 核心库：
- en: '[PRE59]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we create our tab and configure its title and size:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的标签并配置其标题和大小：
- en: '[PRE60]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, we initialize our tab widgets:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们初始化我们的标签小部件：
- en: '[PRE61]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, we''ll set up a widget and a layout with a rich text input box, using
    HTML tags for bold text for our first tab:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将设置一个包含丰富文本输入框的小部件和布局，使用 HTML 标签为我们的第一个标签加粗文本：
- en: '[PRE62]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, we''ll set up a simple button for our second tab, following the same format
    as the first tab:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为第二个标签页设置一个简单的按钮，遵循与第一个标签页相同的格式：
- en: '[PRE63]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, we''ll create the widget and the layout for our third tab with a simple
    text label:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为第三个标签创建小部件和布局，其中包含一个简单的文本标签：
- en: '[PRE64]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, we''ll add the tabs to the tab window:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将标签添加到标签窗口中：
- en: '[PRE65]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Finally, we''ll display the tab window:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将显示标签窗口：
- en: '[PRE66]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Verify that you can click on each tab and interact with the widgets.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你可以点击每个标签并与小部件交互。
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The key to this recipe is the `QTabWidget()`.method. Everything else is just
    arbitrary layouts and widgets, which are ultimately contained in the tab widget.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的关键是 `QTabWidget()` 方法。其他所有内容只是任意布局和小部件，这些最终都包含在标签小部件中。
- en: Note
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The general rule of thumb for tabs is to keep the information in them independently.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 标签的一般规则是保持其中信息独立。
- en: There is no way to predict how the user will interact with a tabbed interface,
    and if the information across tabs is dependent, problems will arise.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 无法预测用户如何与标签界面交互，如果标签之间的信息相互依赖，则会出现问题。
- en: Stepping the user through a wizard
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导用户通过向导
- en: A wizard is a series of dialogs that lead the user through a sequence of steps.
    The information on each page of a wizard might relate in some way to the information
    on other pages. In this recipe, we'll create a simple three-page wizard to collect
    some information from the user and display it back to them.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 向导是一系列对话框，引导用户通过一系列步骤。向导每一页的信息可能以某种方式与其他页面的信息相关。在这个菜谱中，我们将创建一个简单的三页向导来收集用户的一些信息并将其显示给他们。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单并点击**Python** **控制台**来打开 QGIS **Python 控制台**。
- en: How to do it...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will create three classes, each representing a page of our wizard. The first
    two pages will collect information and the third page will display it back to
    the user. We will create a `QWizard` object to tie the page classes together.
    We will also use the concept of wizard fields to pass information among the pages.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建三个类，每个类代表我们的向导页面。前两个页面将收集信息，第三个页面将向用户展示信息。我们将创建一个`QWizard`对象来将这些页面类连接起来。我们还将使用向导字段的概念在页面之间传递信息。
- en: 'To do this, we need to perform the following steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要执行以下步骤：
- en: 'First, we import the GUI and QGIS core libraries:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入 GUI 和 QGIS 核心库：
- en: '[PRE67]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, we create the class for the first page of our wizard and add a textbox
    to collect the user''s name as the `uname` variable:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为向导的第一个页面创建类，并添加一个文本框以收集用户的`uname`变量：
- en: '[PRE68]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, we register the `uname` field so that we''ll be able to access the entered
    value later on, without having to keep track of the variable itself:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们注册`uname`字段，以便我们可以在稍后访问输入的值，而无需跟踪变量本身：
- en: '[PRE69]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Then, we set up the layout for the page:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们设置页面的布局：
- en: '[PRE70]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we''ll set the class for our second page:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置第二个页面的类：
- en: '[PRE71]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then, we''ll add a calendar widget to get the user''s birthday:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加一个日历小部件以获取用户的生日：
- en: '[PRE72]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We''ll register the selected date as a `field`, to be accessed later on:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将注册选定的日期作为一个`field`，以便稍后访问：
- en: '[PRE73]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, we''ll set up the layout for this page:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将为此页面设置布局：
- en: '[PRE74]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'We are now ready to set up the third page, which will display the user''s information.
    We''ll use simple labels, which are dynamically populated in the next step:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已准备好设置第三个页面，该页面将展示用户信息。我们将使用简单的标签，这些标签将在下一步动态填充：
- en: '[PRE75]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, we set up the initialization of the page. We will first access the fields
    registered from the previous pages to grab the user input:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们设置页面的初始化。我们首先访问从前一页注册的字段以获取用户输入：
- en: '[PRE76]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Then, all we have to do is set those values to the text for the labels using
    Python string formatting:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们只需将这些值设置为标签的文本，使用 Python 字符串格式化即可：
- en: '[PRE77]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Finally, we create our wizard widget, add pages, and display the wizard:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建我们的向导小部件，添加页面，并显示向导：
- en: '[PRE78]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The wizard interface shares many traits with the tab widget, with some important
    differences. The wizard only allows the user to move back and forth in a linear
    progression based on the page order. It can share information among pages if the
    information is registered as fields, which then makes the pages global to the
    scope of the wizard. However, the `field()` method is a protected method, so your
    pages must be defined as classes inherited from the `QWizardPage` object for the
    registered fields to work as expected. The following screenshot shows the calendar
    screen of the wizard:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 向导界面与标签页控件有许多相似之处，但也有一些重要区别。向导只允许用户根据页面顺序进行线性前进和后退。如果信息被注册为字段，它可以跨页面共享信息，这使得页面在向导的作用域内全局。然而，`field()`方法是一个受保护的方法，因此您的页面必须定义为从`QWizardPage`对象继承的类，以便注册的字段能够按预期工作。以下截图显示了向导的日历屏幕：
- en: '![How it works...](img/00053.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00053.jpeg)'
- en: Keeping dialogs on top
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持对话框在顶部
- en: It's easy to lose track of windows that pop up in front of QGIS. As soon as
    the user changes focus to move the main QGIS application window, your dialog can
    disappear behind it, forcing the user to rearrange their whole desktop to find
    the smaller window again. Fortunately, Qt has a window setting called hint, which
    allows you to force a window to stay on top. This type of dialog is called a modal
    dialog. In this recipe, we'll create a message dialog using hint.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易失去 QGIS 前面的弹出窗口的跟踪。一旦用户将焦点转移到移动主 QGIS 应用程序窗口，您的对话框可能会消失在它后面，迫使用户重新排列整个桌面以再次找到较小的窗口。幸运的是，Qt
    有一个窗口设置称为 hint，它允许您强制窗口保持在顶部。这种类型的对话框称为模式对话框。在这个菜谱中，我们将创建一个消息对话框并使用 hint 强制它保持在顶部。
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**插件**菜单并点击**Python** **控制台**来打开 QGIS **Python 控制台**。
- en: How to do it...
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will create a simple message dialog and set it to stay on
    top, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个简单的消息对话框并将其设置为保持在顶部，如下所示：
- en: 'First, we import the Qt GUI and QGIS core libraries:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入 Qt GUI 和 QGIS 核心库：
- en: '[PRE79]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Next, we create the text for our message:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建消息的文本：
- en: '[PRE80]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now, we create our dialog and specify the message and hint:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建我们的对话框并指定消息和提示：
- en: '[PRE81]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'We can resize and show the dialog:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以调整对话框的大小并显示它：
- en: '[PRE82]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Click on the main QGIS application window to change the window focus and verify
    that the dialog stays on top of QGIS.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击主 QGIS 应用程序窗口以更改窗口焦点并验证对话框始终位于 QGIS 之上。
- en: How it works...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This simple technique can help to ensure that a user addresses an important
    dialog before moving on.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单技术可以帮助确保用户在继续之前先处理重要的对话框。
