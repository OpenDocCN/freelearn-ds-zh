- en: Chapter 7. Interacting with the User
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Using log files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple message dialog
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a warning dialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an error dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a progress bar
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple text input dialog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a file input dialog
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a combobox
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating radio buttons
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating checkboxes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tabs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stepping the user through a wizard
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping dialogs on top
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QGIS has been built using the comprehensive graphical user interface framework
    called Qt. Both QGIS and Qt have Python APIs. In this chapter, we'll learn how
    to interact with the user in order to collect and display information outside
    the default QGIS interface. Qt has excellent documentation of its own, and since
    QGIS is built on top of Qt, all of this documentation applies to QGIS. You can
    find the Qt documentation at [http://qt-project.org](http://qt-project.org).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Using log files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log files provide a way to track exactly what is going on in a Python plugin
    or script, by creating messages that are available even if the script or QGIS
    crashes. These log messages make troubleshooting easier. In this recipe, we'll
    demonstrate two methods used for logging. One method is using actual log files
    on the filesystem, and the other is using the QGIS **Log Messages** window, which
    is available by clicking on the yellow triangle with an exclamation point at the
    bottom-right corner of the QGIS application window, or by selecting **View** menu,
    then clicking on **Panels**, and then checking **Log Messages**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use log files, we must configure the `QGIS_LOG_FILE` environment variable
    by performing the following steps so that QGIS knows where to write log messages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: From the QGIS **Settings** menu, select **Options**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Options** dialog, select **System** panel.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **System** panel, scroll down to the **Environment** section.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Environment** section, check the **Use custom variables** checkbox.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Variable** field, enter `QGIS_LOG_FILE`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Value** field, enter `/qgis_data/log.txt` or the path to another directory
    where you have write permissions.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button to close the **Options** dialog.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart QGIS for the environment variable to take effect.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will write a message to our custom log file configured in the previous section,
    and then write a message to the tabbed QGIS **Log Messages** window. To do this,
    we need to perform the following steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: First, open the **Python Console** in QGIS.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll write the following log file message:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we''ll write a message to the QGIS **Log Messages** window, specifying
    the message as the first argument and a name for the tab in which the message
    will appear:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, open the log file and check whether the message has appeared.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, open the QGIS **Log Messages** window, click on the **Python Console**
    tab, and verify that the second log message appears.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The traditional log file provides a simple and portable way to record information
    from QGIS using Python. The **Log Messages** window is a more structured way to
    view information from many different sources, with a tabbed interface and a convenient
    timestamp on each message. In most cases, you'll probably want to use the **Log
    Messages** window because QGIS users are familiar with it. However, use it sparingly.
    It's OK to log lots of messages when testing code, but restrict logging for plugins
    or applications to serious errors only. Heavy logging — for example, logging messages
    while looping over every feature in a layer — can slow down QGIS or even cause
    it to crash.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple message dialog
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Message dialogs pop up to grab the user's attention and to display important
    information. In this recipe, we'll create a simple information dialog.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python** **Console** by going to the **Plugins** menu and selecting
    **Python** **Console**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a message dialog and display some text in it, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the GUI library:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we''ll create the message dialog:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''ll set the message we want to display:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we call the execution method to display the message dialog:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that we are directly using the underlying Qt framework from which QGIS
    is built. QGIS API's objects begin with `Qgs`, while Qt objects begin with just
    the letter `Q`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A message dialog box should also be used sparingly because it is a popup that
    can become annoying to the user or can get lost in the array of open windows and
    dialogs on a user's desktop. The preferred method for a QGIS information message
    is to use the `QgsMessageBar() method`, which is well-documented in the PyQGIS
    Developer Cookbook found at [http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Creating a warning dialog
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you need to notify a user when an issue is detected, which might
    lead to problems if the user continues. This situation calls for a warning dialog,
    which we will demonstrate in this recipe.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by going to the **Plugins** menu and selecting
    **Python Console**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a dialog, set the warning message and a warning
    icon, and display the dialog, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the GUI library:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we initialize the warning dialog:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we set the warning message:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add a warning icon to the dialog that has an enumeration index of `2`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we call the execution method to display the dialog:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Message dialogs should be used sparingly because they interrupt the user experience
    and can easily become annoying. However, sometimes it is important to prevent
    a user from taking an action that may cause data corruption or a program to crash.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Creating an error dialog
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can issue an error dialog box when you need to end a process due to a serious
    error. In this recipe, we'll create an example of an error dialog.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a dialog, assign an error message, set an error
    icon, and display the dialog, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the GUI library:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we initialize the dialog:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we set the error message:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Subsequently, we set an icon number for the error icon:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we execute the error dialog:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important feature of modal windows is that they always stay on top of the
    application, regardless of whether the user changes the window's focus. This feature
    ensures that the user addresses the dialog before they proceed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a progress bar
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A progress bar is a dynamic dialog that displays the percentage complete bar
    for a running process that the user must wait for before continuing. A progress
    bar is more advanced than a simple dialog because it needs to be updated continuously.
    In this recipe, we'll create a simple progress dialog based on a timer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No groundwork is required for this recipe.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for this recipe include creating a custom class based on the `QProgressBar`,
    initializing the dialog and setting its size and title, creating a timer, connecting
    the progress bar to the timer, starting the time, and displaying the progress.
    To do this, we need to perform the following steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must import both the GUI and QGIS core libraries:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we create a custom class for our progress bar, including a method to
    increase the value of the progress bar:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we set the progress bar:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we set the progress bar''s size and title:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we initialize the timer, which will serve as the process we monitor:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, connect the the timer's `timeout` signal to the `increaseValue` method,
    which we created earlier. Whenever the timer finishes its countdown, it will emit
    the `timeout` signal and notify the `increaseValue` method.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we will start the timer, specifying an interval of `500` milliseconds.
    The timer will call its `timeout()` signal every 0.5 seconds:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we show the progress bar and start the progress meter:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The progress bar will stop when its value reaches 100, but our timer will continue
    to run until the `stop()` method is called. In a more realistic implementation,
    you will need a way to determine whether the monitored process is complete. The
    indicator might be the creation of a file, or even better, a signal. The Qt framework
    uses the concept of signals and slots to connect GUI elements. A GUI is event-based,
    with multiple events occurring at different times, including user actions and
    other triggers. The signal/slot system allows you to define reactions to events
    when they occur, without writing code to continuously monitor changes. In this
    recipe, we use the predefined signal from the timer and create our own slot. A
    slot is just a method identified as a slot by passing it to a signal''s `connect()`
    method. The following screenshot shows an example of the progress bar:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00051.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: There's more…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a complex GUI application such as QGIS, you will end up with multiple signals
    that trigger multiple slots simultaneously. You must take care that a rapidly
    updating element such as a progress bar doesn't slow down the application. Using
    a thread to only update the progress bar when something has truly changed is more
    efficient. For an example of this technique, take a look at [http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/](http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Using the `QgsMessageBar` object is preferred to display informative messages,
    but it can also accept widgets such as the progress bar. The PyQGIS Developer
    Cookbook has an example that shows how to place the progress bar in the `QgsMessageBar`
    object ([http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html](http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/communicating.html))
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple text input dialog
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll demonstrate one of the simplest methods used for accepting
    input from a user, a text input dialog.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will initialize the dialog and then configure its title
    and label. We''ll set the editing mode and the default text. When you click on
    the **OK** button, the text will be printed to the **Python Console**. To do this,
    we need to perform the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the GUI library:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we initialize the dialog:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we set the window''s title, label text, editing mode, and default text:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We configure the dialog while capturing the user input and the return code
    in variables:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the dialog appears, type in some text and click on the **OK** button.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we print the user input to the console:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Finally, verify that the correct text is printed to the **Python Console**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The editing mode differentiates between **normal**, which we used here, and
    **password**, to obscure typed passwords. Although we haven't used it in this
    example, the return code is a Boolean, which can be used to verify that the user
    input occurred.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file input dialog
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to get a filename from the user is to have them browse to the file
    using a dialog. You can have the user type in a filename using the text input
    dialog, but this method is prone to errors. In this recipe, we'll create a file
    dialog and print the chosen filename to the console.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create and configure the dialog, browse to a file,
    and print the chosen filename, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the GUI library:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we initialize the file dialog and specify its window title:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we specify a path to the directory we want the file dialog to start in:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we configure the file dialog with the preceding parameters and assign
    the output to a variable:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When the dialog appears, browse to a file, select it, and click on the **OK**
    button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we print the chosen filename to the console:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The file dialog simply provides a filename. After the user selects the file,
    you must open it or perform some other operation on it. If the user cancels the
    file dialog, the file variable is just an empty string. You can use the `QFileInfo`
    object to get the path of the selected file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then, you can save this path in the project settings, as demonstrated in [Chapter
    1](part0015_split_000.html#page "Chapter 1. Automating QGIS"), *Automating QGIS*.
    This way, next time when you open a file dialog, you will start in the same directory
    location as the previous file, which is usually more convenient.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use the `QFileDialog() method` to get the filenames to be saved.
    You can use the `FileMode` enumeration to restrict the user to selecting directories
    as well.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Creating a combobox
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A combobox provides a drop-down list to limit the user's selection to a defined
    set of choices. In this recipe, we'll create a simple combobox.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will initialize the combobox widget, add choices to it,
    resize it, display it, and then capture the user input in a variable for printing
    to the console. To do this, we need to perform the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Frist, we import the GUI library:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, we create our combobox object:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, we add the items that we want the user to choose from:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, we resize the widget:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now we can display the widget to the user:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Next, we need to select an item from the list.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we set the user''s choice to a variable:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, we can print the selection:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Verify that the selection is printed to the console.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Items added to the combobox are a Python list. This feature makes it easy to
    dynamically generate choices using Python as the result of a database query or
    other dynamic data. You may also want the index of the object in the list, which
    you can access with the `currentIndex` property.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Creating radio buttons
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Radio buttons are good for user input when you want the user to select an exclusive
    choice from a list of options, as opposed to checkboxes, which let a user select
    many or all of the options available. For longer lists of choices, a combobox
    is a better option. Once a radio button is selected, you can unselect it only
    by choosing another radio button.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python Console**.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Radio buttons are easier to manage as part of a class, so we''ll create a custom
    class that also includes a textbox to view which radio button is selected. To
    do this, perform the following steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll import both the GUI and the core QGIS libraries:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, we''ll create the `RadioButton` class and set up the radio buttons and
    the textbox:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We must also define a layout to manage the placement of the widgets, as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we''ll connect the toggled signal of each radio button to the methods
    you''ll define in just a moment, in order to detect when a radio button is selected:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we''ll add the radio buttons and the textbox to the layout:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, we can define the layout for the custom widget we are building:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we can define the methods to indicate which radio button is selected.
    You can also define these options in a single method, but for a better understanding,
    three methods are easier:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We are now ready to initialize our class and display the radio buttons:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Finally, click on each of the three radio buttons and verify that the text in
    the textbox changes to indicate that the radio button you clicked on is selected.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Radio buttons are almost always grouped together as a single object because
    they are related options. Many GUI frameworks expose them as a single object in
    the API; however, Qt keeps them as separate objects for maximum control.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Creating checkboxes
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checkboxes are closely related to radio buttons, in that they offer options
    around a single theme. However, unlike radio buttons, checkboxes can be selected
    or unselected. You can also select more than one checkbox at a time. In this recipe,
    we'll create a dialog with checkboxes and some textboxes to programmatically track
    which checkboxes are selected.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll use a class to manage the checkboxes and the textbox
    widgets, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the GUI and QGIS core libraries:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we create our custom class for the checkboxes and textboxes:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we''ll need a `layout` object to manage the placement of the widgets:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we''ll add three checkboxes and three textboxes:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, we''ll connect the status signals of the checkboxes to the methods that
    we''ll define later:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we must add the widgets to the layout:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we set our custom class''s layout to the layout we created:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We then create the methods that change the textboxes each time a checkbox is
    toggled:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we are ready to initialize our custom class and display the dialog:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Toggle the checkboxes separately and simultaneously and then verify that the
    textboxes reflect the changes.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Textboxes allow you to verify that you are programmatically catching the signal
    from the checkboxes as they are toggled. You can also use a single checkbox as
    a Boolean for an option with only two choices. When you run this recipe, the result
    should look similar to the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00052.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: Creating tabs
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tabs allow you to condense the information from several screens into a relatively
    small place. Tabs provide titles at the top of the window, which present an individual
    widget layout for each title when clicked. In this recipe, we'll create a simple
    tabbed interface.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create an overarching tab widget. Then, we''ll create three generic
    widgets to represent our tabs. We''ll set up layouts with three different GUI
    widgets and assign each layout to our tab widgets. Finally, we''ll add our tabs
    to the tab widget and display it. To do this, we need to perform the following
    steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the GUI and QGIS core libraries:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we create our tab and configure its title and size:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, we initialize our tab widgets:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, we''ll set up a widget and a layout with a rich text input box, using
    HTML tags for bold text for our first tab:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, we''ll set up a simple button for our second tab, following the same format
    as the first tab:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, we''ll create the widget and the layout for our third tab with a simple
    text label:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, we''ll add the tabs to the tab window:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Finally, we''ll display the tab window:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Verify that you can click on each tab and interact with the widgets.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key to this recipe is the `QTabWidget()`.method. Everything else is just
    arbitrary layouts and widgets, which are ultimately contained in the tab widget.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The general rule of thumb for tabs is to keep the information in them independently.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: There is no way to predict how the user will interact with a tabbed interface,
    and if the information across tabs is dependent, problems will arise.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Stepping the user through a wizard
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A wizard is a series of dialogs that lead the user through a sequence of steps.
    The information on each page of a wizard might relate in some way to the information
    on other pages. In this recipe, we'll create a simple three-page wizard to collect
    some information from the user and display it back to them.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create three classes, each representing a page of our wizard. The first
    two pages will collect information and the third page will display it back to
    the user. We will create a `QWizard` object to tie the page classes together.
    We will also use the concept of wizard fields to pass information among the pages.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to perform the following steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the GUI and QGIS core libraries:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, we create the class for the first page of our wizard and add a textbox
    to collect the user''s name as the `uname` variable:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, we register the `uname` field so that we''ll be able to access the entered
    value later on, without having to keep track of the variable itself:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Then, we set up the layout for the page:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, we''ll set the class for our second page:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Then, we''ll add a calendar widget to get the user''s birthday:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We''ll register the selected date as a `field`, to be accessed later on:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, we''ll set up the layout for this page:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'We are now ready to set up the third page, which will display the user''s information.
    We''ll use simple labels, which are dynamically populated in the next step:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, we set up the initialization of the page. We will first access the fields
    registered from the previous pages to grab the user input:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Then, all we have to do is set those values to the text for the labels using
    Python string formatting:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Finally, we create our wizard widget, add pages, and display the wizard:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The wizard interface shares many traits with the tab widget, with some important
    differences. The wizard only allows the user to move back and forth in a linear
    progression based on the page order. It can share information among pages if the
    information is registered as fields, which then makes the pages global to the
    scope of the wizard. However, the `field()` method is a protected method, so your
    pages must be defined as classes inherited from the `QWizardPage` object for the
    registered fields to work as expected. The following screenshot shows the calendar
    screen of the wizard:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/00053.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: Keeping dialogs on top
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's easy to lose track of windows that pop up in front of QGIS. As soon as
    the user changes focus to move the main QGIS application window, your dialog can
    disappear behind it, forcing the user to rearrange their whole desktop to find
    the smaller window again. Fortunately, Qt has a window setting called hint, which
    allows you to force a window to stay on top. This type of dialog is called a modal
    dialog. In this recipe, we'll create a message dialog using hint.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the QGIS **Python Console** by selecting the **Plugins** menu and then
    clicking on **Python** **Console**.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a simple message dialog and set it to stay on
    top, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the Qt GUI and QGIS core libraries:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Next, we create the text for our message:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建消息的文本：
- en: '[PRE80]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now, we create our dialog and specify the message and hint:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建我们的对话框并指定消息和提示：
- en: '[PRE81]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'We can resize and show the dialog:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以调整对话框的大小并显示它：
- en: '[PRE82]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Click on the main QGIS application window to change the window focus and verify
    that the dialog stays on top of QGIS.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击主 QGIS 应用程序窗口以更改窗口焦点并验证对话框始终位于 QGIS 之上。
- en: How it works...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This simple technique can help to ensure that a user addresses an important
    dialog before moving on.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单技术可以帮助确保用户在继续之前先处理重要的对话框。
