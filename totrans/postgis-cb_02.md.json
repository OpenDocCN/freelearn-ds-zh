["```py\nCREATE VIEW viewname AS \n  SELECT... \n```", "```py\n-- Drop the table in case it exists \nDROP TABLE IF EXISTS chp02.xwhyzed CASCADE;  \nCREATE TABLE chp02.xwhyzed \n-- This table will contain numeric x, y, and z values \n( \n  x numeric, \n  y numeric, \n  z numeric \n) \nWITH (OIDS=FALSE); \nALTER TABLE chp02.xwhyzed OWNER TO me; \n-- We will be disciplined and ensure we have a primary key \nALTER TABLE chp02.xwhyzed ADD COLUMN gid serial; \nALTER TABLE chp02.xwhyzed ADD PRIMARY KEY (gid); \n```", "```py\nINSERT INTO chp02.xwhyzed (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \n```", "```py\n-- Ensure we don't try to duplicate the view\nDROP VIEW IF EXISTS chp02.xbecausezed;\n-- Retain original attributes, but also create a point   attribute from x and y\nCREATE VIEW chp02.xbecausezed AS\nSELECT x, y, z, ST_MakePoint(x,y)\nFROM chp02.xwhyzed;\n\n```", "```py\n-- Ensure we don't try to duplicate the view \nDROP VIEW IF EXISTS chp02.xbecausezed; \n-- Retain original attributes, but also create a point   attribute from x and y \nCREATE VIEW chp02.xbecausezed AS \n  SELECT x, y, z, ST_SetSRID(ST_MakePoint(x,y), 3734) -- Add ST_SetSRID \n  FROM chp02.xwhyzed; \n```", "```py\nDROP TABLE IF EXISTS chp02.xwhyzed1 CASCADE; \nCREATE TABLE chp02.xwhyzed1 \n( \n  x numeric, \n  y numeric, \n  z numeric \n) \nWITH (OIDS=FALSE); \nALTER TABLE chp02.xwhyzed1 OWNER TO me; \nALTER TABLE chp02.xwhyzed1 ADD COLUMN gid serial; \nALTER TABLE chp02.xwhyzed1 ADD PRIMARY KEY (gid); \n\nINSERT INTO chp02.xwhyzed1 (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed1 (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed1 (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \nINSERT INTO chp02.xwhyzed1 (x, y, z) \n  VALUES (random()*5, random()*7, random()*106); \n```", "```py\nSELECT AddGeometryColumn ('chp02','xwhyzed1','geom',3734,'POINT',2); \n```", "```py\nUPDATE chp02.xwhyzed1 \n  SET the_geom = ST_SetSRID(ST_MakePoint(x,y), 3734); \n```", "```py\nCREATE OR REPLACE FUNCTION chp02.before_insertXYZ() \n  RETURNS trigger AS \n$$ \nBEGIN \n\nif NEW.geom is null then \n   NEW.geom = ST_SetSRID(ST_MakePoint(NEW.x,NEW.y), 3734); \nend if; \nRETURN NEW; \nEND; \n\n$$ \nLANGUAGE 'plpgsql'; \n```", "```py\nCREATE TRIGGER popgeom_insert\n BEFORE INSERT ON chp02.xwhyzed1\n FOR EACH ROW EXECUTE PROCEDURE chp02.before_insertXYZ();\n```", "```py\nINSERT INTO chp02.xwhyzed1 (x, y, z)\n VALUES (random()*5, random()*7, 106),\n (random()*5, random()*7, 107),\n (random()*5, random()*7, 108),\n (random()*5, random()*7, 109),\n (random()*5, random()*7, 110);\n```", "```py\nSELECT * FROM chp02.xwhyzed1;\n```", "```py\nCREATE OR REPLACE FUNCTION chp02.before_insertXYZ() \n  RETURNS trigger AS \n$$ \nBEGIN \nif (TG_OP='INSERT') then \n  if (NEW.geom is null) then \n    NEW.geom = ST_SetSRID(ST_MakePoint(NEW.x,NEW.y), 3734); \n  end if; \nELSEIF (TG_OP='UPDATE') then \n  NEW.geom = ST_SetSRID(ST_MakePoint(NEW.x,NEW.y), 3734);\nend if;\nRETURN NEW; \nEND; \n\n$$ \nLANGUAGE 'plpgsql'; \n\nCREATE TRIGGER popgeom_insert \n  BEFORE INSERT ON chp02.xwhyzed1 \n  FOR EACH ROW EXECUTE PROCEDURE chp02.before_insertXYZ(); \n\nCREATE trigger popgeom_update \n  BEFORE UPDATE ON chp02.xwhyzed1 \n  FOR EACH ROW  \n  WHEN (OLD.X IS DISTINCT FROM NEW.X OR OLD.Y IS DISTINCT FROM  \n    NEW.Y) \n  EXECUTE PROCEDURE chp02.before_insertXYZ(); \n```", "```py\n> ogrinfo cuyahoga_hydro_polygon.shp -al -so  \n```", "```py\nCREATE TABLE chp02.hydrology ( \n  gid SERIAL PRIMARY KEY, \n  \"name\"      text, \n  hyd_type    text, \n  geom_type   text, \n  the_geom    geometry \n); \n```", "```py\nCREATE TABLE chp02.hydrology_centerlines ( \n  \"length\"    numeric \n) INHERITS (chp02.hydrology); \n\nCREATE TABLE chp02.hydrology_polygon ( \n  area    numeric, \n  perimeter    numeric \n) INHERITS (chp02.hydrology); \n\nCREATE TABLE chp02.hydrology_linestring ( \n  sinuosity    numeric \n) INHERITS (chp02.hydrology_centerlines); \n```", "```py\nSELECT * FROM chp02.hydrology \n```", "```py\nSELECT * FROM chp02.hydrology_polygon \n```", "```py\nCREATE TABLE chp02.contour_2_cm_only AS \n  SELECT contour.elevation, contour.gid, contour.div_10, contour.div_20, contour.div_50, \n  contour.div_100, cc.id, ST_Intersection(contour.the_geom, cc.the_geom) AS the_geom FROM \n    chp02.cuy_contours_2 AS contour, chp02.contour_clip as cc \n    WHERE ST_Within(contour.the_geom,cc.the_geom \n      OR \n      ST_Crosses(contour.the_geom,cc.the_geom); \n```", "```py\nCREATE TABLE chp02.contours \n( \n  gid serial NOT NULL, \n  elevation integer, \n  __gid double precision, \n  the_geom geometry(MultiLineStringZM,3734), \n  CONSTRAINT contours_pkey PRIMARY KEY (gid) \n) \nWITH ( \n  OIDS=FALSE \n); \n```", "```py\nCREATE TABLE chp02.contour_N2260630 \n  (CHECK\n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2260000, 630000, 2260000 635000, 2265000 635000,\n                 2265000 630000, 2260000 630000))',3734)\n    )\n  )) INHERITS (chp02.contours); \n```", "```py\nCREATE TABLE chp02.contour_N2260635 \n  (CHECK \n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2260000 635000, 2260000 640000,\n                 2265000 640000, 2265000 635000, 2260000 635000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2260640 \n  (CHECK\n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2260000 640000, 2260000 645000, 2265000 645000,\n                 2265000 640000, 2260000 640000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2265630 \n  (CHECK\n    (ST_CoveredBy(the_geom,ST_GeomFromText \n      ('POLYGON((2265000 630000, 2265000 635000, 2270000 635000,\n                 2270000 630000, 2265000 630000))', 3734)\n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2265635 \n  (CHECK \n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2265000 635000, 2265000 640000, 2270000 640000,\n                 2270000 635000, 2265000 635000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2265640 \n  (CHECK \n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2265000 640000, 2265000 645000, 2270000 645000,\n                 2270000 640000, 2265000 640000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2270630 \n  (CHECK \n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2270000 630000, 2270000 635000, 2275000 635000, \n                 2275000 630000, 2270000 630000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2270635 \n  (CHECK \n    (ST_CoveredBy(the_geom,ST_GeomFromText\n      ('POLYGON((2270000 635000, 2270000 640000, 2275000 640000, \n                 2275000 635000, 2270000 635000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \nCREATE TABLE chp02.contour_N2270640 \n  (CHECK\n    (ST_CoveredBy(the_geom,ST_GeomFromText     \n      ('POLYGON((2270000 640000, 2270000 645000, 2275000 645000, \n                 2275000 640000, 2270000 640000))', 3734) \n    )\n  )) INHERITS (chp02.contours); \n```", "```py\nshp2pgsql -s 3734 -a -i -I -W LATIN1 -g the_geom N2265630 chp02.contour_N2265630 | psql -U me -d postgis_cookbook\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom trails chp02.trails | psql -U me -d postgis_cookbook\n```", "```py\nSELECT DISTINCT label_name FROM chp02.trails \n  WHERE label_name LIKE '%&%' LIMIT 10;  \n```", "```py\nSELECT DISTINCT label_name, res \n  FROM chp02.trails \n  WHERE label_name NOT LIKE '%&%' \n  ORDER BY label_name, res; \n```", "```py\nSELECT '%' || label_name || '%' AS label_name, label_name as   label, res FROM \n  (SELECT DISTINCT label_name, res \n    FROM chp02.trails \n    WHERE label_name NOT LIKE '%&%' \n    ORDER BY label_name, res \n  ) AS label; \n```", "```py\nCREATE TABLE chp02.trails_names AS WITH labellike AS \n( \nSELECT '%' || label_name || '%' AS label_name, label_name as   label, res FROM \n  (SELECT DISTINCT label_name, res \n    FROM chp02.trails \n    WHERE label_name NOT LIKE '%&%' \n    ORDER BY label_name, res \n  ) AS label \n) \nSELECT t.gid, ll.label, ll.res \n  FROM chp02.trails AS t, labellike AS ll \n  WHERE t.label_name LIKE ll.label_name \n  AND \n  t.res = ll.res \n  ORDER BY gid;\n```", "```py\nCREATE TABLE chp02.trails_geom AS \n  SELECT gid, the_geom \n  FROM chp02.trails; \n```", "```py\nALTER TABLE chp02.trails_geom ADD PRIMARY KEY (gid); \n```", "```py\nALTER TABLE chp02.trails_names ADD FOREIGN KEY (gid) REFERENCES chp02.trails_geom(gid); \n```", "```py\nSELECT geo.gid, geo.the_geom, names.label FROM \n  chp02.trails_geom AS geo, chp02.trails_names AS names \n  WHERE geo.gid = names.gid;\n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom cm_usearea_polygon chp02.use_area | psql -U me -d postgis_cookbook\n```", "```py\n(ST_DumpPoints(geom)).geom \n```", "```py\nSELECT (ST_DumpPoints(ST_ExteriorRing(geom))).geom \n```", "```py\nSELECT ST_MakeLine(geom) FROM ( \n  SELECT (ST_DumpPoints(ST_ExteriorRing(geom))).geom) AS linpoints \n```", "```py\nCREATE OR REPLACE FUNCTION chp02.polygon_to_line(geometry) \n  RETURNS geometry AS \n$BODY$ \n\n  SELECT ST_MakeLine(geom) FROM ( \n    SELECT (ST_DumpPoints(ST_ExteriorRing((ST_Dump($1)).geom))).geom \n\n  ) AS linpoints \n$BODY$ \n  LANGUAGE sql VOLATILE; \nALTER FUNCTION chp02.polygon_to_line(geometry) \n  OWNER TO me; \n```", "```py\nSELECT ST_Union(the_geom) AS geom FROM ( \n  SELECT chp02.polygon_to_line(geom) AS geom FROM \n    chp02.use_area \n  ) AS unioned; \n```", "```py\nSELECT ST_Polygonize(geom) AS geom FROM ( \n  SELECT ST_Union(the_geom) AS geom FROM ( \n    SELECT chp02.polygon_to_line(geom) AS geom FROM \n    chp02.use_area \n  ) AS unioned \n) as polygonized; \n```", "```py\nCREATE TABLE chp02.use_area_alt AS ( \n  SELECT (ST_Dump(the_geom)).geom AS the_geom FROM ( \n    SELECT ST_Polygonize(the_geom) AS the_geom FROM ( \n      SELECT ST_Union(the_geom) AS the_geom FROM ( \n        SELECT chp02.polygon_to_line(the_geom) AS the_geom\n        FROM chp02.use_area \n      ) AS unioned \n    ) as polygonized \n  ) AS exploded \n); \n```", "```py\nCREATE INDEX chp02_use_area_alt_the_geom_gist \n  ON chp02.use_area_alt \n  USING gist(the_geom); \n```", "```py\nCREATE TABLE chp02.use_area_alt_p AS \n  SELECT ST_SetSRID(ST_PointOnSurface(the_geom), 3734) AS  \n    the_geom FROM \n    chp02.use_area_alt; \nALTER TABLE chp02.use_area_alt_p ADD COLUMN gid serial; \nALTER TABLE chp02.use_area_alt_p ADD PRIMARY KEY (gid); \n```", "```py\nCREATE INDEX chp02_use_area_alt_p_the_geom_gist \n  ON chp02.use_area_alt_p \n  USING gist(the_geom); \n```", "```py\nCREATE TABLE chp02.use_area_alt_relation AS \nSELECT points.gid, cu.location FROM \n  chp02.use_area_alt_p AS points, \n  chp02.use_area AS cu \n    WHERE ST_Intersects(points.the_geom, cu.the_geom);\n```", "```py\nALTER TABLE chp02.use_area_alt_relation ADD FOREIGN KEY (gid) REFERENCES chp02.use_area_alt_p (gid); \n```", "```py\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom census chp02.trail_census | psql -U me -d postgis_cookbook\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom trail_alignment_proposed_buffer chp02.trail_buffer | psql -U me -d postgis_cookbook\nshp2pgsql -s 3734 -d -i -I -W LATIN1 -g the_geom trail_alignment_proposed chp02.trail_alignment_prop | psql -U me -d postgis_cookbook\n```", "```py\nCREATE OR REPLACE FUNCTION chp02.proportional_sum(geometry,   geometry, numeric) \n  RETURNS numeric AS \n$BODY$ \n-- SQL here \n$BODY$ \n  LANGUAGE sql VOLATILE; \n```", "```py\nSELECT $3 * areacalc FROM \n  (SELECT (ST_Area(ST_Intersection($1, $2)) / ST_Area($2)):: numeric AS areacalc \n  ) AS areac; \n```", "```py\nCREATE OR REPLACE FUNCTION chp02.proportional_sum(geometry,   geometry, numeric) \n  RETURNS numeric AS \n$BODY$ \n    SELECT $3 * areacalc FROM \n      (SELECT (ST_Area(ST_Intersection($1,           $2))/ST_Area($2))::numeric AS areacalc \n      ) AS areac \n; \n$BODY$ \n  LANGUAGE sql VOLATILE; \n```", "```py\nSELECT ROUND(SUM(chp02.proportional_sum(a.the_geom, b.the_geom, b.pop))) FROM \n  chp02.trail_buffer AS a, chp02.trail_census as b \n  WHERE ST_Intersects(a.the_geom, b.the_geom) \n  GROUP BY a.gid; \n```"]