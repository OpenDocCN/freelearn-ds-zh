- en: Chapter 2. Configuring the Python Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will configure both Python and our computer to work together
    to execute Python scripts. Path variables and environment variables will be configured
    to ensure that import statements work as expected, and that scripts run when they
    are clicked on. The structure of the Python folder will be discussed, as will
    the location of the ArcPy module within the ArcGIS folder structure. We will also
    discuss **Integrated Development Environments** (**IDEs**), programs designed
    to assist in code creation and code execution, and compare and contrast existing
    IDEs to determine what benefits each IDE can offer when scripting Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the Python interpreter, and how it is called to execute a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the computer's environment variables to ensure correct code execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated Development Environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python's folder structure, with a focus on where modules are stored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a Python script?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the very basics of writing and executing a Python script. What
    is a Python script? It is a simple text file that contains a series of organized
    commands written in a formalized language. The text file has the extension `.py`,
    but other than that, there is nothing to distinguish it from any other text file.
    It can be opened using a text editor such as Notepad or Wordpad, but the magic
    that is Python does not reside in a Python script. Without the Python interpreter,
    a Python script cannot be run and the commands it contains cannot be executed.
  prefs: []
  type: TYPE_NORMAL
- en: How Python executes a script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding how Python works to interpret a script and then execute the commands
    within is as important as understanding the Python language itself. Hours of debugging
    and error checking can be avoided by taking the time to set up Python correctly.
    The interpretive nature of Python means that a script will have to be first converted
    into bytecode before it can be executed. We will cover the steps that Python takes
    to achieve our goal of automating GIS analysis.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Python interpreter?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python interpreter, on a Windows environment, is a program that has been
    compiled into a Windows executable, which has the extension `.exe`. The Python
    interpreter, `python.exe`, has been written in C, an older and extensively used
    programming language with a more difficult syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Programs written in C, which are also initially written as text files, must
    be converted into executables by a compiler, a specialized program that converts
    the text commands into machine code to create executable programs. This is a slow
    process that can make producing simple programs in C a laborious process. The
    benefit is that the programs produced are standalone programs capable of running
    without any dependencies. Python, on the other hand, interprets and executes the
    Python commands quickly, which makes it a great scripting language, but the scripts
    must be run through an interpreter and cannot be executed by themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The Python interpreter, as its name implies, interprets commands contained within
    a Python script. When a Python script is run, or executed, the syntax is first
    checked to make sure that it conforms to the rules of Python (for example, indentation
    rules are followed and the variables follow naming conventions). Then, if the
    script is valid, the commands contained within are converted into bytecode, a
    specialized code that is executed by the bytecode interpreter, a virtual machine
    written in C. The bytecode interpreter further converts the bytecode (which is
    contained within files that end with the extension `.pyc`) into the correct machine
    code for the computer being used, and then the CPU executes the script. This is
    a complex process, which allows Python to maintain a semblance of simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: There are other versions of the Python interpreter that have been written in
    Java (known as Jython) and in .NET (known as IronPython); these variants are used
    to write Python scripts in other computing environments and will not be addressed
    in this book. The ArcGIS installer includes the standard implementation of Python,
    which is also called CPython to distinguish it from these variants.
  prefs: []
  type: TYPE_NORMAL
- en: Where is the Python interpreter located?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The location of the Python interpreter within the folder structure of a computer
    is an important detail to master. Python is often downloaded directly from [www.python.org](http://www.python.org)
    and installed separately from ArcGIS. However, each ArcGIS version will require
    a specific version of Python; given this requirement, the inclusion of Python
    within the ArcGIS installation package is helpful. For this book, we will be using
    ArcGIS 10.2, and this will require Python 2.7.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Windows machine, the Python folder structure is placed directly on the
    C: drive, unless it is explicitly loaded on another drive. The installation process
    for ArcGIS 10.2 will create a folder at `C:\Python27`, which will contain another
    folder called either `ArcGIS10.2` or `ArcGIS10.2x64`, depending on the operating
    system and the version of ArcGIS that has been installed. For this book, I will
    be using the 32-bit version of ArcGIS, so the final folder path will be at `C:\Python27\ArcGIS10.2`.'
  prefs: []
  type: TYPE_NORMAL
- en: Within this folder are a number of subfolders, as well as `python.exe` (the
    Python interpreter). Also included is a second version of the interpreter called
    `pythonw.exe`. `Pythonw.exe` will execute a script without a terminal window with
    program feedback appearing. Both `python.exe` and `pythonw.exe` contain complete
    copies of all Python commands and can be used to execute a script.
  prefs: []
  type: TYPE_NORMAL
- en: Which Python interpreter should be used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The general rule to execute a script directly using the Python interpreters
    is to use `pythonw.exe`, as no terminal window will appear. When there is a need
    to test code snippets, or to see the output within a terminal window, start `python.exe`
    by double-clicking on the executable.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `python.exe` is started, a Python interpreter console will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Which Python interpreter should be used?](img/8662OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note the distinctive three chevrons (**>>>**) that appear below the header explaining
    version information. That is the Python prompt, where code is entered to be executed
    line by line, instead of in a completed script. This direct access to the interpreter
    is useful to test code snippets and understand syntax. A version of this interpreter,
    the Python Window, has been built into ArcMap and ArcCatalog since ArcGIS 10\.
    It will be discussed more in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How does the computer know where the interpreter is?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to execute Python scripts directly (that is, to make the scripts
    run by double-clicking on them), the computer will also need to know where the
    interpreter sits within its folder structure. To accomplish this requires both
    administrative account access and advanced knowledge of how Windows searches for
    a program. We will have to adjust an environment variable within the advanced
    system settings dialogue to register the interpreter with the system path.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Windows 7 machine, click on the start menu and right-click on **Computer**,
    then select **Properties** from the menu. On a Windows 8 machine, click on **Windows
    explorer** and right click on **This PC**, and select **Properties** from the
    menu. These commands are shortcuts to get to the **Control Panel''s System** and
    **Security/System** menus. Select **Advanced system** **settings** from the panel
    on the left. Click on the **Environment Variables** button at the bottom of the
    **System Properties** menu that appears. In the lower portion of the **Environment
    Variables** menu, scroll through the **System variables** window until the **Path**
    variable appears. Select it by clicking on it, and then clicking on the **Edit**
    button. The following window will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How does the computer know where the interpreter is?](img/8662OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This variable has two components: **Variable name** (path) and **Variable value**.
    The value is a series of folder paths separated by semicolons. This is the path
    that is searched when Windows looks for specific executables that have been associated
    with a file extension. In our case, we will be adding the folder path that contains
    the Python interpreter. Type `C:\Python27\ArcGIS10.2` (or the equivalent on your
    machine) into the **Variable value** field, making sure to separate it from the
    value before it with a semicolon. Click on **OK** to exit the **Edit** dialogue,
    and **OK** to exit the **Environment Variables** menu, and **OK** to exit the
    **System Properties** menu. The machine will now know where the Python interpreter
    is, as it will search all folders contained within the Path variable to look for
    an executable called Python. To test that the path adjustment worked correctly,
    open up a command window (Start menu/run `cmd`) and type `python`. The interpreter
    should directly run in the command window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How does the computer know where the interpreter is?](img/8662OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the Python header with version information and the triple chevron appears,
    the path adjustment has worked correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If there is no admin access available, there is a work around. In a command-line
    window, pass the entire path to the Python interpreter (`C:\Python27\ArcGIS10.2\python.exe`)
    to start the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Make Python scripts executable when clicked on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step in making the scripts run when double-clicked (which also means
    they can run outside of the ArcGIS environment, saving lots of memory overhead)
    is to associate files with the `.py` extension with the Python interpreter. If
    the scripts have not already been associated with the interpreter, they will appear
    as files of an unknown type or as a text file.
  prefs: []
  type: TYPE_NORMAL
- en: To change this, right-click on a **Python** script. Select **Open With**, and
    then select **Choose Default Program**. If `python.exe` or `pythonw.exe` does
    not appear as a choice, navigate to the folder that holds them (`C:\Python27\ArcGIS10.2`,
    in this case) and select either `python.exe` or `pythonw.exe`. Again, the difference
    between the two is the appearance of a terminal window when the scripts are run
    using `python.exe`, which will contain any output from the script (but this window
    will disappear when the script is done). I recommend using `pythonw.exe` when
    executing scripts, and `python.exe` to test code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python scripts can also explicitly call `pythonw.exe` by adjusting the extension
    to `.pyw` instead of `.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Integrated Development Environments (IDEs)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python interpreter contains everything that is needed to execute a Python
    script or to test Python code by interacting with the Python interpreter. However,
    writing scripts requires a text editor. There are usually at least two simple
    text editors included on a Windows machine (Notepad and Wordpad) and they work
    in an emergency to edit a script or even write a whole script. Unfortunately,
    they are very simple and do not allow the user functionality that would make it
    easier to write multiple scripts or very long scripts.
  prefs: []
  type: TYPE_NORMAL
- en: To bridge the gap, a series of programs collectively known as Integrated Development
    Environments have been developed. IDEs exist for all programming languages, and
    include functions such as variable listing, code assist, and more, that make them
    ideal to craft programming scripts. We will review a few of them to assess their
    usefulness to write Python scripts. The three discussed as follows are all free
    and well-established within different Python communities.
  prefs: []
  type: TYPE_NORMAL
- en: IDLE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python includes an IDE when it is installed. The IDE is called IDLE, which is
    a word play on both IDE and the name of a prominent member of Monty Python, Eric
    Idle. It can be started in Windows 7 by going to the Start menu and finding the
    ArcGIS folder within the **Programs** menu. Within the `Python` folder, IDLE will
    be one of the choices within that folder. Select it to start **IDLE**.
  prefs: []
  type: TYPE_NORMAL
- en: '![IDLE](img/8662OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IDLE contains an interactive interpreter (i.e. the triple chevron) and the ability
    to run complete Python scripts. It is also written using Python's built-in GUI
    module, called **Tkinter**, so it has the advantage of being written in the same
    language that it executes.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of using IDLE over the Python console (`python.exe`) is that
    any print statements or other script output is directed to the IDLE interactive
    window, which does not disappear after executing the script. IDLE is also lightweight
    with respect to memory use. Scripts are opened using a file dialogue contained
    within the **File** menu, and recently run scripts are listed within the **File**
    menu's, **Recent Files**.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of IDLE include a limited code assist (or code auto-complete),
    a useful IDE tool, and having no way to organize scripts into logical projects.
    There is no way to find all variables contained within a script, another useful
    feature of other IDEs. Also, the **Recent Files** menu has a limit on the number
    of scripts that it will list, making it harder to find a script that has not been
    run in months (which is a common occurrence, believe me!). IDLE is a passable
    IDE that is useful if no other programs can be installed on the machine. It is
    also very useful for rapid testing of code snippets. While it is not my main IDE,
    I find myself using IDLE almost daily.
  prefs: []
  type: TYPE_NORMAL
- en: PythonWin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PythonWin (short for Python for Windows) is available at [http://sourceforge.net/projects/pywin32/files/pywin32](http://sourceforge.net/projects/pywin32/files/pywin32),
    and includes both an IDE and helpful modules to use Python in a Windows environment.
    Select the newest build of **PythonWin**, and then select the correct version
    32 module based on the installed version of Python (for my machine, I selected
    `pywin32-218.win32-py2.7.exe`, the correct version for my 32-bit Python 2.7 installation).
    Run the executable, and if the correct version has been downloaded, the installation
    GUI will recognize Python 2.7 in the system registry and will install itself.
  prefs: []
  type: TYPE_NORMAL
- en: PythonWin includes an Interactive Window where the user can directly interact
    with the Python interpreter. Scripts can also be opened within PythonWin, and
    it includes a set of tiling commands in the Windows menu that allows the user
    to organize the display of all open scripts and the Interactive Window.
  prefs: []
  type: TYPE_NORMAL
- en: Another nice advantage that PythonWin has over IDLE is the ability to display
    different portions of a script within the same script window. If a script has
    grown too long, it can be a pain to scroll up and down the script when editing.
    PythonWin allows the user to pull down from the top of the script to create a
    second script window, which can focus on a separate part of the script. Also,
    on the left side, another window can be opened that will list Python classes and
    variables, making it easier to navigate to a particular section of the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![PythonWin](img/8662OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One small but helpful feature built into PythonWin's Interactive Window is the
    ability to search through previously entered code statements. At the triple chevron
    prompt, hold down the *Ctrl* key and use the up and down arrow keys to navigate
    through the lines to find one of interest. This saves a lot of time when testing
    a particular snippet of code.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, PythonWin is a useful and easy-to-use IDE, and most ArcGIS professionals
    who create Python scripts use PythonWin. The drawbacks I find with PythonWin include
    its lack of ability to organize scripts into projects, and its lack of a list
    of variables that exist within the script, which can be very helpful when navigating
    larger scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Aptana Studio 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes the tools of the greater programming community can seem daunting to
    new scripters, who are more focused on simply creating a script that will save
    time on a GIS analysis than using the correct tool for programming daily. It reminds
    me of inexperienced computer users, who don't feel like they need the full power
    of a top-of-the-line computer because they only want to browse the internet and
    send e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the exact opposite is true: the computer adverse is better off having
    an easier to use top-of-the-line computer, while an experienced computer user
    could make do with a net book.'
  prefs: []
  type: TYPE_NORMAL
- en: The same can be said for programmers and scripters. Sometimes, it's better to
    have an over-the-top IDE that will actually make a scripter more productive, while
    an experienced programmer could make do with Notepad. All of the bells and whistles
    included in an IDE such as Aptana Studio 3 will save scripters time and take remarkably
    little time to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Aptana Studio 3 is available at [http://aptana.com](http://aptana.com). Download
    and run the installer provided to install it. Choose a default main project folder
    that can contain all of the scripts projects; for this book, I created a folder
    called `C:\Projects`. For each project created, Aptana will create a project file
    holding information about each project. When using Aptana Studio at work, using
    a network folder can be useful as others can then access the projects with their
    respective Aptana installations.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has been installed, the next step is to create a `PyDev` project. Go
    to the **File** menu and select **New**, and then select **PyDev** project. When
    creating this first project, Python Interpreter will have to be added to Aptana's
    Python path. Aptana can support more than one interpreter; for our purposes, one
    will do. Go to the bottom of the PyDev project menu and click on **Click here**
    to configure an interpreter. When the **Preferences/Python Interpreters** menu
    appears, make sure to select **Interpreter-Python** on the left, and then click
    on **New** in the top-right menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Aptana Studio 3](img/8662OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once **New** has been selected, a small dialog will appear asking for a name
    for the interpreter and the path to the executable. Click on **browse** and navigate
    to the folder with `python.exe`. No terminal window will be generated when running
    a Python script using Aptana Studio as all output is redirected to the Aptana
    Studio console. Select `python.exe` and click on **OK**. Next, click on **OK**
    in the **Select Interpreter** menu, and then click on **OK** in the **Preferences**
    menu. Back in the **PyDev Project** menu, give the project a name, and either
    use the default workspace location or a custom one (for example, `C:\Projects`).
  prefs: []
  type: TYPE_NORMAL
- en: All of this configuration only has to happen the first time; once that is done,
    creating a **PyDev** project will only require giving a name and location. Now,
    all of the scripts associated with that project will always be listed in the left
    menu (**PyDev Package Explorer**), which is a very powerful way to organize projects
    and scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Making sure that Aptana Studio is in the PyDev perspective (in the **Windows/Open
    Perspective/Other** menu, choose **PyDev**) will give three main windows–**Package
    Explorer** on the left, **Script window** in the middle, and **Outline window**
    on the right, where variables contained within a script are listed. Clicking on
    one of the variables on the right will move the script window to that section
    of the code, making script navigation fast. Also, I like to add the Console window
    in the middle below the Script window, where the output of the script can be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Open scripts each have a tab within the Script window, making it easy to switch
    between the scripts. Also, the windows can be closed to give more room to the
    Script window as needed. Hovering over a variable within a script will call up
    a pop-up menu that describes where the variable was first created, which can be
    a lifesaver as it is easy to forget at times which variable is which (unless,
    of course, they are clearly named according to the rules described in the previous
    chapter; even then, it can be a pain at times).
  prefs: []
  type: TYPE_NORMAL
- en: IDE summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many other IDEs, both commercial and free, available for coding in
    Python. In the end, each GIS analyst must choose the tool that makes them feel
    productive and comfortable. This may change as programming becomes a bigger part
    of their daily work flow. Be sure to test out a few different IDEs to find one
    that is easy to use and intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: Python folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python's folder structure holds more than just the Python Interpreter. Within
    the subfolders reside a number of important scripts, digital link libraries, and
    even C language modules. Not all of the scripts are used all the time, but each
    has a role in making the Python programming environment possible. The most important
    folder to know about is the **site-packages** folder, where most modules that
    will be imported in Python scripts are contained.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python folder structure](img/8662OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Where modules reside
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within every Python folder is a folder called `Lib`, and within that folder
    is a folder called `site-packages`. On my machine, the folder sits at `C:\Python27\ArcGIS10.2\Lib\site-packages.`
    Almost all third-party modules are copied into this folder to be imported as needed.
    The main exception to this rule, for our purposes, is the ArcPy module, which
    is stored within the `ArcGIS` folder in the `Program Files` folder (for example,
    `C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`). To make that possible, the
    ArcGIS installer adjusts the Python system path (using the sys module) to make
    the arcPy module importable.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python's sys module to add a module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python's sys module is a module that allows the user to take advantage of system
    tools built into the Python Interpreter. One of the most useful of the functions
    in the sys module is `sys.path`. It is a list of file paths, which the user can
    modify to adjust where Python will look for a module to import, without needing
    administrative access.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Python 2.7 is installed by the ArcGIS 10.2 installer, the installer takes
    advantage of the `sys.path` functions to add `C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`
    to the system path. To test this, start the Python Interpreter or an IDE and type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The system path (stored in the variable `sys.path`) includes all of the folders
    that ArcPy requires to automate ArcGIS. The system path incorporates all directories
    listed in the PYTHONPATH environment variable (if one has been created); this
    is separate from the Windows path environment variable discussed previously. The
    two separate path variables work together to help Python locate modules.
  prefs: []
  type: TYPE_NORMAL
- en: The sys.path.append() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sys.path` function is a list (did you notice the square brackets in the
    preceding code output?) and as such can be appended or extended to include new
    file paths that will point to modules the user wants to import. To avoid the need
    to adjust `sys.path`, copy the module into the site-packages folder. When this
    is not possible, use the `sys.path.append()` method instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When the `sys.path.append()` method is used, the adjustment is temporary. Adjust
    the PYTHONPATH environment variable in the **Windows System Properties** menu
    (discussed in the path environment variable section) to make a permanent change
    (and create the PYTHONPATH if it has not been created).
  prefs: []
  type: TYPE_NORMAL
- en: One last note is that to import a module without adjusting the system path or
    copying the module into the site-packages folder, place the module in the folder
    with the script that is importing it. As long as the module is configured correctly,
    it will work normally. This is useful when there is no administrative access available
    to a machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot about how Python works to execute scripts
    and commands, and about development environments used to craft scripts. In particular,
    we discussed how a Python script is read and executed by the Python Interpreter,
    where the Python Interpreter is located within the Python folder structure, and
    what the different Python script extensions mean (`.py`, `.pyc`,`.pyw`). We also
    covered Integrated Development Environments and how they compare and contrast.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover how to use ModelBuilder to convert a modeled
    analysis into a Python script, and how to make it more powerful than the exported
    version.
  prefs: []
  type: TYPE_NORMAL
