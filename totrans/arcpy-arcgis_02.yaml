- en: Chapter 2. Configuring the Python Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：配置 Python 环境
- en: In this chapter, we will configure both Python and our computer to work together
    to execute Python scripts. Path variables and environment variables will be configured
    to ensure that import statements work as expected, and that scripts run when they
    are clicked on. The structure of the Python folder will be discussed, as will
    the location of the ArcPy module within the ArcGIS folder structure. We will also
    discuss **Integrated Development Environments** (**IDEs**), programs designed
    to assist in code creation and code execution, and compare and contrast existing
    IDEs to determine what benefits each IDE can offer when scripting Python code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将配置 Python 和我们的计算机，以便它们协同工作以执行 Python 脚本。我们将配置路径变量和环境变量，以确保导入语句按预期工作，并且当点击脚本时能够运行。我们将讨论
    Python 文件夹的结构，以及 ArcPy 模块在 ArcGIS 文件夹结构中的位置。我们还将讨论 **集成开发环境**（**IDEs**），这些程序旨在协助代码的创建和执行，并比较和对比现有的
    IDE，以确定每个 IDE 在编写 Python 脚本时可以提供哪些好处。
- en: 'This chapter will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: The location of the Python interpreter, and how it is called to execute a script
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 解释器的位置以及如何调用它来执行脚本
- en: Adjusting the computer's environment variables to ensure correct code execution
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整计算机的环境变量以确保正确执行代码
- en: Integrated Development Environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: Python's folder structure, with a focus on where modules are stored
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的文件夹结构，重点关注模块存储的位置
- en: What is a Python script?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 脚本？
- en: Let's start with the very basics of writing and executing a Python script. What
    is a Python script? It is a simple text file that contains a series of organized
    commands written in a formalized language. The text file has the extension `.py`,
    but other than that, there is nothing to distinguish it from any other text file.
    It can be opened using a text editor such as Notepad or Wordpad, but the magic
    that is Python does not reside in a Python script. Without the Python interpreter,
    a Python script cannot be run and the commands it contains cannot be executed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写和执行 Python 脚本的基础开始。什么是 Python 脚本？它是一个包含一系列按顺序编写的、用正式化语言编写的命令的简单文本文件。该文本文件的扩展名为
    `.py`，但除此之外，它与其他文本文件没有区别。它可以使用记事本或 Wordpad 等文本编辑器打开，但 Python 的魔力并不在于 Python 脚本中。没有
    Python 解释器，Python 脚本无法运行，其中的命令也无法执行。
- en: How Python executes a script
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 如何执行脚本
- en: Understanding how Python works to interpret a script and then execute the commands
    within is as important as understanding the Python language itself. Hours of debugging
    and error checking can be avoided by taking the time to set up Python correctly.
    The interpretive nature of Python means that a script will have to be first converted
    into bytecode before it can be executed. We will cover the steps that Python takes
    to achieve our goal of automating GIS analysis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Python 如何解释脚本并执行其中的命令，与理解 Python 语言本身一样重要。通过花时间正确设置 Python，可以避免数小时的调试和错误检查。Python
    的解释性意味着脚本必须首先转换为字节码，然后才能执行。我们将介绍 Python 实现自动化 GIS 分析目标所采取的步骤。
- en: What is the Python interpreter?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 解释器？
- en: The Python interpreter, on a Windows environment, is a program that has been
    compiled into a Windows executable, which has the extension `.exe`. The Python
    interpreter, `python.exe`, has been written in C, an older and extensively used
    programming language with a more difficult syntax.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 环境下，Python 解释器是一个编译成 Windows 可执行文件的程序，其扩展名为 `.exe`。Python 解释器 `python.exe`
    是用 C 语言编写的，这是一种较老且广泛使用的编程语言，其语法较为复杂。
- en: Programs written in C, which are also initially written as text files, must
    be converted into executables by a compiler, a specialized program that converts
    the text commands into machine code to create executable programs. This is a slow
    process that can make producing simple programs in C a laborious process. The
    benefit is that the programs produced are standalone programs capable of running
    without any dependencies. Python, on the other hand, interprets and executes the
    Python commands quickly, which makes it a great scripting language, but the scripts
    must be run through an interpreter and cannot be executed by themselves.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用C语言编写的程序，最初也是作为文本文件编写的，必须通过编译器转换成可执行文件，编译器是一种将文本命令转换成机器码以创建可执行程序的专用程序。这是一个缓慢的过程，可能会使C语言编写简单程序变得费力。好处是产生的程序是独立程序，可以在没有任何依赖的情况下运行。另一方面，Python快速解释和执行Python命令，这使得它成为一款优秀的脚本语言，但脚本必须通过解释器运行，不能单独执行。
- en: The Python interpreter, as its name implies, interprets commands contained within
    a Python script. When a Python script is run, or executed, the syntax is first
    checked to make sure that it conforms to the rules of Python (for example, indentation
    rules are followed and the variables follow naming conventions). Then, if the
    script is valid, the commands contained within are converted into bytecode, a
    specialized code that is executed by the bytecode interpreter, a virtual machine
    written in C. The bytecode interpreter further converts the bytecode (which is
    contained within files that end with the extension `.pyc`) into the correct machine
    code for the computer being used, and then the CPU executes the script. This is
    a complex process, which allows Python to maintain a semblance of simplicity.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所暗示的，Python解释器解释Python脚本中包含的命令。当运行或执行Python脚本时，首先检查其语法以确保它符合Python的规则（例如，遵循缩进规则，变量遵循命名约定）。然后，如果脚本有效，其中的命令会被转换成字节码，这是一种由字节码解释器执行的专用代码，字节码解释器是一个用C语言编写的虚拟机。字节码解释器进一步将字节码（包含在以`.pyc`扩展名结尾的文件中）转换成用于计算机的正确机器码，然后CPU执行脚本。这是一个复杂的过程，使得Python能够保持其简单的外观。
- en: There are other versions of the Python interpreter that have been written in
    Java (known as Jython) and in .NET (known as IronPython); these variants are used
    to write Python scripts in other computing environments and will not be addressed
    in this book. The ArcGIS installer includes the standard implementation of Python,
    which is also called CPython to distinguish it from these variants.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些Python解释器的版本是用Java编写的（称为Jython）和用.NET编写的（称为IronPython）；这些变体用于在其他计算环境中编写Python脚本，本书将不会涉及这些内容。ArcGIS安装程序包括Python的标准实现，也称为CPython，以区分这些变体。
- en: Where is the Python interpreter located?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python解释器的位置在哪里？
- en: The location of the Python interpreter within the folder structure of a computer
    is an important detail to master. Python is often downloaded directly from [www.python.org](http://www.python.org)
    and installed separately from ArcGIS. However, each ArcGIS version will require
    a specific version of Python; given this requirement, the inclusion of Python
    within the ArcGIS installation package is helpful. For this book, we will be using
    ArcGIS 10.2, and this will require Python 2.7.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机文件夹结构中Python解释器的位置是一个需要掌握的重要细节。Python通常直接从[www.python.org](http://www.python.org)下载并独立于ArcGIS安装。然而，每个ArcGIS版本都需要特定版本的Python；考虑到这一要求，将Python包含在ArcGIS安装包中是有帮助的。对于本书，我们将使用ArcGIS
    10.2，这将需要Python 2.7。
- en: 'On a Windows machine, the Python folder structure is placed directly on the
    C: drive, unless it is explicitly loaded on another drive. The installation process
    for ArcGIS 10.2 will create a folder at `C:\Python27`, which will contain another
    folder called either `ArcGIS10.2` or `ArcGIS10.2x64`, depending on the operating
    system and the version of ArcGIS that has been installed. For this book, I will
    be using the 32-bit version of ArcGIS, so the final folder path will be at `C:\Python27\ArcGIS10.2`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows机器上，Python文件夹结构直接放置在C:驱动器上，除非它被明确加载到其他驱动器上。ArcGIS 10.2的安装过程将在`C:\Python27`创建一个文件夹，该文件夹将包含一个名为`ArcGIS10.2`或`ArcGIS10.2x64`的文件夹，具体取决于操作系统和已安装的ArcGIS版本。对于本书，我将使用32位版本的ArcGIS，因此最终的文件夹路径将是`C:\Python27\ArcGIS10.2`。
- en: Within this folder are a number of subfolders, as well as `python.exe` (the
    Python interpreter). Also included is a second version of the interpreter called
    `pythonw.exe`. `Pythonw.exe` will execute a script without a terminal window with
    program feedback appearing. Both `python.exe` and `pythonw.exe` contain complete
    copies of all Python commands and can be used to execute a script.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件夹中包含多个子文件夹，以及 `python.exe`（Python 解释器）。还包括解释器的第二个版本，称为 `pythonw.exe`。`pythonw.exe`
    将在没有终端窗口且程序反馈出现的情况下执行脚本。`python.exe` 和 `pythonw.exe` 都包含所有 Python 命令的完整副本，可以用来执行脚本。
- en: Which Python interpreter should be used?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应使用哪个 Python 解释器？
- en: The general rule to execute a script directly using the Python interpreters
    is to use `pythonw.exe`, as no terminal window will appear. When there is a need
    to test code snippets, or to see the output within a terminal window, start `python.exe`
    by double-clicking on the executable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 解释器直接执行脚本的通用规则是使用 `pythonw.exe`，因为没有终端窗口会出现。当需要测试代码片段或需要在终端窗口中查看输出时，通过双击可执行文件来启动
    `python.exe`。
- en: 'When `python.exe` is started, a Python interpreter console will appear:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `python.exe` 启动时，将出现一个 Python 解释器控制台：
- en: '![Which Python interpreter should be used?](img/8662OS_02_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![应使用哪个 Python 解释器？](img/8662OS_02_01.jpg)'
- en: Note the distinctive three chevrons (**>>>**) that appear below the header explaining
    version information. That is the Python prompt, where code is entered to be executed
    line by line, instead of in a completed script. This direct access to the interpreter
    is useful to test code snippets and understand syntax. A version of this interpreter,
    the Python Window, has been built into ArcMap and ArcCatalog since ArcGIS 10\.
    It will be discussed more in later chapters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在版本信息说明下方出现的独特的三个箭头（**>>>**）。这是 Python 提示符，在这里输入代码逐行执行，而不是在一个完整的脚本中执行。这种直接访问解释器的方法对于测试代码片段和理解语法非常有用。自
    ArcGIS 10 以来，这种解释器版本，即 Python 窗口，已被集成到 ArcMap 和 ArcCatalog 中。这将在后面的章节中进一步讨论。
- en: How does the computer know where the interpreter is?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算机是如何知道解释器位置的？
- en: To be able to execute Python scripts directly (that is, to make the scripts
    run by double-clicking on them), the computer will also need to know where the
    interpreter sits within its folder structure. To accomplish this requires both
    administrative account access and advanced knowledge of how Windows searches for
    a program. We will have to adjust an environment variable within the advanced
    system settings dialogue to register the interpreter with the system path.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够直接执行 Python 脚本（即通过双击脚本使其运行），计算机还需要知道解释器在其文件夹结构中的位置。要完成此操作，需要管理员账户访问权限和对 Windows
    如何搜索程序的高级知识。我们必须在高级系统设置对话框中调整一个环境变量，以将解释器注册到系统路径中。
- en: 'On a Windows 7 machine, click on the start menu and right-click on **Computer**,
    then select **Properties** from the menu. On a Windows 8 machine, click on **Windows
    explorer** and right click on **This PC**, and select **Properties** from the
    menu. These commands are shortcuts to get to the **Control Panel''s System** and
    **Security/System** menus. Select **Advanced system** **settings** from the panel
    on the left. Click on the **Environment Variables** button at the bottom of the
    **System Properties** menu that appears. In the lower portion of the **Environment
    Variables** menu, scroll through the **System variables** window until the **Path**
    variable appears. Select it by clicking on it, and then clicking on the **Edit**
    button. The following window will appear:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 7 机器上，点击开始菜单，然后右键单击 **计算机**，从菜单中选择 **属性**。在 Windows 8 机器上，点击 **Windows
    资源管理器**，然后右键单击 **此电脑**，并从菜单中选择 **属性**。这些命令是获取 **控制面板的系统** 和 **安全/系统** 菜单的快捷方式。从左侧面板中选择
    **高级系统** **设置**。点击出现在 **系统属性** 菜单底部的 **环境变量** 按钮。在 **环境变量** 菜单的下半部分，滚动通过 **系统变量**
    窗口，直到出现 **Path** 变量。通过单击它，然后单击 **编辑** 按钮来选择它。以下窗口将出现：
- en: '![How does the computer know where the interpreter is?](img/8662OS_02_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![计算机是如何知道解释器位置的？](img/8662OS_02_02.jpg)'
- en: 'This variable has two components: **Variable name** (path) and **Variable value**.
    The value is a series of folder paths separated by semicolons. This is the path
    that is searched when Windows looks for specific executables that have been associated
    with a file extension. In our case, we will be adding the folder path that contains
    the Python interpreter. Type `C:\Python27\ArcGIS10.2` (or the equivalent on your
    machine) into the **Variable value** field, making sure to separate it from the
    value before it with a semicolon. Click on **OK** to exit the **Edit** dialogue,
    and **OK** to exit the **Environment Variables** menu, and **OK** to exit the
    **System Properties** menu. The machine will now know where the Python interpreter
    is, as it will search all folders contained within the Path variable to look for
    an executable called Python. To test that the path adjustment worked correctly,
    open up a command window (Start menu/run `cmd`) and type `python`. The interpreter
    should directly run in the command window:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量有两个组成部分：**变量名**（路径）和**变量值**。变量值是一系列用分号分隔的文件夹路径。这是当Windows查找与文件扩展名关联的特定可执行文件时搜索的路径。在我们的情况下，我们将添加包含Python解释器的文件夹路径。将`C:\Python27\ArcGIS10.2`（或您机器上的等效路径）输入到**变量值**字段中，确保用分号将其与之前的值分开。点击**确定**退出**编辑**对话框，然后点击**确定**退出**环境变量**菜单，最后点击**确定**退出**系统属性**菜单。现在，计算机将知道Python解释器的位置，因为它将搜索Path变量中包含的所有文件夹以查找名为Python的可执行文件。为了测试路径调整是否正确，打开命令窗口（开始菜单/运行`cmd`），然后输入`python`。解释器应该直接在命令窗口中运行：
- en: '![How does the computer know where the interpreter is?](img/8662OS_02_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![计算机如何知道解释器的位置？](img/8662OS_02_03.jpg)'
- en: If the Python header with version information and the triple chevron appears,
    the path adjustment has worked correctly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现带有版本信息和三重箭头的Python头文件，则路径调整已正确完成。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If there is no admin access available, there is a work around. In a command-line
    window, pass the entire path to the Python interpreter (`C:\Python27\ArcGIS10.2\python.exe`)
    to start the interpreter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有管理员访问权限，有一个解决方案。在命令行窗口中，传递Python解释器的完整路径（`C:\Python27\ArcGIS10.2\python.exe`）以启动解释器。
- en: Make Python scripts executable when clicked on
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击时使Python脚本可执行
- en: The final step in making the scripts run when double-clicked (which also means
    they can run outside of the ArcGIS environment, saving lots of memory overhead)
    is to associate files with the `.py` extension with the Python interpreter. If
    the scripts have not already been associated with the interpreter, they will appear
    as files of an unknown type or as a text file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使脚本在双击时运行（这也意味着它们可以在ArcGIS环境之外运行，从而节省大量内存开销），最后一步是将具有`.py`扩展名的文件与Python解释器关联起来。如果脚本尚未与解释器关联，它们将显示为未知类型的文件或文本文件。
- en: To change this, right-click on a **Python** script. Select **Open With**, and
    then select **Choose Default Program**. If `python.exe` or `pythonw.exe` does
    not appear as a choice, navigate to the folder that holds them (`C:\Python27\ArcGIS10.2`,
    in this case) and select either `python.exe` or `pythonw.exe`. Again, the difference
    between the two is the appearance of a terminal window when the scripts are run
    using `python.exe`, which will contain any output from the script (but this window
    will disappear when the script is done). I recommend using `pythonw.exe` when
    executing scripts, and `python.exe` to test code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改此设置，右键单击一个**Python**脚本。选择**打开方式**，然后选择**选择默认程序**。如果`python.exe`或`pythonw.exe`没有作为选项出现，导航到包含它们的文件夹（在这种情况下为`C:\Python27\ArcGIS10.2`）并选择`python.exe`或`pythonw.exe`。再次强调，两者之间的区别在于使用`python.exe`运行脚本时会出现终端窗口，该窗口将包含脚本的任何输出（但脚本完成后此窗口将消失）。我建议在执行脚本时使用`pythonw.exe`，在测试代码时使用`python.exe`。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Python scripts can also explicitly call `pythonw.exe` by adjusting the extension
    to `.pyw` instead of `.py`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本也可以通过将扩展名调整为`.pyw`而不是`.py`来显式调用`pythonw.exe`。
- en: Integrated Development Environments (IDEs)
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）
- en: The Python interpreter contains everything that is needed to execute a Python
    script or to test Python code by interacting with the Python interpreter. However,
    writing scripts requires a text editor. There are usually at least two simple
    text editors included on a Windows machine (Notepad and Wordpad) and they work
    in an emergency to edit a script or even write a whole script. Unfortunately,
    they are very simple and do not allow the user functionality that would make it
    easier to write multiple scripts or very long scripts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器包含执行 Python 脚本或通过交互与 Python 解释器进行交互以测试 Python 代码所需的一切。然而，编写脚本需要文本编辑器。通常，Windows
    机器上至少包含两个简单的文本编辑器（记事本和写字板），它们可以在紧急情况下编辑脚本，甚至编写整个脚本。不幸的是，它们非常简单，不允许用户执行使编写多个脚本或非常长的脚本更容易的功能。
- en: To bridge the gap, a series of programs collectively known as Integrated Development
    Environments have been developed. IDEs exist for all programming languages, and
    include functions such as variable listing, code assist, and more, that make them
    ideal to craft programming scripts. We will review a few of them to assess their
    usefulness to write Python scripts. The three discussed as follows are all free
    and well-established within different Python communities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了弥合这一差距，一系列被称为集成开发环境（IDE）的程序被开发出来。所有编程语言都有 IDE，包括变量列表、代码辅助等功能，使它们非常适合编写编程脚本。我们将回顾其中的一些，以评估它们在编写
    Python 脚本方面的有用性。以下讨论的三个都是免费的，并在不同的 Python 社区中建立了良好的声誉。
- en: IDLE
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDLE
- en: Python includes an IDE when it is installed. The IDE is called IDLE, which is
    a word play on both IDE and the name of a prominent member of Monty Python, Eric
    Idle. It can be started in Windows 7 by going to the Start menu and finding the
    ArcGIS folder within the **Programs** menu. Within the `Python` folder, IDLE will
    be one of the choices within that folder. Select it to start **IDLE**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 安装时，它包含一个 IDE。这个 IDE 被称为 IDLE，这个名字是对 IDE 和 Monty Python 的一位杰出成员埃里克·艾德尔（Eric
    Idle）名字的双关语。在 Windows 7 中，可以通过转到开始菜单并找到 **程序** 菜单中的 ArcGIS 文件夹来启动它。在 `Python`
    文件夹中，IDLE 将是该文件夹中的一个选项。选择它以启动 **IDLE**。
- en: '![IDLE](img/8662OS_02_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![IDLE](img/8662OS_02_04.jpg)'
- en: IDLE contains an interactive interpreter (i.e. the triple chevron) and the ability
    to run complete Python scripts. It is also written using Python's built-in GUI
    module, called **Tkinter**, so it has the advantage of being written in the same
    language that it executes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 包含一个交互式解释器（即三重箭头）和运行完整 Python 脚本的能力。它还使用 Python 内置的 GUI 模块 **Tkinter**
    编写，因此它具有使用执行同一语言的优势。
- en: Another advantage of using IDLE over the Python console (`python.exe`) is that
    any print statements or other script output is directed to the IDLE interactive
    window, which does not disappear after executing the script. IDLE is also lightweight
    with respect to memory use. Scripts are opened using a file dialogue contained
    within the **File** menu, and recently run scripts are listed within the **File**
    menu's, **Recent Files**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IDLE 而不是 Python 控制台（`python.exe`）的另一个优点是，任何打印语句或其他脚本输出都会被定向到 IDLE 交互窗口，该窗口在执行脚本后不会消失。与内存使用相比，IDLE
    也非常轻量。脚本通过 **文件** 菜单中的文件对话框打开，最近运行的脚本列在 **文件** 菜单的 **最近文件** 中。
- en: Disadvantages of IDLE include a limited code assist (or code auto-complete),
    a useful IDE tool, and having no way to organize scripts into logical projects.
    There is no way to find all variables contained within a script, another useful
    feature of other IDEs. Also, the **Recent Files** menu has a limit on the number
    of scripts that it will list, making it harder to find a script that has not been
    run in months (which is a common occurrence, believe me!). IDLE is a passable
    IDE that is useful if no other programs can be installed on the machine. It is
    also very useful for rapid testing of code snippets. While it is not my main IDE,
    I find myself using IDLE almost daily.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE 的缺点包括有限的代码辅助（或代码自动完成），这是一个有用的 IDE 工具，以及没有方法将脚本组织成逻辑项目。无法找到脚本中包含的所有变量，这是其他
    IDE 的另一个有用功能。此外，**最近文件**菜单对列出的脚本数量有限制，这使得找到几个月未运行的脚本变得更加困难（相信我，这是常见的情况！）如果机器上无法安装其他程序，IDLE
    是一个可用的 IDE。它也非常适用于快速测试代码片段。虽然它不是我的主要 IDE，但我发现自己几乎每天都在使用 IDLE。
- en: PythonWin
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PythonWin
- en: PythonWin (short for Python for Windows) is available at [http://sourceforge.net/projects/pywin32/files/pywin32](http://sourceforge.net/projects/pywin32/files/pywin32),
    and includes both an IDE and helpful modules to use Python in a Windows environment.
    Select the newest build of **PythonWin**, and then select the correct version
    32 module based on the installed version of Python (for my machine, I selected
    `pywin32-218.win32-py2.7.exe`, the correct version for my 32-bit Python 2.7 installation).
    Run the executable, and if the correct version has been downloaded, the installation
    GUI will recognize Python 2.7 in the system registry and will install itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PythonWin（即Python for Windows）可在[http://sourceforge.net/projects/pywin32/files/pywin32](http://sourceforge.net/projects/pywin32/files/pywin32)找到，并包括用于在Windows环境中使用Python的IDE和有用的模块。选择**PythonWin**的最新构建版本，然后根据已安装的Python版本选择正确的32位模块（对于我的机器，我选择了`pywin32-218.win32-py2.7.exe`，这是我的32位Python
    2.7安装的正确版本）。运行可执行文件，如果已下载正确版本，安装GUI将识别系统注册表中的Python 2.7并自动安装。
- en: PythonWin includes an Interactive Window where the user can directly interact
    with the Python interpreter. Scripts can also be opened within PythonWin, and
    it includes a set of tiling commands in the Windows menu that allows the user
    to organize the display of all open scripts and the Interactive Window.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: PythonWin包括一个交互式窗口，用户可以直接与Python解释器交互。脚本也可以在PythonWin中打开，它包括Windows菜单中的一组平铺命令，允许用户组织所有打开的脚本和交互式窗口的显示。
- en: Another nice advantage that PythonWin has over IDLE is the ability to display
    different portions of a script within the same script window. If a script has
    grown too long, it can be a pain to scroll up and down the script when editing.
    PythonWin allows the user to pull down from the top of the script to create a
    second script window, which can focus on a separate part of the script. Also,
    on the left side, another window can be opened that will list Python classes and
    variables, making it easier to navigate to a particular section of the script.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PythonWin相较于IDLE的另一个优点是能够在同一脚本窗口中显示脚本的各个部分。如果一个脚本变得过长，在编辑时上下滚动脚本可能会很麻烦。PythonWin允许用户从脚本顶部下拉以创建第二个脚本窗口，该窗口可以专注于脚本的另一部分。此外，在左侧还可以打开另一个窗口，该窗口将列出Python类和变量，这使得导航到脚本特定部分变得更加容易。
- en: '![PythonWin](img/8662OS_02_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![PythonWin](img/8662OS_02_05.jpg)'
- en: One small but helpful feature built into PythonWin's Interactive Window is the
    ability to search through previously entered code statements. At the triple chevron
    prompt, hold down the *Ctrl* key and use the up and down arrow keys to navigate
    through the lines to find one of interest. This saves a lot of time when testing
    a particular snippet of code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: PythonWin的交互式窗口中集成了一个小巧但实用的功能，即能够搜索之前输入的代码语句。在三个箭头提示符下，按住*Ctrl*键，使用上下箭头键在行之间导航，以找到感兴趣的行。这在测试特定代码片段时可以节省大量时间。
- en: All in all, PythonWin is a useful and easy-to-use IDE, and most ArcGIS professionals
    who create Python scripts use PythonWin. The drawbacks I find with PythonWin include
    its lack of ability to organize scripts into projects, and its lack of a list
    of variables that exist within the script, which can be very helpful when navigating
    larger scripts.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，PythonWin是一个有用且易于使用的IDE，大多数创建Python脚本的ArcGIS专业人士都使用PythonWin。我发现PythonWin的缺点包括无法将脚本组织到项目中，以及缺少脚本中存在的变量列表，这在导航大型脚本时非常有帮助。
- en: Aptana Studio 3
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Aptana Studio 3
- en: Sometimes the tools of the greater programming community can seem daunting to
    new scripters, who are more focused on simply creating a script that will save
    time on a GIS analysis than using the correct tool for programming daily. It reminds
    me of inexperienced computer users, who don't feel like they need the full power
    of a top-of-the-line computer because they only want to browse the internet and
    send e-mails.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，大型编程社区的工具有时会令新脚本编写者感到畏惧，他们更关注于简单地创建一个可以节省GIS分析时间的脚本，而不是使用正确的编程工具。这让我想起了不熟练的计算机用户，他们觉得自己不需要顶级的计算机，因为他们只想浏览互联网和发送电子邮件。
- en: 'However, the exact opposite is true: the computer adverse is better off having
    an easier to use top-of-the-line computer, while an experienced computer user
    could make do with a net book.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实正好相反：对计算机不熟悉的用户使用易于使用的顶级计算机会更好，而经验丰富的计算机用户可以用上网本来满足需求。
- en: The same can be said for programmers and scripters. Sometimes, it's better to
    have an over-the-top IDE that will actually make a scripter more productive, while
    an experienced programmer could make do with Notepad. All of the bells and whistles
    included in an IDE such as Aptana Studio 3 will save scripters time and take remarkably
    little time to learn.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员和脚本编写者来说，也是如此。有时，拥有一个功能强大的 IDE 会更有效，它实际上会使脚本编写者更有效率，而经验丰富的程序员可能只需要记事本。Aptana
    Studio 3 等 IDE 中包含的所有功能都会节省脚本编写者的时间，并且学习起来所需的时间非常少。
- en: Aptana Studio 3 is available at [http://aptana.com](http://aptana.com). Download
    and run the installer provided to install it. Choose a default main project folder
    that can contain all of the scripts projects; for this book, I created a folder
    called `C:\Projects`. For each project created, Aptana will create a project file
    holding information about each project. When using Aptana Studio at work, using
    a network folder can be useful as others can then access the projects with their
    respective Aptana installations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Aptana Studio 3 可在 [http://aptana.com](http://aptana.com) 获取。下载并运行提供的安装程序来安装它。选择一个默认的主项目文件夹，该文件夹可以包含所有脚本项目；为此书，我创建了一个名为`C:\Projects`的文件夹。对于创建的每个项目，Aptana
    将创建一个包含每个项目信息的项目文件。在工作时使用 Aptana Studio，使用网络文件夹可能很有用，因为其他人可以使用他们各自的 Aptana 安装访问项目。
- en: Once it has been installed, the next step is to create a `PyDev` project. Go
    to the **File** menu and select **New**, and then select **PyDev** project. When
    creating this first project, Python Interpreter will have to be added to Aptana's
    Python path. Aptana can support more than one interpreter; for our purposes, one
    will do. Go to the bottom of the PyDev project menu and click on **Click here**
    to configure an interpreter. When the **Preferences/Python Interpreters** menu
    appears, make sure to select **Interpreter-Python** on the left, and then click
    on **New** in the top-right menu.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，下一步是创建一个`PyDev`项目。转到**文件**菜单，选择**新建**，然后选择**PyDev**项目。在创建第一个项目时，必须将 Python
    解释器添加到 Aptana 的 Python 路径中。Aptana 可以支持多个解释器；就我们的目的而言，一个就足够了。转到 PyDev 项目菜单底部，点击**点击此处**来配置一个解释器。当出现**首选项/Python
    解释器**菜单时，请确保在左侧选择**解释器-Python**，然后在右上角的菜单中点击**新建**。
- en: '![Aptana Studio 3](img/8662OS_02_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Aptana Studio 3](img/8662OS_02_06.jpg)'
- en: Once **New** has been selected, a small dialog will appear asking for a name
    for the interpreter and the path to the executable. Click on **browse** and navigate
    to the folder with `python.exe`. No terminal window will be generated when running
    a Python script using Aptana Studio as all output is redirected to the Aptana
    Studio console. Select `python.exe` and click on **OK**. Next, click on **OK**
    in the **Select Interpreter** menu, and then click on **OK** in the **Preferences**
    menu. Back in the **PyDev Project** menu, give the project a name, and either
    use the default workspace location or a custom one (for example, `C:\Projects`).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**新建**后，将出现一个小的对话框，要求输入解释器的名称和可执行文件的路径。点击**浏览**并导航到包含`python.exe`的文件夹。使用 Aptana
    Studio 运行 Python 脚本时不会生成终端窗口，因为所有输出都重定向到 Aptana Studio 控制台。选择`python.exe`并点击**确定**。接下来，在**选择解释器**菜单中点击**确定**，然后在**首选项**菜单中点击**确定**。回到**PyDev
    项目**菜单，为项目命名，并使用默认的工作区位置或自定义位置（例如，`C:\Projects`）。
- en: All of this configuration only has to happen the first time; once that is done,
    creating a **PyDev** project will only require giving a name and location. Now,
    all of the scripts associated with that project will always be listed in the left
    menu (**PyDev Package Explorer**), which is a very powerful way to organize projects
    and scripts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些配置只需进行一次；一旦完成，创建一个**PyDev**项目就只需要提供一个名称和位置。现在，与该项目相关的所有脚本都将始终列在左侧菜单中（**PyDev
    包资源管理器**），这是一种非常强大的组织和脚本项目的方法。
- en: Making sure that Aptana Studio is in the PyDev perspective (in the **Windows/Open
    Perspective/Other** menu, choose **PyDev**) will give three main windows–**Package
    Explorer** on the left, **Script window** in the middle, and **Outline window**
    on the right, where variables contained within a script are listed. Clicking on
    one of the variables on the right will move the script window to that section
    of the code, making script navigation fast. Also, I like to add the Console window
    in the middle below the Script window, where the output of the script can be displayed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Aptana Studio处于PyDev视角（在**Windows/打开视角/其他**菜单中，选择**PyDev**）将提供三个主要窗口–左侧的**包资源管理器**，中间的**脚本窗口**，以及右侧的**大纲窗口**，其中列出了脚本中包含的变量。点击右侧的任何一个变量，将脚本窗口移动到代码的该部分，使脚本导航变得快速。此外，我习惯在脚本窗口下方中间添加控制台窗口，以便显示脚本的输出。
- en: Open scripts each have a tab within the Script window, making it easy to switch
    between the scripts. Also, the windows can be closed to give more room to the
    Script window as needed. Hovering over a variable within a script will call up
    a pop-up menu that describes where the variable was first created, which can be
    a lifesaver as it is easy to forget at times which variable is which (unless,
    of course, they are clearly named according to the rules described in the previous
    chapter; even then, it can be a pain at times).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 打开的脚本在脚本窗口中都有一个标签，这使得在脚本之间切换变得容易。此外，根据需要，窗口可以被关闭，以给脚本窗口腾出更多空间。将鼠标悬停在脚本中的变量上，将弹出一个菜单，描述变量首次创建的位置，这在某些时候可以救命，因为有时很容易忘记哪个变量是哪个（除非，当然，它们根据前一章中描述的规则被清楚地命名；即使如此，有时也会很痛苦）。
- en: IDE summary
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE 概述
- en: There are many other IDEs, both commercial and free, available for coding in
    Python. In the end, each GIS analyst must choose the tool that makes them feel
    productive and comfortable. This may change as programming becomes a bigger part
    of their daily work flow. Be sure to test out a few different IDEs to find one
    that is easy to use and intuitive.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他IDE，包括商业和免费的，都可用于Python编码。最终，每个GIS分析师都必须选择使他们感到高效和舒适的工具。随着编程成为他们日常工作流程中更大的一部分，这可能会改变。务必尝试几个不同的IDE，以找到易于使用且直观的IDE。
- en: Python folder structure
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python文件夹结构
- en: Python's folder structure holds more than just the Python Interpreter. Within
    the subfolders reside a number of important scripts, digital link libraries, and
    even C language modules. Not all of the scripts are used all the time, but each
    has a role in making the Python programming environment possible. The most important
    folder to know about is the **site-packages** folder, where most modules that
    will be imported in Python scripts are contained.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Python的文件夹结构不仅包含Python解释器。在子文件夹中驻留了许多重要的脚本、数字链接库，甚至C语言模块。并非所有脚本都始终使用，但每个脚本都在使Python编程环境成为可能中扮演着角色。最重要的文件夹是**site-packages**文件夹，其中包含大多数将在Python脚本中导入的模块。
- en: '![Python folder structure](img/8662OS_02_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Python文件夹结构](img/8662OS_02_07.jpg)'
- en: Where modules reside
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块所在位置
- en: Within every Python folder is a folder called `Lib`, and within that folder
    is a folder called `site-packages`. On my machine, the folder sits at `C:\Python27\ArcGIS10.2\Lib\site-packages.`
    Almost all third-party modules are copied into this folder to be imported as needed.
    The main exception to this rule, for our purposes, is the ArcPy module, which
    is stored within the `ArcGIS` folder in the `Program Files` folder (for example,
    `C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`). To make that possible, the
    ArcGIS installer adjusts the Python system path (using the sys module) to make
    the arcPy module importable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个Python文件夹中都有一个名为`Lib`的文件夹，在该文件夹中有一个名为`site-packages`的文件夹。在我的机器上，该文件夹位于`C:\Python27\ArcGIS10.2\Lib\site-packages.`几乎所有的第三方模块都被复制到这个文件夹中，以便按需导入。对于我们来说，这个规则的主要例外是ArcPy模块，它存储在`Program
    Files`文件夹中的`ArcGIS`文件夹内（例如，`C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`）。为了实现这一点，ArcGIS安装程序调整了Python系统路径（使用sys模块），以便arcPy模块可导入。
- en: Using Python's sys module to add a module
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python的sys模块添加模块
- en: Python's sys module is a module that allows the user to take advantage of system
    tools built into the Python Interpreter. One of the most useful of the functions
    in the sys module is `sys.path`. It is a list of file paths, which the user can
    modify to adjust where Python will look for a module to import, without needing
    administrative access.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python的sys模块是一个允许用户利用Python解释器内建的系统工具的模块。sys模块中最有用的函数之一是 `sys.path`。它是一个文件路径列表，用户可以修改它以调整Python查找导入模块的位置，而无需管理员访问权限。
- en: 'When Python 2.7 is installed by the ArcGIS 10.2 installer, the installer takes
    advantage of the `sys.path` functions to add `C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`
    to the system path. To test this, start the Python Interpreter or an IDE and type
    the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当ArcGIS 10.2安装程序安装Python 2.7时，安装程序利用 `sys.path` 函数将 `C:\Program Files (x86)\ArcGIS\Desktop10.2\arcpy`
    添加到系统路径。为了测试这一点，启动Python解释器或IDE，并输入以下内容：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The system path (stored in the variable `sys.path`) includes all of the folders
    that ArcPy requires to automate ArcGIS. The system path incorporates all directories
    listed in the PYTHONPATH environment variable (if one has been created); this
    is separate from the Windows path environment variable discussed previously. The
    two separate path variables work together to help Python locate modules.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 系统路径（存储在变量 `sys.path` 中）包括ArcPy所需的全部文件夹，以自动化ArcGIS。系统路径包含PYTHONPATH环境变量中列出的所有目录（如果已创建）；这不同于之前讨论的Windows路径环境变量。这两个独立的路径变量协同工作，以帮助Python定位模块。
- en: The sys.path.append() method
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`sys.path.append()` 方法'
- en: 'The `sys.path` function is a list (did you notice the square brackets in the
    preceding code output?) and as such can be appended or extended to include new
    file paths that will point to modules the user wants to import. To avoid the need
    to adjust `sys.path`, copy the module into the site-packages folder. When this
    is not possible, use the `sys.path.append()` method instead:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys.path` 函数是一个列表（你注意到前面代码输出中的方括号了吗？）因此可以添加或扩展以包含指向用户想要导入的模块的新文件路径。为了避免调整
    `sys.path` 的需要，将模块复制到 site-packages 文件夹中。当这不可能时，使用 `sys.path.append()` 方法代替：'
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the `sys.path.append()` method is used, the adjustment is temporary. Adjust
    the PYTHONPATH environment variable in the **Windows System Properties** menu
    (discussed in the path environment variable section) to make a permanent change
    (and create the PYTHONPATH if it has not been created).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `sys.path.append()` 方法时，调整是临时的。在 **Windows系统属性** 菜单中调整 PYTHONPATH 环境变量（在路径环境变量部分讨论过）以进行永久更改（如果尚未创建，则创建
    PYTHONPATH）。
- en: One last note is that to import a module without adjusting the system path or
    copying the module into the site-packages folder, place the module in the folder
    with the script that is importing it. As long as the module is configured correctly,
    it will work normally. This is useful when there is no administrative access available
    to a machine.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点是，为了在不调整系统路径或复制模块到site-packages文件夹的情况下导入模块，请将模块放置在包含导入脚本的文件夹中。只要模块配置正确，它就会正常工作。这在没有对机器的行政访问权限时非常有用。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a lot about how Python works to execute scripts
    and commands, and about development environments used to craft scripts. In particular,
    we discussed how a Python script is read and executed by the Python Interpreter,
    where the Python Interpreter is located within the Python folder structure, and
    what the different Python script extensions mean (`.py`, `.pyc`,`.pyw`). We also
    covered Integrated Development Environments and how they compare and contrast.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了大量关于Python如何执行脚本和命令的知识，以及用于编写脚本的开发环境。特别是，我们讨论了Python脚本是如何被Python解释器读取和执行的，Python解释器位于Python文件夹结构中的位置，以及不同的Python脚本扩展名（`.py`、`.pyc`、`.pyw`）分别代表什么。我们还介绍了集成开发环境以及它们之间的比较和对比。
- en: In the next chapter, we will cover how to use ModelBuilder to convert a modeled
    analysis into a Python script, and how to make it more powerful than the exported
    version.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何使用ModelBuilder将建模分析转换为Python脚本，以及如何使其比导出版本更强大。
