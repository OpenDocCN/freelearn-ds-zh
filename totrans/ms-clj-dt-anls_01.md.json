["```py\n(defproject network-six \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n    :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :plugins [[lein-cljsbuild \"0.3.2\"]]\n  :dependencies [[org.slf4j/slf4j-simple \"1.7.5\"]\n    [org.clojure/clojure \"1.5.1\"]\n    [org.clojure/data.json \"0.2.2\"]\n    [me.raynes/fs \"1.4.4\"]\n    [org.clojure/clojurescript \"0.0-2202\"]]\n  :cljsbuild {:builds [{:source-paths [\"src-cljs\"],\n    :compiler {:pretty-printer true,\n      :output-to \"www/js/main.js\",\n      :optimizations :whitespace}}]})\n```", "```py\n(ns network-six.graph\n  (:require [clojure.set :as set]\n            [clojure.core.reducers :as r]\n            [clojure.data.json :as json]\n            [clojure.java.io :as io]\n            [clojure.set :as set]\n            [network-six.util :as u]))\n```", "```py\n(defrecord Graph\n  [neighbors data])\n(def empty-graph (Graph. {} {}))\n```", "```py\n(defn update-conj [s x]\n  (conj (if (nil? s) #{} s) x))\n(defn add\n  ([g x y] (add g x y false))\n  ([g x y bidirectional?]\n   ((if bidirectional? #(add % y x false) identity)\n      (update-in g [:neighbors x] #(update-conj % y)))))\n(defn delete\n  ([g x y] (delete g x y false))\n  ([g x y bidirectional?]\n   ((if bidirectional? #(delete % y x false) identity)\n      (update-in g [:neighbors x] #(disj % y)))))\n(defn merge-graphs [a b]\n  (Graph. (merge-with set/union (:neighbors a) (:neighbors b))\n          (merge (:data a) (:data b))))\n```", "```py\n(defn get-value\n  ([g x] ((:data g) x))\n  ([g x k] ((get-value g x) k)))\n(defn set-value\n  ([g x v] (assoc-in g [:data x] v))\n  ([g x k v] (set-value g x (assoc (get-value g x) k v))))\n(defn update-value\n  ([g x f] (set-value g x (f (get-value g x))))\n  ([g x k f] (set-value g x k (f (get-value g x k)))))\n```", "```py\n(defn get-vertices [graph]\n  (reduce set/union (set (keys (:neighbors graph)))\n          (vals (:neighbors graph))))\n(defn get-edges [graph]\n  (let [pair-edges (fn [[v neighbors]]\n                     (map #(vector v %) neighbors))]\n    (mapcat pair-edges (:neighbors graph))))\n```", "```py\n(defn bf-seq\n  ([get-neighbors a]\n   (bf-seq\n     get-neighbors\n     (conj clojure.lang.PersistentQueue/EMPTY [a])\n     #{a}))\n  ([get-neighbors q seen]\n   (lazy-seq\n     (when-not (empty? q)\n       (let [current (first q)\n             nbors (remove seen (get-neighbors (last current)))]\n         (cons current\n               (bf-seq get-neighbors\n                       (into (pop q)\n                             (map #(conj current %) nbors))\n                       (into seen nbors))))))))\n(defn breadth-first [graph a]\n  (bf-seq (:neighbors graph) a))\n```", "```py\n(defn bfs [graph a b]\n  (first (filter #(= (last %) b) (breadth-first graph a))))\n```", "```py\n236 186\n122 285\n24 346\n271 304\n176 9\n```", "```py\n(ns network-six.ego\n  (:require [clojure.java.io :as io]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.data.json :as json]\n            [clojure.core.reducers :as r]\n            [network-six.graph :as g]\n            [network-six.util :as u]\n            [me.raynes.fs :as fs])\n  (:import [java.io File]))\n```", "```py\n(defn read-edge-file [filename]\n  (with-open [f (io/reader filename)]\n    (->>\n      f\n      line-seq\n      (r/map #(string/split % #\"\\s+\"))\n      (r/map #(mapv (fn [x] (Long/parseLong x)) %))\n      (r/reduce #(g/add %1 (first %2) (second %2))\n                g/empty-graph))))\n(defn read-edge-files [ego-dir]\n  (r/reduce g/merge-graphs {}\n            (r/map read-edge-file\n                   (fs/find-files ego-dir #\".*\\.edges$\"))))\n```", "```py\nUser=> (require '[network-six.graph :as g]\n                '[network-six.ego :as ego])\nuser=> (def graph (ego/read-edge-files \"facebook/\"))\n#'user/graph\nuser=> (count (g/get-vertices graph))\n3959\nuser=> (count (g/get-edges graph))\n168486\n```", "```py\n(defn density [graph]\n  (let [n (count (get-vertices graph))\n        e (count (get-edges graph))]\n    (/ (* 2.0 e) (* n (dec n)))))\n```", "```py\nuser=> (g/density graph)\n0.021504657198130255\n```", "```py\n(defn avg-degree [graph]\n  (/ (* 2.0 (count (get-edges graph)))\n     (count (get-vertices graph))))\n```", "```py\nuser=> (g/avg-degree graph)\n85.11543319019954\n```", "```py\n(defn find-all-paths [graph]\n  (->> graph\n    get-vertices\n    (mapcat #(breadth-first graph %))\n    (map #(hash-map :start (first %) :dest (last %) :path %))))\n```", "```py\nuser=> (double\n         (u/mean\n           (map count (map :path (g/iter-paths \"path.json\")))))\n6.525055748717483\n```", "```py\nuser=> (reduce\n         max Integer/MIN_VALUE\n         (map count (map :path (g/iter-paths \"path.json\"))))\n18\n```", "```py\n(defn clustering-coeff [graph n]\n  (let [cluster ((:neighbors graph) n)\n        edges (filter cluster (mapcat (:neighbors graph) cluster))\n        e (count edges)\n        k (count cluster)]\n    (if (= k 1)\n      0\n      (/ (* 2.0 e) (* k (dec k))))))\n```", "```py\nuser=> (g/avg-cluster-coeff graph)\n1.0874536731229358\n```", "```py\n(defn accum-betweenness\n  [{:keys [paths betweenness reachable]} [v v-paths]]\n  (let [v-paths (filter #(> (count %) 1) v-paths)]\n    {:paths (+ paths (count v-paths)),\n     :betweenness (merge-with +\n                              betweenness\n                              (frequencies (flatten v-paths))),\n     :reachable (assoc reachable v (count v-paths))}))\n```", "```py\n(defn ->ratio [total [k c]]\n  [k (double (/ c total))])\n(defn finish-betweenness\n  [{:keys [paths betweenness reachable] :as metrics}]\n  (assoc metrics\n         :betweenness (->> betweenness\n                        (map #(->ratio paths %))\n                        (into {}))\n         :reachable (->> reachable\n                      (map #(->ratio paths %))\n                      (into {}))))\n```", "```py\n(defn metrics [graph]\n  (let [mzero {:paths 0, :betweenness {}, :reachable {}}]\n    (->> graph\n      get-vertices\n      (pmap #(vector % (breadth-first graph %)))\n      (reduce accum-betweenness mzero)\n      finish-betweenness)))\n```", "```py\nuser=> (def m (g/metrics graph))\nuser=> ((:betweenness m) 0)\n5.092923145895773E-4\n```", "```py\nuser=> (take 5 (reverse (sort-by second (seq (:betweenness m)))))\n([1085 0.2541568423150047] [1718 0.1508391907570839] [1577 0.1228894724115601] [698 0.09236806137867479] [1505 0.08172539570689669])\n```", "```py\n(defn degrees-between [graph n from]\n  (let [neighbors (:neighbors graph)]\n    (loop [d [{:degree 0, :neighbors #{from}}],\n           seen #{from}]\n      (let [{:keys [degree neighbors]} (last d)]\n        (if (= degree n)\n          d\n          (let [next-neighbors (->> neighbors\n                             (mapcat (:neighbors graph))\n                             (remove seen)\n                             set)]\n          (recur (conj d {:degree (inc degree)\n                            :neighbors next-neighbors})\n                   (into seen next-neighbors))))))))\n```", "```py\n(defn store-degrees-between\n  ([graph degrees]\n   (let [store (fn [g {:keys [degree neighbors]}]\n                 (reduce #(set-value %1 %2 degree) g neighbors))]\n     (reduce store graph degrees)))\n  ([graph n from]\n   (store-degrees-between graph (degrees-between graph n from))))\n```", "```py\n(defn degrees-between-subgraph [graph n from]\n  (let [marked (store-degrees-between graph n from)\n        v-set (set (map first (filter second (:data marked))))\n        sub (subgraph marked v-set)]\n    {:graph marked, :subgraph sub}))\n```", "```py\nuser=> (def v-count (count (g/get-vertices g)))\n#'user/v-count\nuser=> (double\n         (/ (count\n              (g/get-vertices\n                (:subgraph (g/degrees-between-subgraph g 6 0))))\n            v-count))\n0.8949229603435211\n```", "```py\n(defproject network-six \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :plugins [[lein-cljsbuild \"0.3.2\"]]\n  :dependencies [[org.slf4j/slf4j-simple \"1.7.5\"]\n                 [org.clojure/clojure \"1.5.1\"]\n                 [org.clojure/data.json \"0.2.2\"]\n                 [me.raynes/fs \"1.4.4\"]\n                 [org.clojure/clojurescript \"0.0-2202\"]]\n :cljsbuild {:builds\n [{:source-paths [\"src-cljs\"],\n :compiler {:pretty-printer true,\n :output-to \"www/js/main.js\",\n :optimizations :whitespace}}]})\n\n```", "```py\n<script src=\"img/d3.v3.min.js\"></script>\n<script src=\"img/d3.hive.v0.min.js\"></script>\n```", "```py\n$ cd www\n$ python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\n\n```", "```py\n(ns network-six.force)\n```", "```py\n(defn make-color []\n  (.. js/d3\n    -scale\n    category10\n    (domain (array 0 1 2 3 4 5 6))))\n```", "```py\n  (.. js/d3\n```", "```py\n    -scale\n```", "```py\n    category10\n```", "```py\n    (domain (array 0 1 2 3 4 5 6))))\n```", "```py\n(defn setup-force-layout [force-layout graph]\n  (.. force-layout\n    (nodes (.-nodes graph))\n    (links (.-links graph))\n    start))\n```", "```py\n(defn on-tick [link node]\n  (fn []\n    (.. link\n      (attr \"x1\" #(.. % -source -x))\n      (attr \"y1\" #(.. % -source -y))\n      (attr \"x2\" #(.. % -target -x))\n      (attr \"y2\" #(.. % -target -y)))\n    (.. node\n      (attr \"cx\" #(.-x %))\n      (attr \"cy\" #(.-y %)))))\n```", "```py\n(defn ^:export main [json-file]\n  (let [width 960, height 600\n        color (make-color)\n        force-layout (make-force-layout width height)\n        svg (make-svg width height)]\n    (.json js/d3 json-file\n           (fn [err graph]\n             (.. graph\n               -links\n               (forEach #(do (aset %1 \"weight\" 1.0)\n                           (aset %1 \"index\" %2))))\n             (setup-force-layout force-layout graph)\n             (let [link (make-links svg graph color)\n                   node (make-nodes svg graph color force-layout)]\n               (.on force-layout \"tick\"\n                    (on-tick link node)))))))\n```", "```py\n<script>\nnetwork_six.force.main('facebook-49.json');\n</script>\n```", "```py\n(ns network-six.hive)\n```", "```py\n(defn make-angle []\n  (.. js/d3\n    -scale\n    ordinal\n    (domain (.range js/d3 4))\n    (rangePoints (array 0 (* 2.0 pi)))))\n```", "```py\n(defn get-radius [nodes]\n  (.. js/d3\n    -scale\n    linear\n    (range (array 40 400))\n    (domain (array (.min js/d3 nodes #(.-count %))\n                   (.max js/d3 nodes #(.-count %))))))\n```", "```py\n(defn make-circles [svg nodes color angle radius]\n  (.. svg\n    (selectAll \".node\")\n    (data nodes)\n    (enter)\n    (append \"circle\")\n    (attr \"stroke\" #(color (.-data %)))\n    (attr \"transform\"\n          #(str \"rotate(\" (degrees (angle (mod (.-n %) 3))) \\)))\n    (attr \"cx\" #(radius (.-count %)))\n    (attr \"r\" 5)\n    (attr \"class\" #(get-classes %))))\n```", "```py\n(defn ^:export main [json-file]\n  (let [width 750, height 750\n        angle (make-angle), color (make-color)\n        svg (make-svg width height)]\n    (.json js/d3 json-file\n           (fn [err data]\n             (let [nodes (.-nodes data)\n                   radius (get-radius nodes)]\n               (make-axes svg angle radius)\n               (let [df (get-degreed nodes data)]\n                 (make-arcs svg nodes df color angle radius)\n                 (make-circles svg nodes color angle radius)))))))\n```", "```py\n(defn make-arc [radius]\n  (.. js/d3 -svg arc\n    (outerRadius (- radius 10))\n    (innerRadius 0)))\n```", "```py\n(defn make-pie []\n  (.. js/d3 -layout pie\n    (sort nil)\n    (value #(.-amount %))))\n```", "```py\n(defrecord Freq [degree amount])\n```", "```py\n(defn get-freqs [data]\n  (->> data\n    .-nodes\n    (map #(.-data %))\n    frequencies\n    (map #(Freq. (first %) (second %)))\n    into-array))\n```"]