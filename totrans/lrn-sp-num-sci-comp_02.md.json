["```py\n>>> import scipy.misc\n>>> img=scipy.misc.lena()\n>>> import matplotlib.pyplot as plt \n>>> plt.gray() \n>>> plt.imshow(img) \n\n```", "```py\n>>> plt.show() \n\n```", "```py\narray([[162, 162, 162, 161, 162, 157, 163],\n [162, 162, 162, 161, 162, 157, 163],\n [162, 162, 162, 161, 162, 157, 163]])\n\n```", "```py\n>>> img[1,1:6]=0\n>>> print (img[0:3,0:7])\n\n```", "```py\n[[162 162 162 161 162 157 163]\n [162   0   0   0   0   0 163]\n [162 162 162 161 162 157 163]]\n\n```", "```py\n>>> img.dtype, img.shape, img.size\n\n```", "```py\n(dtype('int64'), (512, 512), 262144)\n\n```", "```py\n>>> img[32,67]\n\n```", "```py\n87\n\n```", "```py\n>>> import scipy.misc\n>>> img=scipy.misc.lena().astype('float32')\n\n```", "```py\n>>> import numpy\n>>> scores = numpy.array([101,103,84], dtype='float32')\n>>> scores\n\n```", "```py\narray([ 101.,  103.,   84.], dtype=float32)\n\n```", "```py\n>>> scores = numpy.float32([101,103,84])\n>>> scores\n\n```", "```py\narray([ 101.,  103.,   84.], dtype=float32)\n\n```", "```py\n>>> a=numpy.array(['Cleese', 'Idle', 'Gilliam'], dtype='str_')\n>>> a.dtype\n\n```", "```py\ndtype('<U7')\n\n```", "```py\n>>> dt = numpy.dtype([ ('name', numpy.str_, 16), ('grades',numpy.float64, (2,)) ])\n>>> dt \n\n```", "```py\ndtype([('name', '<U16'), ('grades', '<f8', (2,))])\n\n```", "```py\n>>> MA141=numpy.array([ ('Cleese', (7.0,8.0)), ('Gilliam',(9.0,10.0)) ], dtype=dt)\n>>> MA141\n\n```", "```py\narray([('Cleese', [7.0, 8.0]), ('Gilliam', [9.0, 10.0])],dtype=[('name', '<U16'), ('grades', '<f8', (2,))])\n\n```", "```py\n>>> A=numpy.array([[1,2,3,4,5,6,7,8],[2,4,6,8,10,12,14,16]])\n>>> print (A[0:2, 0:8:2])\n\n```", "```py\n[[ 1  3  5  7]\n [ 2  6 10 14]]\n\n```", "```py\n>>> print (A[0:2, 8:0:-2])\n\n```", "```py\n[[ 8,  6,  4,  2]\n [16, 12,  8,  4]]\n\n```", "```py\n>>> print (A[ [0,0,1,1], [0,3,2,5] ])\n\n```", "```py\n[ 1  4  6 12]\n\n```", "```py\n>>> print (A[ numpy.ix_( [0,1], [0,3] )])\n\n```", "```py\n[[1 4]\n [2 8]]\n\n```", "```py\n>>> value=0; import scipy.misc; img=scipy.misc.lena()\n>>> for item in img.flat: value+=item\n>>> value\n\n```", "```py\n32518120\n\n```", "```py\n>>> img.tofile(\"lena.txt\",sep=\" \",format=\"%i\")\n\n```", "```py\n>>> import numpy\n>>> A = numpy.array([11,13,15,17,19,18,16,14,12,10])\n>>> A.argsort(kind='mergesort')\n\n```", "```py\narray([9, 0, 8, 1, 7, 2, 6, 3, 5, 4])\n\n```", "```py\n>>> A.sort()\n>>> print(A)\n\n```", "```py\n[10 11 12 13 14 15 16 17 18 19]\n\n```", "```py\n>>> A=numpy.array([[1,1,1],[2,2,2],[3,3,3]])\n>>> A.mean()\n\n```", "```py\n2\n\n```", "```py\n>>> A.mean(axis=0)\n\n```", "```py\narray([ 2.,  2.,  2.])\n\n```", "```py\n>>> A.mean(axis=1)\n\n```", "```py\narray([ 1.,  2.,  3.])\n\n```", "```py\n>>> img.min(), img.max(), img.ptp()\n\n```", "```py\n(25, 245, 220)\n\n```", "```py\n>>> A=img.clip(img.min(),img.min()+100)\n>>> A.min(), A.max(), A.ptp()\n\n```", "```py\n(25, 125, 100)\n\n```", "```py\n>>> A=numpy.array([[1,2],[2,1]])\n\n```", "```py\narray(object,dtype=None,copy=True,order=None, subok=False,ndim=0)\n```", "```py\n>>> Z=numpy.zeros((5,5), dtype=int)\n>>> U=numpy.ones((2,2), dtype=int)\n>>> I=numpy.identity(3, dtype=int)\n\n```", "```py\nnumpy.eye(N,M=None,k=0,dtype=float)\n```", "```py\n>>> D=numpy.eye(4,k=1) + numpy.eye(4,k=-1)\n>>> print (D)\n\n```", "```py\n[[ 0\\.  1\\.  0\\.  0.]\n [ 1\\.  0\\.  1\\.  0.]\n [ 0\\.  1\\.  0\\.  1.]\n [ 0\\.  0\\.  1\\.  0.]]\n\n```", "```py\n>>> A=3.0*(numpy.eye(5,k=4) + numpy.eye(5,k=-4))\n>>> A[0:2,0:2]=5*U; A[2:5,2:5]=6*I\n>>> print (A)\n\n```", "```py\n[[ 5\\.  5\\.  0\\.  0\\.  3.]\n [ 5\\.  5\\.  0\\.  0\\.  0.]\n [ 0\\.  0\\.  6\\.  0\\.  0.]\n [ 0\\.  0\\.  0\\.  6\\.  0.]\n [ 3\\.  0\\.  0\\.  0\\.  6.]]\n\n```", "```py\n>>> B=numpy.fromfunction( (lambda i,j: i*j), (4,4), dtype=int)\n>>> print (B)\n\n```", "```py\n[[0 0 0 0]\n [0 1 2 3]\n [0 2 4 6]\n [0 3 6 9]]\n\n```", "```py\n>>> print (B==0)\n\n```", "```py\n[[ True  True  True  True]\n [ True False False False]\n [ True False False False]\n [ True False False False]]\n\n```", "```py\n>>> B += numpy.fromfunction((lambda i,j:i*i+j*j), (4,4))*(B==0)\n>>> print (B)\n\n```", "```py\n[[0 1 4 9]\n [1 1 2 3]\n [4 2 4 6]\n [9 3 6 9]]\n\n```", "```py\n>>> print (B%2!=0)\n\n```", "```py\n[[False  True False  True]\n [ True  True False  True]\n [False False False False]\n [ True  True False  True]]\n\n```", "```py\n>>> numpy.where(B%2!=0)\n\n```", "```py\n(array([0, 0, 1, 1, 1, 3, 3, 3], dtype=int32),array([1, 3, 0, 1, 3, 0, 1, 3], dtype=int32))\n\n```", "```py\n>>> numpy.putmask( B, B%2!=0, B**2+1)\n>>> print (B)\n\n```", "```py\n[[ 0  2  4 82]\n [ 2  2  2 10]\n [ 4  2  4  6]\n [82 10  6 82]]\n\n```", "```py\n>>> L1=numpy.arange(-1,1,0.3)\n>>> print (L1)\n\n```", "```py\n[-1\\.  -0.7 -0.4 -0.1  0.2  0.5  0.8]\n\n```", "```py\n>>> L2=numpy.linspace(-1,1,4)\n>>> print (L2)\n\n```", "```py\n[-1\\.         -0.33333333  0.33333333  1\\.        ]\n\n```", "```py\n>>> L3= numpy.logspace(-1,1,4)\n>>> print (L3)\n\n```", "```py\n[  0.1          0.46415888   2.15443469  10\\.        ]\n\n```", "```py\n>>> print (numpy.meshgrid(L2,L3))\n\n```", "```py\n(array([[-1\\.        , -0.33333333,  0.33333333,  1\\.        ],\n [-1\\.        , -0.33333333,  0.33333333,  1\\.        ],\n [-1\\.        , -0.33333333,  0.33333333,  1\\.        ],\n [-1\\.        , -0.33333333,  0.33333333,  1\\.        ]]), array([[ \n0.1       ,   0.1       ,   0.1       ,   0.1       ],\n [  0.46415888,   0.46415888,   0.46415888,   0.46415888],\n [  2.15443469,   2.15443469,   2.15443469,   2.15443469],\n [ 10\\.        ,  10\\.        ,  10\\.        ,  10\\.        ]]))\n\n```", "```py\n>>> print (numpy.mgrid[0:5,0:5])\n\n```", "```py\n[[[0 0 0 0 0]\n [1 1 1 1 1]\n [2 2 2 2 2]\n [3 3 3 3 3]\n [4 4 4 4 4]]\n\n [[0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]]]\n\n```", "```py\n>>> print (numpy.ogrid[0:5,0:5])\n\n```", "```py\n[array([[0],\n [1],\n [2],\n [3],\n [4]]), array([[0, 1, 2, 3, 4]])]\n\n```", "```py\ntile(A, reps)\n```", "```py\n>>> checker2by2[0:3,0:3]=checker2by2[3:6,3:6]=B\n>>> numpy.tile(checker2by2,(4,4))\n\n```", "```py\n>>> import scipy.ndimage\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> text = scipy.ndimage.imread('Chap_02_text_image.png')\n>>> text = np.mean(text.astype(float)/255,-1)*2-1\n\n```", "```py\n>>> letterE = text[37:53,275:291]\n\n```", "```py\n>>> corr = scipy.ndimage.correlate(text,letterE)\n>>> eLocations = (corr >= 0.95 * corr.max())\n\n```", "```py\n>>> CorrLocIndex = np.where(eLocations==True)\n>>> x=CorrLocIndex[1]\n>>> x \n\n```", "```py\narray([ 283,  514,  583,  681,  722,  881,  929, 1023,   64,  188,  452, \n 504,  892,  921, 1059, 1087, 1102, 1133,  118,  547,  690, 1066, \n 1110,  330,  363,  519,  671,  913,  951, 1119,  120,  292,  441, \n 516,  557,  602,  649,  688,  717,  747,  783,  813,  988, 1016, \n 250,  309,  505,  691,  769,  876,  904, 1057,  224,  289,  470, \n 596,  626,  780, 1027,  112,  151,  203,  468,  596,  751,  817, \n 867,  203,  273,  369,  560,  599,  888, 1111,  159,  221,  260, \n 352,  427,  861,  901, 1034, 1146,  325,  506,  558]) \n\n```", "```py\n>>> y=CorrLocIndex[0] \n>>> y \n\n```", "```py\narray([ 45,  45,  45,  45,  45,  45,  45,  45,  74,  74,  74,  74,  74, \n 74,  74,  74,  74,  74, 103, 103, 103, 103, 103, 132, 132, 132, \n 132, 132, 132, 132, 161, 161, 161, 161, 161, 161, 161, 161, 161, \n 161, 161, 161, 161, 161, 190, 190, 190, 190, 190, 190, 190, 190, \n 219, 219, 219, 219, 219, 219, 219, 248, 248, 248, 248, 248, 248, \n 248, 248, 277, 277, 277, 277, 277, 277, 277, 306, 306, 306, 306, \n 306, 306, 306, 306, 306, 335, 335, 335]) \n\n```", "```py\n>>> thefig=plt.figure()\n>>> plt.subplot(211)\n<matplotlib.axes._subplots.AxesSubplot object at 0x7fb9b2390110>\n>>> plt.imshow(text, cmap=plt.cm.gray, interpolation='nearest')\n<matplotlib.image.AxesImage object at 0x7fb9b1f29410>\n>>> plt.axis('off')\n\n```", "```py\n(-0.5, 1199.5, 359.5, -0.5) \n\n```", "```py\n>>> plt.subplot(212) \n<matplotlib.axes._subplots.AxesSubplot object at 0x7fb9b1f29890> \n>>> plt.imshow(text, cmap=plt.cm.gray, interpolation='nearest') \n<matplotlib.image.AxesImage object at 0x7fb9b1637e10> \n>>> plt.autoscale(False) \n>>> plt.plot(x,y,'wo',markersize=10) \n[<matplotlib.lines.Line2D object at 0x7fb9b1647290>] \n>>> plt.axis('off') \n\n```", "```py\n(-0.5, 1199.5, 359.5, -0.5) \n\n```", "```py\n>>> plt.show() \n\n```", "```py\n>>> import numpy \n>>> B = numpy.ones((3,3)) \n>>> checker2by2 = numpy.zeros((6,6)) \n>>> checker2by2[0:3,0:3] = checker2by2[3:6,3:6] = B \n>>> print(checker2by2)\n\n```", "```py\n[[ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 1\\.  1\\.  1\\.  0\\.  0\\.  0.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]\n [ 0\\.  0\\.  0\\.  1\\.  1\\.  1.]]\n\n```", "```py\n>>> numpy.vsplit(checker2by2,3)\n\n```", "```py\n[array([[ 1.,  1.,  1.,  0.,  0.,  0.],\n [ 1.,  1.,  1.,  0.,  0.,  0.]]),\n array([[ 1.,  1.,  1.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  1.,  1.,  1.]]),\n array([[ 0.,  0.,  0.,  1.,  1.,  1.],\n [ 0.,  0.,  0.,  1.,  1.,  1.]])]\n\n```", "```py\n>>> a=numpy.array([-numpy.pi, numpy.pi])\n>>> print (numpy.vstack((a, numpy.sin(a))))\n\n```", "```py\n[[ -3.14159265e+00   3.14159265e+00]\n [ -1.22464680e-16   1.22464680e-16]]\n\n```", "```py\n# function max100\n>>> def max100(x):\n return(x)\n\n```", "```py\n>>> max100(a)\n\n```", "```py\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n```", "```py\n>>> numpy.vectorize(max100)(a)\n\n```", "```py\narray([100, 100])\n\n```", "```py\n>>> numpy.unique(A)\n\n```", "```py\narray([ 1, 2, 3, 4, 5, 10])\n\n```", "```py\n>>> numpy.bincount(A)\n\n```", "```py\narray([0, 4, 3, 2, 1, 2, 0, 0, 0, 0, 1])\n\n```", "```py\n>>> A=numpy.fromfunction((lambda i,j: (i+1)*(-1)**(i*j)), (4,4))\n>>> print (A)\n\n```", "```py\n[[ 1\\.  1\\.  1\\.  1.]\n [ 2\\. -2\\.  2\\. -2.]\n [ 3\\.  3\\.  3\\.  3.]\n [ 4\\. -4\\.  4\\. -4.]]\n\n```", "```py\n>>> B=numpy.log2(A)\n__main__:1: RuntimeWarning: invalid value encountered in log2\n>>> print (B)\n\n```", "```py\n[[ 0\\.         0\\.         0\\.         0\\.       ]\n [ 1\\.               nan  1\\.               nan]\n [ 1.5849625  1.5849625  1.5849625  1.5849625]\n [ 2\\.               nan  2\\.               nan]]\n\n```", "```py\n>>> numpy.sum(B), numpy.nansum(B)\n\n```", "```py\n(nan, 12.339850002884624)\n\n```"]