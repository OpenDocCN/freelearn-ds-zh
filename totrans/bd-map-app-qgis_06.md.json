["```py\nsymbol = QgsSymbolV2.defaultSymbol(layer.geometryType())\nsymbol.deleteSymbolLayer(0) # Remove default symbol layer.\n\nsymbol_layer_1 = QgsSimpleFillSymbolLayerV2()\nsymbol_layer_1.setFillColor(QColor(\"yellow\"))\n\nsymbol_layer_2 = QgsLinePatternFillSymbolLayer()\nsymbol_layer_2.setLineAngle(30)\nsymbol_layer_2.setDistance(2.0)\nsymbol_layer_2.setLineWidth(0.5)\nsymbol_layer_2.setColor(QColor(\"green\"))\n\nsymbol.appendSymbolLayer(symbol_layer_1)\nsymbol.appendSymbolLayer(symbol_layer_2)\n```", "```py\n    renderer = QgsSingleSymbolRendererV2(symbol)\n    layer.setRendererV2(renderer)\n\n    ```", "```py\nsymbol =QgsLineSymbolV2.createSimple({})\nsymbol.deleteSymbolLayer(0) # Remove default symbol layer.\n\nsymbol_layer = QgsSimpleLineSymbolLayerV2()\nsymbol_layer.setWidth(4)\nsymbol_layer.setColor(QColor(\"light gray\"))\nsymbol_layer.setPenCapStyle(Qt.FlatCap)\nsymbol.appendSymbolLayer(symbol_layer)\n\nsymbol_layer = QgsSimpleLineSymbolLayerV2()\nsymbol_layer.setColor(QColor(\"black\"))\nsymbol_layer.setWidth(2)\nsymbol_layer.setPenCapStyle(Qt.FlatCap)\nsymbol.appendSymbolLayer(symbol_layer)\n\nsymbol_layer = QgsSimpleLineSymbolLayerV2()\nsymbol_layer.setWidth(1)\nsymbol_layer.setColor(QColor(\"white\"))\nsymbol_layer.setPenStyle(Qt.DotLine)\nsymbol.appendSymbolLayer(symbol_layer)\n```", "```py\nsymbol = QgsFillSymbolV2.createSimple({})\nsymbol.deleteSymbolLayer(0) # Remove default symbol layer.\n\nsymbol_layer = QgsGradientFillSymbolLayerV2()\nsymbol_layer.setColor2(QColor(\"dark gray\"))\nsymbol_layer.setColor(QColor(\"white\"))\nsymbol.appendSymbolLayer(symbol_layer)\n\nsymbol_layer = QgsLinePatternFillSymbolLayer()\nsymbol_layer.setColor(QColor(0, 0, 0, 20))\nsymbol_layer.setLineWidth(2)\nsymbol_layer.setDistance(4)\nsymbol_layer.setLineAngle(70)\nsymbol.appendSymbolLayer(symbol_layer)\n```", "```py\nsymbol.setAlpha(0.3)\n```", "```py\nclass CrossSymbolLayer(QgsMarkerSymbolLayerV2):\n    def __init__(self, length=10.0, width=2.0):\n        QgsMarkerSymbolLayerV2.__init__(self)\n        self.length = length\n        self.width  = width\n\n    def layerType(self):\n        return \"Cross\"\n\n    def properties(self):\n        return {'length' : self.length,\n                'width' : self.width}\n\n    def clone(self):\n        return CrossSymbolLayer(self.length, self.width)\n\n    def startRender(self, context):\n        self.pen = QPen()\n        self.pen.setColor(self.color())\n        self.pen.setWidth(self.width)\n\n    def stopRender(self, context):\n        self.pen = None\n\n    def renderPoint(self, point, context):\n        left = point.x() - self.length\n        right = point.x() + self.length\n        bottom = point.y() - self.length\n        top = point.y() + self.length\n\n        painter = context.renderContext().painter()\n        painter.setPen(self.pen)\n        painter.drawLine(left, bottom, right, top)\n        painter.drawLine(right, bottom, left, top)\n```", "```py\nsymbol = QgsMarkerSymbolV2.createSimple({})\nsymbol.deleteSymbolLayer(0)\n\nsymbol_layer = CrossSymbolLayer()\nsymbol_layer.setColor(QColor(\"gray\"))\n\nsymbol.appendSymbolLayer(symbol_layer) \n```", "```py\ndef renderPolyline(self, points, context):\n```", "```py\ndef renderPolygon(self, outline, rings, context):\n```", "```py\n    if context.selected():\n        color = context.selectionColor()\n    else:\n        color = self.color\n    ```", "```py\n    class CrossSymbolLayerWidget(QgsSymbolLayerV2Widget):\n        def __init__(self, parent=None):\n            QgsSymbolLayerV2Widget.__init__(self, parent)\n            self.layer = None\n\n            self.lengthField = QSpinBox(self)\n            self.lengthField.setMinimum(1)\n            self.lengthField.setMaximum(100)\n            self.connect(self.lengthField,\n                         SIGNAL(\"valueChanged(int)\"),\n                         self.lengthChanged)\n\n            self.widthField = QSpinBox(self)\n            self.widthField.setMinimum(1)\n            self.widthField.setMaximum(100)\n            self.connect(self.widthField,\n                         SIGNAL(\"valueChanged(int)\"),\n                         self.widthChanged)\n\n            self.form = QFormLayout()\n            self.form.addRow('Length', self.lengthField)\n            self.form.addRow('Width', self.widthField)\n\n            self.setLayout(self.form)\n\n        def setSymbolLayer(self, layer):\n            if layer.layerType() == \"Cross\":\n                self.layer = layer\n                self.lengthField.setValue(layer.length)\n                self.widthField.setValue(layer.width)\n\n        def symbolLayer(self):\n            return self.layer\n\n        def lengthChanged(self, n):\n            self.layer.length = n\n            self.emit(SIGNAL(\"changed()\"))\n\n        def widthChanged(self, n):\n            self.layer.width = n\n            self.emit(SIGNAL(\"changed()\"))\n    ```", "```py\n    class CrossSymbolLayerMetadata(QgsSymbolLayerV2AbstractMetadata):\n        def __init__(self):\n            QgsSymbolLayerV2AbstractMetadata.__init__(self, \"Cross\", \"Cross marker\", QgsSymbolV2.Marker)\n\n        def createSymbolLayer(self, properties):\n            if \"length\" in properties:\n                length = int(properties['length'])\n            else:\n                length = 10\n            if \"width\" in properties:\n                width = int(properties['width'])\n            else:\n                width = 2\n            return CrossSymbolLayer(length, width)\n\n        def createSymbolLayerWidget(self, layer):\n            return CrossSymbolLayerWidget()\n\n    registry = QgsSymbolLayerV2Registry.instance()\n    registry.addSymbolLayerType(CrossSymbolLayerMetadata())\n    ```", "```py\nclass OddEvenRenderer(QgsFeatureRendererV2):\n    def __init__(self):\n        QgsFeatureRendererV2.__init__(self, \"OddEvenRenderer\")\n        self.evenSymbol = QgsMarkerSymbolV2.createSimple({})\n        self.evenSymbol.setColor(QColor(\"light gray\"))\n        self.oddSymbol = QgsMarkerSymbolV2.createSimple({})\n        self.oddSymbol.setColor(QColor(\"black\"))\n        self.n = 0\n\n    def clone(self):\n        return OddEvenRenderer()\n\n    def symbolForFeature(self, feature):\n        self.n = self.n + 1\n        if self.n % 2 == 0:\n            return self.evenSymbol\n        else:\n            return self.oddSymbol\n\n    def startRender(self, context, layer):\n        self.n = 0\n        self.oddSymbol.startRender(context)\n        self.evenSymbol.startRender(context)\n\n    def stopRender(self, context):\n        self.oddSymbol.stopRender(context)\n        self.evenSymbol.stopRender(context)\n\n    def usedAttributes(self):\n        return []\n```", "```py\nclass GridLayer(QgsPluginLayer):\n    def __init__(self):\n        QgsPluginLayer.__init__(self, \"GridLayer\", \"Grid Layer\")\n        self.setValid(True)\n```", "```py\n        self.setCrs(QgsCoordinateReferenceSystem(4326))\n        self.setExtent(QgsRectangle(-180, 90, 180, 90))\n```", "```py\n    def draw(self, renderContext):\n        painter = renderContext.painter()\n```", "```py\n        extent = renderContext.extent()\n```", "```py\n        xMin = int(math.floor(extent.xMinimum()))\n        xMax = int(math.ceil(extent.xMaximum()))\n        yMin = int(math.floor(extent.yMinimum()))\n        yMax = int(math.ceil(extent.yMaximum()))\n```", "```py\n        pen = QPen()\n        pen.setColor(QColor(\"light gray\"))\n        pen.setWidth(1.0)\n        painter.setPen(pen)\n```", "```py\n        mapToPixel = renderContext.mapToPixel()\n```", "```py\n        for x in range(xMin, xMax+1):\n            coord1 = mapToPixel.transform(x, yMin)\n            coord2 = mapToPixel.transform(x, yMax)\n            painter.drawLine(coord1.x(), coord1.y(),\n                             coord2.x(), coord2.y())\n```", "```py\n        for y in range(yMin, yMax+1):\n            coord1 = mapToPixel.transform(xMin, y)\n            coord2 = mapToPixel.transform(xMax, y)\n            painter.drawLine(coord1.x(), coord1.y(),\n                             coord2.x(), coord2.y())\n```", "```py\n        return True\n```", "```py\nclass GridLayerType(QgsPluginLayerType):\n    def __init__(self):\n        QgsPluginLayerType.__init__(self, \"GridLayer\")\n\n    def createLayer(self):\n        return GridLayer()\n\nregistry = QgsPluginLayerRegistry.instance()\nregistry.addPluginLayerType(GridLayerType())\n```", "```py\nclass CompassRoseItem(QgsMapCanvasItem):\n    def __init__(self, canvas):\n        QgsMapCanvasItem.__init__(self, canvas)\n        self.center = QgsPoint(0, 0)\n        self.size   = 100\n\n    def setCenter(self, center):\n        self.center = center\n\n    def center(self):\n        return self.center\n\n    def setSize(self, size):\n        self.size = size\n\n    def size(self):\n        return self.size\n\n    def boundingRect(self):\n        return QRectF(self.center.x() - self.size/2,\n                      self.center.y() - self.size/2,\n                      self.center.x() + self.size/2,\n                      self.center.y() + self.size/2)\n\n    def paint(self, painter, option, widget):\n        # ...\n```", "```py\n    def paint(self, painter, option, widget):\n        fontSize = int(18 * self.size/100)\n        painter.setFont(QFont(\"Times\", pointSize=fontSize,weight=75))\n        metrics = painter.fontMetrics()\n        labelSize = metrics.height()\n        margin    = 5\n```", "```py\n        x = self.center.x()\n        y = self.center.y()\n        size = self.size - labelSize - margin\n\n        path = QPainterPath()\n        path.moveTo(x, y - size * 0.23)\n        path.lineTo(x - size * 0.45, y - size * 0.45)\n        path.lineTo(x - size * 0.23, y)\n        path.lineTo(x - size * 0.45, y + size * 0.45)\n        path.lineTo(x, y + size * 0.23)\n        path.lineTo(x + size * 0.45, y + size * 0.45)\n        path.lineTo(x + size * 0.23, y)\n        path.lineTo(x + size * 0.45, y - size * 0.45)\n        path.closeSubpath()\n\n        painter.fillPath(path, QColor(\"light gray\"))\n\n        path = QPainterPath()\n        path.moveTo(x, y - size)\n        path.lineTo(x - size * 0.18, y - size * 0.18)\n        path.lineTo(x - size, y)\n        path.lineTo(x - size * 0.18, y + size * 0.18)\n        path.lineTo(x, y + size)\n        path.lineTo(x + size * 0.18, y + size * 0.18)\n        path.lineTo(x + size, y)\n        path.lineTo(x + size * 0.18, y - size * 0.18)\n        path.closeSubpath()\n\n        painter.fillPath(path, QColor(\"black\"))\n```", "```py\n        labelX = x - metrics.width(\"N\")/2\n        labelY = y - self.size + labelSize - metrics.descent()\n        painter.drawText(QPoint(labelX, labelY), \"N\")\n\n        labelX = x - metrics.width(\"S\")/2\n        labelY = y + self.size - labelSize + metrics.ascent()\n        painter.drawText(QPoint(labelX, labelY), \"S\")\n\n        labelX = x - self.size + labelSize/2 - metrics.width(\"E\")/2\n        labelY = y - metrics.height()/2 + metrics.ascent()\n        painter.drawText(QPoint(labelX, labelY), \"E\")\n\n        labelX = x + self.size - labelSize/2 - metrics.width(\"W\")/2\n        labelY = y - metrics.height()/2 + metrics.ascent()\n        painter.drawText(QPoint(labelX, labelY), \"W\")\n```", "```py\nrose = CompassRoseItem(iface.mapCanvas())\nrose.setCenter(QPointF(150, 400))\nrose.setSize(80)\n```", "```py\niface.mapCanvas().scene().removeItem(rose)\n```", "```py\nlayer = QgsVectorLayer(path, baseName, providerLib)\n```", "```py\nlayer = QgsVectorLayer(\"Polygon\", \"My Layer\", \"memory\")\n```", "```py\ngeometryType?key=value&key=value...\n```", "```py\n    crs=IGNF:WGS84G\n    ```", "```py\n    field=phone_number:string\n    ```", "```py\n    index=yes\n    ```", "```py\nlayer = QgsVectorLayer(\n\"Point?crs=EPSG:4326&field=height:double&field=name:string(255)&index=yes\", \"Point Layer\", \"memory\")\n```", "```py\nprovider = layer.dataProvider()\n\nfeature1 = ...\nfeature2 = ...\n\nprovider.addFeatures([feature1, feature2, ...])\n```", "```py\n    point = QgsPoint(x, y)\n    geometry = QgsGeometry.fromPoint(point)\n    ```", "```py\n    geometry = QgsGeometry.fromWkt(\"POINT (10 10)\")\n    ```", "```py\n    new_geometry = old_geometry.buffer(10)\n    ```", "```py\nfeature = QgsFeature()\nfeature.setGeometry(geometry)\n```", "```py\nfields = provider.fields()\nfeature.setFields(fields)\n```", "```py\nfeature.setAttribute(\"height\", 301)\nfeature.setAttribute(\"name\", \"Eiffel Tower\")\n```", "```py\nlayer = QgsVectorLayer(\"Point?crs=EPSG:4326&field=height:double&field=name:string(255)\", \"Point Layer\", \"memory\")\nprovider = layer.dataProvider()\nQgsMapLayerRegistry.instance().addMapLayer(layer)\n\nfields = provider.fields()\nfeatures = []\n\nfeature = QgsFeature()\nfeature.setGeometry(QgsGeometry.fromWkt(\"POINT (2.2945 48.8582)\"))\nfeature.setFields(fields)\nfeature.setAttribute(\"height\", 301)\nfeature.setAttribute(\"name\", \"Eiffel Tower\")\nfeatures.append(feature)\n\nfeature = QgsFeature()\nfeature.setGeometry(QgsGeometry.fromWkt(\"POINT (0.0761 51.5081)\"))\nfeature.setFields(fields)\nfeature.setAttribute(\"height\", 27)\nfeature.setAttribute(\"name\", \"Tower of London\")\nfeatures.append(feature)\n\nfeature = QgsFeature()\nfeature.setGeometry(QgsGeometry.fromWkt(\"POINT (10.3964 43.7231)\"))\nfeature.setFields(fields)\nfeature.setAttribute(\"height\", 56)\nfeature.setAttribute(\"name\", \"Leaning Tower of Pisa\")\nfeatures.append(feature)\n\nprovider.addFeatures(features)\nlayer.updateExtents()\niface.mapCanvas().zoomToFullExtent()\n```"]