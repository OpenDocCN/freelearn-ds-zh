["```py\nxtabs(formula, data, subset, sparse, na.action, addNA, exclude, drop.unused.levels)\n```", "```py\n# Convert the dataset to a data frame\ndf <- as.data.frame(UCBAdmissions)\n# Create a contingency table using xtabs()\nxtabs(Freq ~ Gender + Admit, df)\n        Admit\nGender   Admitted Rejected\n  Male       1198     1493\n  Female      557     1278\n```", "```py\n# The gt package\nif (!require(gt)) {\n  install.packages(\"gt\", dependencies = TRUE)\n}\n```", "```py\nlibrary(dplyr)\nlibrary(tibble)\n```", "```py\ntab <- mtcars |>\n  rownames_to_column() |>\n  arrange(factor(cyl), mpg) |>\n  group_by(cyl) |>\n  slice(1:3) |>\n  gt()\n```", "```py\ntab <- tab |>\n  tab_spanner(\n    label = \"Performance\",\n    columns = c(mpg, disp, hp, drat, wt, qsec)\n  )\n```", "```py\ntab <- tab |>\n  tab_spanner(\n    label = \"Specs\",\n    columns = c(vs, am, gear, carb)\n  )\n```", "```py\ntab <- tab |>\n  tab_header(\n    title = md(\"The Cars of **mtcars**\"),\n    subtitle = \"These are some fine automobiles\"\n  )\ntab\n```", "```py\n# Load the tidyquant library\nlibrary(tidyquant)\nlibrary(purrr)\n# Create a pivot table\npivot_table(.data = iris,\n            .rows = ~ Species,\n            .values = c(~ mean(Sepal.Length),\n                   ~ mean(Sepal.Width))) |>\nset_names(\"Species\",\"Mean_Sepal_Length\",\"Mean_Sepal_Width\")\n```", "```py\n# A tibble: 3 × 3\n  Species    Mean_Sepal_Length Mean_Sepal_Width\n  <fct>                  <dbl>            <dbl>\n1 setosa                  5.01             3.43\n2 versicolor              5.94             2.77\n3 virginica               6.59             2.97\n```", "```py\n    import win32com.client as win32\n    # Create an Excel workbook and add a sheet\n    excel = win32.gencache.EnsureDispatch('Excel.Application')\n    workbook = excel.Workbooks.Add()\n    worksheet = workbook.Worksheets(1)\n    ```", "```py\n    worksheet.Cells(1, 1).Value = 'Name'\n    worksheet.Cells(1, 2).Value = 'Category'\n    worksheet.Cells(1, 3).Value = 'Sales'\n    worksheet.Cells(2, 1).Value = 'John'\n    worksheet.Cells(2, 2).Value = 'Electronics'\n    worksheet.Cells(2, 3).Value = 1000\n    worksheet.Cells(3, 1).Value = 'Alice'\n    worksheet.Cells(3, 2).Value = 'Clothing'\n    worksheet.Cells(3, 3).Value = 800\n    worksheet.Cells(4, 1).Value = 'John'\n    worksheet.Cells(4, 2).Value = 'Clothing'\n    worksheet.Cells(4, 3).Value = 300\n    # Add more data as needed\n    ```", "```py\n    data_range = worksheet.Range('A1:C4')  # Adjust the range as needed\n    ```", "```py\n    # Add a new worksheet to the workbook to hold the Pivot Table:\n    pivot_table_sheet = workbook.Worksheets.Add()\n    pivot_table_sheet.Name = 'Pivot Table'\n    # Create a Pivot Cache using the data range:\n    pivot_cache = workbook.PivotCaches().Create(SourceType=1, SourceData=data_range)\n    # Create the Pivot Table on the new sheet using the Pivot Cache:\n    pivot_table = pivot_cache.CreatePivotTable(\n        TableDestination=pivot_table_sheet.Cells(3, 1),\n        TableName='MyPivotTable')\n    # Add the row, column and data fields\n    pivot_table.PivotFields('Name').Orientation = 1 # row field\n    pivot_table.PivotFields('Category').Orientation = 2 # column field\n    pivot_table.PivotFields('Sales').Orientation = 4 # data field\n    # Add the calculated fields\n    calculated_field = pivot_table.CalculatedFields().Add(\n        \"Total Sales\", \"=SUM(Sales)\")\n    # Refresh the PivotTable to apply changes\n    pivot_table.RefreshTable()\n    ```", "```py\n    workbook.SaveAs('PivotTableExample.xlsx')\n    workbook.Close()\n    excel.Quit()\n    ```", "```py\n    import win32com.client as win32\n    # Connect to Excel\n    excel = win32.gencache.EnsureDispatch('Excel.Application')\n    # Open the workbook with the pivot table\n    workbook = excel.Workbooks.Open('PivotTableExample.xlsx')  # Replace with your workbook path\n    worksheet = workbook.Worksheets(1)\n    # Access the Pivot Table\n    pivot_table = worksheet.PivotTables('MyPivotTable')  # Use the name of your pivot table\n    ```", "```py\n    # Filter by value (need to make the field a Page field instaed of a column field)\n    category_field = pivot_table.PivotFields('Category')\n    category_field.Orientation = 3 # page field\n    category_field.CurrentPage = \"Electronics\"\n    ```", "```py\n    # Sort Rows or Columns\n    name_field = pivot_table.PivotFields('Name')\n    name_field.AutoSort(1, \"Name\")\n    ```", "```py\n    # Define the new source data range\n    new_source_data_range = 'Sheet1!A1:C2'\n    # Update the SourceData property of the pivot table's Table object\n    pivot_table.TableRange2(workbook.Sheets('Sheet1').Range(\n        new_source_data_range))\n    # Refresh data\n    pivot_table.RefreshTable()\n    ```", "```py\n    workbook.Save()\n    workbook.Close()\n    excel.Quit()\n    ```", "```py\n# Sample Data Generation\nimport pandas as pd\nimport random\nfrom datetime import datetime, timedelta\nimport win32com.client as win32\nimport os\nimport numpy as np\ndata = {\n    'Date': [datetime(2023, 1, 1) + timedelta(days=i) for i in range(365)],\n    'Sales': [random.randint(100, 1000) for _ in range(365)]\n}\ndf = pd.DataFrame(data)\n# Create an ExcelWriter object and write the DataFrame to the Excel worksheet\ndf.to_excel(\"GroupingExample.xlsx\", sheet_name='Sheet1', index=False)\n```", "```py\n# Connect to Excel\n# Open the Excel workbook and add a sheet\n# Add a new worksheet to the workbook to hold the Pivot Table:\n# Define the range of data to be used as input for the pivot table\n# Create a Pivot Cache using the data range:\n# Create the Pivot Table on the new sheet using the Pivot Cache:\n# Add the 'Date' field to Rows and define the date_field variable as done with name_field in the example above.\n# Add the calculated fields\ncalculated_field = pivot_table.CalculatedFields().Add(\"Total Sales\", \"=SUM(Sales)\")\n# Group by months\ndate_field.Subtotals = [False]*12\ndate_field.NumberFormat = 'MMMM YYYY'\n# Sort Rows\ndate_field.AutoSort(1, \"Date\")\n```", "```py\n# count the unique values for each value of the date column in the pivot\ndate_values = pd.DataFrame([item.Value for item in date_field.PivotItems()], columns = ['date'])\nunique_values = pd.DataFrame(np.transpose(np.unique(date_values, return_counts=True)), columns=['date', 'count'])\ndate_values_count = date_values.merge(unique_values).drop_duplicates()\n# Group by months\n# Set the GroupOn property\ndate_range = pivot_table_sheet.Range(f\"A4:A{starting_row + date_values_count['count'].iloc[0]}\")\ndate_range.Group()\n# You can use the above method to group the other months as well if you want to\n# Note: the pivot is now changed, the second group starts at row starting_row + 2, instead of starting_row + 32\n```", "```py\n# change the formatting of the grouped column to show only month and year and change back the original date column to show the full date\n# change the formatting of the grouped column to show only month and year and change back the original date column to show the full date\npivot_table.PivotFields('Date2').NumberFormat = 'MMMM YYYY'\ndate_field.NumberFormat = 'DD MMMM YYYY'\n# hide the details of the grouped values\nfor item in pivot_table.PivotFields('Date2').PivotItems():\n    item.ShowDetail = False\n# Refresh data\npivot_table.RefreshTable()\n#pivot_table.PivotFields('Date2').Orientation = 2\n# Save and close\nworkbook.Save()\nworkbook.Close()\nexcel.Quit()\n```"]