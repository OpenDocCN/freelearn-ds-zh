["```py\n$ wget \nhttps://github.com/PacktPublishing/Mastering-spaCy/blob/main/Chapter06/data/atis_intents.csv\n```", "```py\n    import pandas as pd\n    dataset = pd.read_csv(\"data/atis_intents.csv\", header=None)\n    ```", "```py\n    dataset.head()\n    ```", "```py\n    for text in dataset[1].head():\n        print(text)\n    i want to fly from boston at 838 am and arrive in denver at 1110 in the morning\n    what flights are available from pittsburgh to baltimore on thursday morning\n    what is the arrival time in san francisco for the 755 am flight leaving washington\n    cheapest airfare from tacoma to orlando\n    round trip fares from pittsburgh to philadelphia under 1000 dollars\n    ```", "```py\n    grouped = dataset.groupby(0).size()\n    print(grouped)\n    atis_abbreviation                            147\n    atis_aircraft                                 81\n    atis_aircraft#atis_flight#atis_flight_no      1\n    atis_airfare                                 423\n    atis_airfare#atis_flight_time                  1\n    atis_airline                                 157\n    atis_airline#atis_flight_no                    2\n    atis_airport                                  20\n    atis_capacity                                 16\n    atis_cheapest                                  1\n    atis_city                                     19\n    atis_distance                                 20\n    atis_flight                                 3666\n    ```", "```py\n    awk -F ',' '{print $2}' atis_intents.csv  > atis_utterances.txt\n    ```", "```py\n    does american airlines fly from boston to san francisco\n    what flights go from dallas to tampa\n    show me the flights from montreal to chicago\n    what flights do you have from ontario\n    The users also provide the dates, times, days of the weeks they wish to fly on. These entities include numbers, month names, day of the week names as well as time adverbs such as next week, today, tomorrow, next month. Let's see some example entities:\n    list flights from atlanta to boston leaving between 6 pm and 10 pm on august eighth\n    i need a flight after 6 pm on wednesday from oakland to salt lake city\n    show me flights from minneapolis to seattle on july second\n    what flights leave after 7 pm from philadelphia to boston\n    ```", "```py\n    what does the abbreviation ua mean\n    what does restriction ap 57 mean\n    explain restriction ap please\n    what's fare code yn\n    ```", "```py\n    from collections import Counter\n    import spacy\n    nlp = spacy.load(\"en_core_web_md\")\n    corpus = open(\"atis_utterances.txt\", \"r\").read().split(\"\\n\")\n    all_ent_labels = []\n    for sentence in corpus:\n         doc = nlp(sentence.strip())\n          ents = doc.ents\n          all_ent_labels += [ent.label_ for ent in ents]\n    c = Counter(all_ent_labels)\n    print(c)\n    Counter({'GPE (location names), DATE, TIME, and ORGANIZATION. Obviously, the location entities refer to destination and source cities/countries, hence they play a very important role in the overall semantic success of our application.\n    ```", "```py\n    import spacy\n    from spacy.matcher import Matcher  \n    nlp = spacy.load(\"en_core_web_md\")\n    matcher = Matcher(nlp.vocab)\n    pattern = [{\"POS\": \"ADP\"}, {\"ENT_TYPE\": \"GPE\"}]\n    matcher.add(\"prepositionLocation\", [pattern])\n    doc = nlp(\"show me flights from denver to boston on tuesday\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n        print(doc[start:end])\n    ... \n    from denver\n    to boston\n    ```", "```py\n    doc = nlp(\"i'm looking for a flight that goes from ontario to westchester and stops in chicago\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n       print(doc[start:end])\n    ... \n    from ontario\n    to westchester\n    in chicago\n    ```", "```py\n    doc = nlp(\"what flights arrive in chicago on sunday on continental\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n       print(doc[start:end])\n    ... \n    in chicago\n    ```", "```py\n    doc = nlp(\"yes i'd like a flight from long beach to st. louis by way of dallas\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n       print(doc[start:end])\n    ... \n    from long\n    to st\n    of dallas\n    ```", "```py\n    doc = nlp(\"what are the evening flights flying out of dallas\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n       print(doc[start:end])\n    ... \n    of dallas\n    ```", "```py\n    pattern = [{\"ENT_TYPE\": \"ORG\", \"ORG. We wanted to capture one or more occurrences to capture the multi-word entities as well, which is why we used the OP: \"+\" operator. \n    ```", "```py\n    what does restriction ap 57 mean?\n    what does the abbreviation co mean?\n    what does fare code qo mean\n    what is the abbreviation d10\n    what does code y mean\n    what does the fare code f and fn mean\n    what is booking class c\n    ```", "```py\n    pattern1 = [{\"TEXT\": {\"REGEX\": \"\\w{1,2}\\d{1,2}\"}}]\n    pattern2 = [{\"SHAPE\": { \"IN\": [\"x\", \"xx\"]}}, {\"SHAPE\": { \"IN\": [\"d\", \"dd\"]}}]\n    pattern3 = [{\"TEXT\": {\"IN\": [\"class\", \"code\", \"abbrev\", \"abbreviation\"]}}, {\"SHAPE\": { \"IN\": [\"x\", \"xx\"]}}]\n    pattern4 =   [{\"POS\": \"NOUN\", \"SHAPE\": { \"IN\": [\"x\", \"xx\"]}}]\n    ```", "```py\n    matcher = Matcher(nlp.vocab)\n    matcher.add(\"abbrevEntities\", [pattern1, pattern2, pattern3, pattern4])\n    ```", "```py\n    sentences = [\n    'what does restriction ap 57 mean',\n    'what does the abbreviation co mean', \n    'what does fare code qo mean',\n     'what is the abbreviation d10', \n    'what does code y mean', \n    'what does the fare code f and fn mean',\n     'what is booking class c'\n    ]\n            18\\. We're ready to feed our sentences to the matcher:for sent in sentences:\n       doc = nlp(sent)\n       matches = matcher(doc)\n       for mid, start, end in matches:\n         print(doc[start:end])\n    ... \n    ap 57\n    57\n    abbreviation co\n    co\n    code qo\n    d10\n    code y\n    code f\n    class c\n    c\n    ```", "```py\nI want to fly to Munich tomorrow. \n```", "```py\nI'm going to a conference in Munich. I need an air ticket.\nMy sister's wedding will be held in Munich. I'd like to book a flight.\n```", "```py\nI want to book a flight to my conference without stopping at Berlin.\n```", "```py\nimport spacy\nnlp = spacy.load(\"en_core_web_md\")\ndef reach_parent(source_token, dest_token):\n  source_token = source_token.head\n   while source_token != dest_token:\n     if source_token.head == source_token:\n       return None\n    source_token = source_token.head\n   return source_token\ndoc = nlp(\"I'm going to a conference in Munich.\")\ndoc[-2]\nMunich\ndoc[3]\nto\ndoc[-1]\n.\nreach_parent(doc[-2], doc[3])\nto\nreach_parent(doc[-1], doc[3])\nNone\n```", "```py\nI bought flowers.\nHe loved his cat.\nHe borrowed my book.\n```", "```py\nI bought\n```", "```py\nYesterday I slept for 8 hours.\nThe cat ran towards me.\nWhen I went out, the sun was shining.\nHer cat died 3 days ago.\n```", "```py\nI slept.\nThe cat ran.\nThe sun was shining.\nHer cat died.\n```", "```py\nI bought flowers.  I bought what? - flowers\nHe loved his cat.  He loved who?  - his cat\nHe borrowed my book. He borrowed what? - my book\n```", "```py\nHe gave me his book.  He gave his book to whom?  - me\nHe gave his book to me. He gave his book to whom? -me\n```", "```py\nimport spacy\nnlp = spacy.load(\"en_core_web_md\")\ndoc = nlp(\"find a flight from washington to sf\")\nfor token in doc:\n  if token.dep_ == \"dobj\":\n    print(token.head.text + token.text.capitalize())\nfindFlight\n```", "```py\nshow all flights and fares from denver to san francisco\n```", "```py\nimport spacy\nnlp = spacy.load(\"en_core_web_md\")\ndoc = nlp(\"show all flights and fares from denver to san francisco\") \nfor token in doc:\n   if token.dep_ == \"dobj\":\n     dobj = token.text\n     conj = [t.text for t in token.conjuncts]\n     verb = donj.head\nprint(verb, dobj, conj)\nshow flights ['fares']\n```", "```py\ni want to make a reservation for a flight\n```", "```py\ndoc = nlp(\"i want to make a reservation for a flight\")\ndObj =None\ntVerb = None\n# Extract the direct object and its transitive verb\nfor token in doc:\n  If token.dep_ == \"dobj\":\n    dObj = token\n    tVerb = token.head\n# Extract the helper verb\nintentVerb = None\nverbList = [\"want\", \"like\", \"need\", \"order\"]\nif tVerb.text in verbList:\n  intentVerb = tVerb\nelse:\n  if tVerb.head.dep_ == \"ROOT\":\n    helperVerb = tVerb.head\n# Extract the object of the intent\nintentObj = None\nobjList = [\"flight\", \"meal\", \"booking\"]\nif dObj.text in objList:\n  intentObj = dObj\nelse:\n  for child in dObj.children:\n    if child.dep_ == \"prep\":\n      intentObj = list(child.children)[0]\n      break\n    elif child.dep_ == \"compound\":\n      intentObj = child\n      break \nprint(intentVerb.text + intentObj.text.capitalize())\nwantFlight\n```", "```py\nverbSynsets = [\n(\"show\", \"list\"),\n(\"book\", \"make a reservation\", \"buy\", \"reserve\")\n] \nobjSynsets = [\n(\"meal\", \"food\"),\n(\"aircraft\", \"airplane\", \"plane\")\n]\n```", "```py\n    doc = nlp(\"show me all aircrafts that cp uses\")\n    doc2 = nlp(\"list all meals on my flight\")\n    ```", "```py\n    for token in doc:\n       if token.dep_ == \"dobj\":\n         obj = token.lemma_\n         verb = token.head.lemma_\n         break\n    ```", "```py\n    for token in doc2:\n       if token.dep_ == \"dobj\":\n         obj2 = token.lemma_\n         verb2 = token.head.lemma_\n         break\n    verb, obj\n    ('show' , 'aircraft')\n    verb2, obj2\n    ('list', 'meal')\n    ```", "```py\n    vsyn = [syn for syn in verbSynsets if verb in item]\n    vsyn[0]\n    (\"show\", \"list\")\n    v2 in vsyn[0]\n    True\n    ```", "```py\n    osyn = [syn for syn in objSynsets if obj in item]\n    osyn[0]\n    (\"aircraft\", \"airplane\", \"plane\")\n    obj2 in vsyn[0]\n    False\n    ```", "```py\n    doc = nlp(\"show me all aircrafts that cp uses\")\n    doc2 = nlp(\"list all meals on my flight\")\n    ```", "```py\n    for token in doc:\n       if token.dep_ == \"dobj\":\n         obj = token\n         verb = token.head\n         break\n    ```", "```py\n    for token in doc2:\n       if token.dep_ == \"dobj\":\n         obj2 = token\n         verb2 = token.head\n         break\n    verb, obj\n    ('show' , 'aircraft')\n    verb2, obj2\n    ('list', 'meal')\n    ```", "```py\n    obj.similarity(obj2)\n    0.15025872                    # A very low score, we can deduce these 2 utterances are not related at this point.\n    ```", "```py\n    verb.similarity(verb2)\n    0.33161193\n    ```", "```py\n    show me flights from denver to philadelphia on tuesday\n    ```", "```py\n    import spacy\n    from spacy.matcher import Matcher  \n    nlp = spacy.load(\"en_core_web_md\")\n    matcher = Matcher(nlp.vocab)\n    pattern = [{\"POS\": \"ADP\"}, {\"ENT_TYPE\": \"GPE\"}]\n    matcher.add(\"prepositionLocation\", [pattern])\n    # Location entities\n    doc = nlp(\"show me flights from denver to philadelphia on tuesday\")\n    matches = matcher(doc)\n    for mid, start, end in matches:\n        print(doc[start:end])\n    ... \n    from denver\n    to philadelphia\n    # All entities:\n    ents = doc.ents\n    (denver, philedelphia, tuesday)\n    ```", "```py\n    {\n    'utterance': 'show me flights from denver to philadelphia on tuesday',\n    'entities': {\n                  'date': 'tuesday',\n                  'locations': {\n                                     'from': 'denver',\n                                     'to': 'philadelphia'\n                                     }\n                      }\n    }\n    ```", "```py\n    import spacy\n    nlp = spacy.load(\"en_core_web_md\")\n    doc = nlp(\"show me flights from denver to philadelphia on tuesday\")\n    for token in doc:\n      if token.dep_ == \"dobj\":\n        print(token.head.lemma_ + token.lemma_.capitalize())\n    showFlight\n    ```", "```py\n    {\n    'utterance': 'show me flights from denver to philadelphia on tuesday',\n    'intent ': ' showFlight',\n    'entities': {\n                  'date': 'tuesday',\n                  'locations': {\n                                     'from': 'denver',\n                                     'to': 'philadelphia'\n                                     }\n                      }\n    }\n    ```"]