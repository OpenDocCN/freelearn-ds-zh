["```py\nC:\\Python36\\Scripts>pip install Django==2.0\n```", "```py\nC:\\Python36\\Scripts>pip install psycopg2\n```", "```py\nimport psycopg2\nconnection = psycopg2.connect(host='localhost', user='{user}',password='{password}', port=\"5432\")\nconnection.autocommit = True\ncursor = connection.cursor()\ncursor.execute('CREATE DATABASE chapter12')\n```", "```py\nimport psycopg2\nconnection = psycopg2.connect(dbname='chapter12', host='localhost', user='{user}', password='{password}', port=\"5432\")\ncursor = connection.cursor()\nconnection.autocommit = True\ncursor.execute('CREATE EXTENSION postgis')\nconnection.close() \n```", "```py\nDATABASES = {\n     'default': {\n         'ENGINE': 'django.db.backends.sqlite3',\n         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n     }\n}\n```", "```py\nDATABASES = {\n    'default': {\n         'ENGINE': 'django.contrib.gis.db.backends.postgis',\n         'NAME': 'chapter12',\n         'USER': '{username}',\n         'PASSWORD': '{password}',\n         'HOST': '127.0.0.1',\n         'PORT':'5432'\n    },\n}\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n 'django.contrib.gis',\n 'arenas',\n]\n```", "```py\nC:\\Projects\\chapter12>python manage.py ogrinspect arenas\\data\\Arenas_NBA.shp Arenas --srid=4326 --mapping\n```", "```py\nC:\\Projects\\chapter12>python manage.py ogrinspect arenas\\data\\US_States.shp US_States \\\n --srid=4326 --mapping --multi\n```", "```py\n# This is an auto-generated Django model module created by ogrinspect.\nfrom django.contrib.gis.db import models\nclass US_States(models.Model):\n stfips = models.CharField(max_length=2)\n state = models.CharField(max_length=66)\n stpostal = models.CharField(max_length=2)\n version = models.CharField(max_length=2)\n dotregion = models.IntegerField()\n shape_leng = models.FloatField()\n shape_area = models.FloatField()\n geom = models.MultiPolygonField(srid=4326)\n# Auto-generated `LayerMapping` dictionary for US_States model\n us_states_mapping = {\n 'stfips': 'STFIPS',\n 'state': 'STATE',\n 'stpostal': 'STPOSTAL',\n 'version': 'VERSION',\n 'dotregion': 'DotRegion',\n 'shape_leng': 'Shape_Leng',\n 'shape_area': 'Shape_Area',\n 'geom': 'MULTIPOLYGON',\n}\n```", "```py\nC:\\Projects\\chapter12>python manage.py makemigrations\nMigrations for 'arenas':\n arenas\\migrations\\0001_initial.py\n - Create model Arenas\n - Create model Counties\n - Create model Districts\n - Create model US_States\n```", "```py\nC:\\Projects\\chapter12>python manage.py migrate\n```", "```py\nimport os\nfrom django.contrib.gis.utils import LayerMapping\nfrom .models import US_States, Counties, Arenas, Districts\n```", "```py\nus_counties_mapping = {\n'stfips' : 'STFIPS', 'ctfips' : 'CTFIPS', 'state' : 'STATE', 'county' : 'COUNTY',\n'version' : 'VERSION', 'shape_leng' : 'Shape_Leng', 'shape_area' : 'Shape_Area', 'geom' : 'MULTIPOLYGON'\n}\ncounties_shp = os.path.abspath(os.path.join(os.path.dirname(__file__), 'data','US_County_Boundaries.shp'),\n)\n```", "```py\ndef run(verbose=True):\n    lm = LayerMapping(\n        US_States, states_shp, us_states_mapping,\n        transform=False, encoding='iso-8859-1',\n    )\n    lm.save(strict=True, verbose=verbose)\n    lm = LayerMapping(\n        Counties, counties_shp, us_counties_mapping,\n        transform=False, encoding='iso-8859-1',\n    )\n    lm.save(strict=True, verbose=verbose)\n    lm = LayerMapping(\n        Districts, districts_shp, districts_mapping,\n        transform=False, encoding='iso-8859-1',\n    )\n    lm.save(strict=True, verbose=verbose)\n    lm = LayerMapping(\n        Arenas, arenas_shp, arenas_mapping,\n        transform=False, encoding='iso-8859-1',\n    )\n    lm.save(strict=True, verbose=verbose)\n```", "```py\n>>> from arenas import load\n>>> load.run()\n```", "```py\nfrom django.contrib.gis import admin\nfrom .models import US_States, Counties, Arenas, Districts\nadmin.site.register(US_States, admin.GeoModelAdmin)\nadmin.site.register(Counties, admin.GeoModelAdmin)\nadmin.site.register(Arenas, admin.GeoModelAdmin)\nadmin.site.register(Districts, admin.GeoModelAdmin)\n```", "```py\nC:\\Projects\\chapter12>python manage.py createsuperuser\nUsername: loki\nEmail address: email@server.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n```", "```py\nfrom django.urls import include, path\nfrom django.contrib.gis import admin\nurlpatterns = [\n  path('', include('arenas.urls')),\n  path('arena/', include('arenas.urls')),\n  path('admin/', admin.site.urls),\n]\n```", "```py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('arena', views.arena, name='arena'),\n]\n```", "```py\nfrom django import forms\nfrom .models import Arenas\nclass ArenaForm(forms.Form):\n    name = \"\"\n    description = \"Use the dropdown to select an arena.\"\n    selections = \n    forms.ChoiceField(choices=Arenas.objects.values_list('id','name1'),\n                                  widget=forms.Select(),required=True)\n```", "```py\n var themap = L.map('map').setView([ {{form.latitude}}, {{form.longitude}}], 13);\n```", "```py\n  L.marker([ {{form.latitude}},{{form.longitude}}]).addTo(themap)\n  .bindPopup(\"{{form.popup}}\").openPopup();\n```", "```py\n  <form method=\"post\" class=\"form\">\n     <h3>{{form.name}}</h3>\n     <h4>{{form.description}}</h4>\n    {{form.selections}}\n    <br>\n    <input type=\"submit\" value=\"Find Data\">\n    {% csrf_token %}\n  </form>\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseNotFound\nfrom .models import US_States, Counties, Districts, Arenas\nfrom .forms import ArenaForm\nfrom django.views.decorators.http import require_http_methods\nimport random\n```", "```py\n@require_http_methods([\"GET\", \"POST\"])\ndef index(request):\n    return redirect(arena)\n```", "```py\ndef queryarena(name):\n    arena = Arenas.objects.filter(name1=name)[0]\n    state = US_States.objects.filter(geom__intersects=arena.geom)\n    if state:\n        state = state[0]\n        county = Counties.objects.filter(geom__contains=arena.geom)[0]\n        district = Districts.objects.filter(geom__contains=arena.geom)[0]\n        popup = \"This arena is called \" + arena.name1 + \" and it's \n        located at \" \n        popup += str(round(arena.geom.x,5))+ \",\" + \n        str(round(arena.geom.y,5) )\n        popup += \"It is located in \" +state.state + \" and in the county \n        of \" + county.county\n        popup += \" and in Congressional District \" + district.district\n        return arena.name1, arena.geom.y, arena.geom.x, popup\n    else:\n        return arena.name1, arena.geom.y, arena.geom.x, arena.name1 + \" \n        is not in the United States\"\n```", "```py\n@require_http_methods([\"GET\", \"POST\"])\ndef arena(request):\n  values = Arenas.objects.values_list('id','name1')\n  if request.method==\"GET\":\n    form= ArenaForm(request.GET)\n    names = [name for id, name in values]\n    length = len(names)\n    selectname = names[random.randint(0, length-1)]\n    form.name, form.latitude, form.longitude, form.popup =     queryarena(selectname)\n    return render(request, \"arena/index.html\", {\"form\":form})\n  else:\n    form= ArenaForm(request.POST)\n    if form.is_valid():\n      selectid = int(request.POST['selections'])\n      selectname = [name for ids, name in values if ids == selectid][0]\n      form.name, form.latitude, form.longitude, form.popup =         \n      queryarena(selectname)\n      return render(request, \"arena/index.html\", {\"form\":form})\n```", "```py\nC:\\Projects\\chapter12>python manage.py runserver\n```"]