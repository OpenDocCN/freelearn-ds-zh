- en: 3\. Introduction to NumPy, Pandas, and Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the fundamentals of the `NumPy`, `pandas`,
    and `matplotlib` libraries. You will learn to create one-dimensional and multi-dimensional
    arrays and manipulate `pandas` DataFrames and `series` objects. By the end of
    this chapter, you will be able to visualize and plot numerical data using the
    `Matplotlib` library, as well as to apply `matplotlib`, `NumPy`, and `pandas`
    to calculate descriptive statistics from a DataFrame or matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapters, we covered some advanced data structures, such as
    stack, queue, iterator, and file operations in Python. In this chapter, we will
    cover three essential libraries, namely `NumPy`, `pandas`, and `matplotlib`. `NumPy`
    is an advanced math library in Python with an extensive range of functionality.
    `pandas` is a library built on `NumPy` that allows developers to model the data
    in a table structure similar to a database; `malplotlib`, on the other hand, is
    a charting library that is influenced by Matlab. With these libraries, you will
    be able to handle most data wrangling tasks.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `NumPy` array is similar to a list but differs in some ways. In the life of
    a data scientist, reading and manipulating an array is of prime importance, and
    it is also the most frequently encountered task. These arrays could be a one-dimensional
    list, a multi-dimensional table, or a matrix full of numbers and can be used for
    a variety of mathematical calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'An array could be filled with integers, floating-point numbers, Booleans, strings,
    or even mixed types. However, in the majority of cases, numeric data types are
    predominant. Some example scenarios where you will need to handle numeric arrays
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To read a list of phone numbers and postal codes and extract a certain pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a matrix with random numbers to run a Monte Carlo simulation on a
    statistical process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To scale and normalize a sales figure table, with lots of financial and transactional
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a smaller table of key descriptive statistics (for example, mean,
    median, min/max range, variance, and inter-quartile ranges) from a large raw data
    table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read in and analyze time series data in a one-dimensional array daily, such
    as the stock price of an organization over a year or daily temperature data from
    a weather station
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, arrays and numeric data tables are everywhere. As a data wrangling
    professional, the importance of the ability to read and process numeric arrays
    cannot be overstated. It is very common to work with data and need to modify it
    with a mathematical function. In this regard, `NumPy` arrays are the most important
    objects in Python that you need to know about.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Arrays and Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy and SciPy are open source add-on modules for Python that provide common
    mathematical and numerical routines in pre-compiled, fast functions. Over the
    years, these have grown into highly mature libraries that provide functionality
    that meets, or perhaps exceeds, what is associated with common commercial software
    such as Matlab or Mathematica.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main advantages of the NumPy module is that it can be used to handle
    or create one-dimensional or multi-dimensional arrays. This advanced data structure/class
    is at the heart of the NumPy package and it serves as the fundamental building
    block of more advanced concepts, such as the `pandas` library and specifically,
    the pandas DataFrame, which we will cover shortly in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy arrays are different than common Python lists since Python lists can be
    thought of as simple arrays. NumPy arrays are built for mathematical vectorized
    operations that process a lot of numerical data with just a single line of code.
    Many built-in mathematical functions in NumPy arrays are written in low-level
    languages such as C or Fortran and are pre-compiled for really fast execution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: NumPy arrays are optimized data structures for numerical analysis, and that's
    why they are so important to data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the first exercise in this chapter, where we will learn how
    to create a `NumPy` array from a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.01: Creating a NumPy Array (from a List)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a `NumPy` array from a list. We''re going
    to define a list first and use the array function of the `NumPy` library to convert
    the list into an array. Next, we''ll read from a `.csv` file and store the data
    in a `NumPy` array using the `genfromtxt` function of the `NumPy` library. To
    do so, let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with `NumPy`, we must import it. By convention, we give it a short
    name, np, while importing it. This will make referencing the objects under the
    `NumPy` package organized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a list with three elements: `1`, `2`, and `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `array` function to convert it into an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We just created a `NumPy` array object called `array_1` from the regular Python
    list object, `list_1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an array of floating type elements, that is, `1.2`, `3.4`, and `5.6`,
    using the array function directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s check the type of the newly created object, a, using the `type` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `type` function to check the type of `array_1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, both a and `array_1` are `NumPy` arrays.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, use type on `list_1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, `list_1` is essentially a Python list and we have used the array
    function of the `NumPy` library to create a `NumPy` array from that list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s read a `.csv` file as a `NumPy` array using the `genfromtxt` function
    of the `NumPy` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `type` function to check the type of `data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the data variable is also a `NumPy` array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2Y9pTTx](https://packt.live/2Y9pTTx).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2URNcPz](https://packt.live/2URNcPz).
  prefs: []
  type: TYPE_NORMAL
- en: From this exercise, we can observe that the `NumPy` array is different from
    the regular list object. The most important point to keep in mind is that `NumPy`
    arrays do not have the same methods as lists and that they are essentially designed
    for mathematical functions.
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPy` arrays are like mathematical objects – `NumPy` arrays, we add the first
    element of the first array to the first element of the second array – there is
    an element-to-element correspondence in this operation. This is in contrast to
    Python lists, where the elements are simply appended and there is no element-to-element
    relation. This is the real power of a NumPy array: they can be treated just like
    mathematical vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: A vector is a collection of numbers that can represent, for example, the coordinates
    of points in a three-dimensional space or the color of numbers (RGB) in a picture.
    Naturally, relative order is important for such a collection and as we discussed
    previously, a `NumPy` array can maintain such order relationships. That's why
    they are perfectly suitable to use in numerical computations.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, we're going to perform the addition operation on `NumPy`
    arrays in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.02: Adding Two NumPy Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This simple exercise will demonstrate the addition of two `NumPy` arrays using
    the `+` notation, and thereby show the key difference between a regular Python
    list/array and a `NumPy` array. Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a Python list called `list_1` and a `NumPy` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `+` notation to concatenate two `list_1` objects and save the results
    in `list_2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the same `+` notation to concatenate two `array_1` objects and save the
    result in `array_2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load a `.csv` file and concatenate it with itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Did you notice the difference? The first `6` elements, [`1, 2, 3, 1, 2, 3`],
    but the second `NumPy` array (or vector) with the elements [`2, 4, 6`], which
    are just the sum of the individual elements of `array_1`. As we discussed earlier,
    `NumPy` arrays are perfectly designed to perform element-wise operations since
    there is element-to-element correspondence.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3fyvSqF](https://packt.live/3fyvSqF).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3fvUDnf](https://packt.live/3fvUDnf%20)
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPy` arrays even support element-wise exponentiation. For example, suppose
    there are two arrays – the elements of the first array will be raised to the power
    of the elements in the second array.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will try out some mathematical operations on `NumPy` arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.03: Mathematical Operations on NumPy Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll generate a `NumPy` array with the values extracted
    from a `.csv` file. We''ll be using the multiplication and division operators
    on the generated `NumPy` array. Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.csv` file that will be used is `numbers.csv`; this can be found at: [https://packt.live/30Om2wC](https://packt.live/30Om2wC).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library and create a `NumPy` array from the `.csv` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Multiply `45` by every element in the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Divide the array by `67.7`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Raise one array to the second array''s power using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Thus, we can observe how NumPy arrays allow element-wise exponentiation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3hBZMw4](https://packt.live/3hBZMw4).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2N4dE3Y](https://packt.live/2N4dE3Y).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll discuss how to apply advanced mathematical operations
    to NumPy arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Mathematical Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating numerical arrays is a fairly common task. So far, we have been doing
    this by creating a Python list object and then converting that into a `NumPy`
    array. However, we can bypass that and work directly with native NumPy methods.
    The `arange` function creates a series of numbers based on the minimum and maximum
    bounds you give and the step size you specify. Another function, `linspace`, creates
    a series of fixed numbers of the intermediate points between two extremes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we are going to create a list and then convert that into
    a `NumPy` array. We will then show you how to perform some advanced mathematical
    operations on that array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.04: Advanced Mathematical Operations on NumPy Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll practice using all the built-in mathematical functions
    of the `NumPy` library. Here, we are going to be creating a list and converting
    it into a `NumPy` array. Then, we will perform some advanced mathematical operations
    on that array. Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use the `numbers.csv` file in this exercise, which can be found
    here: [https://packt.live/30Om2wC](https://packt.live/30Om2wC).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `pandas` library and read from the `numbers.csv` file using `pandas`.
    Then, convert it into a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.1: Partial output of the .csv file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.1: Partial output of the .csv file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Convert the list into a `NumPy` array by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.2: Partial output of the NumPy array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.2: Partial output of the NumPy array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the sine value of the array by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.3: Partial output of the sine value'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.3: Partial output of the sine value'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the logarithmic value of the array by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.4: Partial output of the logarithmic array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.4: Partial output of the logarithmic array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the exponential value of the array by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.5: Partial output of the exponential array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.5: Partial output of the exponential array'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, advanced mathematical operations are fairly easy to perform on
    a `NumPy` array using the built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/37NIyrf](https://packt.live/37NIyrf).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3eh0Xz6](https://packt.live/3eh0Xz6).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.05: Generating Arrays Using arange and linspace Methods'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will demonstrate how we can create a series of numbers using
    the `arange` method. To make the list linearly spaced, we''re going to use the
    `linspace` method. To do so, let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library and create a series of numbers using the `arange`
    method using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print numbers using the `arange` function by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For linearly spaced numbers, we can use the `linspace` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the `linspace` method helps us in creating linearly spaced elements
    in an array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2YOZGsy](https://packt.live/2YOZGsy).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3ddPcYG](https://packt.live/3ddPcYG).
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have only created one-dimensional arrays. Now, let's create some
    multi-dimensional arrays (such as a matrix in linear algebra).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.06: Creating Multi-Dimensional Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, just like we created the one-dimensional array from a simple
    flat list, we will create a two-dimensional array from a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This exercise will use the `numbers2.csv` file, which can be found at [https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary Python libraries, load the `numbers2.csv` file, and convert
    it into a two-dimensional `NumPy` array by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tuples can be converted into multi-dimensional arrays by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Thus, we have created multi-dimensional arrays using Python lists and tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/30RjJcc](https://packt.live/30RjJcc).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/30QiIBm](https://packt.live/30QiIBm).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's determine the dimension, shape, size, and data type of the two-dimensional
    array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.07: The Dimension, Shape, Size, and Data Type of Two-dimensional
    Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise will demonstrate a few methods that will let you check the dimension,
    shape, and size of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `numbers2.csv` file can be found at [https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that if it''s a `3x2` matrix, that is, it has `3` rows and `2` columns,
    then the shape will be (`3,2`), but the size will be `6`, as in `6 = 3x2`. To
    learn how to find out the dimensions of an array in Python, let''s go through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary Python modules and load the `numbers2.csv` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the dimension of the matrix using the `ndim` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the size using the `size` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the shape of the matrix using the `shape` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the dimension type using the `dtype` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this exercise, we looked at the various utility methods available in order
    to check the dimensions of an array. We used the `dnim`, `shape`, `dtype`, and
    `size` functions to look at the dimension of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/30PVEm1](https://packt.live/30PVEm1).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3ebSsoG](https://packt.live/3ebSsoG).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with basic vector (one-dimensional) and matrix data
    structures in NumPy, we will be able to create special matrices with ease. Often,
    you may have to create matrices filled with zeros, ones, random numbers, or ones
    in a diagonal fashion. An identity matrix is a matrix filled with zeros and ones
    in a diagonal from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.08: Zeros, Ones, Random, Identity Matrices, and Vectors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will be creating a vector of zeros and a matrix of zeros
    using the `zeros` function of the `NumPy` library. Then, we''ll create a matrix
    of fives using the `ones` function, followed by generating an identity matrix
    using the `eye` function. We will also work with the `random` function, where
    we''ll create a matrix filled with random values. To do this, let''s go through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Print the vector of zeros by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the matrix of zeros by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the matrix of fives by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print an identity matrix by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print an identity matrix with a dimension of `4x4` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print a matrix of random shape using the `randint` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see from the preceding output, a matrix was generated with a random shape.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When creating matrices, you need to pass on tuples of integers as arguments.
    The output is susceptible to change since we have used random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2UROs5f](https://packt.live/2UROs5f).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/37J5hV9](https://packt.live/37J5hV9).
  prefs: []
  type: TYPE_NORMAL
- en: Random number generation is a very useful utility and needs to be mastered for
    data science/data wrangling tasks. We will look at the topic of random variables
    and distributions again in the section on statistics and learn how NumPy and pandas
    have built-in random number and series generation, as well as manipulation functions.
  prefs: []
  type: TYPE_NORMAL
- en: '`reshape` is the `ravel` function, which flattens any given array into a one-dimensional
    array. It is a very useful action in many machine learning and data analytics
    tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.09: Reshaping, Ravel, Min, Max, and Sorting'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will generate a random one-dimensional vector of two-digit
    numbers and then reshape the vector into multi-dimensional vectors. Let''s go
    through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an array of `30` random integers (sampled from `1` to `99`) and reshape
    it into two different forms using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the shape using the `shape` function by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the arrays `a`, `b`, and `c` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`b` is a three-dimensional array – a kind of list of a list of a list. The
    output is susceptible to change since we have used random numbers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ravel file `b` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (the output may be different in each iteration):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2Y6KYh8](https://packt.live/2Y6KYh8).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2N4fDFs](https://packt.live/2N4fDFs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this exercise, you learned how to use `shape` and `reshape` functions to
    see and adjust the dimensions of an array. This can be useful in a variety of
    cases when working with arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing and slicing NumPy arrays is very similar to regular list indexing.
    We can even go through a vector of elements with a definite step size by providing
    it as an additional argument in the format (start, step, end). Furthermore, we
    can pass a list as an argument to select specific elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In multi-dimensional arrays, you can use two numbers to denote the position
    of an element. For example, if the element is in the third row and second column,
    its indices are 2 and 1 (because of Python's zero-based indexing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.10: Indexing and Slicing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will learn how to perform indexing and slicing on one-dimensional
    and multi-dimensional arrays. To complete this exercise, let''s go through the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an array of `10` elements and examine its various elements by slicing
    and indexing the array with slightly different syntaxes. Do this by using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the element in the seventh position by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the elements between the third and sixth positions by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the elements until the fourth position by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the elements backward by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the elements using their backward index, skipping three values, by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new array called `array_2` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the second, fourth, and ninth elements of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a multi-dimensional array by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The output is susceptible to change since we have used random numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Access the values using double bracket indexing by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the values using single bracket indexing by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the values in a multi-dimensional array using a row or column by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the matrix with the specified row and column indices by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the matrix with the specified row and column indices by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The output is susceptible to change since we have used random numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3fsxJ00](https://packt.live/3fsxJ00).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3hEDYjh](https://packt.live/3hEDYjh).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this exercise, we worked with `NumPy` arrays and various ways of subletting
    them, such as slicing them. When working with arrays, it's very common to deal
    with them in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional SubSetting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Conditional subsetting** is a way to select specific elements based on some
    numeric condition. It is almost like a shortened version of a SQL query to subset
    elements. See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code example, we have created an array with 15 random values
    between `10-100`. We have applied the `reshape` function. Then, we selected the
    elements that are less than `50`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: NumPy arrays operate just like mathematical matrices, and the operations are
    performed element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at an exercise to understand how we can perform array operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.11: Array Operations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to create two matrices (multi-dimensional arrays)
    with random integers and demonstrate element-wise mathematical operations such
    as addition, subtraction, multiplication, and division. We can show the exponentiation
    (raising a number to a certain power) operation by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Due to random number generation, your specific output could be different than
    what is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library and create two matrices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform addition, subtraction, division, and linear combination on the matrices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the addition of a scalar, exponential matrix cube, and exponential
    square root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The output is susceptible to change since we have used random numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3fC1ziH](https://packt.live/3fC1ziH).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3fy6j96](https://packt.live/3fy6j96).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have now seen how to work with arrays to perform various mathematical functions,
    such as scalar addition and matrix cubing.
  prefs: []
  type: TYPE_NORMAL
- en: Stacking Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stacking arrays on top of each other (or side by side) is a useful operation
    for data wrangling. Stacking is a way to concatenate two NumPy arrays together.
    Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '`NumPy` has many other advanced features, mainly related to statistics and
    linear algebra functions, which are used extensively in machine learning and data
    science tasks. However, not all of that is directly useful for beginner-level
    data wrangling, so we won''t cover it here.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll talk about pandas DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pandas` library is a Python package that provides fast, flexible, and expressive
    data structures that are designed to make working with relational or labeled data
    both easy and intuitive. It aims to be the fundamental high-level building block
    for doing practical, real-world data analysis in Python. Additionally, it has
    the broader goal of becoming the most powerful and flexible open source data analysis/manipulation
    tool that's available in any language.
  prefs: []
  type: TYPE_NORMAL
- en: The two primary data structures of pandas are Series (one-dimensional) and DataFrames
    (two-dimensional) and they handle the vast majority of typical use cases. `pandas`
    is built on top of `NumPy` and is intended to integrate well within a scientific
    computing environment with many other third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few exercises in order to understand data handling techniques
    using the `pandas` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.12: Creating a Pandas Series'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will learn how to create a `pandas` series object from
    the data structures that we created previously. If you have imported pandas as
    pd, then the function to create a series is simply `pd.Series`. Let''s go through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library and initialize the labels, lists, and a dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `pandas` as `pd` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a series from the `my_data` list by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a series from the `my_data` list along with the labels as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a series from the `NumPy` array, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a series from the dictionary, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You may get a different final output because the system may store the object
    in the memory differently.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2BkMJOL](https://packt.live/2BkMJOL).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/30XhxzQ](https://packt.live/30XhxzQ).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this exercise, we created `pandas` series, which are the building blocks
    of `pandas` DataFrames. The `pandas` `series` object can hold many types of data,
    such as integers, objects, floats, doubles, and others. This is the key to constructing
    a bigger table where multiple series objects are stacked together to create a
    database-like entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.13: Pandas Series and Data Handling'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a `pandas` series using the `pd.series` function.
    Then, we will manipulate the data in the DataFrame using various handling techniques.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `pandas` series with numerical data by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `pandas` series with labels by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `pandas` series with functions by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `pandas` series with a dictionary by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3hzXRIr](https://packt.live/3hzXRIr).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3endeC9](https://packt.live/3endeC9).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this exercise, we created pandas `series` objects using various types of
    lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.14: Creating Pandas DataFrames'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pandas` DataFrame is similar to an Excel table or relational database
    (SQL) table, which consists of three main components: the data, the index (or
    rows), and the columns. Under the hood, it is a stack of `pandas` series objects,
    which are themselves built on top of `NumPy` arrays. So, all of our previous knowledge
    of NumPy arrays applies here. Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple DataFrame from a two-dimensional matrix of numbers. First,
    the code draws `20` random integers from the uniform distribution. Then, we need
    to reshape it into a (`5,4`) NumPy array – `5` rows and `4` columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the rows labels as (`''A'',''B'',''C'',''D'',''E''`) and column labels
    as (`''W'',''X'',''Y'',''Z''`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a DataFrame using `pd.DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.6: Output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.6: Output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a DataFrame from a Python dictionary of the lists of integers by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass this dictionary as a data argument to the `pd.DataFrame` function. Pass
    on a list of rows or indices. Notice how the dictionary keys became the column
    names and that the values were distributed among multiple rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.7: Output of DataFrame df2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.7: Output of DataFrame df2'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2UVTz4u](https://packt.live/2UVTz4u).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2CgBkAd](https://packt.live/2CgBkAd).
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we created DataFrames manually from scratch, which will allow
    us to understand DataFrames better.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The most common way that you will create a pandas DataFrame will be to read
    tabular data from a file on your local disk or over the internet – CSV, text,
    JSON, HTML, Excel, and so on. We will cover some of these in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.15: Viewing a DataFrame Partially'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous exercise, we used `print(df)` to print the whole DataFrame.
    For a large dataset, we would like to print only sections of data. In this exercise,
    we will read a part of the DataFrame. Let''s learn how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library and execute the following code to create a DataFrame
    with `25` rows. Then, fill it with random numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following code to view only the first five rows of the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that your output could be different due
    to randomness):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.8: The first five rows of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.8: The first five rows of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, `head` shows only five rows. If you want to see any specific number
    of rows, just pass that as an argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the first eight rows by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.9: The first eight rows of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.9: The first eight rows of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just like `head` shows the first few rows, `tail` shows the last few rows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the DataFrame using the `tail` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.10: The last 20 rows of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.10: The last few rows of the DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/30UiXLB](https://packt.live/30UiXLB).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2URYCTz](https://packt.live/2URYCTz).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we learned how to view portions of the DataFrame without looking
    at the whole DataFrame. In the next section, we''re going to look at two functionalities:
    indexing and slicing columns in a DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: Indexing and Slicing Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two methods for indexing and slicing columns in a DataFrame. They
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `DOT` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `bracket` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `df.column`. The bracket method is intuitive and easy to follow. In this
    method, you can access the data by the generic name/header of the column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code illustrates these concepts. We can execute them in our Jupyter Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows (a only the partial output is shown here because the
    actual column is long):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11: Rows of the ''X'' columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.11: Rows of the ''X'' columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the output showing the type of column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12: Type of ''X'' column'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.12: Type of ''X'' column'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the output showing the X and Z column indexed by passing a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13: Rows of the ''Y'' columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.13: Rows of the ''Y'' columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the output showing the type of the pair of columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14: Type of ''Y'' column'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.14: Type of ''Y'' column'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more than one column, the object turns into a DataFrame. But for a single
    column, it is a `pandas` series object.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen how to access the columns of DataFrames using both the
    DOT method and the bracket method. Dataframes are commonly used for row/column data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at indexing and slicing rows.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing and Slicing Rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Indexing and slicing rows in a DataFrame can also be done using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The label-based `loc` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The index-based `iloc` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `loc` method is intuitive and easy to follow. In this method, you can access
    the data by the generic name of the row. On the other hand, the `iloc` method
    allows you to access the rows by their numerical index. This can be very useful
    for a large table with thousands of rows, especially when you want to iterate
    over the table in a loop with a numerical counter. The following code illustrates
    the concepts of `iloc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15: Output of the loc and iloc methods'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.15: Output of the loc and iloc methods'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common tasks in data wrangling is creating or deleting columns
    or rows of data from your DataFrame. Sometimes, you want to create a new column
    based on some mathematical operation or transformation involving the existing
    columns. This is similar to manipulating database records and inserting a new
    column based on simple transformations. We'll look at some of these concepts in
    the upcoming exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.16: Creating and Deleting a New Column or Row'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we're going to create and delete a new column or a row from
    the `stock.csv` dataset. We'll also use the `inplace` function to modify the original DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `stock.csv` file can be found here: [https://packt.live/3hxvPNP](https://packt.live/3hxvPNP).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary Python modules, load the `stocks.csv` file, and create
    a new column using the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sample output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.16: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.16: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drop a column using the `df.drop` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output (partially shown) is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.17: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.17: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drop a specific row using the `df.drop` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The partial output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.18: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.18: Partial output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dropping methods creates a copy of the DataFrame and does not change the original
    DataFrame.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the original DataFrame by setting the `inplace` argument to `True`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.19: Partial Output of the DataFrame'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.19: Partial Output of the DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3frxthU](https://packt.live/3frxthU).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2USxJyA](https://packt.live/2USxJyA).
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned how to modify DataFrames by dropping or adding rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All the normal operations are not in-place, that is, they do not impact the
    original DataFrame object and return a copy of the original with addition (or
    deletion) instead. The last bit of the preceding code shows how to make a change
    in the existing DataFrame with the `inplace=True` argument. Please note that this
    change is irreversible and should be used with caution.
  prefs: []
  type: TYPE_NORMAL
- en: Statistics and Visualization with NumPy and Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great advantages of using libraries such as NumPy and pandas is that
    a plethora of built-in statistical and visualization methods are available, for
    which we don't have to search for and write new code. Furthermore, most of these
    subroutines are written using C or Fortran code (and pre-compiled), making them
    extremely fast to execute.
  prefs: []
  type: TYPE_NORMAL
- en: Refresher on Basic Descriptive Statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For any data wrangling task, it is quite useful to extract basic descriptive
    statistics, which should describe the data in ways such as the mean, median, and
    mode and create some simple visualizations or plots. These plots are often the
    first step in identifying fundamental patterns as well as oddities (if present)
    in the data. In any statistical analysis, descriptive statistics is the first
    step, followed by inferential statistics, which tries to infer the underlying
    distribution or process that the data might have been generated from. You can
    imagine that descriptive statistics will inform us of the basic characteristics
    of the data, while inferential statistics will help us understand not only the
    data we are working with but alternative data that we might be experimenting with.
  prefs: []
  type: TYPE_NORMAL
- en: Since inferential statistics is intimately coupled with the machine learning/predictive
    modeling stage of a data science pipeline, descriptive statistics naturally becomes
    associated with the data wrangling aspect.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two broad approaches to descriptive statistical analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Graphical techniques**: Bar plots, scatter plots, line charts, box plots,
    histograms, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The calculation of the central tendency and spread**: Mean, median, mode,
    variance, standard deviation, range, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will demonstrate how you can accomplish both of these tasks
    using Python. Apart from NumPy and pandas, we will need to learn the basics of
    another great package – `matplotlib` – which is the most powerful and versatile
    visualization library in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.17: Introduction to Matplotlib through a Scatter Plot'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will demonstrate the power and simplicity of matplotlib
    by creating a simple scatter plot from self-created data about the age, weight,
    and height of a few people. To do so, let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will define simple lists of the names of people, along with their
    age, weight (in kgs), and height (in centimeters):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the most important module from `matplotlib`, called `pyplot`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create simple scatter plots of `age` versus `weight`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.20: A screenshot of a scatter plot containing age and weight'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.20: A screenshot of a scatter plot containing age and weight'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding plot can be improved by enlarging the figure size, customizing
    the aspect ratio, adding a title with a proper font size, adding x-axis and y-axis
    labels with a customized font size, adding grid lines, changing the y-axis limit
    to be between `0` and `100`, adding x and y tick marks, customizing the scatter
    plot's color, and changing the size of the scatter dots.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The code for the improved plot is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.21: A screenshot of a scatter plot showing age versus weight'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.21: A screenshot of a scatter plot showing age versus weight'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can observe the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple (`8,6`) is passed as an argument for the figure size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list comprehension is used inside `xticks` to create a customized list of
    5-10-15-…-55.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A newline (`\n`) character is used inside the `plt.text()` function to break
    up and distribute the text into two lines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `plt.show()` function is used at the very end. The idea is to keep on adding
    various graphics properties (font, color, axis limits, text, legend, grid, and
    so on) until you are satisfied and then show the plot with one function. The plot
    will not be displayed without this last function call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding plot is quite self-explanatory. We can observe that the variations
    in weight are reduced after `18-20` years of age.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3hFzysK](https://packt.live/3hFzysK).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3eauxWP](https://packt.live/3eauxWP).
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have gone through the basics of using `matplotlib`, a popular
    charting function. In the next section, we will look at the definition of statistical measures.
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of Statistical Measures – Central Tendency and Spread
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A measure of central tendency is a single value that attempts to describe a
    set of data by identifying the central position within that set of data. They
    are also categorized as summary statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean**: The mean is the sum of all values divided by the total number of
    values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Median**: The median is the middle value. It is the value that splits the
    dataset in half. To find the median, order your data from smallest to largest,
    and then find the data point that has an equal amount of values above and below
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mode**: The mode is the value that occurs the most frequently in your dataset.
    On a bar chart, the mode is the highest bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, the mean is a better measure to use for symmetric data while the
    median is a better measure for data with a skewed (left- or right-heavy) distribution.
    For categorical data, you have to use the mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22: A screenshot of a curve showing the mean, median, and mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.22: A screenshot of a curve showing the mean, median, and mode'
  prefs: []
  type: TYPE_NORMAL
- en: 'The spread of the data is a measure of by how much the values in the dataset
    are likely to differ from the mean of the values. If all the values are close
    together, then the spread is low; on the other hand, if some or all of the values
    differ by a large amount from the mean (and each other), then there is a large
    spread in the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variance**: This is the most common measure of spread. The variance is the
    average of the squares of the deviations from the mean. Squaring the deviations
    ensures that negative and positive deviations do not cancel each other out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard deviation**: Because variance is produced by squaring the distance
    from the mean, its unit does not match that of the original data. Standard deviation
    is a mathematical trick that brings back parity. It is the positive square root
    of the variance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random Variables and Probability Distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A random variable is defined as the value of a given variable that represents
    the outcome of a statistical experiment or process.
  prefs: []
  type: TYPE_NORMAL
- en: Although it sounds very formal, pretty much everything around us that we can
    measure can be thought of as a random variable.
  prefs: []
  type: TYPE_NORMAL
- en: The reason behind this is that almost all natural, social, biological, and physical
    processes are the final outcome of a large number of complex processes, and we
    cannot know the details of those fundamental processes. All we can do is observe
    and measure the final outcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical examples of random variables that are around us are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The economic output of a nation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The blood pressure of a patient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The temperature of a chemical process in a factory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of friends of a person on Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The stock market price of a company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These values can take any discrete or continuous value and follow a particular
    pattern (although this pattern may vary over time). Therefore, they can all be
    classified as random variables.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Probability Distribution?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A probability distribution is a mathematical function that tells you the likelihood
    of a random variable taking each different possible value. In other words, a probability
    distribution gives the probabilities of the different possible outcomes in a given situation.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you go to a school and measure the heights of students who have been
    selected randomly. Height is an example of a random variable here. As you measure
    height, you can create a distribution of height. This type of distribution is
    useful when you need to know which outcomes are the most likely to occur (that
    is, which heights are the most common), the spread of potential values, and the
    likelihood of different results.
  prefs: []
  type: TYPE_NORMAL
- en: The concepts of central tendency and spread are applicable to a distribution
    and are used to describe the properties and behavior of a distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Statisticians generally divide all distributions into two broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Discrete distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discrete Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discrete probability functions, also known as probability mass functions, can
    assume a discrete number of values. For example, coin tosses and counts of events
    are discrete functions. You can only have heads or tails in a coin toss. Similarly,
    if you're counting the number of trains that arrive at a station per hour, you
    can count 11 or 12 trains, but nothing in between.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some prominent discrete distributions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Binomial distribution to model binary data, such as coin tosses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poisson distribution to model count data, such as the count of library book
    checkouts per hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform distribution to model multiple events with the same probability, such
    as rolling a die
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous probability functions are also known as probability density functions.
    You have a continuous distribution if the variable can assume an infinite number
    of values between any two values. Continuous variables are often measurements
    on a real number scale, such as height, weight, and temperature.
  prefs: []
  type: TYPE_NORMAL
- en: The most well-known continuous distribution is normal distribution, which is
    also known as Gaussian distribution or the bell curve. This symmetric distribution
    fits a wide variety of phenomena, such as human height and IQ scores.
  prefs: []
  type: TYPE_NORMAL
- en: 'Normal distribution is linked to the famous `68%-95%-99.7%` boundaries. This
    rule is widely used in industries, medicine, economics, and social science:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23: Curve showing the normal distribution of the famous 68-95-99.7
    rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.23: Curve showing the normal distribution of the famous 68-95-99.7
    rule'
  prefs: []
  type: TYPE_NORMAL
- en: Data Wrangling in Statistics and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good data wrangling professional is expected to encounter a dizzying array
    of diverse data sources each day. As we explained previously, due to a multitude
    of complex sub-processes and mutual interactions that give rise to such data,
    they all fall into the category of discrete or continuous random variables.
  prefs: []
  type: TYPE_NORMAL
- en: It would be extremely difficult and confusing for a data wrangler or a data
    science team if all of this data continued to be treated as completely random
    without any shape or pattern. A formal statistical basis must be given to such
    random data streams, and one of the simplest ways to start that process is to
    measure their descriptive statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a stream of data to a particular distribution function (or a combination
    of many distributions) is actually part of inferential statistics. However, inferential
    statistics starts only when descriptive statistics is done alongside measuring
    all the important parameters of the pattern of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, as the front line of a data science pipeline, the process of data
    wrangling must deal with measuring and quantifying such descriptive statistics
    of the incoming data. Along with the formatted and cleaned-up data, the primary
    job of a data wrangler is to hand over these measures (and sometimes accompanying
    plots) to the next member of the analytics team.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting and visualization also help a data wrangling team in identifying potential
    outliers and misfits in the incoming data stream and help them take the appropriate
    action. We will see some examples of such tasks in the next chapter, where we
    will identify odd data points by creating scatter plots or histograms and either
    impute or omit the data point.
  prefs: []
  type: TYPE_NORMAL
- en: Using NumPy and Pandas to Calculate Basic Descriptive Statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have some basic knowledge of `NumPy`, `pandas`, and `matplotlib`
    under our belt, we can explore a few additional topics related to these libraries,
    such as how we can bring them together for advanced data generation, analysis,
    and visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Random Number Generation Using NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NumPy` offers a dizzying array of random number generation utility functions,
    all of which correspond to various statistical distributions, such as uniform,
    binomial, Gaussian normal, Beta/Gamma, and chi-square. Most of these functions
    are extremely useful and appear countless times in advanced statistical data mining
    and machine learning tasks. Having a solid understanding of these concepts is
    strongly encouraged for all of you reading this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will discuss three of the most important distributions that may come
    in handy for data wrangling tasks – **uniform**, **binomial**, and **gaussian
    normal**. The goal here is to show an example of simple function calls that can
    generate one or more random numbers/arrays whenever the user needs them.
  prefs: []
  type: TYPE_NORMAL
- en: A **uniform distribution** is a probability distribution that is concerned with
    events that are equally likely to occur. Let's go through the following exercise
    to practice uniform distribution with random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.18: Generating Random Numbers from a Uniform Distribution'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will be generating random numbers from a uniform distribution
    of numbers from 1-10\. Next, we''ll generate some artificial data for a customized
    use case using the `random` function of the `NumPy` library. Let''s go through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The results will be different during each run as we will be working with random
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a random integer between `1` and `10`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (your output could be different):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a random integer between `1` and `10` but with `size=1` as an argument.
    This generates a `NumPy` array of size `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (your output could be different due to it being
    randomly drawn):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Therefore, we can easily write the code to generate the outcome of a die being
    thrown (a normal 6-sided die) for `10` trials.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How about moving away from the integers and generating some real numbers? Let's
    say that we want to generate artificial data for the weights (in kgs) of `20`
    adults and that we can measure the accurate weights up to two decimal places.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate decimal data using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are not only restricted to one-dimensional arrays. We're going to use a multi-dimensional
    array for the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate and show a `3x3` matrix with random numbers between `0` and `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that your specific output could be different
    due to randomness):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2YIycEL](https://packt.live/2YIycEL).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2YHqkDA](https://packt.live/2YHqkDA).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With this exercise, we have a basic idea of how to create random numbers, specifically,
    random trials on the basis of probability.
  prefs: []
  type: TYPE_NORMAL
- en: A binomial distribution is the probability distribution of getting a specific
    number of successes in a specific number of trials of an event with a pre-determined
    chance or probability.
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious example of this is a coin toss. A fair coin may have an equal
    chance of heads or tails, but an unfair coin may have more chances of the head
    coming up or vice versa. We can simulate a coin toss using the `NumPy` library.
    We will look at this in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.19: Generating Random Numbers from a Binomial Distribution and Bar
    Plot'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to generate random numbers from a binomial distribution
    and create a bar plot based on the generated DataFrame. Let''s consider a scenario.
    Suppose we have a biased coin where the probability of heads is `0.6`. We toss
    this coin 10 times and take note of the number of heads turning up each time.
    That is one trial or experiment. Now, we can repeat this experiment (10 coin tosses)
    any number of times, say 8 times. Each time, we record the number of heads. Let''s
    see how this works using the `NumPy` library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s generate random numbers from a binomial distribution. This experiment
    can be simulated using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (your specific output will be different due
    to randomness):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the result using a bar chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.24: A screenshot of a graph showing the binomial distribution and
    the bar plot'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.24: A screenshot of a graph showing the binomial distribution and
    the bar plot'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The results of the aforementioned plot will vary for you due to the randomness
    involved.
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/3hB2aTQ](https://packt.live/3hB2aTQ).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2N6jbaq](https://packt.live/2N6jbaq).
  prefs: []
  type: TYPE_NORMAL
- en: As we can observe from the preceding plot, the bar chart represents the number
    of successes or number of heads that show up in each draw. We discussed normal
    distribution previously in this chapter and mentioned that it is the most important
    probability distribution because many pieces of natural, social, and biological
    data follow this pattern closely when the number of samples is large. `NumPy`
    provides an easy way for us to generate random numbers that correspond to this
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.20: Generating Random Numbers from a Normal Distribution and Histograms'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will demonstrate how to generate a few random numbers using normal
    distribution and histograms. We haven''t looked at creating plots with matplotlib
    and creating a binormal distribution. Creating charts can be a useful skill sometimes
    with data wrangling, especially when working with machine learning. To do so,
    let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `NumPy` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Draw a single sample from a normal distribution by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows (note that your specific output could be different
    due to randomness):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We know that normal distribution is characterized by two parameters – mean (µ)
    and standard deviation (σ). In fact, the default values for this particular function
    are µ = 0.0 and σ = 1.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Suppose we know that the heights of the teenage (12-16 years old) students in
    a particular school are distributed normally with a mean height of 155 cm and
    a standard deviation of 10 cm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate a histogram of 100 students by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The sample output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.25: Histogram of teenage students'' heights'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.25: Histogram of teenage students'' heights'
  prefs: []
  type: TYPE_NORMAL
- en: Note the use of the loc parameter for the mean (`=155`) and the scale parameter
    for standard deviation (`=10`). The `size` parameter is set to 100 for that sample's generation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/2YHIODP](https://packt.live/2YHIODP).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/3hvJrsR](https://packt.live/3hvJrsR).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.21: Calculating Descriptive Statistics from a DataFrame'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will be calculating the basic statistics of a generated
    DataFrame. DataFrames and statistics are commonly used together and will be a
    useful tool to acquire. We will define the age, weight, and height parameters
    and put that data in a DataFrame to calculate various descriptive statistics about
    them by using the `describe` method. Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The best part of working with a `pandas` DataFrame is that it has a built-in
    utility function to show all of these descriptive statistics with a single line
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Construct a dictionary with the available series data by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.26: Output of the created dictionary'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.26: Output of the created dictionary'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the number of rows and columns of the DataFrame by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obtain a simple count (any column can be used for this purpose) by executing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the sum total of age by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the mean age by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the median weight by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the maximum height by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the standard deviation of the weights by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how we are calling the statistical functions directly from a DataFrame object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To calculate percentile, we can call a function from `NumPy` and pass on a
    particular column (a `pandas` series). For example, to calculate the 75th and
    25th percentiles of age distribution and their difference (called the interquartile
    range), use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `describe` command to find a detailed description of the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.27: Output of the DataFrame using the describe method'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.27: Output of the DataFrame using the describe method'
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to manipulate DataFrames, which are the cornerstones of
    data wrangling.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This function only works on columns where numeric data is present. It has no
    impact on non-numeric columns, for example, people in this DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to [https://packt.live/30S3agm](https://packt.live/30S3agm).
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at [https://packt.live/2YHBFDF](https://packt.live/2YHBFDF).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.22: Built-in Plotting Utilities'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will be going through the basic built-in plotting utilities
    in the `matplotlib` library and creating useful plots using numeric data from
    a DataFrame. We will use the `people` DataFrame that we referenced in *Exercise
    3.21,* *Calculating Descriptive Statistics from a DataFrame* and generate plots
    to visually represent the data. To do so, let''s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `people` DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the histogram of the weights by using the `hist` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.28: Histogram of the weights'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15780_03_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.28: Histogram of the weights'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the preceding histogram, we can determine that there are more people that
    weigh `65` kg than in any other group. If this wasn't generated from random numbers,
    then this might be a useful observation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a simple scatter plot directly from the DataFrame to plot the relationship
    between `weight` and `height` by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.29: Weight versus Height scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15780_03_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.29: Weight versus Height scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding plot, we can infer that people in the range of 160-180cms
    have a weight in the range of 60-80kgs. Charts can be a powerful tool when trying
    to understand the nature of data. It is not uncommon to plot data in the form
    of various charts before and after several steps of data wrangling.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can try regular `matplotlib` methods around this function call to make your
    plot pretty.
  prefs: []
  type: TYPE_NORMAL
- en: With all this knowledge, let's try our hand at an activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.01: Generating Statistics from a CSV File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you are working with the Boston Housing price dataset. This dataset
    is famous in the machine learning community. Many regression problems can be formulated,
    and machine learning algorithms can be run on this dataset. You will perform a
    basic data wrangling activity (including plotting some trends) on this dataset
    (`.csv` file) by reading it as a `pandas` DataFrame. We will perform a few statistical
    operations on this DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The Boston Housing dataset can be found here: [https://packt.live/2ZPdvc2](https://packt.live/2ZPdvc2).
    The `pandas` function for reading a CSV file is `read_csv`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the necessary libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read in the Boston Housing dataset (given as a `.csv` file) from the local directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the first `10` records. Find the total number of records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a smaller DataFrame with columns that do not include `CHAS`, `NOX`,
    `B`, and `LSTAT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Chas`: Charlse River Dummy variable'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Nox`: Nitric Oxide concentration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`B`: Proportion of the population that is African American'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`LSTAT`: Percentage of lower-income population'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the last seven records of the new DataFrame you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the histograms of all the variables (columns) in the new DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot them all at once using a for loop. Try to add a unique title to the plot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a scatter plot of crime rate versus price.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot `log10(crime)` versus `price`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate some useful statistics, such as mean rooms per dwelling, median age,
    mean distances to five Boston employment centers, and the percentage of houses
    with a low price (`< $20,000`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$20,000`, create a `pandas` series with the `PRICE` column and directly compare
    it with `20`. You can do this because `pandas` series is basically a `NumPy` array
    and you have seen how to filter NumPy array in the exercises in this chapter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean rooms per dwelling: `6.284634387351788`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Median age: `77.5`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean distances to five Boston employment centers: `3.795042687747034`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Percentage of houses with a low price (<$20,000): `41.50197628458498`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15780_Solution_Final_RK.xhtml#_idTextAnchor312).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with the basics of `NumPy` arrays, including how
    to create them and their essential properties. We discussed and showed how a `NumPy`
    array is optimized for vectorized element-wise operations and differs from a regular
    Python list. Then, we moved on to practicing various operations on `NumPy` arrays
    such as indexing, slicing, filtering, and reshaping. We also covered special one-dimensional
    and two-dimensional arrays, such as zeros, ones, identity matrices, and random arrays.
  prefs: []
  type: TYPE_NORMAL
- en: In the second major topic of this chapter, we started with `pandas` series objects
    and quickly moved on to a critically important object – `pandas` DataFrames. They
    are analogous to Excel or Matlab or a database tab, but with many useful properties
    for data wrangling. We demonstrated some basic operations on DataFrames, such
    as indexing, sub-setting, row and column addition, and deletion.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we covered the basics of plotting with `matplotlib`, the most widely used
    and popular Python library for visualization. Along with plotting exercises, we
    touched upon refresher concepts such as descriptive statistics (such as central
    tendency and measure of spread) and probability distributions (such as uniform,
    binomial, and normal).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover more advanced operations that can be used
    on `pandas` DataFrames that will come in very handy in your journey toward becoming
    an expert data wrangler.
  prefs: []
  type: TYPE_NORMAL
