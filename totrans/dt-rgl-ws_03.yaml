- en: 3\. Introduction to NumPy, Pandas, and Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. NumPy、Pandas和Matplotlib简介
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you will learn about the fundamentals of the `NumPy`, `pandas`,
    and `matplotlib` libraries. You will learn to create one-dimensional and multi-dimensional
    arrays and manipulate `pandas` DataFrames and `series` objects. By the end of
    this chapter, you will be able to visualize and plot numerical data using the
    `Matplotlib` library, as well as to apply `matplotlib`, `NumPy`, and `pandas`
    to calculate descriptive statistics from a DataFrame or matrix.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习`NumPy`、`pandas`和`matplotlib`库的基础知识。你将学会创建一维和多维数组，并操作`pandas` DataFrame和`series`对象。到本章结束时，你将能够使用`Matplotlib`库可视化和绘制数值数据，以及将`matplotlib`、`NumPy`和`pandas`应用于从DataFrame或矩阵中计算描述性统计。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the preceding chapters, we covered some advanced data structures, such as
    stack, queue, iterator, and file operations in Python. In this chapter, we will
    cover three essential libraries, namely `NumPy`, `pandas`, and `matplotlib`. `NumPy`
    is an advanced math library in Python with an extensive range of functionality.
    `pandas` is a library built on `NumPy` that allows developers to model the data
    in a table structure similar to a database; `malplotlib`, on the other hand, is
    a charting library that is influenced by Matlab. With these libraries, you will
    be able to handle most data wrangling tasks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了Python中的一些高级数据结构，例如栈、队列、迭代器和文件操作。在本章中，我们将介绍三个基本库，即`NumPy`、`pandas`和`matplotlib`。`NumPy`是Python中的一个高级数学库，具有广泛的功能。`pandas`是基于`NumPy`构建的库，允许开发者以类似于数据库的表格结构建模数据；另一方面，`matplotlib`是一个受Matlab影响的图表库。使用这些库，你将能够处理大多数数据整理任务。
- en: NumPy Arrays
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy数组
- en: A `NumPy` array is similar to a list but differs in some ways. In the life of
    a data scientist, reading and manipulating an array is of prime importance, and
    it is also the most frequently encountered task. These arrays could be a one-dimensional
    list, a multi-dimensional table, or a matrix full of numbers and can be used for
    a variety of mathematical calculations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`数组类似于列表，但在某些方面有所不同。在数据科学家的生活中，读取和操作数组是首要任务，也是最常见的任务。这些数组可以是一维列表、多维表格或充满数字的矩阵，可用于各种数学计算。'
- en: 'An array could be filled with integers, floating-point numbers, Booleans, strings,
    or even mixed types. However, in the majority of cases, numeric data types are
    predominant. Some example scenarios where you will need to handle numeric arrays
    are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以填充整数、浮点数、布尔值、字符串，甚至混合类型。然而，在大多数情况下，数值数据类型占主导地位。以下是一些你需要处理数值数组的场景示例：
- en: To read a list of phone numbers and postal codes and extract a certain pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取一组电话号码和邮政编码并提取特定模式
- en: To create a matrix with random numbers to run a Monte Carlo simulation on a
    statistical process
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含随机数的矩阵，以在统计过程中运行蒙特卡洛模拟
- en: To scale and normalize a sales figure table, with lots of financial and transactional
    data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了缩放和归一化一个包含大量财务和交易数据的销售数字表
- en: To create a smaller table of key descriptive statistics (for example, mean,
    median, min/max range, variance, and inter-quartile ranges) from a large raw data
    table
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个大的原始数据表中创建一个包含关键描述性统计量的较小表格（例如，平均值、中位数、最小/最大范围、方差和四分位距）
- en: To read in and analyze time series data in a one-dimensional array daily, such
    as the stock price of an organization over a year or daily temperature data from
    a weather station
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了读取并分析一维数组中的时间序列数据，例如一个组织一年内的股价或气象站每日温度数据
- en: In short, arrays and numeric data tables are everywhere. As a data wrangling
    professional, the importance of the ability to read and process numeric arrays
    cannot be overstated. It is very common to work with data and need to modify it
    with a mathematical function. In this regard, `NumPy` arrays are the most important
    objects in Python that you need to know about.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，数组和数值数据表无处不在。作为一名数据整理专业人士，能够读取和处理数值数组的能力至关重要。在处理数据时，经常需要使用数学函数对其进行修改。在这方面，`NumPy`数组是Python中你需要了解的最重要对象。
- en: NumPy Arrays and Features
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy数组和功能
- en: NumPy and SciPy are open source add-on modules for Python that provide common
    mathematical and numerical routines in pre-compiled, fast functions. Over the
    years, these have grown into highly mature libraries that provide functionality
    that meets, or perhaps exceeds, what is associated with common commercial software
    such as Matlab or Mathematica.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 和 `SciPy` 是 Python 的开源附加模块，它们提供预编译的快速函数，用于常见的数学和数值运算。多年来，这些模块已经发展成为高度成熟的库，提供了满足或甚至超过与常见商业软件（如
    Matlab 或 Mathematica）相关功能的功能。'
- en: One of the main advantages of the NumPy module is that it can be used to handle
    or create one-dimensional or multi-dimensional arrays. This advanced data structure/class
    is at the heart of the NumPy package and it serves as the fundamental building
    block of more advanced concepts, such as the `pandas` library and specifically,
    the pandas DataFrame, which we will cover shortly in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 模块的主要优势之一是它可以用来处理或创建一维或多维数组。这种高级数据结构/类是 `NumPy` 包的核心，它作为更高级概念（如 `pandas`
    库和特定的 pandas DataFrame）的基本构建块，我们将在本章稍后介绍。'
- en: NumPy arrays are different than common Python lists since Python lists can be
    thought of as simple arrays. NumPy arrays are built for mathematical vectorized
    operations that process a lot of numerical data with just a single line of code.
    Many built-in mathematical functions in NumPy arrays are written in low-level
    languages such as C or Fortran and are pre-compiled for really fast execution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 数组与常见的 Python 列表不同，因为 Python 列表可以被视为简单的数组。`NumPy` 数组是为数学向量运算而构建的，这些运算只需一行代码就能处理大量的数值数据。`NumPy`
    数组中的许多内置数学函数是用低级语言（如 C 或 Fortran）编写的，并且已经预编译以实现快速执行。'
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: NumPy arrays are optimized data structures for numerical analysis, and that's
    why they are so important to data scientists.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 数组是针对数值分析优化的数据结构，这就是为什么它们对数据科学家来说如此重要的原因。'
- en: Let's go through the first exercise in this chapter, where we will learn how
    to create a `NumPy` array from a list.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过本章的第一个练习来了解如何从列表创建一个 `NumPy` 数组。
- en: 'Exercise 3.01: Creating a NumPy Array (from a List)'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01：创建 NumPy 数组（从列表）
- en: 'In this exercise, we will create a `NumPy` array from a list. We''re going
    to define a list first and use the array function of the `NumPy` library to convert
    the list into an array. Next, we''ll read from a `.csv` file and store the data
    in a `NumPy` array using the `genfromtxt` function of the `NumPy` library. To
    do so, let''s go through the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从列表创建一个 `NumPy` 数组。我们首先定义一个列表，然后使用 `NumPy` 库的数组函数将列表转换为数组。接下来，我们将从
    `.csv` 文件中读取数据，并使用 `NumPy` 库的 `genfromtxt` 函数将数据存储在 `NumPy` 数组中。为此，让我们按照以下步骤进行：
- en: 'To work with `NumPy`, we must import it. By convention, we give it a short
    name, np, while importing it. This will make referencing the objects under the
    `NumPy` package organized:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `NumPy`，我们必须导入它。按照惯例，我们在导入时给它一个简短的名字，np。这将使在 `NumPy` 包下引用对象变得有组织：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a list with three elements: `1`, `2`, and `3`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含三个元素 `1`、`2` 和 `3` 的列表：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is as follows:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the `array` function to convert it into an array:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `array` 函数将其转换为数组：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We just created a `NumPy` array object called `array_1` from the regular Python
    list object, `list_1`.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚从常规 Python 列表对象 `list_1` 创建了一个名为 `array_1` 的 `NumPy` 数组对象。
- en: 'Create an array of floating type elements, that is, `1.2`, `3.4`, and `5.6`,
    using the array function directly:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数组函数直接创建一个浮点类型元素的数组，即 `1.2`、`3.4` 和 `5.6`：
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s check the type of the newly created object, a, using the `type` function:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `type` 函数检查新创建的对象 a 的类型：
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the `type` function to check the type of `array_1`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `type` 函数检查 `array_1` 的类型：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, both a and `array_1` are `NumPy` arrays.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们所见，a 和 `array_1` 都是 `NumPy` 数组。
- en: 'Now, use type on `list_1`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `type` 在 `list_1` 上：
- en: '[PRE11]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE12]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, `list_1` is essentially a Python list and we have used the array
    function of the `NumPy` library to create a `NumPy` array from that list.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们所见，`list_1` 实质上是一个 Python 列表，我们使用了 `NumPy` 库的数组函数从该列表创建了一个 `NumPy` 数组。
- en: 'Now, let''s read a `.csv` file as a `NumPy` array using the `genfromtxt` function
    of the `NumPy` library:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `NumPy` 库的 `genfromtxt` 函数读取一个 `.csv` 文件作为 `NumPy` 数组：
- en: '[PRE13]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use the `type` function to check the type of `data`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `type` 函数检查 `data` 的类型：
- en: '[PRE14]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output is as follows:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE15]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we can see, the data variable is also a `NumPy` array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，数据变量也是一个 `NumPy` 数组。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2Y9pTTx](https://packt.live/2Y9pTTx).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/2Y9pTTx](https://packt.live/2Y9pTTx)。
- en: You can also run this example online at [https://packt.live/2URNcPz](https://packt.live/2URNcPz).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/2URNcPz](https://packt.live/2URNcPz) 上在线运行此示例。
- en: From this exercise, we can observe that the `NumPy` array is different from
    the regular list object. The most important point to keep in mind is that `NumPy`
    arrays do not have the same methods as lists and that they are essentially designed
    for mathematical functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个练习中，我们可以观察到 `NumPy` 数组与常规列表对象不同。需要记住的最重要的一点是 `NumPy` 数组没有与列表相同的方法，它们本质上是为数学函数设计的。
- en: '`NumPy` arrays are like mathematical objects – `NumPy` arrays, we add the first
    element of the first array to the first element of the second array – there is
    an element-to-element correspondence in this operation. This is in contrast to
    Python lists, where the elements are simply appended and there is no element-to-element
    relation. This is the real power of a NumPy array: they can be treated just like
    mathematical vectors.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 数组就像数学对象一样——`NumPy` 数组，我们将第一个数组的第一个元素加到第二个数组的第一个元素上——在这个操作中有元素到元素的对应关系。这与
    Python 列表形成对比，列表中的元素只是简单追加，没有元素到元素的关联。这是 `NumPy` 数组的真正力量：它们可以被当作数学向量来处理。'
- en: A vector is a collection of numbers that can represent, for example, the coordinates
    of points in a three-dimensional space or the color of numbers (RGB) in a picture.
    Naturally, relative order is important for such a collection and as we discussed
    previously, a `NumPy` array can maintain such order relationships. That's why
    they are perfectly suitable to use in numerical computations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 向量是一组数字，可以表示，例如，三维空间中点的坐标或图片中数字的颜色（RGB）。自然地，这种集合的相对顺序很重要，正如我们之前讨论的，`NumPy` 数组可以保持这种顺序关系。这就是为什么它们非常适合用于数值计算。
- en: With this knowledge, we're going to perform the addition operation on `NumPy`
    arrays in the next exercise.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这些知识，我们将在下一个练习中执行 `NumPy` 数组的加法操作。
- en: 'Exercise 3.02: Adding Two NumPy Arrays'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.02：添加两个 NumPy 数组
- en: 'This simple exercise will demonstrate the addition of two `NumPy` arrays using
    the `+` notation, and thereby show the key difference between a regular Python
    list/array and a `NumPy` array. Let''s perform the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的练习将演示使用 `+` 符号将两个 `NumPy` 数组相加，并因此展示常规 Python 列表/数组与 `NumPy` 数组之间的关键区别。让我们执行以下步骤：
- en: 'Import the `NumPy` library:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `NumPy` 库：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Declare a Python list called `list_1` and a `NumPy` array:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为 `list_1` 的 Python 列表和一个 `NumPy` 数组：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use the `+` notation to concatenate two `list_1` objects and save the results
    in `list_2`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `+` 符号将两个 `list_1` 对象连接起来，并将结果保存到 `list_2`：
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is as follows:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE19]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use the same `+` notation to concatenate two `array_1` objects and save the
    result in `array_2`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的 `+` 符号将两个 `array_1` 对象连接起来，并将结果保存到 `array_2`：
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output is as follows:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE21]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Load a `.csv` file and concatenate it with itself:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载一个 `.csv` 文件并将其与自身连接：
- en: '[PRE22]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Did you notice the difference? The first `6` elements, [`1, 2, 3, 1, 2, 3`],
    but the second `NumPy` array (or vector) with the elements [`2, 4, 6`], which
    are just the sum of the individual elements of `array_1`. As we discussed earlier,
    `NumPy` arrays are perfectly designed to perform element-wise operations since
    there is element-to-element correspondence.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到区别了吗？前六个元素，[`1, 2, 3, 1, 2, 3`]，但第二个 `NumPy` 数组（或向量）的元素是 `[2, 4, 6`]，这只是
    `array_1` 各个元素的累加。正如我们之前讨论的，`NumPy` 数组设计得非常适合执行逐元素操作，因为存在元素到元素的对应关系。
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3fyvSqF](https://packt.live/3fyvSqF).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/3fyvSqF](https://packt.live/3fyvSqF)。
- en: You can also run this example online at [https://packt.live/3fvUDnf](https://packt.live/3fvUDnf%20)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/3fvUDnf](https://packt.live/3fvUDnf) 上在线运行此示例。
- en: '`NumPy` arrays even support element-wise exponentiation. For example, suppose
    there are two arrays – the elements of the first array will be raised to the power
    of the elements in the second array.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 数组甚至支持逐元素指数运算。例如，假设有两个数组——第一个数组的元素将被提升到第二个数组元素的幂。'
- en: In the following exercise, we will try out some mathematical operations on `NumPy` arrays.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，我们将尝试在 `NumPy` 数组上进行一些数学运算。
- en: 'Exercise 3.03: Mathematical Operations on NumPy Arrays'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.03：NumPy 数组上的数学运算
- en: 'In this exercise, we''ll generate a `NumPy` array with the values extracted
    from a `.csv` file. We''ll be using the multiplication and division operators
    on the generated `NumPy` array. Let''s go through the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从 `.csv` 文件中提取值来生成一个 `NumPy` 数组。我们将使用乘法和除法运算符对生成的 `NumPy` 数组进行操作。让我们按以下步骤进行：
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `.csv` file that will be used is `numbers.csv`; this can be found at: [https://packt.live/30Om2wC](https://packt.live/30Om2wC).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将要使用的 `.csv` 文件是 `numbers.csv`；您可以在以下位置找到它：[https://packt.live/30Om2wC](https://packt.live/30Om2wC)。
- en: 'Import the `NumPy` library and create a `NumPy` array from the `.csv` file:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `NumPy` 库并从 `.csv` 文件创建一个 `NumPy` 数组：
- en: '[PRE23]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Multiply `45` by every element in the array:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `45` 乘以数组中的每个元素：
- en: '[PRE24]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output is as follows:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE25]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Divide the array by `67.7`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数组除以 `67.7`：
- en: '[PRE26]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output is as follows:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE27]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Raise one array to the second array''s power using the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将一个数组提升到第二个数组的幂：
- en: '[PRE28]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output is as follows:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE29]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Thus, we can observe how NumPy arrays allow element-wise exponentiation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以观察到 NumPy 数组如何允许逐元素指数运算。
- en: Note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3hBZMw4](https://packt.live/3hBZMw4).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/3hBZMw4](https://packt.live/3hBZMw4)。
- en: You can also run this example online at [https://packt.live/2N4dE3Y](https://packt.live/2N4dE3Y).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在此在线运行此示例 [https://packt.live/2N4dE3Y](https://packt.live/2N4dE3Y)。
- en: In the next section, we'll discuss how to apply advanced mathematical operations
    to NumPy arrays.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何将高级数学运算应用于 NumPy 数组。
- en: Advanced Mathematical Operations
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级数学运算
- en: Generating numerical arrays is a fairly common task. So far, we have been doing
    this by creating a Python list object and then converting that into a `NumPy`
    array. However, we can bypass that and work directly with native NumPy methods.
    The `arange` function creates a series of numbers based on the minimum and maximum
    bounds you give and the step size you specify. Another function, `linspace`, creates
    a series of fixed numbers of the intermediate points between two extremes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 生成数值数组是一项相当常见的任务。到目前为止，我们一直是通过创建一个 Python 列表对象并将其转换为 `NumPy` 数组来做到这一点的。然而，我们可以绕过这一步骤，直接使用原生的
    NumPy 方法。`arange` 函数根据您提供的最小和最大界限以及指定的步长创建一系列数字。另一个函数 `linspace` 创建一系列介于两个极端之间的中间点。
- en: In the next exercise, we are going to create a list and then convert that into
    a `NumPy` array. We will then show you how to perform some advanced mathematical
    operations on that array.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将创建一个列表，然后将其转换为 `NumPy` 数组。然后，我们将向您展示如何在该数组上执行一些高级数学运算。
- en: 'Exercise 3.04: Advanced Mathematical Operations on NumPy Arrays'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.04：NumPy 数组上的高级数学运算
- en: 'In this exercise, we''ll practice using all the built-in mathematical functions
    of the `NumPy` library. Here, we are going to be creating a list and converting
    it into a `NumPy` array. Then, we will perform some advanced mathematical operations
    on that array. Let''s go through the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将练习使用 `NumPy` 库的所有内置数学函数。在这里，我们将创建一个列表并将其转换为 `NumPy` 数组。然后，我们将对该数组执行一些高级数学运算。让我们按以下步骤进行：
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We''re going to use the `numbers.csv` file in this exercise, which can be found
    here: [https://packt.live/30Om2wC](https://packt.live/30Om2wC).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 `numbers.csv` 文件，您可以在以下位置找到它：[https://packt.live/30Om2wC](https://packt.live/30Om2wC)。
- en: 'Import the `pandas` library and read from the `numbers.csv` file using `pandas`.
    Then, convert it into a list:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `pandas` 库并使用 `pandas` 从 `numbers.csv` 文件中读取。然后，将其转换为列表：
- en: '[PRE30]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记根据您系统上文件的位置更改路径（已突出显示）。
- en: 'The output (partially shown) is as follows:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出（部分显示）如下：
- en: '![Figure 3.1: Partial output of the .csv file'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.1：.csv 文件的部分输出'
- en: '](img/B15780_03_01.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_01.jpg)'
- en: 'Figure 3.1: Partial output of the .csv file'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.1：.csv 文件的部分输出
- en: 'Convert the list into a `NumPy` array by using the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将列表转换为 `NumPy` 数组：
- en: '[PRE31]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output (partially shown) is as follows:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出（部分显示）如下：
- en: '![Figure 3.2: Partial output of the NumPy array'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.2：NumPy 数组的部分输出'
- en: '](img/B15780_03_02.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_02.jpg)'
- en: 'Figure 3.2: Partial output of the NumPy array'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.2：NumPy数组的部分输出
- en: 'Find the sine value of the array by using the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查找数组的正弦值：
- en: '[PRE32]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output (partially shown) is as follows:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出（部分显示）如下：
- en: '![Figure 3.3: Partial output of the sine value'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.3：正弦值的部分输出'
- en: '](img/B15780_03_03.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_03.jpg)'
- en: 'Figure 3.3: Partial output of the sine value'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.3：正弦值的部分输出
- en: 'Find the logarithmic value of the array by using the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查找数组的对数值：
- en: '[PRE33]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output (partially shown) is as follows:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出（部分显示）如下：
- en: '![Figure 3.4: Partial output of the logarithmic array'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.4：对数数组的部分输出'
- en: '](img/B15780_03_04.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_04.jpg)'
- en: 'Figure 3.4: Partial output of the logarithmic array'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.4：对数数组的部分输出
- en: 'Find the exponential value of the array by using the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令查找数组的指数值：
- en: '[PRE34]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output (partially shown) is as follows:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出（部分显示）如下：
- en: '![Figure 3.5: Partial output of the exponential array'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.5：指数数组的部分输出'
- en: '](img/B15780_03_05.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_05.jpg)'
- en: 'Figure 3.5: Partial output of the exponential array'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：指数数组的部分输出
- en: As we can see, advanced mathematical operations are fairly easy to perform on
    a `NumPy` array using the built-in methods.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，使用内置方法在`NumPy`数组上执行高级数学运算相当容易。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/37NIyrf](https://packt.live/37NIyrf).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的源代码，请参阅[https://packt.live/37NIyrf](https://packt.live/37NIyrf)。
- en: You can also run this example online at [https://packt.live/3eh0Xz6](https://packt.live/3eh0Xz6).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/3eh0Xz6](https://packt.live/3eh0Xz6)上在线运行此示例。
- en: 'Exercise 3.05: Generating Arrays Using arange and linspace Methods'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.05：使用arange和linspace方法生成数组
- en: 'This exercise will demonstrate how we can create a series of numbers using
    the `arange` method. To make the list linearly spaced, we''re going to use the
    `linspace` method. To do so, let''s go through the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将演示我们如何使用`arange`方法创建一系列数字。为了使列表线性间隔，我们将使用`linspace`方法。为此，让我们按照以下步骤进行：
- en: 'Import the `NumPy` library and create a series of numbers using the `arange`
    method using the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令导入`NumPy`库并创建一系列数字：
- en: '[PRE35]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is as follows:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE36]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Print numbers using the `arange` function by using the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`arange`函数通过以下命令打印数字：
- en: '[PRE37]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output is as follows:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE38]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For linearly spaced numbers, we can use the `linspace` method, as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于线性间隔的数字，我们可以使用`linspace`方法，如下所示：
- en: '[PRE39]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output is as follows:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE40]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As we can see, the `linspace` method helps us in creating linearly spaced elements
    in an array.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`linspace`方法帮助我们创建数组中的线性间隔元素。
- en: Note
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2YOZGsy](https://packt.live/2YOZGsy).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的源代码，请参阅[https://packt.live/2YOZGsy](https://packt.live/2YOZGsy)。
- en: You can also run this example online at [https://packt.live/3ddPcYG](https://packt.live/3ddPcYG).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/3ddPcYG](https://packt.live/3ddPcYG)上在线运行此示例。
- en: So far, we have only created one-dimensional arrays. Now, let's create some
    multi-dimensional arrays (such as a matrix in linear algebra).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只创建了单维数组。现在，让我们创建一些多维数组（例如线性代数中的矩阵）。
- en: 'Exercise 3.06: Creating Multi-Dimensional Arrays'
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.06：创建多维数组
- en: In this exercise, just like we created the one-dimensional array from a simple
    flat list, we will create a two-dimensional array from a list of lists.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，就像我们从简单的扁平列表创建一维数组一样，我们将从列表的列表中创建二维数组。
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This exercise will use the `numbers2.csv` file, which can be found at [https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将使用`numbers2.csv`文件，该文件可在[https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ)找到。
- en: 'Let''s go through the following steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤进行：
- en: 'Import the necessary Python libraries, load the `numbers2.csv` file, and convert
    it into a two-dimensional `NumPy` array by using the following commands:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的Python库，加载`numbers2.csv`文件，并使用以下命令将其转换为二维`NumPy`数组：
- en: '[PRE41]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Tuples can be converted into multi-dimensional arrays by using the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下代码将元组转换为多维数组：
- en: '[PRE42]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output is as follows:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE43]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Thus, we have created multi-dimensional arrays using Python lists and tuples.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经使用Python列表和元组创建了多维数组。
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/30RjJcc](https://packt.live/30RjJcc).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的具体源代码，请参阅[https://packt.live/30RjJcc](https://packt.live/30RjJcc)。
- en: You can also run this example online at [https://packt.live/30QiIBm](https://packt.live/30QiIBm).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/30QiIBm](https://packt.live/30QiIBm)上运行此示例。
- en: Now, let's determine the dimension, shape, size, and data type of the two-dimensional
    array.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确定二维数组的维度、形状、大小和数据类型。
- en: 'Exercise 3.07: The Dimension, Shape, Size, and Data Type of Two-dimensional
    Arrays'
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.07：二维数组的维度、形状、大小和数据类型
- en: This exercise will demonstrate a few methods that will let you check the dimension,
    shape, and size of the array.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将演示一些方法，让您检查数组的维度、形状和大小。
- en: Note
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `numbers2.csv` file can be found at [https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`numbers2.csv`文件可以在[https://packt.live/2V8EQTZ](https://packt.live/2V8EQTZ)找到。'
- en: 'Note that if it''s a `3x2` matrix, that is, it has `3` rows and `2` columns,
    then the shape will be (`3,2`), but the size will be `6`, as in `6 = 3x2`. To
    learn how to find out the dimensions of an array in Python, let''s go through
    the following steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果是一个`3x2`矩阵，即它有`3`行和`2`列，那么形状将是(`3,2`)，但大小将是`6`，即`6 = 3x2`。要了解如何在Python中找出数组的维度，请按照以下步骤进行：
- en: 'Import the necessary Python modules and load the `numbers2.csv` file:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的Python模块并加载`numbers2.csv`文件：
- en: '[PRE44]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记根据您系统上文件的位置更改路径（已突出显示）。
- en: 'Print the dimension of the matrix using the `ndim` function:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ndim`函数打印矩阵的维度：
- en: '[PRE45]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The output is as follows:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE46]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Print the size using the `size` function:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`size`函数打印大小：
- en: '[PRE47]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output is as follows:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE48]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Print the shape of the matrix using the `shape` function:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shape`函数打印矩阵的形状：
- en: '[PRE49]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The output is as follows:'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE50]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Print the dimension type using the `dtype` function:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`dtype`函数打印维度类型：
- en: '[PRE51]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output is as follows:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE52]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this exercise, we looked at the various utility methods available in order
    to check the dimensions of an array. We used the `dnim`, `shape`, `dtype`, and
    `size` functions to look at the dimension of the array.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们查看了一些可用的实用方法，以检查数组的维度。我们使用了`ndim`、`shape`、`dtype`和`size`函数来查看数组的维度。
- en: Note
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/30PVEm1](https://packt.live/30PVEm1).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的具体源代码，请参阅[https://packt.live/30PVEm1](https://packt.live/30PVEm1)。
- en: You can also run this example online at [https://packt.live/3ebSsoG](https://packt.live/3ebSsoG).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/3ebSsoG](https://packt.live/3ebSsoG)上运行此示例。
- en: Now that we are familiar with basic vector (one-dimensional) and matrix data
    structures in NumPy, we will be able to create special matrices with ease. Often,
    you may have to create matrices filled with zeros, ones, random numbers, or ones
    in a diagonal fashion. An identity matrix is a matrix filled with zeros and ones
    in a diagonal from left to right.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了NumPy中的基本向量（一维）和矩阵数据结构，我们将能够轻松地创建特殊矩阵。通常，您可能需要创建填充零、一、随机数或对角线一的特殊矩阵。单位矩阵是一个从左到右对角线填充零和一的矩阵。
- en: 'Exercise 3.08: Zeros, Ones, Random, Identity Matrices, and Vectors'
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.08：零矩阵、一矩阵、随机矩阵和向量
- en: 'In this exercise, we will be creating a vector of zeros and a matrix of zeros
    using the `zeros` function of the `NumPy` library. Then, we''ll create a matrix
    of fives using the `ones` function, followed by generating an identity matrix
    using the `eye` function. We will also work with the `random` function, where
    we''ll create a matrix filled with random values. To do this, let''s go through
    the following steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用`NumPy`库的`zeros`函数创建一个零向量和一个零矩阵。然后，我们将使用`ones`函数创建一个五的矩阵，接着使用`eye`函数生成一个单位矩阵。我们还将使用`random`函数，创建一个填充随机值的矩阵。为此，请按照以下步骤进行：
- en: 'Print the vector of zeros by using the following command:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印零向量：
- en: '[PRE53]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output is as follows:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE54]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Print the matrix of zeros by using the following command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印零矩阵：
- en: '[PRE55]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output is as follows:'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE56]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Print the matrix of fives by using the following command:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印五的矩阵：
- en: '[PRE57]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output is as follows:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE58]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Print an identity matrix by using the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印单位矩阵：
- en: '[PRE59]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output is as follows:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE60]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Print an identity matrix with a dimension of `4x4` by using the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印一个 `4x4` 维度的单位矩阵：
- en: '[PRE61]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output is as follows:'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE62]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Print a matrix of random shape using the `randint` function:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `randint` 函数打印一个随机形状的矩阵：
- en: '[PRE63]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The sample output is as follows:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例输出如下：
- en: '[PRE64]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: As we can see from the preceding output, a matrix was generated with a random shape.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的输出所示，生成了一个具有随机形状的矩阵。
- en: Note
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When creating matrices, you need to pass on tuples of integers as arguments.
    The output is susceptible to change since we have used random numbers.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建矩阵时，需要传递整数元组作为参数。由于我们使用了随机数，输出可能会发生变化。
- en: To access the source code for this specific section, please refer to [https://packt.live/2UROs5f](https://packt.live/2UROs5f).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/2UROs5f](https://packt.live/2UROs5f)。
- en: You can also run this example online at [https://packt.live/37J5hV9](https://packt.live/37J5hV9).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/37J5hV9](https://packt.live/37J5hV9) 上在线运行此示例。
- en: Random number generation is a very useful utility and needs to be mastered for
    data science/data wrangling tasks. We will look at the topic of random variables
    and distributions again in the section on statistics and learn how NumPy and pandas
    have built-in random number and series generation, as well as manipulation functions.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数生成是一个非常有用的工具，需要掌握用于数据科学/数据处理任务。我们将在统计部分再次探讨随机变量和分布的主题，并了解 NumPy 和 pandas
    内置的随机数和序列生成，以及操作函数。
- en: '`reshape` is the `ravel` function, which flattens any given array into a one-dimensional
    array. It is a very useful action in many machine learning and data analytics
    tasks.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`reshape` 是 `ravel` 函数，它将任何给定的数组展平为一维数组。这在许多机器学习和数据分析任务中是一个非常有用的操作。'
- en: 'Exercise 3.09: Reshaping, Ravel, Min, Max, and Sorting'
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.09：重塑、Ravel、最小值、最大值和排序
- en: 'In this exercise, we will generate a random one-dimensional vector of two-digit
    numbers and then reshape the vector into multi-dimensional vectors. Let''s go
    through the following steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将生成一个由两位数组成的随机一维向量，然后将该向量重塑为多维向量。让我们按以下步骤进行：
- en: 'Create an array of `30` random integers (sampled from `1` to `99`) and reshape
    it into two different forms using the following code:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个包含 `30` 个随机整数（从 `1` 到 `99` 中采样）的数组，并使用以下代码将其重塑为两种不同的形式：
- en: '[PRE65]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Print the shape using the `shape` function by using the following code:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码使用 `shape` 函数打印形状：
- en: '[PRE66]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output is as follows:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE67]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Print the arrays `a`, `b`, and `c` using the following code:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码打印数组 `a`、`b` 和 `c`：
- en: '[PRE68]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The sample output is as follows:'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例输出如下：
- en: '[PRE69]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Note
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`b` is a three-dimensional array – a kind of list of a list of a list. The
    output is susceptible to change since we have used random numbers.'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`b` 是一个三维数组——一种列表的列表的列表。由于我们使用了随机数，输出可能会发生变化。'
- en: 'Ravel file `b` using the following code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码来处理 Ravel 文件 `b`：
- en: '[PRE70]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The sample output is as follows (the output may be different in each iteration):'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例输出如下（每次迭代的输出可能不同）：
- en: '[PRE71]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2Y6KYh8](https://packt.live/2Y6KYh8).
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/2Y6KYh8](https://packt.live/2Y6KYh8)。
- en: You can also run this example online at [https://packt.live/2N4fDFs](https://packt.live/2N4fDFs).
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/2N4fDFs](https://packt.live/2N4fDFs) 上在线运行此示例。
- en: In this exercise, you learned how to use `shape` and `reshape` functions to
    see and adjust the dimensions of an array. This can be useful in a variety of
    cases when working with arrays.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用 `shape` 和 `reshape` 函数来查看和调整数组的维度。这在处理数组时可以用于各种情况。
- en: Indexing and slicing NumPy arrays is very similar to regular list indexing.
    We can even go through a vector of elements with a definite step size by providing
    it as an additional argument in the format (start, step, end). Furthermore, we
    can pass a list as an argument to select specific elements.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的索引和切片与常规列表索引非常相似。我们甚至可以通过提供一个格式为（开始，步长，结束）的额外参数来遍历具有确定步长的元素向量。此外，我们可以传递一个列表作为参数来选择特定的元素。
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In multi-dimensional arrays, you can use two numbers to denote the position
    of an element. For example, if the element is in the third row and second column,
    its indices are 2 and 1 (because of Python's zero-based indexing).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在多维数组中，你可以使用两个数字来表示一个元素的位置。例如，如果元素位于第三行第二列，其索引为 2 和 1（因为 Python 的零基索引）。
- en: 'Exercise 3.10: Indexing and Slicing'
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.10：索引和切片
- en: 'In this exercise, we will learn how to perform indexing and slicing on one-dimensional
    and multi-dimensional arrays. To complete this exercise, let''s go through the
    following steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将学习如何在单维和多维数组上执行索引和切片。为了完成这个练习，让我们按照以下步骤进行：
- en: 'Create an array of `10` elements and examine its various elements by slicing
    and indexing the array with slightly different syntaxes. Do this by using the
    following command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`10`个元素的数组，并通过使用略微不同的语法对数组进行切片和索引来检查其各种元素。请使用以下命令执行此操作：
- en: '[PRE72]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The output is as follows:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE73]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Print the element in the seventh position by using the following command:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印第七位置的元素：
- en: '[PRE74]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The output is as follows:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE75]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Print the elements between the third and sixth positions by using the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印第三到第六位置之间的元素：
- en: '[PRE76]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The output is as follows:'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE77]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Print the elements until the fourth position by using the following command:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印直到第四位置的元素：
- en: '[PRE78]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The output is as follows:'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE79]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Print the elements backward by using the following command:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令反向打印元素：
- en: '[PRE80]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output is as follows:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE81]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Print the elements using their backward index, skipping three values, by using
    the following command:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过向后索引打印元素，跳过三个值：
- en: '[PRE82]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The output is as follows:'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE83]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create a new array called `array_2` by using the following command:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个名为`array_2`的新数组：
- en: '[PRE84]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The output is as follows:'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE85]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Print the second, fourth, and ninth elements of the array:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印数组的第二、第四和第九个元素：
- en: '[PRE86]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The output is as follows:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE87]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Create a multi-dimensional array by using the following command:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个多维数组：
- en: '[PRE88]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The sample output is as follows:'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE89]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The output is susceptible to change since we have used random numbers.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们使用了随机数，输出可能会发生变化。
- en: 'Access the values using double bracket indexing by using the following command:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过双括号索引访问值：
- en: '[PRE90]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The sample output is as follows:'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE91]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Access the values using single bracket indexing by using the following command:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过单括号索引访问值：
- en: '[PRE92]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The sample output is as follows:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE93]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Access the values in a multi-dimensional array using a row or column by using
    the following command:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过行或列访问多维数组中的值：
- en: '[PRE94]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The sample output is as follows:'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE95]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Print the matrix with the specified row and column indices by using the following command:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印具有指定行和列索引的矩阵：
- en: '[PRE96]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The sample output is as follows:'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE97]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Print the matrix with the specified row and column indices by using the following command:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印具有指定行和列索引的矩阵：
- en: '[PRE98]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The sample output is as follows:'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE99]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Note
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The output is susceptible to change since we have used random numbers.
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们使用了随机数，输出可能会发生变化。
- en: To access the source code for this specific section, please refer to [https://packt.live/3fsxJ00](https://packt.live/3fsxJ00).
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/3fsxJ00](https://packt.live/3fsxJ00)。
- en: You can also run this example online at [https://packt.live/3hEDYjh](https://packt.live/3hEDYjh).
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/3hEDYjh](https://packt.live/3hEDYjh)上运行此示例。
- en: In this exercise, we worked with `NumPy` arrays and various ways of subletting
    them, such as slicing them. When working with arrays, it's very common to deal
    with them in this way.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们处理了`NumPy`数组以及各种子集方法，例如切片。在处理数组时，以这种方式处理是非常常见的。
- en: Conditional SubSetting
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件子集
- en: '**Conditional subsetting** is a way to select specific elements based on some
    numeric condition. It is almost like a shortened version of a SQL query to subset
    elements. See the following example:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**条件子集**是一种根据某些数值条件选择特定元素的方法。它几乎像是SQL查询子集元素的简短版本。请看以下示例：'
- en: '[PRE100]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In the preceding code example, we have created an array with 15 random values
    between `10-100`. We have applied the `reshape` function. Then, we selected the
    elements that are less than `50`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们创建了一个包含`10-100`之间15个随机值的数组。我们应用了`reshape`函数。然后，我们选择了小于`50`的元素。
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于是随机的，您的确切输出可能会有所不同）：
- en: '[PRE101]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: NumPy arrays operate just like mathematical matrices, and the operations are
    performed element-wise.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组操作就像数学矩阵一样，操作是逐元素进行的。
- en: Now, let's look at an exercise to understand how we can perform array operations.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个练习来了解如何执行数组操作。
- en: 'Exercise 3.11: Array Operations'
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.11：数组操作
- en: 'In this exercise, we''re going to create two matrices (multi-dimensional arrays)
    with random integers and demonstrate element-wise mathematical operations such
    as addition, subtraction, multiplication, and division. We can show the exponentiation
    (raising a number to a certain power) operation by performing the following steps:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建两个矩阵（多维数组）并使用随机整数，演示逐元素数学运算，如加法、减法、乘法和除法。我们可以通过以下步骤展示指数运算（将一个数提升到某个幂）：
- en: Note
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Due to random number generation, your specific output could be different than
    what is shown here.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 由于随机数生成，您的具体输出可能与这里显示的不同。
- en: 'Import the `NumPy` library and create two matrices:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `NumPy` 库并创建两个矩阵：
- en: '[PRE102]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于是随机的，您的确切输出将与您的不一样）：
- en: '[PRE103]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Perform addition, subtraction, division, and linear combination on the matrices:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在矩阵上执行加法、减法、除法和线性组合：
- en: '[PRE104]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于是随机的，您的确切输出将与您的不一样）：
- en: '[PRE105]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Perform the addition of a scalar, exponential matrix cube, and exponential
    square root:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行标量、指数矩阵立方和指数平方根的加法：
- en: '[PRE106]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The sample output is as follows (note that the exact output will be different
    for you as it is random):'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于是随机的，您的确切输出将与您的不一样）：
- en: '[PRE107]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Note
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The output is susceptible to change since we have used random numbers.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出可能会变化，因为我们使用了随机数。
- en: To access the source code for this specific section, please refer to [https://packt.live/3fC1ziH](https://packt.live/3fC1ziH).
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问本节的具体源代码，请参阅 [https://packt.live/3fC1ziH](https://packt.live/3fC1ziH)。
- en: You can also run this example online at [https://packt.live/3fy6j96](https://packt.live/3fy6j96).
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/3fy6j96](https://packt.live/3fy6j96) 上在线运行此示例。
- en: We have now seen how to work with arrays to perform various mathematical functions,
    such as scalar addition and matrix cubing.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用数组来执行各种数学函数，例如标量加法和矩阵立方。
- en: Stacking Arrays
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆叠数组
- en: 'Stacking arrays on top of each other (or side by side) is a useful operation
    for data wrangling. Stacking is a way to concatenate two NumPy arrays together.
    Here is the code:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组堆叠在一起（或并排）是数据处理中的一个有用操作。堆叠是将两个 NumPy 数组连接在一起的方式。以下是代码：
- en: '[PRE108]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The output is as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE109]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '`NumPy` has many other advanced features, mainly related to statistics and
    linear algebra functions, which are used extensively in machine learning and data
    science tasks. However, not all of that is directly useful for beginner-level
    data wrangling, so we won''t cover it here.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 有许多其他高级功能，主要与统计和线性代数函数相关，这些函数在机器学习和数据科学任务中得到了广泛使用。然而，并非所有这些对初学者级别的数据处理直接有用，因此我们在此不涉及。'
- en: In the next section, we'll talk about pandas DataFrames.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论 pandas DataFrame。
- en: Pandas DataFrames
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas DataFrame
- en: The `pandas` library is a Python package that provides fast, flexible, and expressive
    data structures that are designed to make working with relational or labeled data
    both easy and intuitive. It aims to be the fundamental high-level building block
    for doing practical, real-world data analysis in Python. Additionally, it has
    the broader goal of becoming the most powerful and flexible open source data analysis/manipulation
    tool that's available in any language.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 库是一个 Python 包，它提供了快速、灵活且表达性强的数据结构，旨在使处理关系型或标记数据变得既简单又直观。它的目标是成为在 Python
    中进行实际、现实世界数据分析的基本高级构建块。此外，它还有更广泛的目标，即成为任何语言中最强大和最灵活的开源数据分析/操作工具。'
- en: The two primary data structures of pandas are Series (one-dimensional) and DataFrames
    (two-dimensional) and they handle the vast majority of typical use cases. `pandas`
    is built on top of `NumPy` and is intended to integrate well within a scientific
    computing environment with many other third-party libraries.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 的两个主要数据结构是 Series（一维）和 DataFrame（二维），它们处理了绝大多数典型用例。`pandas` 是建立在 `NumPy`
    之上的，旨在与许多第三方库在科学计算环境中良好集成。
- en: Let's look at a few exercises in order to understand data handling techniques
    using the `pandas` library.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过几个练习来了解使用 `pandas` 库的数据处理技术。
- en: 'Exercise 3.12: Creating a Pandas Series'
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.12：创建 Pandas Series
- en: 'In this exercise, we will learn how to create a `pandas` series object from
    the data structures that we created previously. If you have imported pandas as
    pd, then the function to create a series is simply `pd.Series`. Let''s go through
    the following steps:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将学习如何从之前创建的数据结构中创建一个`pandas`系列对象。如果你已经将pandas导入为pd，那么创建系列的功能就是`pd.Series`。让我们按照以下步骤进行：
- en: 'Import the `NumPy` library and initialize the labels, lists, and a dictionary:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令导入`NumPy`库并初始化标签、列表和字典：
- en: '[PRE110]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Import `pandas` as `pd` by using the following command:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令导入`pandas`为`pd`：
- en: '[PRE111]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Create a series from the `my_data` list by using the following command:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从`my_data`列表创建一个系列：
- en: '[PRE112]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The output is as follows:'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE113]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Create a series from the `my_data` list along with the labels as follows:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式从`my_data`列表创建一个带有标签的系列：
- en: '[PRE114]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The output is as follows:'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE115]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Then, create a series from the `NumPy` array, as follows:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下方式从`NumPy`数组创建一个系列：
- en: '[PRE116]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The output is as follows:'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE117]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Create a series from the dictionary, as follows:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式从字典创建一个系列：
- en: '[PRE118]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The output is as follows:'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE119]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Note
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: You may get a different final output because the system may store the object
    in the memory differently.
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会得到不同的最终输出，因为系统可能会以不同的方式在内存中存储对象。
- en: To access the source code for this specific section, please refer to [https://packt.live/2BkMJOL](https://packt.live/2BkMJOL).
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/2BkMJOL](https://packt.live/2BkMJOL)。
- en: You can also run this example online at [https://packt.live/30XhxzQ](https://packt.live/30XhxzQ).
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以在[https://packt.live/30XhxzQ](https://packt.live/30XhxzQ)上在线运行此示例。
- en: In this exercise, we created `pandas` series, which are the building blocks
    of `pandas` DataFrames. The `pandas` `series` object can hold many types of data,
    such as integers, objects, floats, doubles, and others. This is the key to constructing
    a bigger table where multiple series objects are stacked together to create a
    database-like entity.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们创建了`pandas`系列，它们是`pandas`数据框的构建块。`pandas`系列对象可以存储多种类型的数据，如整数、对象、浮点数、双精度数等。这是构建更大表格的关键，其中多个系列对象堆叠在一起以创建类似数据库的实体。
- en: 'Exercise 3.13: Pandas Series and Data Handling'
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.13：Pandas系列和数据处理
- en: 'In this exercise, we will create a `pandas` series using the `pd.series` function.
    Then, we will manipulate the data in the DataFrame using various handling techniques.
    Perform the following steps:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用`pd.series`函数创建一个`pandas`系列。然后，我们将使用各种处理技术操纵数据框中的数据。按照以下步骤进行：
- en: 'Create a `pandas` series with numerical data by using the following command:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过数值数据创建一个`pandas`系列：
- en: '[PRE120]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The output is as follows:'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE121]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Create a `pandas` series with labels by using the following command:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过标签创建一个`pandas`系列：
- en: '[PRE122]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The output is as follows:'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE123]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Create a `pandas` series with functions by using the following command:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过函数创建一个`pandas`系列：
- en: '[PRE124]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The output is as follows:'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE125]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Create a `pandas` series with a dictionary by using the following command:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过字典创建一个`pandas`系列：
- en: '[PRE126]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The output is as follows:'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE127]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Note
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3hzXRIr](https://packt.live/3hzXRIr).
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/3hzXRIr](https://packt.live/3hzXRIr)。
- en: You can also run this example online at [https://packt.live/3endeC9](https://packt.live/3endeC9).
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以在[https://packt.live/3endeC9](https://packt.live/3endeC9)上在线运行此示例。
- en: In this exercise, we created pandas `series` objects using various types of
    lists.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用各种类型的列表创建了pandas系列对象。
- en: 'Exercise 3.14: Creating Pandas DataFrames'
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.14：创建Pandas数据框
- en: 'The `pandas` DataFrame is similar to an Excel table or relational database
    (SQL) table, which consists of three main components: the data, the index (or
    rows), and the columns. Under the hood, it is a stack of `pandas` series objects,
    which are themselves built on top of `NumPy` arrays. So, all of our previous knowledge
    of NumPy arrays applies here. Let''s perform the following steps:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`数据框类似于Excel表或关系数据库（SQL）表，它由三个主要组件组成：数据、索引（或行）和列。在底层，它是一系列`pandas`系列对象，这些对象本身建立在`NumPy`数组之上。因此，我们之前关于`NumPy`数组的知识在这里都适用。让我们按照以下步骤进行：'
- en: 'Create a simple DataFrame from a two-dimensional matrix of numbers. First,
    the code draws `20` random integers from the uniform distribution. Then, we need
    to reshape it into a (`5,4`) NumPy array – `5` rows and `4` columns:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个二维数字矩阵创建一个简单的DataFrame。首先，代码从均匀分布中抽取`20`个随机整数。然后，我们需要将其重塑为(`5,4`)的NumPy数组——`5`行和`4`列：
- en: '[PRE128]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Define the rows labels as (`''A'',''B'',''C'',''D'',''E''`) and column labels
    as (`''W'',''X'',''Y'',''Z''`):'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将行标签定义为(`''A'',''B'',''C'',''D'',''E''`)，列标签定义为(`''W'',''X'',''Y'',''Z''`):'
- en: '[PRE129]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Create a DataFrame using `pd.DataFrame`:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pd.DataFrame`创建DataFrame：
- en: '[PRE130]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Print the DataFrame:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印DataFrame：
- en: '[PRE131]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The sample output is as follows:'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.6: Output of the DataFrame'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.6：DataFrame的输出'
- en: '](img/B15780_03_06.jpg)'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_06.jpg)'
- en: 'Figure 3.6: Output of the DataFrame'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.6：DataFrame的输出
- en: 'Create a DataFrame from a Python dictionary of the lists of integers by using
    the following command:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从整数列表的Python字典创建DataFrame：
- en: '[PRE132]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Pass this dictionary as a data argument to the `pd.DataFrame` function. Pass
    on a list of rows or indices. Notice how the dictionary keys became the column
    names and that the values were distributed among multiple rows:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此字典作为数据参数传递给`pd.DataFrame`函数。传递一个行或索引列表。注意，字典键变成了列名，而值被分配到多行中：
- en: '[PRE133]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The output is as follows:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.7: Output of DataFrame df2'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.7：DataFrame df2的输出'
- en: '](img/B15780_03_07.jpg)'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_07.jpg)'
- en: 'Figure 3.7: Output of DataFrame df2'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：DataFrame df2的输出
- en: Note
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2UVTz4u](https://packt.live/2UVTz4u).
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/2UVTz4u](https://packt.live/2UVTz4u).
- en: You can also run this example online at [https://packt.live/2CgBkAd](https://packt.live/2CgBkAd).
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在此在线运行此示例：[https://packt.live/2CgBkAd](https://packt.live/2CgBkAd).
- en: In this exercise, we created DataFrames manually from scratch, which will allow
    us to understand DataFrames better.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们从头开始手动创建DataFrame，这将使我们更好地理解DataFrame。
- en: Note
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The most common way that you will create a pandas DataFrame will be to read
    tabular data from a file on your local disk or over the internet – CSV, text,
    JSON, HTML, Excel, and so on. We will cover some of these in the next chapter.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建pandas DataFrame的最常见方式是从本地磁盘或互联网上的文件中读取表格数据——CSV、文本、JSON、HTML、Excel等等。我们将在下一章中介绍其中的一些。
- en: 'Exercise 3.15: Viewing a DataFrame Partially'
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.15：部分查看DataFrame
- en: 'In the previous exercise, we used `print(df)` to print the whole DataFrame.
    For a large dataset, we would like to print only sections of data. In this exercise,
    we will read a part of the DataFrame. Let''s learn how to do so:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们使用了`print(df)`来打印整个DataFrame。对于大型数据集，我们只想打印数据的一部分。在这个练习中，我们将读取DataFrame的一部分。让我们学习如何做到这一点：
- en: 'Import the `NumPy` library and execute the following code to create a DataFrame
    with `25` rows. Then, fill it with random numbers:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`NumPy`库并执行以下代码以创建一个包含`25`行的DataFrame。然后，用随机数填充它：
- en: '[PRE134]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Run the following code to view only the first five rows of the DataFrame:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码以仅查看DataFrame的前五行：
- en: '[PRE135]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The sample output is as follows (note that your output could be different due
    to randomness):'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于随机性，您的输出可能不同）：
- en: '![Figure 3.8: The first five rows of the DataFrame'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.8：DataFrame的前五行'
- en: '](img/B15780_03_08.jpg)'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_08.jpg)'
- en: 'Figure 3.8: The first five rows of the DataFrame'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.8：DataFrame的前五行
- en: By default, `head` shows only five rows. If you want to see any specific number
    of rows, just pass that as an argument.
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`head`只显示五行。如果您想看到任何特定数量的行，只需将其作为参数传递。
- en: 'Print the first eight rows by using the following command:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打印前八行：
- en: '[PRE136]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The sample output is as follows:'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.9: The first eight rows of the DataFrame'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.9：DataFrame的前八行'
- en: '](img/B15780_03_09.jpg)'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_09.jpg)'
- en: 'Figure 3.9: The first eight rows of the DataFrame'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.9：DataFrame的前八行
- en: Just like `head` shows the first few rows, `tail` shows the last few rows.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像`head`显示前几行一样，`tail`显示最后几行。
- en: 'Print the DataFrame using the `tail` command, as follows:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tail`命令打印DataFrame，如下所示：
- en: '[PRE137]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The sample output (partially shown) is as follows:'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出（部分显示）如下：
- en: '![Figure 3.10: The last 20 rows of the DataFrame'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.10：DataFrame的最后20行'
- en: '](img/B15780_03_10.jpg)'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_10.jpg)'
- en: 'Figure 3.10: The last few rows of the DataFrame'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：DataFrame的最后几行
- en: Note
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/30UiXLB](https://packt.live/30UiXLB).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/30UiXLB](https://packt.live/30UiXLB)。
- en: You can also run this example online at [https://packt.live/2URYCTz](https://packt.live/2URYCTz).
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 [https://packt.live/2URYCTz](https://packt.live/2URYCTz) 上在线运行此示例。
- en: 'In this section, we learned how to view portions of the DataFrame without looking
    at the whole DataFrame. In the next section, we''re going to look at two functionalities:
    indexing and slicing columns in a DataFrame.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何查看 DataFrame 的部分，而无需查看整个 DataFrame。在下一节中，我们将探讨两个功能：在 DataFrame 中索引和切片列。
- en: Indexing and Slicing Columns
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片列
- en: 'There are two methods for indexing and slicing columns in a DataFrame. They
    are as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 中索引和切片列有两种方法。它们如下：
- en: The `DOT` method
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOT` 方法'
- en: The `bracket` method
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`括号` 方法'
- en: The `df.column`. The bracket method is intuitive and easy to follow. In this
    method, you can access the data by the generic name/header of the column.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`df.column`。括号方法直观且易于理解。在此方法中，您可以通过列的通用名称/标题访问数据。'
- en: 'The following code illustrates these concepts. We can execute them in our Jupyter Notebook:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了这些概念。我们可以在我们的 Jupyter Notebook 中执行它们：
- en: '[PRE138]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The output is as follows (a only the partial output is shown here because the
    actual column is long):'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下（此处仅显示部分输出，因为实际列很长）：
- en: '![Figure 3.11: Rows of the ''X'' columns'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11：''X'' 列的行'
- en: '](img/B15780_03_11.jpg)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_11.jpg](img/B15780_03_11.jpg)'
- en: 'Figure 3.11: Rows of the ''X'' columns'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11：'X' 列的行
- en: 'This is the output showing the type of column:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示列类型的输出：
- en: '![Figure 3.12: Type of ''X'' column'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12：''X'' 列的类型'
- en: '](img/B15780_03_12.jpg)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_12.jpg](img/B15780_03_12.jpg)'
- en: 'Figure 3.12: Type of ''X'' column'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12：'X' 列的类型
- en: 'This is the output showing the X and Z column indexed by passing a list:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示通过传递列表索引 X 和 Z 列的输出：
- en: '![Figure 3.13: Rows of the ''Y'' columns'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13：''Y'' 列的行'
- en: '](img/B15780_03_13.jpg)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_13.jpg](img/B15780_03_13.jpg)'
- en: 'Figure 3.13: Rows of the ''Y'' columns'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：'Y' 列的行
- en: 'This is the output showing the type of the pair of columns:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示列类型的输出：
- en: '![Figure 3.14: Type of ''Y'' column'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14：''Y'' 列的类型'
- en: '](img/B15780_03_14.jpg)'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_14.jpg](img/B15780_03_14.jpg)'
- en: 'Figure 3.14: Type of ''Y'' column'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14：'Y' 列的类型
- en: Note
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more than one column, the object turns into a DataFrame. But for a single
    column, it is a `pandas` series object.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多个列，对象变为 DataFrame。但对于单个列，它是一个 `pandas` 系列对象。
- en: So far, we have seen how to access the columns of DataFrames using both the
    DOT method and the bracket method. Dataframes are commonly used for row/column data.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用点方法和括号方法访问 DataFrame 的列。DataFrame 通常用于行/列数据。
- en: Now, let's look at indexing and slicing rows.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何索引和切片行。
- en: Indexing and Slicing Rows
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行索引和切片
- en: 'Indexing and slicing rows in a DataFrame can also be done using the following methods:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 中索引和切片行也可以使用以下方法：
- en: The label-based `loc` method
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于标签的 `loc` 方法
- en: The index-based `iloc` method
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于索引的 `iloc` 方法
- en: 'The `loc` method is intuitive and easy to follow. In this method, you can access
    the data by the generic name of the row. On the other hand, the `iloc` method
    allows you to access the rows by their numerical index. This can be very useful
    for a large table with thousands of rows, especially when you want to iterate
    over the table in a loop with a numerical counter. The following code illustrates
    the concepts of `iloc`:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`loc` 方法直观且易于理解。在此方法中，您可以通过行的通用名称访问数据。另一方面，`iloc` 方法允许您通过它们的数值索引访问行。这对于具有数千行的大型表格非常有用，尤其是在您想使用数值计数器在循环中遍历表格时。以下代码展示了
    `iloc` 的概念：'
- en: '[PRE139]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The sample output is as follows:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.15: Output of the loc and iloc methods'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15：loc 和 iloc 方法的输出'
- en: '](img/B15780_03_15.jpg)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_15.jpg](img/B15780_03_15.jpg)'
- en: 'Figure 3.15: Output of the loc and iloc methods'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：loc 和 iloc 方法的输出
- en: One of the most common tasks in data wrangling is creating or deleting columns
    or rows of data from your DataFrame. Sometimes, you want to create a new column
    based on some mathematical operation or transformation involving the existing
    columns. This is similar to manipulating database records and inserting a new
    column based on simple transformations. We'll look at some of these concepts in
    the upcoming exercises.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 数据整理中最常见的任务之一是从您的 DataFrame 中创建或删除数据列或行。有时，您可能希望根据某些涉及现有列的数学运算或转换来创建新列。这与操作数据库记录并在简单转换的基础上插入新列类似。我们将在接下来的练习中探讨这些概念。
- en: 'Exercise 3.16: Creating and Deleting a New Column or Row'
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.16：创建和删除新列或行
- en: In this exercise, we're going to create and delete a new column or a row from
    the `stock.csv` dataset. We'll also use the `inplace` function to modify the original DataFrame.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从 `stock.csv` 数据集中创建和删除新列或行。我们还将使用 `inplace` 函数来修改原始 DataFrame。
- en: Note
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `stock.csv` file can be found here: [https://packt.live/3hxvPNP](https://packt.live/3hxvPNP).'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`stock.csv` 文件可在此处找到：[https://packt.live/3hxvPNP](https://packt.live/3hxvPNP)。'
- en: 'Let''s go through the following steps:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下步骤进行：
- en: 'Import the necessary Python modules, load the `stocks.csv` file, and create
    a new column using the following snippet:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的 Python 模块，加载 `stocks.csv` 文件，并使用以下代码片段创建新列：
- en: '[PRE140]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Note
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to change the path (highlighted) based on the location of the file
    on your system.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记根据您系统上文件的位置更改路径（突出显示）。
- en: 'The sample output (partially shown) is as follows:'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出（部分显示）如下：
- en: '![Figure 3.16: Partial output of the DataFrame'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.16：DataFrame 的部分输出'
- en: '](img/B15780_03_16.jpg)'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_16.jpg)'
- en: 'Figure 3.16: Partial output of the DataFrame'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.16：DataFrame 的部分输出
- en: 'Drop a column using the `df.drop` method:'
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `df.drop` 方法删除列：
- en: '[PRE141]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The sample output (partially shown) is as follows:'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出（部分显示）如下：
- en: '![Figure 3.17: Partial output of the DataFrame'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.17：DataFrame 的部分输出'
- en: '](img/B15780_03_17.jpg)'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_17.jpg)'
- en: 'Figure 3.17: Partial output of the DataFrame'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.17：DataFrame 的部分输出
- en: 'Drop a specific row using the `df.drop` method:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `df.drop` 方法删除特定行：
- en: '[PRE142]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The partial output is as follows:'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分输出如下：
- en: '![Figure 3.18: Partial output of the DataFrame'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.18：DataFrame 的部分输出'
- en: '](img/B15780_03_18.jpg)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_18.jpg)'
- en: 'Figure 3.18: Partial output of the DataFrame'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.18：DataFrame 的部分输出
- en: Dropping methods creates a copy of the DataFrame and does not change the original
    DataFrame.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除方法会创建 DataFrame 的副本，而不会更改原始 DataFrame。
- en: 'Change the original DataFrame by setting the `inplace` argument to `True`:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置 `inplace` 参数为 `True` 来更改原始 DataFrame：
- en: '[PRE143]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'The sample output is as follows:'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.19: Partial Output of the DataFrame'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.19：DataFrame 的部分输出'
- en: '](img/B15780_03_19.jpg)'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_19.jpg)'
- en: 'Figure 3.19: Partial Output of the DataFrame'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19：DataFrame 的部分输出
- en: Note
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3frxthU](https://packt.live/3frxthU).
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/3frxthU](https://packt.live/3frxthU)。
- en: You can also run this example online at [https://packt.live/2USxJyA](https://packt.live/2USxJyA).
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在此在线运行此示例 [https://packt.live/2USxJyA](https://packt.live/2USxJyA)。
- en: We have now learned how to modify DataFrames by dropping or adding rows and columns.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何通过删除或添加行和列来修改 DataFrame。
- en: Note
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All the normal operations are not in-place, that is, they do not impact the
    original DataFrame object and return a copy of the original with addition (or
    deletion) instead. The last bit of the preceding code shows how to make a change
    in the existing DataFrame with the `inplace=True` argument. Please note that this
    change is irreversible and should be used with caution.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 所有正常操作都不是就地进行的，也就是说，它们不会影响原始 DataFrame 对象，而是返回带有添加（或删除）的原始副本。前述代码的最后部分显示了如何使用
    `inplace=True` 参数在现有 DataFrame 中进行更改。请注意，这种更改是不可逆的，应谨慎使用。
- en: Statistics and Visualization with NumPy and Pandas
  id: totrans-563
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NumPy 和 Pandas 进行统计和可视化
- en: One of the great advantages of using libraries such as NumPy and pandas is that
    a plethora of built-in statistical and visualization methods are available, for
    which we don't have to search for and write new code. Furthermore, most of these
    subroutines are written using C or Fortran code (and pre-compiled), making them
    extremely fast to execute.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如 NumPy 和 pandas 等库的一个巨大优势是，我们可以获得大量的内置统计和可视化方法，我们不需要搜索和编写新代码。此外，这些子程序中的大多数都是使用
    C 或 Fortran 代码（并预编译）编写的，这使得它们执行速度非常快。
- en: Refresher on Basic Descriptive Statistics
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本描述性统计的复习
- en: For any data wrangling task, it is quite useful to extract basic descriptive
    statistics, which should describe the data in ways such as the mean, median, and
    mode and create some simple visualizations or plots. These plots are often the
    first step in identifying fundamental patterns as well as oddities (if present)
    in the data. In any statistical analysis, descriptive statistics is the first
    step, followed by inferential statistics, which tries to infer the underlying
    distribution or process that the data might have been generated from. You can
    imagine that descriptive statistics will inform us of the basic characteristics
    of the data, while inferential statistics will help us understand not only the
    data we are working with but alternative data that we might be experimenting with.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何数据处理任务，提取基本描述性统计信息非常有用，这些信息应以均值、中位数和众数等方式描述数据，并创建一些简单的可视化或图表。这些图表通常是识别数据中的基本模式以及异常（如果有的话）的第一步。在任何统计分析中，描述性统计是第一步，随后是推断统计，它试图推断数据可能是由哪个潜在分布或过程生成的。你可以想象，描述性统计将告诉我们数据的基本特征，而推断统计将帮助我们理解我们正在处理的数据，以及我们可能正在实验的其他数据。
- en: Since inferential statistics is intimately coupled with the machine learning/predictive
    modeling stage of a data science pipeline, descriptive statistics naturally becomes
    associated with the data wrangling aspect.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 由于推断统计与数据科学管道的机器学习/预测建模阶段紧密相连，描述性统计自然与数据处理方面相关联。
- en: 'There are two broad approaches to descriptive statistical analysis:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 描述性统计分析有两种主要方法：
- en: '**Graphical techniques**: Bar plots, scatter plots, line charts, box plots,
    histograms, and so on'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形技术**：条形图、散点图、折线图、箱线图、直方图等'
- en: '**The calculation of the central tendency and spread**: Mean, median, mode,
    variance, standard deviation, range, and so on'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算集中趋势和离散程度**：平均值、中位数、众数、方差、标准差、极差等'
- en: In this section, we will demonstrate how you can accomplish both of these tasks
    using Python. Apart from NumPy and pandas, we will need to learn the basics of
    another great package – `matplotlib` – which is the most powerful and versatile
    visualization library in Python.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何使用Python完成这两项任务。除了NumPy和pandas之外，我们还需要学习另一个优秀的包的基础知识——`matplotlib`，这是Python中最强大和最通用的可视化库。
- en: 'Exercise 3.17: Introduction to Matplotlib through a Scatter Plot'
  id: totrans-572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.17：通过散点图介绍Matplotlib
- en: 'In this exercise, we will demonstrate the power and simplicity of matplotlib
    by creating a simple scatter plot from self-created data about the age, weight,
    and height of a few people. To do so, let''s go through the following steps:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过创建关于几个人的年龄、体重和身高的自创数据来展示matplotlib的强大和简单性，创建一个简单的散点图。为此，让我们按照以下步骤进行：
- en: 'First, we will define simple lists of the names of people, along with their
    age, weight (in kgs), and height (in centimeters):'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将定义包含人名、年龄、体重（以千克为单位）和身高（以厘米为单位）的简单列表：
- en: '[PRE144]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Import the most important module from `matplotlib`, called `pyplot`:'
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`中最重要的模块，称为`pyplot`：
- en: '[PRE145]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Create simple scatter plots of `age` versus `weight`:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建简单的`年龄`与`体重`散点图：
- en: '[PRE146]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The output is as follows:'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.20: A screenshot of a scatter plot containing age and weight'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.20：包含年龄和体重的散点图的屏幕截图'
- en: '](img/B15780_03_20.jpg)'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15780_03_20.jpg](img/B15780_03_20.jpg)'
- en: 'Figure 3.20: A screenshot of a scatter plot containing age and weight'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.20：包含年龄和体重的散点图的屏幕截图
- en: The preceding plot can be improved by enlarging the figure size, customizing
    the aspect ratio, adding a title with a proper font size, adding x-axis and y-axis
    labels with a customized font size, adding grid lines, changing the y-axis limit
    to be between `0` and `100`, adding x and y tick marks, customizing the scatter
    plot's color, and changing the size of the scatter dots.
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过放大图形大小、自定义纵横比、添加适当字号的标题、添加自定义字号的x轴和y轴标签、添加网格线、将y轴限制在`0`到`100`之间、添加x和y刻度、自定义散点图的颜色以及改变散点的大小，可以改进前面的图表。
- en: 'The code for the improved plot is as follows:'
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改进图表的代码如下：
- en: '[PRE147]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'The output is as follows:'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.21: A screenshot of a scatter plot showing age versus weight'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.21：显示年龄与体重关系的散点图的屏幕截图'
- en: '](img/B15780_03_21.jpg)'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15780_03_21.jpg](img/B15780_03_21.jpg)'
- en: 'Figure 3.21: A screenshot of a scatter plot showing age versus weight'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：显示年龄与体重关系的散点图的屏幕截图
- en: 'We can observe the following things:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到以下事项：
- en: A tuple (`8,6`) is passed as an argument for the figure size.
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将元组（`8,6`）作为图形大小的参数传递。
- en: A list comprehension is used inside `xticks` to create a customized list of
    5-10-15-…-55.
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`xticks`内部使用列表推导式来创建一个自定义的列表5-10-15-…-55。
- en: A newline (`\n`) character is used inside the `plt.text()` function to break
    up and distribute the text into two lines.
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`plt.text()`函数内部使用换行符（`\n`）来分割和将文本分布到两行。
- en: The `plt.show()` function is used at the very end. The idea is to keep on adding
    various graphics properties (font, color, axis limits, text, legend, grid, and
    so on) until you are satisfied and then show the plot with one function. The plot
    will not be displayed without this last function call.
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在最后使用`plt.show()`函数。想法是持续添加各种图形属性（字体、颜色、轴限制、文本、图例、网格等），直到你满意，然后使用一个函数显示图表。如果没有这个最后的函数调用，图表将不会显示。
- en: The preceding plot is quite self-explanatory. We can observe that the variations
    in weight are reduced after `18-20` years of age.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表相当直观。我们可以观察到，在18-20岁之后，体重的变化减少了。
- en: Note
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3hFzysK](https://packt.live/3hFzysK).
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/3hFzysK](https://packt.live/3hFzysK)。
- en: You can also run this example online at [https://packt.live/3eauxWP](https://packt.live/3eauxWP).
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在[https://packt.live/3eauxWP](https://packt.live/3eauxWP)上在线运行此示例。
- en: In this exercise, we have gone through the basics of using `matplotlib`, a popular
    charting function. In the next section, we will look at the definition of statistical measures.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了使用`matplotlib`这个流行的图表函数的基础。在下一节中，我们将探讨统计度量定义。
- en: The Definition of Statistical Measures – Central Tendency and Spread
  id: totrans-601
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计度量定义 – 中心趋势和离散程度
- en: 'A measure of central tendency is a single value that attempts to describe a
    set of data by identifying the central position within that set of data. They
    are also categorized as summary statistics:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 中心趋势度量是一个试图通过识别数据集中的中心位置来描述数据集的单个值。它们也被归类为汇总统计量：
- en: '**Mean**: The mean is the sum of all values divided by the total number of
    values.'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**均值**: 均值是所有值的总和除以值的总数。'
- en: '**Median**: The median is the middle value. It is the value that splits the
    dataset in half. To find the median, order your data from smallest to largest,
    and then find the data point that has an equal amount of values above and below
    it.'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中位数**: 中位数是中间的值。它是将数据集分成两半的值。要找到中位数，将你的数据从小到大排序，然后找到具有相等数量值在其上方和下方的数据点。'
- en: '**Mode**: The mode is the value that occurs the most frequently in your dataset.
    On a bar chart, the mode is the highest bar.'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式**: 模式是你在数据集中出现频率最高的值。在柱状图中，模式对应的是最高的柱子。'
- en: 'Generally, the mean is a better measure to use for symmetric data while the
    median is a better measure for data with a skewed (left- or right-heavy) distribution.
    For categorical data, you have to use the mode:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于对称数据，均值是一个更好的度量标准，而对于具有偏斜（左重或右重）分布的数据，中位数是一个更好的度量标准。对于分类数据，你必须使用模式：
- en: '![Figure 3.22: A screenshot of a curve showing the mean, median, and mode'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22：显示均值、中位数和模式的曲线截图'
- en: '](img/B15780_03_22.jpg)'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22：显示均值、中位数和模式的曲线截图](img/B15780_03_22.jpg)'
- en: 'Figure 3.22: A screenshot of a curve showing the mean, median, and mode'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：显示均值、中位数和模式的曲线截图
- en: 'The spread of the data is a measure of by how much the values in the dataset
    are likely to differ from the mean of the values. If all the values are close
    together, then the spread is low; on the other hand, if some or all of the values
    differ by a large amount from the mean (and each other), then there is a large
    spread in the data:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的离散程度是衡量数据集中的值可能偏离值均值的程度。如果所有值都紧密相邻，则离散程度低；另一方面，如果某些或所有值与均值（以及彼此）相差很大，则数据中存在较大的离散程度：
- en: '**Variance**: This is the most common measure of spread. The variance is the
    average of the squares of the deviations from the mean. Squaring the deviations
    ensures that negative and positive deviations do not cancel each other out.'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方差**: 这是最常见的离散程度度量。方差是均值偏差平方的平均值。平方偏差确保正负偏差不会相互抵消。'
- en: '**Standard deviation**: Because variance is produced by squaring the distance
    from the mean, its unit does not match that of the original data. Standard deviation
    is a mathematical trick that brings back parity. It is the positive square root
    of the variance.'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准差**：由于方差是通过平方距离来计算的，其单位与原始数据不匹配。标准差是一种数学技巧，它恢复了平衡。它是方差的正平方根。'
- en: Random Variables and Probability Distribution
  id: totrans-613
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机变量和概率分布
- en: A random variable is defined as the value of a given variable that represents
    the outcome of a statistical experiment or process.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 随机变量被定义为表示统计实验或过程结果的给定变量的值。
- en: Although it sounds very formal, pretty much everything around us that we can
    measure can be thought of as a random variable.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然听起来非常正式，但我们周围几乎所有可以测量的东西都可以被视为随机变量。
- en: The reason behind this is that almost all natural, social, biological, and physical
    processes are the final outcome of a large number of complex processes, and we
    cannot know the details of those fundamental processes. All we can do is observe
    and measure the final outcome.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 这种现象背后的原因是，几乎所有自然、社会、生物和物理过程都是大量复杂过程的最终结果，我们无法了解这些基本过程的细节。我们能做的只是观察和测量最终结果。
- en: 'Typical examples of random variables that are around us are as follows:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 我们周围典型的随机变量例子如下：
- en: The economic output of a nation
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个国家的经济产出
- en: The blood pressure of a patient
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 患者的血压
- en: The temperature of a chemical process in a factory
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂中化学过程的温度
- en: The number of friends of a person on Facebook
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个人在Facebook上的朋友数量
- en: The stock market price of a company
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司的股票市场价格
- en: These values can take any discrete or continuous value and follow a particular
    pattern (although this pattern may vary over time). Therefore, they can all be
    classified as random variables.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值可以取任何离散或连续值，并遵循特定的模式（尽管这种模式可能随时间变化）。因此，它们都可以被归类为随机变量。
- en: What is a Probability Distribution?
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是概率分布？
- en: A probability distribution is a mathematical function that tells you the likelihood
    of a random variable taking each different possible value. In other words, a probability
    distribution gives the probabilities of the different possible outcomes in a given situation.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 概率分布是一个数学函数，它告诉你随机变量取每个不同可能值的可能性。换句话说，概率分布给出了给定情况下不同可能结果的概率。
- en: Suppose you go to a school and measure the heights of students who have been
    selected randomly. Height is an example of a random variable here. As you measure
    height, you can create a distribution of height. This type of distribution is
    useful when you need to know which outcomes are the most likely to occur (that
    is, which heights are the most common), the spread of potential values, and the
    likelihood of different results.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你去了学校，并测量了随机选择的学生身高。在这里，身高是一个随机变量的例子。当你测量身高时，你可以创建一个身高分布。这种类型的分布在你需要知道哪些结果最有可能发生（即，哪些身高最常见），潜在值的范围以及不同结果的概率时非常有用。
- en: The concepts of central tendency and spread are applicable to a distribution
    and are used to describe the properties and behavior of a distribution.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 中心趋势和离散的概念适用于分布，并用于描述分布的性质和行为。
- en: 'Statisticians generally divide all distributions into two broad categories:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 统计学家通常将所有分布分为两大类：
- en: Discrete distributions
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离散分布
- en: Continuous distributions
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续分布
- en: Discrete Distributions
  id: totrans-631
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散分布
- en: Discrete probability functions, also known as probability mass functions, can
    assume a discrete number of values. For example, coin tosses and counts of events
    are discrete functions. You can only have heads or tails in a coin toss. Similarly,
    if you're counting the number of trains that arrive at a station per hour, you
    can count 11 or 12 trains, but nothing in between.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 离散概率函数，也称为概率质量函数，可以假设离散的数值。例如，抛硬币和事件计数是离散函数。在抛硬币中，你只能有正面或反面。同样，如果你每小时计算到达车站的火车数量，你可以计算11或12辆火车，但中间没有。
- en: 'Some prominent discrete distributions are as follows:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 一些显著的离散分布如下：
- en: Binomial distribution to model binary data, such as coin tosses
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二项分布用于模拟二元数据，例如抛硬币
- en: Poisson distribution to model count data, such as the count of library book
    checkouts per hour
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泊松分布用于模拟计数数据，例如每小时图书馆图书借阅次数
- en: Uniform distribution to model multiple events with the same probability, such
    as rolling a die
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均匀分布用于模拟具有相同概率的多个事件，例如掷骰子
- en: Continuous Distributions
  id: totrans-637
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连续分布
- en: Continuous probability functions are also known as probability density functions.
    You have a continuous distribution if the variable can assume an infinite number
    of values between any two values. Continuous variables are often measurements
    on a real number scale, such as height, weight, and temperature.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 连续概率函数也称为概率密度函数。如果你有一个连续分布，那么变量可以在任意两个值之间假设无限多个值。连续变量通常是实数尺度上的测量，例如身高、体重和温度。
- en: The most well-known continuous distribution is normal distribution, which is
    also known as Gaussian distribution or the bell curve. This symmetric distribution
    fits a wide variety of phenomena, such as human height and IQ scores.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的连续分布是正态分布，也称为高斯分布或钟形曲线。这种对称分布适用于各种现象，例如人类身高和智商分数。
- en: 'Normal distribution is linked to the famous `68%-95%-99.7%` boundaries. This
    rule is widely used in industries, medicine, economics, and social science:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 正态分布与著名的 `68%-95%-99.7%` 边界相关联。这一规则在工业、医学、经济学和社会科学中得到广泛应用：
- en: '![Figure 3.23: Curve showing the normal distribution of the famous 68-95-99.7
    rule'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.23: Curve showing the normal distribution of the famous 68-95-99.7
    rule'
- en: '](img/B15780_03_23.jpg)'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15780_03_23.jpg]'
- en: 'Figure 3.23: Curve showing the normal distribution of the famous 68-95-99.7
    rule'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23：显示著名 68-95-99.7 规则的正态分布曲线
- en: Data Wrangling in Statistics and Visualization
  id: totrans-644
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计和可视化中的数据处理
- en: A good data wrangling professional is expected to encounter a dizzying array
    of diverse data sources each day. As we explained previously, due to a multitude
    of complex sub-processes and mutual interactions that give rise to such data,
    they all fall into the category of discrete or continuous random variables.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的数据处理专业人员每天都会遇到令人眼花缭乱的各类数据源。正如我们之前解释的，由于众多复杂的子过程和相互作用的产生，这些数据都属于离散或连续随机变量的范畴。
- en: It would be extremely difficult and confusing for a data wrangler or a data
    science team if all of this data continued to be treated as completely random
    without any shape or pattern. A formal statistical basis must be given to such
    random data streams, and one of the simplest ways to start that process is to
    measure their descriptive statistics.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些数据继续被当作完全没有形状或模式的完全随机数据来处理，那么对于数据处理员或数据科学团队来说，这将极其困难且令人困惑。必须为这些随机数据流提供一个正式的统计基础，而开始这一过程的最简单方法之一就是测量它们的描述性统计。
- en: Assigning a stream of data to a particular distribution function (or a combination
    of many distributions) is actually part of inferential statistics. However, inferential
    statistics starts only when descriptive statistics is done alongside measuring
    all the important parameters of the pattern of the data.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据流分配给特定的分布函数（或许多分布的组合）实际上是推断统计的一部分。然而，推断统计只有在描述性统计与测量数据模式的所有重要参数同时进行时才开始。
- en: Therefore, as the front line of a data science pipeline, the process of data
    wrangling must deal with measuring and quantifying such descriptive statistics
    of the incoming data. Along with the formatted and cleaned-up data, the primary
    job of a data wrangler is to hand over these measures (and sometimes accompanying
    plots) to the next member of the analytics team.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为数据科学流程的前线，数据处理的过程必须处理测量和量化 incoming data 的描述性统计。除了格式化和清理后的数据，数据处理员的主要工作是将这些度量（有时还有相应的图表）交给分析团队的下一成员。
- en: Plotting and visualization also help a data wrangling team in identifying potential
    outliers and misfits in the incoming data stream and help them take the appropriate
    action. We will see some examples of such tasks in the next chapter, where we
    will identify odd data points by creating scatter plots or histograms and either
    impute or omit the data point.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图和可视化也有助于数据处理团队识别 incoming data stream 中的潜在异常值和不符合的数据，并帮助他们采取适当的行动。我们将在下一章中看到一些此类任务的示例，其中我们将通过创建散点图或直方图来识别异常数据点，并对其进行插值或删除。
- en: Using NumPy and Pandas to Calculate Basic Descriptive Statistics
  id: totrans-650
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NumPy 和 Pandas 计算基本描述性统计
- en: Now that we have some basic knowledge of `NumPy`, `pandas`, and `matplotlib`
    under our belt, we can explore a few additional topics related to these libraries,
    such as how we can bring them together for advanced data generation, analysis,
    and visualization.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 `NumPy`、`pandas` 和 `matplotlib` 有了一些基本知识，我们可以探索一些与这些库相关的话题，例如如何将它们结合起来进行高级数据生成、分析和可视化。
- en: Random Number Generation Using NumPy
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NumPy 生成随机数
- en: '`NumPy` offers a dizzying array of random number generation utility functions,
    all of which correspond to various statistical distributions, such as uniform,
    binomial, Gaussian normal, Beta/Gamma, and chi-square. Most of these functions
    are extremely useful and appear countless times in advanced statistical data mining
    and machine learning tasks. Having a solid understanding of these concepts is
    strongly encouraged for all of you reading this book.'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 提供了一系列令人眼花缭乱的随机数生成实用函数，所有这些函数都对应于各种统计分布，如均匀分布、二项分布、高斯正态分布、Beta/Gamma
    和卡方分布。这些函数中的大多数都非常有用，在高级统计数据挖掘和机器学习任务中出现了无数遍。强烈建议所有阅读这本书的人都对这些概念有一个扎实的理解。'
- en: Here, we will discuss three of the most important distributions that may come
    in handy for data wrangling tasks – **uniform**, **binomial**, and **gaussian
    normal**. The goal here is to show an example of simple function calls that can
    generate one or more random numbers/arrays whenever the user needs them.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论三个在数据整理任务中可能很有用的最重要分布——**均匀分布**、**二项分布**和**高斯正态分布**。这里的目的是展示简单的函数调用示例，这些函数可以在用户需要时生成一个或多个随机数/数组。
- en: A **uniform distribution** is a probability distribution that is concerned with
    events that are equally likely to occur. Let's go through the following exercise
    to practice uniform distribution with random numbers.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '**均匀分布**是一种与等可能发生的事件相关的概率分布。让我们通过以下练习来练习使用随机数进行均匀分布。'
- en: 'Exercise 3.18: Generating Random Numbers from a Uniform Distribution'
  id: totrans-656
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.18：从均匀分布生成随机数
- en: 'In this exercise, we will be generating random numbers from a uniform distribution
    of numbers from 1-10\. Next, we''ll generate some artificial data for a customized
    use case using the `random` function of the `NumPy` library. Let''s go through
    the following steps:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从 1-10 的均匀分布中生成随机数。接下来，我们将使用 `NumPy` 库的 `random` 函数生成一些用于定制用例的人工数据。让我们按照以下步骤进行：
- en: Note
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The results will be different during each run as we will be working with random
    numbers.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用随机数，每次运行的结果都会不同。
- en: 'Import the `NumPy` library:'
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `NumPy` 库：
- en: '[PRE148]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Generate a random integer between `1` and `10`:'
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个介于 `1` 和 `10` 之间的随机整数：
- en: '[PRE149]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The sample output is as follows (your output could be different):'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（您的输出可能会有所不同）：
- en: '[PRE150]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Generate a random integer between `1` and `10` but with `size=1` as an argument.
    This generates a `NumPy` array of size `1`:'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个介于 `1` 和 `10` 之间的随机整数，但以 `size=1` 作为参数。这将生成一个大小为 `1` 的 `NumPy` 数组：
- en: '[PRE151]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The sample output is as follows (your output could be different due to it being
    randomly drawn):'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（由于是随机抽取，您的输出可能会有所不同）：
- en: '[PRE152]'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Therefore, we can easily write the code to generate the outcome of a die being
    thrown (a normal 6-sided die) for `10` trials.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们可以轻松编写代码来生成掷骰子（一个普通的六面骰子）的 `10` 次试验的结果。
- en: How about moving away from the integers and generating some real numbers? Let's
    say that we want to generate artificial data for the weights (in kgs) of `20`
    adults and that we can measure the accurate weights up to two decimal places.
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么我们是否可以摆脱整数，生成一些实数呢？比如说，我们想要生成 `20` 个成年人的体重（以千克为单位）的人工数据，并且我们可以精确测量到小数点后两位。
- en: 'Generate decimal data using the following command:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令生成十进制数据：
- en: '[PRE153]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The sample output is as follows:'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '[PRE154]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: We are not only restricted to one-dimensional arrays. We're going to use a multi-dimensional
    array for the next step.
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不仅限于使用一维数组。在下一步中，我们将使用多维数组。
- en: 'Generate and show a `3x3` matrix with random numbers between `0` and `1`:'
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成并显示一个 `3x3` 的随机数矩阵，数值介于 `0` 和 `1` 之间：
- en: '[PRE155]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The sample output is as follows (note that your specific output could be different
    due to randomness):'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于随机性，您的具体输出可能会有所不同）：
- en: '[PRE156]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Note
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2YIycEL](https://packt.live/2YIycEL).
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/2YIycEL](https://packt.live/2YIycEL)。
- en: You can also run this example online at [https://packt.live/2YHqkDA](https://packt.live/2YHqkDA).
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/2YHqkDA](https://packt.live/2YHqkDA)上在线运行此示例。
- en: With this exercise, we have a basic idea of how to create random numbers, specifically,
    random trials on the basis of probability.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，我们有了如何创建随机数的基本概念，特别是基于概率的随机试验。
- en: A binomial distribution is the probability distribution of getting a specific
    number of successes in a specific number of trials of an event with a pre-determined
    chance or probability.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 二项分布是在特定次数的试验中，事件以预定的概率或概率出现特定次数的概率分布。
- en: The most obvious example of this is a coin toss. A fair coin may have an equal
    chance of heads or tails, but an unfair coin may have more chances of the head
    coming up or vice versa. We can simulate a coin toss using the `NumPy` library.
    We will look at this in the next exercise.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的例子是抛硬币。一枚公平的硬币正面和反面的概率可能相等，但一枚不公平的硬币可能更有可能出现正面或反面。我们可以使用`NumPy`库来模拟抛硬币。我们将在下一个练习中探讨这一点。
- en: 'Exercise 3.19: Generating Random Numbers from a Binomial Distribution and Bar
    Plot'
  id: totrans-687
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.19：从二项分布生成随机数和条形图
- en: 'In this exercise, we''re going to generate random numbers from a binomial distribution
    and create a bar plot based on the generated DataFrame. Let''s consider a scenario.
    Suppose we have a biased coin where the probability of heads is `0.6`. We toss
    this coin 10 times and take note of the number of heads turning up each time.
    That is one trial or experiment. Now, we can repeat this experiment (10 coin tosses)
    any number of times, say 8 times. Each time, we record the number of heads. Let''s
    see how this works using the `NumPy` library:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将从二项分布生成随机数，并根据生成的DataFrame创建条形图。让我们考虑一个场景。假设我们有一枚偏心的硬币，其正面的概率为`0.6`。我们抛这枚硬币10次，并记录每次出现的正面次数。这就是一次试验或实验。现在，我们可以重复这个实验（10次抛硬币）任意多次，比如8次。每次，我们记录正面次数。让我们使用`NumPy`库看看这是如何工作的：
- en: 'Import the `NumPy` library:'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`NumPy`库：
- en: '[PRE157]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Let''s generate random numbers from a binomial distribution. This experiment
    can be simulated using the following code:'
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从二项分布生成随机数。这个实验可以通过以下代码来模拟：
- en: '[PRE158]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The sample output is as follows (your specific output will be different due
    to randomness):'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（由于随机性，您的具体输出将不同）：
- en: '[PRE159]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Plot the result using a bar chart:'
  id: totrans-695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用条形图绘制结果：
- en: '[PRE160]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'The sample output is as follows:'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.24: A screenshot of a graph showing the binomial distribution and
    the bar plot'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.24：显示二项分布和条形图的图形截图'
- en: '](img/B15780_03_24.jpg)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15780_03_24.jpg)'
- en: 'Figure 3.24: A screenshot of a graph showing the binomial distribution and
    the bar plot'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24：显示二项分布和条形图的图形截图
- en: Note
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The results of the aforementioned plot will vary for you due to the randomness
    involved.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 由于涉及随机性，上述图表的结果可能会有所不同。
- en: To access the source code for this specific section, please refer to [https://packt.live/3hB2aTQ](https://packt.live/3hB2aTQ).
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/3hB2aTQ](https://packt.live/3hB2aTQ)。
- en: You can also run this example online at [https://packt.live/2N6jbaq](https://packt.live/2N6jbaq).
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/2N6jbaq](https://packt.live/2N6jbaq)上在线运行此示例。
- en: As we can observe from the preceding plot, the bar chart represents the number
    of successes or number of heads that show up in each draw. We discussed normal
    distribution previously in this chapter and mentioned that it is the most important
    probability distribution because many pieces of natural, social, and biological
    data follow this pattern closely when the number of samples is large. `NumPy`
    provides an easy way for us to generate random numbers that correspond to this
    distribution.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从前面的图表中可以观察到的，条形图表示每次抽取中出现的成功次数或正面次数。我们之前在本章中讨论了正态分布，并提到它是最重要的概率分布，因为当样本数量大时，许多自然、社会和生物数据都紧密遵循这种模式。`NumPy`为我们提供了一个简单的方法来生成与这种分布相对应的随机数。
- en: 'Exercise 3.20: Generating Random Numbers from a Normal Distribution and Histograms'
  id: totrans-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.20：从正态分布生成随机数和直方图
- en: 'This exercise will demonstrate how to generate a few random numbers using normal
    distribution and histograms. We haven''t looked at creating plots with matplotlib
    and creating a binormal distribution. Creating charts can be a useful skill sometimes
    with data wrangling, especially when working with machine learning. To do so,
    let''s go through the following steps:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习将演示如何使用正态分布和直方图生成一些随机数。我们尚未查看使用matplotlib创建图表和创建双正态分布。在数据整理中，创建图表有时可以是一项有用的技能，尤其是在处理机器学习时。为此，让我们按照以下步骤进行：
- en: 'Import the `NumPy` library:'
  id: totrans-708
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`NumPy`库：
- en: '[PRE161]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Draw a single sample from a normal distribution by using the following command:'
  id: totrans-710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从一个正态分布中抽取单个样本：
- en: '[PRE162]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'The sample output is as follows (note that your specific output could be different
    due to randomness):'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下（请注意，由于随机性，您的具体输出可能不同）：
- en: '[PRE163]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: We know that normal distribution is characterized by two parameters – mean (µ)
    and standard deviation (σ). In fact, the default values for this particular function
    are µ = 0.0 and σ = 1.0.
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们知道正态分布由两个参数定义——均值（µ）和标准差（σ）。实际上，此特定函数的默认值是µ = 0.0和σ = 1.0。
- en: Suppose we know that the heights of the teenage (12-16 years old) students in
    a particular school are distributed normally with a mean height of 155 cm and
    a standard deviation of 10 cm.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设我们知道某所学校12-16岁青少年学生的身高呈正态分布，平均身高为155厘米，标准差为10厘米。
- en: 'Generate a histogram of 100 students by using the following command:'
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令生成100名学生的直方图：
- en: '[PRE164]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The sample output is as follows:'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样本输出如下：
- en: '![Figure 3.25: Histogram of teenage students'' heights'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.25：青少年学生身高的直方图'
- en: '](img/B15780_03_25.jpg)'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15780_03_25.jpg](img/B15780_03_25.jpg)'
- en: 'Figure 3.25: Histogram of teenage students'' heights'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25：青少年学生身高的直方图
- en: Note the use of the loc parameter for the mean (`=155`) and the scale parameter
    for standard deviation (`=10`). The `size` parameter is set to 100 for that sample's generation.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用loc参数表示均值（`=155`）和scale参数表示标准差（`=10`）。该样本的生成中`size`参数设置为100。
- en: Note
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2YHIODP](https://packt.live/2YHIODP).
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅[https://packt.live/2YHIODP](https://packt.live/2YHIODP)。
- en: You can also run this example online at [https://packt.live/3hvJrsR](https://packt.live/3hvJrsR).
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在[https://packt.live/3hvJrsR](https://packt.live/3hvJrsR)上在线运行此示例。
- en: 'Exercise 3.21: Calculating Descriptive Statistics from a DataFrame'
  id: totrans-726
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.21：从DataFrame计算描述性统计
- en: 'In this exercise, we will be calculating the basic statistics of a generated
    DataFrame. DataFrames and statistics are commonly used together and will be a
    useful tool to acquire. We will define the age, weight, and height parameters
    and put that data in a DataFrame to calculate various descriptive statistics about
    them by using the `describe` method. Let''s perform the following steps:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将计算生成的DataFrame的基本统计量。DataFrame和统计通常一起使用，并将是一个有用的工具来获取。我们将定义年龄、体重和身高参数，并将这些数据放入DataFrame中，通过使用`describe`方法计算它们的各种描述性统计。让我们执行以下步骤：
- en: Note
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The best part of working with a `pandas` DataFrame is that it has a built-in
    utility function to show all of these descriptive statistics with a single line
    of code.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 与`pandas` DataFrame一起工作的最佳部分是它有一个内置的实用函数，可以单行代码显示所有这些描述性统计。
- en: 'Construct a dictionary with the available series data by using the following command:'
  id: totrans-730
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过可用序列数据构建字典：
- en: '[PRE165]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'The output is as follows:'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.26: Output of the created dictionary'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.26：创建的字典输出'
- en: '](img/B15780_03_26.jpg)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15780_03_26.jpg](img/B15780_03_26.jpg)'
- en: 'Figure 3.26: Output of the created dictionary'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.26：创建的字典输出
- en: 'Find the number of rows and columns of the DataFrame by executing the following
    command:'
  id: totrans-736
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令找到DataFrame的行数和列数：
- en: '[PRE166]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'The output is as follows:'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE167]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Obtain a simple count (any column can be used for this purpose) by executing
    the following command:'
  id: totrans-740
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令获取简单的计数（任何列都可以用于此目的）：
- en: '[PRE168]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'The output is as follows:'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE169]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Calculate the sum total of age by using the following command:'
  id: totrans-744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算年龄的总和：
- en: '[PRE170]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The output is as follows:'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE171]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Calculate the mean age by using the following command:'
  id: totrans-748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算平均年龄：
- en: '[PRE172]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The output is as follows:'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE173]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Calculate the median weight by using the following command:'
  id: totrans-752
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算中位数体重：
- en: '[PRE174]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The output is as follows:'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE175]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Calculate the maximum height by using the following command:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算最大身高：
- en: '[PRE176]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'The output is as follows:'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE177]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Calculate the standard deviation of the weights by using the following command:'
  id: totrans-760
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算体重的标准差：
- en: '[PRE178]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'The output is as follows:'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE179]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Note how we are calling the statistical functions directly from a DataFrame object.
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们是如何直接从 DataFrame 对象调用统计函数的。
- en: 'To calculate percentile, we can call a function from `NumPy` and pass on a
    particular column (a `pandas` series). For example, to calculate the 75th and
    25th percentiles of age distribution and their difference (called the interquartile
    range), use the following code:'
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要计算百分位数，我们可以从 `NumPy` 调用一个函数，并将特定的列（一个 `pandas` 序列）传递给它。例如，要计算年龄分布的 75 分位数和
    25 分位数及其差（称为四分位距），请使用以下代码：
- en: '[PRE180]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'The output is as follows:'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE181]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Use the `describe` command to find a detailed description of the DataFrame:'
  id: totrans-769
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `describe` 命令来查找 DataFrame 的详细描述：
- en: '[PRE182]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'The output is as follows:'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.27: Output of the DataFrame using the describe method'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.27：使用 describe 方法生成的 DataFrame 输出'
- en: '](img/B15780_03_27.jpg)'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_27.jpg](img/B15780_03_27.jpg)'
- en: 'Figure 3.27: Output of the DataFrame using the describe method'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27：使用 describe 方法生成的 DataFrame 输出
- en: We have now seen how to manipulate DataFrames, which are the cornerstones of
    data wrangling.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何操作 DataFrame，它们是数据整理的基础。
- en: Note
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This function only works on columns where numeric data is present. It has no
    impact on non-numeric columns, for example, people in this DataFrame.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数仅适用于存在数值数据的列。它对非数值列没有影响，例如，此 DataFrame 中的人员。
- en: To access the source code for this specific section, please refer to [https://packt.live/30S3agm](https://packt.live/30S3agm).
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 [https://packt.live/30S3agm](https://packt.live/30S3agm)。
- en: You can also run this example online at [https://packt.live/2YHBFDF](https://packt.live/2YHBFDF).
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 [https://packt.live/2YHBFDF](https://packt.live/2YHBFDF) 上运行此示例。
- en: 'Exercise 3.22: Built-in Plotting Utilities'
  id: totrans-780
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.22：内置绘图工具
- en: 'In this exercise, we will be going through the basic built-in plotting utilities
    in the `matplotlib` library and creating useful plots using numeric data from
    a DataFrame. We will use the `people` DataFrame that we referenced in *Exercise
    3.21,* *Calculating Descriptive Statistics from a DataFrame* and generate plots
    to visually represent the data. To do so, let''s go through the following steps:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将学习 `matplotlib` 库中的基本内置绘图工具，并使用 DataFrame 中的数值数据创建有用的图表。我们将使用在 *练习
    3.21*，*从 DataFrame 计算描述性统计* 中引用的 `people` DataFrame，并生成图表来直观地表示数据。为此，让我们按照以下步骤进行：
- en: 'Import the necessary libraries:'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的库：
- en: '[PRE183]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Create the `people` DataFrame:'
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `people` DataFrame：
- en: '[PRE184]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'Find the histogram of the weights by using the `hist` function:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用 `hist` 函数来查找权重的直方图：
- en: '[PRE185]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'The output is as follows:'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.28: Histogram of the weights'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.28：体重的直方图'
- en: '](img/B15780_03_28.jpg)'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_28.jpg](img/B15780_03_28.jpg)'
- en: 'Figure 3.28: Histogram of the weights'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.28：体重的直方图
- en: From the preceding histogram, we can determine that there are more people that
    weigh `65` kg than in any other group. If this wasn't generated from random numbers,
    then this might be a useful observation.
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从前面的直方图中，我们可以确定比其他任何组都有更多的人体重为 65 公斤。如果这不是由随机数生成的，那么这可能会是一个有用的观察。
- en: 'Create a simple scatter plot directly from the DataFrame to plot the relationship
    between `weight` and `height` by using the following command:'
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令直接从 DataFrame 创建简单的散点图，以绘制 `weight` 和 `height` 之间的关系：
- en: '[PRE186]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'The output is as follows:'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.29: Weight versus Height scatter plot'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.29：体重与身高的散点图'
- en: '](img/B15780_03_29.jpg)'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15780_03_29.jpg](img/B15780_03_29.jpg)'
- en: 'Figure 3.29: Weight versus Height scatter plot'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29：体重与身高的散点图
- en: From the preceding plot, we can infer that people in the range of 160-180cms
    have a weight in the range of 60-80kgs. Charts can be a powerful tool when trying
    to understand the nature of data. It is not uncommon to plot data in the form
    of various charts before and after several steps of data wrangling.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中，我们可以推断出身高在 160-180 厘米范围内的人的体重在 60-80 公斤范围内。在数据整理的几个步骤之前和之后以各种图表形式绘制数据可以是一个强大的工具。在数据整理的几个步骤之前和之后以各种图表形式绘制数据并不罕见。
- en: Note
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can try regular `matplotlib` methods around this function call to make your
    plot pretty.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试在这个函数调用周围使用常规的 `matplotlib` 方法来使你的图表更美观。
- en: With all this knowledge, let's try our hand at an activity.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了所有这些知识之后，让我们尝试一个活动。
- en: 'Activity 3.01: Generating Statistics from a CSV File'
  id: totrans-803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动三.01：从 CSV 文件生成统计数据
- en: Suppose you are working with the Boston Housing price dataset. This dataset
    is famous in the machine learning community. Many regression problems can be formulated,
    and machine learning algorithms can be run on this dataset. You will perform a
    basic data wrangling activity (including plotting some trends) on this dataset
    (`.csv` file) by reading it as a `pandas` DataFrame. We will perform a few statistical
    operations on this DataFrame.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在处理波士顿住房价格数据集。这个数据集在机器学习社区中非常著名。可以针对这个数据集制定许多回归问题，并在此数据集上运行机器学习算法。您将通过将数据作为
    `pandas` DataFrame 读取来执行基本的数据整理活动（包括绘制一些趋势），并对该 DataFrame 执行一些统计操作。
- en: Note
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Boston Housing dataset can be found here: [https://packt.live/2ZPdvc2](https://packt.live/2ZPdvc2).
    The `pandas` function for reading a CSV file is `read_csv`.'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 波士顿住房数据集可以在以下链接找到：[https://packt.live/2ZPdvc2](https://packt.live/2ZPdvc2)。读取
    CSV 文件的 `pandas` 函数是 `read_csv`。
- en: 'These steps will help you complete this activity:'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助您完成此活动：
- en: Load the necessary libraries.
  id: totrans-808
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载必要的库。
- en: Read in the Boston Housing dataset (given as a `.csv` file) from the local directory.
  id: totrans-809
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地目录读取波士顿住房数据集（以 `.csv` 文件给出）。
- en: Check the first `10` records. Find the total number of records.
  id: totrans-810
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前 `10` 条记录。找出记录总数。
- en: 'Create a smaller DataFrame with columns that do not include `CHAS`, `NOX`,
    `B`, and `LSTAT`:'
  id: totrans-811
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个较小的 DataFrame，其中不包含 `CHAS`、`NOX`、`B` 和 `LSTAT` 列：
- en: '`Chas`: Charlse River Dummy variable'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Chas`：查尔斯河虚拟变量'
- en: '`Nox`: Nitric Oxide concentration'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Nox`：一氧化氮浓度'
- en: '`B`: Proportion of the population that is African American'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`B`：非洲裔美国人口比例'
- en: '`LSTAT`: Percentage of lower-income population'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LSTAT`：低收入人口百分比'
- en: Check the last seven records of the new DataFrame you just created.
  id: totrans-816
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您刚刚创建的新 DataFrame 的最后七条记录。
- en: Plot the histograms of all the variables (columns) in the new DataFrame.
  id: totrans-817
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制新 DataFrame 中所有变量（列）的直方图。
- en: Plot them all at once using a for loop. Try to add a unique title to the plot.
  id: totrans-818
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 for 循环一次性绘制所有这些图表。尝试为图表添加一个独特的标题。
- en: Create a scatter plot of crime rate versus price.
  id: totrans-819
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制犯罪率与价格之间的散点图。
- en: Plot `log10(crime)` versus `price`.
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制 `log10(crime)` 与 `price` 的关系图。
- en: Calculate some useful statistics, such as mean rooms per dwelling, median age,
    mean distances to five Boston employment centers, and the percentage of houses
    with a low price (`< $20,000`).
  id: totrans-821
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算一些有用的统计数据，例如每套住宅的平均房间数、中位数年龄、平均距离五个波士顿就业中心以及低价房屋（`< $20,000`）的百分比。
- en: '`$20,000`, create a `pandas` series with the `PRICE` column and directly compare
    it with `20`. You can do this because `pandas` series is basically a `NumPy` array
    and you have seen how to filter NumPy array in the exercises in this chapter.'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `$20,000`，创建一个包含 `PRICE` 列的 `pandas` 系列，并将其直接与 `20` 进行比较。您可以这样做，因为 `pandas`
    系列基本上是一个 `NumPy` 数组，您已经在本章的练习中看到了如何过滤 `NumPy` 数组。
- en: 'The output should be as follows:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: 'Mean rooms per dwelling: `6.284634387351788`'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 每套住宅的平均房间数：`6.284634387351788`
- en: 'Median age: `77.5`'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数年龄：`77.5`
- en: 'Mean distances to five Boston employment centers: `3.795042687747034`'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 到五个波士顿就业中心的平均距离：`3.795042687747034`
- en: 'Percentage of houses with a low price (<$20,000): `41.50197628458498`'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 低价房屋（`< $20,000`）的房屋百分比：`41.50197628458498`
- en: Note
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15780_Solution_Final_RK.xhtml#_idTextAnchor312).
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15780_Solution_Final_RK.xhtml#_idTextAnchor312)找到。
- en: Summary
  id: totrans-830
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with the basics of `NumPy` arrays, including how
    to create them and their essential properties. We discussed and showed how a `NumPy`
    array is optimized for vectorized element-wise operations and differs from a regular
    Python list. Then, we moved on to practicing various operations on `NumPy` arrays
    such as indexing, slicing, filtering, and reshaping. We also covered special one-dimensional
    and two-dimensional arrays, such as zeros, ones, identity matrices, and random arrays.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了 `NumPy` 数组的基础知识，包括如何创建它们及其基本属性。我们讨论并展示了 `NumPy` 数组是如何针对向量化元素级操作进行优化的，以及它与常规
    Python 列的不同之处。然后，我们继续练习在 `NumPy` 数组上执行各种操作，如索引、切片、过滤和重塑。我们还涵盖了特殊的一维和二维数组，例如零数组、单位数组、身份矩阵和随机数组。
- en: In the second major topic of this chapter, we started with `pandas` series objects
    and quickly moved on to a critically important object – `pandas` DataFrames. They
    are analogous to Excel or Matlab or a database tab, but with many useful properties
    for data wrangling. We demonstrated some basic operations on DataFrames, such
    as indexing, sub-setting, row and column addition, and deletion.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二大主题中，我们首先介绍了 `pandas` 系列对象，并迅速过渡到一个至关重要的对象——`pandas` 数据框。它们类似于Excel或Matlab或数据库表，但具有许多用于数据整理的有用属性。我们演示了数据框的一些基本操作，例如索引、子集、行和列的添加和删除。
- en: Next, we covered the basics of plotting with `matplotlib`, the most widely used
    and popular Python library for visualization. Along with plotting exercises, we
    touched upon refresher concepts such as descriptive statistics (such as central
    tendency and measure of spread) and probability distributions (such as uniform,
    binomial, and normal).
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了使用 `matplotlib` 的绘图基础，这是最广泛使用且最受欢迎的Python可视化库。除了绘图练习，我们还回顾了描述性统计（如集中趋势和离散程度度量）和概率分布（如均匀分布、二项分布和正态分布）等概念。
- en: In the next chapter, we will cover more advanced operations that can be used
    on `pandas` DataFrames that will come in very handy in your journey toward becoming
    an expert data wrangler.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍更多高级操作，这些操作可用于 `pandas` 数据框，这对于你成为数据整理专家的旅程将非常有用。
