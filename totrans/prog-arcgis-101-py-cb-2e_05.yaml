- en: Chapter 5. Automating Map Production and Printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list of layout elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning a unique name to layout elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the layout elements returned by ListLayoutElements()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating layout element properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of available printers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Printing maps with PrintMap()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a map to a PDF file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a map to an image file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a map book with PDFDocumentCreate() and PDFDocumentOpen()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module, released with ArcGIS 10, provides a number of capabilities
    related to the automation of map production. `arcpy.mapping` can be used to automate
    map production, build map books, export to image or PDF files, and create and
    manage PDF files. In this chapter, you'll learn how to use the `arcpy.mapping`
    module to automate various geoprocessing tasks related to map production and printing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list of layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, the first step in a geoprocessing script that automates the production
    of maps is to generate a list of the available layout elements. For example, you
    might need to update the title of your map before printing or creating a PDF file.
    In this case, the title would likely be stored in a `text` element. You can generate
    a list of `text` elements in your map layout view and then change the title in
    it. The first step is to generate a list of `text` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ArcMap, two views are available, namely, data view and layout view. **Data
    view** is used to view geographic and tabular data, analyze data, symbolize layers,
    and manage data without regard for any particular map page size or layout. **Layout
    view** shows the map as printed on a page, and is used to create production-quality
    maps through the addition of map elements. These elements include map frames,
    layers, legends, titles, north arrows, scale bars, and title blocks. Each object
    in the layout is represented in `arcpy.mapping` as a layout element class. Examples
    of many of these layout element classes are displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready...](img/4445_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each element can be assigned a unique name that can then be used to access the
    element programmatically. This unique name is defined in ArcMap. The `arcpy.mapping`
    module provides a `ListLayoutElements()` function that returns a list of all these
    elements. In this recipe, you will learn to use the `ListLayoutElements()` function
    to generate a list of map layout elements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to generate a list of layout elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a list of layout elements and print them to the screen if the name
    property is not empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ListLayoutElements()` returns a list of layout elements in the form of various
    layout classes. Each element can be one of the following object instances: `GraphicElement`,
    `LegendElement`, `PictureElement`, `TextElement`, or `MapSurroundElement`. Each
    element can have a unique name. You don''t have to assign a name to each element,
    but it is helpful to do so if you plan to access these elements programmatically
    in your scripts. In this script, we first made sure that the element had a name
    assigned to it before printing the name. This was done because ArcMap does not
    require that an element be assigned a name.'
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a unique name to layout elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's a good practice to assign a unique name to all your layout elements using
    ArcMap. This is important in the event that your geoprocessing scripts need to
    access a particular element to make changes. For example, you might need to update
    the icon that displays your corporate logo. Rather than making this change manually
    in all your map document files, you could write a geoprocessing script that updates
    all your map document files programmatically with the new logo. However, in order
    for this to be possible, a unique name will need to be assigned to your layout
    elements. This gives you the ability to access the elements of your layout individually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned in the previous recipe, each layout element will be one of a
    number of element types and each can be assigned a name. This element name can
    then be used when you need to reference a particular element in your Python script.
    You can use ArcMap to assign unique names to each layout element. In this recipe,
    you will use ArcMap to assign names to the elements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to assign unique names to each layout element
    using ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to layout view and you should something similar to the following screenshot:![How
    to do it…](img/4445_05_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Names are assigned differently depending upon the element type. Click on the
    uppermost data frame, which should be **Crime**, to select it. The selection handles
    should appear as follows:![How to do it…](img/4445_05_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the upper data frame and select **Properties** to display the
    **Data Frame Properties** window, as shown in the following screenshot. The **Name**
    property defines the unique name for the element. In this case, the element name
    is `Crime`:![How to do it…](img/4445_05_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Data Frame Properties** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **2009 Crime Legend** in the layout view and open the **Properties**
    window by right-clicking on the legend and selecting **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting the element name for the legend is different from setting the element
    name for a data frame. Click on the **Size and Position** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Element Name** textbox is used in this case. Change the current value
    to `2009 Crime Legend`, as shown in the following:![How to do it…](img/4445_05_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also define unique names for text elements. Select the title element
    (`Crime and Its Impact on School Test Performance`), right-click on the element,
    and select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Size and Position** tab and define a unique name for this element,
    as shown in the following screenshot:![How to do it…](img/4445_05_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each element in the layout view can be assigned a name, which can then be used
    in your geoprocessing script to retrieve the specific element. You should strive
    to define unique names for each element. It isn't required that you define a unique
    name for each element, nor is it required that you even define a name at all.
    However, it is a best practice to give each element a name and ensure that each
    element name is unique if you intend to access these elements from your Python
    scripts. In terms of naming practices for your elements, you should strive to
    include only letters and underscores in the name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use element names in conjunction with the `ListLayoutElements()` function
    to restrict the elements that are returned by the function through the use of
    a wildcard parameter. In the next recipe, you'll learn how to restrict the list
    of layout elements returned through the use of wildcards and element type.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the layout elements returned by ListLayoutElements()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Layouts can contain a large number of elements, many of which you won't need
    for a particular geoprocessing script. The `ListLayoutElements()` function can
    restrict the layout elements returned by passing in a parameter that defines the
    type of element that should be returned along with an optional wildcard, which
    finds elements using a portion of the name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different types of layout elements including graphics, legends,
    pictures, text, and data frames. When you return a list of layout elements, you
    can restrict (filter) the types of elements that are returned. In this recipe,
    you will write a script that filters the layout elements returned by element type
    and wildcard.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to restrict the list of layers returned by the
    `ListLayoutElements()` function through the use of optional parameters, which
    define the type of element that should be returned along with a wildcard that
    can also restrict the elements returned.
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `ListLayoutElements()` function with a restriction of only legend elements
    as well as a wildcard that returns elements with a name containing the text `Crime`
    anywhere in the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script. In this case, only a single layout element will be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ListLayoutElements() is a versatile function, which in its most basic form is
    used to return a list of all the layout elements on the page layout of a map document.
    However, there are two optional parameters that you can supply to filter this
    list. The first type of filter is an element type filter in which you specify
    that you only want to return one of the layout element types. You can also apply
    a wildcard to filter the returned list. These two types of filters can be used
    in combination. For example, in this recipe we are specifying that we only want
    to return LEGEND_ELEMENT objects with the text "Crime" anywhere in the element
    name. This results in a highly filtered list that only contains a single layout
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ListLayoutElements()` can be filtered by one of the following element types:
    `DATAFRAME_ELEMENT`, `GRAPHIC_ELEMENT`, `LEGEND_ELEMENT`, `MAPSURROUND_ELEMENT`,
    `PICTURE_ELEMENT`, `TEXT_ELEMENT`.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating layout element properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each layout element has a set of properties that you can update programmatically.
    For example, `LegendElement` includes properties that allow you to change the
    position of the legend on the page, update the legend title, and access the legend
    items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different types of layout elements including graphics, legends,
    text, maps, and pictures. Each of these elements is represented by a class in
    the `arcpy.mapping` package. These classes provide various properties that you
    can use to programmatically alter the element.
  prefs: []
  type: TYPE_NORMAL
- en: The `DataFrame` class provides access to data frame properties in the map document
    file. This object can work with both map units and page layout units, depending
    upon the property being used. Page layout properties, such as positioning and
    sizing, can be applied to the properties including `elementPositionX`, `elementPositionY`,
    `elementWidth`, and `elementHeight`.
  prefs: []
  type: TYPE_NORMAL
- en: The `GraphicElement` object is a generic object for various graphics that can
    be added to the page layout including tables, graphs, neatlines, markers, lines,
    and area shapes. You'll want to make sure that you set the `name` property for
    each graphic element (and any other element for that matter), if you intend to
    access it through a Python script.
  prefs: []
  type: TYPE_NORMAL
- en: '`LegendElement` provides operations for positioning of the legend on the page
    layout, modification of the legend title, and also provides access to the legend
    items and the parent data frame. `LegendElement` can be associated with only a
    single data frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`MapSurroundElement` can refer to north arrows, scale bars, and scale text,
    and like `LegendElement` is associated with a single data frame. Properties on
    this object enable repositioning on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: '`PictureElement` represents a raster or image on the page layout. The most
    useful property on this object allows for getting and setting the data sources,
    which can be extremely helpful when you need to change a picture, such as a logo,
    in multiple map documents. For example, you could write a script that iterates
    through all your map document files and replaces the current logo with a new logo.
    You can also reposition or resize the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`TextElement` represents text on a page layout including inserted text, callouts,
    rectangle text, and titles, but does not include legend titles or text that are
    part of a table or chart. Properties enable modifying the text string, which can
    be extremely useful in situations where you need to make the same text string
    change in multiple places in the page layout or over multiple map documents, and
    of course repositioning of the object is also available.'
  prefs: []
  type: TYPE_NORMAL
- en: Each element in the page layout is returned as an instance of one of the element
    objects. In this recipe, we're going to use the `title` property on the `Legend`
    object to programmatically change the title of the `Crime` legend and obtain a
    list of the layers that are part of the legend.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update the properties of a layout element:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `ListLayoutElements()` method with a wildcard and restriction of only
    legend elements to return only the `Crime` legend and store it in a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `title` property to update the title of the legend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of the layers that are a part of the legend and print the names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script. You should see the following layers printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The change is displayed in the following screenshot:![How to do it…](img/4445_05_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the layout elements has a set of properties and methods. In this particular
    case, we've used the `title` property on the `Legend` object. Other properties
    of this object allow you to set the width and height, positioning, and others.
    Methods on the `Legend` object give you the ability to adjust the column count,
    list the legend items, and remove and update items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of available printers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yet another list function provided by `arcpy` is `ListPrinterNames()`, which
    generates a list of the available printers. As is the case with the other list
    functions that we've examined, `ListPrinterNames()` is often called as a preliminary
    step in a multi-step script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before printing maps with the `PrintMap()` function, it is a common practice
    to call the `ListPrinterNames()` function, which returns a list of the available
    printers for the local computer. A particular printer can then be found by iterating
    through the list of printers and using it as an input to the `PrintMap()` function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `ListPrinterNames()` function to
    return a list of the available printers for your script:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListPrinterNames()` function and print each printer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script. The output will vary depending upon the list of the available
    printers for your computer. However, it should print something similar to the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListPrinterNames()` function returns a Python list containing all the printers
    available to use in your script. You can then use the `PrintMap()` function, which
    we'll examine in the next recipe, to send a print job to a particular printer
    that is available to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Printing maps with PrintMap()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending your map layout to a printer is easy with the `PrintMap()` function.
    By default, the print job will be sent to the default printer saved with the map
    document, but you can also define a specific printer where the job should be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`arcpy.mapping` provides a `PrintMap()` function for printing page layouts
    or data frames from ArcMap. Before calling `PrintMap()`, it is a common practice
    to call the `ListPrinterNames()` function. A particular printer can then be found
    by iterating the list of printers and used as an input to the `PrintMap()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '`PrintMap()` can print either a specific data frame or the page layout of a
    map document. By default, this function will use the printer saved with the map
    document or, if not present in the map document, the default system printer. As
    I mentioned, you can also use `ListPrinterNames()` to get a list of the available
    printers, and select one of these printers as an input to `PrintMap()`. In this
    recipe, you will learn how to use the `PrintMap()` function to print the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the `PrintMap()` function to print the
    layout view in ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Look for the `Test_Performance` data frame and print if it is found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PrintMap()` function accepts one required parameter and a handful of optional
    parameters. The required parameter is a reference to the map document. The first
    optional parameter is the printer name. In this case, we haven't specified a particular
    printer to use. Because we haven't provided a specific printer, it will use the
    printer saved with the map document or the default system printer if a printer
    is not part of the map document. The second optional parameter is the data frame
    that we'd like to print, which in this instance is `Test_Performance`. Other optional
    parameters, not supplied in this case, are an output print file and the image
    quality.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a map to a PDF file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than sending your map or layout view to a printer, you may want to simply
    create PDF files that can be shared. Arcpy mapping provides an `ExportToPDF()`
    function, which you can use to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PDF is a very popular interchange format designed to be viewable and printable
    from many different platforms. The arcpy mapping `ExportToPDF()` function can
    be used to export data frames or the page layout to PDF format. By default, the
    `ExportToPDF()` function exports the page layout, but you can pass in an optional
    parameter that references a particular data frame, which can be printed instead
    of the page layout. In this recipe, you will learn how to export the page layout
    as well as a specific data frame to a PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to export a map to a PDF fil:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the page layout with the `ExportToPDF()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Map_PageLayout.pdf` file that was created, and you should see something
    similar to the following screenshot:![How to do it…](img/4445_05_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll print a specific data frame from our map document file. Alter your
    script, so that it appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script and examine the output PDF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ExportToPDF()` function requires two parameters, including a reference
    to the map document and the file that serves as the output PDF file. The first
    script that we developed, passed in a reference to the map document along with
    an output PDF file. Since we didn't pass in an optional parameter specifying the
    data frame, the `ExportToPDF()` function will export the page layout. There are
    also many optional parameters that can be passed into this method, including a
    specific data frame and a number of parameters, mostly related to the quality
    of the output content and file. Our second script passed in a specific data frame
    that should be exported. You can reference the ArcGIS help pages for more information
    on each of the optional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a map to an image file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also export the contents of the map or layout view to an image file
    using one of the many functions provided by `arcpy.mapping`. Each image export
    function will differ in name depending upon the type of image file you'd like
    to create. The parameters passed into the function will also vary slightly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing the ability to export data frames and the page layout
    to a PDF format, you can also use one of the many export functions provided by
    `arcpy.mapping` to export an image file. Available formats include AI, BMP, EMF,
    EPS, GIF, JPEG, SVG, and TIFF. The parameters provided for each function will
    vary depending upon the type of image. Some examples of these function names include
    `ExportToJPEG()`, `ExportToGIF()`, and `ExportToBMP()`. In this recipe, you'll
    learn how to export your maps to images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to export your data or layout view to an image
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch5\Crime_Ch5.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch5.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the `Crime` data frame as a JPEG image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script and examine the output file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll use an optional parameter that outputs a `world` file along with
    the image. Alter your script, so that it appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script. A new file called `DataFrameCrime.jpg` will be created. Open
    this file in a text editor, and you should see the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that the `ExportToJPEG()` function looks virtually the same as `ExportToPDF()`.
    Keep in mind though that the optional parameters will be different for all the
    export functions. Each `ExportTo<Type>` function will vary depending upon the
    parameters that can be used in the creation of the image file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a map book with PDFDocumentCreate() and PDFDocumentOpen()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One common scenario for many GIS professionals is the need to create a map book
    that can then be shared with others. A map book is simply a collection of maps
    for a particular area and usually contains an index map as well. Map books are
    often created with PDF files, as they are a common interchange format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to exporting your maps to PDF, you can also manipulate existing
    PDF documents or create new PDF documents. You can merge pages, set document open
    behavior, add file attachments, and create or change document security settings.
    The `PDFDocumentOpen()` function is used to open an existing PDF file for manipulation.
    `PDFDocumentCreate()` creates a new PDF document. These functions are often used
    in the creation of map books, which is what we'll do in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` and `os` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the path and filename for the map book. Remove the file if it already exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the PDF document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append existing PDF pages to the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit changes to the map book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examine the new map book at `c:\ArcpyBook\Ch5\CrimeMapBook.pdf`. The book should
    now contain two pages consisting of the PDF files that we created in an earlier
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PDFDocumentCreate()` function is used to create a new PDF document by providing
    a path and filename for the document. The PDF is not actually created on disk
    until you insert or append pages and then call `PDFDocument.saveAndClose()`. The
    `appendPages()` and `insertPages()` functions are used to insert and append pages.
  prefs: []
  type: TYPE_NORMAL
- en: '`PDFDocumentOpen()` accepts a parameter that specifies the path to a PDF file
    and returns an instance of the `PDFDocument` class. Once open, you can make modifications
    to PDF file properties, add or insert files, and attach documents. Make sure you
    call `PDFDocument.saveAndClose()` after all operations, to save the changes.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number of properties can be set on a PDF document through the `PDFDocument`
    object, including getting the page count, attaching files, updating title, author,
    subject, keywords, open behavior, and the layout. You can also update document
    security by calling `PDFDocument.updateDocSecurity()` to set a password, encryption,
    and security restrictions.
  prefs: []
  type: TYPE_NORMAL
