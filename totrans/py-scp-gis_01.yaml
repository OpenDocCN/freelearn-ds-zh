- en: Package Installation and Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包安装和管理
- en: This book focuses on important code libraries for geospatial data management
    and analysis for Python 3\. The reason for this is simple—as Python 2 is near
    the end of its life cycle, it is quickly being replaced by Python 3\. This new
    Python version comes with key differences in organization and syntax, meaning
    that developers need to adjust their legacy code and apply new syntax in their
    code. Fields such as machine learning, data science, and big data have changed
    the way geospatial data is managed, analyzed, and presented today. In all these
    areas, Python 3 has quickly become the new standard, which is another reason for
    the geospatial community to start using Python 3.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专注于Python 3地理空间数据管理和分析的重要代码库。原因很简单——随着Python 2接近生命周期的尾声，它正迅速被Python 3所取代。这个新的Python版本在组织和语法上存在关键差异，这意味着开发者需要调整他们的遗留代码并在代码中应用新的语法。机器学习、数据科学和大数据等领域已经改变了今天地理空间数据的管理、分析和展示方式。在这些所有领域，Python
    3迅速成为新的标准，这也是地理空间社区开始使用Python 3的另一个原因。
- en: The geospatial community has been relying on Python 2 for a long time, as many
    dependencies weren't available for Python 3 or not working correctly. But now
    that Python 3 is mature and stable, the geospatial community has taken advantage
    of its capabilities, resulting in many new libraries and tools. This book aims
    to help developers understand open source and commercial modules for geospatial
    programs written in Python 3, offering a selection of major geospatial libraries
    and tools for doing geospatial data management and data analysis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 地理空间社区长期以来一直依赖Python 2，因为许多依赖项在Python 3中不可用或无法正确工作。但现在Python 3已经成熟稳定，地理空间社区已经利用了其功能，从而产生了许多新的库和工具。本书旨在帮助开发者理解用Python
    3编写的地理空间程序的开放源代码和商业模块，提供了一系列主要的地理空间库和工具，用于地理空间数据管理和数据分析。
- en: 'This chapter will explain how to install and manage the code libraries that
    will be used in this book. It will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何安装和管理本书中使用的代码库。它将涵盖以下主题：
- en: Installing Anaconda
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Anaconda
- en: Managing Python packages using Anaconda Navigator, Anaconda Cloud, `conda`,
    and `pip`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Anaconda Navigator、Anaconda Cloud、`conda`和`pip`管理Python包
- en: Managing virtual environments using Anaconda, `conda`, and `virtualenv`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Anaconda、`conda`和`virtualenv`管理虚拟环境
- en: Running a Jupyter Notebook
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Jupyter Notebook
- en: Introducing Anaconda
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Anaconda
- en: Anaconda is a freemium open source distribution of the Python programming language
    for large-scale data processing, predictive analytics, and scientific computing,
    that aims to simplify package management and deployment. It is also the world's
    most popular Python data science platform, with over 4.5 million users and 1,000
    data science packages. It is not to be confused with `conda`, a package manager
    that is installed with Anaconda.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda是Python编程语言的免费增值开源发行版，用于大规模数据处理、预测分析和科学计算，旨在简化包管理和部署。它也是世界上最受欢迎的Python数据科学平台，拥有超过450万用户和1000个数据科学包。它不应与`conda`混淆，`conda`是一个与Anaconda一起安装的包管理器。
- en: For this book, we recommend installing and using Anaconda as it provides you
    everything you need—Python itself, Python libraries, the tools to manage these
    libraries, a Python environment manager, and the Jupyter Notebook application
    to write, edit, and run your code. You can also choose to use an alternative to
    Anaconda or install Python through [www.python.org/downloads](http://www.python.org/downloads)
    and use any IDE of your choice combined with a package manager such as `pip` (covered
    as we proceed further). We recommend using Python version 3.6.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们建议安装并使用Anaconda，因为它为您提供了一切所需——Python本身、Python库、管理这些库的工具、Python环境管理器以及Jupyter
    Notebook应用程序来编写、编辑和运行您的代码。您也可以选择使用Anaconda的替代品或通过[www.python.org/downloads](http://www.python.org/downloads)安装Python，并使用您选择的任何IDE结合包管理器，如`pip`（在进一步讨论中涵盖）。我们建议使用Python版本3.6。
- en: Installing Python using Anaconda
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Anaconda安装Python
- en: 'A free download of the latest version of Anaconda, available for Windows, macOS,
    and Linux is available at the homepage of Continuum Analytics. At the time of
    writing, the latest version is Anaconda 5.0.1, released in October 2017 and available
    in 32 and 64-bit versions from [https://www.continuum.io/downloads](https://www.continuum.io/downloads).
    This page also offers extensive download instructions for each operating system,
    a 30-minute tutorial that explains how to use Anaconda, a cheat sheet on how to
    get started, and an FAQ section. There''s also a slimmed-down version of Anaconda
    called Miniconda that only installs Python and the `conda` package manager, leaving
    out the 1000+ software packages that come with the standard installation of Anaconda:
    [https://conda.io/miniconda.html](https://conda.io/miniconda.html). If you decide
    to use this, make sure you download the Python 3.6 version.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Continuum Analytics 的主页上提供了适用于 Windows、macOS 和 Linux 的 Anaconda 最新版本的免费下载。在撰写本文时，最新版本是
    Anaconda 5.0.1，于 2017 年 10 月发布，提供 32 位和 64 位版本，可在 [https://www.continuum.io/downloads](https://www.continuum.io/downloads)
    获取。此页面还提供了针对每个操作系统的详细下载说明、一个 30 分钟的教程，解释如何使用 Anaconda、一个入门指南，以及一个常见问题解答部分。还有一个名为
    Miniconda 的 Anaconda 瘦身版，它仅安装 Python 和 `conda` 包管理器，不包括 Anaconda 标准安装中包含的 1000
    多个软件包：[https://conda.io/miniconda.html](https://conda.io/miniconda.html)。如果您决定使用它，请确保下载
    Python 3.6 版本。
- en: Anaconda will install Python 3.6.2 as the default Python version on your machine.
    The Python version that is used in all chapters of this book is Python 3.6, so
    you're good with any version that starts with 3.6 or higher. With Anaconda, you
    get more than 1,000 Python packages, as well as a number of applications, such
    as Jupyter Notebook, and a variety of Python consoles and IDEs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 将将 Python 3.6.2 作为默认的 Python 版本安装到您的机器上。本书所有章节中使用的 Python 版本是 Python
    3.6，所以任何以 3.6 或更高版本开始的版本都适用。使用 Anaconda，您将获得 1000 多个 Python 包，以及一些应用程序，例如 Jupyter
    Notebook，以及各种 Python 控制台和 IDE。
- en: Please note that you are not forced to always use Python version 3.6 after installing
    it—using Anaconda Navigator (a GUI for managing local environments and installing
    packages), you can also choose to use Python 3.5 or 2.7 in a virtual environment.
    This gives you more flexibility in switching between different Python versions
    for various projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您在安装后并不强制始终使用 Python 3.6 版本——使用 Anaconda Navigator（一个用于管理本地环境和安装包的 GUI），您还可以选择在虚拟环境中使用
    Python 3.5 或 2.7。这为您在切换不同项目之间的不同 Python 版本提供了更多灵活性。
- en: To begin the installation, download the 32-or 64-bit Anaconda installer, depending
    on your system capabilities. Open the installation and follow the setup guide
    to install Anaconda on your local system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始安装，根据您的系统能力下载 32 位或 64 位 Anaconda 安装程序。打开安装程序，按照设置指南在您的本地系统上安装 Anaconda。
- en: Running a Jupyter Notebook
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Jupyter 笔记本
- en: Jupyter Notebooks are a novel idea, which has been adopted by many companies
    (including Esri and the new ArcGIS API for Python). Managed by Project Jupyter,
    the open source project (which is based on IPython, an earlier interactive code
    environment), is a fantastic tool for both learning and production environments.
    While the code can also be run as a script, as seen in other chapters, using the
    Jupyter Notebooks will make coding even more fun.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本是 一个新颖的想法，已被许多公司（包括 Esri 和新的 ArcGIS API for Python）采用。由 Jupyter 项目管理，这是一个开源项目（基于
    IPython，一个早期的交互式代码环境），是学习和生产环境中的绝佳工具。虽然代码也可以像其他章节中看到的那样作为脚本运行，但使用 Jupyter 笔记本会让编码变得更加有趣。
- en: The idea of the code Notebooks is to make coding interactive. By combining a
    Python terminal with direct output that results from the code being run, the Notebooks
    (which are saveable) become a tool for sharing and comparing code. Each section
    can be edited later or can be saved as a separate component for demonstration
    purposes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代码笔记本的想法是使编码交互式。通过将 Python 终端与代码运行产生的直接输出相结合，这些可保存的笔记本成为分享和比较代码的工具。每个部分都可以稍后编辑，或保存为用于演示目的的单独组件。
- en: 'Check out the documentation for Jupyter Notebooks here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处查看 Jupyter 笔记本的文档：
- en: '[http://jupyter.org/documentation.](http://jupyter.org/documentation)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter.org 文档](http://jupyter.org/documentation)'
- en: Running a Notebook
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行笔记本
- en: 'To start the local server that powers the Notebooks, activate the virtual environment
    and pass the `jupyter notebook` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动为笔记本提供动力的本地服务器，激活虚拟环境并传递 `jupyter notebook` 命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will start running the server that will power the Notebooks. This local
    server can be accessed on port `8888`, using a browser, by navigating to: `http://localhost:8888`.
    It should automatically open a tab like this one when started:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个服务器，该服务器将为笔记本提供动力。这个本地服务器可以通过端口 `8888` 使用浏览器访问，通过导航到：`http://localhost:8888`。启动时应自动打开一个类似于这样的标签页：
- en: '![](img/eb9799dc-2151-4cd5-b264-a1b3d665af6b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb9799dc-2151-4cd5-b264-a1b3d665af6b.png)'
- en: 'If you log out, use the token provided in the text generated when the `jupyter notebook` command
    is passed to log back in, as in this example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注销了，请使用在将 `jupyter notebook` 命令传递时生成的文本中提供的令牌来重新登录，如下例所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a new Notebook
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的笔记本
- en: 'To create a new Notebook, click on the New button in the upper-right, and select Python
    3 from the Notebook section. It will open the Notebook in a new tab:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的笔记本，请点击右上角的“新建”按钮，并在笔记本部分选择“Python 3”。它将在新标签页中打开笔记本：
- en: '![](img/fe8515d2-4d34-46a6-9c6b-f5ddcab1984c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe8515d2-4d34-46a6-9c6b-f5ddcab1984c.png)'
- en: Adding code
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加代码
- en: In Jupyter Notebooks, code is added in the In sections. The code can be added
    line by line, as the code variables and imported modules will be saved in memory,
    or it can be added in blocks/multiple lines, like a script. The In sections can
    be edited and run over and over, or they can be left alone, and a new section
    can be started. This creates a record of the scripting efforts, along with the
    interactive output.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 笔记本中，代码是在“输入”部分添加的。代码可以逐行添加，因为代码变量和导入的模块将被保存在内存中，或者可以以块/多行的方式添加，就像脚本一样。可以编辑和运行“输入”部分多次，或者可以将其保留不变，然后开始一个新的部分。这会创建脚本努力的记录，以及交互式输出的记录。
- en: 'Here is a GIST explaining lots of useful keyboard shortcuts for Jupyter Notebooks:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个 GIST，解释了 Jupyter 笔记本中许多有用的快捷键：
- en: '[https://gist.github.com/kidpixo/f4318f8c8143adee5b40 ](https://gist.github.com/kidpixo/f4318f8c8143adee5b40)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://gist.github.com/kidpixo/f4318f8c8143adee5b40 ](https://gist.github.com/kidpixo/f4318f8c8143adee5b40)'
- en: Managing Python packages
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Python 包
- en: After installing Anaconda, it's time to discuss how to manage different Python
    packages. Anaconda offers several options to do this—Anaconda Navigator, Anaconda
    Cloud, and the `conda` package manager.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Anaconda 后，是时候讨论如何管理不同的 Python 包了。Anaconda 提供了几个选项来完成这项任务——Anaconda Navigator、Anaconda
    Cloud 和 `conda` 包管理器。
- en: Managing packages with Anaconda Navigator
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Anaconda Navigator 管理包
- en: After installing Anaconda, you will notice a working folder with various applications
    inside of it. One of these is Anaconda Navigator, which provides a **Graphical
    User Interface** (**GUI**). You can compare it to Windows File Explorer, that
    is, an environment to manage projects, packages, and environments. The term *environment*
    refers to a collection of packages and a Python install. Notice that this is similar
    to how you would use `virtualenv`, but this time using a GUI instead of a command
    prompt to create one (`virtualenv` is covered in more detail later in this chapter).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Anaconda 后，你将注意到一个包含各种应用程序的工作文件夹。其中之一是 Anaconda Navigator，它提供了一个 **图形用户界面**（**GUI**）。你可以将其与
    Windows 文件资源管理器进行比较，即一个用于管理项目、包和环境的平台。术语 *环境* 指的是一组包和 Python 安装。请注意，这与使用 `virtualenv`
    的方式类似，但这次是使用图形用户界面而不是命令提示符来创建它（`virtualenv` 在本章后面将更详细地介绍）。
- en: After opening Anaconda Navigator, click the Environments tab on the left of
    the screen and Anaconda Navigator will provide an overview of existing environments
    and the packages it contains. There's one pre-defined environment available, a
    so-called root environment that provides you with 150+ pre-installed Python packages.
    New environments can be made by clicking the Create button on the bottom of the
    screen. This will automatically install five default Python packages, including
    `pip`, which means you're free to use that too for package management. What's
    interesting about Anaconda Navigator is that, with every new environment, you
    can choose a preferred Python version and install from a list of 1000+ packages
    that are available locally if you installed the default Anaconda version and not
    Miniconda. This list is available by selecting the option Not Installed from the
    drop-down menu next to the Channels button. You can easily search and select the
    packages of your choice by using the Search Packages field and hitting *Enter.* Mark
    the packages and install them for the environment of your choice. After installation,
    the package will be listed by name in the environment. If you click the green
    box with a checkmark next to the package name, you can choose to mark a package
    for an upgrade, removal, or specific version installation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Anaconda Navigator 后，点击屏幕左侧的环境标签，Anaconda Navigator 将提供现有环境和其中包含的包的概览。有一个预定义的环境可供使用，这是一个所谓的根环境，它为您提供了150多个预安装的
    Python 包。可以通过点击屏幕底部的创建按钮来创建新的环境。这将自动安装五个默认的 Python 包，包括 `pip`，这意味着您也可以自由地使用它进行包管理。Anaconda
    Navigator 的有趣之处在于，对于每个新的环境，您都可以选择一个首选的 Python 版本，如果您安装的是默认的 Anaconda 版本而不是 Miniconda，您可以从1000多个本地可用的包中进行选择。此列表可通过选择通道按钮旁边的下拉菜单中的“未安装”选项来获取。您可以通过使用搜索包字段并按
    *Enter* 键来轻松搜索和选择您选择的包。标记包并为您选择的 环境 安装它们。安装后，包将以名称的形式列在环境中。如果您点击包名称旁边的带勾选标记的绿色框，您可以选择标记一个包进行升级、删除或特定版本安装。
- en: 'After installing the packages, you can start working with an environment by
    opening up a terminal, Jupyter Notebook, or another Anaconda application with
    one mouse click on the arrow button inside of the environment of your choice.
    If you wish to use an IDE instead of one of the options that Anaconda Navigator
    offers you, be sure to redirect your IDE to the right `python.exe` file that is
    used by Anaconda. This file can usually be found at the following path, which
    is the default installation path of Anaconda:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完包后，您可以通过打开终端、Jupyter Notebook 或其他 Anaconda 应用程序来开始使用环境，只需在您选择的环境中的箭头按钮上单击一次鼠标即可。如果您希望使用
    IDE 而不是 Anaconda Navigator 提供的选项之一，请确保将您的 IDE 重定向到 Anaconda 使用的正确 `python.exe`
    文件。此文件通常位于以下路径，这是 Anaconda 的默认安装路径：
- en: '`C:\Users\<UserName>\Anaconda3\python.exe`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\<UserName>\Anaconda3\python.exe`。'
- en: Online searching for packages using Anaconda Cloud
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Anaconda Cloud 在线搜索包
- en: If you are searching for a Python package that is not found in the local list
    of available Python packages, you can use Anaconda Cloud. This application is
    also part of Anaconda3 and you can use the Anaconda Cloud application for sharing
    packages, Notebooks, and environments with others. After clicking on the Anaconda
    Cloud desktop icon, an internet page will open where you can sign up to become
    a registered user. Anaconda Cloud is similar to GitHub, as it lets you create
    a private online repository for your own work. These repositories are called **channels**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找的 Python 包不在本地可用的 Python 包列表中，您可以使用 Anaconda Cloud。此应用程序也是 Anaconda3
    的一部分，您可以使用 Anaconda Cloud 应用程序与他人共享包、Notebooks 和环境。在点击 Anaconda Cloud 桌面图标后，将打开一个网页，您可以在其中注册成为注册用户。Anaconda
    Cloud 与 GitHub 类似，因为它允许您为您的个人工作创建一个私有在线仓库。这些仓库被称为 **channels**。
- en: If you create a user account, you can use Anaconda Cloud from inside Anaconda
    Navigator. After creating a user account for Anaconda Cloud, open Anaconda Navigator
    and use your login details to sign into Anaconda Cloud in the upper-right corner
    of the screen where it says Sign in to Anaconda Cloud. Now, you can upload your
    own packages and files to a private package repository and search for existing
    files or packages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建了一个用户账户，您可以在 Anaconda Navigator 内部使用 Anaconda Cloud。在为 Anaconda Cloud 创建用户账户后，打开
    Anaconda Navigator 并使用您的登录详细信息在屏幕右上角（显示为“登录到 Anaconda Cloud”）登录 Anaconda Cloud。现在，您可以将自己的包和文件上传到私有包仓库，并搜索现有的文件或包。
- en: Managing Python packages with conda
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 conda 管理Python包
- en: Apart from using Anaconda Navigator and Cloud for package management, you can
    use `conda`, a binary package manager, as a command-line tool to manage your package
    installations. `conda` quickly installs, runs, and updates packages and their
    dependencies. `conda` easily creates, saves, loads, and switches between environments
    on your local computer. The best ways to install `conda` are through installing
    either Anaconda or Miniconda. A third option is a separate installation through
    **Python Package Index** (**PyPI**), but may not be up-to-date so this option
    is not recommended.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Anaconda Navigator和Cloud进行包管理外，您还可以使用`conda`，一个二进制包管理器，作为命令行工具来管理您的软件包安装。`conda`可以快速安装、运行和更新软件包及其依赖项。`conda`可以轻松创建、保存、加载并在您的本地计算机上切换环境。安装`conda`的最佳方式是通过安装Anaconda或Miniconda。第三种选择是通过**Python
    Package Index**（**PyPI**）进行单独安装，但可能不是最新的，因此不建议选择此选项。
- en: Installing packages with `conda` is straightforward, as it resembles the syntax
    of `pip`. However, it is good to know that `conda` cannot install packages directly
    from a Git server. This means that the latest version of many packages under development
    cannot be downloaded with `conda`. Also, `conda` doesn't cover all the packages
    available on PyPI as `pip` does itself, which is why you always have access to
    `pip` when creating a new environment with Anaconda Navigator (more on `pip` as
    we proceed further).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`conda`安装软件包非常简单，因为它与`pip`的语法相似。然而，了解`conda`不能直接从Git服务器安装软件包是有好处的。这意味着许多正在开发的软件包的最新版本无法使用`conda`下载。此外，`conda`并不像`pip`那样覆盖PyPI上所有可用的软件包，这就是为什么在创建Anaconda
    Navigator的新环境时您始终可以访问`pip`（关于`pip`的更多内容将在后续章节中介绍）。
- en: 'You can verify if `conda` is installed by typing the following command in a
    terminal:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在终端中输入以下命令来验证是否已安装`conda`：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If installed, `conda` will display the number of the `version` that you have
    installed. Installing the package of your choice can be done with the following
    command in a terminal:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已安装，`conda`将显示您已安装的`版本`号。您可以使用以下终端命令安装您选择的软件包：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Updating an already installed package to its latest available version can be
    done as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更新已安装的软件包到最新可用版本可以按照以下方式操作：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also install a particular version of a package by pointing out the
    version number:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过指定版本号来安装特定版本的软件包：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can update all the available packages simply by using the `--all` argument:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`--all`参数简单地更新所有可用的软件包：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can uninstall packages too:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以卸载软件包：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Extensive `conda` documentation is available at: [https://conda.io/docs/index.html](https://conda.io/docs/index.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 详细的`conda`文档可在以下网址找到：[https://conda.io/docs/index.html](https://conda.io/docs/index.html)。
- en: Managing Python packages using pip
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip管理Python软件包
- en: As stated earlier, Anaconda users always have `pip` available in every new environment,
    as well as the `root` folder—it comes pre-installed with every version of Anaconda,
    including Miniconda. As `pip` is a Python package manager used to install and
    manage software packages written in Python, it runs in the command line, as opposed
    to Anaconda Navigator and Cloud. If you decide not to use Anaconda or anything
    similar to it, and use a default Python installation from [python.org](https://www.python.org/),
    you can either use `easy_install` or `pip` as a package manager. As `pip` is seen
    as an improvement over `easy_install` and the preferred Python package manager
    for Python 3, we will only discuss `pip` here. It is recommended to use either
    `pip`, `conda`, Anaconda Navigator, or Cloud for Python package management in
    the upcoming chapters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Anaconda用户在每一个新环境中始终可以使用`pip`，以及`root`文件夹——它预安装在Anaconda的每个版本中，包括Miniconda。由于`pip`是一个用于安装和管理用Python编写的软件包的Python包管理器，它运行在命令行中，而不是Anaconda
    Navigator和Cloud。如果您决定不使用Anaconda或类似的产品，并使用来自[python.org](https://www.python.org/)的默认Python安装，您可以使用`easy_install`或`pip`作为包管理器。由于`pip`被视为对`easy_install`的改进，并且是Python
    3的首选包管理器，因此我们在此仅讨论`pip`。建议在后续章节中使用`pip`、`conda`、Anaconda Navigator或Cloud进行Python包管理。
- en: 'Optionally, as you install Anaconda, three environment variables will be added
    to your list of user variables. This enables you to access commands such as `pip`
    from any system location if you open a terminal. To check if `pip` is installed
    on your system, open a terminal and enter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，当您安装Anaconda时，三个环境变量将被添加到您的用户变量列表中。这使您能够在打开终端的情况下从任何系统位置访问`pip`等命令。要检查您的系统上是否已安装`pip`，请打开终端并输入：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you don''t receive any error message, it means `pip` is installed correctly
    and you can use `pip` to install any package of your choice from the PyPI by using:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有收到任何错误信息，这意味着`pip`已正确安装，您可以使用`pip`通过以下方式从PyPI安装您选择的任何包：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For Anaconda users, the `pip` command file should be stored at the following
    path:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Anaconda用户，`pip`命令文件应存储在以下路径：
- en: '`C:\Users\<User Name>\Anaconda3\Scripts\pip.exe`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\<用户名>\Anaconda3\Scripts\pip.exe`。'
- en: If `pip` is not available on your system, you can install `pip` by following
    the instructions given at: [https://pip.pypa.io/en/latest/installing](https://pip.pypa.io/en/latest/installing).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统上没有`pip`，您可以通过以下链接提供的说明来安装`pip`：[https://pip.pypa.io/en/latest/installing](https://pip.pypa.io/en/latest/installing)。
- en: Upgrading and uninstalling the package with pip
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip升级和卸载包
- en: 'Whereas Anaconda Cloud automatically displays a version number of a certain
    installed package, users choosing to use a default Python installation can use
    `pip` to display it through the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与Anaconda Cloud自动显示已安装包的版本号不同，选择使用默认Python安装的用户可以使用`pip`通过以下命令显示它：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Upgrading a package, for example when there''s a new version you''d like to
    use, can be done as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 升级包，例如当您想使用新版本时，可以按照以下步骤进行：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Upgrading it to the latest available version can be done as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将其升级到最新可用版本可以按照以下步骤进行：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Uninstalling a package can be done with the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令可以卸载包：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Python virtual environments
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python虚拟环境
- en: The recommended approach to using Python, in general, is a project-based one.
    This means that each project uses a separate Python version, along with the packages
    required and their mutual dependencies. This approach gives you the flexibility
    to switch between different Python versions and installed package versions. Not
    following this approach would mean that, every time you update a package or install
    a new one, its dependencies will be updated too, resulting in a different setup.
    This may cause problems, for example, code that won't run correctly because of
    changes under the hood, or packages that do not communicate correctly with each
    other. While this book focuses on Python 3, there won't be any need to switch
    to a different Python version, but maybe you can imagine using different versions
    of the same packages for different projects.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，使用Python的推荐方法是项目基础方法。这意味着每个项目使用一个单独的Python版本，以及所需的包及其相互依赖。这种方法让您能够在不同的Python版本和已安装的包版本之间切换。如果不遵循这种方法，每次您更新包或安装新包时，其依赖项也会更新，导致不同的设置。这可能会导致问题，例如，由于底层的变化而无法正确运行的代码，或者无法正确相互通信的包。虽然这本书主要关注Python
    3，但您不需要切换到不同的Python版本，但也许您可以想象为不同的项目使用相同包的不同版本。
- en: Before Anaconda, this project-based approach would require using `virtualenv`,
    a tool for creating isolated Python environments. This approach has gotten a lot
    easier with Anaconda, which offers the same approach but in a more simplified
    way. Both options are covered in detail as we proceed further.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Anaconda之前，这种项目基础方法需要使用`virtualenv`工具来创建隔离的Python环境。随着Anaconda的出现，这种方法变得更加简单。这两种选项将在我们进一步讨论时详细介绍。
- en: Virtual environments using Anaconda
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Anaconda的虚拟环境
- en: As stated before, Anaconda Navigator has a tab called Environments, that when
    clicked will display an overview of all local environments created by the user
    on a local file system. You can easily create, import, clone, or remove environments,
    specify the preferred Python version, and install packages by version number inside
    such an environment. Any new environment will automatically install a number of
    Python packages, such as `pip`. From there, you are free to install more packages.
    These environments are the exact same virtual environments that you would create
    by using the `virtualenv` tool. You can start working with them by opening a terminal
    or by running Python, which opens a terminal and runs `python.exe`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Anaconda Navigator有一个名为“环境”的标签页，点击它将显示用户在本地文件系统上创建的所有本地环境的概览。您可以在这样的环境中轻松创建、导入、克隆或删除环境，指定首选的Python版本，并按版本号安装包。任何新的环境都将自动安装一些Python包，例如`pip`。从那里，您可以自由地安装更多包。这些环境与您使用`virtualenv`工具创建的虚拟环境完全相同。您可以通过打开终端或运行Python来开始使用它们，这会打开一个终端并运行`python.exe`。
- en: Anaconda stores all environments in a separate `root` folder, keeping all your
    virtual environments in one place. Note that each environment in Anaconda Navigator
    is treated as a virtual environment, even the root environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda将所有环境存储在一个单独的`root`文件夹中，将所有虚拟环境集中在一个地方。请注意，Anaconda Navigator中的每个环境都被视为虚拟环境，即使是根环境。
- en: Managing environments with conda
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用conda管理环境
- en: 'Both Anaconda and Miniconda offer the `conda` package manager, which can also
    be used to manage virtual environments. Open a terminal and use the following
    command to list all available environments on your system:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda和Miniconda都提供了`conda`包管理器，它也可以用来管理虚拟环境。打开终端并使用以下命令列出系统上所有可用的环境：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Use the following command for creating a virtual environment based on Python
    version 2.7:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建基于Python 2.7版本的虚拟环境：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Activate the environment next as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤激活环境：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Multiple additional packages can now be installed with a single command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用单个命令安装多个附加包：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command calls `conda` directly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令直接调用`conda`。
- en: 'Deactivate the environment you''ve been working in as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤注销您正在工作的环境：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'More on managing environments with `conda` can be found at: [https://conda.io/docs/user-guide/tasks/manage-environments.html](https://conda.io/docs/user-guide/tasks/manage-environments.html)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于使用`conda`管理环境的信息，请参阅：[https://conda.io/docs/user-guide/tasks/manage-environments.html](https://conda.io/docs/user-guide/tasks/manage-environments.html)
- en: Virtual environments using virtualenv
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virtualenv创建虚拟环境
- en: 'If you don''t want to use Anaconda, `virtualenv` needs to be installed first.
    Use the following command to install it locally:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用Anaconda，则需要首先安装`virtualenv`。使用以下命令进行本地安装：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, a virtual environment can be created by assigning with the `virtualenv`
    command followed by the name of the new environment, for example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，可以通过使用`virtualenv`命令并跟上新环境的名称来创建一个虚拟环境，例如：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Navigate to the directory with the same name:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到具有相同名称的目录：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, activate the virtual environment with the `activate` command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`activate`命令激活虚拟环境：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Your virtual environment is now ready for use. Use `pip install` to install
    packages exclusively to this environment and use them in your code. Use the `deactivate`
    command to stop the virtual environment from working:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您的虚拟环境现在已准备好使用。使用`pip install`将包专门安装到该环境中，并在您的代码中使用它们。使用`deactivate`命令停止虚拟环境的工作：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you have multiple Python versions installed, use the argument `-p` together
    with the desired Python version or path to the `python.exe` file of your choice,
    for example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装了多个Python版本，请使用`-p`参数与所需的Python版本或您选择的`python.exe`文件路径一起使用，例如：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also do it as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以这样做：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This step follows creation of the virtual environment and precedes installation
    of the required packages. For more information on `virtualenv`, see: [http://virtualenv.readthedocs.io/en/stable](http://virtualenv.readthedocs.io/en/stable)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤在创建虚拟环境之后，在安装所需包之前进行。有关`virtualenv`的更多信息，请参阅：[http://virtualenv.readthedocs.io/en/stable](http://virtualenv.readthedocs.io/en/stable)
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This introductory chapter discussed how to install and manage the code libraries
    that will be used in this book. We'll be working mainly with Anaconda, a freemium
    open source distribution of the Python programming language that aims to simplify
    package management and deployment. We discussed how to install Anaconda, and the
    options for Python package management using Anaconda Navigator, Anaconda Cloud,
    `conda`, and `pip`. Finally, we discussed virtual environments and how to manage
    these using Anaconda, `conda`, and `virtualenv`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这章介绍了如何安装和管理本书中将要使用的代码库。我们将主要使用Anaconda，它是Python编程语言的免费增值开源发行版，旨在简化包管理和部署。我们讨论了如何安装Anaconda，以及使用Anaconda
    Navigator、Anaconda Cloud、`conda`和`pip`进行Python包管理的选项。最后，我们讨论了虚拟环境以及如何使用Anaconda、`conda`和`virtualenv`来管理这些环境。
- en: The recommended installation for this book is the Anaconda3 version, that will
    install not only a working Python environment, but also a large repository of
    local Python packages, the Jupyter Notebook application, as well as the `conda`
    package manager, Anaconda Navigator, and Cloud. In the next chapter, we will introduce
    the major code libraries used to process and analyze geospatial data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本书推荐的安装版本是Anaconda3，它不仅会安装一个可工作的Python环境，还会安装一个庞大的本地Python包库、Jupyter Notebook应用程序，以及`conda`包管理器、Anaconda
    Navigator和云服务。在下一章中，我们将介绍用于处理和分析地理空间数据的主要代码库。
