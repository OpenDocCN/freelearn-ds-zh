["```py\n    import arcpy\n    ```", "```py\n    arcpy.env.workspace = \"c:/ArcpyBook/data\"\n    ```", "```py\n    arcpy.Buffer_analysis(\"Streams.shp\",\"Streams_Buff.shp\")\n    ```", "```py\n     Runtime error Traceback (most recent call last): File \"<string>\", line 1, in <module> File \"c:\\program files (x86)\\arcgis\\desktop10.1\\arcpy\\arcpy\\analysis.py\", line 687, in Buffer  raise e ExecuteError: Failed to execute. Parameters are not valid. ERROR 000735: Distance [value or field]: Value is required Failed to execute (Buffer).\n\n    ```", "```py\n    import arcpy\n    try:\n      arcpy.env.workspace = \"c:/ArcpyBook/data\"\n      arcpy.Buffer_analysis(\"Streams.shp\",\"Streams_Buff.shp\")\n    except:\n      print \"Error\"\n    ```", "```py\n    import arcpy\n    try:\n      arcpy.env.workspace = \"c:/ArcpyBook/data\"\n      arcpy.Buffer_analysis(\"Streams.shp\",\"Streams_Buff.shp\")\n    except:\n      print arcpy.GetMessages()\n    ```", "```py\n    Executing: Buffer c:/ArcpyBook/data\\Streams.shp c:/ArcpyBook/data\\Streams_Buff.shp # FULL ROUND NONE #\n    Start Time: Tue Nov 13 22:23:04 2012\n    Failed to execute. Parameters are not valid.\n    ERROR 000735: Distance [value or field]: Value is required\n    Failed to execute (Buffer).\n    Failed at Tue Nov 13 22:23:04 2012 (Elapsed Time: 0.00 seconds)\n\n    ```", "```py\n    import arcpy\n    try:\n      arcpy.env.workspace = \"c:/ArcpyBook/data\"\n      arcpy.Buffer_analysis(\"Streams.shp\",\"Streams_Buff.shp\")\n    except:\n      print arcpy.GetMessages(2)\n    ```", "```py\n    Failed to execute. Parameters are not valid.\n    ERROR 000735: Distance [value or field]: Value is required\n    Failed to execute (Buffer).\n\n    ```", "```py\n    ERROR000735:Distance[valueorfield]:Valueisrequired\n    ```", "```py\n    except:\n     print “Error found in Buffer tool \\n”\n    errCode = arcpy.GetReturnCode(3)\n     if str(errCode) in “735”:\n     print “Distance value not provided \\n”\n     print “Running the buffer again with a default value \\n”\n    defaultDistance = “100 Feet”\n    arcpy.Buffer_analysis(“Streams.shp”, “Streams_Buff”, defaultDistance)\n     print “Buffer complete”\n    ```", "```py\n    Error found in Buffer tool\n    Distance value not provided for buffer\n    Running the buffer again with a default distance value\n    Buffer complete\n    ```", "```py\n    import arcpy\n    try:\n      arcpy.env.workspace = \"c:/ArcpyBook/data\"\n      arcpy.Buffer_analysis(\"Streams.shp\",\"Streams_Buff.shp\")\n    except:\n      print arcpy.GetMessage(1)\n      print arcpy.GetMessage(arcpy.GetMessageCount() – 1)\n    ```", "```py\n    Start Time: Wed Nov 14 09:07:35 2012\n    Failed at Wed Nov 14 09:07:35 2012 (Elapsed Time: 0.00 seconds)\n\n    ```", "```py\nMessage 0 - Executing: Buffer c:/ArcpyBook/data\\Streams.shp c:/ArcpyBook/data\\Streams_Buff.shp # FULL ROUND NONE #\nMessage 1 - Start Time: Tue Nov 13 22:23:04 2012\nMessage 2 - Failed to execute. Parameters are not valid.\nMessage 3 - ERROR 000735: Distance [value or field]: Value is required\nMessage 4 - Failed to execute (Buffer).\nMessage 5 - Failed at Tue Nov 13 22:23:04 2012 (Elapsed Time: 0.00 seconds)\n\n```", "```py\n    import arcpy, sys\n    ```", "```py\n    wkspace = sys.argv[1]\n    ```", "```py\n    fc = sys.argv[2]\n    ```", "```py\n    arcpy.env.workspace = wkspace\n    fields = arcpy.ListFields(fc)\n    ```", "```py\n    import arcpy, sys\n    wkspace = sys.argv[1]\n    fc = sys.argv[2]\n    try:\n      arcpy.env.workspace = wkspace\n      fields = arcpy.ListFields(fc)\n      for fld in fields:\n        print fld.name\n    except:\n      print arcpy.GetMessages()\n    ```", "```py\n    python ListFields.py c:\\ArcpyBook\\data Burglaries_2009.shp\n    ```", "```py\n    cd c:\\ArcpyBook\\Appendix1\n    python ListFields.py c:\\ArcpyBook\\data Burglaries_2009.shp\n    ```", "```py\n    18.102,-94.353,310.7,1.3,1.1,10/02/2007,0420,T,72\n    19.300,-89.925,313.6,1.1,1.0,10/02/2007,0420,T,82\n    19.310,-89.927,309.9,1.1,1.0,10/02/2007,0420,T,68\n    26.888,-101.421,307.3,2.7,1.6,10/02/2007,0425,T,53\n    26.879,-101.425,306.4,2.7,1.6,10/02/2007,0425,T,45\n    36.915,-97.132,342.4,1.0,1.0,10/02/2007,0425,T,100\n\n    ```", "```py\n    f = open(\"c:/ArcpyBook/data/N_America.A2007275.txt','r')\n    ```", "```py\n    lstFires = f.readlines()\n    ```", "```py\n    for fire in lstFires:\n    ```", "```py\n    lstValues = fire.split(\",\")\n    ```", "```py\n    latitude = float(lstValues[0])\n    longitude = float(lstValues[1])\n    confid = int(lstValues[8])\n    ```", "```py\n    print \"The latitude is: \" + str(latitude) + \" The longitude is: \" + str(longitude) + \" The confidence value is: \" + str(confid)\n    ```", "```py\n    f.close()\n    ```", "```py\n    f = open('c:/ArcpyBook/data/N_America.A2007275.txt','r')\n    lstFires = f.readlines()\n    for fire in lstFires:\n      lstValues = fire.split(',')\n      latitude = float(lstValues[0])\n      longitude = float(lstValues[1])\n      confid = int(lstValues[8])\n      print \"The latitude is: \" + str(latitude) + \" The longitude is: \" + str(longitude) + \" The confidence value is: \" + str(confid)\n    f.close()\n    ```", "```py\n    The latitude is: 18.102 The longitude is: -94.353 The confidence value is: 72\n    The latitude is: 19.3 The longitude is: -89.925 The confidence value is: 82\n    The latitude is: 19.31 The longitude is: -89.927 The confidence value is: 68\n    The latitude is: 26.888 The longitude is: -101.421 The confidence value is: 53\n    The latitude is: 26.879 The longitude is: -101.425 The confidence value is: 45\n    The latitude is: 36.915 The longitude is: -97.132 The confidence value is: 100\n\n    ```", "```py\n    import smtplib\n    from email.MIMEMultipart import MIMEMultipart\n    from email.MIMEBase import MIMEBase\n    from email.MIMEText import MIMEText\n    from email import Encoders\n    import os\n    ```", "```py\n    gmail_user = \"<username>\"\n    gmail_pwd = \"<password>\"\n    ```", "```py\n    def mail(to, subject, text, attach):\n      msg = MIMEMultipart()\n      msg['From'] = gmail_user\n      msg['To'] = to\n      msg['Subject'] = subject\n\n      msg.attach(MIMEText(text))\n    ```", "```py\n      part = MIMEBase('application', 'octet-stream')\n      part.set_payload(open(attach, 'rb').read())\n      Encoders.encode_base64(part)\n      part.add_header('Content-Disposition',\n         'attachment; filename=\"%s\"' % os.path.basename(attach))\n      msg.attach(part)\n    ```", "```py\n      mailServer = smtplib.SMTP(\"smtp.gmail.com\", 587)\n      mailServer.ehlo()\n      mailServer.starttls()\n      mailServer.ehlo()\n      mailServer.login(gmail_user, gmail_pwd)\n      mailServer.sendmail(gmail_user, to, msg.as_string())\n      mailServer.close()\n    ```", "```py\n      mail(\"<email to send to>\",\n      \"Hello from python!\",\n      \"This is an email sent with python\",\n      \"c:/ArcpyBook/data/bc_pop1996.csv\")\n    ```", "```py\n    import smtplib\n    from email.MIMEMultipart import MIMEMultipart\n    from email.MIMEBase import MIMEBase\n    from email.MIMEText import MIMEText\n    from email import Encoders\n    import os\n\n    gmail_user = \"<username>\"\n    gmail_pwd = \"<password>\"\n\n    def mail(to, subject, text, attach):\n     msg = MIMEMultipart()\n\n     msg['From'] = gmail_user\n     msg['To'] = to\n     msg['Subject'] = subject\n\n     msg.attach(MIMEText(text))\n\n     part = MIMEBase('application', 'octet-stream')\n     part.set_payload(open(attach, 'rb').read())\n     Encoders.encode_base64(part)\n     part.add_header('Content-Disposition',\n         'attachment; filename=\"%s\"' % os.path.basename(attach))\n     msg.attach(part)\n\n     mailServer = smtplib.SMTP(\"smtp.gmail.com\", 587)\n     mailServer.ehlo()\n     mailServer.starttls()\n     mailServer.ehlo()\n     mailServer.login(gmail_user, gmail_pwd)\n     mailServer.sendmail(gmail_user, to, msg.as_string())\n     mailServer.close()\n\n    mail(\"<email to send to>\",\n     \"Hello from python!\",\n     \"This is an email sent with python\",\n     \"bc_pop1996.csv\")\n    ```", "```py\n    import ftplib\n    import os\n    import socket\n    ```", "```py\n    HOST = 'ftp.nifc.gov'\n    DIRN = '/Incident_Specific_Data/ALASKA/Fire_Perimeters/20090805_1500'\n    FILE = 'FirePerimeters_20090805_1500.kmz'\n    ```", "```py\n    try:\n      f = ftplib.FTP(HOST)\n    except (socket.error, socket.gaierror), e:\n      print 'ERROR: cannot reach \"%s\"' % HOST\n    print '*** Connected to host \"%s\"' % HOST\n    ```", "```py\n    try:\n      f.login()\n    except ftplib.error_perm:\n      print 'ERROR: cannot login anonymously'\n      f.quit()\n    print '*** Logged in as \"anonymous\"'\n    ```", "```py\n    try:\n      f.cwd(DIRN)\n    except ftplib.error_perm:\n      print 'ERROR: cannot CD to \"%s\"' % DIRN\n      f.quit()\n    print '*** Changed to \"%s\" folder' % DIRN\n    ```", "```py\n    try:\n      f.retrbinary('RETR %s' % FILE,\n         open(FILE, 'wb').write)\n    except ftplib.error_perm:\n      print 'ERROR: cannot read file \"%s\"' % FILE\n      os.unlink(FILE)\n    else:\n      print '*** Downloaded \"%s\" to CWD' % FILE\n    ```", "```py\n    f.quit()\n    ```", "```py\n    import ftplib\n    import os\n    import socket\n    HOST = 'ftp.nifc.gov'\n    DIRN = '/Incident_Specific_Data/ALASKA/Fire_Perimeters/20090805_1500'\n    FILE = 'FirePerimeters_20090805_1500.kmz'\n\n    try:\n      f = ftplib.FTP(HOST)\n    except (socket.error, socket.gaierror), e:\n      print 'ERROR: cannot reach \"%s\"' % HOST\n    print '*** Connected to host \"%s\"' % HOST\n\n    try:\n      f.login()\n    except ftplib.error_perm:\n      print 'ERROR: cannot login anonymously'\n      f.quit()\n    print '*** Logged in as \"anonymous\"'\n\n    try:\n      f.cwd(DIRN)\n    except ftplib.error_perm:\n      print 'ERROR: cannot CD to \"%s\"' % DIRN\n      f.quit()\n    print '*** Changed to \"%s\" folder' % DIRN\n\n    try:\n      f.retrbinary('RETR %s' % FILE,\n         open(FILE, 'wb').write)\n    except ftplib.error_perm:\n      print 'ERROR: cannot read file \"%s\"' % FILE\n      os.unlink(FILE)\n    else:\n      print '*** Downloaded \"%s\" to CWD' % FILE\n    f.quit()\n    ```", "```py\n    *** Connected to host \"ftp.nifc.gov\"\n    *** Logged in as \"anonymous\"\n    *** Changed to \"/Incident_Specific_Data/ALASKA/Fire_Perimeters/20090805_1500\" folder\n    *** Downloaded \"FirePerimeters_20090805_1500.kmz\" to CWD\n\n    ```", "```py\nzipfile.ZipFile('dataFile.zip', 'w',zipfile.ZIP_STORED)\n```", "```py\n    import os\n    import zipfile\n    ```", "```py\n    zfile = zipfile.ZipFile(\"shapefiles.zip\", \"w\", zipfile.ZIP_STORED)\n    ```", "```py\n    files = os.listdir(\"c:/ArcpyBook/data\")\n    ```", "```py\n    for f in files:\n      if f.endswith(\"shp\") or f.endswith(\"dbf\") or f.endswith(\"shx\"):\n        zfile.write(\"C:/ArcpyBook/data/\" + f)\n    ```", "```py\n    for f in zfile.namelist():\n        print \"Added %s\" % f\n    ```", "```py\n    zfile.close()\n    ```", "```py\n    import os\n    import zipfile\n\n    #create the zip file\n    zfile = zipfile.ZipFile(\"shapefiles.zip\", \"w\", zipfile.ZIP_STORED)\n    files = os.listdir(\"c:/ArcpyBook/data\")\n\n    for f in files:\n      if f.endswith(\"shp\") or f.endswith(\"dbf\") or f.endswith(\"shx\"):\n        zfile.write(\"C:/ArcpyBook/data/\" + f)\n\n    #list files in the archive\n    for f in zfile.namelist():\n        print \"Added %s\" % f\n\n    zfile.close()\n    ```", "```py\n    Added ArcpyBook/data/Burglaries_2009.dbf\n    Added ArcpyBook/data/Burglaries_2009.shp\n    Added ArcpyBook/data/Burglaries_2009.shx\n    Added ArcpyBook/data/Streams.dbf\n    Added ArcpyBook/data/Streams.shp\n    Added ArcpyBook/data/Streams.shx\n\n    ```", "```py\n    zfile = zipfile.ZipFile(\"shapefiles2.zip\", \"w\", zipfile.ZIP_DEFLATED)\n    ```", "```py\n<root>\n <child att=\"value\">\n <subchild>.....</subchild>\n </child>\n</root>\n```", "```py\n    <fires>\n      <fire address=\"11389 Pajaro Way\" city=\"San Diego\" state=\"CA\" zip=\"92127\" country=\"USA\" latitude=\"33.037187\" longitude=\"-117.082299\" />\n      <fire address=\"18157 Valladares Dr\" city=\"San Diego\" state=\"CA\" zip=\"92127\" country=\"USA\" latitude=\"33.039406\" longitude=\"-117.076344\" />\n      <fire address=\"11691 Agreste Pl\" city=\"San Diego\" state=\"CA\" zip=\"92127\" country=\"USA\" latitude=\"33.036575\" longitude=\"-117.077702\" />\n      <fire address=\"18055 Polvera Way\" city=\"San Diego\" state=\"CA\" zip=\"92128\" country=\"USA\" latitude=\"33.044726\" longitude=\"-117.057649\" />\n    </fires>\n    ```", "```py\n    from xml.dom import minidom\n    ```", "```py\n    xmldoc = minidom.parse(\"WitchFireResidenceDestroyed.xml\")\n    ```", "```py\n    childNodes = xmldoc.childNodes\n    ```", "```py\n    eList = childNodes[0].getElementsByTagName(\"fire\")\n    ```", "```py\n    for e in eList:\n      if e.hasAttribute(\"address\"):\n        print e.getAttribute(\"address\")\n    ```", "```py\n    11389 Pajaro Way\n    18157 Valladares Dr\n    11691 Agreste Pl\n    18055 Polvera Way\n    18829 Bernardo Trails Dr\n    18189 Chretien Ct\n    17837 Corazon Pl\n    18187 Valladares Dr\n    18658 Locksley St\n    18560 Lancashire Way\n\n    ```"]