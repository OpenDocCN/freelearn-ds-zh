["```py\nsession.file.put('./datasets/purchase_history.csv', 'MY_STAGE')\n```", "```py\nimport snowflake.snowpark.types as T\npurchase_history_schema = T.StructType([\n    T.StructField(\"ID\", T.IntegerType()),\n    T.StructField(\"Year_Birth\", T.IntegerType()),\n    T.StructField(\"Education\", T.StringType()),\n    T.StructField(\"Marital_Status\", T.StringType()),\n    T.StructField(\"Income\", T.IntegerType()),\n    T.StructField(\"Kidhome\", T.IntegerType()),\n    T.StructField(\"Teenhome\", T.IntegerType()),\n    T.StructField(\"Dt_Customer\", T.DateType()),\n    T.StructField(\"Recency\", T.IntegerType()),\n    T.StructField(\"MntWines\", T.IntegerType()),\n    T.StructField(\"MntFruits\", T.IntegerType()),\n    T.StructField(\"MntMeatProducts\", T.IntegerType()),\n    T.StructField(\"MntFishProducts\", T.IntegerType()),\n    T.StructField(\"MntSweetProducts\", T.IntegerType()),\n    T.StructField(\"MntGoldProds\", T.IntegerType()),\n    T.StructField(\"NumDealsPurchases\", T.IntegerType()),\n    T.StructField(\"NumWebPurchases\", T.IntegerType()),\n    T.StructField(\"NumCatalogPurchases\", T.IntegerType()),\n    T.StructField(\"NumStorePurchases\", T.IntegerType()),\n    T.StructField(\"NumWebVisitsMonth\", T.IntegerType())\n])\n```", "```py\npurchase_history = session.read\\\n        .option(\"FIELD_DELIMITER\", ',')\\\n        .option(\"SKIP_HEADER\", 1)\\\n        .option(\"ON_ERROR\", \"CONTINUE\")\\\n        .schema(purchase_history_schema).csv(\n            \"@MY_Stage/purchase_history.csv.gz\")\\\n        .copy_into_table(\"PURCHASE_HISTORY\")\n```", "```py\nsession.table(\"PURCHASE_HISTORY\").show()\n```", "```py\nsession.file.put('./datasets/campaign_info.json', 'MY_STAGE')\n```", "```py\ndf_from_json = session.read.json(\"@My_Stage/campaign_info.json.gz\")\n```", "```py\ndf_from_json.write.save_as_table(\"CAMPAIGN_INFO_TEMP\", \n    mode = \"overwrite\")\n```", "```py\ndf_from_json.show()\n```", "```py\nfrom snowflake.snowpark.functions import col\ndf_flatten = df_from_json.select(col(\"$1\")[\"ID\"].as_(\"ID\"),\\\n    col(\"$1\")[\"AcceptedCmp1\"].as_(\"AcceptedCmp1\"),\\\n    col(\"$1\")[\"AcceptedCmp2\"].as_(\"AcceptedCmp2\"),\\\n    col(\"$1\")[\"AcceptedCmp3\"].as_(\"AcceptedCmp3\"),\\\n    col(\"$1\")[\"AcceptedCmp4\"].as_(\"AcceptedCmp4\"),\\\n    col(\"$1\")[\"AcceptedCmp5\"].as_(\"AcceptedCmp5\"),\\\n    col(\"$1\")[\"Response\"].as_(\"Response\"))\ndf_flatten.write.save_as_table(\"CAMPAIGN_INFO\")\n```", "```py\nsession.table(\"CAMPAIGN_INFO\").show()\n```", "```py\nsession.file.put('./datasets/complain_info.parquet', 'MY_STAGE')\n```", "```py\ndf_raw = session.read.parquet(\"@My_Stage/complain_info.parquet\")\ndf_raw.copy_into_table(\"COMPLAINT_INFO\")\n```", "```py\nsession.table(\"COMPLAINT_INFO\").show()\n```", "```py\nsession.file.put(\"./datasets/sample_images/*.png\", \"@My_Images\")\n```", "```py\nSession.sql(\"LS @My_Images\").show()\n```", "```py\nimport PIL.Image\nbytes_object = session.file.get_stream(\n    \"@My_Images/101.png.gz\", decompress=True)\nimage = PIL.Image.open(bytes_object)\nimage.resize((150,150))\n```", "```py\nimport snowflake.snowpark as snowpark\nfrom snowflake.snowpark.functions import udf\nfrom snowflake.snowpark.files import SnowflakeFile\nfrom snowflake.snowpark.types import StringType, IntegerType\n@udf(\n    name=\"get_bytes_length\",\n    replace=True,\n    input_types=[StringType()],\n    return_type=IntegerType(),\n    packages=['snowflake-snowpark-python']\n)\ndef get_file_length(file_path):\n    with SnowflakeFile.open(file_path) as f:\n        s = f.read()\n        return len(s)\n```", "```py\nsession.sql(\"SELECT RELATIVE_PATH, \\\n    get_bytes_length(build_scoped_file_url( \\\n        @MY_TEXTS,RELATIVE_PATH)) \\\n             as SIZE from DIRECTORY(@MY_TEXTS);\").collect()\n```", "```py\npurchase_history = session.table(\"PURCHASE_HISTORY\")\ncampaign_info = session.table(\"CAMPAIGN_INFO\")\ncomplain_info = session.table(\"COMPLAINT_INFO\")\n```", "```py\npurchase_history.show(n=5)\n```", "```py\npurchase_history.collect()\n```", "```py\npurchase_history.count()\n```", "```py\npurchase_history.columns\n```", "```py\nfrom snowflake.snowpark.functions import col\npurchase_history.filter(col(\"id\") == 1).show()\n```", "```py\npurchase_history.filter((col(\"MARITAL_STATUS\") == \"Married\") & \n                        (col(\"KIDHOME\") == 1)).show()\n```", "```py\npurchase_history.filter((col(\"YEAR_BIRTH\") >= 1964) & \n                        (col(\"YEAR_BIRTH\") <= 1980)).show()\n```", "```py\npurchase_history.select(col(\"ID\"), col(\"YEAR_BIRTH\"), \n                        col(\"EDUCATION\")).show()\n```", "```py\npurchase_campaign = purchase_history.join(\n    campaign_info,\n    purchase_history.ID == campaign_info.ID ,\n    lsuffix=\"_left\", rsuffix=\"_right\"\n)\n```", "```py\npurchase_campaign = purchase_campaign.drop(\"ID_RIGHT\")\n```", "```py\npurchase_campaign.show()\n```", "```py\nfinal_combined = purchase_campaign.join(\n    complain_info,\n    purchase_campaign[\"ID_LEFT\"] == complain_info.ID\n)\nfinal_combined = final_combined.drop(\"ID_LEFT\")\n```", "```py\nfinal_combined.show()\n```", "```py\nfinal_combined.write.save_as_table(\"MARKETING_DATA\")\n```", "```py\nmarketing_additional = session.table(\"MARKETING_ADDITIONAL\")\nmarketing_additional.show()\n```", "```py\nprint(\"No of rows in MARKETING_ADDITIONAL table: \\\n    \",marketing_additional.count())\nprint(\"No of rows in PURCHASE_HISTORY table: \\\n    \",final_combined.count())\n```", "```py\nfinal_appended = final_combined.union_by_name(marketing_additional)\n```", "```py\nprint(\"No of rows in UPDATED table: \",final_appended.count())\nfinal_appended.show()\n```", "```py\nfinal_appended.write.save_as_table(\"MARKETING_FINAL\")\n```", "```py\nmarketing_final = session.table(\"MARKETING_FINAL\")\n```", "```py\nmarketing_final.group_by(\"EDUCATION\").mean(\"INCOME\").show()\n```", "```py\nmarketing_final.group_by(\"EDUCATION\").agg(avg(\"INCOME\").alias( \\\n    \"Avg_Income\")).show()\n```", "```py\nmarketing_final.group_by(\"MARITAL_STATUS\").function(\"sum\")( \\\n    \"Z_REVENUE\").show()\n```", "```py\nmarketing_final.group_by(\"MARITAL_STATUS\").agg(max(\"INCOME\")).show()\n```", "```py\nmarketing_final.group_by(\"EDUCATION\").agg((col(\"*\"), \"count\"), \n    max(\"INCOME\")).show()\n```", "```py\nmarketing_final.group_by([\"EDUCATION\",\"MARITAL_STATUS\"]).agg(\n    avg(\"INCOME\").alias(\"Avg_Income\"),\n    sum(\"NUMSTOREPURCHASES\").alias(\"Sum_Purchase\")\n).show()\n```", "```py\naggregate_result = marketing_final.group_by([\"EDUCATION\",\"MARITAL_STATUS\"]).agg(\n    avg(\"INCOME\").alias(\"Avg_Income\"),\n    sum(\"NUMSTOREPURCHASES\").alias(\"Sum_Purchase\")\n)\naggregate_result.sort(\n    col(\"EDUCATION\").asc(), col(\"Sum_Purchase\").asc()\n).show()\n```", "```py\nmarketing_final.describe().show()\n```", "```py\nmarketing_final.distinct().count()\n```", "```py\nmarketing_final.select([\"Education\",\"Marital_Status\"]).drop_duplicates().show()\n```", "```py\nmarketing_final.stat.crosstab(col1=\"Education\",col2=\"Marital_Status\").show()\n```", "```py\nmarket_subset = marketing_final.select(\n    \"EDUCATION\",\"MARITAL_STATUS\",\"INCOME\"\n)\nmarket_pivot = market_subset.pivot(\n    \"EDUCATION\",\n    [\"Graduation\",\"PhD\",\"Master\",\"Basic\",\"2n Cycle\"]\n).sum(\"INCOME\")\nmarket_pivot.show()\n```", "```py\nmarket_pivot.dropna(how=\"all\").show()\n```", "```py\nmarket_pivot.dropna(thresh=5).show()\n```", "```py\nmarket_pivot.dropna(subset=\"'Graduation'\").show()\n```", "```py\nmarket_pivot.fillna(0).show()\n```", "```py\nmarketing_final.stat.corr(\"INCOME\", \"NUMSTOREPURCHASES\")\n```", "```py\nmarketing_final.stat.cov(\"INCOME\", \"NUMSTOREPURCHASES\")\n```", "```py\npandas_df = marketing_final.to_pandas()\npandas_df.head()\n```", "```py\npandas_df[[\"INCOME\",\"KIDHOME\",\"RECENCY\"]].corr()\n```", "```py\nfrequency = pandas_df.EDUCATION.value_counts()\nfrequency\n```", "```py\nfrequency.plot(kind=\"barh\",figsize=(8,3))\n```", "```py\npandas_df.plot(\n    kind=\"hexbin\",\n    x=\"INCOME\",y=\"MNTGOLDPRODS\",\n    xlim=[0,100000],ylim=[0,100],\n    figsize=(8,3)\n)\n```", "```py\nfor batch in marketing_final.to_pandas_batches(): print(batch.shape)\n```", "```py\nsample_df = marketing_final.sample(frac=0.50)\nsample_df.count()\n```"]