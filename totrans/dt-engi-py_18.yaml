- en: '*Chapter 15*: Real-Time Edge Data with MiNiFi, Kafka, and Spark'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 15 章*：使用 MiNiFi、Kafka 和 Spark 的实时边缘数据'
- en: In this chapter, you will learn how **Internet-of-Things** (**IoT**) devices,
    small computers, and sensors can send data into a data pipeline using Apache NiFi.
    For computers or devices with little processing power, MiNiFi allows them to be
    part of a NiFi data pipeline. MiNiFi is a lightweight version of NiFi with a stripped-down
    set of processors and no graphical user interface. It is built to send data using
    a data pipeline built into NiFi and deployed to the device.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用 Apache NiFi 将 **物联网**（**IoT**）设备、小型计算机和传感器发送数据到数据管道。对于处理能力较小的计算机或设备，MiNiFi
    允许它们成为 NiFi 数据管道的一部分。MiNiFi 是 NiFi 的轻量级版本，具有精简的处理器集和没有图形用户界面。它是构建用于通过内置在 NiFi
    中的数据管道发送数据，并部署到设备上的。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Setting up MiNiFi on a device
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备上设置 MiNiFi
- en: Building and deploying a MiNiFi task in NiFi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NiFi 中构建和部署 MiNiFi 任务
- en: Setting up MiNiFi
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 MiNiFi
- en: Apache MiNiFi is a lightweight version of NiFi, to be used in data collection
    at the source. Increasingly, the source has become smaller IoT devices, sensors,
    and low-powered computers such as the Raspberry Pi. To incorporate these devices
    into your data pipelines, you need a way to get the data off the device. MiNiFi
    allows you to stream the data to NiFi as part of a standard data pipeline.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Apache MiNiFi 是 NiFi 的轻量级版本，用于在数据源处进行数据收集。来源越来越小，包括物联网设备、传感器和低功耗计算机，如 Raspberry
    Pi。要将这些设备纳入您的数据管道，您需要一种方法从设备中获取数据。MiNiFi 允许您将数据作为标准数据管道的一部分流式传输到 NiFi。
- en: 'To get the MiNiFi binary, browse to [https://nifi.apache.org/minifi/](https://nifi.apache.org/minifi/).
    The following screenshot is of the MiNiFi home page and will provide you with
    information and documentation for the project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 MiNiFi 二进制文件，请浏览到 [https://nifi.apache.org/minifi/](https://nifi.apache.org/minifi/)。以下截图是
    MiNiFi 主页，并将为您提供有关项目和文档的信息：
- en: '![Figure 15.1 – The Apache MiNiFi home page'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 15.1 – Apache MiNiFi 主页'
- en: '](img/Figure_15.1_B15739.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_15.1_B15739.jpg](img/Figure_15.1_B15739.jpg)'
- en: Figure 15.1 – The Apache MiNiFi home page
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – Apache MiNiFi 主页
- en: From the main navigation bar, go to **Downloads** and select the **Download
    MiNiFi Components** option. You will need to decide whether you want to run the
    MiNiFi Java or MiNiFi C++ version. Which version is appropriate will depend on
    the specifications of the device where MiNiFi will live. If you need the smallest
    footprint and memory usage, then the C++ version is for you. If you have more
    resources and need to have a wider selection of available processors, then the
    Java version is your best bet. You can find a list of processors by category,
    with descriptions at [https://nifi.apache.org/docs/nifi-docs/html/getting-started.html#what-processors-are-available](https://nifi.apache.org/docs/nifi-docs/html/getting-started.html#what-processors-are-available).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从主导航栏进入 **下载** 并选择 **下载 MiNiFi 组件** 选项。您需要决定您是想运行 MiNiFi Java 还是 MiNiFi C++
    版本。哪个版本适合将取决于 MiNiFi 将驻留的设备的规格。如果您需要最小的占用空间和内存使用，那么 C++ 版本适合您。如果您有更多资源并且需要更广泛的可用处理器选择，那么
    Java 版本将是您的最佳选择。您可以通过类别查找处理器列表，其中包含描述。[https://nifi.apache.org/docs/nifi-docs/html/getting-started.html#what-processors-are-available](https://nifi.apache.org/docs/nifi-docs/html/getting-started.html#what-processors-are-available)。
- en: You can always copy the `NAR` file for any processor in NiFi and put it in the
    MiNiFi `lib` directory. Some processors will require you to also copy and send
    the `NAR` file for the controller service. This chapter will use the MiNiFi Java
    version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您始终可以复制 NiFi 中任何处理器的 `NAR` 文件并将其放入 MiNiFi 的 `lib` 目录。某些处理器可能还需要您复制并发送控制器服务的
    `NAR` 文件。本章将使用 MiNiFi Java 版本。
- en: Download the most current version of MiNiFi (Java), which is currently 0.5.0\.
    Select the `minifi-0.5.0-bin.tar.gz` link and download it. You will also need
    to scroll further down the page and select the corresponding version of the MiNiFi
    toolkit binaries. Both the C++ and Java versions use the same toolkit, so you
    will only need to select the right release – 0.5.0\. Download the `minifi-toolkit-0.5.0-bin.tar.gz`
    file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下载当前版本的 MiNiFi（Java），目前为 0.5.0。选择 `minifi-0.5.0-bin.tar.gz` 链接并下载它。您还需要向下滚动页面并选择
    MiNiFi 工具包二进制文件的相应版本。C++ 和 Java 版本使用相同的工具包，因此您只需选择正确的发布版本 – 0.5.0。下载 `minifi-toolkit-0.5.0-bin.tar.gz`
    文件。
- en: 'Extract and copy MiNiFi and the MiNiFi toolkit to your home directory using
    the following commands:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令提取并复制 MiNiFi 和 MiNiFi 工具包到您的家目录：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I dropped `-0.5.0` when I moved `minifi` and `minifi-toolkit` to my home directory.
    In this chapter, I will run MiNiFi on the same machine as NiFi – as I have done
    with Kafka and Spark – but if you want to run MiNiFi on another device, as you
    would in production, copy the `minifi-0.5.0` directory to that machine. The MiNiFi
    toolkit stays on the NiFi machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to set the `$MINIFI_HOME` variable to the location of MiNiFi.
    You can either export the variable and add it to your path, or the better way
    would be to edit your `.bashrc` file, as shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your `.bashrc` file will look as in the following screenshot. Notice that I
    have the edits from the previous chapter on Apache Spark just above the MiNiFi
    edits:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – A .bashrc file with exports for Spark and MiNiFi'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.2_B15739.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.2 – A .bashrc file with exports for Spark and MiNiFi
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have MiNiFi configured and the MiNiFi toolkit ready to go, it is
    time to create your first data pipeline in Apache NiFi. The next section will
    walk you through creating one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Building a MiNiFi task in NiFi
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will build a data pipeline and deploy it to MiNiFi. The
    data pipeline will generate flow files and send them to NiFi. The next section
    will take this further and use a processor that is not included with MiNiFi.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: To use MiNiFi, you will need an older version of NiFi. The current tool – 0.5.0
    – breaks because of changes to properties output from the `nifi` template. It
    will be fixed in 0.6.0, but until then, you will need to use at least version
    1.9.0 of NiFi. You can get older NiFi versions at [https://archive.apache.org/dist/nifi/1.9.0/](https://archive.apache.org/dist/nifi/1.9.0/).
    Unzip NiFi using the `tar` command with the `-xvzf` flags. Place the folder in
    your home directory using `mv` or your file explorer tools.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need an older version of Java. To install the correct version
    of Java, use the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Lastly, you will also need to make sure that NiFi is configured to allow site-to-site
    connections. In a terminal, go to `$NIFI_HOME/conf` and open the `nifi.properties`
    file. Scrolling about halfway down the file, you will see the `Site to Site properties`
    section. In my file, `nifi.remote.input.socket.port` is blank. If there is not
    a port specified, edit the file so that the port is `1026`, as shown in the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Site-to-site properties with input.socket.port set to 1026'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B15739.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – Site-to-site properties with input.socket.port set to 1026
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Next, start NiFi and create an input port to connect MiNiFi with NiFi. Drag
    and drop the input port to the canvas and name it `minifi`. Data from MiNiFi will
    enter NiFi through this port.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the input port to a data pipeline. The pipeline is shown in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Data pipeline to consume MiNiFi data and write to file on the
    NiFi host'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.4_B15739.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.4 – Data pipeline to consume MiNiFi data and write to file on the
    NiFi host
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 将 MiNiFi 数据消费并写入 NiFi 主机上的文件的数据管道
- en: 'To build the data pipeline, take the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建数据管道，请按照以下步骤操作：
- en: Drag and drop the `EvaluteJsonPath` processor to the canvas. Configure the `flowfile-attribute`.
    Create a new property named `fname` and set the value to `$.fname`. This will
    be in the JSON received from MiNiFi.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `EvaluteJsonPath` 处理器拖放到画布上。配置 `flowfile-attribute`。创建一个名为 `fname` 的新属性，并将其值设置为
    `$.fname`。这将来自 MiNiFi 的 JSON 接收到的信息。
- en: Drag and drop the `UpdateAttribute` processor to the canvas. Create a new property
    named `filename` and set the value to `${fname}`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UpdateAttribute` 处理器拖放到画布上。创建一个名为 `filename` 的新属性，并将其值设置为 `${fname}`。
- en: Drag and drop the `PutFile` processor to the canvas. Set the `/home/paulcrickard/output`.
    Leave the other properties as the defaults.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `PutFile` 处理器拖放到画布上。设置 `/home/paulcrickard/output`。将其他属性保留为默认值。
- en: The preceding steps create the connection from MiNiFi to NiFi, but right now,
    we do not have a data pipeline for MiNiFi. To create the MiNiFi data pipeline,
    drag and drop a processor group to the canvas and name it `minifitask`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤创建了从 MiNiFi 到 NiFi 的连接，但到目前为止，我们还没有为 MiNiFi 创建数据管道。要创建 MiNiFi 数据管道，将处理器组拖放到画布上，并将其命名为
    `minifitask`。
- en: Inside the processor group, drag and drop the `GenerateFlowfile` processor to
    the canvas. On the `30 sec`. Set the `{"fname":"minifi.txt","body":"Some text"}`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理器组内部，将 `GenerateFlowfile` 处理器拖放到画布上。在 `30 sec` 上设置 `{"fname":"minifi.txt","body":"Some
    text"}`。
- en: 'Next, you will add a `http://localhost:9300` and the `HTTP`. Leave the rest
    as the defaults, or blank. The settings should look as in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将添加 `http://localhost:9300` 和 `HTTP`。其余部分保留为默认值或留空。设置应如图下截图所示：
- en: '![Figure 15.5 – Remote processor group configuration](img/Figure_15.5_B15739.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 15.5 – Remote processor group configuration](img/Figure_15.5_B15739.jpg)'
- en: Figure 15.5 – Remote processor group configuration
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 远程处理器组配置
- en: 'Connect the `GenerateFlowFile` processor to **Remote Processor Group**. The
    **Create Connection** popup will allow you to select the input port as **To Input**.
    It would have guessed correctly and chosen MiNiFi. If not, use the dropdown to
    select the MiNiFi port you created in the previous steps. Once the processors
    are connected, right-click on **Remote Processor Group** and select **Enable Transmission**.
    The icon should now be a blue circle, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `GenerateFlowFile` 处理器连接到 **远程处理器组**。**创建连接** 弹出窗口将允许您选择输入端口为 **To Input**。它应该正确猜测并选择
    MiNiFi。如果不是，请使用下拉菜单选择您在上一步骤中创建的 MiNiFi 端口。一旦处理器连接，右键单击 **远程处理器组** 并选择 **启用传输**。图标现在应该是一个蓝色圆圈，如图下截图所示：
- en: '![Figure 15.6 – MiNiFi data pipeline to a remote processor group'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 15.6 – MiNiFi data pipeline to a remote processor group]'
- en: '](img/Figure_15.6_B15739.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_15.6_B15739.jpg]'
- en: Figure 15.6 – MiNiFi data pipeline to a remote processor group
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 将 MiNiFi 数据管道连接到远程处理器组
- en: The MiNiFi data pipeline is complete. To make sure it is runnable on MiNiFi,
    you need to transform it. To transform it, you will need to export it as a template.
    To create the template, exit the processor group. Right-click on the processor
    group, then select `minifitask` template by clicking the download icon to the
    right of the table. This will download an XML version of the data pipeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MiNiFi 数据管道已完成。为了确保它可以在 MiNiFi 上运行，您需要对其进行转换。要转换它，您需要将其导出为模板。要创建模板，退出处理器组。右键单击处理器组，然后通过点击表格右侧的下载图标选择
    `minifitask` 模板。这将下载数据管道的 XML 版本。
- en: 'To transform the template, you will run `config.sh` in the MiNiFi toolkit.
    I have made a `minifi-templates` folder in my home directory. Changing directories
    to `$MINIFI_HOME`, run the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换模板，您需要在 MiNiFi 工具包中运行 `config.sh`。我在我的主目录中创建了一个 `minifi-templates` 文件夹。切换到
    `$MINIFI_HOME` 目录，运行以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If everything worked properly, you should get a message like the one shown
    in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常工作，你应该会收到如下截图所示的类似消息：
- en: '![Figure 15.7 – minifi-toolkit transforming the XML template into a YML file'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 15.7 – minifi-toolkit transforming the XML template into a YML file]'
- en: '](img/Figure_15.7_B15739.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_15.7_B15739.jpg]'
- en: Figure 15.7 – minifi-toolkit transforming the XML template into a YML file
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – minifi-toolkit 将 XML 模板转换为 YML 文件
- en: You will now have a `config.yml` file in your `minifi-templates` directory.
    Copy this file to the `$MINIFI_HOME/conf` directory. You can overwrite the existing
    `config.yml` file that came with MiNiFi.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将在`minifi-templates`目录中有一个`config.yml`文件。将此文件复制到`$MINIFI_HOME/conf`目录。你可以覆盖MiNiFi附带的原有`config.yml`文件。
- en: 'From the `$MINIFI_HOME/bin` directory, you can start `minifi` and it will read
    your `config.yml` file when it does. Use the following command to start MiNiFi:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从`$MINIFI_HOME/bin`目录，你可以启动`minifi`，当它启动时将读取你的`config.yml`文件。使用以下命令来启动MiNiFi：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your MiNiFi data pipeline is now running. You can view the logs at `$MINIFI_HOME/logs/minifi-app.log`.
    But you can also now open NiFi and look at the data streaming in from MiNiFi through
    the `FromMinifi` input port. Your NiFi data pipeline should look as in the following
    screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的MiNiFi数据管道现在正在运行。你可以在`$MINIFI_HOME/logs/minifi-app.log`中查看日志。但你现在也可以打开NiFi，通过`FromMinifi`输入端口查看从MiNiFi流进来的数据。你的NiFi数据管道应该看起来如下截图所示：
- en: '![Figure 15.8 – The data pipeline receiving data on the input port from MiNiFi'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 15.8 – The data pipeline receiving data on the input port from MiNiFi'
- en: '](img/Figure_15.8_B15739.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_15.8_B15739.jpg](img/Figure_15.8_B15739.jpg)'
- en: Figure 15.8 – The data pipeline receiving data on the input port from MiNiFi
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8 – 从MiNiFi输入端口接收数据的管道
- en: You will notice that the processor group you used to create the template is
    stopped. The data is coming from MiNiFi into the NiFi instance and being processed
    and saved to the disk of the NiFi machine. The MiNiFi machine only sends data,
    which allows it to not be overwhelmed with trying to run a version of NiFi locally
    or to have to make remote connections to other machines to write out files at
    intervals. Streaming data can be sent from the MiNiFi machine to NiFi.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到你用来创建模板的处理器组已经停止。数据正从MiNiFi流入NiFi实例，并被处理并保存到NiFi机器的磁盘上。MiNiFi机器只发送数据，这允许它不会因为尝试在本地运行NiFi的版本或需要定期与其他机器建立远程连接来写入文件而超负荷。可以从MiNiFi机器向NiFi发送流数据。
- en: Once the MiNiFi data is streaming into NiFi, you have the full range of tools
    available to you to process this data. You could send it to a Kafka topic, as
    shown in [*Chapter 13*](B15739_13_ePub_AM.xhtml#_idTextAnchor140), *Streaming
    Data with Kafka*, and make it available to many other tools listening on the topic.
    MiNiFi opens up the possibility of capturing data from small devices.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦MiNiFi数据流进入NiFi，你将拥有处理这些数据的全部工具。你可以将其发送到如[*第13章*](B15739_13_ePub_AM.xhtml#_idTextAnchor140)中所示的主题，即使用Kafka的*流式数据*，并使其对监听该主题的许多其他工具可用。MiNiFi开启了从小型设备捕获数据的可能性。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how MiNiFi provides a means by which you can stream
    data to a NiFi instance. With MiNiFi, you can capture data from sensors, smaller
    devices such as a Raspberry Pi, or on regular servers where the data lives, without
    needing a full NiFi install. You learned how to set up and configure a remote
    processor group that allows you to talk to a remote NiFi instance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了MiNiFi提供了一种方法，通过它可以流式传输数据到NiFi实例。使用MiNiFi，你可以从传感器、如树莓派等较小的设备，或数据所在的传统服务器捕获数据，而无需安装完整的NiFi。你学习了如何设置和配置远程处理器组，允许你与远程NiFi实例通信。
- en: In the [*Appendix*](B15739_16_ePub_AM.xhtml#_idTextAnchor163), you will learn
    how you can cluster NiFi to run your data pipelines on different machines so that
    you can further distribute the load. This will allow you to reserve servers for
    specific tasks, or to spread large amounts of data horizontally across the cluster.
    By combining NiFi, Kafka, and Spark into clusters, you will be able to process
    more data than any single machine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*附录*](B15739_16_ePub_AM.xhtml#_idTextAnchor163)中，你将学习如何对NiFi进行集群以在不同的机器上运行你的数据管道，以便你可以进一步分散负载。这将允许你为特定任务保留服务器，或将大量数据水平地跨集群分散。通过将NiFi、Kafka和Spark组合成集群，你将能够处理比任何单个机器更多的数据。
