["```py\n<script type=\"text/javascript\">\n// First we define the chart object using a functional objectfunction lineChart() { // <-1A\n...\n    // main render function \n    _chart.render = function () { // <-2A\n    ...\n    };\n\n    // axes rendering function\n    function renderAxes(svg) {\n    ...\n    }\n  ...\n\n    // function to render chart body\n    function renderBody(svg) { // <-2D        \n    ...\n    }\n\n    // function to render lines\n    function renderLines() {\n    ...\n    }\n\n // function to render data points\n    function renderDots() {\n\n    }\n\n    return _chart; // <-1E\n}\n```", "```py\nfunction lineChart() { // <-1A\n  var _chart = {};\n\n  var _width = 600, _height = 300, // <-1B\n    _margins = {top: 30, left: 30, right: 30, bottom: 30},\n    _x, _y,\n    _data = [],\n    _colors = d3.scale.category10(),\n    _svg,\n    _bodyG,\n    _line;\n  ...\n  _chart.height = function (h) {// <-1C\n    if (!arguments.length) return _height;\n    _height = h;\n    return _chart;\n  };\n\n  _chart.margins = function (m) {\n    if (!arguments.length) return _margins;\n    _margins = m;\n    return _chart;\n  };\n...\n  _chart.addSeries = function (series) { // <-1D\n    _data.push(series);\n    return _chart;\n  };\n...\n   return _chart; // <-1E\n}\n\n...\n\nvar chart = lineChart()\n  .x(d3.scale.linear().domain([0, 10]))\n  .y(d3.scale.linear().domain([0, 10]));\n\ndata.forEach(function (series) {\n  chart.addSeries(series);\n});\n\nchart.render();\n```", "```py\n    _chart.render = function () { // <-2A\n      if (!_svg) {\n        _svg = d3.select(\"body\").append(\"svg\") // <-2B\n          .attr(\"height\", _height)\n          .attr(\"width\", _width);\n\n        renderAxes(_svg);\n\n        defineBodyClip(_svg);\n      }\n\n      renderBody(_svg);\n    };\n    ...\n    function defineBodyClip(svg) { // <-2C\n      var padding = 5;\n\n      svg.append(\"defs\")\n        .append(\"clipPath\")\n        .attr(\"id\", \"body-clip\")\n        .append(\"rect\")\n        .attr(\"x\", 0 - padding)\n        .attr(\"y\", 0)\n        .attr(\"width\", quadrantWidth() + 2 * padding)\n        .attr(\"height\", quadrantHeight());\n      }\n\n    function renderBody(svg) { // <-2D\n      if (!_bodyG)\n        _bodyG = svg.append(\"g\")\n          .attr(\"class\", \"body\")\n          .attr(\"transform\", \"translate(\" \n            + xStart() + \",\" \n            + yEnd() + \")\") // <-2E\n          .attr(\"clip-path\", \"url(#body-clip)\");        \n\n      renderLines();\n\n      renderDots();\n    }\n    ...\n    ```", "```py\n    function renderAxes(svg) { // <-3A\n      var axesG = svg.append(\"g\")\n        .attr(\"class\", \"axes\");\n\n      renderXAxis(axesG);\n\n      renderYAxis(axesG);\n    }\n    ```", "```py\n    function renderLines() { \n      _line = d3.svg.line() // <-4A\n        .x(function (d) { return _x(d.x); })\n        .y(function (d) { return _y(d.y); });\n\n      _bodyG.selectAll(\"path.line\")\n        .data(_data)\n        .enter() // <-4B\n        .append(\"path\")                \n        .style(\"stroke\", function (d, i) { \n          return _colors(i); // <-4C\n        })\n        .attr(\"class\", \"line\");\n\n      _bodyG.selectAll(\"path.line\")\n        .data(_data)\n        .transition() // <-4D\n        .attr(\"d\", function (d) { return _line(d); });\n    }\n\n    function renderDots() {\n      _data.forEach(function (list, i) {\n        _bodyG.selectAll(\"circle._\" + i) // <-4E\n          .data(list)\n          .enter()\n          .append(\"circle\")\n          .attr(\"class\", \"dot _\" + i);\n\n        _bodyG.selectAll(\"circle._\" + i)\n          .data(list)                    \n          .style(\"stroke\", function (d, i) { \n            return _colors(i); // <-4F\n          })\n          .transition() // <-4G\n          .attr(\"cx\", function (d) { return _x(d.x); })\n          .attr(\"cy\", function (d) { return _y(d.y); })\n          .attr(\"r\", 4.5);\n        });\n    }\n    ```", "```py\n...\nfunction renderBody(svg) {\n  if (!_bodyG)\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\")\n      .attr(\"transform\", \"translate(\" \n        + xStart() + \",\" \n        + yEnd() + \")\") \n      .attr(\"clip-path\", \"url(#body-clip)\");        \n\n  renderLines();\n\n  renderAreas();\n\n  renderDots();\n}\n\nfunction renderLines() {\n  _line = d3.svg.line()\n    .x(function (d) { return _x(d.x); })\n    .y(function (d) { return _y(d.y); });\n\n  _bodyG.selectAll(\"path.line\")\n    .data(_data)\n    .enter()\n    .append(\"path\")\n    .style(\"stroke\", function (d, i) { \n      return _colors(i); \n    })\n    .attr(\"class\", \"line\");\n\n  _bodyG.selectAll(\"path.line\")\n    .data(_data)\n    .transition()\n    .attr(\"d\", function (d) { return _line(d); });\n}\n\nfunction renderDots() {\n  _data.forEach(function (list, i) {\n    _bodyG.selectAll(\"circle._\" + i)\n      .data(list)\n      .enter().append(\"circle\")\n      .attr(\"class\", \"dot _\" + i);\n\n    _bodyG.selectAll(\"circle._\" + i)\n      .data(list)\n      .style(\"stroke\", function (d, i) { \n        return _colors(i); \n      })\n      .transition()\n      .attr(\"cx\", function (d) { return _x(d.x); })\n      .attr(\"cy\", function (d) { return _y(d.y); })\n      .attr(\"r\", 4.5);\n  });\n}\n\nfunction renderAreas() {\n var area = d3.svg.area() // <-A\n .x(function(d) { return _x(d.x); })\n .y0(yStart())\n .y1(function(d) { return _y(d.y); });\n\n _bodyG.selectAll(\"path.area\")\n .data(_data)\n .enter() // <-B\n .append(\"path\")\n .style(\"fill\", function (d, i) { \n return _colors(i); \n })\n .attr(\"class\", \"area\");\n\n _bodyG.selectAll(\"path.area\")\n .data(_data)\n .transition() // <-C\n .attr(\"d\", function (d) { return area(d); });\n}\n...\n```", "```py\nvar area = d3.svg.area() // <-A\n  .x(function(d) { return _x(d.x); })\n  .y0(yStart())\n  .y1(function(d) { return _y(d.y); });\n```", "```py\n_bodyG.selectAll(\"path.area\")\n  .data(_data)\n  .enter() // <-B\n  .append(\"path\")\n  .style(\"fill\", function (d, i) { \n    return _colors(i); // <-C\n  })\n  .attr(\"class\", \"area\");\n```", "```py\n_bodyG.selectAll(\"path.area\")\n  .data(_data)\n  .transition() // <-D\n  .attr(\"d\", function (d) { \n    return area(d); // <-E\n  });\n```", "```py\n.area {\n    stroke: none;\n    fill-opacity: .2;\n}\n```", "```py\n...\n_symbolTypes = d3.scale.ordinal() // <-A\n  .range([\"circle\",\n    \"cross\",\n    \"diamond\",\n    \"square\",\n    \"triangle-down\",\n    \"triangle-up\"]);\n...\nfunction renderBody(svg) {\n  if (!_bodyG)\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\")                    \n      .attr(\"transform\", \"translate(\" \n        + xStart() + \",\" \n        + yEnd() + \")\") \n      .attr(\"clip-path\", \"url(#body-clip)\");\n\n  renderSymbols();\n}\n\nfunction renderSymbols() { // <-B\n  _data.forEach(function (list, i) {\n    _bodyG.selectAll(\"path._\" + i)\n      .data(list)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"symbol _\" + i);\n\n    _bodyG.selectAll(\"path._\" + i)\n      .data(list)\n      .classed(_symbolTypes(i), true)\n      .transition()\n      .attr(\"transform\", function(d){\n        return \"translate(\"\n          + _x(d.x)\n          + \",\"\n          + _y(d.y)\n          + \")\";\n      })\n      .attr(\"d\", \n    d3.svg.symbol().type(_symbolTypes(i)));\n  });\n}\n...\n```", "```py\n_symbolTypes = d3.scale.ordinal() // <-A\n  .range([\"circle\",\n    \"cross\",\n    \"diamond\",\n    \"square\",\n    \"triangle-down\",\n    \"triangle-up\"]);\n```", "```py\n_data.forEach(function (list, i) {\n  _bodyG.selectAll(\"path._\" + i)\n    .data(list)\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", \"symbol _\" + i);\n    ...\n});\n```", "```py\n_bodyG.selectAll(\"path._\" + i)\n  .data(list)\n    .classed(_symbolTypes(i), true)\n  .transition() // <-C\n    .attr(\"transform\", function(d){\n      return \"translate(\" // <-D\n        + _x(d.x) \n        + \",\" \n        + _y(d.y) \n        + \")\";\n    })\n    .attr(\"d\", \n      d3.svg.symbol() // <-E\n      .type(_symbolTypes(i))\n  );\n```", "```py\n...\nvar _width = 600, _height = 300,\n  _margins = {top: 30, left: 30, right: 30, bottom: 30},\n  _x, _y, _r, // <-A\n  _data = [],\n  _colors = d3.scale.category10(),\n  _svg,\n  _bodyG;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"height\", _height)\n      .attr(\"width\", _width);\n\n    renderAxes(_svg);\n\n    defineBodyClip(_svg);\n  }\n\n  renderBody(_svg);\n};\n...\nfunction renderBody(svg) {\n  if (!_bodyG)\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\")\n      .attr(\"transform\", \"translate(\" \n        + xStart() \n        + \",\" \n        + yEnd() + \")\")\n      .attr(\"clip-path\", \"url(#body-clip)\");\n  renderBubbles();\n}\n\nfunction renderBubbles() {\n _r.range([0, 50]); // <-B\n\n _data.forEach(function (list, i) {\n _bodyG.selectAll(\"circle._\" + i)\n .data(list)\n .enter()\n .append(\"circle\") // <-C\n .attr(\"class\", \"bubble _\" + i);\n\n _bodyG.selectAll(\"circle._\" + i)\n .data(list)\n .style(\"stroke\", function (d, j) { \n return _colors(j); \n })\n .style(\"fill\", function (d, j) { \n return _colors(j); \n })\n .transition()\n .attr(\"cx\", function (d) { \n return _x(d.x); // <-D\n })\n .attr(\"cy\", function (d) { \n return _y(d.y); // <-E\n })\n .attr(\"r\", function (d) { \n return _r(d.r); // <-F\n });\n });\n}\n...\n```", "```py\nvar _width = 600, _height = 300,\n  _margins = {top: 30, left: 30, right: 30, bottom: 30},\n  _x, _y, _r, // <-A\n  _data = [],\n  _colors = d3.scale.category10(),\n  _svg,\n  _bodyG;\n```", "```py\nfunction renderBubbles() {\n  _r.range([0, 50]); // <-B\n\n  _data.forEach(function (list, i) {\n    _bodyG.selectAll(\"circle._\" + i)\n      .data(list)\n      .enter()\n      .append(\"circle\") // <-C\n      .attr(\"class\", \"bubble _\" + i);\n\n    _bodyG.selectAll(\"circle._\" + i)\n      .data(list)\n      .style(\"stroke\", function (d, j) { \n        return _colors(j); \n      })\n      .style(\"fill\", function (d, j) { \n        return _colors(j); \n      })\n      .transition()\n      .attr(\"cx\", function (d) { \n        return _x(d.x); // <-D\n      })\n      .attr(\"cy\", function (d) { \n        return _y(d.y); // <-E\n      })\n      .attr(\"r\", function (d) { \n        return _r(d.r); // <-F\n      });\n  });\n}\n```", "```py\n...\nvar _width = 600, _height = 250,\n  _margins = {top: 30, left: 30, right: 30, bottom: 30},\n  _x, _y,\n  _data = [],\n  _colors = d3.scale.category10(),\n  _svg,\n  _bodyG;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"height\", _height)\n        .attr(\"width\", _width);\n\n    renderAxes(_svg);\n\n    defineBodyClip(_svg);\n  }\n\n  renderBody(_svg);\n};\n...\nfunction renderBody(svg) {\n  if (!_bodyG)\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\")\n      .attr(\"transform\", \"translate(\" \n        + xStart() \n        + \",\" \n        + yEnd() + \")\")\n      .attr(\"clip-path\", \"url(#body-clip)\");\n\n  renderBars();\n  }\n\nfunction renderBars() {\n var padding = 2; // <-A\n\n _bodyG.selectAll(\"rect.bar\")\n .data(_data)\n .enter()\n .append(\"rect\") // <-B\n .attr(\"class\", \"bar\");\n\n _bodyG.selectAll(\"rect.bar\")\n .data(_data) \n .transition()\n .attr(\"x\", function (d) { \n return _x(d.x); // <-C\n })\n .attr(\"y\", function (d) { \n return _y(d.y); // <-D \n })\n .attr(\"height\", function (d) { \n return yStart() - _y(d.y); // <-E\n })\n .attr(\"width\", function(d){\n return Math.floor(quadrantWidth() / _data.length) - padding;\n });\n}\n...\n```", "```py\nfunction renderBars() {\n  var padding = 2; // <-A\n  ...\n}\n```", "```py\n_bodyG.selectAll(\"rect.bar\")\n  .data(_data)\n  .enter()\n  .append(\"rect\") // <-B\n  .attr(\"class\", \"bar\");\n```", "```py\n_bodyG.selectAll(\"rect.bar\")\n  .data(_data)\n  .transition()\n  .attr(\"x\", function (d) { \n    return _x(d.x); // <-C\n  })\n  .attr(\"y\", function (d) { \n    return _y(d.y); // <-D \n  })\n  .attr(\"height\", function (d) { \n    return yStart() - _y(d.y); // <-E\n  })\n```", "```py\n.attr(\"width\", function(d){\n  return Math.floor(quadrantWidth() / _data.length) - padding;\n});\n```"]