- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ecological Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll introduce some methods commonly used in ecological data
    collection and then explore graph-theoretic clustering methods that can parse
    out animal populations across monitored geographic areas. This is a very common
    problem within ecological research, as populations of animals migrate and overlap
    with other populations of animals. In addition, parsing out healthy and unhealthy
    ecosystems is a common survey task for conservation and urban planning. We’ll
    analyze two types of ecological data with **spectral clustering** to find groups
    within snake capture count and ecological survey text data.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll understand how to apply spectral clustering
    to find groups on networks. You’ll also see how different implementations of spectral
    clustering can be formulated, with some algorithms scaling better to large networks
    than other algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ecological data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spectral graph tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started with some background on ecological problems.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will require Jupyter Notebook to run the practical examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python](https://github.com/PacktPublishing/Modern-Graph-Theory-Algorithms-with-Python)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ecological data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Environmental research plays a large role in conservation strategy, climate
    change monitoring, and farming practices. Data collected might include data on
    plant type distributions and densities, animal migration patterns, or extent of
    disease. For instance, farmers may wish to track crop disease across large farms
    to monitor potential threats to their annual yield from various crops. Conservationists
    may wish to track endangered animal populations as they migrate through a national
    park to deploy anti-poaching resources to areas with large native or migratory
    populations. Let’s first explore some data collection methods.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring methods to track animal populations across geographies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Animal populations are frequently mobile, with seasonal changes, weather events,
    and human interactions driving the movement of animals from one geographic location
    to another. One of the largest mass migrations of animals occurs in the grasslands
    of East Africa, where millions of herd animals (such as wildebeests and zebras)
    trek from the Serengeti to Masai Mara back to the Serengeti each year as rains
    come and go (*Figure 5**.1*). Poaching not only harms animal populations but often
    fuels other illegal activities, creating problems locally and internationally;
    understanding migration patterns on the borders of protected areas can position
    resources to stem poaching:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.1 – \uFEFFAn illustration of a zebra herd as the rainy season begins](img/B21087_05_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – An illustration of a zebra herd as the rainy season begins
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to monitor a population’s movement across geographies. One
    way involves tagging animals with satellite tracking tags that upload location
    data for each tagged animal. This allows researchers to construct paths for each
    animal and aggregate results across tagged populations (which might include only
    one species or several species of interest). For instance, in the zebra herd,
    perhaps a conservation team has tagged 10 of the zebras prior to the rainy season
    with tags that will track the zebras’ location each hour for a period of several
    weeks. While we would expect all 10 animals to follow the same general path from
    one park to the next, individuals may migrate at different paces, take slightly
    different routes, or stop for food and water in different locations. This data
    allows researchers to identify subpopulations within the herd whose behavior deviates
    from the herd’s majority.
  prefs: []
  type: TYPE_NORMAL
- en: Another common method to track animal populations across geographies is to use
    trap cameras hidden in locations that are likely to be frequented by species of
    interest (such as watering holes, clearings in forests, or healthy coral reefs).
    For instance, suppose public health officials have noticed an increase in king
    cobra bites in villages near the Atrai River in Bangladesh (*Figure 5**.2*) and
    would like to understand the local king cobra population to enact policies to
    prevent humans and cobras from interacting.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps work hours can be adjusted to keep agricultural workers from areas frequented
    by king cobras at certain times of day or seasons. Officials can set the trap
    cameras in areas where bites have become more common to capture images of cobras
    throughout the lifetime of the film used in the trap camera. Several cameras are
    set throughout the area of interest according to bite densities, and species of
    venomous snakes, including king cobras, are tracked by time of day, species, and
    number of individual snakes identified by each camera. Data then informs policies
    regarding population movement and snake control strategies to mitigate the threat
    to public safety.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.2 – \uFEFFAn illustration of king cobra in rural Bangladesh](img/B21087_05_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – An illustration of king cobra in rural Bangladesh
  prefs: []
  type: TYPE_NORMAL
- en: Exploring methods to capture plant distributions and diseases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data capture on plant distributions and diseases involves a different sort of
    approach, as plants generally are not moving across geographies. Manual data collection
    requires human discernment of plant species and diseases, which may be unreliable
    and will take long periods of time to capture meaningful data. However, autonomous
    vehicles and drones offer a way to capture images and videos of plants across
    wide geographic areas, which can be processed with **convolutional neural networks**
    (**CNNs**) trained on plant image data of species native to the study area. For
    instance, Colombian farmers may want to identify instances of coffee rust early
    to avoid crop loss by running a coffee rust classifier CNN on drone or rover data
    captured weekly across their regional farms (example shown in *Figure 5**.3*).
    Images showing potential coffee rust could trigger a system alert that provides
    a geographic location on the farm or plant identification number to farmers.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.3 – \uFEFFAn illustration of a coffee plant image to scan for coffee\
    \ rust on a Colombian farm](img/B21087_05_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – An illustration of a coffee plant image to scan for coffee rust
    on a Colombian farm
  prefs: []
  type: TYPE_NORMAL
- en: However, the manual documentation of plants can be a useful tool in studies
    of areas with potentially new plant species to identify through fieldwork. Much
    of the Congo and Amazon basins are relatively unexplored, and identifying potential
    new plant species may yield insights into an important part of the ecosystem,
    possible medications to treat human diseases, or the identification of threats
    from an invasive species.
  prefs: []
  type: TYPE_NORMAL
- en: Invasive plants may threaten an ecosystem. New species may herald discoveries
    of new chemical compounds. Let’s consider a botanist doing fieldwork in the Amazon
    who comes across a new type of mushroom that she hasn’t seen before (*Figure 5**.4*).
    To confirm that this is a new mushroom species, our botanist would take photographs,
    collect a sample for genetic analysis, and log the ecosystem in which she encountered
    the mushroom.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.4 – \uFEFFAn illustration of a potentially new species of mushroom](img/B21087_05_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – An illustration of a potentially new species of mushroom
  prefs: []
  type: TYPE_NORMAL
- en: All of these data collection methods create spatial data, where some areas may
    or may not be physically located next to each other. Species found in groups of
    geographic areas that are far from each other likely correspond to distinct populations
    that will be impacted by different human and environmental factors. Treating this
    data as spatial data and applying a few tools from graph theory can help parse
    out subpopulations of interest within ecological data analytics.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, collecting biological samples of plants or placing tracking tags
    on animals is not feasible. However, drones and other autonomous vehicles can
    snap pictures of flora and fauna in a region (*Figure 5**.5*), allowing researchers
    to identify species from the images through a special type of deep learning algorithm
    and build a network from the deep learning results.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.5 – \uFEFFAn illustration of a forest stream, from which flora can\
    \ be identified through deep-learning algorithms](img/B21087_05_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – An illustration of a forest stream, from which flora can be identified
    through deep-learning algorithms
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to collect ecological data, let’s explore a few tools from
    graph theory that will help us analyze ecological data that has been collected
    across different geographical regions.
  prefs: []
  type: TYPE_NORMAL
- en: Spectral graph tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **adjacency matrix** and **degree of vertices** in the adjacency matrix
    contain information about the connectivity of vertices within the network. For
    an undirected network, the **Laplacian matrix** of the network is found by subtracting
    the adjacency matrix from the degree matrix (i.e., *L = D - A*, where *D* is the
    degree matrix and *A* is the adjacency matrix). This matrix contains information
    about many important properties of the network, including the number of connected
    components, the sparsest cut that can separate the network into separate components,
    and the strength of connection within the network overall.
  prefs: []
  type: TYPE_NORMAL
- en: '**Connectivity** is an important concept in graph theory. A **connected network**
    is one in which there is a path between all pairs of vertices; a **disconnected
    network** is one in which some vertices do not have paths to all other vertices.
    Connected networks can be separated by cutting edges; the **minimum cut set**
    is the set of the fewest edges that need to be removed to separate a network into
    two pieces to disconnect a connected network. Not only do these values connect
    to theoretical results in graph theory related to spreading processes and other
    differential equations defined on the network, but this information also tells
    us about how to separate groups on the network.'
  prefs: []
  type: TYPE_NORMAL
- en: To obtain this information, we need to perform a decomposition on the Laplacian
    matrix to obtain eigenvectors and eigenvalues (the network spectrum). Sometimes,
    we normalize the Laplacian matrix first; in spectral clustering, this is less
    of a necessity than when computing specific graph theoretic values from the spectrum.
    Then, we find the Laplacian matrix’s eigenvalues and eigenvectors. In practice,
    this is done through an algorithm rather than through linear algebra operations
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: The second eigenvalue obtained from this process corresponds to the **Fiedler
    value** (also termed **algebraic connectivity**); this value calculates how many
    connected components exist in the network and relates to the robustness of the
    network. The corresponding eigenvector partitions the network into separate networks,
    thus providing a two-cluster solution to partitioning groups on the network. In
    spectral clustering, this process of partitioning a network into two separate
    networks can be repeated until a predefined stopping point is reached (such as
    a total number of clusters).
  prefs: []
  type: TYPE_NORMAL
- en: Spectral clustering on spatial networks constructed from ecological data allows
    researchers to partition out areas in which animals migrate, distinguish populations
    that might be isolated, and catalog differences in vegetation type or crop disease.
    Let’s set up a simple example and explore different ways to compute spectral clustering.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering ecological populations using spectral graph tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider a researcher in Gabon hoping to understand the interconnectivity of
    Gaboon viper populations in a protected area of Loango National Park (*Figure
    5**.6*). Snakes are tagged in seven regions of the park (represented by a vertex),
    and their tags record their location for the next month. Snakes often will move
    between regions if their habitat overlaps with multiple regions. It’s possible
    that multiple populations of snakes exist, giving different territories for different
    populations of snakes. If the two regions share a regional population, then the
    two vertices corresponding to these regions will have an edge. If no snakes migrate
    between regions, two vertices will not share an edge and likely represent different
    populations. Isolated populations tend to be more vulnerable to climate change,
    poaching, and habitat loss; understanding species and individual population ranges
    is critical to conservation efforts.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 5.6 – \uFEFFAn illustration of a \uFEFFGaboon viper on the forest\
    \ floor](img/B21087_05_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – An illustration of a Gaboon viper on the forest floor
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create some data on our snake population movements with `Script 5.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In practice, geographic regions rarely share borders with all other regions
    in a dataset. `Script 5.1` spatial weighting component (weights total) to our
    adjacency matrix of snake overlap (`adj_mat`) to derive a weighted adjacency matrix
    (`adj_mat_w`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create and explore our degree matrix, as well as our Laplacian matrix
    (subtracting the adjacency matrix from the degree matrix). Let’s add this information
    to `Script 5.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The degree matrix encodes the number of vertices connected to a given vertex
    and serves as a basic measure of centrality. Hubs have high degree scores, while
    more isolated regions might have a degree of zero or one. Our network of snake
    population overlap has similar degree centrality measures across the entire network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now look at the Laplacian matrix, which encodes the connectivity information
    we’ll use in our spectral decomposition and clustering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'There are multiple ways we can compute the Fielder vector to get our spectral
    clustering results. We’ll go through two ways to compute this with Python. You
    may need to replace `nx.from_numpy_matrix` with `nx.from_numpy_array`, depending
    on your version of NetworkX. Depending on the size of the problem, it may be easier
    to use a linear algebra solver similar to the one we added to Script 5.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows two distinct snake populations that converge to the sixth region
    of our Loango National Park sampling area (along with snakes staying in the exact
    same area, noted by loops), as shown in *Figure 5**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Spectral clustering of snake populations](img/B21087_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Spectral clustering of snake populations
  prefs: []
  type: TYPE_NORMAL
- en: 'Scikit-learn provides a spectral clustering package, which we provide as an
    alternative calculation method by adding to `Script 5.1`. If you encounter a warning
    message on Windows, don’t be alarmed; it is not an error. Let’s add to `Script`
    `5.1` now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, the scikit-learn package produces the same partitioning of the
    network (*Figure 5**.8*) as our linear algebra approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Scikit-learn spectral clustering of snake populations](img/B21087_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Scikit-learn spectral clustering of snake populations
  prefs: []
  type: TYPE_NORMAL
- en: Spectral clustering is not limited to network data or ecological data. Any numeric
    dataset can be clustered using spectral clustering. In image and text analytics,
    we often don’t have many instances of pre-labeled data, and manually annotating
    data is time consuming and can miss important classes in the dataset if they don’t
    happen to be in a small sample for someone to score manually. Spectral clustering
    allows us to embed data through tools in these fields, create a network based
    on nearest neighbors, and apply spectral clustering to obtain labels for a dataset
    that can then be used to train a classification algorithm. This process is termed
    **semi-supervised learning**, and real-world data science in natural language
    processing and image analytics often relies on this methodology to build classification
    models from datasets. Let’s see this in action by considering a text-based ecological
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Spectral clustering on text notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider a dataset of ecological notes, including five healthy and five
    unhealthy local parks. While these notes are not as extensive as a full ecological
    survey, they should demonstrate how to create a semi-supervised learning pipeline
    to classify ecosystem health. Here is one example of a healthy ecosystem in the
    notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of an unhealthy ecosystem in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'While we could annotate these notes ourselves, we’ll use spectral clustering
    to see how semi-supervised learning can be used to generate training data labels
    for much larger datasets where annotation might be unfeasible or unreliable. First,
    we’ll import our data with `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To embed our data, we’ll use a `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have embedded our data, we can create our nearest neighbors graph.
    Since we have such a small sample size, we’ll consider a point’s three nearest
    neighbors by adding to `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’re ready to run our spectral clustering and examine how our data clusters
    in this algorithm. Let’s add to `Script 5.2` to see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'From our printed labels, we can see that ecosystems `3`, `7`, `8`, and `10`
    form one cluster, while ecosystems `1`, `2`, `4`, `5`, `6`, `7`, and `9` form
    the other. Let’s look at our sample of notes to see how well this method found
    differences in tone or theme by adding to `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that notes `3`, `4`, `7`, `8`, and `10` are unhealthy ecosystems
    compared to the rest of our sample. Spectral clustering doesn’t seem to find all
    of these differences, but it’s possible that another type of text embedding would
    distinguish tone better than the one we selected. It’s also possible that fewer
    neighbors or a larger sample size would provide better results. However, we do
    find four of our five unhealthy ecosystems through our spectral clustering algorithm.
    A human reviewing results would not have to switch many labels (20%) to generate
    correct training labels for this data to be used to train a classification model.
    The second column of our dataset includes correct tone classification labels.
    Let’s convert our BERT embeddings to a DataFrame by adding to `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s split our data into training and test sets (80% and 20% splits,
    respectively), create a *k*-nearest neighbors classifier (which classifies points
    according to the labels of their two nearest neighbors with *k* = 2), and measure
    the test set error by adding to `Script 5.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Our split yields an accuracy of 100%, suggesting no misclassification of ecosystem
    types. Yours may vary given seeds and random number generators on your machine.
    However, this approach seems to work well for this dataset. Our pipeline of processing
    text data via embeddings, deriving a good start to label creation via spectral
    clustering, and then creating a classifier model yielded a high-accuracy classification
    system for our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to collect ecological data for a variety of
    data science problems. After a brief introduction to the theory of spectral clustering,
    we showed how spectral clustering could parse out different animal populations
    through our Gaboon viper distribution example. Finally, we explored spectral clustering
    of nearest neighbor networks that can be used in semi-supervised learning pipelines
    through an ecosystem note data example. In [*Chapter 6*](B21087_06.xhtml#_idTextAnchor078),
    we'll introduce centrality measurements and use them to find tipping points in
    stock pricing.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angelici, F. M., Effah, C., Inyang, M. A., & Luiselli, L. (2000). *A preliminary
    radiotracking study of movements, activity patterns and habitat use of free-ranging
    Gaboon vipers, Bitis gabonica*. *Revue d’Ecologie, Terre et Vie*, *55*(1), 45-55.
  prefs: []
  type: TYPE_NORMAL
- en: 'Corrales, D. C., Figueroa, A., Ledezma, A., & Corrales, J. C. (2015). *An empirical
    multi-classifier for coffee rust detection in Colombian crops*. In *Computational
    Science and Its Applications--ICCSA 2015: 15th International Conference, Banff,
    AB, Canada, June 22-25, 2015, Proceedings, Part I 15* (pp. 60-74). Springer International
    Publishing.'
  prefs: []
  type: TYPE_NORMAL
- en: Froese, G. Z., Ebang Mbélé, A., Beirne, C., Atsame, L., Bayossa, C., Bazza,
    B., ... & Poulsen, J. R. (2022). *Coupling paraecology and hunter GPS self*‐*follows
    to quantify village bushmeat hunting dynamics across the landscape scale*. *African
    Journal of Ecology*, *60* (2), 229-249.
  prefs: []
  type: TYPE_NORMAL
- en: Mutombo, F. K. (2012). *Long-range interactions in* *complex networks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ng, A., Jordan, M., & Weiss, Y. (2001). *On spectral clustering: Analysis and
    an algorithm*. *Advances in neural information processing* *systems*, *14*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nunez‐Mir, G. C., Iannone III, B. V., Pijanowski, B. C., Kong, N., & Fei, S.
    (2016). *Automated content analysis: addressing the big literature challenge in
    ecology and evolution*. *Methods in Ecology and Evolution*, *7* (11), 1262-1272.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Qi, X., Fuller, E., Wu, Q., Wu, Y., & Zhang, C. Q. (2012). *Laplacian centrality:
    A new centrality measure for weighted networks*. *Information Sciences*, *194*,
    240-253.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reimers, N., & Gurevych, I. (2019). *Sentence-bert: Sentence embeddings using
    siamese bert-networks*. *arXiv* *preprint arXiv:1908.10084*.'
  prefs: []
  type: TYPE_NORMAL
- en: White, S., & Smyth, P. (2005, April). *A spectral clustering approach to finding
    communities in graphs*. In *Proceedings of the 2005 SIAM international conference
    on data mining* (pp. 274-285). Society for industrial and applied Mathematics.
  prefs: []
  type: TYPE_NORMAL
