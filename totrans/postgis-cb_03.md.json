["```py\n      postgis_cookbook=# create schema chp03;\n```", "```py\n postgis_cookbook=# CREATE TABLE chp03.rk_track_points \n      ( \n        fid serial NOT NULL, \n        the_geom geometry(Point,4326), \n        ele double precision, \n        \"time\" timestamp with time zone, \n        CONSTRAINT activities_pk PRIMARY KEY (fid) \n      ); \n```", "```py\n        #!/bin/bash \n        for f in `find runkeeper_gpx -name \\*.gpx -printf \"%f\\n\"` \n        do \n          echo \"Importing gpx file $f to chp03.rk_track_points \n                PostGIS table...\" #, ${f%.*}\" \n          ogr2ogr -append -update  -f PostgreSQL\n          PG:\"dbname='postgis_cookbook' user='me'\n          password='mypassword'\" runkeeper_gpx/$f \n          -nln chp03.rk_track_points \n          -sql \"SELECT ele, time FROM track_points\" \n        done \n```", "```py\n        #!/bin/bash \n        for f in `find runkeeper_gpx -name \\*.gpx ` \n        do \n          echo \"Importing gpx file $f to chp03.rk_track_points \n                PostGIS table...\" #, ${f%.*}\" \n          ogr2ogr -append -update  -f PostgreSQL\n          PG:\"dbname='postgis_cookbook' user='me'\n          password='mypassword'\" $f \n          -nln chp03.rk_track_points \n          -sql \"SELECT ele, time FROM track_points\" \n        done \n```", "```py\n        @echo off \n        for %%I in (runkeeper_gpx\\*.gpx*) do ( \n          echo Importing gpx file %%~nxI to chp03.rk_track_points \n               PostGIS table... \n          ogr2ogr -append -update -f PostgreSQL\n          PG:\"dbname='postgis_cookbook' user='me'\n          password='mypassword'\" runkeeper_gpx/%%~nxI \n          -nln chp03.rk_track_points \n          -sql \"SELECT ele, time FROM track_points\" \n        ) \n```", "```py\n      $ chmod 775 import_gpx.sh\n      $ ./import_gpx.sh\n      Importing gpx file 2012-02-26-0930.gpx to chp03.rk_track_points \n        PostGIS table...\n      Importing gpx file 2012-02-29-1235.gpx to chp03.rk_track_points \n        PostGIS table...\n      ...\n      Importing gpx file 2011-04-15-1906.gpx to chp03.rk_track_points \n        PostGIS table...\n\n```", "```py\n      > import_gpx.bat\n```", "```py\n postgis_cookbook=# SELECT \n      ST_MakeLine(the_geom) AS the_geom, \n      run_date::date, \n      MIN(run_time) as start_time, \n      MAX(run_time) as end_time \n      INTO chp03.tracks \n      FROM ( \n        SELECT the_geom, \n        \"time\"::date as run_date, \n        \"time\" as run_time \n        FROM chp03.rk_track_points \n        ORDER BY run_time \n      ) AS foo GROUP BY run_date; \n```", "```py\n postgis_cookbook=# CREATE INDEX rk_track_points_geom_idx \n      ON chp03.rk_track_points USING gist(the_geom); \n      postgis_cookbook=# CREATE INDEX tracks_geom_idx \n      ON chp03.tracks USING gist(the_geom);\n```", "```py\n postgis_cookbook=# SELECT \n        EXTRACT(year FROM run_date) AS run_year, \n        EXTRACT(MONTH FROM run_date) as run_month, \n        SUM(ST_Length(geography(the_geom)))/1000 AS distance \n        FROM chp03.tracks \n        GROUP BY run_year, run_month ORDER BY run_year, run_month; \n```", "```py\n (28 rows) \n```", "```py\n postgis_cookbook=# SELECT \n        c.country_name, \n        SUM(ST_Length(geography(t.the_geom)))/1000 AS run_distance \n      FROM chp03.tracks AS t \n      JOIN chp01.countries AS c \n      ON ST_Intersects(t.the_geom, c.the_geom)\n GROUP BY c.country_name \n      ORDER BY run_distance DESC; \n```", "```py\n (4 rows) \n```", "```py\n$ shp2pgsql -s 4326 -g the_geom -W LATIN1 -I TM_WORLD_BORDERS-0.3.shp chp03.countries > countries.sql\n$ psql -U me -d postgis_cookbook -f countries.sql\n```", "```py\n postgis_cookbook=# SELECT gid, name, ST_IsValidReason(the_geom) \n        FROM chp03.countries \n        WHERE ST_IsValid(the_geom)=false;\n```", "```py\n (4 rows) \n```", "```py\n postgis_cookbook=# SELECT * INTO chp03.invalid_geometries FROM ( \n        SELECT 'broken'::varchar(10) as status,\n ST_GeometryN(the_geom, generate_series(\n          1, ST_NRings(the_geom)))::geometry(Polygon,4326)\n        as the_geom FROM chp03.countries \n        WHERE name = 'Russia') AS foo \n        WHERE ST_Intersects(the_geom, \n          ST_SetSRID(ST_Point(143.661926,49.31221), 4326)); \n```", "```py\n postgis_cookbook=# INSERT INTO chp03.invalid_geometries \n      VALUES ('repaired', (SELECT ST_MakeValid(the_geom) \n      FROM chp03.invalid_geometries)); \n```", "```py\n postgis_cookbook=# SELECT status, ST_NRings(the_geom) \n      FROM chp03.invalid_geometries; \n```", "```py\n (2 rows)\n```", "```py\n postgis_cookbook=# UPDATE chp03.countries \n      SET the_geom = ST_MakeValid(the_geom) \n      WHERE ST_IsValid(the_geom) = false; \n```", "```py\n      $ ogrinfo 2012_Earthquakes_ALL.kml\n```", "```py\n        #!/bin/bash \n        for ((i = 1; i < 9 ; i++)) ; do \n          echo \"Importing earthquakes with magnitude $i \n                to chp03.earthquakes PostGIS table...\" \n          ogr2ogr -append -f PostgreSQL -nln chp03.earthquakes \n          PG:\"dbname='postgis_cookbook' user='me' \n          password='mypassword'\" 2012_Earthquakes_ALL.kml \n          -sql \"SELECT name, description, CAST($i AS integer) \n          AS magnitude FROM \\\"Magnitude $i\\\"\" \n        done \n```", "```py\n        @echo off \n        for /l %%i in (1, 1, 9) do ( \n          echo \"Importing earthquakes with magnitude %%i \n                to chp03.earthquakes PostGIS table...\" \n          ogr2ogr -append -f PostgreSQL -nln chp03.earthquakes \n          PG:\"dbname='postgis_cookbook' user='me' \n          password='mypassword'\" 2012_Earthquakes_ALL.kml \n          -sql \"SELECT name, description, CAST(%%i AS integer) \n          AS magnitude FROM \\\"Magnitude %%i\\\"\" \n        )\n```", "```py\n      $ chmod 775 import_eq.sh\n      $ ./import_eq.sh\n      Importing earthquakes with magnitude 1 to chp03.earthquakes \n        PostGIS table...\n      Importing earthquakes with magnitude 2 to chp03.earthquakes \n        PostGIS table...\n      ...\n```", "```py\n postgis_cookbook=# ALTER TABLE chp03.earthquakes \n      RENAME wkb_geometry  TO the_geom; \n```", "```py\n      $ ogr2ogr -f PostgreSQL -s_srs EPSG:4269 -t_srs EPSG:4326 \n      -lco GEOMETRY_NAME=the_geom -nln chp03.cities\n      PG:\"dbname='postgis_cookbook' user='me'\n      password='mypassword'\" citiesx020.shp\n```", "```py\n      $ ogr2ogr -f PostgreSQL -s_srs EPSG:4269 -t_srs EPSG:4326 \n      -lco GEOMETRY_NAME=the_geom -nln chp03.states -nlt MULTIPOLYGON \n      PG:\"dbname='postgis_cookbook' user='me'\n      password='mypassword'\" statesp020.shp\n```", "```py\n postgis_cookbook=# SELECT s.state, COUNT(*) AS hq_count \n      FROM chp03.states AS s \n        JOIN chp03.earthquakes AS e \n        ON ST_Intersects(s.the_geom, e.the_geom) \n        GROUP BY s.state \n        ORDER BY hq_count DESC; \n```", "```py\n (33 rows)\n```", "```py\n postgis_cookbook=# SELECT c.name, e.magnitude, count(*) as hq_count \n      FROM chp03.cities AS c \n        JOIN chp03.earthquakes AS e \n        ON ST_DWithin(geography(c.the_geom), geography(e.the_geom), 200000) \n        WHERE c.pop_2000 > 1000000 \n        GROUP BY c.name, e.magnitude \n        ORDER BY c.name, e.magnitude, hq_count; \n```", "```py\n (18 rows)\n```", "```py\n postgis_cookbook=# SELECT c.name, e.magnitude,\n ST_Distance(geography(c.the_geom), geography(e.the_geom)) \n      AS distance FROM chp03.cities AS c \n        JOIN chp03.earthquakes AS e \n        ON ST_DWithin(geography(c.the_geom), geography(e.the_geom), 200000) \n        WHERE c.pop_2000 > 1000000 \n        ORDER BY distance; \n```", "```py\n (488 rows) \n```", "```py\n postgis_cookbook-# SELECT s.state, COUNT(*) \n      AS city_count, SUM(pop_2000) AS pop_2000 \n      FROM chp03.states AS s \n        JOIN chp03.cities AS c \n        ON ST_Intersects(s.the_geom, c.the_geom) \n        WHERE c.pop_2000 > 0 -- NULL values is -9999 on this field!\n GROUP BY s.state \n        ORDER BY pop_2000 DESC; \n```", "```py\n (51 rows) \n```", "```py\n postgis_cookbook-# ALTER TABLE chp03.earthquakes \n      ADD COLUMN state_fips character varying(2); \n```", "```py\n postgis_cookbook-# UPDATE chp03.earthquakes AS e \n        SET state_fips = s.state_fips \n        FROM chp03.states AS s \n        WHERE ST_Intersects(s.the_geom, e.the_geom); \n```", "```py\n postgis_cookbook=# SET search_path TO chp03,public; \n```", "```py\n postgis_cookbook=# CREATE TABLE states_simplify_topology AS \n        SELECT ST_SimplifyPreserveTopology(ST_Transform(\n the_geom, 2163), 500) FROM states;\n```", "```py\n SET search_path TO chp03, public; \n      -- first project the spatial table to a planar system \n        (recommended for simplification operations) \n      CREATE TABLE states_2163 AS SELECT ST_Transform\n        (the_geom, 2163)::geometry(MultiPolygon, 2163) \n        AS the_geom, state FROM states; \n      -- now decompose the geometries from multipolygons to polygons (2895) \n        using the ST_Dump function \n      CREATE TABLE polygons AS SELECT (ST_Dump(the_geom)).geom AS the_geom \n        FROM states_2163; \n      -- now decompose from polygons (2895) to rings (3150) \n        using the ST_DumpRings function \n      CREATE TABLE rings AS SELECT (ST_DumpRings(the_geom)).geom \n        AS the_geom FROM polygons; \n      -- now decompose from rings (3150) to linestrings (3150) \n        using the ST_Boundary function \n      CREATE TABLE ringlines AS SELECT(ST_boundary(the_geom)) \n        AS the_geom FROM rings; \n      -- now merge all linestrings (3150) in a single merged linestring \n        (this way duplicate linestrings at polygon borders disappear) \n      CREATE TABLE mergedringlines AS SELECT ST_Union(the_geom) \n        AS the_geom FROM ringlines; \n      -- finally simplify the linestring with a tolerance of 150 meters \n      CREATE TABLE simplified_ringlines AS SELECT \n      ST_SimplifyPreserveTopology(the_geom, 150) \n      AS the_geom FROM mergedringlines; \n      -- now compose a polygons collection from the linestring \n      using the ST_Polygonize function \n      CREATE TABLE simplified_polycollection AS SELECT \n        ST_Polygonize(the_geom) AS the_geom FROM simplified_ringlines; \n      -- here you generate polygons (2895) from the polygons collection \n        using ST_Dumps \n      CREATE TABLE simplified_polygons AS SELECT \n        ST_Transform((ST_Dump(the_geom)).geom, \n        4326)::geometry(Polygon,4326) \n        AS the_geom FROM simplified_polycollection; \n      -- time to create an index, to make next operations faster \n        CREATE INDEX simplified_polygons_gist ON simplified_polygons \n        USING GIST (the_geom); \n      -- now copy the state name attribute from old layer with a spatial \n        join using the ST_Intersects and ST_PointOnSurface function \n      CREATE TABLE simplified_polygonsattr AS SELECT new.the_geom, \n        old.state FROM simplified_polygons new, states old \n        WHERE ST_Intersects(new.the_geom, old.the_geom) \n        AND ST_Intersects(ST_PointOnSurface(new.the_geom), old.the_geom); \n      -- now make the union of all polygons with a common name \n      CREATE TABLE states_simplified AS SELECT ST_Union(the_geom) \n        AS the_geom, state FROM simplified_polygonsattr GROUP BY state;\n```", "```py\n          $ mkdir grass_db\n    ```", "```py\n              GRASS 6.4.1 (postgis_cookbook):~ > v.in.ogr \n              input=PG:\"dbname='postgis_cookbook' user='me' \n              password='mypassword'\" layer=chp03.states_2163 out=states\n        ```", "```py\n              GRASS 6.4.1 (postgis_cookbook):~ > v.info states\n        ```", "```py\n              GRASS 6.4.1 (postgis_cookbook):~ > v.generalize input=states \n              output=states_generalized_from_grass method=douglas threshold=500\n        ```", "```py\n              GRASS 6.4.1 (postgis_cookbook):~ > v.out.ogr \n              input=states_generalized_from_grass \n              type=area dsn=PG:\"dbname='postgis_cookbook' user='me' \n              password='mypassword'\" olayer=chp03.states_simplified_from_grass \n              format=PostgreSQL\n        ```", "```py\n        $ ogr2ogr -f PostgreSQL -s_srs EPSG:4269 -t_srs EPSG:4326 -lco GEOMETRY_NAME=the_geom -nln chp03.cities PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\" citiesx020.shp\n\n        ```", "```py\n         postgis_cookbook=# SELECT c1.name, c2.name, \n              ST_Distance(ST_Transform(c1.the_geom, 900913), \n         ST_Transform(c2.the_geom, 900913))/1000 AS distance_900913 \n              FROM chp03.cities AS c1 \n              CROSS JOIN chp03.cities AS c2 \n              WHERE c1.pop_2000 > 1000000 AND c2.pop_2000 > 1000000 \n         AND c1.name < c2.name \n              ORDER BY distance_900913 DESC; \n        ```", "```py\n         (36 rows) \n        ```", "```py\n         WITH cities AS ( \n                SELECT name, the_geom FROM chp03.cities \n                WHERE pop_2000 > 1000000 ) \n              SELECT c1.name, c2.name, \n              ST_Distance(ST_Transform(c1.the_geom, 900913),\n              ST_Transform(c2.the_geom, 900913))/1000 AS distance_900913 \n              FROM cities c1 CROSS JOIN cities c2 \n              where c1.name < c2.name \n              ORDER BY distance_900913 DESC;\n        ```", "```py\n         WITH cities AS ( \n                SELECT name, the_geom FROM chp03.cities \n                WHERE pop_2000 > 1000000 ) \n              SELECT c1.name, c2.name, \n              ST_Distance(ST_Transform(c1.the_geom, 900913),\n              ST_Transform(c2.the_geom, 900913))/1000 AS d_900913,\n              ST_Distance_Sphere(c1.the_geom, c2.the_geom)/1000 AS d_4326_sphere, \n              ST_Distance_Spheroid(c1.the_geom, c2.the_geom,\n              'SPHEROID[\"GRS_1980\",6378137,298.257222101]')/1000 \n              AS d_4326_spheroid, ST_Distance(geography(c1.the_geom),\n              geography(c2.the_geom))/1000 AS d_4326_geography \n              FROM cities c1 CROSS JOIN cities c2 \n              where c1.name < c2.name \n              ORDER BY d_900913 DESC;\n        ```", "```py\n         (36 rows) \n        ```", "```py\n        $ ogr2ogr -f PostgreSQL -s_srs EPSG:4269 -t_srs EPSG:4326 -lco GEOMETRY_NAME=the_geom -nln chp03.counties -nlt MULTIPOLYGON PG:\"dbname='postgis_cookbook' user='me' password='mypassword'\" co2000p020.shp\n\n        ```", "```py\n         postgis_cookbook=# SELECT county, fips, state_fips\n              FROM chp03.counties ORDER BY county; \n        ```", "```py\n         (6138 rows) \n        ```", "```py\n         postgis_cookbook=# CREATE TABLE chp03.states_from_counties \n              AS SELECT ST_Multi(ST_Union(the_geom)) as the_geom, state_fips \n              FROM chp03.counties GROUP BY state_fips;\n        ```", "```py\n        $ shp2pgsql -I -W LATIN1 -s 4326 -g the_geom ne_10m_rivers_lake_centerlines.shp chp03.rivers > rivers.sql\n        $ psql -U me -d postgis_cookbook -f rivers.sql  \n        ```", "```py\n         postgis_cookbook=#  SELECT r1.gid AS gid1, r2.gid AS gid2,\n         ST_AsText(ST_Intersection(r1.the_geom, r2.the_geom)) AS the_geom \n              FROM chp03.rivers r1 \n              JOIN chp03.rivers r2 \n              ON ST_Intersects(r1.the_geom, r2.the_geom) \n              WHERE r1.gid != r2.gid; \n        ```", "```py\n         postgis_cookbook=# SELECT COUNT(*), \n                ST_GeometryType(ST_Intersection(r1.the_geom, r2.the_geom)) \n                  AS geometry_type \n                FROM chp03.rivers r1 \n                JOIN chp03.rivers r2 \n                ON ST_Intersects(r1.the_geom, r2.the_geom) \n                WHERE r1.gid != r2.gid \n                GROUP BY geometry_type; \n        ```", "```py\n         (3 rows) \n        ```", "```py\n         postgis_cookbook=# CREATE TABLE chp03.intersections_simple AS \n                SELECT r1.gid AS gid1, r2.gid AS gid2,\n         ST_Multi(ST_Intersection(r1.the_geom,\n         r2.the_geom))::geometry(MultiPoint, 4326) AS the_geom \n                FROM chp03.rivers r1 \n                JOIN chp03.rivers r2 \n                ON ST_Intersects(r1.the_geom, r2.the_geom) \n                WHERE r1.gid != r2.gid \n                AND ST_GeometryType(ST_Intersection(r1.the_geom,\n         r2.the_geom)) != 'ST_GeometryCollection';\n        ```", "```py\n         postgis_cookbook=# CREATE TABLE chp03.intersections_all AS \n         SELECT gid1, gid2, the_geom::geometry(MultiPoint, 4326) FROM ( \n                SELECT r1.gid AS gid1, r2.gid AS gid2, \n                CASE \n                  WHEN ST_GeometryType(ST_Intersection(r1.the_geom, \n         r2.the_geom)) != 'ST_GeometryCollection' THEN \n                  ST_Multi(ST_Intersection(r1.the_geom,\n         r2.the_geom))\n         ELSE ST_CollectionExtract(ST_Intersection(r1.the_geom,\n         r2.the_geom), 1) \n                END AS the_geom \n                FROM chp03.rivers r1 \n                JOIN chp03.rivers r2 \n                ON ST_Intersects(r1.the_geom, r2.the_geom) \n                WHERE r1.gid != r2.gid \n              ) AS only_multipoints_geometries; \n        ```", "```py\n         postgis_cookbook=# SELECT SUM(ST_NPoints(the_geom))\n                FROM chp03.intersections_simple; --2268 points per 1444 records \n              postgis_cookbook=# SELECT SUM(ST_NPoints(the_geom)) \n                FROM chp03.intersections_all; --2282 points per 1448 records\n        ```", "```py\n         postgis_cookbook=> CREATE VIEW chp03.rivers_clipped_by_country AS \n                 SELECT r.name, c.iso2, ST_Intersection(r.the_geom,\n         c.the_geom)::geometry(Geometry,4326) AS the_geom\n         FROM chp03.countries AS c \n                 JOIN chp03.rivers AS r \n                 ON ST_Intersects(r.the_geom, c.the_geom); \n        ```", "```py\n              mkdir working/chp03/rivers\n        ```", "```py\n                #!/bin/bash \n                for f in `ogrinfo PG:\"dbname='postgis_cookbook' user='me' \n                password='mypassword'\" -sql \"SELECT DISTINCT(iso2) \n                FROM chp03.countries ORDER BY iso2\" | grep iso2 | awk '{print $4}'` \n                do \n                  echo \"Exporting river shapefile for $f country...\" \n                  ogr2ogr rivers/rivers_$f.shp PG:\"dbname='postgis_cookbook' \n                  user='me' password='mypassword'\" \n                  -sql \"SELECT * FROM chp03.rivers_clipped_by_country \n                  WHERE iso2 = '$f'\" \n                done \n        ```", "```py\n                FOR /F \"tokens=*\" %%f IN ('ogrinfo \n                PG:\"dbname=postgis_cookbook user=me password=password\" \n                -sql \"SELECT DISTINCT(iso2) FROM chp03.countries \n                 ORDER BY iso2\" ^| grep iso2 ^| gawk \"{print $4}\"') DO ( \n                   echo \"Exporting river shapefile for %%f country...\" \n                   ogr2ogr rivers/rivers_%%f.shp PG:\"dbname='postgis_cookbook' \n                   user='me' password='password'\" \n                   -sql \"SELECT * FROM chp03.rivers_clipped_by_country \n                   WHERE iso2 = '%%f'\" \n                )\n        ```", "```py\n              C:\\export_rivers.bat\n        ```", "```py\n              $ chmod 775 export_rivers.sh\n              $ ./export_rivers.sh\n              Exporting river shapefile for AD country...\n              Exporting river shapefile for AE country...\n              ...\n              Exporting river shapefile for ZM country...\n              Exporting river shapefile for ZW country...\n        ```", "```py\n              postgis_cookbook=# CREATE EXTENSION postgis_topology;\n        ```", "```py\n              ogr2ogr -f PostgreSQL -t_srs EPSG:3857 -nlt MULTIPOLYGON \n              -lco GEOMETRY_NAME=the_geom -nln chp03.hungary \n              PG:\"dbname='postgis_cookbook' user='me'\n              password='mypassword'\" HUN_adm1.shp\n        ```", "```py\n         postgis_cookbook=# SELECT COUNT(*) FROM chp03.hungary; \n        ```", "```py\n         (1 row) \n        ```", "```py\n         postgis_cookbook=# SET search_path TO chp03, topology, public; \n        ```", "```py\n         postgis_cookbook=# SELECT CreateTopology('hu_topo', 3857);\n        ```", "```py\n         postgis_cookbook=# SELECT * FROM topology.topology; \n        ```", "```py\n         (1 rows) \n        ```", "```py\n         postgis_cookbook=# \\dtv hu_topo.* \n        ```", "```py\n         (5 rows)\n        ```", "```py\n         postgis_cookbook=# SELECT topologysummary('hu_topo'); \n        ```", "```py\n         (1 row) \n        ```", "```py\n         postgis_cookbook=# CREATE TABLE\n                chp03.hu_topo_polygons(gid serial primary key, name_1 varchar(75)); \n        ```", "```py\n         postgis_cookbook=# SELECT \n                AddTopoGeometryColumn('hu_topo', 'chp03', 'hu_topo_polygons', \n               'the_geom_topo', 'MULTIPOLYGON') As layer_id; \n        ```", "```py\n         postgis_cookbook=> INSERT INTO \n              chp03.hu_topo_polygons(name_1, the_geom_topo) \n                SELECT name_1, toTopoGeom(the_geom, 'hu_topo', 1) \n                FROM chp03.hungary; \n                Query returned successfully: 20 rows affected,\n                                             10598 ms execution time.\n        ```", "```py\n         postgis_cookbook=# SELECT topologysummary('hu_topo');\n        ```", "```py\n         postgis_cookbook=# SELECT row_number() OVER \n              (ORDER BY ST_Area(mbr) DESC) as rownum, ST_Area(mbr)/100000 \n              AS area FROM hu_topo.face ORDER BY area DESC; \n        ```", "```py\n         (93 rows)\n        ```", "```py\n         postgis_cookbook=# SELECT DropTopology('hu_topo'); \n              postgis_cookbook=# DROP TABLE chp03.hu_topo_polygons; \n              postgis_cookbook=# SELECT CreateTopology('hu_topo', 3857, 1); \n              postgis_cookbook=# CREATE TABLE chp03.hu_topo_polygons(\n         gid serial primary key, name_1 varchar(75)); \n              postgis_cookbook=# SELECT AddTopoGeometryColumn('hu_topo',        'chp03', 'hu_topo_polygons', 'the_geom_topo',\n                'MULTIPOLYGON') As layer_id; \n              postgis_cookbook=# INSERT INTO \n              chp03.hu_topo_polygons(name_1, the_geom_topo) \n                SELECT name_1, toTopoGeom(the_geom, 'hu_topo', 1) \n                FROM chp03.hungary;\n        ```", "```py\n         postgis_cookbook=# SELECT topologysummary('hu_topo'); \n        ```", "```py\n         (1 row) \n        ```", "```py\n         postgis_cookbook=# SELECT ST_ChangeEdgeGeom('hu_topo',\n         edge_id, ST_SimplifyPreserveTopology(geom, 500)) \n                FROM hu_topo.edge; \n        ```", "```py\n         postgis_cookbook=# UPDATE chp03.hungary hu \n                SET the_geom = hut.the_geom_topo \n                FROM chp03.hu_topo_polygons hut \n                WHERE hu.name_1 = hut.name_1;\n        ```"]