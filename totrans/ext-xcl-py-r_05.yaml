- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Formatting Your Excel Sheet
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化您的Excel工作表
- en: In this chapter, we are going to go over two different libraries in R and various
    libraries in Python that can be used to format tables and data in an Excel worksheet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨R中的两个不同库以及Python中的一些库，这些库可以用来格式化Excel工作表中的表格和数据。
- en: 'There are several packages in R that we will be discussing, including the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论R中的几个包，包括以下内容：
- en: '`styledTables`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styledTables`'
- en: '`basictabler`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`basictabler`'
- en: We are going to create some fictitious data along with using one of R’s built-in
    datasets, Iris, and then we are going to apply styling to it from the aforementioned
    packages. Each package will have its methods to apply this styling, so it’s good
    to go over them and see which type of workflow you prefer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一些虚构数据，并使用R的一个内置数据集Iris，然后我们将应用上述包中的样式。每个包都有自己的方法来应用这种样式，所以最好浏览一下它们，看看你更喜欢哪种工作流程。
- en: In the Python section of this chapter, we will explore the advanced options
    available in `pandas` and `openpyxl` to create beautiful tables and pivot tables
    from Python in Excel. In particular, we will use `pandas`, `openpyxl`, and `pywin32`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的Python部分，我们将探讨`pandas`和`openpyxl`在Python中创建美观的表格和交叉表的高级选项。特别是，我们将使用`pandas`、`openpyxl`和`pywin32`。
- en: 'In this chapter, we will understand the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将了解以下主题：
- en: Installing and using `styledTables` in R
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在R中安装和使用`styledTables`
- en: Advanced options for formatting with Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python进行格式化的高级选项
- en: By the end of this chapter, you will have a deep understanding of cell formatting,
    conditional formatting, and pivot tables. So, without further delay, let’s get
    into them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将深入理解单元格格式化、条件格式化和交叉表。所以，无需进一步延迟，让我们开始吧。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code for this chapter can be found on GitHub at the following link: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub链接中找到：[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5)。
- en: As mentioned previously, we are going to be working with a few different packages
    in the R section. The `styledTables` package can only be installed from GitHub
    via the `devtools` package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在R部分，我们将使用几个不同的包。`styledTables`包只能通过`devtools`包从GitHub安装。
- en: 'For the Python section, you will need one new package (specifically for the
    formatting tasks with `pandas`): `jinja2==3.1.2`.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python部分，你需要一个新包（特别是用于与`pandas`一起进行格式化任务的包）：`jinja2==3.1.2`。
- en: Installing and using styledTables in R
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在R中安装和使用styledTables
- en: As we have done before, we will need to install the necessary packages before
    we can use them. In this section, we are going to install the `styledTables` package.
    Because `styledTables` is not on CRAN, we cannot install it using the typical
    method of using the `install.packages()`function, so we will need to install this
    package from GitHub. This will require us to also install the `devtools` package,
    which has the functionality to do this very sort of thing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样，在使用它们之前，我们需要安装必要的包。在本节中，我们将安装`styledTables`包。因为`styledTables`不在CRAN上，我们不能使用`install.packages()`函数的典型方法来安装它，所以我们需要从GitHub安装此包。这将需要我们安装`devtools`包，它具有执行此类操作的功能。
- en: 'Here is the full code you’ll need to install the package:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您需要安装此包的完整代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After running the preceding code, we can call the library into the current
    session in the typical fashion by issuing `library(styledtables)` in the console.
    Now that we have loaded the library in, we can go ahead and create our first script,
    which will style a table based on a simple criterion. Let’s get started:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前面的代码后，我们可以通过在控制台中发出`library(styledtables)`的典型方式将库调用到当前会话中。现在我们已经加载了库，我们可以继续创建我们的第一个脚本，该脚本将根据简单标准对表格进行样式化。让我们开始吧：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This R code uses several libraries (`TidyDensity`, `styledTables`, and `xlsx`)
    to create a styled table from a dataset, save it to an Excel file, and apply some
    formatting to it. Let’s break down the code step by step:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段R代码使用了几个库（`TidyDensity`、`styledTables`和`xlsx`），从数据集创建样式化的表格，将其保存到Excel文件中，并对其应用一些格式。让我们一步一步地分解代码：
- en: First, we load the required libraries – `TidyDensity` for creating a table of
    randomly generated data from a Gaussian distribution, `styledTables` for styling
    tables, and `xlsx` for working with Excel files.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们加载所需的库——`TidyDensity` 用于从高斯分布创建随机数据表，`styledTables` 用于格式化表格，以及 `xlsx` 用于处理
    Excel 文件。
- en: Then, we create and style the table. This code creates a styled table, `st`,
    from the output of the `tidy_normal()` function. The `tidy_normal()` function
    generates some data from a Gaussian distribution and presents it in a tibble format.
    The table is then styled using the `styled_table()` function with `keep_header
    = TRUE`, which means the header row will be retained and styled separately from
    the data rows. The next three lines of code apply specific styles to the first
    row (header row) of the table. It sets a border around all cells in the first
    row, makes the text bold in the first row, and sets a fill color (`#00FF00`, which
    is green) to cells in the third column if the corresponding value (denoted by
    `X`) in that column is greater than or equal to 0.5.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建并格式化表格。此代码使用 `tidy_normal()` 函数的输出创建了一个样式化的表格 `st`。`tidy_normal()` 函数从高斯分布生成一些数据，并以
    tibble 格式呈现。然后，使用 `styled_table()` 函数并设置 `keep_header = TRUE` 来格式化表格，这意味着标题行将被保留并单独格式化。接下来的三行代码为表格的第一行（标题行）应用特定的样式。它为第一行的所有单元格设置边框，使第一行的文本加粗，并将第三列的单元格填充颜色（`#00FF00`，绿色）设置为对应列的值（用
    `X` 表示）大于或等于 0.5 的情况。
- en: Then, we create a new Excel workbook and worksheet using the `xlsx` package
    by creating a new workbook with the `createWorkbook()` function. Once this workbook
    has been created, we use the `createSheet()` function to create the sheet in the
    workbook with a sheet name of `tidy_normal`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用 `xlsx` 包通过创建一个新的工作簿并使用 `createWorkbook()` 函数来创建一个新的 Excel 工作簿和工作表。一旦创建了这个工作簿，我们使用
    `createSheet()` 函数在具有 `tidy_normal` 名称的工作簿中创建工作表。
- en: Next, we insert the styled table into the worksheet by using the `write_excel()`
    function from the `styledTables` library. This takes the styled table, `st`, and
    places it into the `tidy_normal` worksheet.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `styledTables` 库中的 `write_excel()` 函数将样式化的表格插入到工作表中。这会将样式化的表格 `st`
    放入 `tidy_normal` 工作表中。
- en: Finally, we save the workbook to an Excel file with the `saveWorkbook()` XLSX
    function, where we tell it to save the `wb` workbook into an Excel file named
    `styledTables_test.xlsx` in a subdirectory called `chapter5`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用 `saveWorkbook()` XLSX 函数将工作簿保存为 Excel 文件，我们告诉它将 `wb` 工作簿保存到名为 `styledTables_test.xlsx`
    的子目录中。
- en: In summary, this R code generates a styled table from some data (obtained from
    `tidy_normal()`), applies specific formatting to the header row and cells in the
    third column, saves the styled table in an Excel file, and places it in a worksheet
    named `tidy_normal`. The resulting Excel file will contain the styled table with
    the specified formatting.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这段 R 代码从一些数据（从 `tidy_normal()` 获取）生成一个样式化的表格，对标题行和第三列的单元格应用特定的格式化，将样式化的表格保存到
    Excel 文件中，并将其放置在名为 `tidy_normal` 的工作表中。生成的 Excel 文件将包含具有指定格式的样式化表格。
- en: Installing and using basictabler in R
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 R 中安装和使用 basictabler
- en: The `basictabler` R package provides an easy way to create rich tables from
    `DataFrame` or matrices. The tables can be rendered as HTML, HTML widgets, or
    Excel spreadsheets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`basictabler` R 包提供了一个简单的方法，可以从 `DataFrame` 或矩阵创建丰富的表格。这些表格可以渲染为 HTML、HTML
    小部件或 Excel 工作表。'
- en: 'To create a `basictabler` object, you need to create a `DataFrame` or matrix.
    Once you have your data, you can create a `basictabler` object by calling the
    `qhtbl()` function. The `qhtbl()` function takes two arguments: the `DataFrame`
    or matrix, and a list of formatting options. We are going to spend time on the
    `qhtbl()` function and the `BasicTable()` function. The `qhtbl()` function is
    a quick way to generate a table, while the `BasicTable()` function is a way to
    build it piece by piece. First, we are going to create a very basic example using
    the `qhtbl()` function, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `basictabler` 对象，你需要创建一个 `DataFrame` 或矩阵。一旦你有数据，你可以通过调用 `qhtbl()` 函数来创建一个
    `basictabler` 对象。`qhtbl()` 函数接受两个参数：`DataFrame` 或矩阵，以及一个格式化选项列表。我们将花费时间在 `qhtbl()`
    函数和 `BasicTable()` 函数上。`qhtbl()` 函数是生成表格的一种快速方式，而 `BasicTable()` 函数是逐步构建表格的方式。首先，我们将使用
    `qhtbl()` 函数创建一个非常基础的示例，如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output of the code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的输出：
- en: '![Figure 5.1 – Using basictabler to create a plain table](img/B19142_05_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 使用 basictabler 创建普通表格](img/B19142_05_1.jpg)'
- en: Figure 5.1 – Using basictabler to create a plain table
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 使用basictabler创建一个普通表格
- en: Now that we can see what it looks like, let’s go over what just happened. First,
    we created a dataset named `data`. This was a small simple dataset purely to help
    illustrate the use of the `basictabler` package. Once the data has been created,
    we simply call the `ghtbl()` function on the data, give it a theme of `largeplain`,
    and then assign it to the `table_plain` variable. This only makes the table –
    it does not send it to Excel. We will go over that later.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了它的样子，让我们回顾一下刚才发生了什么。首先，我们创建了一个名为`data`的数据集。这是一个简单的小数据集，纯粹是为了帮助说明`basictabler`包的使用。一旦数据创建完成，我们只需在数据上调用`ghtbl()`函数，给它一个`largeplain`的主题，并将其分配给`table_plain`变量。这仅仅创建了一个表格
    – 它不会将其发送到Excel。我们稍后会讨论这一点。
- en: 'Now, let’s look at another example that is a little bit more involved:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看另一个稍微复杂一点的例子：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This piece of code will produce a table that consists of the same data. However,
    the difference here is that this one will have some styling. Let’s go over the
    styling options we used; then, we will see the finished product.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成一个包含相同数据的表格。然而，这里的区别在于这个表格将有一些样式。让我们回顾一下我们使用的样式选项；然后，我们将看到最终的产品。
- en: The first difference is that we used the `tableStyle` option. This option in
    the function takes in as its argument a list object of CSS style declarations
    that will be applied to the table. For this option, we provided a value of `"border-color"
    = "``maroon"`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个区别在于我们使用了`tableStyle`选项。这个函数的参数接受一个CSS样式声明列表对象，这些样式将被应用到表格上。对于这个选项，我们提供了`"border-color"
    = "maroon"`的值。
- en: 'The next option that we used is `headingStyle`, which also takes a list object
    of CSS style declarations that get applied to the headings of the table. In the
    preceding code, we used four different options inside the list. First, we chose
    to use the `color` option with a value of `cornsilk` and then we chose `background-color`
    with a value of `maroon`. The next option we chose was `font-style` for `italics`
    and then finally `border-color` with `maroon`. Let’s see what this looks like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的下一个选项是`headingStyle`，它也接受一个CSS样式声明列表对象，这些样式将被应用到表格的标题上。在先前的代码中，我们在列表中使用了四个不同的选项。首先，我们选择了使用`color`选项，其值为`cornsilk`，然后我们选择了`background-color`，其值为`maroon`。接下来的选项是我们选择了`font-style`用于`italics`，最后是`border-color`，其值为`maroon`。让我们看看这会是什么样子：
- en: '![Figure 5.2 – A second basictabler example using some different styling](img/B19142_05_2.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 – 使用一些不同样式的第二个basictabler示例](img/B19142_05_2.jpg)'
- en: Figure 5.2 – A second basictabler example using some different styling
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 使用一些不同样式的第二个basictabler示例
- en: 'Now, let’s walk through a longer example that will use some different features
    of the `basictabler` package to map styles according to some sort of logic that
    we dictate. Refer to the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个更长的例子来了解如何使用`basictabler`包的不同功能，根据我们指定的某种逻辑映射样式。参考以下代码：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`library(TidyDensity)` imports the `TidyDensity` package into the R environment.
    This package provides tools for visualizing and summarizing distributions. We
    use it specifically to generate a tibble of a normal distribution with 10 points.
    We do not need to call in `basictabler` because it is already loaded at this point.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`library(TidyDensity)`将`TidyDensity`包导入R环境。这个包提供了可视化和总结分布的工具。我们特别使用它来生成一个包含10个点的正态分布的tibble。我们不需要调用`basictabler`，因为此时它已经加载了。'
- en: 'Next, we assign `tn <- tidy_normal(.n = 10)`. This line creates a dataset called
    `tn` by generating 10 random points from a standard normal distribution. The function
    also creates the density of the data (`dx`, `dy`), along with `pnorm` and `qnorm`,
    as columns of the table:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们分配`tn <- tidy_normal(.n = 10)`。这一行通过从标准正态分布中生成10个随机点来创建一个名为`tn`的数据集。该函数还创建了数据的密度（`dx`，`dy`），以及`pnorm`和`qnorm`作为表格的列：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`tbl <- BasicTable$new()` creates a new instance of a `BasicTable` object called
    `tbl`. The `BasicTable` class is an `R6` class object from the `basictabler` package.
    This function has many different public methods associated with it. These methods
    help create the table itself, as well as its styling:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`tbl <- BasicTable$new()`创建了一个名为`tbl`的`BasicTable`对象的新实例。`BasicTable`类是来自`basictabler`包的`R6`类对象。这个函数与许多不同的公共方法相关联。这些方法帮助创建表格本身及其样式：'
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From the preceding code snippet, we understand the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们理解到以下内容：
- en: '`tbl$addData(tn, ...)`: This line adds the data from the `tn` dataset to the
    `tbl` table object. It also sets some options for how the data should be displayed,
    such as using the first column as row headers and explicitly setting the column
    headers.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tbl$addData(tn, ...)`: 这一行将 `tn` 数据集中的数据添加到 `tbl` 表格对象中。它还设置了一些数据应如何显示的选项，例如使用第一列作为行标题，并显式设置列标题。'
- en: '`columnFormats <- list(...)`: Here, a list named `columnFormats` is created,
    which contains formats for each column of the table. The formats that are specified
    are for the second to the seventh column (index 1 to 6) and are represented using
    `strings.tbl$renderTable()`. Here, we used `%.4f`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columnFormats <- list(...)`: 在这里，创建了一个名为 `columnFormats` 的列表，其中包含表格每一列的格式。指定的格式是针对第二列到第七列（索引
    1 到 6），并使用 `strings.tbl$renderTable()` 表示。在这里，我们使用了 `%.4f`。'
- en: '`tbl$renderTable()`: This line renders the table based on the data and formatting
    provided earlier and displays it in the R environment. This gives us the necessary
    table pre-styling so that we can see a base table versus what we’ve done to it.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tbl$renderTable()`: 这一行根据之前提供的数据和格式渲染表格，并在 R 环境中显示它。这为我们提供了必要的预样式表格，以便我们可以看到基本表格与我们对其所做的修改。'
- en: 'Next, we have the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有以下代码：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, the `cells <- tbl$getCells(...)` line retrieves a subset of cells from
    the `tbl` table object. It selects cells from rows 2 to 11 and columns 3 to 7
    (`y`, `dx`, `dy`, `p`, `q`) using the `getCells()` method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`cells <- tbl$getCells(...)` 行从 `tbl` 表格对象中检索一个子集的单元格。它使用 `getCells()` 方法从第
    2 行到第 11 行和第 3 列到第 7 列（`y`、`dx`、`dy`、`p`、`q`）选择单元格：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `tbl$mapStyling(...)` line applies conditional formatting to the selected
    cells. The `mapStyling()` method is used to map styles (such as background color)
    to cell values based on certain conditions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`tbl$mapStyling(...)` 行对所选单元格应用条件格式化。`mapStyling()` 方法用于根据某些条件将样式（如背景颜色）映射到单元格值：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After applying conditional formatting, the `tbl$renderTable()` line renders
    the updated table with the formatted cells, and it will be displayed in the R
    environment again.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用条件格式化后，`tbl$renderTable()` 行渲染了带有格式化单元格的更新后的表格，并将其再次显示在 R 环境中。
- en: To summarize, the preceding R code imports a package, creates a dataset of random
    numbers, generates a table with formatted data, displays the table, applies conditional
    formatting to specific cells, and finally displays the table again with the formatted
    cells. Conditional formatting assigns different background colors to cells based
    on the values in the specified columns.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，前面的 R 代码导入了一个包，创建了一个随机数字的数据集，生成了一个带有格式化数据的表格，显示了表格，对特定单元格应用了条件格式化，并最终再次显示带有格式化单元格的表格。条件格式化根据指定列中的值将不同的背景颜色分配给单元格。
- en: 'Now, let’s look at what we created. Remember that the data may be different
    for you as the values are random. First, we will look at the plain table, and
    then the styled table:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们创建了什么。请记住，由于值是随机的，您得到的数据可能与我不同。首先，我们将查看普通表格，然后是样式化表格：
- en: '![Figure 5.3 –  BasicTable R6 plain table](img/B19142_05_3.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – BasicTable R6 普通表格](img/B19142_05_3.jpg)'
- en: Figure 5.3 – BasicTable R6 plain table
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – BasicTable R6 普通表格
- en: 'The following is the styled table according to the logic created in the `mapStyling()`
    function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格是根据 `mapStyling()` 函数中创建的逻辑样式化的：
- en: '![Figure 5.4 – BasicTable R6 styled table](img/B19142_05_4.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – BasicTable R6 样式化表格](img/B19142_05_4.jpg)'
- en: Figure 5.4 – BasicTable R6 styled table
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – BasicTable R6 样式化表格
- en: 'Now that we have made the tables, let’s see how we can use the `basictabler`
    package to save them to an Excel file. First, we are going to rely on a package
    that was introduced earlier: `openxlsx`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了表格，让我们看看如何使用 `basictabler` 包将它们保存到 Excel 文件中。首先，我们将依赖于之前介绍过的包：`openxlsx`。
- en: 'Here’s the script we are going to use; you will notice that the `chapter5`
    directory has been used as it was created first:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们将要使用的脚本；您会注意到使用了 `chapter5` 目录，因为它是最先创建的：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we used the public method of `writeToExcelWorksheet()` from the `basictabler`
    package. While it does not directly write to an Excel file, it does get the object
    into a format that can be written to Excel using a package such as `openxlsx`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了 `basictabler` 包的 `writeToExcelWorksheet()` 的公共方法。虽然它不会直接写入 Excel 文件，但它将对象格式化为可以使用
    `openxlsx` 等包写入 Excel 的格式。
- en: Now that you’ve learned about some of the possibilities to write in R, let’s
    have a look at similar tools in Python. Once again, we will go over how to format
    cells and tables for Excel. For more details, you can take a look at some extra
    packages, such as `gt` and `gtextras`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经了解了在 R 中编写的一些可能性，让我们来看看 Python 中的类似工具。我们将再次回顾如何为 Excel 格式化单元格和表格。有关更多详细信息，您可以查看一些额外的包，如
    `gt` 和 `gtextras`。
- en: Advanced options for formatting with Python
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的格式化高级选项
- en: 'The Python section of this chapter is organized into the following three sections:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 Python 部分分为以下三个部分：
- en: '*Cell formatting*: Cell formatting is crucial for presenting data in a visually
    appealing and organized manner. We will demonstrate how to apply various formatting
    styles to cells, such as setting font properties (for example, size, color, bold,
    and italic), adjusting cell background colors, and aligning text within cells.
    You will learn how to create professional-looking tables with well-formatted cells
    that enhance data readability.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*单元格格式化*：单元格格式化对于以视觉吸引力和组织化的方式展示数据至关重要。我们将演示如何将各种格式化样式应用于单元格，例如设置字体属性（例如，大小、颜色、粗体和斜体）、调整单元格背景颜色以及调整单元格内的文本对齐。您将学习如何创建具有良好格式化单元格的专业表格，从而增强数据的可读性。'
- en: '*Conditional formatting*: Conditional formatting allows you to dynamically
    format cells based on specific conditions. We will walk you through the process
    of applying conditional formatting to highlight important data points, visualize
    trends, and identify outliers. You will discover how to use `pandas` and `openpyxl`
    to implement various conditional formatting rules, such as color scales, data
    bars, and icon sets, making your data stand out in the Excel sheet.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*条件格式化*：条件格式化允许您根据特定条件动态地格式化单元格。我们将向您介绍如何应用条件格式化来突出显示重要数据点、可视化趋势和识别异常值。您将了解如何使用
    `pandas` 和 `openpyxl` 实现各种条件格式化规则，例如颜色刻度、数据条和图标集，使您的数据在 Excel 工作表中更加突出。'
- en: '*Pivot tables*: Pivot tables are powerful tools for summarizing and analyzing
    data in Excel. We will show you how to create pivot tables using `pywin32`, as
    well as how to adjust subtotals and grand totals and customize labels and styles.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据透视表*：数据透视表是 Excel 中用于汇总和分析数据的强大工具。我们将向您展示如何使用 `pywin32` 创建数据透视表，以及如何调整小计和总计、自定义标签和样式。'
- en: Throughout this chapter, we will provide practical examples and detailed explanations
    to guide you through the process of formatting your Excel sheets effectively.
    By mastering cell formatting, conditional formatting, and pivot tables, you will
    be able to present your data professionally and make it visually compelling, facilitating
    better insights and data analysis.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将提供实际示例和详细解释，指导您有效地格式化 Excel 工作表。通过掌握单元格格式化、条件格式化和数据透视表，您将能够专业地展示您的数据，使其视觉上引人注目，从而促进更好的洞察力和数据分析。
- en: Let’s get started with cell formatting!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始单元格格式化！
- en: Cell formatting
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元格格式化
- en: Cell formatting is a crucial aspect of presenting data effectively in Excel.
    With `pandas` and `openpyxl`, you have powerful tools at your disposal to customize
    the appearance of cells. You can apply a wide range of formatting styles to make
    your tables visually appealing and enhance data readability.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格格式化是有效地在 Excel 中展示数据的关键方面。使用 `pandas` 和 `openpyxl`，您拥有强大的工具来自定义单元格的外观。您可以应用广泛的各种格式化样式，使您的表格视觉上吸引人并增强数据的可读性。
- en: To get started with cell formatting, you will learn how to set various font
    properties, such as font size, color, boldness, and italics. These adjustments
    allow you to emphasize certain data points and create a consistent visual hierarchy
    in your tables.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始单元格格式化，您将学习如何设置各种字体属性，例如字体大小、颜色、粗体和斜体。这些调整允许您强调某些数据点，并在您的表格中创建一致的视觉层次结构。
- en: Additionally, you can control the background color of cells to group related
    data or highlight specific values. By setting cell background colors, you can
    create clear demarcations between different sections of your table, making it
    easier for readers to interpret the data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以控制单元格的背景颜色以分组相关数据或突出特定值。通过设置单元格背景颜色，您可以在表格的不同部分之间创建清晰的界限，使读者更容易理解数据。
- en: Aligning text within cells is another important formatting technique. With `pandas`
    and `openpyxl`, you can align text horizontally and vertically, ensuring that
    your data is presented in a tidy and organized manner.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元格内对齐文本是另一种重要的格式化技术。使用`pandas`和`openpyxl`，您可以水平垂直地对齐文本，确保您的数据以整洁有序的方式呈现。
- en: In this section, we will walk you through practical examples of cell formatting
    using both `pandas` and `openpyxl`. You will learn how to apply different formatting
    styles, adjust font properties, change cell background colors, and align text
    within cells. Armed with these skills, you will be able to create professional-looking
    tables that effectively convey your data’s message and insights.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过使用`pandas`和`openpyxl`的单元格格式化实际示例来引导您。您将学习如何应用不同的格式化样式、调整字体属性、更改单元格背景颜色以及在单元格内对齐文本。掌握这些技能后，您将能够创建专业外观的表格，有效地传达您数据的信息和洞察。
- en: Setting font properties
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置字体属性
- en: Let’s start by exploring how to set font properties for cells using both `pandas`
    and `openpyxl`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先探讨如何使用`pandas`和`openpyxl`设置单元格的字体属性。
- en: 'In `pandas`, for more advanced styling, including custom CSS-like styles, we
    can use the `Styler.apply` method, along with custom functions to format the cells,
    to apply the font properties to suit our preferences, as shown here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pandas`中，为了进行更高级的样式设置，包括自定义CSS样式，我们可以使用`Styler.apply`方法，结合自定义函数来格式化单元格，以应用字体属性以符合我们的偏好，如下所示：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The resulting Excel sheet is available in this chapter’s GitHub repository.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub仓库中提供了生成的Excel工作表。
- en: 'In `openpyxl`, you can use the `Font` class to set font properties. For instance,
    to make text bold, you can set the `bold` attribute of the font object to `True`.
    You can also adjust other font properties, such as `size` and `color`, to achieve
    the desired formatting. Refer to the following example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`openpyxl`中，您可以使用`Font`类来设置字体属性。例如，要使文本加粗，可以将字体对象的`bold`属性设置为`True`。您还可以调整其他字体属性，如`size`和`color`，以实现所需的格式。请参考以下示例：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Cell background colors
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元格背景颜色
- en: 'Changing the background color of cells is another formatting technique that
    can help you visually distinguish different parts of your table. In `pandas`,
    you can set the `background-color` CSS style using the `Styler` object, as shown
    here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 更改单元格的背景颜色是另一种有助于在表格中视觉区分不同部分的格式化技术。在`pandas`中，您可以使用`Styler`对象设置`background-color`
    CSS样式，如下所示：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code demonstrates how to use `pandas` to create a `DataFrame`
    containing some sample data and then apply cell background colors to specific
    cells in the `DataFrame`. The `DataFrame` contains information about individuals’
    names, ages, and cities. By using the `pandas` `Styler` object, we can define
    the background color for specific cells. In this example, the first row’s `Name`
    and `Age` columns are highlighted with a yellow background color. Finally, the
    styled `DataFrame` is saved to an Excel file named `colored_table_pandas.xlsx`.
    This technique allows for easy and flexible cell formatting when exporting data
    from Python to Excel.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码演示了如何使用`pandas`创建包含一些样本数据的`DataFrame`，然后应用`DataFrame`中特定单元格的背景颜色。该`DataFrame`包含有关个人姓名、年龄和城市的信息。通过使用`pandas`的`Styler`对象，我们可以为特定单元格定义背景颜色。在此示例中，第一行的`Name`和`Age`列使用黄色背景颜色突出显示。最后，将格式化的`DataFrame`保存到名为`colored_table_pandas.xlsx`的Excel文件中。这种技术允许在从Python导出到Excel时轻松灵活地格式化单元格。
- en: Now, let’s have a look at how we can achieve something similar with `openpyxl`!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用`openpyxl`实现类似的效果！
- en: 'In `openpyxl`, you can set the background color of cells using the `Fill` class,
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在`openpyxl`中，您可以使用`Fill`类设置单元格的背景颜色，如下所示：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Aligning text within cells
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在单元格内对齐文本
- en: 'Properly aligning text within cells can significantly improve the table’s visual
    presentation. In `pandas`, you can use the `Styler` object to apply text alignment
    styles:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正确地在单元格内对齐文本可以显著提高表格的视觉表现。在`pandas`中，您可以使用`Styler`对象应用文本对齐样式：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this code, the text in the specified columns of the `DataFrame` will be
    aligned to the center. This code uses the `set_properties` method to apply the
    text alignment to the specified columns. The resulting `DataFrame` is then saved
    to an Excel file named `aligned_table_pandas.xlsx`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，`DataFrame`中指定列的文本将居中对齐。此代码使用`set_properties`方法将文本对齐应用于指定列。然后，将生成的`DataFrame`保存到名为`aligned_table_pandas.xlsx`的Excel文件中。
- en: 'In `openpyxl`, you can set text alignment using the `Alignment` class, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`openpyxl`中，你可以使用`Alignment`类设置文本对齐，如下所示：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With these examples, you have learned how to customize cell formatting, set
    font properties, change cell background colors, and align text within cells using
    both `pandas` and `openpyxl`. By utilizing these formatting options, you can create
    visually appealing and informative tables to present your data effectively in
    Excel.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些示例，你已经学会了如何使用`pandas`和`openpyxl`自定义单元格格式，设置字体属性，更改单元格背景颜色，并在单元格内对齐文本。通过利用这些格式化选项，你可以创建视觉上吸引人且信息丰富的表格，有效地在Excel中展示你的数据。
- en: Now, we continue our deep dive with conditional formatting.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们继续深入探讨条件格式化。
- en: Conditional formatting
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件格式化
- en: Conditional formatting is a powerful feature in Excel that allows you to automatically
    apply formatting to cells based on specific conditions. It enables you to visually
    highlight important data, identify trends, and make your Excel sheets more interactive.
    In this chapter, we will explore how to implement conditional formatting using
    `openpyxl`. We’ll cover various scenarios, such as highlighting cells based on
    value ranges, text, and date criteria. Additionally, we’ll demonstrate how to
    create custom conditional formatting rules to suit your specific needs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 条件格式化是Excel中的一个强大功能，允许你根据特定条件自动应用单元格格式。它使你能够视觉上突出重要数据，识别趋势，并使你的Excel表更具交互性。在本章中，我们将探讨如何使用`openpyxl`实现条件格式化。我们将涵盖各种场景，例如根据值范围、文本和日期标准突出显示单元格。此外，我们还将演示如何创建定制的条件格式化规则以满足你的特定需求。
- en: By the end of this chapter, you’ll have the skills to add dynamic and visually
    appealing conditional formatting to your Excel sheets directly from Python. Let’s
    dive in and learn how to make your data stand out with conditional formatting!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将具备直接从Python中为Excel表添加动态和视觉上吸引人的条件格式的技能。让我们深入探讨，学习如何通过条件格式化让你的数据脱颖而出！
- en: Visualizing data with conditional formatting
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用条件格式化可视化数据
- en: By applying conditional formatting to your Excel sheets, you can effectively
    visualize your data and gain valuable insights at a glance. For example, you can
    highlight the highest and lowest values in a column, color cells based on specific
    categories, or emphasize significant changes over time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对你的Excel表应用条件格式化，你可以有效地可视化你的数据，并一眼获得宝贵的洞察。例如，你可以突出显示列中的最高和最低值，根据特定类别着色单元格，或强调随时间的变化。
- en: Conditional formatting is particularly useful when dealing with large datasets
    as it allows you to quickly identify key information and make data-driven decisions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 条件格式化在处理大型数据集时特别有用，因为它允许你快速识别关键信息并做出基于数据的决策。
- en: '`openpyxl` provides functionalities to implement conditional formatting in
    Excel sheets. The library offers a range of options to apply different formatting
    styles based on specific conditions. The process of using `openpyxl` for conditional
    formatting involves the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl`提供了在Excel表中实现条件格式化的功能。该库提供了一系列选项，可以根据特定条件应用不同的格式化样式。使用`openpyxl`进行条件格式化的过程涉及以下步骤：'
- en: Import the required modules from `openpyxl` and load your data into a workbook
    object.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`openpyxl`导入所需的模块并将你的数据加载到工作簿对象中。
- en: Create a conditional formatting rule using `openpyxl.formatting.rule`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`openpyxl.formatting.rule`创建一个条件格式化规则。
- en: Define the rule’s conditions, such as applying styles based on cell values,
    text, or date criteria.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义规则的条件，例如根据单元格值、文本或日期标准应用样式。
- en: Apply the rule to the desired range of cells using `openpyxl.worksheet.conditional.ConditionalFormatting.add()`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`openpyxl.worksheet.conditional.ConditionalFormatting.add()`将规则应用于所需的单元格范围。
- en: With `openpyxl`, you can easily implement conditional formatting rules and add
    visual cues to your Excel sheets, enhancing the presentation of your data and
    facilitating data analysis.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`openpyxl`，你可以轻松实现条件格式化规则并为你的Excel表添加视觉提示，增强数据的展示并便于数据分析。
- en: 'Let’s have a look at some code that implements the preceding concepts:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些实现上述概念的代码示例：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this code, we create an Excel workbook from a `pandas` `DataFrame`. Then,
    we define two conditional formatting rules: red text if the `Sales` value is less
    than `1000` while `green_fill_rule` uses the minimum and maximum age values from
    the `Age` column to set up the color scale condition. This way, the cells in the
    `Age` column will be filled with green colors based on their relative values within
    the minimum and maximum values. These rules are added to the worksheet’s `conditional_formatting`
    property. Finally, we save the Excel workbook, and conditional formatting will
    be applied when you open the Excel file with Microsoft Excel.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们从一个`pandas` `DataFrame`创建一个Excel工作簿。然后，我们定义两个条件格式化规则：如果`Sales`值小于`1000`，则使用红色文本，而`green_fill_rule`使用`Age`列的最小和最大年龄值来设置颜色刻度条件。这样，`Age`列中的单元格将根据它们在最小和最大值之间的相对值填充绿色。这些规则被添加到工作表的`conditional_formatting`属性中。最后，我们保存Excel工作簿，当您使用Microsoft
    Excel打开Excel文件时，将应用条件格式化。
- en: Custom conditional formatting rules provide you with precise control over how
    your data is displayed, making it easier to identify patterns, trends, and outliers
    in your Excel sheets.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义条件格式化规则为您提供对数据显示方式的精确控制，使您更容易在Excel表格中识别模式、趋势和异常。
- en: 'Next, we’ll cover a case study where conditional formatting can really shine:
    a dynamic heatmap!'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一个条件格式化可以真正大放异彩的案例研究：一个动态热力图！
- en: Case study – using a dynamic heatmap with conditional formatting
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 案例研究 - 使用条件格式化动态热力图
- en: To further demonstrate the power of conditional formatting, we’ll walk through
    a case study where we create a dynamic heatmap using Python and Excel. We’ll use
    conditional formatting to color cells in the heatmap based on the data’s magnitude,
    enabling us to visualize the data’s intensity and patterns effectively. What’s
    created here is also called a **highlight table**, given there is an annotation
    (numbers) in the table and not just the heatmap colors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步展示条件格式的强大功能，我们将通过一个案例研究来展示如何使用Python和Excel创建一个动态热力图。我们将使用条件格式化根据数据的幅度来着色热力图中的单元格，使我们能够有效地可视化数据的强度和模式。由于表中除了热力图的颜色外，还有注释（数字），因此这里创建的也被称为**高亮表**。
- en: 'Let’s have a look at the implementation of such a heatmap:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这样一个热力图的实现：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Conditional formatting is a valuable tool for enhancing the visual representation
    of data in Excel. Whether you’re using `pandas` or `openpyxl`, you can easily
    implement conditional formatting rules to dynamically format cells based on specified
    conditions. By incorporating conditional formatting into your Excel sheets, you
    can create compelling visualizations and better understand your data, making data
    analysis and decision-making more efficient and effective.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 条件格式化是增强Excel中数据视觉表示的有价值工具。无论您是使用`pandas`还是`openpyxl`，都可以轻松实现条件格式化规则，根据指定的条件动态格式化单元格。通过将条件格式化纳入您的Excel表格中，您可以创建引人入胜的视觉图表，更好地理解您的数据，使数据分析和管理决策更加高效和有效。
- en: Pivot tables
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交叉表
- en: Pivot tables are powerful tools in Excel that allow you to summarize and analyze
    large datasets quickly. They provide a flexible way to aggregate, group, and calculate
    data, enabling you to gain valuable insights from your data with just a few clicks.
    In this section, we will explore how to create and manipulate pivot tables from
    Python using `pywin32`. Additionally, we will cover some techniques for adjusting
    subtotals and grand totals and customizing labels and styles.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉表是Excel中强大的工具，允许您快速总结和分析大量数据集。它们提供了一种灵活的方式来聚合、分组和计算数据，只需几点击就能从您的数据中获得有价值的见解。在本节中，我们将探讨如何使用`pywin32`从Python创建和操作交叉表。此外，我们还将介绍一些调整小计和总计以及自定义标签和样式的技术。
- en: Creating pivot tables with pywin32
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用pywin32创建交叉表
- en: '`pywin32` allows you to interact with Microsoft Excel via the COM interface.
    With this library, you can control Excel’s features, including creating pivot
    tables.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`pywin32`允许您通过COM接口与Microsoft Excel交互。使用这个库，您可以控制Excel的功能，包括创建交叉表。'
- en: To create a pivot table with `win32com.client` in Python, you can use the code
    snippets provided in this section.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中使用`win32com.client`创建交叉表，您可以使用本节提供的代码片段。
- en: 'First, set everything up by importing the required module, starting an Excel
    instance as we did in [*Chapter 3*](B19142_03.xhtml#_idTextAnchor055), and getting
    a sheet we can work with:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过导入所需的模块、启动Excel实例（就像我们在[*第3章*](B19142_03.xhtml#_idTextAnchor055)中所做的那样）以及获取我们可以操作的工作表来设置一切：
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, generate some sample data and write it to the sheet (this is optional;
    that is, only do this if you have data to analyze):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，生成一些示例数据并将其写入工作表（这是可选的；也就是说，只有当您有要分析的数据时才这样做）：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Fun fact
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: You can watch the workbook populate with values when this nested `for` loop
    runs!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个嵌套的 `for` 循环运行时，您可以看到工作簿填充值！
- en: 'Now, we can start on the actual pivot table! We’ll begin by creating a new
    sheet where the pivot will go:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始实际的透视表了！我们将从创建一个新工作表开始，该工作表将用于放置透视表：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we can create the pivot table itself by using the `Create()` method of
    the `PivotCaches` property of the workbook and then calling `CreatePivotTable()`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过使用工作簿的 `PivotCaches` 属性的 `Create()` 方法然后调用 `CreatePivotTable()` 来创建数据透视表本身：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With the pivot table defined, we can add the fields we want to use as row,
    column, and data fields:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了数据透视表之后，我们可以添加我们想要用作行、列和数据字段的字段：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We’re almost there! We now have a working pivot table, but we may want to switch
    grand totals and subtotals on or off:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了！我们现在有一个工作表，但我们可能想要开关总计数和子计数：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we can customize the labels and styles:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以自定义标签和样式：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With that, you’ve learned how to create a pivot table in Excel using `win32com.client`,
    enabling you to analyze and summarize your data effectively. The library allows
    you to have full control over Excel, including creating and customizing pivot
    tables based on your specific data analysis needs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，您就学会了如何使用 `win32com.client` 在 Excel 中创建数据透视表，这使您能够有效地分析和总结数据。该库允许您完全控制 Excel，包括根据您特定的数据分析需求创建和自定义数据透视表。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we delved into the art of formatting Excel sheets to present
    data in a visually appealing and organized manner. Divided into three sections,
    we covered essential techniques to transform raw data into professional-looking
    tables that enhance data readability.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了格式化 Excel 工作表的艺术，以以视觉上吸引人和有组织的方式展示数据。分为三个部分，我们涵盖了将原始数据转换为专业外观表格的基本技术，这些表格增强了数据的可读性。
- en: The first section focused on cell formatting, where we demonstrated how to apply
    various styles to cells, such as adjusting font properties, cell backgrounds,
    and text alignment. By mastering cell formatting, you can create well-organized
    and visually appealing tables.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分专注于单元格格式化，我们展示了如何将各种样式应用于单元格，例如调整字体属性、单元格背景和文本对齐。通过掌握单元格格式化，您可以创建组织良好且视觉上吸引人的表格。
- en: Next, we explored conditional formatting, a powerful feature that allows you
    to dynamically format cells based on specific conditions. We provided practical
    examples of using `styledTables` and `basictabler` for R and then `pandas` and
    `openpyxl` for Python to implement various conditional formatting rules, such
    as color scales, data bars, and icon sets, making your data stand out and revealing
    critical insights.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了条件格式化，这是一个强大的功能，允许您根据特定条件动态格式化单元格。我们提供了使用 `styledTables` 和 `basictabler`
    为 R 以及使用 `pandas` 和 `openpyxl` 为 Python 实现各种条件格式化规则的实用示例，例如颜色刻度、数据条和图标集，使您的数据脱颖而出并揭示关键见解。
- en: Lastly, we unlocked the potential of pivot tables, which are indispensable tools
    for summarizing and analyzing data. Using `pywin32`, we created pivot tables and
    learned how to adjust subtotals and grand totals, as well as customize labels
    and styles.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发掘了数据透视表潜力，这些是总结和分析数据的不可或缺的工具。使用 `pywin32`，我们创建了数据透视表，并学习了如何调整子计数和总计数，以及自定义标签和样式。
- en: Throughout this chapter, you’ve gained valuable skills in Excel manipulation
    using `styledTables`, `basictabler`, `pandas`, `openpyxl`, and `pywin32`, thus
    enabling you to present your data professionally, make it visually compelling,
    and uncover meaningful insights for more informed decision-making. With these
    techniques at your disposal, you are well-equipped to excel in data analysis and
    visualization, taking your Excel proficiency to new heights.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经通过使用 `styledTables`、`basictabler`、`pandas`、`openpyxl` 和 `pywin32` 在
    Excel 操作中获得了宝贵的技能，从而能够专业地展示您的数据，使其视觉上引人注目，并为更明智的决策揭示有意义的见解。有了这些技术，您在数据分析与可视化方面已经准备充分，可以将您的
    Excel 熟练程度提升到新的高度。
- en: Stay tuned for the next chapter, *Inserting ggplot2/matplotlib Graphs*! There,
    you will learn how to add beautiful data visualizations to your Excel sheets using
    R and Python.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请期待下一章，*插入 ggplot2/matplotlib 图表*！在那里，您将学习如何使用 R 和 Python 将美丽的数据可视化添加到您的 Excel
    工作表中。
