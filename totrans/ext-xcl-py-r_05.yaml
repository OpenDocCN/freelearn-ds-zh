- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Formatting Your Excel Sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to go over two different libraries in R and various
    libraries in Python that can be used to format tables and data in an Excel worksheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several packages in R that we will be discussing, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styledTables`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`basictabler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to create some fictitious data along with using one of R’s built-in
    datasets, Iris, and then we are going to apply styling to it from the aforementioned
    packages. Each package will have its methods to apply this styling, so it’s good
    to go over them and see which type of workflow you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: In the Python section of this chapter, we will explore the advanced options
    available in `pandas` and `openpyxl` to create beautiful tables and pivot tables
    from Python in Excel. In particular, we will use `pandas`, `openpyxl`, and `pywin32`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will understand the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using `styledTables` in R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced options for formatting with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a deep understanding of cell formatting,
    conditional formatting, and pivot tables. So, without further delay, let’s get
    into them.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found on GitHub at the following link: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter5).'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, we are going to be working with a few different packages
    in the R section. The `styledTables` package can only be installed from GitHub
    via the `devtools` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Python section, you will need one new package (specifically for the
    formatting tasks with `pandas`): `jinja2==3.1.2`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using styledTables in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have done before, we will need to install the necessary packages before
    we can use them. In this section, we are going to install the `styledTables` package.
    Because `styledTables` is not on CRAN, we cannot install it using the typical
    method of using the `install.packages()`function, so we will need to install this
    package from GitHub. This will require us to also install the `devtools` package,
    which has the functionality to do this very sort of thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the full code you’ll need to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding code, we can call the library into the current
    session in the typical fashion by issuing `library(styledtables)` in the console.
    Now that we have loaded the library in, we can go ahead and create our first script,
    which will style a table based on a simple criterion. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This R code uses several libraries (`TidyDensity`, `styledTables`, and `xlsx`)
    to create a styled table from a dataset, save it to an Excel file, and apply some
    formatting to it. Let’s break down the code step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we load the required libraries – `TidyDensity` for creating a table of
    randomly generated data from a Gaussian distribution, `styledTables` for styling
    tables, and `xlsx` for working with Excel files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we create and style the table. This code creates a styled table, `st`,
    from the output of the `tidy_normal()` function. The `tidy_normal()` function
    generates some data from a Gaussian distribution and presents it in a tibble format.
    The table is then styled using the `styled_table()` function with `keep_header
    = TRUE`, which means the header row will be retained and styled separately from
    the data rows. The next three lines of code apply specific styles to the first
    row (header row) of the table. It sets a border around all cells in the first
    row, makes the text bold in the first row, and sets a fill color (`#00FF00`, which
    is green) to cells in the third column if the corresponding value (denoted by
    `X`) in that column is greater than or equal to 0.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we create a new Excel workbook and worksheet using the `xlsx` package
    by creating a new workbook with the `createWorkbook()` function. Once this workbook
    has been created, we use the `createSheet()` function to create the sheet in the
    workbook with a sheet name of `tidy_normal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we insert the styled table into the worksheet by using the `write_excel()`
    function from the `styledTables` library. This takes the styled table, `st`, and
    places it into the `tidy_normal` worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we save the workbook to an Excel file with the `saveWorkbook()` XLSX
    function, where we tell it to save the `wb` workbook into an Excel file named
    `styledTables_test.xlsx` in a subdirectory called `chapter5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In summary, this R code generates a styled table from some data (obtained from
    `tidy_normal()`), applies specific formatting to the header row and cells in the
    third column, saves the styled table in an Excel file, and places it in a worksheet
    named `tidy_normal`. The resulting Excel file will contain the styled table with
    the specified formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using basictabler in R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `basictabler` R package provides an easy way to create rich tables from
    `DataFrame` or matrices. The tables can be rendered as HTML, HTML widgets, or
    Excel spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `basictabler` object, you need to create a `DataFrame` or matrix.
    Once you have your data, you can create a `basictabler` object by calling the
    `qhtbl()` function. The `qhtbl()` function takes two arguments: the `DataFrame`
    or matrix, and a list of formatting options. We are going to spend time on the
    `qhtbl()` function and the `BasicTable()` function. The `qhtbl()` function is
    a quick way to generate a table, while the `BasicTable()` function is a way to
    build it piece by piece. First, we are going to create a very basic example using
    the `qhtbl()` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Using basictabler to create a plain table](img/B19142_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Using basictabler to create a plain table
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can see what it looks like, let’s go over what just happened. First,
    we created a dataset named `data`. This was a small simple dataset purely to help
    illustrate the use of the `basictabler` package. Once the data has been created,
    we simply call the `ghtbl()` function on the data, give it a theme of `largeplain`,
    and then assign it to the `table_plain` variable. This only makes the table –
    it does not send it to Excel. We will go over that later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at another example that is a little bit more involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code will produce a table that consists of the same data. However,
    the difference here is that this one will have some styling. Let’s go over the
    styling options we used; then, we will see the finished product.
  prefs: []
  type: TYPE_NORMAL
- en: The first difference is that we used the `tableStyle` option. This option in
    the function takes in as its argument a list object of CSS style declarations
    that will be applied to the table. For this option, we provided a value of `"border-color"
    = "``maroon"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next option that we used is `headingStyle`, which also takes a list object
    of CSS style declarations that get applied to the headings of the table. In the
    preceding code, we used four different options inside the list. First, we chose
    to use the `color` option with a value of `cornsilk` and then we chose `background-color`
    with a value of `maroon`. The next option we chose was `font-style` for `italics`
    and then finally `border-color` with `maroon`. Let’s see what this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – A second basictabler example using some different styling](img/B19142_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – A second basictabler example using some different styling
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s walk through a longer example that will use some different features
    of the `basictabler` package to map styles according to some sort of logic that
    we dictate. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`library(TidyDensity)` imports the `TidyDensity` package into the R environment.
    This package provides tools for visualizing and summarizing distributions. We
    use it specifically to generate a tibble of a normal distribution with 10 points.
    We do not need to call in `basictabler` because it is already loaded at this point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we assign `tn <- tidy_normal(.n = 10)`. This line creates a dataset called
    `tn` by generating 10 random points from a standard normal distribution. The function
    also creates the density of the data (`dx`, `dy`), along with `pnorm` and `qnorm`,
    as columns of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`tbl <- BasicTable$new()` creates a new instance of a `BasicTable` object called
    `tbl`. The `BasicTable` class is an `R6` class object from the `basictabler` package.
    This function has many different public methods associated with it. These methods
    help create the table itself, as well as its styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code snippet, we understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tbl$addData(tn, ...)`: This line adds the data from the `tn` dataset to the
    `tbl` table object. It also sets some options for how the data should be displayed,
    such as using the first column as row headers and explicitly setting the column
    headers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columnFormats <- list(...)`: Here, a list named `columnFormats` is created,
    which contains formats for each column of the table. The formats that are specified
    are for the second to the seventh column (index 1 to 6) and are represented using
    `strings.tbl$renderTable()`. Here, we used `%.4f`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tbl$renderTable()`: This line renders the table based on the data and formatting
    provided earlier and displays it in the R environment. This gives us the necessary
    table pre-styling so that we can see a base table versus what we’ve done to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `cells <- tbl$getCells(...)` line retrieves a subset of cells from
    the `tbl` table object. It selects cells from rows 2 to 11 and columns 3 to 7
    (`y`, `dx`, `dy`, `p`, `q`) using the `getCells()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `tbl$mapStyling(...)` line applies conditional formatting to the selected
    cells. The `mapStyling()` method is used to map styles (such as background color)
    to cell values based on certain conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After applying conditional formatting, the `tbl$renderTable()` line renders
    the updated table with the formatted cells, and it will be displayed in the R
    environment again.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, the preceding R code imports a package, creates a dataset of random
    numbers, generates a table with formatted data, displays the table, applies conditional
    formatting to specific cells, and finally displays the table again with the formatted
    cells. Conditional formatting assigns different background colors to cells based
    on the values in the specified columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at what we created. Remember that the data may be different
    for you as the values are random. First, we will look at the plain table, and
    then the styled table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 –  BasicTable R6 plain table](img/B19142_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – BasicTable R6 plain table
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the styled table according to the logic created in the `mapStyling()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – BasicTable R6 styled table](img/B19142_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – BasicTable R6 styled table
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have made the tables, let’s see how we can use the `basictabler`
    package to save them to an Excel file. First, we are going to rely on a package
    that was introduced earlier: `openxlsx`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the script we are going to use; you will notice that the `chapter5`
    directory has been used as it was created first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used the public method of `writeToExcelWorksheet()` from the `basictabler`
    package. While it does not directly write to an Excel file, it does get the object
    into a format that can be written to Excel using a package such as `openxlsx`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve learned about some of the possibilities to write in R, let’s
    have a look at similar tools in Python. Once again, we will go over how to format
    cells and tables for Excel. For more details, you can take a look at some extra
    packages, such as `gt` and `gtextras`.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced options for formatting with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python section of this chapter is organized into the following three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Cell formatting*: Cell formatting is crucial for presenting data in a visually
    appealing and organized manner. We will demonstrate how to apply various formatting
    styles to cells, such as setting font properties (for example, size, color, bold,
    and italic), adjusting cell background colors, and aligning text within cells.
    You will learn how to create professional-looking tables with well-formatted cells
    that enhance data readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conditional formatting*: Conditional formatting allows you to dynamically
    format cells based on specific conditions. We will walk you through the process
    of applying conditional formatting to highlight important data points, visualize
    trends, and identify outliers. You will discover how to use `pandas` and `openpyxl`
    to implement various conditional formatting rules, such as color scales, data
    bars, and icon sets, making your data stand out in the Excel sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Pivot tables*: Pivot tables are powerful tools for summarizing and analyzing
    data in Excel. We will show you how to create pivot tables using `pywin32`, as
    well as how to adjust subtotals and grand totals and customize labels and styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout this chapter, we will provide practical examples and detailed explanations
    to guide you through the process of formatting your Excel sheets effectively.
    By mastering cell formatting, conditional formatting, and pivot tables, you will
    be able to present your data professionally and make it visually compelling, facilitating
    better insights and data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started with cell formatting!
  prefs: []
  type: TYPE_NORMAL
- en: Cell formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cell formatting is a crucial aspect of presenting data effectively in Excel.
    With `pandas` and `openpyxl`, you have powerful tools at your disposal to customize
    the appearance of cells. You can apply a wide range of formatting styles to make
    your tables visually appealing and enhance data readability.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with cell formatting, you will learn how to set various font
    properties, such as font size, color, boldness, and italics. These adjustments
    allow you to emphasize certain data points and create a consistent visual hierarchy
    in your tables.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can control the background color of cells to group related
    data or highlight specific values. By setting cell background colors, you can
    create clear demarcations between different sections of your table, making it
    easier for readers to interpret the data.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning text within cells is another important formatting technique. With `pandas`
    and `openpyxl`, you can align text horizontally and vertically, ensuring that
    your data is presented in a tidy and organized manner.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will walk you through practical examples of cell formatting
    using both `pandas` and `openpyxl`. You will learn how to apply different formatting
    styles, adjust font properties, change cell background colors, and align text
    within cells. Armed with these skills, you will be able to create professional-looking
    tables that effectively convey your data’s message and insights.
  prefs: []
  type: TYPE_NORMAL
- en: Setting font properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start by exploring how to set font properties for cells using both `pandas`
    and `openpyxl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `pandas`, for more advanced styling, including custom CSS-like styles, we
    can use the `Styler.apply` method, along with custom functions to format the cells,
    to apply the font properties to suit our preferences, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The resulting Excel sheet is available in this chapter’s GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `openpyxl`, you can use the `Font` class to set font properties. For instance,
    to make text bold, you can set the `bold` attribute of the font object to `True`.
    You can also adjust other font properties, such as `size` and `color`, to achieve
    the desired formatting. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Cell background colors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Changing the background color of cells is another formatting technique that
    can help you visually distinguish different parts of your table. In `pandas`,
    you can set the `background-color` CSS style using the `Styler` object, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code demonstrates how to use `pandas` to create a `DataFrame`
    containing some sample data and then apply cell background colors to specific
    cells in the `DataFrame`. The `DataFrame` contains information about individuals’
    names, ages, and cities. By using the `pandas` `Styler` object, we can define
    the background color for specific cells. In this example, the first row’s `Name`
    and `Age` columns are highlighted with a yellow background color. Finally, the
    styled `DataFrame` is saved to an Excel file named `colored_table_pandas.xlsx`.
    This technique allows for easy and flexible cell formatting when exporting data
    from Python to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s have a look at how we can achieve something similar with `openpyxl`!
  prefs: []
  type: TYPE_NORMAL
- en: 'In `openpyxl`, you can set the background color of cells using the `Fill` class,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Aligning text within cells
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Properly aligning text within cells can significantly improve the table’s visual
    presentation. In `pandas`, you can use the `Styler` object to apply text alignment
    styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this code, the text in the specified columns of the `DataFrame` will be
    aligned to the center. This code uses the `set_properties` method to apply the
    text alignment to the specified columns. The resulting `DataFrame` is then saved
    to an Excel file named `aligned_table_pandas.xlsx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `openpyxl`, you can set text alignment using the `Alignment` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With these examples, you have learned how to customize cell formatting, set
    font properties, change cell background colors, and align text within cells using
    both `pandas` and `openpyxl`. By utilizing these formatting options, you can create
    visually appealing and informative tables to present your data effectively in
    Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we continue our deep dive with conditional formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditional formatting is a powerful feature in Excel that allows you to automatically
    apply formatting to cells based on specific conditions. It enables you to visually
    highlight important data, identify trends, and make your Excel sheets more interactive.
    In this chapter, we will explore how to implement conditional formatting using
    `openpyxl`. We’ll cover various scenarios, such as highlighting cells based on
    value ranges, text, and date criteria. Additionally, we’ll demonstrate how to
    create custom conditional formatting rules to suit your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have the skills to add dynamic and visually
    appealing conditional formatting to your Excel sheets directly from Python. Let’s
    dive in and learn how to make your data stand out with conditional formatting!
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with conditional formatting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By applying conditional formatting to your Excel sheets, you can effectively
    visualize your data and gain valuable insights at a glance. For example, you can
    highlight the highest and lowest values in a column, color cells based on specific
    categories, or emphasize significant changes over time.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional formatting is particularly useful when dealing with large datasets
    as it allows you to quickly identify key information and make data-driven decisions.
  prefs: []
  type: TYPE_NORMAL
- en: '`openpyxl` provides functionalities to implement conditional formatting in
    Excel sheets. The library offers a range of options to apply different formatting
    styles based on specific conditions. The process of using `openpyxl` for conditional
    formatting involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the required modules from `openpyxl` and load your data into a workbook
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a conditional formatting rule using `openpyxl.formatting.rule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the rule’s conditions, such as applying styles based on cell values,
    text, or date criteria.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the rule to the desired range of cells using `openpyxl.worksheet.conditional.ConditionalFormatting.add()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `openpyxl`, you can easily implement conditional formatting rules and add
    visual cues to your Excel sheets, enhancing the presentation of your data and
    facilitating data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at some code that implements the preceding concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we create an Excel workbook from a `pandas` `DataFrame`. Then,
    we define two conditional formatting rules: red text if the `Sales` value is less
    than `1000` while `green_fill_rule` uses the minimum and maximum age values from
    the `Age` column to set up the color scale condition. This way, the cells in the
    `Age` column will be filled with green colors based on their relative values within
    the minimum and maximum values. These rules are added to the worksheet’s `conditional_formatting`
    property. Finally, we save the Excel workbook, and conditional formatting will
    be applied when you open the Excel file with Microsoft Excel.'
  prefs: []
  type: TYPE_NORMAL
- en: Custom conditional formatting rules provide you with precise control over how
    your data is displayed, making it easier to identify patterns, trends, and outliers
    in your Excel sheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll cover a case study where conditional formatting can really shine:
    a dynamic heatmap!'
  prefs: []
  type: TYPE_NORMAL
- en: Case study – using a dynamic heatmap with conditional formatting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To further demonstrate the power of conditional formatting, we’ll walk through
    a case study where we create a dynamic heatmap using Python and Excel. We’ll use
    conditional formatting to color cells in the heatmap based on the data’s magnitude,
    enabling us to visualize the data’s intensity and patterns effectively. What’s
    created here is also called a **highlight table**, given there is an annotation
    (numbers) in the table and not just the heatmap colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the implementation of such a heatmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Conditional formatting is a valuable tool for enhancing the visual representation
    of data in Excel. Whether you’re using `pandas` or `openpyxl`, you can easily
    implement conditional formatting rules to dynamically format cells based on specified
    conditions. By incorporating conditional formatting into your Excel sheets, you
    can create compelling visualizations and better understand your data, making data
    analysis and decision-making more efficient and effective.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pivot tables are powerful tools in Excel that allow you to summarize and analyze
    large datasets quickly. They provide a flexible way to aggregate, group, and calculate
    data, enabling you to gain valuable insights from your data with just a few clicks.
    In this section, we will explore how to create and manipulate pivot tables from
    Python using `pywin32`. Additionally, we will cover some techniques for adjusting
    subtotals and grand totals and customizing labels and styles.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pivot tables with pywin32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`pywin32` allows you to interact with Microsoft Excel via the COM interface.
    With this library, you can control Excel’s features, including creating pivot
    tables.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a pivot table with `win32com.client` in Python, you can use the code
    snippets provided in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set everything up by importing the required module, starting an Excel
    instance as we did in [*Chapter 3*](B19142_03.xhtml#_idTextAnchor055), and getting
    a sheet we can work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, generate some sample data and write it to the sheet (this is optional;
    that is, only do this if you have data to analyze):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Fun fact
  prefs: []
  type: TYPE_NORMAL
- en: You can watch the workbook populate with values when this nested `for` loop
    runs!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can start on the actual pivot table! We’ll begin by creating a new
    sheet where the pivot will go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can create the pivot table itself by using the `Create()` method of
    the `PivotCaches` property of the workbook and then calling `CreatePivotTable()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'With the pivot table defined, we can add the fields we want to use as row,
    column, and data fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re almost there! We now have a working pivot table, but we may want to switch
    grand totals and subtotals on or off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can customize the labels and styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With that, you’ve learned how to create a pivot table in Excel using `win32com.client`,
    enabling you to analyze and summarize your data effectively. The library allows
    you to have full control over Excel, including creating and customizing pivot
    tables based on your specific data analysis needs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the art of formatting Excel sheets to present
    data in a visually appealing and organized manner. Divided into three sections,
    we covered essential techniques to transform raw data into professional-looking
    tables that enhance data readability.
  prefs: []
  type: TYPE_NORMAL
- en: The first section focused on cell formatting, where we demonstrated how to apply
    various styles to cells, such as adjusting font properties, cell backgrounds,
    and text alignment. By mastering cell formatting, you can create well-organized
    and visually appealing tables.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored conditional formatting, a powerful feature that allows you
    to dynamically format cells based on specific conditions. We provided practical
    examples of using `styledTables` and `basictabler` for R and then `pandas` and
    `openpyxl` for Python to implement various conditional formatting rules, such
    as color scales, data bars, and icon sets, making your data stand out and revealing
    critical insights.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we unlocked the potential of pivot tables, which are indispensable tools
    for summarizing and analyzing data. Using `pywin32`, we created pivot tables and
    learned how to adjust subtotals and grand totals, as well as customize labels
    and styles.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, you’ve gained valuable skills in Excel manipulation
    using `styledTables`, `basictabler`, `pandas`, `openpyxl`, and `pywin32`, thus
    enabling you to present your data professionally, make it visually compelling,
    and uncover meaningful insights for more informed decision-making. With these
    techniques at your disposal, you are well-equipped to excel in data analysis and
    visualization, taking your Excel proficiency to new heights.
  prefs: []
  type: TYPE_NORMAL
- en: Stay tuned for the next chapter, *Inserting ggplot2/matplotlib Graphs*! There,
    you will learn how to add beautiful data visualizations to your Excel sheets using
    R and Python.
  prefs: []
  type: TYPE_NORMAL
