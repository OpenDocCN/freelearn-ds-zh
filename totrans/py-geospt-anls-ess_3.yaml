- en: Chapter 3. Spatial Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 空间数据库
- en: In this chapter, we will look at how you can use a database to store, analyze,
    and manipulate geospatial data. While spatial databases can be quite complex,
    and the process of optimizing spatial queries can be challenging, they can be
    used in a straightforward way without too much fuss and are an important part
    of the geospatial analyst's toolkit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用数据库存储、分析和操作地理空间数据。虽然空间数据库可能相当复杂，优化空间查询的过程可能具有挑战性，但它们可以以简单直接的方式使用，而无需太多麻烦，并且是地理空间分析师工具箱的重要组成部分。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn the important concepts you'll need to know before using a spatial database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习在使用空间数据库之前需要了解的重要概念
- en: Install the PostgreSQL relational database system onto your computer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装PostgreSQL关系数据库系统
- en: Install the PostGIS extension to PostgreSQL to support spatial databases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PostGIS扩展到PostgreSQL以支持空间数据库
- en: Install the `psycopg2` database adapter to allow you to access Postgres from
    your Python programs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`psycopg2`数据库适配器，以便您可以从Python程序访问Postgres
- en: Learn how to create a spatial database using PostGIS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用PostGIS创建空间数据库
- en: Discover how to import data into your spatial database using Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现如何使用Python将数据导入您的空间数据库
- en: Learn how to query your spatial database using Python code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Python代码查询您的空间数据库
- en: See how you can manipulate your spatial data from Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看您如何从Python操作您的空间数据
- en: Learn how to export data out of a spatial database
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何从空间数据库导出数据
- en: Let's start by looking at the concept of spatial databases and how they work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看空间数据库的概念及其工作方式开始。
- en: Spatial database concepts
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空间数据库概念
- en: 'As mentioned in the previous chapter, spatial databases are databases which
    can store and query spatial data. Each record in a spatially-enabled database
    table has one or more **geometry fields** which position that record somewhere
    on the Earth''s surface. How the geometry field(s) are used will depend on what
    type of information you are storing in the database table. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，空间数据库是可以存储和查询空间数据的数据库。在空间启用数据库表的每个记录中都有一个或多个**几何字段**，这些字段将记录定位在地球表面的某个位置。几何字段（们）的使用将取决于您在数据库表中存储的信息类型。例如：
- en: A record representing a delivery vehicle might include a Point geometry reflecting
    the vehicle's current location.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示送货车辆的记录可能包括一个表示车辆当前位置的点几何形状。
- en: A record representing a road might include a LineString geometry representing
    the shape of the road.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示道路的记录可能包括一个表示道路形状的LineString几何形状。
- en: A record representing a forest fire might include a Polygon geometry representing
    the area affected by the fire.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示森林火灾的记录可能包括一个表示火灾影响区域的Polygon几何形状。
- en: Note
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some spatial databases allow you to have multiple geometry fields, while others
    are limited to just one per record.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些空间数据库允许您有多个几何字段，而其他数据库则限制每个记录只有一个。
- en: By itself, a geometry field is simply a database *blob* which can hold the encoded
    geometry data. The data is usually stored in **Well-Known Binary** (**WKB**) format.
    This allows you to store and retrieve geometry data from the database. However,
    by itself, this isn't very useful—what defines a spatial database is the ability
    to build a **spatial index** using the stored geometry values.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单独来看，几何字段只是一个可以存储编码几何数据的数据库*blob*。数据通常以**已知二进制**（**WKB**）格式存储。这允许您从数据库中存储和检索几何数据。然而，单独来看，这并不非常有用——定义空间数据库的是使用存储的几何值构建**空间索引**的能力。
- en: 'A spatial index is what allows you to search for records in the database based
    on their position on the Earth''s surface. A spatial index does not index the
    geometry directly. Instead, it calculates the **bounding box** for each geometry,
    and then indexes that bounding box. The following illustration shows how this
    works:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 空间索引允许您根据记录在地球表面的位置在数据库中搜索记录。空间索引不会直接索引几何形状。相反，它为每个几何形状计算**边界框**，然后索引该边界框。以下插图显示了这是如何工作的：
- en: '![Spatial database concepts](img/4102_03_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![空间数据库概念](img/4102_03_01.jpg)'
- en: 'A common task for spatial indexes is to identify the geometry (or geometries)
    that contain a given point. For example, if the user clicks on a location on a
    map, you might want to know which country, if any, the user clicked on. This is
    represented by a spatial database query such as the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 空间索引的常见任务是指定包含给定点的几何形状（或几何形状）。例如，如果用户在地图上点击一个位置，你可能想知道用户点击的是哪个国家（如果有的话）。这可以通过以下空间数据库查询表示：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `ST_Contains` function is an example of a database query function. This
    function is provided by the PostGIS spatial database. Different spatial databases
    use different names for their various query functions; all the query functions
    listed in this chapter come from PostGIS, as that is the database we'll be working
    with in this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_Contains`函数是一个数据库查询函数的例子。此函数由PostGIS空间数据库提供。不同的空间数据库使用不同的名称来命名它们的查询函数；本章中列出的所有查询函数都来自PostGIS，因为我们将在本书中使用该数据库。'
- en: 'To perform this query, the database first uses the spatial index to identify
    those records that have a bounding box containing the desired point. This process
    is shown in the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此查询，数据库首先使用空间索引来识别那些包含所需点的边界框的记录。此过程如下所示：
- en: '![Spatial database concepts](img/4102_03_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![空间数据库概念](img/4102_03_02.jpg)'
- en: 'The crosshairs represent the desired point, and the rectangles represent the
    bounding boxes. As you can see, there are two bounding boxes which contain the
    desired point. These bounding boxes correspond to the records labeled `France`
    and `Germany` in the database. The database uses this information to load each
    of the matching geometries into memory and checks each one in turn to see if it
    contains the desired point:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 十字准线代表所需点，矩形代表边界框。正如你所见，有两个边界框包含所需点。这些边界框对应于数据库中标记为`法国`和`德国`的记录。数据库使用这些信息将每个匹配的几何形状加载到内存中，并逐一检查它们是否包含所需点：
- en: '![Spatial database concepts](img/4102_03_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![空间数据库概念](img/4102_03_03.jpg)'
- en: In this way, the database was able to determine that the click point was inside
    Germany.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，数据库能够确定点击点位于德国境内。
- en: 'Let''s review this process, as it is a very important concept. The database
    *first* identifies the potentially matching records using the bounding boxes stored
    in the spatial index and *then* loads each potential geometry into memory to check
    it. This two-step process is surprisingly efficient: by using the bounding boxes
    in the spatial index, it immediately discards the vast majority of records which
    are not a potential match. It then performs the relatively time-consuming task
    of loading the geometry into memory only for the few potential matches, and then
    checks each of these in turn.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾这个过程，因为它是一个非常重要的概念。数据库首先使用存储在空间索引中的边界框来识别可能匹配的记录，然后加载每个可能的几何形状到内存中进行检查。这个两步过程非常高效：通过使用空间索引中的边界框，它立即排除了绝大多数不可能匹配的记录。然后，它只对少数可能的匹配进行相对耗时的加载几何形状到内存的任务，然后逐一检查这些记录。
- en: 'It is important that you understand this two-step process of performing spatial
    queries because you have to do certain things to make sure it works. In particular:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 理解执行空间查询的两步过程非常重要，因为您必须做一些事情来确保它正常工作。特别是：
- en: You have to ensure that the geometries you want to query against are included
    in a spatial index.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须确保您想要查询的几何形状包含在空间索引中。
- en: You have to carefully phrase your query so that the database can actually use
    the index you have set up. If, for example, the database has to transform your
    geometry from one spatial reference system to another, or perform some sort of
    spatial manipulation on the data before it can be queried against, then your spatial
    index will be ignored and the database will revert to performing a sequential
    scan of all your data. This can be extremely slow, taking hours or even days to
    complete a single query.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须仔细措辞您的查询，以便数据库实际上可以使用您设置的索引。例如，如果数据库必须将您的几何形状从一种空间参考系统转换到另一种，或者在进行查询之前对数据进行某种空间操作，那么您的空间索引将被忽略，数据库将回退到对您所有数据进行顺序扫描。这可能非常慢，可能需要数小时甚至数天才能完成单个查询。
- en: If you have an extremely complex geometry with a large bounding box, for example,
    a detailed outline of the United States, you may find that your queries are still
    taking a long time to complete. This is because the bounding box covers such a
    large area of the Earth's surface that it is being included in many queries, and
    the complexity of the outline means that the query is still taking a long time
    to process. One way to solve this problem is to split a large and complex geometry
    into smaller pieces, so the database only has to process one small piece rather
    than the whole thing.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果你有一个具有大边界框的极其复杂的几何形状，比如美国的一个详细轮廓，你可能会发现你的查询仍然需要很长时间才能完成。这是因为边界框覆盖了地球表面如此大的区域，它被包含在许多查询中，而轮廓的复杂性意味着查询仍然需要很长时间来处理。解决这个问题的方法之一是将一个大而复杂的几何形状分成更小的部分，这样数据库只需要处理一小部分而不是整个。
- en: 'Despite these potential issues, a spatial database is a wonderful tool for
    storing and analyzing geospatial data. Of course, spatial databases are not limited
    to just searching for records using `ST_Contains()`. They can be used for all
    sorts of spatial queries as seen in the following table:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些潜在问题，空间数据库是存储和分析地理空间数据的绝佳工具。当然，空间数据库不仅限于使用 `ST_Contains()` 搜索记录。它们可以用于各种空间查询，如下表所示：
- en: '| Spatial query function | Description |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 空间查询函数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ST_Within` | This matches the records that have a geometry completely enclosed
    by a given polygon. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `ST_Within` | 这匹配完全被给定多边形包围的几何形状的记录。 |'
- en: '| `ST_Intersects` | This matches the records where the record''s geometry intersects
    with a given geometry. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `ST_Intersects` | 这匹配记录的几何形状与给定几何形状相交的记录。 |'
- en: '| `ST_Crosses` | This matches the records where the record''s geometry crosses
    over a given line or polygon. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `ST_Crosses` | 这匹配记录的几何形状与给定的线或多边形交叉的记录。 |'
- en: '| `ST_DWithin` | This matches the records that are within a given distance
    of a given location or geometry. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `ST_DWithin` | 这匹配位于给定位置或几何形状给定距离内的记录。 |'
- en: There are some subtleties in these spatial query functions which you will need
    to become familiar with—these are described in detail in the PostGIS documentation.
    However, this table should give you an idea of the power of a spatial database
    and tell you how a spatial database (using the appropriate spatial indexes) can
    be a great tool for working with geospatial data, especially when you have many
    records to process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些空间查询函数中有些细微之处你需要熟悉——这些在 PostGIS 文档中有详细描述。然而，这个表格应该能让你了解空间数据库的力量，并告诉你如何使用适当的空间索引的空间数据库可以是一个处理地理空间数据的强大工具，尤其是在你需要处理大量记录时。
- en: Now that you have some idea of how a spatial database works, let's install one
    on your computer and then see how we can access it from within your Python programs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对空间数据库的工作原理有了些了解，让我们在你的电脑上安装一个，然后看看我们如何从你的 Python 程序中访问它。
- en: Installing a spatial database
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装空间数据库
- en: 'In this book, we are going to use one of the most popular and powerful geospatial
    databases: PostGIS. PostGIS is an extension to the freely available PostgreSQL
    relational database. To use it in our Python programs, we need to install three
    separate pieces of software:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用最受欢迎和最强大的地理空间数据库之一：PostGIS。PostGIS 是一个免费提供的 PostgreSQL 关系型数据库的扩展。为了在我们的
    Python 程序中使用它，我们需要安装三个独立的软件组件：
- en: The PostgreSQL database server itself
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The PostgreSQL database server itself
- en: The PostGIS extension to PostgreSQL
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 的 PostGIS 扩展
- en: The `psycopg2` database adapter for Python
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The `psycopg2` database adapter for Python
- en: Note
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PostgreSQL is often referred to simply as **Postgres**. We will use this more
    colloquial name regularly throughout this book.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 通常简称为 **Postgres**。在这本书中，我们将经常使用这个更口语化的名称。
- en: Let's work through the process of installing each of these pieces of software
    in turn.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解安装这些软件组件的过程。
- en: Installing PostgreSQL
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL
- en: PostgreSQL ([http://postgresql.org](http://postgresql.org)) is one of the most
    powerful open source relational databases available. While it has a reputation
    for being difficult to set up and use, it's not too tricky, and with prebuilt
    installers available for every major operating system the setup process is now
    quite straightforward.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL ([http://postgresql.org](http://postgresql.org)) 是最强大的开源关系型数据库之一。虽然它以设置和使用困难而闻名，但实际上并不太复杂，并且由于每个主要操作系统都有预构建的安装程序，设置过程现在相当直接。
- en: 'Let''s go ahead and get PostgreSQL installed on your computer. How you do this
    depends on which operating system you are running:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在您的计算机上安装 PostgreSQL。您如何操作取决于您正在运行的操作系统：
- en: If your computer runs Microsoft Windows, you can download an installer for PostgreSQL
    from [http://www.enterprisedb.com/products-services-training/pgdownload](http://www.enterprisedb.com/products-services-training/pgdownload).
    Select the appropriate installer for your version of Windows (32-bit or 64-bit),
    and download the installer file. Then simply double-click on the downloaded installer
    and follow the instructions.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的计算机运行的是 Microsoft Windows，您可以从 [http://www.enterprisedb.com/products-services-training/pgdownload](http://www.enterprisedb.com/products-services-training/pgdownload)
    下载 PostgreSQL 的安装程序。选择适合您 Windows 版本（32 位或 64 位）的安装程序，并下载安装程序文件。然后只需双击下载的安装程序，并按照说明操作。
- en: If you are running Mac OS X, you can download a working version of PostgreSQL
    from the KyngChaos web site, [http://www.kyngchaos.com/software/postgres](http://www.kyngchaos.com/software/postgres).
    Simply download the disk image, open it, and double-click on the **PostgreSQL.pkg**
    package file to install PostgreSQL on your computer.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在运行 Mac OS X，您可以从 KyngChaos 网站下载 PostgreSQL 的有效版本，[http://www.kyngchaos.com/software/postgres](http://www.kyngchaos.com/software/postgres)。只需下载磁盘映像，打开它，然后双击
    **PostgreSQL.pkg** 包文件来在您的计算机上安装 PostgreSQL。
- en: If you are using a Linux machine, you can follow the instructions on the PostgreSQL
    download page, [http://www.postgresql.org/download](http://www.postgresql.org/download).
    Choose the appropriate link for the Linux distribution you are using, and you
    will be presented with the appropriate installation instructions.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Linux 机器，您可以遵循 PostgreSQL 下载页面上的说明，[http://www.postgresql.org/download](http://www.postgresql.org/download)。选择适合您使用的
    Linux 发行版的链接，您将看到相应的安装说明。
- en: 'Once you have installed PostgreSQL, you can check that it is running by typing
    the `psql` command into a terminal or command-line window. If all going well,
    you should see the Postgres command line:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL 后，您可以通过在终端或命令行窗口中输入 `psql` 命令来检查它是否正在运行。如果一切顺利，您应该会看到 Postgres
    命令行：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If the `psql` command complains about user authentication, you may need to
    specify a user account to use when connecting to Postgres. For example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `psql` 命令在用户身份验证方面出现问题，您可能需要指定在连接到 Postgres 时使用的用户账户。例如：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Many Postgres installations have a `postgres` user, which you need to select
    (using the `–U` command-line option) when accessing the database. Alternatively,
    you may need to use `sudo` to switch to the root user, or open the command prompt
    as an administrator if you are running Microsoft Windows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 PostgreSQL 安装都有一个名为 `postgres` 的用户，当访问数据库时，您需要选择该用户（使用 `–U` 命令行选项）。或者，如果您正在运行
    Microsoft Windows，您可能需要使用 `sudo` 切换到 root 用户，或者以管理员身份打开命令提示符。
- en: Installing PostGIS
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 PostGIS
- en: Now that we've installed Postgres itself, we next need to install the PostGIS
    spatial database extension. The main website for PostGIS can be found at [http://postgis.net](http://postgis.net).
    You should go to this website, click on the **Documentation** tab, and download
    the user manual for the latest version of PostGIS. You'll find this manual very
    helpful, as it explains PostGIS in great detail, including all the various sorts
    of queries you can make.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Postgres 本身，接下来我们需要安装 PostGIS 空间数据库扩展。PostGIS 的主要网站可以在 [http://postgis.net](http://postgis.net)
    找到。您应该访问此网站，点击 **文档** 选项卡，并下载最新版本 PostGIS 的用户手册。您会发现这本手册非常有帮助，因为它详细解释了 PostGIS，包括您可以执行的各类查询。
- en: 'How you install PostGIS depends on which operating system you are running:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何安装 PostGIS 取决于您正在运行的操作系统：
- en: If your computer is running MS Windows, you can download an installer for PostGIS
    from [http://download.osgeo.org/postgis/windows](http://download.osgeo.org/postgis/windows).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的计算机运行的是 MS Windows，您可以从 [http://download.osgeo.org/postgis/windows](http://download.osgeo.org/postgis/windows)
    下载 PostGIS 的安装程序。
- en: For Mac OS X, download and run the PostGIS installer from [http://kyngchaos.com/software/postgres](http://kyngchaos.com/software/postgres).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Mac OS X，从 [http://kyngchaos.com/software/postgres](http://kyngchaos.com/software/postgres)
    下载并运行 PostGIS 安装程序。
- en: Note
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you will also need to have installed the GDAL Complete package, which
    you should have already done when working through the previous chapter.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您还需要安装 GDAL 完整包，您应该在处理上一章时已经完成了这一步骤。
- en: 'If you are using a Linux-based operating system, follow the instructions on
    the PostGIS installation page: [http://postgis.net/install](http://postgis.net/install).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是基于 Linux 的操作系统，请遵循 PostGIS 安装页面上的说明：[http://postgis.net/install](http://postgis.net/install)。
- en: 'To check that PostGIS has been successfully installed, try typing the following
    sequence of commands into your terminal window:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 PostGIS 是否已成功安装，请尝试在终端窗口中输入以下命令序列：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You'll need to add a `–U postgres` option or use `sudo` for each of these commands
    if you need to run PostgreSQL under a different user account.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在不同的用户账户下运行 PostgreSQL，则需要为这些命令添加 `–U postgres` 选项或使用 `sudo`。
- en: As you can probably guess, the `createdb` command creates a new database. We
    then use the `psql` command to initialize that database with the PostGIS extension,
    and finally the `dropdb` command deletes the database again. If this sequence
    of commands runs without error, your PostGIS installation (and Postgres itself)
    is set up and running properly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能猜到的，`createdb` 命令创建一个新的数据库。然后我们使用 `psql` 命令使用 PostGIS 扩展初始化该数据库，最后使用 `dropdb`
    命令再次删除数据库。如果这一系列命令运行无误，则表示您的 PostGIS 安装（以及 Postgres 本身）已正确设置并运行。
- en: Installing psycopg2
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 psycopg2
- en: Now that we've got a spatial database, let's install the `psycopg2` library
    so we can access it using Python.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了一个空间数据库，让我们安装 `psycopg2` 库，以便我们可以使用 Python 访问它。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: '`psycopg2` is a standard Python database adapter—that is, it''s a library that
    conforms to the Python Database API specified in PEP 249 ([https://www.python.org/dev/peps/pep-0249](https://www.python.org/dev/peps/pep-0249)).
    We will look at how to use `psycopg2` to store and query against spatial data,
    but if you have not worked with a Python database adapter before, you may want
    to look at one of the available tutorials on the subject. A good tutorial on the
    subject can be found at [http://halfcooked.com/presentations/osdc2006/python_databases.html](http://halfcooked.com/presentations/osdc2006/python_databases.html).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`psycopg2` 是一个标准的 Python 数据库适配器——也就是说，它是一个符合 PEP 249 中指定的 Python 数据库 API 的库（[https://www.python.org/dev/peps/pep-0249](https://www.python.org/dev/peps/pep-0249)）。我们将探讨如何使用
    `psycopg2` 存储和查询空间数据，但如果您之前没有使用过 Python 数据库适配器，您可能想查看有关此主题的可用教程。有关此主题的一个很好的教程可以在
    [http://halfcooked.com/presentations/osdc2006/python_databases.html](http://halfcooked.com/presentations/osdc2006/python_databases.html)
    找到。'
- en: 'The website for `psqcopg2` can be found at [http://initd.org/psycopg](http://initd.org/psycopg).
    As usual, how you install this library depends on which operating system you are
    using:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`psqcopg2` 的网站可以在 [http://initd.org/psycopg](http://initd.org/psycopg) 找到。通常，您安装此库的方式取决于您使用的操作系统：'
- en: For MS Windows, you can download a double-clickable installer from [http://www.stickpeople.com/projects/python/win-psycopg](http://www.stickpeople.com/projects/python/win-psycopg).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 MS Windows 系统，您可以从 [http://www.stickpeople.com/projects/python/win-psycopg](http://www.stickpeople.com/projects/python/win-psycopg)
    下载可双击安装的程序包。
- en: If your computer runs Mac OS X, a double-clickable installer can be found at
    [http://www.kyngchaos.com/software/python](http://www.kyngchaos.com/software/python).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的计算机运行的是 Mac OS X 系统，可以在 [http://www.kyngchaos.com/software/python](http://www.kyngchaos.com/software/python)
    找到可双击安装的程序包。
- en: For a Linux machine, you will need to install `psycopg2` from source. For instructions
    on how to do this, please refer to [http://initd.org/psycopg/docs/install.html](http://initd.org/psycopg/docs/install.html).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Linux 机器，您需要从源代码安装 `psycopg2`。有关如何操作的说明，请参阅 [http://initd.org/psycopg/docs/install.html](http://initd.org/psycopg/docs/install.html)。
- en: 'To check that it worked, start up your Python interpreter and type the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否安装成功，请启动您的 Python 解释器并输入以下命令：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If `psycopg2` was installed correctly, you should see the Python interpreter
    prompt reappear with no error message, as shown in this example. If an error message
    does appear, you may need to follow the troubleshooting instructions on the `psycopg2`
    website.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `psycopg2` 安装正确，您应该会看到 Python 解释器提示符重新出现，且没有错误信息，如本示例所示。如果出现错误信息，您可能需要遵循
    `psycopg2` 网站上的故障排除说明。
- en: Accessing PostGIS from Python
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 访问 PostGIS
- en: So far, we have installed some tools and libraries onto your computer. Now it's
    time to use those tools and libraries to do something interesting. In the remainder
    of this chapter, we are going to import the World Borders Dataset into a PostGIS
    database, which we will call `world_borders`, and then use Python to perform various
    queries against that data. We will also see how we can manipulate that dataset
    using PostGIS and Python.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将一些工具和库安装到了您的计算机上。现在，是时候使用这些工具和库做一些有趣的事情了。在本章的剩余部分，我们将把世界边界数据集导入到名为
    `world_borders` 的PostGIS数据库中，然后使用Python对该数据进行各种查询。我们还将了解如何使用PostGIS和Python操作该数据集。
- en: To start with, create a new directory named `world_borders` and place it somewhere
    convenient. You will use this directory to store the various files you create.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 `world_borders` 的新目录并将其放置在方便的位置。您将使用此目录来存储您创建的各种文件。
- en: Setting up a spatial database
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置空间数据库
- en: 'When accessing a database using `psycopg2`, we first have to specify which
    database we are going to use. This means that the database must exist before your
    Python code can use it. To set everything up, we''ll use the Postgres command-line
    utilities. Type the following into your terminal or command-line window:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `psycopg2` 访问数据库时，我们首先必须指定我们要使用哪个数据库。这意味着在您的Python代码可以使用它之前，数据库必须存在。为了设置一切，我们将使用Postgres命令行工具。在终端或命令行窗口中输入以下内容：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to include the `-U postgres` option, or `sudo`, if you need to
    access Postgres under a different user account.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记包含 `-U postgres` 选项，或者如果需要以不同的用户账户访问Postgres，请使用 `sudo`。
- en: 'This creates the database itself. We next want to enable the PostGIS spatial
    extension for our database. To do this, enter the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了数据库本身。接下来，我们想要为我们的数据库启用PostGIS空间扩展。为此，请输入以下命令：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we''ve set up the database itself, let''s create the table within
    the database which will hold our spatial data. To do this, we''re going to create
    a Python program called `create_table.py`. Go ahead and create this file within
    your `world_borders` directory, and enter the following into the file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了数据库本身，让我们在数据库中创建一个表来存储我们的空间数据。为此，我们将创建一个名为 `create_table.py` 的Python程序。请创建一个名为
    `world_borders` 的目录，并在其中创建此文件，然后输入以下内容到文件中：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We now want to open up a connection to the database. To do this, we have to
    tell `psycopg2` which database to use and which user account (and possibly, which
    password) to use to access that database. This is done by providing keyword parameters
    to the `psycopg2.connect()` function, like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要打开到数据库的连接。为此，我们必须告诉 `psycopg2` 我们要使用哪个数据库以及哪个用户账户（以及可能，哪个密码）来访问该数据库。这是通过向
    `psycopg2.connect()` 函数提供关键字参数来完成的，如下所示：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You'll only need the `user` parameter if you needed to supply a `-U` command-line
    argument when running the Postgres command-line tools. You'll also only need the
    `password` if that user account is password-protected.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要 `user` 参数，如果您在运行Postgres命令行工具时需要提供 `-U` 命令行参数。您也只需要 `password`，如果该用户账户受密码保护。
- en: 'Once we have a database connection, we then set up a `cursor` object, which
    we''ll use to issue commands to the database:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们建立了数据库连接，我们接下来设置一个 `cursor` 对象，我们将使用它向数据库发出命令：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step may be a bit counter-intuitive: rather than creating the database
    table, we''re going to delete it if it already exists. Doing this lets us run
    the `create_table.py` script multiple times without causing any errors. Here is
    the relevant code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步可能有点反直觉：我们不会创建数据库表，而是会删除它如果它已经存在。这样做可以让我们多次运行 `create_table.py` 脚本而不会产生任何错误。以下是相关代码：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `execute()` statement tells the cursor to run the given SQL command. In
    this case, the command is `DROP TABLE IF EXISTS`, which tells the database to
    delete (drop) the table if it already exists.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute()` 语句告诉游标运行给定的SQL命令。在这种情况下，命令是 `DROP TABLE IF EXISTS`，它告诉数据库如果表已存在，则删除（删除）该表。'
- en: 'We can now create our database table using the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下命令创建我们的数据库表：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice that we have split this command across multiple lines to make it easier
    to read. With the exception of the last line, this is a standard SQL database
    table definition: we''re creating a table where each record has a unique `id`
    value automatically allocated by the database, a `name` value, and an `iso_code`
    value. In the final line, we create the `outline` field and give it a type of
    `GEOGRAPHY`. Geography fields are specific to PostGIS; they are a variant of the
    `GEOMETRY` field type and are designed to work with spatial data that uses unprojected
    latitude and longitude coordinates.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将此命令拆分到多行，以便更容易阅读。除了最后一行之外，这是一个标准的SQL数据库表定义：我们正在创建一个表，其中每个记录都有一个由数据库自动分配的唯一`id`值，一个`name`值和一个`iso_code`值。在最后一行中，我们创建`outline`字段，并给它一个`GEOGRAPHY`类型。地理字段是PostGIS特有的；它们是`GEOMETRY`字段类型的一种变体，旨在与使用未投影纬度和经度坐标的空间数据一起工作。
- en: 'Now that we''ve created our database table, let''s set up a spatial index on
    this data. As we have seen, a spatial index will greatly speed up queries against
    our database. Let''s create a spatial index for our `outline` field:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经创建了我们的数据库表，让我们为这些数据设置一个空间索引。正如我们所见，空间索引将大大加快对数据库的查询速度。让我们为我们的`outline`字段创建一个空间索引：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, because Postgres is a transactional database, we need to *commit*
    the changes we have made, to make them permanent. Here is the necessary code to
    do this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为Postgres是一个事务型数据库，我们需要*提交*我们所做的更改，以使它们永久。以下是完成此操作的必要代码：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This finishes our `create_table.py` program, which should look like the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们的`create_table.py`程序，它应该看起来像下面这样：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you run this program, your database table and the associated spatial index
    will be created. Let's now import the contents of the World Borders Dataset into
    our newly created table.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，你的数据库表和相关的空间索引将被创建。现在，让我们将世界边界数据集的内容导入我们新创建的表中。
- en: Importing spatial data
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入空间数据
- en: Take a copy of the `TM_WORLD_BORDERS-0.3` directory you downloaded earlier,
    and place it inside your `world_borders` directory. Then create another Python
    script named `import_data.py`. This is where you will place the code to import
    the data into your database.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 复制你之前下载的`TM_WORLD_BORDERS-0.3`目录，并将其放置在你的`world_borders`目录内。然后创建另一个名为`import_data.py`的Python脚本。这就是你将放置将数据导入数据库的代码的地方。
- en: 'We are going to use the OGR library to import the data from the shapefile,
    and `psycopg2` to insert it into the database. So the first two lines in our program
    should look like the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用OGR库从shapefile导入数据，并使用`psycopg2`将其插入数据库。因此，我们程序的前两行应该看起来像下面这样：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We next need to open up a connection to the database. The code to do this is
    identical to the code that we used in the `create_table.py` script:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要打开到数据库的连接。执行此操作的代码与我们在`create_table.py`脚本中使用的代码相同：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Don't forget to adjust the keyword parameters to `psycopg2.connect()` to match
    the user account you need to connect to PostgreSQL.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记调整`psycopg2.connect()`的关键字参数，以匹配你需要连接到PostgreSQL的用户账户。
- en: 'We are now ready to start importing the data from the shapefile. First, though,
    we are going to delete the existing contents of our database table; this will
    let us run our `import_data.py` program multiple times, wiping out the existing
    records before adding new ones, so that we start each time with a blank slate:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备开始从shapefile导入数据。不过，首先我们将删除我们数据库表中的现有内容；这将使我们能够多次运行我们的`import_data.py`程序，在添加新记录之前清除现有记录，这样我们每次都是从一张白纸开始：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are now ready to import the data from the shapefile into the database. Let''s
    start this by opening the shapefile and extracting the information we want from
    it, one feature at a time:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备从shapefile导入数据到数据库中。让我们先打开shapefile，并逐个提取我们想要的信息：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should be familiar to you, since we worked with OGR to read the contents
    of a shapefile in the previous chapter. Now that we have the geometry, we can
    convert it into WKT format, like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该对你来说很熟悉，因为我们已经在上一章中使用了OGR来读取shapefile的内容。现在我们有了几何形状，我们可以将其转换为WKT格式，如下所示：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We now have all the information we need to insert the feature into the database.
    Here is the code to perform the actual insertion:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了将要素插入数据库所需的所有信息。以下是执行实际插入的代码：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There is a lot going on here, so let''s take a closer look at this command.
    We are using `INSERT` here, which is a standard SQL command. The `INSERT` command
    has the following basic structure:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情在进行中，所以让我们更仔细地看看这个命令。我们在这里使用 `INSERT`，这是一个标准的 SQL 命令。`INSERT` 命令有以下基本结构：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, we specify the name of the database table, a list of fields,
    and the values to store into those fields.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们指定了数据库表名、字段列表以及要存储到这些字段中的值。
- en: 'As a standard Python database adapter, `psycopg2` will automatically translate
    Python values, such as integers, floating point numbers, strings, `datetime` objects
    and the like, into their SQL equivalents. This is where those `%s` placeholders
    come in—we use `%s` in our SQL command string at each point where we want to provide
    a value, and then supply the actual values themselves as the second parameter
    to the `cursor.execute()` command. Consider, for example, the following Postgres
    command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准的 Python 数据库适配器，`psycopg2` 将自动将 Python 值（如整数、浮点数、字符串、`datetime` 对象等）转换为它们的
    SQL 等价物。这就是那些 `%s` 占位符的作用所在——我们在 SQL 命令字符串的每个想要提供值的地方使用 `%s`，然后作为 `cursor.execute()`
    命令的第二个参数提供实际的值。例如，考虑以下 Postgres 命令：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This command would insert a record into the `users` table, setting the `name`
    field to the value of the `user_name` variable, and the `age` field to the value
    of the `user_age` variable. This conversion of Python values to SQL string literals
    is extremely powerful and is one of the major benefits of using a database adapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将记录插入到 `users` 表中，将 `name` 字段设置为 `user_name` 变量的值，并将 `age` 字段设置为 `user_age`
    变量的值。这种将 Python 值转换为 SQL 字面量的转换非常强大，并且是使用数据库适配器的主要好处之一。
- en: 'There is one final complexity in the `INSERT` statement we are using to import
    the shapefile''s contents into our `borders` table: we are using the `ST_GeogFromText()`
    function to convert our WKT-format string into a geography value before inserting
    it into the `outline` field. We have to do this because OGR and Postgres use different
    internal representations for geometry data. WKT format strings are the *lingua
    franca* that converts between these two internal representations.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将 shapefile 的内容导入到 `borders` 表的 `INSERT` 语句中，有一个最后的复杂性：我们使用 `ST_GeogFromText()`
    函数在插入到 `outline` 字段之前将我们的 WKT 格式字符串转换为地理值。我们必须这样做，因为 OGR 和 Postgres 使用不同的内部表示形式来表示几何数据。WKT
    格式字符串是这些两种内部表示之间的 *通用语言*。
- en: 'After we have finished importing the various features from the shapefile, we
    have to commit our changes so that they are written to the database:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从 shapefile 导入各种特征之后，我们必须提交我们的更改，以便它们被写入数据库：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Putting all of this together, here''s what our `import_data.py` program looks
    like:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，这就是我们的 `import_data.py` 程序的样子：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When we run this program, all the records from the World Borders Dataset shapefile
    should be imported into the database. Notice that it only takes a few seconds
    to complete—even though we have to convert the outlines from OGR geometries into
    WKT, and then convert from WKT into PostGIS geography objects, it does not take
    long to do this.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个程序时，World Borders Dataset shapefile 中的所有记录都应导入到数据库中。请注意，这只需要几秒钟就能完成——尽管我们必须将轮廓从
    OGR 几何形状转换为 WKT，然后再从 WKT 转换为 PostGIS 地理对象，但这并不需要很长时间。
- en: If you want, you can run the `psql` command-line client and type commands such
    as `SELECT id,name,iso_code FROM borders` to see the data that you have imported.
    But of course we really want to use Python to query against our spatial database.
    Let's do this now.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，可以运行 `psql` 命令行客户端，并输入如 `SELECT id,name,iso_code FROM borders` 这样的命令来查看您已导入的数据。但当然，我们真正想要的是使用
    Python 来查询我们的空间数据库。现在让我们这样做。
- en: Querying spatial data
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询空间数据
- en: 'Let''s write another Python program to perform various queries against the
    contents of our database. Start by creating another Python file named `query_data.py`
    and place it into the `world_borders` directory. We start by importing the `psycopg2`
    library, opening up a connection to our database, and creating a database cursor:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再写一个 Python 程序来对数据库内容执行各种查询。首先创建另一个名为 `query_data.py` 的 Python 文件，并将其放置在
    `world_borders` 目录中。我们首先导入 `psycopg2` 库，打开到我们数据库的连接，并创建一个数据库游标：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This should all be familiar from the `create_table.py` program we created earlier.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都应该来自我们之前创建的 `create_table.py` 程序。
- en: 'Let''s now perform a simple (non-spatial) database query, just to see how it
    works. Add the following to the end of your program:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行一个简单的（非空间）数据库查询，只是为了看看它是如何工作的。将以下内容添加到你的程序末尾：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When you run your `query_data.py` program, you should see a list of the record
    IDs and associated names, taken from your `borders` table:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行你的 `query_data.py` 程序时，你应该看到来自你的 `borders` 表的记录 ID 和相关名称的列表：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice that you use `cursor.execute()` to execute your query, and then iterate
    over the cursor to get the matching rows. The value for each row is a tuple containing
    the fields you requested.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你使用 `cursor.execute()` 来执行你的查询，然后遍历游标以获取匹配的行。每行的值是一个包含你请求的字段的元组。
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Of course, you can also use `%s` to include Python values in your query, for
    example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以使用 `%s` 在你的查询中包含 Python 值，例如：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So far, we have been using the non-spatial aspects of PostgreSQL. Let''s now
    make a spatial query against this data. We''re going to ask the database to identify
    all countries within 1,000 kilometers of Paris. Using the `GEOGRAPHY` data type
    in PostGIS, this is easy to do:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用 PostgreSQL 的非空间方面。现在让我们针对这些数据执行一个空间查询。我们将要求数据库识别所有距离巴黎 1,000 公里的国家。使用
    PostGIS 中的 `GEOGRAPHY` 数据类型，这很容易做到：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `ST_DWithin` command identifies the countries that are within `radius`
    meters of the specified point; running the program should return a list of the
    countries that are within 1,000 kilometers of Paris:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_DWithin` 命令识别距离指定点 `radius` 米内的国家；运行程序应该返回一个列表，列出距离巴黎 1,000 公里的国家：'
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This gives you an idea of how powerful PostGIS is, and the types of queries
    you can make using the `psycopg2` database adapter. Make sure you study the *PostGIS
    Reference* section of the PostGIS manual to learn about the various sorts of spatial
    queries you can make.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你了解 PostGIS 的强大功能以及你可以使用 `psycopg2` 数据库适配器执行的查询类型。确保你研究 PostGIS 手册中的 *PostGIS
    参考部分*，以了解你可以执行的各种类型的空间查询。
- en: Manipulating spatial data
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作空间数据
- en: You are not limited to just using static data in your spatial analysis. You
    can also create new geometries and manipulate existing geometries directly within
    a PostGIS database. While it's easy to create a brand new geometry using functions
    such as the `ST_GeogFromText()` function we used earlier, you can also use the
    PostGIS geometry editing and geometry processing functions to create new geography
    values derived from old ones.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的空间分析中，你不仅限于使用静态数据。你还可以在 PostGIS 数据库中直接创建新几何形状并操作现有几何形状。虽然使用我们之前使用的 `ST_GeogFromText()`
    函数等函数创建全新的几何形状很容易，但你也可以使用 PostGIS 几何编辑和几何处理函数从旧几何形状派生新的地理值。
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are some limitations on the functions available when you use the PostGIS
    `GEOGRAPHY` type. PostGIS originally only supported the `GEOMETRY` data type,
    which was designed to only work with spatial data projected onto a flat Cartesian
    plane. When using the `GEOGRAPHY` field, check the PostGIS manual to see which
    functions are supported.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 PostGIS 的 `GEOGRAPHY` 类型时，有一些函数可用性的限制。PostGIS 最初只支持 `GEOMETRY` 数据类型，该数据类型设计为仅与投影到平坦笛卡尔平面的空间数据一起工作。当使用
    `GEOGRAPHY` 字段时，请查看 PostGIS 手册以了解哪些函数受支持。
- en: To get an idea of how we can calculate new spatial values based on our existing
    data, let's write a program to buffer our outlines, and store them into a new
    `GEOGRAPHY` column in our database table.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们如何根据现有数据计算新的空间值，让我们编写一个程序来缓冲我们的轮廓，并将它们存储到我们数据库表中的新 `GEOGRAPHY` 列中。
- en: 'We saw the `buffer()` operation in the previous chapter, where we saw that
    it can often be used to fix an invalid geometry. If you remember, the `buffer()`
    operation constructs a new geometry that includes all points within a certain
    distance of the existing geometry. The following image shows the outline of the
    United Kingdom, and the same outline after it has been buffered:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中看到了 `buffer()` 操作，我们看到了它通常可以用来修复无效的几何形状。如果你还记得，`buffer()` 操作构建了一个新的几何形状，它包括现有几何形状一定距离内的所有点。以下图像显示了英国的轮廓，以及缓冲后的相同轮廓：
- en: '![Manipulating spatial data](img/4102_03_04.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![操作空间数据](img/4102_03_04.jpg)'
- en: 'Let''s write a program to calculate these buffered outlines. Create a new Python
    script in your `world_borders` directory, and name it `buffer.py`. Enter the following
    into this file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个程序来计算这些缓冲轮廓。在你的 `world_borders` 目录中创建一个新的 Python 脚本，并将其命名为 `buffer.py`。将以下内容输入到这个文件中：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We now want to create a new field to hold the buffered outline. To do this,
    add the following to the end of your file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要创建一个新的字段来存储缓冲的大纲。为此，请将以下内容添加到文件末尾：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `ALTER TABLE` command is a standard Postgres command to change the structure
    of a database table; in this case, we add a new `GEOGRAPHY` column named `buffered_outline`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER TABLE`命令是一个标准的Postgres命令，用于更改数据库表的结构；在这种情况下，我们添加一个名为`buffered_outline`的新`GEOGRAPHY`列。'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we wrapped our `ALTER TABLE` command in a `try...except` statement.
    This is because `psycopg2` will raise `ProgrammingError` if the column already
    exists. By catching this error, we can run our `buffer.py` program multiple times
    without it failing because the `buffered_outline` field has already been added
    to the table.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将我们的`ALTER TABLE`命令包裹在`try...except`语句中。这是因为如果列已经存在，`psycopg2`将引发`ProgrammingError`。通过捕获这个错误，我们可以多次运行我们的`buffer.py`程序而不会失败，因为`buffered_outline`字段已经添加到表中。
- en: Because of transaction issues with exceptions in `psycopg2`, we have to call
    `connection.rollback()` when an exception occurs. This allows the program to continue
    even though an exception has been raised.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`psycopg2`中异常的事务问题，当发生异常时，我们必须调用`connection.rollback()`。这允许程序即使在抛出异常的情况下也能继续运行。
- en: 'Our next task is to calculate the buffered outlines. Using PostGIS, this is
    very easy:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个任务是计算缓冲的大纲。使用PostGIS，这非常简单：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this SQL statement, we are setting the value of the `buffered_outline` field
    to the result of the `ST_Buffer()` command. The `ST_Buffer()` command accepts
    a geography value and a distance in meters; it returns a new geography that contains
    all points that are within the given distance from the existing geography.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个SQL语句中，我们将`buffered_outline`字段的值设置为`ST_Buffer()`命令的结果。`ST_Buffer()`命令接受一个地理值和一个以米为单位的距离；它返回一个包含所有在给定距离内的现有地理点的新的地理值。
- en: 'Our final task is to commit the changes we have made to the database:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的任务是提交我们对数据库所做的更改：
- en: '[PRE34]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This actually completes our `buffer.py` program, and if we run it, we will get
    a buffered version of each outline stored in the `buffered_outline` field. However,
    because this program does not show anything, there's no way of knowing if it actually
    worked. To get around this, let's add a final spatial query to calculate and display
    the area of each outline.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上完成了我们的`buffer.py`程序，如果我们运行它，我们将得到存储在`buffered_outline`字段中的每个大纲的缓冲版本。然而，因为这个程序没有显示任何内容，所以无法知道它是否真的工作。为了解决这个问题，让我们添加一个最终的空问查询来计算并显示每个大纲的面积。
- en: 'The basic structure of our query will look like the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查询的基本结构将如下所示：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The result of the `ST_Area()` function is the area of the geography measured
    in square meters. Because these numbers can be huge, we''ll want to convert them
    into square kilometers for display. However, there is a slight problem: when we
    buffer a geometry, it can sometimes become invalid because the buffered geometry
    lies outside the range of valid latitude and longitude values. Even though we
    only buffered the geographies by a kilometer, any geographies that lie close to
    the north or south pole, or close to the limits of -180 or +180 degrees of longitude,
    will have an invalid buffered outline. When we try to calculate the area of these
    invalid outlines, the result will be a `NaN` (Not a Number) value.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_Area()`函数的结果是以平方米为单位的地理面积。因为这些数字可能非常大，我们希望将它们转换为平方千米进行显示。然而，有一个小问题：当我们缓冲几何形状时，它有时可能变得无效，因为缓冲的几何形状超出了有效的纬度和经度值范围。尽管我们只缓冲了千米，但任何接近北极或南极，或接近经度-180或+180度极限的地理形状都将有一个无效的缓冲轮廓。当我们尝试计算这些无效轮廓的面积时，结果将是一个`NaN`（不是一个数字）值。'
- en: 'Let''s add some code to check for invalid areas and handle them gracefully;
    replace the `...` line in the previous code listing with the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码来检查无效的面积并优雅地处理它们；将之前代码列表中的`...`行替换为以下内容：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You will also need to add an `import math` statement to the top of your program.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在程序顶部添加一个`import math`语句。
- en: 'Running this program will take a minute or so to calculate all the buffers,
    after which the calculated areas will be displayed:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序需要大约一分钟的时间来计算所有缓冲区，之后将显示计算出的面积：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, the buffered area is somewhat larger than the original one,
    which is what you would expect.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，缓冲区域比原始区域略大，这是您所期望的。
- en: Exporting spatial data
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出空间数据
- en: 'Our introduction to spatial databases is almost complete; the only thing left
    to examine is how to get spatial data out of PostGIS again, for example to save
    it back into a shapefile. To extract a spatial value from a `GEOGRAPHY` field,
    use the `ST_AsText()` function. For example:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对空间数据库的介绍几乎完成；唯一剩下要检查的是如何再次从 PostGIS 中获取空间数据，例如将其保存回 shapefile。要从 `GEOGRAPHY`
    字段中提取空间值，请使用 `ST_AsText()` 函数。例如：
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can then use the OGR geometry to write the spatial data into a shapefile,
    or do anything else you wish to do with it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 OGR 几何对象将空间数据写入 shapefile，或者对它进行任何您希望执行的操作。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how spatial databases can be a powerful tool for
    geospatial data analysis. We covered the important concepts behind spatial databases,
    and installed PostgreSQL, PostGIS, and `psycopg2` onto your computer. We then
    got our hands dirty by creating a spatial database, importing data into that database,
    performing spatial queries, manipulating spatial data using PostGIS, and exporting
    data from a spatial database, all using Python code.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了空间数据库如何成为地理空间数据分析的强大工具。我们介绍了空间数据库背后的重要概念，并在您的计算机上安装了 PostgreSQL、PostGIS
    和 `psycopg2`。然后，我们通过创建空间数据库、将数据导入该数据库、执行空间查询、使用 PostGIS 操作空间数据以及使用 Python 代码从空间数据库导出数据，亲自动手实践。
- en: In the next chapter, we will explore how to use the Mapnik library to produce
    great-looking maps based on our geospatial data.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 Mapnik 库根据我们的地理空间数据制作出外观精美的地图。
