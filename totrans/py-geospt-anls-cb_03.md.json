["```py\n    $ sudo apt-get install gdal-bin\n\n    ```", "```py\n    Sudo su createuser  –U postgres –P pluto\n\n    ```", "```py\n    Createuser.exe –U postgres –P pluto\n\n    ```", "```py\n    $ sudo su createdb –O pluto –U postgres py_geoan_cb\n\n    ```", "```py\n    createdb.exe –O pluto –U postgres py_geoan_cb\n\n    ```", "```py\n    psql –U postgres -d py_geoan_cb -c \"CREATE EXTENSION postgis;\"\n\n    ```", "```py\n    psql.exe –U postgres –d py_geoan_cb –c \"CREATE EXTENSION postgis;\"\n\n    ```", "```py\n    $ sudo -u postgres psql -d py_geoan_cb -c \"CREATE SCHEMA geodata AUTHORIZATION pluto;\"\n\n    ```", "```py\n    psql.exe –U postgres –d py_geoan_cb –c \"CREATE SCHEMA geodata AUTHORIZATION pluto;\"\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import subprocess\n\n    # database options\n    db_schema = \"SCHEMA=geodata\"\n    overwrite_option = \"OVERWRITE=YES\"\n    geom_type = \"MULTILINESTRING\"\n    output_format = \"PostgreSQL\"\n\n    # database connection string\n    db_connection = \"\"\"PG:host=localhost port=5432\n      user=pluto dbname=py_test password=stars\"\"\"\n\n    # input shapefile\n    input_shp = \"../geodata/bikeways.shp\"\n\n    # call ogr2ogr from python\n    subprocess.call([\"ogr2ogr\",\"-lco\", db_schema, \"-lco\", overwrite_option,\n      \"-nlt\", geom_type, \"-f\", output_format, db_connection,  input_shp])\n    ```", "```py\n    $ python ch03-01_shp2pg.py\n\n    ```", "```py\n$ ogr2ogr –help\n\n```", "```py\nogr2ogr -lco SCHEMA=geodata -nlt MULTILINE -f \"Postgresql\" PG:\"host=localhost port=5432 user=postgres dbname=py_geoan_cb password=secret\" /home/mdiener/ch03/geodata/bikeways.shp\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import subprocess\n    import os\n    import ogr\n\n    def discover_geom_name(ogr_type):\n        \"\"\"\n\n        :param ogr_type: ogr GetGeomType()\n        :return: string geometry type name\n        \"\"\"\n        return {ogr.wkbUnknown            : \"UNKNOWN\",\n                ogr.wkbPoint              : \"POINT\",\n                ogr.wkbLineString         : \"LINESTRING\",\n                ogr.wkbPolygon            : \"POLYGON\",\n                ogr.wkbMultiPoint         : \"MULTIPOINT\",\n                ogr.wkbMultiLineString    : \"MULTILINESTRING\",\n                ogr.wkbMultiPolygon       : \"MULTIPOLYGON\",\n                ogr.wkbGeometryCollection : \"GEOMETRYCOLLECTION\",\n                ogr.wkbNone               : \"NONE\",\n                ogr.wkbLinearRing         : \"LINEARRING\"}.get(ogr_type)\n\n    def run_shp2pg(input_shp):\n        \"\"\"\n        input_shp is full path to shapefile including file ending\n        usage:  run_shp2pg('/home/geodata/myshape.shp')\n        \"\"\"\n\n        db_schema = \"SCHEMA=geodata\"\n        db_connection = \"\"\"PG:host=localhost port=5432\n                        user=pluto dbname=py_geoan_cb password=stars\"\"\"\n        output_format = \"PostgreSQL\"\n        overwrite_option = \"OVERWRITE=YES\"\n        shp_dataset = shp_driver.Open(input_shp)\n        layer = shp_dataset.GetLayer(0)\n        geometry_type = layer.GetLayerDefn().GetGeomType()\n        geometry_name = discover_geom_name(geometry_type)\n        print (geometry_name)\n\n        subprocess.call([\"ogr2ogr\", \"-lco\", db_schema, \"-lco\", overwrite_option,\n                         \"-nlt\", geometry_name, \"-skipfailures\",\n                         \"-f\", output_format, db_connection, input_shp])\n\n    # directory full of shapefiles\n    shapefile_dir = os.path.realpath('../geodata')\n\n    # define the ogr spatial driver type\n    shp_driver = ogr.GetDriverByName('ESRI Shapefile')\n\n    # empty list to hold names of all shapefils in directory\n    shapefile_list = []\n\n    for shp_file in os.listdir(shapefile_dir):\n        if shp_file.endswith(\".shp\"):\n            # apped join path to file name to outpout \"../geodata/myshape.shp\"\n            full_shapefile_path = os.path.join(shapefile_dir, shp_file)\n            shapefile_list.append(full_shapefile_path)\n\n    # loop over list of Shapefiles running our import function\n    for each_shapefile in shapefile_list:\n        run_shp2pg(each_shapefile)\n        print (\"importing Shapefile: \" + each_shapefile)\n    ```", "```py\n    $ python ch03-02_batch_shp2pg.py\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    #\n    import subprocess\n    import os\n\n    # folder to hold output Shapefiles\n    destination_dir = os.path.realpath('../geodata/temp')\n\n    # list of postGIS tables\n    postgis_tables_list = [\"bikeways\", \"highest_mountains\"]\n\n    # database connection parameters\n    db_connection = \"\"\"PG:host=localhost port=5432 user=pluto\n            dbname=py_geoan_cb password=stars active_schema=geodata\"\"\"\n\n    output_format = \"ESRI Shapefile\"\n\n    # check if destination directory exists\n    if not os.path.isdir(destination_dir):\n        os.mkdir(destination_dir)\n        for table in postgis_tables_list:\n            subprocess.call([\"ogr2ogr\", \"-f\", output_format, destination_dir,\n                             db_connection, table])\n            print(\"running ogr2ogr on table: \" + table)\n    else:\n        print(\"oh no your destination directory \" + destination_dir +\n              \" already exist please remove it then run again\")\n\n    # commandline call without using python will look like this\n    # ogr2ogr -f \"ESRI Shapefile\" mydatadump \\\n    # PG:\"host=myhost user=myloginname dbname=mydbname password=mypassword\" neighborhood parcels\n    ```", "```py\n    $ python ch03-03_batch_postgis2shp.py\n\n    ```", "```py\nogr2ogr -f \"ESRI Shapefile\" /home/ch03/geodata/temp PG:\"host=localhost user=pluto dbname=py_geoan_cb password=stars\" bikeways highest_mountains\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    # convert / import osm xml .osm file into a Shapefile\n    import subprocess\n    import os\n    import shutil\n\n    # specify output format\n    output_format = \"ESRI Shapefile\"\n\n    # complete path to input OSM xml file .osm\n    input_osm = '../geodata/OSM_san_francisco_westbluff.osm'\n\n    # Windows users can uncomment these two lines if needed\n    # ogr2ogr = r\"c:/OSGeo4W/bin/ogr2ogr.exe\"\n    # ogr_info = r\"c:/OSGeo4W/bin/ogrinfo.exe\"\n\n    # view what geometry types are available in our OSM file\n    subprocess.call([ogr_info, input_osm])\n\n    destination_dir = os.path.realpath('../geodata/temp')\n\n    if os.path.isdir(destination_dir):\n        # remove output folder if it exists\n        shutil.rmtree(destination_dir)\n        print(\"removing existing directory : \" + destination_dir)\n        # create new output folder\n        os.mkdir(destination_dir)\n        print(\"creating new directory : \" + destination_dir)\n\n        # list of geometry types to convert to Shapefile\n        geom_types = [\"lines\", \"points\", \"multilinestrings\", \"multipolygons\"]\n\n        # create a new Shapefile for each geometry type\n        for g_type in geom_types:\n\n            subprocess.call([ogr2ogr,\n                   \"-skipfailures\", \"-f\", output_format,\n                     destination_dir, input_osm,\n                     \"layer\", g_type,\n                     \"--config\",\"OSM_USE_CUSTOM_INDEXING\", \"NO\"])\n            print(\"done creating \" + g_type)\n\n    # if you like to export to SPATIALITE from .osm\n    # subprocess.call([ogr2ogr, \"-skipfailures\", \"-f\",\n    #         \"SQLITE\", \"-dsco\", \"SPATIALITE=YES\",\n    #         \"my2.sqlite\", input_osm])\n    ```", "```py\n    $ python ch03-04_osm2shp.py\n\n    ```", "```py\n$ source venvs/pygeoan_cb/bin/activate\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    from osgeo import ogr\n    from osgeo import gdal\n\n    # set pixel size\n    pixel_size = 1\n    no_data_value = -9999\n    ```", "```py\n    # Shapefile input name\n    # input projection must be in Cartesian system in meters\n    # input wgs 84 or EPSG: 4326 will NOT work!!!\n    input_shp = r'../geodata/ply_golfcourse-strasslach3857.shp'\n\n    # TIF Raster file to be created\n    output_raster = r'../geodata/ply_golfcourse-strasslach.tif'\n    ```", "```py\n    # Open the data source get the layer object\n    # assign extent coordinates\n    open_shp = ogr.Open(input_shp)\n    shp_layer = open_shp.GetLayer()\n    x_min, x_max, y_min, y_max = shp_layer.GetExtent()\n    ```", "```py\n    # calculate raster resolution\n    x_res = int((x_max - x_min) / pixel_size)\n    y_res = int((y_max - y_min) / pixel_size)\n    ```", "```py\n    # set the image type for export\n    image_type = 'GTiff'\n    driver = gdal.GetDriverByName(image_type)\n\n    new_raster = driver.Create(output_raster, x_res, y_res, 1, gdal.GDT_Byte)\n    new_raster.SetGeoTransform((x_min, pixel_size, 0, y_max, 0, -pixel_size))\n    ```", "```py\n    # get the raster band we want to export too\n    raster_band = new_raster.GetRasterBand(1)\n\n    # assign the no data value to empty cells\n    raster_band.SetNoDataValue(no_data_value)\n\n    # run vector to raster on new raster with input Shapefile\n    gdal.RasterizeLayer(new_raster, [1], shp_layer, burn_values=[255])\n    ```", "```py\n    $ python ch03-05_shp2raster.py\n\n    ```", "```py\n$ source venvs/pygeoan_cb/bin/activate\n\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    from osgeo import ogr\n    from osgeo import gdal\n\n    #  get raster data source\n    open_image = gdal.Open( \"../geodata/cadaster_borders-2tone-black-white.png\" )\n    input_band = open_image.GetRasterBand(3)\n    ```", "```py\n    #  create output data source\n    output_shp = \"../geodata/cadaster_raster\"\n    shp_driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n\n    # create output file name\n    output_shapefile = shp_driver.CreateDataSource( output_shp + \".shp\" )\n    new_shapefile = output_shapefile.CreateLayer(output_shp, srs = None )\n    ```", "```py\n    gdal.Polygonize(input_band, None, new_shapefile, -1, [], callback=None)\n    new_shapefile.SyncToDisk()\n    ```", "```py\n    $ python ch03-06_raster2shp.py\n\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n\n    import xlrd\n    import shapefile\n    ```", "```py\n    excel_file = xlrd.open_workbook(\"../geodata/highest-mountains-europe.xlsx\")\n\n    # get the first sheet\n    sh = excel_file.sheet_by_index(0)\n    ```", "```py\n    w = shapefile.Writer(shapefile.POINT)\n    ```", "```py\n    w.field('GeoNameId','F')\n    w.field('Name', 'C')\n    w.field('Country', 'C')\n    w.field('Latitude', 'F')\n    w.field('Longitude', 'F')\n    w.field('Altitude', 'F')\n    ```", "```py\n    for row_number in range(sh.nrows):\n        # skips over the first row since it is the header row\n        if row_number == 0:\n            continue\n        else:\n            x_coord = sh.cell_value(rowx=row_number, colx=4)\n            y_coord = sh.cell_value(rowx=row_number, colx=3)\n            w.point(x_coord, y_coord)\n\n            w.record(GeoNameId=sh.cell_value(rowx=row_number, colx=0), Name=sh.cell_value(rowx=row_number, colx=1),\n                     Country=sh.cell_value(rowx=row_number, colx=2), Latitude=sh.cell_value(rowx=row_number, colx=3),\n                     Longitude=sh.cell_value(rowx=row_number, colx=4),Altitude=sh.cell_value(rowx=row_number, colx=5))\n            print \"Adding row: \" + str(row_number) + \" creating mount: \" + sh.cell_value(rowx=row_number, colx=1)\n    ```", "```py\n    w.save('../geodata/highest-mountains')\n    ```", "```py\n    $ python ch03-07_excel2shp.py\n\n    ```", "```py\n# create the PRJ file\nfilename = 'highest-mountains'\nprj = open(\"%s.prj\" % filename, \"w\")\nepsg = 'GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433]]'\nprj.write(epsg)\nprj.close()\n```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    import subprocess\n    from osgeo import gdal\n\n    path_base = \"../geodata/\"\n    ```", "```py\n    # gdal_translate converts raster data between different formats\n\n    command_gdal_translate = \"c:/OSGeo4W/bin/gdal_translate.exe\"\n    command_gdalinfo = \"c:/OSGeo4W/bin/gdalinfo.exe\"\n    ```", "```py\n    command_gdal_translate = \"gdal_translate\"\n    command_gdalinfo = \"gdalinfo\"\n    command_gdaldem = \"gdaldem\"\n    ```", "```py\n    orig_dem_asc = path_base + \"original_dem.asc\"\n\n    temp_tiff = path_base + \"temp_image.tif\"\n\n    output_envi = path_base + \"final_envi.bin\"\n    ```", "```py\n    # transform dem to tiff\n    dem2tiff = command_gdal_translate + \" \" + orig_dem_asc + \" \" + temp_tiff\n    print (\"now executing this command: \" + dem2tiff)\n    subprocess.call(dem2tiff.split(), shell=False)\n    ```", "```py\n    ds = gdal.Open(temp_tiff, gdal.GA_ReadOnly)\n    band = ds.GetRasterBand(1)\n    print 'Band Type=', gdal.GetDataTypeName(band.DataType)\n    min = band.GetMinimum()\n    max = band.GetMaximum()\n    if min is None or max is None:\n        (min, max) = band.ComputeRasterMinMax(1)\n    print 'Min=%.3f, Max=%.3f' % (min, max)\n    min_elevation = str(int(round(min)))\n    max_elevation = str(int(round(max)))\n    ```", "```py\n    tif_2_envi = command_gdal_translate + \" -scale -ot UInt16 -outsize 500 500 -of ENVI \" \\\n                 + temp_tiff + \" \" + output_envi\n    ```", "```py\n    subprocess.call(tif_2_envi.split(),shell=False)\n\n    ```", "```py\n    python ch03-08_dem2heightmap.py\n\n    ```"]