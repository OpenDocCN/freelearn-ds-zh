- en: Chapter 3. Managing Map Documents and Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the current map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing map documents on disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a data frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of layers in a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the list of layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the map extent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding layers to a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting layers into a map document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating layer symbology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating layer properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcPy mapping module is new to ArcGIS 10 and brings some really exciting
    features for mapping automation, including the ability to manage map documents
    and layer files as well as the data within these files. Support is provided for
    automating map export and printing, for the creation of PDF map books and publication
    of map documents to ArcGIS Server map services. This is an incredibly useful module
    for accomplishing many of the day-to-day tasks performed by GIS analysts.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the ArcPy mapping module to manage
    map documents and layer files. You will learn how to add and remove geographic
    layers and tables from map document files, insert layers into data frames, and
    move layers around within the map document. Finally, you will learn how to update
    layer properties and symbology.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the current map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running a geoprocessing script from the ArcGIS Python window or a custom
    script tool, you will often need to get a reference to the map document currently
    loaded in ArcMap. This is typically the first step in your script before you perform
    geoprocessing operations against layers and tables in a map document. In this
    recipe, you will learn how to reference the current map document from your Python
    geoprocessing script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can actually perform any operations on a map document file, you
    need to get a reference to it in your Python script. This is done by calling the
    `MapDocument()` method on the `arcpy.mapping` module. You can reference either
    the currently active document or a document at a specific location on disk. To
    reference the currently active document, you simply supply the keyword `CURRENT`
    as a parameter to the `MapDocument()` function. This gets the currently active
    document in ArcMap. The following code example shows how a reference to the currently
    active document is obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can only use the `CURRENT` keyword when running a script from the ArcGIS
    Python window or a custom script tool. If you attempt to use this keyword when
    running a script from IDLE or any other development environment, it won't have
    access to the map document file currently loaded in ArcGIS. I should also point
    out that the `CURRENT` keyword is not case sensitive. You could just as easily
    use `current`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reference a map document on a local or remote drive, simply supply the path
    to the map document as well as the map document name as a parameter to `MapDocument()`.
    For example, you would reference the `crime.mxd` file in the `c:\data` folder
    with the following reference: `arcpy.mapping.MapDocument("C:/data/crime.mxd")`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to access the currently active map document
    in ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module by typing the following into the Python window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`) and assign the reference
    to a variable by typing the following into the Python Window below the first line
    of code that you added in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the title of the map document and print it out to the shell window. When
    the script executes, the title of the map document will be printed using the Python
    `print` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a new title for map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save a copy of the map document file with the saveACopy() method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ArcMap open the `crime_copy.mxd` file that you just created and select **File**
    | **Map Document Properties** to view the new title you gave to the map document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MapDocument` class has a constructor that creates an instance of this class.
    In object-oriented programming, an **instance** is also known as an **object**
    . The constructor for `MapDocument` can accept either the `CURRENT` keyword or
    a path to a map document file on a local or remote drive. The constructor creates
    an object and assigns it to the variable `mxd`. You can then access the properties
    and methods available on this object using dot notation. In this particular case,
    we've printed out the title of the map document file using the `MapDocument.title`
    property and we also used the `MapDocument.saveACopy()` method to save a copy
    of the map document file.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing map documents on a disk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to reference the currently active map document file
    in ArcMap, you can also access map document files stored on a local or remote
    drive using the `MapDocument()` method. In this recipe, you'll learn how to access
    these map documents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned earlier, you can also reference a map document file that resides
    somewhere on your computer or a shared server. This is done simply by providing
    a path to the file. This is a more versatile way of obtaining a reference to a
    map document because it can be run outside the ArcGIS Python window or a custom
    script tool.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to access a map document stored on a local
    or remote drive:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the IDLE development environment from **Start** | **Programs** | **ArcGIS**
    | **Python 2.7** | **IDLE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new IDLE script window by selecting **New** | **New Window** from the
    IDLE shell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `arcpy.mapping`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the copy of the `crime` map document that you created in the last
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the title of the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only difference between this recipe and the last is that we've provided
    a reference to a map document file on a local or remote drive rather than using
    the `CURRENT` keyword. This is the recommended way of referencing a map document
    file unless you know for sure that your geoprocessing script will be run inside
    ArcGIS, either in the Python window or as a custom script tool.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcMap table of contents is composed of one or more data frames. Each data
    frame can contain layers and tables. Data frames can be used to filter lists that
    are returned from the various list functions such as `ListLayers()`. For example,
    a `DataFrame` object can be used as an input parameter to restrict the layers
    returned by the ListLayers() function to only those layers within a particular
    data frame. You can also use a DataFrame object to get or set the current map
    extent, which can be useful when creating map books. In this recipe you will learn
    how to access data frames from your Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListDataFrames()` function returns a list of `DataFrame` objects. Each
    data frame can hold layers and tables and can be used to restrict the lists returned
    by the `ListLayers()` and `ListTablesViews()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the steps below to learn how to get a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open c`:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListDataFrames()` function and pass a reference to the map document
    along with a wildcard used to find only the data frames that begin with the letter
    `C`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `for` loop and print out the name of each layer in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListDataFrames()` function returns a list of all the data frames in the
    ArcMap table of contents. Like any other Python list, you can iterate through
    the contents of the list using a `for` loop. Inside the `for` loop, each data
    frame is dynamically assigned to the `df` variable and the name of the data frame
    is printed to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of layers in a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frequently, one of the first steps in a geoprocessing script is to obtain a
    list of layers in the map document. Once obtained, your script might then cycle
    through each of the layers and perform some type of processing. The mapping module
    contains a `ListLayers()` function that provides the capability of obtaining this
    list of layers. In this recipe, you will learn how to get a list of layers contained
    within a map document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module contains various list functions to return lists of
    layers, data frames, broken data sources, table views, and layout elements. These
    list functions are normally the first step in a multi-step process, where the
    script needs to get one or more items from a list for further processing. Each
    of these list functions returns a Python list, which as you know from earlier
    in the book, is a highly functional data structure for storing information.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the list functions are used as part of a multi-step process, where
    creating a list is only the first step. Subsequent processing in the script will
    iterate over one or more of the items in this list. For example, you might obtain
    a list of layers in a map document and then iterate through each layer looking
    for a specific layer name, which will then be subject to further geoprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to obtain a list of layers from a map document
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the ListLayers() function and pass a reference to the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `for` loop and print out the name of each layer in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListLayers()` function retrieves a list of layers in a map document, a
    specific data frame, or a layer file. In this case, we passed a reference to the
    current map document to the `ListLayers()` function, which will retrieve a list
    of all layers in the map document. The results will be stored in a variable called
    `layers`, which is a Python list that can be iterated with a `for` loop. This
    Python list contains one or more `Layer` objects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListLayers()` function is only one of many list functions provided by the
    `arcpy mapping` module. Each of these functions returns a Python list containing
    data of some type. Some of the other list functions include `ListTableViews()`,
    which returns a list of `Table` objects, `ListDataFrames()` which returns a list
    of `DataFrame` objects, and `ListBookmarks()` which returns a list of bookmarks
    in a map document. There are additional list functions, many of which we'll cover
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the list of layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to get a list of layers using the `ListLayers()`
    function. There will be times when you will not want a list of all the layers
    in a map document, but rather only a subset of the layers. The `ListLayers()`
    function allows you to restrict the list of layers that is generated. In this
    recipe, you will learn how to restrict the layers returned using a wildcard and
    a specific data frame from the ArcMap table of contents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, if you only pass a reference to the map document or layer file,
    the `ListLayers()` function will return a list of all the layers in these files.
    However, you can restrict the list of layers returned by this function through
    the use of an optional wildcard parameter or by passing in a reference to a specific
    data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're working with a layer file (`.lyr`), you can't restrict layers with
    a data frame. Layer files don't support data frames.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to restrict the list of layers returned by
    `ListLayers()` through the use of a wildcard and data frame.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to restrict a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a list of data frames in the map document and search for a specific data
    frame name of `Crime`. Please note that text strings can be surrounded by either
    single or double quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListLayers()` function and pass a reference to the map document,
    a wildcard to restrict the search, and the data frame found in the last step to
    further restrict the search. The `ListLayers()` function should be indented inside
    the `if` statement you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start a `for` loop and print out the name of each layer in the map document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you learned in a previous recipe, the `ListDataFrames()` function is another
    list function provided by `arcpy mapping`. This function returns a list of all
    the data frames in a map document. We then loop through each of the data frames
    returned by this function, looking for a data frame that has the name `Crime`.
    If we do find a data frame that has this name, we call the `ListLayers()` function,
    passing in the optional wildcard value of `Burg*` as the second parameter, and
    a reference to the `Crime` data frame. The wildcard value passed in as the second
    parameter accepts any number of characters and an optional wildcard character
    (`*`).
  prefs: []
  type: TYPE_NORMAL
- en: In this particular recipe, we're searching for all the layers that begin with
    the characters `Burg` and that have a data frame name of `Crime`. Any layers found
    matching these restrictions are then printed. Keep in mind that all we're doing
    in this case is printing the layer names, but in most cases, you would be performing
    additional geoprocessing through the use of tools or other functions.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the map extent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many occasions when you will need to change the map extent. This
    is frequently the case when you are automating the map production process and
    need to create many maps of different areas or features. There are a number of
    ways that the map extent can be changed with `arcpy`. But, for this recipe, we'll
    concentrate on using a definition expression to change the extent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DataFrame` class has an `extent` property that you can use to set the geographic
    extent. This is often used in conjunction with the `Layer.definitionQuery` property
    that is used to define a definition query for a layer. In this recipe, you will
    learn how to use these objects and properties to change the map extent.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get a list of layers from a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop that will loop through all the data frames in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the data frame called `Crime` and a specific layer that we''ll apply the
    definition query against:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `for` loop that will loop through the layers. There will only be one,
    but we''ll create the loop anyway. In the `for` loop, create a definition query
    and set the new extent of the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and run the script. The extent of the data view should update to visualize
    only the features matching the definition expression, as shown in the following
    screenshot:![How to do it...](img/4445OT_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe used a definition query on a layer to update the map extent. Near
    the end of the script, you created a new variable called `query` that holds the
    definition expression. The definition expression is set up to find school districts
    with a name of `Lackland ISD`. This query string is then applied to the `definitionQuery`
    property. Finally, the `df.extent` property is set to the returned value of `layer.getExtent()`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module also has a `ListTableViews()` function that you can
    use to obtain a list of standalone tables that are contained within a map document.
    In this recipe, you will learn how to use the `ListTableViews()` function to create
    this list of tables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing the ability to generate a list of layers in a map document
    or data frame, the `arcpy mapping` module also provides a `ListTableViews()` function
    that generates a list of tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ListTableViews()` only works with map document files and the data frames contained
    within. Layer files do not have the capability of holding tables.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to get a list of standalone tables in a map
    document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a list of tables in the map document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script to see the following output:.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ListTableViews()` function is very similar to the other list functions
    provided by `arcpy.mapping`. As was the case with `ListLayers()`, the `ListTableViews()`
    function accepts a reference to a map document (but not a layer file), along with
    an optional wildcard and data frame parameters. The output is a list of tables
    that can be iterated with a `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Adding layers to a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many situations where you will need to add a layer to a map document.
    The mapping module provides this functionality through the `AddLayer()` function.
    In this recipe, you will learn how to add a layer to a map document using this
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`arcpy.mapping` provides the ability to add layers or group layers into an
    existing map document file. You can take advantage of the ArcMap "auto-arrange"
    functionality, which automatically places a layer in the data frame for visibility.
    This is essentially the same functionality provided by the **Add Data** button
    in ArcMap, which positions a layer in the data frame based on geometry type and
    layer weight rules.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Layers can't be added to a layer file (`.lyr`).
  prefs: []
  type: TYPE_NORMAL
- en: When adding a layer to a map document, the layer must reference an existing
    layer found in a layer file on disk, the same map document and data frame, the
    same map document with a different data frame, or a completely separate map document.
    A layer can be either a layer in a map document or a layer in a `.lyr` file. To
    add a layer to a map document, you must first create an instance of the `Layer`
    class and then call the `AddLayer()` function, passing in the new layer along
    with the data frame where it should be placed and rules for how it is to be positioned.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to add a layer to a map document:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get a reference to the `Crime` data frame, which is the first data frame in
    the list returned by `ListDataFrames()`. The `[0]` specified at the end of the
    code gets the first data frame returned from the `ListDataFrames()` method, which
    returns a list of data frames. Lists are zero-based, so to retrieve the first
    data frame we provide an index of `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `Layer` object that references a `.lyr` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the layer to the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script. The `School_District.lyr` file will be added to the data frame,
    as shown in the following screenshot:![How to do it…](img/4445_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first two lines, we simply reference the `arcpy.mapping` module and get
    a reference to the currently active map document. Next, we create a new variable
    called `df`, which holds a reference to the `Crime` data frame. This is obtained
    through the `ListDataFrames()` function that returns a list of data frame objects.
    We then use list access to return the first item in the list, which is the `Crime`
    data frame. A new `Layer` instance, called `layer` is then created from a `layer`
    file stored on disk. This `layer` file is called `School_Districts.lyr`. Finally,
    we call the `AddLayer()` function, passing in the data frame where the layer will
    reside along with a reference to the layer, and a parameter indicating that we
    would like to use the **auto-arrange** feature. In addition to allowing ArcMap
    to automatically place the layer into the data frame using auto-arrange, you can
    also specifically place the layer at either the top or bottom of the data frame
    or a group layer using the `BOTTOM` or `TOP` position.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing the capability of adding a layer to a map document,
    `arcpy.mapping` also provides an `AddLayerToGroup()` function, which can be used
    to add a layer to a group layer. The layer can be added to the top or bottom of
    the group layer or you can use auto-arrange for placement. You may also add layers
    to an empty group layer. However, just as with regular layer objects, group layers
    cannot be added to a layer file.
  prefs: []
  type: TYPE_NORMAL
- en: Layers can also be removed from a data frame or group layer. `RemoveLayer()`
    is the function used to remove a layer or group layer. In the event that two layers
    have the same name, only the first is removed unless your script is set up to
    iterate.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting layers into a map document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `AddLayer()` function can be used to add a layer to a map document either
    through auto-arrange or as the first or last layer in a data frame. However, it
    doesn't provide the control you need for inserting a layer in a specific position
    within a data frame. For this added control, you can use the `InsertLayer()` function.
    In this recipe, you will learn how to control the placement of layers added to
    a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `AddLayer()` function simply adds a layer into a data frame or a group layer,
    and places the layer automatically using auto-arrange or specific placement at
    the top or bottom of the data frame or group layer. The `InsertLayer()` method
    allows for more precise positioning of a new layer into a data frame or a group
    layer. It uses a reference layer to specify a location and the layer is added
    either before or after the reference layer, as specified in your code. Since `InsertLayer()`
    requires the use of a reference layer, you can't use this method on an empty data
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: This is illustrated in the following screenshot, where `District_Crime_Join`
    is the reference layer `and School_Districts` is the layer to be added. The `School_Districts`
    layer can be placed either before or after the reference layer using `InsertLayer()`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/4445_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use `InsertLayer()` to insert a layer into
    a data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the reference layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer to be inserted relative to the reference layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the layer into the data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script. The `Crimes2009` feature class will be added as a layer to the
    data frame as seen in the following screenshot:![How to do it…](img/4445_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After obtaining references to the `arcpy.mapping` module, current map document
    file, and the `Crime` data frame, our script then defines a reference layer. In
    this case, we use the `ListLayers()` function with a wildcard of `Burglaries*`,
    and the `Crime` data frame to restrict the list of layers returned to only one
    item. This item will be the **Burglaries in 2009** layer. We use Python list access
    with a value of `0` to retrieve this layer from the list and assign it to a `Layer`
    object. Next, we define the insert layer, which is a new `Layer` object that references
    the **Crimes2009** feature class from the `CityOfSanAntonio` geodatabase database.
    Finally, we call the `InsertLayer()` function passing in the data frame, reference
    layer, layer to be inserted, and keyword indicating that the layer to be inserted
    should be placed before the reference layer. This is illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/4445_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also reposition a layer that is already in a data frame or a group layer.
    The `MoveLayer()` function provides the ability to reposition the layer within
    a data frame or a group layer. Movement of a layer must be within the same data
    frame. You can't move a layer from one data frame to another. Just as with `InsertLayer()`,
    `MoveLayer()` uses a reference layer to reposition the layer.
  prefs: []
  type: TYPE_NORMAL
- en: Updating layer symbology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you will want to change the symbology of a layer in
    a map document. This can be accomplished through the use of the `UpdateLayer()`
    function, which can be used to change the symbology of a layer as well as various
    properties of a layer. In this recipe, you will use the `UpdateLayer()` function
    to update the symbology of a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.mapping` module also gives you the capability of updating layer symbology
    from your scripts by using the `UpdateLayer()` function. For example, you might
    want your script to update a layer's symbology from a graduated color to a graduated
    symbol, as illustrated in the following screenshot. `UpdateLayer()` can also be
    used to update various layer properties, but the default functionality is to update
    the symbology. Because `UpdateLayer()` is a robust function capable of altering
    both symbology and properties, you do need to understand the various parameters
    that can be supplied as an input.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/4445_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update the symbology of a layer using `UpdateLayer()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button from the main ArcMap toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`), and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be used to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `UpdateLayer()` function to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script. The **Crime Density by School District** layer will now be symbolized
    with graduated symbols instead of graduated colors, as shown in the following
    screenshot:![How to do it…](img/4445_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the `UpdateLayer()` function to update the symbology
    of a layer. We didn't update any properties, but we'll do so in the next recipe.
    The `UpdateLayer()` function requires that you pass several parameters including
    a data frame, layer to be updated, and a reference layer from which the symbology
    will be pulled and applied to update the layer. In our code, the `updateLayer`
    variable holds a reference to the **Crime Density by School District** layer,
    which will have its symbology updated. The source layer from which the symbology
    will be pulled and applied to the update layer is a layer file (`CrimeDensityGradSym.lyr`)
    containing graduated symbols.
  prefs: []
  type: TYPE_NORMAL
- en: To update the symbology for a layer, you must first ensure that the update layer
    and the source layer have the same geometry (point, line, and polygon). You also
    need to check that the attribute definitions are the same, in some cases, depending
    upon the renderer. For example, graduated color symbology and graduated symbols
    are based on a particular attribute. In this case, both the layers have polygon
    geometry and have a `CrimeDens` field containing crime density information.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have references to both layers, we call the `UpdateLayer()` function,
    passing in the data frame and layers along with a fourth parameter that indicates
    that we're updating symbology only. We've supplied a `True` value as this fourth
    parameter, indicating that we only want to update the symbology and not properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UpdateLayer()` also provides the ability to remove one layer and add another
    layer in its place. The layers can be completely unrelated, so there is no need
    to ensure the same geometry type and attribute field as you would when redefining
    the symbology of a layer. This switching of layers essentially executes a call
    to `RemoveLayer()` and then a call to `AddLayer()` as one operation. To take advantage
    of this functionality you must set the `symbology_only` parameter to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating layer properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to update the symbology of a layer.
    As I mentioned, `UpdateLayer()` can also be used to update various properties
    of a layer, such as field aliases, query definitions, and others. In this recipe,
    you will use `UpdateLayer()` to alter various properties of a layer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use the `UpdateLayer()` function to update a limited number of
    layer properties. Specific layer properties, such as field aliases, selection
    symbology, query definitions, label fields, and others, can be updated using `UpdateLayer()`.
    A common scenario is to have a layer in many map documents that needs to have
    a specific property changed across all the instances of the layer in all map documents.
    To accomplish this, you will have to use ArcMap to modify the layer with the appropriate
    properties and save it to a layer file. This layer file then becomes the source
    layer, which will be used to update the properties of another layer called `update_layer`.
    In this recipe, you'll use ArcMap to alter the properties of a layer, save to
    a layer file (`.lyr`), and then use Python to write a script that uses `UpdateLayer()`
    to apply the properties to another layer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to update layer properties with `UpdateLayer()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open c`:\ArcpyBook\Ch3\Crime_Ch3.mxd` with ArcMap. For this recipe, you will
    be working with the **Burglaries in 2009** feature class, as shown in the following
    screenshot:![How to do it…](img/4445_03_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Burglaries in 2009** feature class in the **Crime** data
    frame to display the **Layer Properties** window, as shown in the following screenshot.
    Each of the tabs represents properties that can be set for the layer:![How to
    do it…](img/4445_03_5_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **General** tab and change the value in the **Layer Name** textbox
    to the name shown in the following screenshot:![How to do it…](img/4445_03_8_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Definition Query** tab and define the query shown in the following
    screenshot. You can use the **Query Builder** to define the query or simply type
    in the query:![How to do it…](img/4445_03_6_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the alias of the `OFFDESC` field to `Offense Description` as shown in
    the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fields** tab in **Layer Properties** and make visible only those
    fields that are selected with a checkmark in the following screenshot. This is
    done by unchecking the fields you see in the following screenshot.![How to do
    it…](img/4445_03_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to dismiss the **Layer Properties** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the data frame, right-click on **Burglaries – No Forced Entry** and select
    **Save as Layer File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file as `c:\ArcpyBook\data\BurglariesNoForcedEntry.lyr`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Burglaries – No Forced Entry** layer and select **Remove**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **Add Data** button in ArcMap, add the **Crimes2009** feature class
    from the `CityOfSanAntonio` geodatabase. The `feature` class will be added to
    the data frame, as shown in the following screenshot:![How to do it…](img/4445_03_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference the currently active document (`Crime_Ch3.mxd`) and assign the reference
    to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the `Crime` data frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the layer that will be used to update the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `UpdateLayer()` function to update the symbology:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Crimes2009** layer will be updated with the properties associated with
    the `BurglariesNoForcedEntry.lyr` file. This is illustrated in the following screenshot.
    Turn on the layer to view the definition query that has been applied. You can
    also open the **Layer Properties** dialog to view the property changes that have
    been applied to the **Crimes2009** feature class:![How to do it…](img/4445_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
