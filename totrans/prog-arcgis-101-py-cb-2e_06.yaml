- en: Chapter 6. Executing Geoprocessing Tools from Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding geoprocessing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a toolbox alias
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing geoprocessing tools from a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the output of a tool as an input to another tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ArcGIS Desktop contains over 800 geoprocessing tools, which can be used in your
    Python scripts. In this chapter, you will learn to use these tools in your scripts.
    Each tool has unique characteristics. The syntax for executing each will differ
    depending upon the type of input required to successfully execute the tool. We'll
    examine how you can determine the input parameters for any tool using the ArcGIS
    Desktop help system. The execution of a tool results in the creation of one or
    more output datasets along with a set of messages that are generated while the
    tool is running. We'll examine how you can use these messages. Finally, we'll
    look at how you can get and set environment variables for your script.
  prefs: []
  type: TYPE_NORMAL
- en: Finding geoprocessing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before using a tool in your geoprocessing script, you will need to make sure
    that you have access to that tool, based on the current license level of ArcGIS
    Desktop that you are running or that your end users will run. This information
    is contained within the ArcGIS Desktop help system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The availability of geoprocessing tools for your script is dependent upon the
    ArcGIS license level you are using. At version 10.1 of ArcGIS Desktop, there are
    three license levels, namely **Basic**, **Standard**, and **Advanced**. These
    were formerly known as **ArcView**, **ArcEditor**, and **ArcInfo**, respectively.
    It is important for you to understand the license level required for the tool
    that you want to use in your script. In addition to this, the use of extensions
    in ArcGIS Desktop can result in the availability of additional tools for your
    script. There are two primary ways to find tools in ArcGIS Desktop. The first
    is to use the search window and the second is to simply browse the contents of
    ArcToolbox. In this recipe, you will learn to use the search window to find available
    geoprocessing tools that can be used in your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch6\Crime_Ch6.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Geoprocessing** menu item select **Search For Tools**. This will
    display the **Search** window, as shown in the following screenshot. By default,
    you will be searching for **Tools**:![How to do it…](img/4445_06_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the term `Clip` into the search text box. As you begin typing this word,
    the **Search** textbox will automatically filter the results based upon the first
    few letters you type. You''ll notice that for the word `Clip`, there are three
    possible tools: `clip(analysis)`, `clip(coverage)`, `clip(data_management)`. There
    are a number of cases where there are several geoprocessing tools with the same
    name. To uniquely define a tool, the toolbox alias is attached to the tool name.
    We''ll examine toolbox aliases in greater detail in the next recipe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For now, click on the **Search** button to generate a list of matching tools.
    The search should generate a list similar to what you see in the following screenshot.
    Tools are indicated with a hammer icon in the search results. You'll also see
    a couple of other icons in the search results. The scroll icon indicates a Python
    script, and an icon containing multi-colored squares indicates a model:![How to
    do it…](img/4445_06_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Clip (Analysis)** tool. This will open the dialog box for the **Clip
    (Analysis)** tool. This isn't all that useful to you as a script programmer. You
    will probably be more interested in the ArcGIS Desktop help for a particular tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Tool Help** button at the bottom of the tool dialog box to display
    detailed information about this particular tool:![How to do it…](img/4445_06_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the bottom of the help page for the **Clip** tool to examine
    the syntax for this particular tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The help system contains a summary, illustration, usage, syntax, code samples,
    available environment variables, related topics, and licensing information for
    each tool. As a geoprocessing script programmer, you will primarily be interested
    in the syntax, code samples, and licensing information sections near the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should always examine the licensing information section at the bottom of
    the help documentation for each tool, to make sure you have the appropriate license
    level to use the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax section contains information about how this tool should be called
    from your Python script, including the name of the tool and the required and optional
    input parameters. All the parameters will be enclosed within parentheses. The
    required parameters for the `Clip` tool are `in_features`, `clip_features`, and
    `out_feature_class`. When you call this tool from your script, you will be required
    to provide these parameters to the tool for it to execute correctly. The fourth
    parameter is an optional parameter called `cluster_tolerance`. Parameters marked
    as optional in the syntax are surrounded by curly braces. The following screenshot
    provides an example of an optional parameter surrounded by curly braces. This
    doesn''t mean that you enclose the parameter in curly braces when you call the
    tool. It is in the help section simply to indicate that this parameter is optional
    when being called from your geoprocessing script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/4445_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving a toolbox alias
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All toolboxes have an alias which, when combined with the tool name, provides
    a unique reference to any tool in ArcGIS Desktop. This alias is necessary because
    a number of tools have the same name. When referencing a tool from your Python
    script, it is necessary to reference both the tool name and tool alias.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last recipe we looked at the **Clip** tool. There are actually three
    Clip tools which can be found in the **Analysis, Coverage**, and **Data Management**
    toolboxes. Each **Clip** tool performs a different function. For instance, the
    **Clip** tool in the **Analysis** toolbox clips a vector feature class using an
    input feature, while the **Clip** tool in the **Data Management** toolbox is used
    to create a spatial subset of a raster. Since it is possible to have multiple
    tools with the same name, we can uniquely identify a particular tool by providing
    both the toolname and the toolbox alias where the tool resides. In this recipe
    you will learn how to find the alias of a toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch6\Crime_Ch6.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, open **ArcToolbox**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Analysis Tools** toolbox, as shown in the following screenshot:![How
    to do it…](img/4445_06_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Analysis Tools** toolbox and select **Properties**. This
    will display the **Analysis Tools Properties** dialog, as shown in the following
    screenshot. The **Alias** textbox will contain the alias:![How to do it…](img/4445_06_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can follow this process to find the alias name of any toolbox. In a Python
    script, you can execute a tool by referring to the tool with the syntax `<toolname>_<toolbox
    alias>`. For example, if you were calling the **Buffer** tool, it would be `buffer_analysis`.
    Toolbox aliases are invariably simple. They are typically one word and do not
    include dashes or special characters. In the next recipe, we'll create a simple
    script that follows this format for executing a tool.
  prefs: []
  type: TYPE_NORMAL
- en: Executing geoprocessing tools from a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have determined the toolbox alias and then verified the accessibility
    of the tool based on your current license level, you are ready to add the execution
    of the tool to a script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you understand how to find the tools that are available and how to
    uniquely reference them, the next step is to put this together and execute a tool
    from a geoprocessing script. In this recipe, you can then execute the tool from
    your script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `C:\ArcpyBook\Ch6\Crime_Ch6.mxd` in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Data** button and add the `EdgewoodSD.shp` file to the table
    of contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off the **Crime Density by School District** and **Burglaries in 2009**
    layers to get a better view of the **EdgewoodSD** layer. There is only one polygon
    feature in this file. It represents the Edgewood School District. Now we're going
    to write a script that clips the **Burglaries in 2009** features to this school
    district.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window in ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable that references the input feature class to be clipped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable that references the layer to be used for the clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable that references the output feature class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `Clip` tool from the **Analysis Tools** toolbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the script. The output feature class containing only those burglary points
    within the Edgewood school district should be added to the data frame, as shown
    in the following screenshot:![How to do it…](img/4445_06_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary line of code of interest in this recipe is the final line that executes
    the `Clip` tool. Notice that we called this tool by specifying a syntax of `Clip_analysis`,
    which gives us a reference to the `Clip` tool in the **Analysis Tools** toolbox,
    which has an alias of `analysis`. We've also passed in three parameters that reference
    the input feature class, clip feature class, and output feature class. I should
    point out that we hardcoded the paths to each of the datasets. This is not a good
    programming practice, but in this particular instance I just wanted to illustrate
    how you execute a tool. A future chapter will illustrate how you can remove the
    hardcoding in your scripts and make them much more versatile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most tools that you use will require paths to data sources. This path must
    be the same as the path reported on the ArcCatalog **Location** toolbar, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/4445_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tools use ArcCatalog to find geographic data using an ArcCatalog path. This
    path is a string and is unique to each dataset. The path can include folder locations,
    database connections, or a URL. So, it is important to check the path using ArcCatalog
    before attempting to write Python scripts against the data. ArcSDE paths require
    special consideration. Many ArcSDE users do not have standardized connection names,
    which can cause issues when running models or scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Geoprocessing tools are organized in two ways. You can access tools as functions
    on `arcpy` or as modules matching the toolbox alias name. In the first case, when
    tools are accessible as functions from `arcpy`, they are called in the format
    that you followed in this recipe. The tool name is followed by an underscore and
    then the toolbox alias. In the second form, tools are called as functions of a
    module, which takes the name of the toolbox alias. Here, `analysis` is the toolbox
    alias, so it becomes a module. `Clip` is a function of that module and is called
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Which method you use is really a matter of preference. They both accomplish
    the same thing, which is the execution of a geoprocessing tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using the output of a tool as an input to another tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be many occasions when you will need to use the output of one tool
    as an input to another tool. This is called tool chaining. An example of tool
    chaining could involve buffering a streams layer and then finding all residential
    properties that fall within the buffer. In this case, the Buffer tool would output
    a new layer, which would then be used as an input to the Select by Location tool
    or one of the other overlay tools. In this recipe, you will learn how to obtain
    the output of a tool and use it as input to another tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Buffer tool creates an output feature class from an input feature layer
    using a specified distance. This output feature class can be stored in a variable,
    which can then be used as an input to another tool, such as the `Select Layer
    by Location` tool. In this recipe, you will learn how to use the output from the
    `Buffer` tool as an input to the `Select Layer by Location` tool to find all schools
    that are within a half mile of a stream.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to access the currently active map document
    in ArcMap:'
  prefs: []
  type: TYPE_NORMAL
- en: Open ArcMap with a new map document file (`.mxd`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Data** button and add the Streams and Schools shapefiles
    from `c:\ArcpyBook\data\TravisCounty`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `try` statement and add variables for the streams, buffered streams
    layer, distance, and schools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Buffer` tool and pass in variables for the streams layer, the buffered
    stream layer, and the distance along with several variables that control the look
    of the buffer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a temporary layer for the schools using the `Make Feature Layer` tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select all schools within a half mile of a stream using the `Select Layer by
    Location` tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `except` block to catch any errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Buffer` tool creates an output feature class, which we called `StreamsBuffer.shp`
    and stored in a variable called `streamsBuffer`. This `streamsBuffer` variable
    is then used as an input to the `Select Layer by Location` tool as the third parameter
    being passed in to the function. Using the output of one tool simply requires
    that you create a variable to hold the output data and then it can be re-used
    as needed in other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Setting environment variables and examining tool messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Environment variables provide additional parameters that can be set, which serve
    as global variables accessible at various levels including your scripts. Your
    scripts can get environment variable values as well as set values. You need to
    have an understanding of the environment variables that are available to your
    script as well as how they can be accessed. In addition to this, tools generate
    messages during execution. These messages come in several varieties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Environment settings are additional parameters available to your script during
    execution. These are the values that you set once at the ArcGIS Desktop application
    level using a separate dialog box accessed through the **Geoprocessing - Environments**
    menu item, and are organized by category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/4445OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These settings are very similar to environment variable settings that you can
    set at an operating-system level, but they are specific to the ArcGIS geoprocessing
    framework. These application-level environment settings are the highest level,
    and default settings for all the tools are applied during the execution of any
    tool. In addition to application-level environment settings, you can also apply
    environment settings at the tool level. Environment settings at the tool level
    directly inherit the settings applied at the application level. However, these
    settings can be overridden at the tool level. Tool-level settings are applicable
    only to the current tool execution. Your Python scripts can get and set environment
    settings through the `env` class in `arcpy`. These are read/write properties.
    Both application- and tool-level settings are passed into the script and will
    apply to any tool that you run from within the script. You may also override any
    environment settings from within your script and these will be applied during
    the execution of the script. Please keep in mind that just as with tools, environment
    settings set at the script level only apply to the current execution of a script.
    There are, however, two occasions when environment settings are not passed to
    the script. These include scripts running outside an ArcGIS application, such
    as when they are run from the operating system command prompt. In addition, when
    a script calls another script, environment settings are not passed through. In
    this recipe, you will learn to set environment settings from your Python script
    and view various messages generated by the tool during execution.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to set environment settings and generate messages
    in your script:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new IDLE script and save it as `c:\ArcpyBook\Ch6\SetEnvVariables.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace using an environment variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `Buffer` tool, passing in the input dataset of `Streams.shp`, an output
    dataset of `Streams_Buff.shp`, and a distance of 200 feet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environment variables can be set at both the application level and the tool
    level. Application-level environment settings are similar to global environment
    settings; in that they affect all tools. On the other hand, environment settings
    defined at the tool level affect only the current run of a tool. Both can be set
    using ArcGIS Desktop. Your scripts can also set environment variables, which are
    applicable only during the execution of the script. They are similar to environment
    variables set at the tool level. Probably, the most commonly set environment variable
    used in scripts is the `env.workspace` variable, which defines the current working
    directory for the script. Setting this variable at the top of your script can
    make your code less wordy, since you won’t have to constantly refer to the full
    path to a dataset, but rather simply the dataset name as defined in the current
    workspace.
  prefs: []
  type: TYPE_NORMAL
