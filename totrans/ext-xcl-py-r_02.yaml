- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Excel Spreadsheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This may sound contradictory to modern-day data science practices, but Excel
    has its place in the world of analysis and data storytelling. Exporting data from
    R and Python to Excel can be beneficial for several reasons, offering users the
    opportunity to leverage the strengths of both platforms. Excel is a widely used
    spreadsheet program known for its user-friendly interface, while R and Python
    is a powerful statistical programming language. By exporting data from R and Python
    to Excel, users can take advantage of Excel’s familiar and versatile features
    to further analyze, visualize, and share data.
  prefs: []
  type: TYPE_NORMAL
- en: One significant advantage of exporting data from R and Python to Excel is the
    ability to harness Excel’s extensive range of data manipulation and visualization
    capabilities. Excel provides a variety of tools, such as pivot tables, charts,
    and conditional formatting, which enable users to explore and present data more
    interactively and intuitively. These features allow for quick data exploration,
    identification of trends, and the creation of professional-looking reports or
    presentations.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, exporting data to Excel can facilitate collaboration with colleagues
    or stakeholders who may not be familiar with R and Python or statistical programming.
    Excel is a widely recognized and accessible tool that’s often used for data analysis
    and reporting across various industries. By exporting data to Excel, users can
    share the data with others who may prefer working with spreadsheets, allowing
    for easier collaboration and knowledge exchange.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason to export data from R and Python to Excel is to take advantage
    of Excel’s extensive ecosystem of add-ins and extensions. Excel offers numerous
    specialized tools and add-ins that can enhance data analysis, such as Power Query,
    Power Pivot, and Solver. These tools provide additional functionalities for data
    cleaning, advanced calculations, and optimization, which may not be readily available
    or as user-friendly in R and Python. Exporting data to Excel allows users to leverage
    these tools and benefit from the broader Excel ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, exporting data from R and Python to Excel allows you to utilize
    Excel’s user-friendly interface, powerful data manipulation and visualization
    capabilities, and compatibility with a wide range of users. By combining the strengths
    of both R and Excel, individuals can enhance their data analysis workflows, improve
    collaboration, and effectively communicate insights derived from statistical analyses.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Packages to write into Excel sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and manipulating Excel sheets using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping it simple – exporting data to Excel with `pandas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced mode – `openpyxl` for Excel manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between `openpyxl` and `pandas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the built-in `Iris` dataset in this chapter. This is a good
    dataset for demonstration purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter’s code can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2).'
  prefs: []
  type: TYPE_NORMAL
- en: Packages to write into Excel files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to go over a few different libraries that we can
    use to write `data.frames`/`tibbles` to Excel files. We are going to use the `writexl`,
    `openxlsx`, and `xlsx` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we are going to list each package, specify where you
    can find the function documentation that writes the data to Excel, and go over
    the functions’ parameters.
  prefs: []
  type: TYPE_NORMAL
- en: writexl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `writexl` package is part of the rOpenSci consortium and can be found here:
    [https://docs.ropensci.org/writexl/reference/write_xlsx.html](https://docs.ropensci.org/writexl/reference/write_xlsx.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The library does not require Java or Excel to work.
  prefs: []
  type: TYPE_NORMAL
- en: The function that writes the data to Excel is `write_xlsx()`. Let’s go over
    the different parameters of the function and look at a full pseudo function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s look at the function call itself – that is, `write_xlsx()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s look at each of the parameters in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: This is the DataFrame or named list of DataFrames that will be sheets
    in the `.``xlsx` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`: A filename to write to. Here, you could type something such as `tempfile(fileext
    = .xlsx")col_names` to write column names at the top of the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format_headers`: Make `col_names` in the `.xlsx` file centered and bold.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_zip64`: Use `.xlsx` files. Not all platforms can read this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see what a simple example of this function would look like in typical
    practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: openxlsx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `openxlsx` package can be found at [https://ycphs.github.io/openxlsx/;](https://ycphs.github.io/openxlsx/;)
    the function that we are going to use to write to an Excel file is `write.xlsx()`.
    Again, we’ll go over the full function call and the parameters that get passed
    to this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s go over all of the parameters of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: A DataFrame or a (named) list of objects that can be handled by `writeData()`
    or `writeDataTable()` to write to the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file`: A file path to save the `.``xlsx` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`asTable`: If `TRUE`, then it will use `writeDataTable()` rather than `writeData()`
    to write `x` to the file (the default value is `FALSE`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overwrite`: Overwrite existing file (this defaults to `TRUE`, as with `write.table`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`...`: Additional arguments passed to `buildWorkbook();`. To see additional
    details, you can type `?openxlsx::buildWorkbook` into the R console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at a short example of some code where we will write the Iris
    dataset to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll look at the last package, `xlsx`.
  prefs: []
  type: TYPE_NORMAL
- en: xlsx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `xlsx` package can be found at [https://github.com/colearendt/xlsx;](https://github.com/colearendt/xlsx;)
    the function that we are using to explore writing to an Excel file is `write.xlsx()`.
    Given that this function has the same name as the function from the `openxlsx`
    library, it is important to be aware of namespace collision. This takes place
    when there is a function from two or more separate packages that have the same
    name. Avoiding any possible namespace collision for users is easy but can be cumbersome.
    To do so, you can write `xlsx::write.xlsx()`. Again, let’s go over the full function
    call and the parameters that get passed to this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s go over the parameters of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: A DataFrame to write to the workbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file`: The path to the output file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sheetName`: A character string that contains the sheet’s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col.names`: A logical value indicating whether the column names of `x` are
    to be written along with `x` to the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row.names`: A logical value indicating whether the row names of `x` are to
    be written along with `x` to the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`append`: A logical value indicating whether `x` should be appended to an existing
    file. If `TRUE`, the file is read from disk. Otherwise, the file is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showNA`: A logical value. If set to `FALSE`, `NA` values will be left as empty
    cells.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: A string containing the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A simple function call would take the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have gone over the three different functions, it is important to
    see how each one writes – that is, how long they take to write to disk and how
    large the output file is. To do this, we are going to use the `rbenchmark` library
    for speed testing. We will also bring in the `dplyr` library to arrange the results
    by their relative order of speed. After this, we will see which file has the smallest
    size output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – File write benchmark](img/B19142_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – File write benchmark
  prefs: []
  type: TYPE_NORMAL
- en: 'This R code is used to compare the performance of three different packages
    for writing DataFrames to Excel files: `writexl`, `openxlsx`, and `xlsx`. Here’s
    a breakdown of what the code does:'
  prefs: []
  type: TYPE_NORMAL
- en: The code starts by loading several libraries (`rbenchmark`, `xlsx`, `writexl`,
    `openxlsx`, and `dplyr`) using the `library()` function. These libraries provide
    functions that will be used later in the code. If you do not have them installed,
    you will need to use something such as `install.packaegs("package")` to do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `n` variable is assigned a value of `5`. This variable represents the number
    of times the code will be executed for each package to measure performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `benchmark()` function is called to compare the performance of the three
    Excel-writing packages. It takes several arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first argument, `writexl`, is a name that’s assigned to the first test.
    Inside the curly braces, the `write_xlsx()` function from the `writexl` package
    is called to write the `iris` dataset to a temporary Excel file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument, `openxlsx`, is a name that’s assigned to the second test.
    Inside the curly braces, the `write.xlsx()` function from the `openxlsx` package
    is called to write the `iris` dataset to a temporary Excel file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument, `xlsx`, is a name that’s assigned to the third test. Inside
    the curly braces, the `write.xlsx()` function from the `xlsx` package is called
    to write the `iris` dataset to a temporary Excel file with an `.``xlsx` extension.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `replications` argument is set to `n`, indicating the number of times each
    test should be repeated.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `columns` argument specifies the columns to include in the output. It includes
    the names of the test, any replications, the elapsed time, relative performance,
    user time, and system time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The resulting benchmark results are then piped (`|>`) to the `arrange()` function
    from the `dplyr` package. The `arrange()` function is used to sort the results
    based on the relative performance column, arranging them in ascending order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the preceding benchmarking process, the results are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In summary, the preceding code loads the necessary libraries, performs benchmarks
    on three different Excel-writing packages (`writexl`, `openxlsx`, and `xlsx`),
    and sorts the results based on relative performance. The purpose is to compare
    the efficiency of these packages when writing the `iris` dataset to an Excel file.
    It is important to note that there are many factors at play here, such as the
    system and operating system, among others. Now, let’s see how the sizes measure
    up:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2 – File size comparison](img/B19142_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – File size comparison
  prefs: []
  type: TYPE_NORMAL
- en: 'This R code performs the following tasks using different packages to write
    the `iris` dataset to Excel files and then retrieves the sizes of those files,
    listed in bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `write_xlsx()` function from the `writexl` package is called with two arguments:
    the `iris` dataset and a temporary file path generated using the `tempfile()`
    function. The `write_xlsx()` function writes the `iris` dataset to the temporary
    Excel file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `file.info()` function is called with the temporary file path, `(tmp1)`,
    as an argument. It retrieves information about the file, including its size. The
    `$size` attribute is used to extract the size of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `write.xlsx()` function from the `openxlsx` package is called with two
    arguments: the `iris` dataset and another temporary file path generated using
    the `tempfile()` function. The `write.xlsx()` function writes the `iris` dataset
    to the temporary Excel file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to *the second point*, the `file.info()` function is called with the
    temporary file path, `(tmp2)`, as an argument to retrieve the size of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `write.xlsx()` function from the `xlsx` package is called with two arguments:
    the `iris` dataset and a temporary file path generated using the combination of
    `tempfile()` and `paste0()` functions. The `write.xlsx()` function writes the
    `iris` dataset to the temporary Excel file with an `.xlsx` extension. For the
    `xlsx` package, we use `paste0()` and specify the file extension since this isn’t
    done by default in the function, so the user must be careful and specify this
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, the `file.info()` function is called with the temporary file path, `(tmp3)`,
    as an argument to retrieve the size of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, this code uses different packages (`writexl`, `openxlsx`, and `xlsx`)
    to write the `iris` dataset into three separate Excel files. Then, it retrieves
    the sizes of those files using the `file.info()` function. Its purpose is to compare
    the sizes of the resulting Excel files when using these different packages. Again,
    many factors that are outside the scope of this book could be affecting file sizes,
    but you must be aware the different systems and configurations could have an impact
    on this.
  prefs: []
  type: TYPE_NORMAL
- en: A comprehensive recap and insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we learned how to write `data.frame` to Excel using
    three different packages. We learned that with these three different packages
    come differences in the speed of writing in a file and differences in the size
    of the output file itself. It is important to run these benchmarks as we might
    be trying to achieve speed, a small file size, or some combination thereof.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to speed, there are a few reasons why it is good to run benchmarks
    in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accuracy**: Benchmarks can be used to accurately measure the speed of different
    functions. This is important because it can help you choose the fastest function
    for your task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency**: Benchmarks can be used to consistently measure the speed of
    different functions over time. This is important because it can help you identify
    any changes in performance that may have occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reliability**: Benchmarks can be used to reliably measure the speed of different
    functions across different platforms. This is important because it can help you
    ensure that the results of your benchmarks are accurate and reproducible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these advantages, benchmarks can also be used to identify bottlenecks
    in your code. This can help you improve the performance of your code as you can
    optimize the areas that are taking the most time to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the most popular R packages for benchmarking:'
  prefs: []
  type: TYPE_NORMAL
- en: '`microbenchmark`: This package provides a simple and convenient way to benchmark
    R code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rbenchmark`: This package provides a more comprehensive set of benchmarking
    features than `microbenchmark`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rbenchmark2`: This package is a fork of `rbenchmark` that provides additional
    features, such as the ability to benchmark multiple cores'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When choosing a benchmarking package, it is important to consider your needs
    and the available features. For example, if you need to benchmark a large amount
    of code, you may want to choose a package that supports *parallel benchmarking*.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have chosen a benchmarking package, you can use it to compare the speed
    of different functions. To do this, you will need to create a benchmark object
    that contains the functions that you want to compare. You can then use the `benchmark`
    object to run the functions and measure their execution time.
  prefs: []
  type: TYPE_NORMAL
- en: The results of the benchmark can be used to identify the fastest function for
    your task. You can then use this information to improve the performance of your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned not only how to write data to an Excel file, but
    also how to do so with different R libraries. This is important as it helps you
    explore different methods of achieving the same goal. This exercise also illustrated
    the differences in implementations, which we saw by checking the output file size
    and by benchmarking the time it took to write our data to Excel with each package.
    Next, we will conduct similar exercises using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and manipulating Excel sheets using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore how to create and manipulate Excel sheets using
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data to Excel is a common requirement in various data analysis and
    reporting scenarios. Excel provides a familiar and widely used interface for data
    visualization, sharing, and further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover various tasks in the sections ahead, including creating new workbooks,
    adding sheets to existing workbooks, deleting sheets, and manipulating data within
    an Excel workbook. Python provides several libraries that make these tasks straightforward
    and efficient. But first, let’s understand why we need to export data to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Why export data to Excel?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exporting data to Excel offers several benefits. Firstly, Excel provides a user-friendly
    environment for data exploration and visualization, allowing users to easily sort,
    filter, and analyze data. Additionally, Excel’s rich formatting capabilities make
    it suitable for generating professional reports or sharing data with stakeholders
    who may not have programming knowledge. Furthermore, Excel supports various formulas
    and functions, enabling users to perform calculations on the exported data easily.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can export data to Excel with Python!
  prefs: []
  type: TYPE_NORMAL
- en: Keeping it simple – exporting data to Excel with pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pandas` is a popular data manipulation library in Python that provides powerful
    tools for data analysis. It also offers excellent functionality for exporting
    data to Excel. Using `pandas`, you can effortlessly transform your data into Excel
    sheets or workbooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` provides the `DataFrame.to_excel()` method, allowing you to export
    data to an Excel file with just a few lines of code. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The code doesn’t return anything, but it does have a side effect – it creates
    the `data.xlsx` file with the exported data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Excel export with pandas](img/B19142_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Excel export with pandas
  prefs: []
  type: TYPE_NORMAL
- en: While `pandas` is good at simple data export, we may want to have more control
    over the Excel workbook. The next few subsections cover more advanced Excel manipulation
    using `openpyxl`. We will cover the capabilities of `openpyxl`, starting with
    the basics such as creating a new workbook by adding and deleting sheets up to
    and including manipulating data in an existing sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced mode – openpyxl for Excel manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the `openpyxl` package, which allows for a
    more nuanced interaction with Excel when writing data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new workbook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start working with Excel sheets in Python, we need to create a new workbook.
    `openpyxl` provides an intuitive API to create, modify, and save Excel workbooks.
    Here’s an example code snippet that demonstrates creating a new workbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, the preceding code snippet doesn’t return anything but it does
    have a side effect – it creates the workbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Creating a workbook with openpyxl](img/B19142_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Creating a workbook with openpyxl
  prefs: []
  type: TYPE_NORMAL
- en: Adding sheets to the workbook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we have a workbook, we can add sheets to it. Adding sheets allows us to
    organize data into separate sections or categories. `openpyxl` provides a simple
    method, `create_sheet()`, to add sheets to a workbook. Let’s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result is an `openpyxl` worksheet object we can use going forward. The resulting
    workbook can then be saved for future use.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example attempts to save the workbook you are working with. If
    the workbook is open in Excel, the attempt will fail, with a hard-to-decipher
    error message about the COM systems. Make sure you close your Excel instance before
    attempting to save your work from the Python side! This warning will remain applicable
    to most of this book, so keep it in mind for later chapters as well.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times, we may need to remove a sheet from a workbook. The `remove()` method
    in `openpyxl` allows us to delete a sheet by its name. The following is an example
    of how you can delete a sheet from a workbook. Please note that we will not save
    the result, so the stored version of the file remains unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As before, the code has a side effect (the deleted sheet) but no return value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Deleting a sheet with openpyxl](img/B19142_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Deleting a sheet with openpyxl
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we used the sheet we created previously. The `load_workbook()`
    method from `openpyxl` is used to load the existing workbook, after which the
    `remove()` method is used to delete a sheet specified by name.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating an existing workbook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python libraries such as `openpyxl` provide powerful methods to manipulate
    existing Excel workbooks. We can modify cells, apply formatting, insert formulas,
    and more. Let’s look at an example of how to update a cell value in an existing
    workbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet will directly change the value of a cell in the Excel sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Updating the value of a cell with openpyxl](img/B19142_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Updating the value of a cell with openpyxl
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as we expect (keep in mind that the process of deleting the sheet
    was not saved):'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.7 – The fruit of our efforts – Hell\uFEFFo, World! in A1, Sheet1](img/B19142_02_7.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The fruit of our efforts – Hello, World! in A1, Sheet1
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between openpyxl and pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to exporting data to Excel, both `openpyxl` and `pandas` are excellent
    choices. `openpyxl` is a dedicated library for working with Excel files as it
    provides extensive functionality for creating, modifying, and saving Excel workbooks.
    On the other hand, `pandas` offers a high-level data manipulation interface with
    convenient methods for exporting data to Excel, which is ideal when a simple data
    dump is all you need.
  prefs: []
  type: TYPE_NORMAL
- en: If you require fine-grained control over the Excel file’s structure, such as
    adding formatting, formulas, or charts, `openpyxl` is a suitable option. It allows
    you to work directly with the underlying Excel objects, providing more flexibility.
    On the other hand, if you primarily focus on data manipulation and want a simpler
    way to export DataFrames to Excel without worrying about Excel-specific features,
    `pandas` is a convenient choice. It abstracts away some of the lower-level details
    and provides a more straightforward interface for exporting data. While `openpyxl`
    provides a simple abstracted way of manipulating and controlling sheets, R also
    has this in packages such as `openxlsx` and `xlsx`, both of which provide their
    own form of these types of functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Other alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from `pandas` and `openpyxl`, there are other libraries available for
    exporting data to Excel from Python. Some popular alternatives include `XlsxWriter`,
    `xlrd`, and `xlwt`. These libraries offer different features and capabilities,
    and the choice depends on your specific requirements. `XlsxWriter`, for example,
    emphasizes performance and supports advanced Excel features, while `xlrd` and
    `xlwt` provide functionality for reading and writing older Excel file formats
    (`.xls`).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored the benefits of exporting data to Excel, demonstrated
    how to do so using `pandas`, went through the process of creating and manipulating
    Excel sheets using `openpyxl`, discussed the reasons for choosing `openpyxl` or
    `pandas` based on your needs, and mentioned other alternatives available. By leveraging
    the power of these libraries, you can seamlessly export your data from Python
    to Excel, enabling efficient analysis, reporting, and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B19142_02.xhtml#_idTextAnchor036), we explored the process
    of writing data to Excel using different R and Python libraries and benchmarking
    their performance. We also discussed creating and manipulating Excel sheets from
    Python using `pandas` and `openpyxl`. By comparing their features and exploring
    alternatives, you have gained insights into the capabilities of both R and Python
    for Excel tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to execute VBA code with R and Python.
  prefs: []
  type: TYPE_NORMAL
