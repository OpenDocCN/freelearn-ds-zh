["```py\nvar data = [\n  {startAngle: 0, endAngle: 0.6283185307179586}, \n  {startAngle: 0.6283185307179586, endAngle: 1.2566370614359172},\n  ...\n  {startAngle: 5.654866776461628, endAngle: 6.283185307179586}\n];\n```", "```py\n<script type=\"text/javascript\">\n  function pieChart() {\n    var _chart = {};\n\n    var _width = 500, _height = 500,\n      _data = [],\n      _colors = d3.scale.category20(),\n      _svg,\n      _bodyG,\n      _pieG,\n      _radius = 200,\n      _innerRadius = 100;\n\n      _chart.render = function () {\n        if (!_svg) {\n          _svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"height\", _height)\n            .attr(\"width\", _width);\n        }\n\n      renderBody(_svg);\n  };\n\n  function renderBody(svg) {\n    if (!_bodyG)\n      _bodyG = svg.append(\"g\")\n        .attr(\"class\", \"body\");\n\n    renderPie();\n  }\n\n  function renderPie() {\n    var pie = d3.layout.pie()\n      .sort(function (d) {\n        return d.id;\n      })\n      .value(function (d) {\n        return d.value;\n      });\n\n    var arc = d3.svg.arc()\n      .outerRadius(_radius)\n      .innerRadius(_innerRadius);\n\n    if (!_pieG)\n      _pieG = _bodyG.append(\"g\")\n        .attr(\"class\", \"pie\")\n        .attr(\"transform\", \"translate(\" + _radius + \",\" + _radius + \")\");\n\n    renderSlices(pie, arc);\n\n    renderLabels(pie, arc);\n  }\n\n  function renderSlices(pie, arc) {\n  // explained in detail in the'how it works...' section\n  ...\n  }\n\n  function renderLabels(pie, arc) {\n  // explained in detail in the 'how it works...' section\n  ...\n  }\n  ...\n  return _chart;\n}\n...\n</script>\n```", "```py\nvar pie = d3.layout.pie() // <-A\n  .sort(function (d) {\n    return d.id;\n  })\n  .value(function (d) {\n    return d.value;\n  });\n```", "```py\nfunction renderSlices(pie, arc) {\n  var slices = _pieG.selectAll(\"path.arc\")\n    .data(pie(_data)); // <-B\n\n  slices.enter()\n    .append(\"path\")\n    .attr(\"class\", \"arc\")\n    .attr(\"fill\", function (d, i) {\n      return _colors(i);\n    });\n\n  slices.transition()\n    .attrTween(\"d\", function (d) {\n      var currentArc = this.__current__;//<-C\n\n      if (!currentArc)\n        currentArc = {startAngle: 0, \n          endAngle: 0};\n\n      var interpolate = d3.interpolate(\n        currentArc, d);\n      this.__current__ = interpolate(1);//<-D\n        return function (t) {\n          return arc(interpolate(t));\n        };\n    });\n}\n```", "```py\nfunction renderLabels(pie, arc) {\n  var labels = _pieG.selectAll(\"text.label\")\n    .data(pie(_data)); // <-E\n\n  labels.enter()\n    .append(\"text\")\n    .attr(\"class\", \"label\");\n\n  labels.transition()\n    .attr(\"transform\", function (d) {\n      return \"translate(\" \n        + arc.centroid(d) + \")\"; //<-F\n      })\n    .attr(\"dy\", \".35em\")\n    .attr(\"text-anchor\", \"middle\")\n    .text(function (d) {\n      return d.data.id;\n    });\n}\n```", "```py\n<script type=\"text/javascript\">\nfunction stackedAreaChart() {\n  var _chart = {};\n\n  var _width = 900, _height = 450,\n    _margins = {top: 30, left: 30, right: 30, bottom: 30},\n    _x, _y,\n    _data = [],\n    _colors = d3.scale.category10(),\n    _svg,\n    _bodyG,\n    _line;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"height\", _height)\n      .attr(\"width\", _width);\n\n    renderAxes(_svg);\n\n    defineBodyClip(_svg);\n  }\n\n  renderBody(_svg);\n};\n...\nfunction renderBody(svg) {\n  if (!_bodyG)\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\")\n      .attr(\"transform\", \"translate(\"\n        + xStart() + \",\"\n        + yEnd() + \")\")\n      .attr(\"clip-path\", \"url(#body-clip)\");\n\n  var stack = d3.layout.stack() //<-A\n    .offset('zero');\n  stack(_data); //<-B\n\n  renderLines(_data);\n\n  renderAreas(_data);\n}\n\nfunction renderLines(stackedData) {\n  // explained in details in the'how it works...' section\n...\n}\n\nfunction renderAreas(stackedData) {\n  // explained in details in the 'how it works...' section\n...\n}\n...\n```", "```py\nvar stack = d3.layout.stack() //<-A\n  .offset('zero');\nstack(_data); //<-B\n```", "```py\nfunction renderLines(stackedData) {\n  _line = d3.svg.line()\n    .x(function (d) {\n      return _x(d.x); //<-C\n    })\n    .y(function (d) {\n      return _y(d.y + d.y0); //<-D\n    });\n  _bodyG.selectAll(\"path.line\")\n    .data(stackedData)\n    .enter()\n    .append(\"path\")\n    .style(\"stroke\", function (d, i) {\n      return _colors(i);\n    })\n    .attr(\"class\", \"line\");\n\n  _bodyG.selectAll(\"path.line\")\n    .data(stackedData)\n    .transition()\n    .attr(\"d\", function (d) {\n      return _line(d);\n    });\n}\n```", "```py\nfunction renderAreas(stackedData) {\n  var area = d3.svg.area()\n    .x(function (d) {\n      return _x(d.x); //<-E\n    })\n    .y0(function(d){return _y(d.y0);}) //<-F\n    .y1(function (d) {\n      return _y(d.y + d.y0); //<-G\n    });\n  _bodyG.selectAll(\"path.area\")\n    .data(stackedData)\n    .enter()\n    .append(\"path\")\n    .style(\"fill\", function (d, i) {\n      return _colors(i);\n    })\n    .attr(\"class\", \"area\");\n\n  _bodyG.selectAll(\"path.area\")\n    .data(_data)\n    .transition()\n    .attr(\"d\", function (d) {\n      return area(d);\n    });\n}\n```", "```py\n{\n  \"name\": \"flare\",\n  \"children\": [\n  {\n    \"name\": \"analytics\",\n    \"children\": [\n    {\n      \"name\": \"cluster\",\n      \"children\": [\n        {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n        {\"name\": \"CommunityStructure\", \"size\": 3812},\n        {\"name\": \"MergeEdge\", \"size\": 743}\n      ]\n    },\n    {\n      \"name\": \"graph\",\n      \"children\": [\n        {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n        {\"name\": \"LinkDistance\", \"size\": 5731}\n      ]\n    },\n    {\n      \"name\": \"optimization\",\n      \"children\": [\n        {\"name\": \"AspectRatioBanker\", \"size\": 7074}\n      ]\n    }\n  ]  \n  ]\n}\n```", "```py\nfunction treemapChart() {\n  var _chart = {};\n\n  var _width = 1600, _height = 800,\n    _colors = d3.scale.category20c(),\n   _svg,\n   _nodes,\n   _x = d3.scale.linear().range([0, _width]),\n   _y = d3.scale.linear().range([0, _height]),\n   _valueAccessor = function (d) {\n      return 1;\n    },\n  _bodyG;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"height\", _height)\n        .attr(\"width\", _width);\n    }\n\n    renderBody(_svg);\n  };\n\n  function renderBody(svg) {\n    // explained in details in the 'how it works...' section\n    ... \n\n    renderCells(cells);\n  }\n\n  function renderCells(cells){\n    // explained in details in the 'how it works...' section\n    ...\n  }\n\n  // accessors omitted\n  ...\n\n  return _chart;\n}\n\nd3.json(\"flare.json\", function (nodes) {\n  var chart = treemapChart();\n  chart.nodes(nodes).render();\n});\n```", "```py\nfunction renderBody(svg) {\n  if (!_bodyG) {\n    _bodyG = svg.append(\"g\")\n      .attr(\"class\", \"body\");\n\n      _treemap = d3.layout.treemap() //<-A\n        .round(false)\n        .size([_width, _height])\n        .sticky(true);\n      }\n\n      _treemap.value(_valueAccessor); //<-B\n\n  var nodes = _treemap.nodes(_nodes) //<-C\n    .filter(function (d) {\n      return !d.children; //<-D\n    });\n\n  var cells = svg.selectAll(\"g\") //<-E\n    .data(nodes);\n\n  renderCells(cells);\n    }\n```", "```py\n    function(d){ return d.size; } // visualize package size\n    function(d){ return 1; } // visualize package count\n    ```", "```py\nfunction renderCells(cells){\n  var cellEnter = cells.enter().append(\"g\")\n    .attr(\"class\", \"cell\");\n\n  cellEnter.append(\"rect\")\n  cellEnter.append(\"text\");\n\n  cells.transition().attr(\"transform\", function (d) {\n    return \"translate(\"+d.x+\",\"+d.y+\")\"; //<-F\n  })\n  .select(\"rect\")\n    .attr(\"width\", function (d) {return d.dx - 1;})\n    .attr(\"height\", function (d) {return d.dy - 1;})\n    .style(\"fill\", function (d) {\n      return _colors(d.parent.name); //<-G\n    });\n\n  cells.select(\"text\") //<-H\n    .attr(\"x\", function (d) {return d.dx / 2;})\n    .attr(\"y\", function (d) {return d.dy / 2;})\n    .attr(\"dy\", \".35em\")\n    .attr(\"text-anchor\", \"middle\")\n    .text(function (d) {return d.name;})\n    .style(\"opacity\", function (d) {\n      d.w = this.getComputedTextLength();\n      return d.dx > d.w ? 1 : 0; //<-I\n    );\n\n  cells.exit().remove();\n}\n```", "```py\n.style(\"opacity\", function (d) {\n    d.w = this.getComputedTextLength();\n    return d.dx > d.w ? 1 : 0;\n)\n```", "```py\nfunction tree() {\n  var _chart = {};\n\n  var _width = 1600, _height = 800,\n    _margins = {top:30, left:120, right:30, bottom:30},\n    _svg,\n    _nodes,\n    _i = 0,\n    _tree,\n    _diagonal,\n    _bodyG;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"height\", _height)\n        .attr(\"width\", _width);\n    }\n\n    renderBody(_svg);\n  };\n\n  function renderBody(svg) {\n    if (!_bodyG) {\n      _bodyG = svg.append(\"g\")\n        .attr(\"class\", \"body\")\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + _margins.left \n            + \",\" + _margins.top + \")\";\n          });\n    }\n\n    _tree = d3.layout.tree()\n      .size([\n        (_height - _margins.top - _margins.bottom), \n        (_width - _margins.left - _margins.right)\n      ]);\n\n    _diagonal = d3.svg.diagonal()\n      .projection(function (d) {\n        return [d.y, d.x];\n      });\n\n    _nodes.x0 = (_height-_margins.top-_margins.bottom) / 2;\n    _nodes.y0 = 0;\n\n    render(_nodes);\n  }\n\n  function render(source) {\n    var nodes = _tree.nodes(_nodes);\n\n    renderNodes(nodes, source);\n\n    renderLinks(nodes, source);\n  }\n\n  function renderNodes(nodes, source) {\n    // will be explained in the 'how it works...' section\n    ...\n  }\n\n  function renderLinks(nodes, source) {\n    // will be explained in the 'how it works...' section\n    ...\n  }\n\n  // accessors omitted\n  ...\n\n  return _chart;\n}\n```", "```py\n_tree = d3.layout.tree()\n  .size([\n    (_height - _margins.top - _margins.bottom), \n    (_width - _margins.left - _margins.right)\n  ]);\n```", "```py\nvar nodes = _tree.nodes(_nodes);\n\n```", "```py\n_diagonal = d3.svg.diagonal()\n  .projection(function (d) {\n    return [d.y, d.x];\n  });\n```", "```py\nfunction renderNodes(nodes, source) {\n  nodes.forEach(function (d) {\n    d.y = d.depth * 180; \n  });\n```", "```py\n  var node = _bodyG.selectAll(\"g.node\")\n    .data(nodes, function (d) {\n      return d.id || (d.id = ++_i);\n    });\n```", "```py\n  var nodeEnter = node.enter().append(\"svg:g\")\n    .attr(\"class\", \"node\")\n    .attr(\"transform\", function (d) {\n      return \"translate(\" + source.y0 \n        + \",\" + source.x0 + \")\";\n    });\n```", "```py\n  nodeEnter.append(\"svg:circle\")\n    .attr(\"r\", 1e-6);\n\n  var nodeUpdate = node.transition()\n    .attr(\"transform\", function (d) {\n      return \"translate(\" + d.y + \",\" + d.x + \")\";\n    });\n\n  nodeUpdate.select(\"circle\")\n    .attr(\"r\", 4.5);\n```", "```py\n  var nodeExit = node.exit().transition()\n    .attr(\"transform\", function (d) {\n      return \"translate(\" + source.y \n        + \",\" + source.x + \")\";\n      })\n    .remove();\n\n  nodeExit.select(\"circle\")\n    .attr(\"r\", 1e-6);\n\n  renderLabels(nodeEnter, nodeUpdate, nodeExit);\n}\n```", "```py\nfunction renderLinks(nodes, source) {\n  var link = _bodyG.selectAll(\"path.link\")\n    .data(_tree.links(nodes), function (d) {\n      return d.target.id;\n    });\n```", "```py\n  link.enter().insert(\"svg:path\", \"g\")\n    .attr(\"class\", \"link\")\n    .attr(\"d\", function (d) {\n      var o = {x: source.x0, y: source.y0};\n      return _diagonal({source: o, target: o});\n    });\n```", "```py\n  link.transition()\n    .attr(\"d\", _diagonal);\n```", "```py\n  link.exit().transition()\n    .attr(\"d\", function (d) {\n      var o = {x: source.x, y: source.y};\n      return _diagonal({source: o, target: o});\n    })\n  .remove();\n```", "```py\nfunction pack() {\n  var _chart = {};\n\n  var _width = 1280, _height = 800,\n    _svg,\n    _r = 720,\n    _x = d3.scale.linear().range([0, _r]),\n    _y = d3.scale.linear().range([0, _r]),\n    _nodes,\n    _bodyG;\n\n  _chart.render = function () {\n    if (!_svg) {\n      _svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"height\", _height)\n        .attr(\"width\", _width);\n    }\n\n    renderBody(_svg);\n  };\n\n  function renderBody(svg) {\n    if (!_bodyG) {\n      _bodyG = svg.append(\"g\")\n        .attr(\"class\", \"body\")\n        .attr(\"transform\", function (d) {\n          return \"translate(\" \n            + (_width - _r) / 2 + \",\" \n            + (_height - _r) / 2 \n            + \")\";\n        });\n    }\n\n    var pack = d3.layout.pack()\n      .size([_r, _r])\n      .value(function (d) {\n        return d.size;\n      });\n\n    var nodes = pack.nodes(_nodes);\n\n    renderCircles(nodes);\n\n    renderLabels(nodes);\n  }\n\n  function renderCircles(nodes) {\n    // will be explained in the 'how it works...' section\n    ...\n  }\n\n  function renderLabels(nodes) {\n    // omitted\n    ...\n  }\n\n  // accessors omitted\n  ...\n\n  return _chart;\n}\n```", "```py\nvar pack = d3.layout.pack()\n  .size([_r, _r])\n  .value(function (d) {\n    return d.size;\n  });\n\nvar nodes = pack.nodes(_nodes);\n```", "```py\nfunction renderCircles(nodes) {\n  var circles = _bodyG.selectAll(\"circle\")\n    .data(nodes);\n\n  circles.enter().append(\"svg:circle\");\n```", "```py\n  circles.transition()\n    .attr(\"class\", function (d) {\n      return d.children ? \"parent\" : \"child\";\n    })\n    .attr(\"cx\", function (d) {return d.x; })\n    .attr(\"cy\", function (d) {return d.y; })\n    .attr(\"r\", function (d) {return d.r; });\n```", "```py\n  circles.exit().transition()\n    .attr(\"r\", 0)\n    .remove();\n}\n```"]