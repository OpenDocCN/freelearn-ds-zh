- en: Chapter 7. Creating Custom Geoprocessing Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom geoprocessing tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to accessing the system tools provided by ArcGIS, you can also create
    your own custom tools. These tools work in the same way that system tools do and
    can be used in ModelBuilder, Python window, or in standalone Python scripts. Many
    organizations build their own library of tools that perform geoprocessing operations
    specific to their data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom geoprocessing tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to execute any of the available tools in your scripts,
    you can also create your own custom tools, which can also be called from a script.
    Custom tools are frequently created to handle geoprocessing tasks that are specific
    to an organization. These tools can easily be shared as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you will learn to create custom geoprocessing script tools by
    attaching a Python script to a custom toolbox in ArcToolbox. There are a number
    of advantages of creating a custom script tool. When you take this approach, the
    script becomes a part of the geoprocessing framework, which means that it can
    be run from a model, command line, or another script. In addition to this, the
    script has access to ArcMap environment settings and help documentation. Other
    advantages include a nice, easy-to-use user interface and error-prevention capabilities.
    Error-prevention capabilities provided include a dialog box that informs the user
    of certain errors.
  prefs: []
  type: TYPE_NORMAL
- en: These custom developed script tools must be added to a custom toolbox that you
    create because the system toolboxes provided with ArcToolbox are read-only toolboxes
    and thus can't accept new tools.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you are going to be provided with a pre-written Python script
    that reads wildfire data from a comma-delimited text file, and writes this information
    to a point feature class called `FireIncidents`. References to these datasets
    have been hardcoded, so you are going to alter the script to accept dynamic variable
    input. You'll then attach the script to a custom tool in ArcToolbox to give your
    end users a visual interface for using the script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The custom Python geoprocessing scripts that you write can be added to ArcToolbox
    inside custom toolboxes. You are not allowed to add your scripts to any of the
    system toolboxes, such as **Analysis** or **Data Management**. However, by creating
    a new custom toolbox, you can add these scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Open ArcMap with an empty map document file and open the ArcToolbox window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere in the white space area of ArcToolbox and select **Add
    Toolbox**. On the **Add Toolbox** dialog box, click on the **New Toolbox** button.
    This will create a new toolbox with a default name of `Toolbox.tbx`; you will
    rename the toolbox in the next step:![How to do it…](img/4445_07_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `c:\ArcpyBook\Ch7` folder and name the toolbox `Wildfire Tools`:![How
    to do it…](img/4445_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the toolbox by selecting **WildfireTools.tbx** and clicking on the **Open**
    button. The toolbox should now be displayed in ArcToolbox as shown in the following
    screenshot:![How to do it…](img/4445_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each toolbox should be given a name and an alias. The alias will be used to
    uniquely define your custom tool. Alias names should be kept short and should
    not include any special characters. Right-click on the new toolbox and select
    **Properties**. Add an alias of `wildfire` as shown in the following screenshot:![How
    to do it…](img/4445_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can optionally create a new toolset inside this toolbox by right-clicking
    on the toolbox and selecting **New** | **Toolset**. Toolsets allow you to functionally
    group your scripts. In this example, it won't be necessary to do this, but if
    you need to group your scripts in the future, then this is how you can accomplish
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this next step, we will alter an existing Python script called `InsertWildfires.py`
    to accept dynamic inputs that will be provided by the user of the tool through
    the ArcToolbox interface. Open `c:\ArcpyBook\Ch7\InsertWildfires.py` in IDLE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that we have hardcoded the path to our workspace as well as the comma-delimited
    text file containing the wildland fire incidents:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the preceding two lines of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, we have also hardcoded the output feature class name:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This hardcoding limits the usefulness of our script. If the datasets move or
    are deleted, the script will no longer run. In addition to this, the script lacks
    the flexibility to specify different input and output datasets. In the next step,
    we will remove this hardcoding and replace it with the ability to accept dynamic
    input.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will use the `GetParameterAsText()` function found in `arcpy` to accept
    dynamic input from the user. Add the following lines of code to your `try` block,
    so that your code appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we call the `CreateFeatureClass` tool, found in the **Data Management
    Tools** toolbox, passing in the `outputFC` variable along with the template feature
    class (`fClassTemplate`). This tool will create the empty feature class containing
    the output feature class defined by the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will also need to alter the line of code that creates an `InsertCursor`
    object. Change the line as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the next step, we will add the script that we just created to the **Wildfire
    Tools** toolbox as a script tool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In ArcToolbox, right-click on the **Wildfire Tools** custom toolbox that you
    created earlier and select **Add** | **Script**. This will display the **Add Script**
    dialog, as shown in the following screenshot. Give your script a name, label,
    and description. The **Name** field can not contain any spaces or special characters.
    **Label** is the name that shows up next to the script. For this example, give
    it a label of `Load Wildfires From Text`. Finally, add some descriptive information
    that details the operations the script will perform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the following screenshot for **Name**, **Label**, and **Description** details:![How
    to do it…](img/4445_07_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** to display the next input dialog box for **Add Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this dialog box, you will specify the script that will be attached to the
    tool. Navigate to `c:\ArcpyBook\Ch7\InsertWildfires.py` and add `InsertWildfires.py`
    as the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also want to make sure that the **Run Python script in process** checkbox
    is selected, as shown in the following screenshot. Running a Python script "in
    process" increases the performance of your script.![How to do it…](img/4445_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Running a script out of process requires ArcGIS to create a separate process
    to execute the script. The time it takes to start this process and execute the
    script leads to performance problems. Always run your scripts in process. Running
    a script in process means that ArcGIS does not have to spawn a second process
    to run the script. It runs in the same process space as ArcGIS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Next** to display the parameter window, as shown in the following
    screenshot:![How to do it…](img/4445_07_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each parameter that you enter in this dialog box corresponds to a single call
    to `GetParameterAsText()`. Earlier, you altered your script to accept dynamic
    parameters through the `GetParameterAsText()` method. The parameters should be
    entered in this dialog box in the same order that your script expects to receive
    them. For instance, you inserted the following line of code in your code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first parameter that you add to the dialog box will need to correspond to
    this line. In our code, this parameter represents the feature class that will
    be created as a result of running this script. You add parameters by clicking
    on the first available row under **Display Name**. You can enter in any text in
    this row. This text will be displayed to the user. You will also need to select
    a corresponding datatype for the parameter. In this case, Data Type should be
    set to **Feature Class**, since this is the expected data that will be gathered
    from the user. Each parameter also has a number of properties that can be set.
    Some of the more important properties include **Type**, **Direction**, and **Default**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the information, as shown in the following screenshot, into your dialog
    box, for the output feature class. Make sure that you set **Direction** to **Output**:![How
    to do it…](img/4445_07_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to add a parameter that defines the feature class that will be
    used as the attribute template for our new feature class. Enter the following
    information in your dialog box:![How to do it…](img/4445_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we need to add a parameter that will be used to specify the comma-delimited
    text file that will be used as an input in the creation of our new feature class.
    Enter the following information into your dialog box:![How to do it…](img/4445_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish**. The new script tool will be added to your **Wildfire Tools**
    toolbox, as shown in the following screenshot:![How to do it…](img/4445_07_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll test the tool to make sure it works. Double-click on the script tool
    to display the dialog box, as shown in the following screenshot:![How to do it…](img/4445_07_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a new output feature class, which should be loaded inside the existing
    `WildlandFires.mdb` personal geodatabase, as shown in the next screenshot. Click
    on the open folder icon and navigate to the `WildlandFires.mdb` personal geodatabase,
    which should be located in `c:\ArcpyBook\data\Wildfires`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also need to give your new feature class a name. In this case, we'll
    name the feature class `TodaysWildfires`, but the name can be whatever you'd like.
    In the following screenshot, you can see an example of how this should be done.
    Click on the **Save** button:![How to do it…](img/4445_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the attribute template, you will want to point to the `FireIncidents` feature
    class that has already been created for you. This feature class contains a field
    called `CONFIDENCEVAL`. This field will be created in our new feature class. Click
    on the **Browse** button, navigate to `c:\ArcpyBook\data\Wildfires\WildlandFires.mdb`,
    and you should see the `FireIncidents` feature class. Select it and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, the last parameter needs to point to our comma-delimited text file
    containing wildland fires. This file can be found at: `c:\ArcpyBook\data\Wildfires\NorthAmericaWildfires_2007275.txt`.
    Click on the **Browse** button and navigate to `c:\ArcpyBook\data\Wildfires`.
    Click on `NorthAmericaWildfires_2007275.txt` and click on the **Add** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your tool should appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/4445_07_7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on **OK** to execute the tool. Any messages will be written to the dialog
    box as shown in the following screenshot. This is a standard dialog box for any
    geoprocessing tool. If everything has been set up correctly, you should see the
    following screenshot, which shows that a new feature class will be added to the
    ArcMap display:![How to do it…](img/4445_07_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If everything is set up correctly, you should see the following screenshot,
    which shows that a new feature class will be added to the ArcMap display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/4445_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Almost all script tools have parameters, and the values are set on the tool
    dialog box. When the tool is executed, the parameter values are sent to your script.
    Your script reads these values and then proceeds with its work. Python scripts
    can accept parameters as input. Parameters, also known as arguments, allow your
    scripts to become dynamic. Up to this point, all of our scripts have used hard
    coded values. By specifying input parameters for a script, you are able to supply
    the name of the feature class at run time. This capability makes your scripts
    more versatile.
  prefs: []
  type: TYPE_NORMAL
- en: The `GetParameterAsText()` method, which is used to capture parameter input,
    is zero-based with the first parameter entered occupying index `0`. Each successive
    parameter is incremented by 1\. The output feature class that will be created
    by reading the comma-delimited text file is specified in the variable `outputFC`,
    which is retrieved by `GetParameterAsText(0)`. With `GetParameterAsText(1)`, we
    capture a feature class that will act as a template for the output feature class
    attribute schema. The attribute fields in the template feature class are used
    to define the fields that will populate our output feature class. Finally, `GetParameterAsText(2)`
    is used to create a variable called `f`, which will hold the comma-delimited text
    file that will be read.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `arcpy.GetParameterAsText()` method is not the only way to capture information
    passed into your script. When you call a Python script from the command line,
    you can pass in a set of arguments. When passing arguments to a script, each word
    must be separated by a space. These words are stored in a zero-based list object
    called `sys.argv`. With `sys.argv`, the first item in the list, referenced by
    index `0`, stores the name of the script. Each successive word is referenced by
    the next integer. Therefore, the first parameter will be stored in `sys.argv[1]`,
    the second in `sys.argv[2]`, and so on. These arguments can then be accessed from
    within your script.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you use the `GetParameterAsText()` function rather than
    `sys.argv`, because `GetParameterAsText()` does not have a character limit whereas
    `sys.argv` has a limit of 1,024 characters per parameter. In either case, once
    parameters have been read into the script, your script can continue execution
    using the input values.
  prefs: []
  type: TYPE_NORMAL
