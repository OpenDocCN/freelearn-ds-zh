["```py\n<agency tag=\"lametro\" title=\"Los Angeles Metro\" regionTitle=\"California-Southern\"/> \n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<body copyright=\"All data copyright Los Angeles Metro 2015.\"><route tag=\"2\" title=\"2 Downtown LA - Pacific Palisades Via\"/><route tag=\"4\" title=\"4 Downtown LA - Santa Monica Via Santa\"/>\n<route tag=\"10\" title=\"10 W Hollywood-Dtwn LA -Avalon Sta Via\"/>\n...\n<route tag=\"901\" title=\"901 Metro Orange Line\"/>\n<route tag=\"910\" title=\"910 Metro Silver Line\"/>\n</body>\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<body copyright=\"All data copyright Los Angeles Metro 2015.\">\n<vehicle id=\"7582\" routeTag=\"2\" dirTag=\"2_758_0\" lat=\"34.097992\" lon=\"-118.350365\" secsSinceReport=\"44\" predictable=\"true\" heading=\"90\" speedKmHr=\"0\"/>\n<vehicle id=\"7583\" routeTag=\"2\" dirTag=\"2_779_0\" lat=\"34.098076\" lon=\"-118.301399\" secsSinceReport=\"104\" predictable=\"true\" heading=\"90\" speedKmHr=\"37\"/>\n. . .\n</body >  \n```", "```py\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nfrom xml.dom import minidom\n```", "```py\n# Nextbus API command mode\ncommand = \"vehicleLocations\"\n\n# Nextbus customer to query\nagency = \"lametro\"\n\n# Bus we want to query\nroute = \"2\"\n```", "```py\n# Time in milliseconds since the\n# 1970 epoch time. All tracks\n# after this time will be returned.\n# 0 only returns data for the last\n# 15 minutes\nepoch = \"0\"\n```", "```py\n# Build our query url\n# webservices base url\nurl = \"http://webservices.nextbus.com\"\n\n# web service path\nurl += \"/service/publicXMLFeed?\"\n\n# service command/mode\nurl += \"command=\" + command\n\n# agency\nurl += \"&a=\" + agency\nurl += \"&r=\" + route\nurl += \"&t=\" + epoch\n```", "```py\n# Access the REST URL\nfeed = urllib.request.urlopen(url)\nif feed:\n # Parse the xml feed\n xml = minidom.parse(feed)\n # Get the vehicle tags\n vehicles = xml.getElementsByTagName(\"vehicle\")\n # Get the most recent one. Normally there will\n # be only one.\n```", "```py\n if vehicles:\n   bus = vehicles.pop()\n   # Print the bus latitude and longitude\n   att = bus.attributes\n   print(att[\"lon\"].value, \",\", att[\"lat\"].value)\n else:\n   print(\"No vehicles found.\")\n```", "```py\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nfrom xml.dom import minidom\nimport time\n```", "```py\ndef nextbus(a, r, c=\"vehicleLocations\", e=0):\n \"\"\"Returns the most recent latitude and\n longitude of the selected bus line using\n the NextBus API (nbapi)\n Arguments: a=agency, r=route, c=command,\n e=epoch timestamp for start date of track,\n 0 = the last 15 minutes\"\"\"\n nbapi = \"http://webservices.nextbus.com\"\n nbapi += \"/service/publicXMLFeed?\"\n nbapi += \"command={}&a={}&r={}&t={}\".format(c, a, r, e)\n xml = minidom.parse(urllib.request.urlopen(nbapi))\n # If more than one vehicle, just get the first \n bus = xml.getElementsByTagName(\"vehicle\")[0]\n if bus: \n at = bus.attributes\n return(at[\"lat\"].value, at[\"lon\"].value)\n else:\n return (False, False)\n```", "```py\ndef nextmap(a, r, mapimg):\n \"\"\"Plots a nextbus location on a map image\n and saves it to disk using the MapQuest OpenStreetMap Static Map \n API (osmapi)\"\"\"\n # Fetch the latest bus location\n lat, lon = nextbus(a, r)\n if not lat:\n   return False\n # Base url + service path\n```", "```py\n osmapi = \"https://www.mapquestapi.com/staticmap/v4/getmap?\n type=map&\"\n# Use a red, pushpin marker to pin point the bus\n osmapi += \"mcenter={},{}|&\".format(lat, lon)\n# Set the zoom level (between 1-18, higher=lower scale)\n osmapi += \"zoom=18&\"\n# Center the map around the bus location\n osmapi += \"center={},{}&\".format(lat, lon)\n# Set the map image size\n osmapi += \"&size=1500,1000\"\n# Add our API Key\n osmapi += \"&key=YOUR_API_KEY_HERE\"\n```", "```py\n # Create a PNG image\n osmapi += \"imagetype=png&\"\n img = urllib.request.urlopen(osmapi)\n\n# Save the map image\n with open(\"{}.png\".format(mapimg), \"wb\") as f:\n   f.write(img.read())\nreturn True\n```", "```py\n# Nextbus API agency and bus line variables\nagency = \"lametro\"\nroute = \"2\"\n# Name of map image to save as PNG\nnextimg = \"nextmap\"\n```", "```py\n# Number of updates we want to make\nrequests = 1\n# How often we want to update (seconds)\nfreq = 5\n```", "```py\n# Map the bus location every few seconds\nfor i in range(requests):\n success = nextmap(agency, route, nextimg)\n if not success:\n   print(\"No data available.\")\n   continue\n print(\"Saved map {} at {}\".format(i, time.asctime()))\n time.sleep(freq)\n```", "```py\nSaved map 0 at Sun Nov 1 22:35:17 2015\nSaved map 1 at Sun Nov 1 22:35:24 2015\nSaved map 2 at Sun Nov 1 22:35:32 2015\n```", "```py\nimport sys\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nfrom xml.dom import minidom\nimport math\ntry:\n import Image\nexcept:\n from PIL import Image\n```", "```py\ndef nextbus(a, r, c=\"vehicleLocations\", e=0):\n \"\"\"Returns the most recent latitude and\n longitude of the selected bus line using\n the NextBus API (nbapi)\"\"\"\n nbapi = \"http://webservices.nextbus.com\"\n nbapi += \"/service/publicXMLFeed?\"\n nbapi += \"command=%s&a=%s&r=%s&t=%s\" % (c, a, r, e)\n xml = minidom.parse(urllib.request.urlopen(nbapi))\n # If more than one vehicle, just get the first\n bus = xml.getElementsByTagName(\"vehicle\")[0]\n if bus:\n at = bus.attributes\n return(at[\"lat\"].value, at[\"lon\"].value)\n else:\n return (False, False)\n```", "```py\ndef ll2m(lon, lat):\n \"\"\"Lat/lon to meters\"\"\"\n x = lon * 20037508.34 / 180.0\n y = math.log(math.tan((90.0 + lat) *\n math.pi / 360.0)) / (math.pi / 180.0)\n y = y * 20037508.34 / 180\n return (x, y)\n```", "```py\ndef wms(minx, miny, maxx, maxy, service, lyr, epsg, style, img, w, \n        h):\n    \"\"\"Retrieve a wms map image from\n    the specified service and saves it as a JPEG.\"\"\"\n    wms = service\n    wms += \"?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&\"\n    wms += \"LAYERS={}\".format(lyr)\n    wms += \"&STYLES={}&\".format(style)\n    wms += \"SRS=EPSG:{}&\".format(epsg)\n    wms += \"BBOX={},{},{},{}&\".format(minx, miny, maxx, maxy)\n    wms += \"WIDTH={}&\".format(w)\n    wms += \"HEIGHT={}&\".format(h)\n    wms += \"FORMAT=image/jpeg\"\n    wmsmap = urllib.request.urlopen(wms)\n    with open(img + \".jpg\", \"wb\") as f:\n        f.write(wmsmap.read())\n```", "```py\n# Nextbus agency and route ids\nagency = \"roosevelt\"\nroute = \"shuttle\"\n# OpenStreetMap WMS service\nbasemap = \"http://ows.mundialis.de/services/service\"\n# Name of the WMS street layer\nstreets = \"TOPO-OSM-WMS\"\n# Name of the basemap image to save\nmapimg = \"basemap\"\n# OpenWeatherMap.org WMS Service\nweather = \"https://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0q.cgi?\"\n# If the sky is clear over New York,\n# use the following url which contains\n# a notional precipitation sample:\n# weather = \"http://git.io/vl4r1\"\n# WMS weather layer\nweather_layer = \"nexrad-n0q-900913\"\n# Name of the weather image to save\nskyimg = \"weather\"\n# Name of the finished map to save\nfinal = \"next-weather\"\n# Transparency level for weather layer\n# when we blend it with the basemap.\n# 0 = invisible, 1 = no transparency\nopacity = .5\n# Pixel width and height of the\n# output map images\nw = 600\nh = 600\n# Pixel width/height of the the\n# bus marker icon\nicon = 30\n```", "```py\n# Get the bus location\nlat, lon = nextbus(agency, route)\nif not lat:\n print(\"No bus data available.\")\n print(\"Please try again later\")\n sys.exit()\n# Convert strings to floats\nlat = float(lat)\nlon = float(lon)\n# Convert the degrees to Web Mercator\n# to match the NOAA OSM WMS map\nx, y = ll2m(lon, lat)\n# Create a bounding box 1600 meters\n# in each direction around the bus\nminx = x - 1600\nmaxx = x + 1600\nminy = y - 1600\nmaxy = y + 1600\n```", "```py\n# Download the street map\nwms(minx, miny, maxx, maxy, basemap, streets, mapimg, w, h)\n```", "```py\n# Download the weather map\nwms(minx, miny, maxx, maxy, weather, weather_layer, skyimg, w, h)\n```", "```py\n# Open the basemap image in PIL\nim1 = Image.open(\"basemap.png\").convert('RGBA')\n# Open the weather image in PIL\nim2 = Image.open(\"weather.png\").convert('RGBA')\n# Convert the weather image mode\n# to \"RGB\" from an indexed PNG\n# so it matches the basemap image\nim2 = im2.convert(im1.mode)\n# Create a blended image combining\n# the basemap with the weather map\nim3 = Image.blend(im1, im2, opacity)\n```", "```py\n# Open up the bus icon image to\n# use as a location marker.\n# http://git.io/vlgHl \nim4 = Image.open(\"busicon.png\")\n# Shrink the icon to the desired\n# size\nim4.thumbnail((icon, icon))\n# Use the blended map image\n# and icon sizes to place\n# the icon in the center of\n# the image since the map\n# is centered on the bus\n# location.\nw, h = im3.size\nw2, h2 = im4.size\n# Paste the icon in the center of the image\ncenter_width = int((w/2)-(w2/2))\ncenter_height = int((h/2)-(h2/2))\nim3.paste(im4, (center_width, center_height), im4)\n```", "```py\n# Save the finished map\nim3.save(final + \".png\")\n```", "```py\nimport folium\nm = folium.Map()\nm.geo_json(geo_path=\"https://api.myjson.com/bins/467pm\")\nm.create_map(path=\"map.html\")\n```"]