["```py\n    host    all    all    0.0.0.0/0    md5\n    ```", "```py\n    $ createuser  --pwprompt ruser\n\n    ```", "```py\n    $ createdb --owner=ruser rdb\n\n    ```", "```py\n    listen_address = '*'\n    port = 5432\n    ```", "```py\n    # On Mac OS X (using Homebrew)\n    $ brew install postgresql \n    # On Debian / Ubuntu\n    $ sudo apt-get install libpq-dev\n    # On Redhat / CentOS\n    $ sudo yum install postgresql-devel\n    # On Windows: this step is not needed\n\n    ```", "```py\n    # On platforms other than Windows\n    install.packages(\"RPostgreSQL\", type=\"source\")\n    # On Windows\n    install.packages(\"RPostgreSQL\")\n    ```", "```py\n    library(RPostgreSQL)\n    db.drv <- PostgreSQL()\n    db.conn <- dbConnect(db.drv, host = \"hostname\",\n                         port = 5432, dbname = \"rdb\",\n                         user = \"ruser\",\n                         password = \"rpassword\")\n    dbListTables(db.conn)\n    ## character(0)\n    ```", "```py\nntrans <- 1e5\nncust <- 1e4\nnstore <- 100\nsales <- data.frame(\n    trans_id = seq_len(ntrans),\n    cust_id = sample.int(ncust, ntrans, TRUE),\n    store_id = sample.int(nstore, ntrans, TRUE))\ndbWriteTable(db.conn, \"sales\", sales)\ntrans.lengths <- rpois(ntrans, 3) + 1L\ntrans.items <- data.frame(\n    trans_id = rep.int(seq_len(ntrans), trans.lengths),\n    item_id = unlist(lapply(trans.lengths, sample.int, n = 1000)),\n    price = exp(rnorm(sum(trans.lengths))))\ndbWriteTable(db.conn, \"trans_items\", trans.items)\n\n```", "```py\nlibrary(microbenchmark)\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT store_id, price\n        FROM sales INNER JOIN trans_items USING (trans_id);')\n    res <- tapply(res$price, res$store_id, sum)\n}, times = 10)\n## Unit: milliseconds\n##       min       lq   median       uq      max neval\n##  740.7533 745.2563 771.3706 775.3665 780.3819    10\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT store_id, SUM(price) as total_sales\n        FROM sales INNER JOIN trans_items USING (trans_id)\n        GROUP BY store_id;')\n}, times = 10)\n## Unit: milliseconds\n##      min       lq   median       uq      max neval\n##  244.779 248.6401 251.1465 255.3652 279.6666    10\n```", "```py\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT cust_id, price\n        FROM sales INNER JOIN trans_items USING (trans_id);')\n    res <- tapply(res$price, res$cust_id, sum)\n    res <- sort(res, decreasing = TRUE)\n    res <- head(res, 10L)\n}, times = 10)\n## Unit: milliseconds\n##       min       lq   median       uq      max neval\n##  814.2492 828.7774 843.1869 846.4235 952.1318    10\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT cust_id, SUM(price) as spending\n        FROM sales INNER JOIN trans_items USING (trans_id)\n        GROUP BY cust_id\n        ORDER BY spending DESC\n        LIMIT 10;')\n}, times = 10)\n## Unit: milliseconds\n##       min       lq   median       uq      max neval\n##  259.1621 260.5494 260.9566 265.1368 294.1732    10\n```", "```py\ndbDisconnect(db.conn)\n```", "```py\nlibrary(dplyr)\ndb.conn <- src_postgres(dbname = \"rdb\", host = \"hostname\",\n                        port = 5432, user = \"ruser\",\n                        password = \"rpassword\")\nsales.tb <- tbl(db.conn, \"sales\")\ntrans_items.tb <- tbl(db.conn, \"trans_items\")\n```", "```py\njoined.tb <- inner_join(sales.tb, trans_items.tb, by = \"trans_id\")\ncust.items <- group_by(joined.tb, cust_id)\ncust.spending <- summarize(cust.items, spending = sum(price))\ncust.spending <- arrange(cust.spending, desc(spending))\ncust.spending <- select(cust.spending, cust_id, spending)\n```", "```py\nclass(cust.spending)\n## [1] \"tbl_postgres\" \"tbl_sql\"      \"tbl\"\n```", "```py\ncust.spending$query\n## <Query> SELECT \"cust_id\" AS \"cust_id\", \"spending\" AS \"spending\"\n## FROM (SELECT \"cust_id\", SUM(\"price\") AS \"spending\"\n## FROM (SELECT \"row.names\" AS \"row.names.x\", \"trans_id\" AS\n## \"trans_id\", \"cust_id\" AS \"cust_id\", \"store_id\" AS \"store_id\"\n## FROM \"sales\") AS \"nsthygziij\"\n##\n## INNER JOIN \n##\n## (SELECT \"row.names\" AS \"row.names.y\", \"trans_id\" AS \"trans_id\",\n## \"item_id\" AS \"item_id\", \"price\" AS \"price\"\n## FROM \"trans_items\") AS \"cuwpqadrgf\"\n##\n## USING (\"trans_id\")\n## GROUP BY \"cust_id\") AS \"_W8\"\n## ORDER BY \"spending\" DESC\n## <PostgreSQLConnection:(11726,2)> \n```", "```py\ncusts.by.spending <- collect(cust.spending)\n```", "```py\ntop.custs <- head(cust.spending, 10L)\n```", "```py\ntop.custs <-\n    sales.tb %>% inner_join(trans_items.tb, by = \"trans_id\") %>%\n    group_by(cust_id) %>%\n    summarize(spending = sum(price)) %>%\n    arrange(desc(spending)) %>%\n    select(cust_id, spending) %>%\n    head(10L)\n```", "```py\nlibrary(PivotalR)\ndb.conn <- db.connect(host = \"hostname\", port = 5432,\n                      dbname = \"rdb\", user = \"ruser\",\n                      password = \"rpassword\")\n```", "```py\nsales.tb <- db.data.frame(\"sales\", db.conn)\ntrans_items.tb <- db.data.frame(\"trans_items\", db.conn)\n```", "```py\ndim(sales.tb)\n## [1] 1e+05 4e+00\nnames(sales.tb)\n## [1] \"row.names\" \"trans_id\"  \"cust_id\"   \"store_id\" \nlookat(count(sales.tb$cust_id))\n## [1] 1e+05\nlookat(min(trans_items.tb$price))\n## [1] 0.009554177\nlookat(max(trans_items.tb$price))\n## [1] 121.3909\n```", "```py\ncontent(max(trans_items.tb$price))\n## [1] \"select max(\\\"price\\\") as \\\"price_max\\\"\n## from \\\"trans_items\\\"\"\n```", "```py\ntrans_items.tb$foreign_price <- trans_items.tb$price * 1.25\ncontent(trans_items.tb)\n## [1] \"select \\\"row.names\\\" as \\\"row.names\\\", \\\"trans_id\\\" as\n## \\\"trans_id\\\", \\\"item_id\\\" as \\\"item_id\\\", \\\"price\\\" as\n## \\\"price\\\", (\\\"price\\\") * (1.25) as \\\"foreign_price\\\" from \n## \\\"trans_items\\\"\"\n```", "```py\ntrans <- by(trans_items.tb[\"price\"], trans_items.tb$trans_id, sum)\nsales.value <- merge(sales.tb[c(\"trans_id\", \"cust_id\",\n                                \"store_id\")],\n                     trans, by = \"trans_id\")\ncust.sales <- by(sales.value, sales.value$cust_id,\n                 function(x) {\n                     trans_count <- count(x$trans_id)\n                     total_spend <- sum(x$price_sum)\n                     stores_visited <- count(x$store_id)\n                     cbind(trans_count, total_spend,\n                           stores_visited)\n                 })\nnames(cust.sales) <- c(\"cust_id\", \"trans_count\", \"total_spend\",\n                       \"stores_visited\")\nlookat(cust.sales, 5)\n##   cust_id trans_count total_spend stores_visited\n## 1       1           9    44.73121              9\n## 2       2           7    41.90196              7\n## 3       3          13    87.37564             13\n## 4       4          11    58.34653             11\n## 5       5          15    95.09015             15\n```", "```py\ncust_sales.tb <- as.db.data.frame(cust.sales, \"cust_sales\")\n```", "```py\nlookat(min(cust_sales.tb$total_spend))\n## [1] 0.4961619\nlookat(max(cust_sales.tb$total_spend))\n## [1] 227.8077\nlookat(mean(cust_sales.tb$total_spend))\n## [1] 66.16597\nlookat(sd(cust_sales.tb$total_spend))\n## [1] 26.71887\n```", "```py\ndelete(cust_sales.tb)\n```", "```py\n$ yum install postgresql93-plpython\n```", "```py\n$ brew install postgresql --with-python\n```", "```py\ndb.drv <- PostgreSQL()\ndb.conn <- dbConnect(db.drv, host = \"hostname\",\n                     port = 5432, dbname = \"rdb\",\n                     user = \"ruser\",\n                     password = \"rpassword\")\n```", "```py\ndbGetQuery(\n    db.conn,\n    \"SELECT *\n    FROM madlib.assoc_rules(\n        0.001,         -- support\n        0.01,          -- confidence\n        'trans_id',    -- tid_col\n        'item_id',     -- item_col\n        'trans_items', -- input_table\n        'public',      -- output_schema\n        TRUE           -- verbose\n    );\")\n## INFO:  finished checking parameters\n## CONTEXT:  PL/Python function \"assoc_rules\"\n## INFO:  finished removing duplicates\n## CONTEXT:  PL/Python function \"assoc_rules\"\n## # Output truncated\n## INFO:  6 Total association rules found. Time: 0.00557494163513\n## CONTEXT:  PL/Python function \"assoc_rules\"\n##   output_schema output_table total_rules      total_time\n## 1        public  assoc_rules           6 00:01:21.860964\n```", "```py\ndbGetQuery(\n    db.conn,\n    'SELECT * FROM assoc_rules;')\n##   ruleid   pre  post support confidence     lift conviction\n## 1      1 {353} {656}   1e-04 0.02272727 5.516328   1.019040\n## 2      2 {656} {353}   1e-04 0.02427184 5.516328   1.020366\n## 3      3 {770} {420}   1e-04 0.02444988 6.022137   1.020901\n## 4      4 {420} {770}   1e-04 0.02463054 6.022137   1.021059\n## 5      5 {755} {473}   1e-04 0.02469136 6.203859   1.021236\n## 6      6 {473} {755}   1e-04 0.02512563 6.203859   1.021619\n```", "```py\n# Create a new database farm\n# (Replace the path with a location of your choice)\n$ monetdbd create /path/to/mydbfarm\n# Start the database server\n$ monetdbd start /path/to/mydbfarm\n# Create a new database within the farm\n$ monetdb create rdb\n# Release the new database from administration locks\n$ monetdb release rdb\n```", "```py\nlibrary(MonetDB.R)\ndb.drv <- MonetDB.R()\ndb.conn <- dbConnect(db.drv, host = \"hostname\",\n                     port = 50000, dbname = \"rdb\",\n                     user = \"monetdb\",\n                     password = \"monetdb\")\ndbWriteTable(db.conn, \"sales\", sales)\ndbWriteTable(db.conn, \"trans_items\", trans.items)\n```", "```py\nlibrary(microbenchmark)\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT store_id, SUM(price) as total_sales\n        FROM sales INNER JOIN trans_items USING (trans_id)\n        GROUP BY store_id;')\n}, times = 10)\n## Unit: milliseconds\n##       min       lq   median       uq      max neval\n##  112.1666 113.0484 113.9021 114.4349 114.7049    10\nmicrobenchmark({\n    res <- dbGetQuery(\n        db.conn,\n        'SELECT cust_id, SUM(price) as spending\n        FROM sales INNER JOIN trans_items USING (trans_id)\n        GROUP BY cust_id\n        ORDER BY spending DESC\n        LIMIT 10;')\n}, times = 10)\n## Unit: milliseconds\n##       min       lq  median       uq      max neval\n##  114.2376 115.4617 116.515 117.1967 118.4736    10\n```", "```py\nlibrary(scidb)\nscidbconnect(host = \"hostname\", port = 8080)\n```", "```py\nA <- as.scidb(matrix(rnorm(1200), 40, 30), name = \"A\")\nB <- as.scidb(matrix(rnorm(1200), 30, 40), name = \"B\")\n```", "```py\n# Matrix multiplication\nA %*% B\n# Transpose and addition / subtraction\nA + t(B)\n# Scalar operations\nA * 1.5\n```", "```py\nC <- matrix(rnorm(1200), 30, 40)\nA %*% C\n```", "```py\n# Filter only the positive elements of A, and materialize the\n# results into R\n(A > 0)[]\n```"]