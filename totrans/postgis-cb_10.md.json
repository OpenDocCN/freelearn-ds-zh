["```py\n      CREATE DATABASE chapter10;\n```", "```py\n      CREATE SCHEMA postgis;\n```", "```py\n               CREATE EXTENSION postgis WITH SCHEMA postgis;\n```", "```py\n      > psql -U me -d chapter10 \n      > chapter10=# SET search_path = public, postgis;\n```", "```py\n      ALTER DATABASE chapter10 SET search_path = public, postgis;\n```", "```py\n      > raster2pgsql -s 4322 -t 100x100 -I -F -C -Y \n      C:\\postgis_cookbook\\data\\chap5\n      \\PRISM\\    PRISM_tmin_provisional_4kmM2_201703_asc.asc \n      prism | psql -d chapter10 -U me\n```", "```py\n      > raster2pgsql -s 4322 -t 100x100 -I -F -C -Y \n      C\\:postgis_cookbook\\data\\chap5\n      \\PRISM\\PRISM_tmin_provisional_4kmM2_201703_asc.asc \n      prism | psql \"dbname=chapter10 options=--search_path=postgis\" me \n```", "```py\n ALTER TABLE postgis.prism ADD COLUMN month_year DATE;\n UPDATE postgis.prism SET month_year = ( \n SUBSTRING(split_part(filename, '_', 5), 0, 5) || '-' || \n SUBSTRING(split_part(filename, '_', 5), 5, 4) || '-01' \n ) :: DATE;\n```", "```py\n      > shp2pgsql -s 3310 -I\n      C\\:postgis_cookbook\\data\\chap5\\SFPoly\\sfpoly.shp sfpoly |\n      psql -d chapter10 -U me\n```", "```py\n      > shp2pgsql -s 3310 -I \n      C\\:postgis_cookbook\\data\\chap5\\SFPoly\\sfpoly.shp \n      sfpoly | psql \"dbname=chapter10 options=--search_path=postgis\" me\n```", "```py\n      > mkdir C:\\postgis_cookbook\\data\\chap10\n      > cp -r /path/to/book_dataset/chap10 \n      C\\:postgis_cookbook\\data\\chap10\n```", "```py\n      > shp2pgsql -s 4269 -I \n      C\\:postgis_cookbook\\data\\chap10\\CAEmergencyFacilities\\CA_police.shp \n      capolice | psql -d chapter10 -U me\n```", "```py\n      > shp2pgsql -s 4269 C\\:postgis_cookbook\\data\\chap10\n      \\CAEmergencyFacilities\\CA_schools.shp \n      caschools | psql -d chapter10 -U me\n```", "```py\n      shp2pgsql -s 4269 -I C\\:postgis_cookbook\\data\\chap10\n      \\CAEmergencyFacilities\\CA_schools.shp \n      caschools | psql \"dbname=chapter10 options=--search_path=postgis\" \n      me shp2pgsql -s 4269 -I \n      C\\:postgis_cookbook\\data\\chap10\\CAEmergencyFacilities\\CA_police.shp \n      capolice | psql \"dbname=chapter10 options=--search_path=postgis\" me\n\n```", "```py\n      CREATE ROLE group1 NOLOGIN;\n      CREATE ROLE group2 NOLOGIN;\n      CREATE ROLE user1 LOGIN PASSWORD 'pass1' IN ROLE group1;\n      CREATE ROLE user2 LOGIN PASSWORD 'pass2' IN ROLE group1;\n      CREATE ROLE user3 LOGIN PASSWORD 'pass3' IN ROLE group2;\n```", "```py\n      GRANT CONNECT, TEMP ON DATABASE chapter10 TO GROUP group1;\n      GRANT ALL ON DATABASE chapter10 TO GROUP group2;\n```", "```py\n      > psql -U me -d chapter10\n```", "```py\n      group1=Tc/postgres\n      group2=CTc/postgres\n```", "```py\n      =Tc/postgres\n```", "```py\n      REVOKE ALL ON DATABASE chapter10 FROM public;\n```", "```py\n      GRANT USAGE ON SCHEMA postgis TO group1, group2;\n```", "```py\n      GRANT USAGE ON SCHEMA postgis TO public;\n```", "```py\n      REVOKE USAGE ON SCHEMA postgis FROM public;\n```", "```py\n      GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA postgis TO public;\n```", "```py\n      REVOKE ALL ON FUNCTION postgis_full_version() FROM public;\n```", "```py\n      REVOKE ALL ON FUNCTION postgis.postgis_full_version() FROM public;\n```", "```py\n      GRANT SELECT, REFERENCES, TRIGGER \n      ON ALL TABLES IN SCHEMA postgis TO public;\n```", "```py\n      GRANT INSERT ON spatial_ref_sys TO group1;\n```", "```py\n      GRANT UPDATE, DELETE ON spatial_ref_sys TO user2;\n```", "```py\n      > psql -d chapter10 -u user3\n```", "```py\n      chapter10=# SELECT count(*) FROM spatial_ref_sys;\n```", "```py\n      chapter10=# INSERT INTO spatial_ref_sys \n      VALUES (99999, 'test', 99999, '', '');\n      ERROR:  permission denied for relation spatial_ref_sys\n```", "```py\n      chapter10=# UPDATE spatial_ref_sys SET srtext = 'Lorum ipsum';\n      ERROR:  permission denied for relation spatial_ref_sys\n```", "```py\n      chapter10=# SELECT postgis_full_version();\n      ERROR:  permission denied for function postgis_full_version\n```", "```py\n      > pg_dump -f chapter10.backup -F custom chapter10\n```", "```py\n      > pg_restore -f chapter10.sql chapter10.backup\n```", "```py\n      > pg_restore -f chapter10_public.sql -n public chapter10.backup\n```", "```py\n> psql -U me -d chapter10\nchapter10=# \\timing on\n```", "```py\n      SELECT schoolid FROM caschools sc JOIN sfpoly sf \n      ON ST_Intersects(sf.geom, ST_Transform(sc.geom, 3310));\n```", "```py\n      Time: 136.643 ms\n      Time: 140.863 ms\n      Time: 135.859 ms\n```", "```py\n      EXPLAIN ANALYZE\n      SELECT schoolid FROM caschools sc JOIN sfpoly sf \n      ON ST_Intersects(sf.geom, ST_Transform(sc.geom, 3310));\n```", "```py\n      CREATE INDEX caschools_geom_idx ON caschools\n    USING gist (geom);\n```", "```py\n      Time: 95.807 ms\n      Time: 101.626 ms\n      Time: 103.748 ms\n```", "```py\n CREATE INDEX caschools_geom_3310_idx ON caschools\n USING gist (ST_Transform(geom, 3310)); \n```", "```py\n      Time: 63.359 ms\n      Time: 64.611 ms\n      Time: 56.485 ms\n```", "```py\n> psql -U me -d chapter10\nchapter10=# \\timing on\n```", "```py\n      SELECT schoolid FROM caschools sc JOIN sfpoly sf \n      ON ST_Intersects(sf.geom, ST_Transform(sc.geom, 3310));\n```", "```py\n      Time: 80.746 ms\n      Time: 80.172 ms\n      Time: 80.004 ms\n```", "```py\n      CLUSTER caschools USING caschools_geom_3310_idx;\n```", "```py\n      Time: 57.880 ms\n      Time: 55.939 ms\n      Time: 53.107 ms\n```", "```py\n      SELECT\n        di.school,\n        police_address,\n        distance\n      FROM ( -- for each school, get the minimum distance to a \n            -- police station\n        SELECT\n          gid,\n          school,\n          min(distance) AS distance\n        FROM ( -- get distance between every school and every police \n               -- station in San Francisco\n          SELECT\n            sc.gid,\n            sc.name AS school,\n            po.address AS police_address,\n            ST_Distance(po.geom_3310, sc.geom_3310) AS distance\n          FROM ( -- get schools in San Francisco\n            SELECT\n              ca.gid,\n              ca.name,\n              ST_Transform(ca.geom, 3310) AS geom_3310\n            FROM sfpoly sf\n            JOIN caschools ca\n              ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n          ) sc\n          CROSS JOIN ( -- get police stations in San Francisco\n            SELECT\n              ca.address,\n              ST_Transform(ca.geom, 3310) AS geom_3310\n            FROM sfpoly sf\n            JOIN capolice ca\n              ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n    ) po ORDER BY 1, 2, 4\n        ) scpo\n        GROUP BY 1, 2\n        ORDER BY 2\n    ) di JOIN ( -- for each school, collect the police station \n               -- addresses ordered by distance\n      SELECT\n        gid,\n        school,\n        (array_agg(police_address))[1] AS police_address\n      FROM (-- get distance between every school and \n            every police station in San Francisco\n        SELECT\n          sc.gid,\n          sc.name AS school,\n          po.address AS police_address,\n          ST_Distance(po.geom_3310, sc.geom_3310) AS distance\n        FROM ( -- get schools in San Francisco\n          SELECT\n            ca.gid,\n            ca.name,\n            ST_Transform(ca.geom, 3310) AS geom_3310\n          FROM sfpoly sf\n          JOIN caschools ca\n            ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n        ) sc\n        CROSS JOIN ( -- get police stations in San Francisco\n          SELECT\n            ca.address,\n            ST_Transform(ca.geom, 3310) AS geom_3310\n    FROM sfpoly sf JOIN capolice ca \n          ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n        ) po\n        ORDER BY 1, 2, 4\n      ) scpo\n      GROUP BY 1, 2\n      ORDER BY 2\n      ) po\n        ON di.gid = po.gid\n      ORDER BY di.school;\n\n```", "```py\n      Time: 5076.363 ms\n      Time: 4974.282 ms\n      Time: 5027.721 ms\n```", "```py\n      WITH scpo AS ( -- get distance between every school and every \n                    -- police station in San Francisco\n      SELECT\n        sc.gid,\n        sc.name AS school,\n        po.address AS police_address,\n        ST_Distance(po.geom_3310, sc.geom_3310) AS distance\n      FROM ( -- get schools in San Francisco\n        SELECT\n          ca.*,\n          ST_Transform(ca.geom, 3310) AS geom_3310\n        FROM sfpoly sf\n        JOIN caschools ca\n          ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n      ) sc\n      CROSS JOIN ( -- get police stations in San Francisco\n        SELECT\n          ca.*,\n          ST_Transform(ca.geom, 3310) AS geom_3310\n        FROM sfpoly sf\n        JOIN capolice ca\n          ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n      ) po\n      ORDER BY 1, 2, 4\n      )\n\n      SELECT\n        di.school,\n        police_address,\n        distance\n      FROM ( -- for each school, get the minimum distance to a \n             -- police station\n        SELECT\n          gid,\n          school,\n          min(distance) AS distance\n        FROM scpo\n        GROUP BY 1, 2\n        ORDER BY 2\n      ) di\n      JOIN ( -- for each school, collect the police station \n             -- addresses ordered by distance\n        SELECT\n          gid,\n          school,\n          (array_agg(police_address))[1] AS police_address\n        FROM scpo\n        GROUP BY 1, 2\n        ORDER BY 2\n      ) po\n        ON di.gid = po.gid\n      ORDER BY 1;\n```", "```py\n      Time: 2803.923 ms\n      Time: 2798.105 ms\n      Time: 2796.481 ms\n```", "```py\n      WITH scpo AS ( -- get distance between every school and every\n                     -- police station in San Francisco\n        SELECT\n          sc.name AS school,\n          po.address AS police_address,\n          ST_Distance(po.geom_3310, sc.geom_3310) AS distance\n        FROM ( -- get schools in San Francisco\n          SELECT\n            ca.name,\n            ST_Transform(ca.geom, 3310) AS geom_3310\n          FROM sfpoly sf\n          JOIN caschools ca\n            ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n        ) sc\n        CROSS JOIN ( -- get police stations in San Francisco\n          SELECT\n            ca.address,\n            ST_Transform(ca.geom, 3310) AS geom_3310\n          FROM sfpoly sf\n          JOIN capolice ca\n            ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n        ) po\n        ORDER BY 1, 3, 2\n      )\n      SELECT\n        DISTINCT school,\n        first_value(police_address) \n          OVER (PARTITION BY school ORDER BY distance),\n        first_value(distance) \n          OVER (PARTITION BY school ORDER BY distance)\n      FROM scpo\n      ORDER BY 1;\n```", "```py\n      Time: 1261.473 ms\n      Time: 1217.843 ms\n      Time: 1215.086 ms\n```", "```py\n      ...\n\n      ->  Nested Loop  (cost=0.15..311.48 rows=1 width=48) \n          (actual time=15.047..1186.907 rows=7956 loops=1)\n          Output: ca.name, ca_1.address, \n          st_distance(st_transform(ca_1.geom, 3310), \n          st_transform(ca.geom, 3310))\n```", "```py\n      WITH sc AS ( -- get schools in San Francisco\n        SELECT\n          ca.gid,\n          ca.name,\n          ca.geom\n        FROM sfpoly sf\n        JOIN caschools ca\n          ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n      ), po AS ( -- get police stations in San Francisco\n        SELECT\n          ca.gid,\n          ca.address,\n          ca.geom\n        FROM sfpoly sf\n        JOIN capolice ca\n          ON ST_Intersects(sf.geom, ST_Transform(ca.geom, 3310))\n      )\n      SELECT\n        school,\n        police_address,\n        ST_Distance(ST_Transform(school_geom, 3310), \n        ST_Transform(police_geom, 3310)) AS distance\n      FROM ( -- for each school, number and order the police\n             -- stations by how close each station is to the school\n        SELECT\n          ROW_NUMBER() OVER (\n            PARTITION BY sc.gid ORDER BY sc.geom <-> po.geom\n          ) AS r,\n          sc.name AS school,\n          sc.geom AS school_geom,\n          po.address AS police_address,\n          po.geom AS police_geom\n        FROM sc\n        CROSS JOIN po\n      ) scpo\n      WHERE r < 2\n      ORDER BY 1;\n```", "```py\n      Time: 83.002 ms\n      Time: 82.586 ms\n      Time: 83.327 ms\n```", "```py\n      > pg_dump -U me -f chapter10.backup -F custom chapter10\n```", "```py\n      > psql -d postgres -U me\n      postgres=# CREATE DATABASE new10;\n```", "```py\n      postgres=# \\c new10\n      new10=# CREATE SCHEMA postgis;\n```", "```py\n      new10=# CREATE EXTENSION postgis WITH SCHEMA postgis;\n```", "```py\n      new10=# ALTER DATABASE new10 SET search_path = public, postgis;\n```", "```py\n      > pg_restore -U me -d new10 --schema=public chapter10.backup\n```", "```py\n      pg_restore: [archiver (db)] Error while PROCESSING TOC:\n      pg_restore: [archiver (db)] Error from TOC entry 3781; 03496229 \n                  TABLE DATA prism postgres\n      pg_restore: [archiver (db)] COPY failed for table \"prism\": \n      ERROR:  function st_bandmetadata(postgis.raster, integer[]) \n              does not exist\n      LINE 1:  SELECT array_agg(pixeltype)::text[] \n               FROM st_bandmetadata($1...\n```", "```py\n      pg_restore -f chapter10.sql --schema=public chapter10.backup\n```", "```py\n      SET search_path = public, pg_catalog;\n```", "```py\n      SET search_path = public, postgis, pg_catalog;\n```", "```py\n      > psql -U me -d new10 -f chapter10.sql  \n```", "```py\n      > mkdir postgis_cookbook/db\n      > mkdir postgis_cookbook/db/primary\n      > mkdir postgis_cookbook/db/standby\n```", "```py\n      > cd postgis_cookbook/db\n      > initdb --encoding=utf8 --locale=en_US.utf-8 -U me -D primary\n      > initdb --encoding=utf8 --locale=en_US.utf-8 -U me -D standby\n```", "```py\n > mkdir postgis_cookbook/db/primary/archive\n > mkdir postgis_cookbook/db/standby/archive\n```", "```py\n      port = 5433\n      wal_level = hot_standby \n      max_wal_senders = 5\n      wal_keep_segments = 32\n      archive_mode = on\n      archive_command = 'copy \"%p\" \n      \"C:\\\\postgis_cookbook\\\\db\\\\primary\\\\archive\\\\%f\"' # for Windows\n```", "```py\n      archive_command = 'copy \"%p\" \"archive\\\\%f\" \"%p\"'\n```", "```py\n      archive_command = 'cp %p archive\\/%f'\n```", "```py\n      > pg_ctl start -D primary -l primary\\postgres.log\n```", "```py\n      > notepad exclude.txt\n```", "```py\n      postmaster.pid\n      pg_xlog\n```", "```py\n      > psql -p 5433 -U me -c \"SELECT pg_start_backup('base_backup', true)\"\n      > xcopy primary\\* standby\\ /e /exclude:primary\\exclude.txt\n      > psql -p 5433 -U me -c \"SELECT pg_stop_backup()\"\n```", "```py\n      port = 5434\n      hot_standby = on\n      archive_command = 'copy \"%p\" \n      \"C:\\\\postgis_cookbook\\\\db\\\\standby\\\\archive\\\\%f\"' # for Windows\n```", "```py\n      archive_command = 'copy \".\\\\archive\\\\%f\" \"%p\"'\n```", "```py\n      archive_command = 'cp %p archive\\/%f'\n```", "```py\n      > notepad standby\\recovery.conf\n```", "```py\n      > nano standby\\recovery.conf\n```", "```py\n      standby_mode = 'on'\n      primary_conninfo = 'port=5433 user=me'\n      restore_command = 'copy \n      \"C:\\\\postgis_cookbook\\\\db\\\\standby\\\\archive\\\\%f\" \"%p\"'\n```", "```py\n      restore_command = 'copy \".\\\\archive\\\\%f\" \"%p\"'\n```", "```py\n      restore_command = 'cp %p \\archive\\/%f\"'\n```", "```py\n      > pg_ctl start -U me -D standby -l standby\\postgres.log\n```", "```py\n      > psql -p 5433 -U me\n      postgres=# CREATE DATABASE test;\n      postgres=# \\c test\n      test=# CREATE TABLE test AS SELECT 1 AS id, 'one'::text AS value;\n```", "```py\n      > psql -p 5434 -U me\n```", "```py\n      postgres=# \\l  \n```", "```py\n      postgres=# \\c test  \n```", "```py\n > psql -d postgis_cookbook -U me\n```", "```py\n postgis_cookbook=# CREATE SCHEMA chp10;\n```", "```py\n postgis_cookbook =# CREATE TABLE chp10.hotspots_dist (id serial \n      PRIMARY KEY, the_geom public.geometry(Point,4326));\n```", "```py\n postgis_cookbook=# \\q\n```", "```py\n > psql -U me\n```", "```py\n postgres=# CREATE DATABASE quad_NW;\n CREATE DATABASE quad_NE;\n CREATE DATABASE quad_SW;\n CREATE DATABASE quad_SE;\n postgres=# \\c quad_NW;\n quad_NW =# CREAT EXTENSION postgis;\n quad_NW =# CREATE TABLE hotspots_quad_NW (\n id serial PRIMARY KEY, \n the_geom public.geometry(Point,4326)\n );\n quad_NW =# \\c quad_NE;\n quad_NE =# CREAT EXTENSION postgis;\n quad_NE =# CREATE TABLE hotspots_quad_NE (\n id serial PRIMARY KEY, \n the_geom public.geometry(Point,4326)\n );\n quad_NW =# \\c quad_SW;\n quad_SW =# CREAT EXTENSION postgis;\n quad_SW =# CREATE TABLE hotspots_quad_SW (\n id serial PRIMARY KEY, \n the_geom public.geometry(Point,4326)\n );\n quad_SW =# \\c quad_SE;\n quad_SE =# CREAT EXTENSION postgis;\n quad_SE =# CREATE TABLE hotspots_quad_SE (\n id serial PRIMARY KEY, \n the_geom public.geometry(Point,4326)\n );\n quad_SE =# \\q\n```", "```py\n        <OGRVRTDataSource> \n          <OGRVRTLayer name=\"Global_24h\"> \n            <SrcDataSource>Global_24h.csv</SrcDataSource> \n            <GeometryType>wkbPoint</GeometryType> \n            <LayerSRS>EPSG:4326</LayerSRS> \n            <GeometryField encoding=\"PointFromColumns\" \n             x=\"longitude\" y=\"latitude\"/> \n          </OGRVRTLayer> \n        </OGRVRTDataSource> \n```", "```py\n      $ ogr2ogr -f PostgreSQL PG:\"dbname='postgis_cookbook' user='me' \n      password='mypassword'\" -lco SCHEMA=chp10 global_24h.vrt \n      -lco OVERWRITE=YES -lco GEOMETRY_NAME=the_geom -nln hotspots\n```", "```py\n      postgis_cookbook =# CREATE EXTENSION postgres_fdw;\n```", "```py\n      postgis_cookbook =# CREATE SERVER quad_NW \n        FOREIGN DATA WRAPPER postgres_fdw OPTIONS \n        (dbname 'quad_NW', host 'localhost', port '5432');\n      CREATE SERVER quad_SW FOREIGN DATA WRAPPER postgres_fdw OPTIONS \n        (dbname 'quad_SW', host 'localhost', port '5432');\n      CREATE SERVER quad_NE FOREIGN DATA WRAPPER postgres_fdw OPTIONS \n        (dbname 'quad_NE', host 'localhost', port '5432');\n      CREATE SERVER quad_SE FOREIGN DATA WRAPPER postgres_fdw OPTIONS \n        (dbname 'quad_SE', host 'localhost', port '5432');\n```", "```py\n      postgis_cookbook =# CREATE USER MAPPING FOR POSTGRES SERVER quad_NW \n        OPTIONS (user 'remoteme1', password 'myPassremote1');\n      CREATE USER MAPPING FOR POSTGRES SERVER quad_SW \n        OPTIONS (user 'remoteme2', password 'myPassremote2');\n      CREATE USER MAPPING FOR POSTGRES SERVER quad_NE \n        OPTIONS (user 'remoteme3', password 'myPassremote3');\n      CREATE USER MAPPING FOR POSTGRES SERVER quad_SE \n        OPTIONS (user 'remoteme4', password 'myPassremote4');\n\n```", "```py\n    postgis_cookbook =# CREATE FOREIGN TABLE hotspots_quad_NW () \n      INHERITS (chp10.hotspots_dist) SERVER quad_NW \n      OPTIONS (table_name 'hotspots_quad_sw');\n    CREATE FOREIGN TABLE hotspots_quad_SW () INHERITS (chp10.hotspots_dist) \n      SERVER quad_SW OPTIONS (table_name 'hotspots_quad_sw');\n    CREATE FOREIGN TABLE hotspots_quad_NE () INHERITS (chp10.hotspots_dist) \n      SERVER quad_NE OPTIONS (table_name 'hotspots_quad_ne');\n    CREATE FOREIGN TABLE hotspots_quad_SE () INHERITS (chp10.hotspots_dist) \n      SERVER quad_SE OPTIONS (table_name 'hotspots_quad_se');\n\n```", "```py\n postgis_cookbook=# CREATE OR REPLACE \n      FUNCTION __trigger_users_before_insert() RETURNS trigger AS $__$\n DECLARE\n angle integer;\n BEGIN\n EXECUTE $$ select (st_azimuth(ST_geomfromtext('Point(0 0)',4326), \n         $1)\n /(2*PI()))*360 $$ INTO angle\n USING NEW.the_geom;\n IF (angle >= 0 AND angle<90) THEN\n EXECUTE $$\n INSERT INTO hotspots_quad_ne (the_geom) VALUES ($1)\n $$ USING\n NEW.the_geom;\n END IF;\n IF (angle >= 90 AND angle <180) THEN\n EXECUTE $$ INSERT INTO hotspots_quad_NW (the_geom) VALUES ($1)\n $$ USING NEW.the_geom;\n END IF;\n IF (angle >= 180 AND angle <270) THEN\n EXECUTE $$ INSERT INTO hotspots_quad_SW (the_geom) VALUES ($1)\n $$ USING NEW.the_geom;\n END IF;\n IF (angle >= 270 AND angle <360) THEN\n EXECUTE $$ INSERT INTO hotspots_quad_SE (the_geom) VALUES ($1)\n $$ USING NEW.the_geom;\n END IF;\n RETURN null;\n END;\n $__$ LANGUAGE plpgsql;\n CREATE TRIGGER users_before_insert \n BEFORE INSERT ON chp10.hotspots_dist \n FOR EACH ROW EXECUTE PROCEDURE __trigger_users_before_insert();\n```", "```py\n postgis_cookbook=# INSERT INTO CHP10.hotspots_dist (the_geom)\n        VALUES (0, st_geomfromtext('POINT (10 10)',4326));\n INSERT INTO CHP10.hotspots_dist (the_geom) \n        VALUES ( st_geomfromtext('POINT (-10 10)',4326));\n INSERT INTO CHP10.hotspots_dist (the_geom) \n        VALUES ( st_geomfromtext('POINT (-10 -10)',4326));\n```", "```py\n postgis_cookbook=# SELECT ST_ASTEXT(the_geom) \n      FROM CHP10.hotspots_dist;\n```", "```py\n postgis_cookbook=# SELECT ST_ASTEXT(the_geom) FROM hotspots_quad_ne;\n```", "```py\n postgis_cookbook=# insert into CHP10.hotspots_dist\n        (the_geom, quadrant)\n select the_geom, 0 as geom from chp10.hotspots;\n```", "```py\n postgis_cookbook=# SELECT ST_ASTEXT(the_geom) \n      FROM CHP10.hotspots_dist;\n```", "```py\n postgis_cookbook=# SELECT ST_ASTEXT(the_geom) FROM hotspots_quad_ne;\n```", "```py\n$ docker pull shongololo/postgis\n```", "```py\n$ docker run --name parallel -p 5433:5432 -v <SHP_PATH>:/data shongololo/postgis\n```", "```py\n$ docker exec -it parallel /bin/bash\nroot@d842288536c9:/# psql -U postgres\npsql (10.1)\nType \"help\" for help.\npostgres=#\n```", "```py\n root@d842288536c9:/# psql -U postgres\n psql (10.1)\n Type \"help\" for help.\n postgres=# CREATE USER me WITH PASSWORD 'me';\n CREATE ROLE\n postgres=# ALTER USER me WITH SUPERUSER;\n ALTER ROLE\n```", "```py\n root@d842288536c9:/# PGPASSWORD=me psql -U me -d postgres\n postgres=# CREATE DATABASE \"postgis-cookbook\";\n CREATE DATABASE\n postgres=# \\c postgis-cookbook\n```", "```py\n postgis-cookbook=# CREATE SCHEMA chp10;\n CREATE SCHEMA\n postgis-cookbook=# CREATE EXTENSION postgis;\n CREATE EXTENSION\n```", "```py\n root@d842288536c9:/# /usr/lib/postgresql/10/bin/shp2pgsql -s 3734 \n      -W latin1 /data/gis.osm_buildings_a_free_1.shp chp10.buildings | \n      PGPASSWORD=me psql -U me -h localhost -p 5432 -d postgis-cookbook\n```", "```py\n $ shp2pgsql -s 3734 -W latin1 <SHP_PATH>\n      /gis.osm_buildings_a_free_1.shp chp10.buildings | PGPASSWORD=me \n      psql -U me -h localhost -p 5433 -d postgis-cookbook\n```", "```py\n postgis-cookbook=# EXPLAIN ANALYZE SELECT Sum(ST_Area(geom)) \n      FROM chp10.buildings;\n```", "```py\n Aggregate (cost=35490.10..35490.11 rows=1 width=8) \n        (actual time=319.299..319.2 99 rows=1 loops=1)\n -> Seq Scan on buildings (cost=0.00..19776.16 rows=571416 width=142) \n        (actual time=0.017..68.961 rows=571416 loops=1)\n Planning time: 0.088 ms\n Execution time: 319.358 ms\n (4 rows)\n```", "```py\n Aggregate (cost=35490.10..35490.11 rows=1 width=8) \n        (actual time=319.299..319.299 rows=1 loops=1)\n -> Seq Scan on buildings (cost=0.00..19776.16 rows=571416 width=142) \n        (actual time=0.017..68.961 rows=571416 loops=1)\n Planning time: 0.088 ms\n Execution time: 319.358 ms\n (4 rows)\n```", "```py\n Finalize Aggregate (cost=21974.61..21974.62 rows=1 width=8) \n        (actual time=232.081..232.081 rows=1 loops=1)\n -> Gather (cost=21974.30..21974.61 rows=3 width=8) \n        (actual time=232.074..232.078 rows=4 loops=1)\n Workers Planned: 3 \n Workers Launched: 3 \n -> Partial Aggregate (cost=20974.30..20974.31 rows=1 width=8) \n        (actual time=151.785..151.785 rows=1 loops=4)\n -> Parallel Seq Scan on buildings \n        (cost=0.00..15905.28 rows=184328 width=142) \n        (actual time=0.017..58.480 rows=142854 loops=4)\n Planning time: 0.086 ms\n Execution time: 239.393 ms\n (8 rows)\n```", "```py\n postgis-cookbook=# EXPLAIN ANALYZE SELECT * FROM chp10.buildings \n      WHERE ST_Area(geom) > 10000;\n```", "```py\n Seq Scan on buildings (cost=0.00..35490.10 rows=190472 width=190) \n        (actual time=270.904..270.904 rows=0 loops=1)\n Filter: (st_area(geom) > '10000'::double precision)\n Rows Removed by Filter: 571416\n Planning time: 0.279 ms\n Execution time: 270.937 ms\n (5 rows)\n```", "```py\n postgis-cookbook=# ALTER FUNCTION ST_Area(geometry) COST 100;\n postgis-cookbook=# EXPLAIN ANALYZE SELECT * FROM chp10.buildings \n WHERE ST_Area(geom) > 10000;\n```", "```py\n Gather (cost=1000.00..82495.23 rows=190472 width=190) \n        (actual time=189.748..189.748 rows=0 loops=1)\n Workers Planned: 3\n Workers Launched: 3\n -> Parallel Seq Scan on buildings \n        (cost=0.00..62448.03 rows=61443 width=190)\n        (actual time=130.117..130.117 rows=0 loops=4)\n Filter: (st_area(geom) > '10000'::double precision)\n Rows Removed by Filter: 142854\n Planning time: 0.165 ms\n Execution time: 190.300 ms\n (8 rows)\n```", "```py\n postgis-cookbook=# DROP TABLE IF EXISTS chp10.pts_10;\n postgis-cookbook=# CREATE TABLE chp10.pts_10 AS\n\n SELECT (ST_Dump(ST_GeneratePoints(geom, 10))).geom\n        ::Geometry(point, 3734) AS geom,\n gid, osm_id, code, fclass, name, type FROM chp10.buildings;\n postgis-cookbook=# CREATE INDEX pts_10_gix\n ON chp10.pts_10 USING GIST (geom);\n```", "```py\n Nested Loop (cost=0.41..89034428.58 rows=15293156466 width=269)\n -> Seq Scan on buildings (cost=0.00..19776.16 rows=571416 width=190)\n -> Index Scan using pts_10_gix on pts_10 \n         (cost=0.41..153.88 rows=190 width=79)\n Index Cond: (buildings.geom && geom)\n Filter: _st_intersects(buildings.geom, geom)\n```", "```py\n Nested Loop (cost=0.41..89034428.58 rows=15293156466 width=269)\n -> Seq Scan on buildings (cost=0.00..19776.16 rows=571416 width=190)\n -> Index Scan using pts_10_gix on pts_10 \n         (cost=0.41..153.88 rows=190 width=79)\n Index Cond: (buildings.geom && geom)\n Filter: _st_intersects(buildings.geom, geom)\n```"]