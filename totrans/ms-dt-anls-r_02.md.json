["```py\n> str(read.csv('http://opengeocode.org/download/CCurls.txt'))\n'data.frame':  249 obs. of  5 variables:\n $ ISO.3166.1.A2                  : Factor w/ 248 levels \"AD\" ...\n $ Government.URL                 : Factor w/ 232 levels \"\"  ...\n $ National.Statistics.Census..URL: Factor w/ 213 levels \"\"  ...\n $ Geological.Information.URL     : Factor w/ 116 levels \"\"  ...\n $ Post.Office.URL                : Factor w/ 156 levels \"\"  ...\n\n```", "```py\n> library(RCurl)\nLoading required package: bitops\n> url <- 'https://data.consumerfinance.gov/api/views/x94z-ydhh/rows.csv?accessType=DOWNLOAD'\n> df  <- read.csv(text = getURL(url))\n> str(df)\n'data.frame':  236251 obs. of  14 variables:\n $ Complaint.ID        : int  851391 851793 ...\n $ Product             : Factor w/ 8 levels ...\n $ Sub.product         : Factor w/ 28 levels ...\n $ Issue               : Factor w/ 71 levels \"Account opening ...\n $ Sub.issue           : Factor w/ 48 levels \"Account status\" ...\n $ State               : Factor w/ 63 levels \"\",\"AA\",\"AE\",,..\n $ ZIP.code            : int  14220 64119 ...\n $ Submitted.via       : Factor w/ 6 levels \"Email\",\"Fax\" ...\n $ Date.received       : Factor w/ 897 levels  ...\n $ Date.sent.to.company: Factor w/ 847 levels \"\",\"01/01/2013\" ...\n $ Company             : Factor w/ 1914 levels ...\n $ Company.response    : Factor w/ 8 levels \"Closed\" ...\n $ Timely.response.    : Factor w/ 2 levels \"No\",\"Yes\" ...\n $ Consumer.disputed.  : Factor w/ 3 levels \"\",\"No\",\"Yes\" ...\n> sort(table(df$Product))\n\n Money transfers         Consumer loan              Student loan \n 965                  6564                      7400 \n Debt collection      Credit reporting   Bank account or service \n 24907                 26119                     30744 \n Credit card              Mortgage \n 34848                104704\n\n```", "```py\n> library(rjson)\n> u <- 'http://data.consumerfinance.gov/api/views'\n> fromJSON(file = u)\n[[1]]\n[[1]]$id\n[1] \"25ei-6bcr\"\n\n[[1]]$name\n[1] \"Credit Card Complaints\"\n\n[[1]]$averageRating\n[1] 0\nâ€¦\n\n```", "```py\n> res <- fromJSON(file = paste0(u,'/25ei-6bcr/rows.json?max_rows=5'))\n> names(res)\n[1] \"meta\" \"data\"\n\n```", "```py\n> res <- res$data\n> class(res)\n[1] \"list\"\n\n```", "```py\n> df <- as.data.frame(t(sapply(res, function(x) unlist(x[-13]))))\n> str(df)\n'data.frame':  5 obs. of  18 variables:\n $ V1 : Factor w/ 5 levels \"16756\",\"16760\",..: 3 5 ...\n $ V2 : Factor w/ 5 levels \"F10882C0-23FC-4064-979C-07290645E64B\" ...\n $ V3 : Factor w/ 5 levels \"16756\",\"16760\",..: 3 5 ...\n $ V4 : Factor w/ 1 level \"1364270708\": 1 1 ...\n $ V5 : Factor w/ 1 level \"403250\": 1 1 ...\n $ V6 : Factor w/ 5 levels \"1364274327\",\"1364274358\",..: 5 4 ...\n $ V7 : Factor w/ 1 level \"546411\": 1 1 ...\n $ V8 : Factor w/ 1 level \"{\\n}\": 1 1 ...\n $ V9 : Factor w/ 5 levels \"2083\",\"2216\",..: 1 2 ...\n $ V10: Factor w/ 1 level \"Credit card\": 1 1 ...\n $ V11: Factor w/ 2 levels \"Referral\",\"Web\": 1 1 ...\n $ V12: Factor w/ 1 level \"2011-12-01T00:00:00\": 1 1 ...\n $ V13: Factor w/ 5 levels \"Application processing delay\",..: 5 1 ...\n $ V14: Factor w/ 3 levels \"2011-12-01T00:00:00\",..: 1 1 ...\n $ V15: Factor w/ 5 levels \"Amex\",\"Bank of America\",..: 2 5 ...\n $ V16: Factor w/ 1 level \"Closed without relief\": 1 1 ...\n $ V17: Factor w/ 1 level \"Yes\": 1 1 ...\n $ V18: Factor w/ 2 levels \"No\",\"Yes\": 1 1 ...\n\n```", "```py\n> library(plyr)\n> df <- ldply(res, function(x) unlist(x[-13]))\n\n```", "```py\n> names(df) <- sapply(res$meta$view$columns, `[`, 'name')[-13]\n\n```", "```py\n> library(XML)\n> doc <- xmlParse(paste0(u, '/25ei-6bcr/rows.xml?max_rows=5'))\n> df  <- xmlToDataFrame(nodes = getNodeSet(doc,\"//response/row/row\"))\n> str(df)\n'data.frame':  5 obs. of  11 variables:\n $ complaint_id        : Factor w/ 5 levels \"2083\",\"2216\",..: 1 2 ...\n $ product             : Factor w/ 1 level \"Credit card\": 1 1 ...\n $ submitted_via       : Factor w/ 2 levels \"Referral\",\"Web\": 1 1 ...\n $ date_recieved       : Factor w/ 1 level \"2011-12-01T00:00:00\" ...\n $ zip_code            : Factor w/ 1 level \"\": 1 1 ...\n $ issue               : Factor w/ 5 levels  ...\n $ date_sent_to_company: Factor w/ 3 levels \"2011-12-01T00:00:00\" ...\n $ company             : Factor w/ 5 levels \"Amex\" ....\n $ company_response    : Factor w/ 1 level \"Closed without relief\"...\n $ timely_response     : Factor w/ 1 level \"Yes\": 1 1 ...\n $ consumer_disputed   : Factor w/ 2 levels \"No\",\"Yes\": 1 1 ...\n\n```", "```py\n> is.number <- function(x)\n+     all(!is.na(suppressWarnings(as.numeric(as.character(x)))))\n> for (n in names(df))\n+     if (is.number(df[, n]))\n+         df[, n] <- as.numeric(as.character(df[, n]))\n\n```", "```py\n> doc <- getURL(paste0(u, '/25ei-6bcr/rows?max_rows=5'),\n+   httpheader = c(Accept = \"text/html\"))\n\n```", "```py\n> res <- readHTMLTable(doc)\n\n```", "```py\n> df <- res[[1]]\n> df <- readHTMLTable(doc, which = 1)\n\n```", "```py\n> res <- readHTMLTable('http://cran.r-project.org/Web/packages/available_packages_by_name.html')\n\n```", "```py\n> library(wordcloud)\nLoading required package: Rcpp\nLoading required package: RColorBrewer\n> wordcloud(res[[1]][, 2])\nLoading required package: tm\n\n```", "```py\n//h3[text()='CRAN packages:']/following-sibling::ul[1]/li\n\n```", "```py\n> page <- htmlParse(file = \n+   'http://cran.r-project.org/Web/views/WebTechnologies.html')\n> res  <- unlist(xpathApply(doc = page, path =\n+   \"//h3[text()='CRAN packages:']/following-sibling::ul[1]/li\",\n+   fun  = xmlValue))\n\n```", "```py\n> str(res)\n chr [1:118] \"acs\" \"alm\" \"anametrix\" \"AWS.tools\" \"bigml\" ...\n\n```", "```py\n> res <- xpathSApply(page, path =\n+ \"//h3[text()='CRAN packages:']/following-sibling::ul[1]/li\", \n+   fun  = xmlValue)\n\n```", "```py\n> xpathSApply(page,\n+   \"//h3[text()='CRAN packages:']/following-sibling::ul[1]/li/a\",\n+   xmlAttrs, 'href')\n\n```", "```py\n> library(RSocrata)\nLoading required package: httr\nLoading required package: RJSONIO\n\nAttaching package: 'RJSONIO'\n\nThe following objects are masked from 'package:rjson':\n\n fromJSON, toJSON\n\n```", "```py\n> df <- read.socrata(paste0(u, '/25ei-6bcr'))\n> str(df)\n'data.frame':  18894 obs. of  11 variables:\n $ Complaint.ID        : int  2240 2243 2260 2254 2259 2261 ...\n $ Product             : chr  \"Credit card\" \"Credit card\" ...\n $ Submitted.via       : chr  \"Web\" \"Referral\" \"Referral\" ...\n $ Date.received       : chr  \"12/01/2011\" \"12/01/2011\" ...\n $ ZIP.code            : chr  ...\n $ Issue               : chr  ...\n $ Date.sent.to.company: POSIXlt, format: \"2011-12-19\" ...\n $ Company             : chr  \"Citibank\" \"HSBC\" ...\n $ Company.response    : chr  \"Closed without relief\" ...\n $ Timely.response.    : chr  \"Yes\" \"Yes\" \"No\" \"Yes\" ...\n $ Consumer.disputed.  : chr  \"No\" \"No\" \"\" \"No\" ...\n\n```", "```py\n> library(quantmod)\nLoading required package: Defaults\nLoading required package: xts\nLoading required package: zoo\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n as.Date, as.Date.numeric\n\nLoading required package: TTR\nVersion 0.4-0 included new data defaults. See ?getSymbols.\n> tail(getSymbols('A', env = NULL))\n A.Open A.High A.Low A.Close A.Volume A.Adjusted\n2014-05-09  55.26  55.63 54.81   55.39  1287900      55.39\n2014-05-12  55.58  56.62 55.47   56.41  2042100      56.41\n2014-05-13  56.63  56.98 56.40   56.83  1465500      56.83\n2014-05-14  56.78  56.79 55.70   55.85  2590900      55.85\n2014-05-15  54.60  56.15 53.75   54.49  5740200      54.49\n2014-05-16  54.39  55.13 53.92   55.03  2405800      55.03\n\n```", "```py\n> getFX(\"USD/EUR\")\n[1] \"USDEUR\"\n> tail(USDEUR)\n USD.EUR\n2014-05-13  0.7267\n2014-05-14  0.7281\n2014-05-15  0.7293\n2014-05-16  0.7299\n2014-05-17  0.7295\n2014-05-18  0.7303\n\n```", "```py\n> methods(getSymbols)\n [1] getSymbols.csv    getSymbols.FRED   getSymbols.google\n [4] getSymbols.mysql  getSymbols.MySQL  getSymbols.oanda \n [7] getSymbols.rda    getSymbols.RData  getSymbols.SQLite\n[10] getSymbols.yahoo\n\n```", "```py\n> str(stockSymbols())\nFetching AMEX symbols...\nFetching NASDAQ symbols...\nFetching NYSE symbols...\n'data.frame':  6557 obs. of  8 variables:\n $ Symbol   : chr  \"AAMC\" \"AA-P\" \"AAU\" \"ACU\" ...\n $ Name     : chr  \"Altisource Asset Management Corp\" ...\n $ LastSale : num  841 88.8 1.3 16.4 15.9 ...\n $ MarketCap: num  1.88e+09 0.00 8.39e+07 5.28e+07 2.45e+07 ...\n $ IPOyear  : int  NA NA NA 1988 NA NA NA NA NA NA ...\n $ Sector   : chr  \"Finance\" \"Capital Goods\" ...\n $ Industry : chr  \"Real Estate\" \"Metal Fabrications\" ...\n $ Exchange : chr  \"AMEX\" \"AMEX\" \"AMEX\" \"AMEX\" ...\n\n```", "```py\n> library(Quandl)\n> Quandl('SEC/DIV_A')\n Date Dividend\n1 2013-12-27    0.132\n2 2013-09-27    0.120\n3 2013-06-28    0.120\n4 2013-03-28    0.120\n5 2012-12-27    0.100\n6 2012-09-28    0.100\n7 2012-06-29    0.100\n8 2012-03-30    0.100\n9 2006-11-01    2.057\nWarning message:\nIn Quandl(\"SEC/DIV_A\") :\n It would appear you aren't using an authentication token. Please visit http://www.quandl.com/help/r or your usage may be limited.\n\n```", "```py\n> attr(Quandl('SEC/DIV_A', meta = TRUE), 'meta')$frequency\n[1] \"quarterly\"\n\n```", "```py\n> library(devtools)\n> install_bitbucket('GTrendsR', 'persican', quiet = TRUE)\nInstalling bitbucket repo(s) GTrendsR/master from persican\nDownloading master.zip from https://bitbucket.org/persican/gtrendsr/get/master.zip\narguments 'minimized' and 'invisible' are for Windows only \n\n```", "```py\n> library(GTrendsR)\n\n```", "```py\n> conn <- gconnect('some Google username', 'some Google password')\n> df   <- gtrends(conn, query = 'how to install R')\n> tail(df$trend)\n start        end how.to.install.r\n601 2015-07-05 2015-07-11               86\n602 2015-07-12 2015-07-18               70\n603 2015-07-19 2015-07-25              100\n604 2015-07-26 2015-08-01               75\n605 2015-08-02 2015-08-08               73\n606 2015-08-09 2015-08-15               94 \n\n```", "```py\n> library(weatherData)\n> getWeatherForDate('London', start_date = Sys.Date()-7, end_date = Sys.Date())\nRetrieving from: http://www.wunderground.com/history/airport/London/2014/5/12/CustomHistory.html?dayend=19&monthend=5&yearend=2014&req_city=NA&req_state=NA&req_statename=NA&format=1 \nChecking Summarized Data Availability For London\nFound 8 records for 2014-05-12 to 2014-05-19\nData is Available for the interval.\nWill be fetching these Columns:\n[1] \"Date\"              \"Max_TemperatureC\"  \"Mean_TemperatureC\"\n[4] \"Min_TemperatureC\" \n Date Max_TemperatureC Mean_TemperatureC Min_TemperatureC\n1 2014-05-12               18                13                9\n2 2014-05-13               16                12                8\n3 2014-05-14               19                13                6\n4 2014-05-15               21                14                8\n5 2014-05-16               23                16                9\n6 2014-05-17               23                17               11\n7 2014-05-18               23                18               12\n8 2014-05-19               24                19               13\n\n```"]