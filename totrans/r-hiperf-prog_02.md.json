["```py\nsystem.time(runif(1e8))\n##  user  system elapsed \n## 2.969   0.166   3.138\n```", "```py\nsystem.time(runif(1e8))\n##  user  system elapsed \n## 2.963   0.160   3.128 \nsystem.time(runif(1e8))\n##  user  system elapsed \n## 2.971   0.162   3.136 \nsystem.time(runif(1e8))\n##  user  system elapsed \n## 2.944   0.161   3.106\n```", "```py\ninstall.packages(\"rbenchmark\")\nlibrary(rbenchmark)\n```", "```py\nbench1 <- benchmark(runif(1e8), replications=10)\nbench1\n##           test replications elapsed relative user.self\n## 1 runif(1e+08)           10   32.38        1    29.781\n##   sys.self user.child sys.child\n## 1    2.565          0         0\n```", "```py\nwithin(bench1, {\n       elapsed.mean <- elapsed/replications\n       user.self.mean <- user.self/replications\n       sys.self.mean <- sys.self/replications\n       })\n##           test replications elapsed relative user.self\n## 1 runif(1e+08)           10   32.38        1    29.781\n##   sys.self user.child sys.child sys.self.mean user.self.mean\n## 1    2.565          0         0        0.2565         2.9781\n##   elapsed.mean\n## 1        3.238\n```", "```py\nbenchmark(runif(1e8), replications=rep.int(1, 10))\n##            test replications elapsed relative user.self\n## 1  runif(1e+08)            1   3.162    1.011     2.971\n## 2  runif(1e+08)            1   3.145    1.005     2.951\n## 3  runif(1e+08)            1   3.141    1.004     2.949\n## 4  runif(1e+08)            1   3.128    1.000     2.937\n## 5  runif(1e+08)            1   3.261    1.043     3.021\n## 6  runif(1e+08)            1   3.207    1.025     2.993\n## 7  runif(1e+08)            1   3.274    1.047     3.035\n## 8  runif(1e+08)            1   3.174    1.015     2.966\n## 9  runif(1e+08)            1   3.172    1.014     2.970\n## 10 runif(1e+08)            1   3.230    1.033     3.004\n##    sys.self user.child sys.child\n## 1     0.187          0         0\n## 2     0.191          0         0\n## 3     0.189          0         0\n## 4     0.190          0         0\n## 5     0.228          0         0\n## 6     0.210          0         0\n## 7     0.230          0         0\n## 8     0.207          0         0\n## 9     0.201          0         0\n## 10    0.224          0         0\n```", "```py\ninstall.packages(\"microbenchmark\")\nlibrary(microbenchmark)\n```", "```py\nmicrobenchmark(runif(1e8), times=10)\n## Unit: seconds\n##          expr      min       lq  median       uq      max\n##  runif(1e+08) 3.170571 3.193331 3.25089 3.299966 3.314355\n##  neval\n##     10\n```", "```py\n# Compute sample variance of numeric vector x\nsampvar <- function(x) {\n    # Compute sum of vector x\n    my.sum <- function(x) {\n        sum <- 0\n        for (i in x) {\n            sum <- sum + i\n        }\n        sum\n    }\n\n    # Compute sum of squared variances of the elements of x from\n    # the mean mu\n    sq.var <- function(x, mu) {\n        sum <- 0\n        for (i in x) {\n            sum <- sum + (i - mu) ^ 2\n        }\n        sum\n    }\n\n    mu <- my.sum(x) / length(x)\n    sq <- sq.var(x, mu)\n    sq / (length(x) - 1)\n}\n```", "```py\nx <- runif(1e7)\nRprof(\"Rprof.out\")\ny <- sampvar(x)\nRprof(NULL)\nsummaryRprof(\"Rprof.out\")\n## $by.self\n##          self.time self.pct total.time total.pct\n## \"sq.var\"      4.38    58.24       5.28     70.21\n## \"my.sum\"      1.88    25.00       2.24     29.79\n## \"^\"           0.46     6.12       0.46      6.12\n## \"+\"           0.44     5.85       0.44      5.85\n## \"-\"           0.28     3.72       0.28      3.72\n## \"(\"           0.08     1.06       0.08      1.06\n##\n## $by.total\n##           total.time total.pct self.time self.pct\n## \"sampvar\"       7.52    100.00      0.00     0.00\n## \"sq.var\"        5.28     70.21      4.38    58.24\n## \"my.sum\"        2.24     29.79      1.88    25.00\n## \"^\"             0.46      6.12      0.46     6.12\n## \"+\"             0.44      5.85      0.44     5.85\n## \"-\"             0.28      3.72      0.28     3.72\n## \"(\"             0.08      1.06      0.08     1.06\n##\n## $sample.interval\n## [1] 0.02\n##\n## $sampling.time\n## [1] 7.52\n```", "```py\ninstall.packages(\"proftools\")\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(c(\"graph\", \"Rgraphviz\"))\nlibrary(proftools)\np <- readProfileData(filename=\"Rprof.out\")\nplotProfileCallGraph(p, style=google.style, score=\"total\")\n```", "```py\nRprof(\"Rprof-mem.out\", memory.profiling=TRUE)\ny <- sampvar(x)\nRprof(NULL)\nsummaryRprof(\"Rprof-mem.out\", memory=\"both\")\n## $by.self\n##          self.time self.pct total.time total.pct mem.total\n## \"sq.var\"      4.16    54.88       5.40     71.24    1129.4\n## \"my.sum\"      1.82    24.01       2.18     28.76     526.9\n## \"^\"           0.56     7.39       0.56      7.39     171.0\n## \"+\"           0.44     5.80       0.44      5.80     129.2\n## \"-\"           0.40     5.28       0.40      5.28     140.2\n## \"(\"           0.20     2.64       0.20      2.64      49.7\n##\n## $by.total\n##           total.time total.pct mem.total self.time self.pct\n## \"sampvar\"       7.58    100.00    1656.2      0.00     0.00\n## \"sq.var\"        5.40     71.24    1129.4      4.16    54.88\n## \"my.sum\"        2.18     28.76     526.9      1.82    24.01\n## \"^\"             0.56      7.39     171.0      0.56     7.39\n## \"+\"             0.44      5.80     129.2      0.44     5.80\n## \"-\"             0.40      5.28     140.2      0.40     5.28\n## \"(\"             0.20      2.64      49.7      0.20     2.64\n##\n## $sample.interval\n## [1] 0.02\n##\n## $sampling.time\n## [1] 7.58\n```", "```py\n> gcinfo(TRUE)\ny <- sampvar(x)\n## Garbage collection 945 = 886+43+16 (level 0) ... \n## 31.1 Mbytes of cons cells used (59%)\n## 82.8 Mbytes of vectors used (66%)\n## Garbage collection 946 = 887+43+16 (level 0) ... \n## 31.1 Mbytes of cons cells used (59%)\n## 82.8 Mbytes of vectors used (66%)\n##... (truncated for brevity) ...\ngcinfo(FALSE)\n```", "```py\n# Compute sample variance of numeric vector x\nsampvar <- function(x) {\n    # Compute sum of vector x\n    my.sum <- function(x) {\n        sum <- 0\n        for (i in x) {\n            sum <- sum + i\n        }\n        sum\n    }\n\n    mu <- my.sum(x) / length(x)\n    sq <- my.sum((x - mu) ^ 2)\n    sq / (length(x) - 1)\n}\n\nx <- runif(1e7)\nRprof(\"Rprof-mem.out\", memory.profiling=TRUE)\ny <- sampvar(x)\nRprof(NULL)\nsummaryRprof(\"Rprof-mem.out\", memory=\"both\")\n## $by.self\n##          self.time self.pct total.time total.pct mem.total\n## \"my.sum\"      3.92    85.22       4.60    100.00    1180.6\n## \"+\"           0.66    14.35       0.66     14.35     104.2\n## \"-\"           0.02     0.43       0.02      0.43      83.1\n##\n## $by.total\n##               total.time total.pct mem.total self.time self.pct\n## \"my.sum\"            4.60    100.00    1180.6      3.92    85.22\n## \"eval\"              4.60    100.00    1180.6      0.00     0.00\n## \"sampvar\"           4.60    100.00    1180.6      0.00     0.00\n## \"source\"            4.60    100.00    1180.6      0.00     0.00\n## \"withVisible\"       4.60    100.00    1180.6      0.00     0.00\n## \"+\"                 0.66     14.35     104.2      0.66    14.35\n## \"-\"                 0.02      0.43      83.1      0.02     0.43\n##\n## $sample.interval\n## [1] 0.02\n##\n## $sampling.time\n## [1] 4.6\n```", "```py\n# Compute sample variance of numeric vector x\nsampvar <- function(x) {\n    mu <- sum(x) / length(x)\n    sq <- sum((x - mu) ^ 2)\n    sq / (length(x) - 1)\n}\n\nx <- runif(1e7)\nRprof(\"Rprof-mem.out\", memory.profiling=TRUE)\ny <- sampvar(x)\nRprof(NULL)\nsummaryRprof(\"Rprof-mem.out\", memory=\"both\")\n## $by.self\n##     self.time self.pct total.time total.pct mem.total\n## \"-\"      0.08      100       0.08       100      76.2\n##\n## $by.total\n##           total.time total.pct mem.total self.time self.pct\n## \"-\"             0.08       100      76.2      0.08      100\n## \"sampvar\"       0.08       100      76.2      0.00        0\n##\n## $sample.interval\n## [1] 0.02\n##\n## $sampling.time\n## [1] 0.08\n```", "```py\nlibrary(microbenchmark)\nmicrobenchmark(sampvar(x), var(x))\n## Unit: milliseconds\n##        expr      min       lq   median       uq      max neval\n##  sampvar(x) 44.31072 44.90836 50.38668 62.14281 74.93704   100\n##      var(x) 35.62815 36.60720 37.04430 37.88039 42.85260   100\n```"]