["```py\n    arcpy.env.workspace = \"C:/ArcpyBook/data/Wildfires/WildlandFires.mdb\"\n    f = open(\"C:/ArcpyBook/data/Wildfires/NorthAmericaWildfires_2007275.txt\",\"r\")\n    ```", "```py\n    cur = arcpy.InsertCursor(\"FireIncidents\")\n    ```", "```py\n    try:\n      #the output feature class name\n      outputFC = arcpy.GetParameterAsText(0)\n\n      # template featureclass that defines the attribute schema\n      fClassTemplate = arcpy.GetParameterAsText(1)\n\n      # open the file to read\n      f = open(arcpy.GetParameterAsText(2),'r')\n\n          arcpy.CreateFeatureclass_management (os.path.split(outputFC)[0], os.path.split(outputFC)[1], \"point\", fClassTemplate)\n    ```", "```py\n    with arcpy.da.InsertCursor(outputFC) as cur:\n    ```", "```py\n    #Script to Import data to a feature class within a geodatabase\n    import arcpy, os\n    try:\n        outputFC = arcpy.GetParameterAsText(0)\n        fClassTemplate = arcpy.GetParameterAsText(1)\n        f = open(arcpy.GetParameterAsText(2),'r')\n        arcpy.CreateFeatureclass_management(os.path.split(outputFC)[0], os.path.split(outputFC)[1],\"point\",fClassTemplate)\n        lstFires = f.readlines()\n        with arcpy.da.InsertCursor(outputFC) as cur:\n            cntr = 1\n            for fire in lstFires:\n                if 'Latitude' in fire:\n                    continue\n                vals = fire.split(\",\")\n                latitude = float(vals[0])\n                longitude = float(vals[1])\n                confid = int(vals[2])\n                pnt = arcpy.Point(longitude, latitude)\n                feat = cur.newRow()\n                feat.shape = pnt\n                feat.setValue(\"CONFIDENCEVALUE\", confid)\n                cur.insertRow(feat)\n                arcpy.AddMessage(\"Record number\" + str(cntr) + \"written to feature class\")\n                cntr = cntr + 1\n    except:\n        print arcpy.GetMessages()\n    finally:\n        f.close()\n    ```", "```py\n    outputFC = arcpy.GetParameterAsText(0)\n    ```", "```py\n    class USGSDownload(object):\n        def __init__(self):\n            \"\"\"Define the tool (tool name is the name of the class).\"\"\"\n            self.label = \"USGS Download\"\n            self.description = \"Download from USGS ArcGIS Server instance\"\n    ```", "```py\n    class Toolbox(object):\n        def __init__(self):\n            \"\"\"Define the toolbox (the name of the toolbox is the name of the\n            .pyt file).\"\"\"\n            self.label = \"Toolbox\"\n            self.alias = \"\"\n            # List of tool classes associated with this toolbox\n            self.tools = [USGSDownload]\n    ```", "```py\n      def execute(self, parameters, messages):\n            \"\"\"The source code of the tool. \"\"\"\n            return\n    ```", "```py\n    def execute(self, parameters, messages):\n            inFeatures = parameters[0].valueAsText\n            outFeatureClass = parameters[1].valueAsText\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    def execute(self, parameters, messages):\n            inFeatures = parameters[0].valueAsText\n            outFeatureClass = parameters[1].valueAsText\n\n            agisurl = inFeatures\n\n            payload = { 'where': 'acres > 5','f': 'pjson', 'outFields': 'latitude,longitude,fire_name,acres'}\n    ```", "```py\n    def execute(self, parameters, messages):\n            inFeatures = parameters[0].valueAsText\n            outFeatureClass = parameters[1].valueAsText\n\n            agisurl = inFeatures\n\n            payload = { 'where': 'acres > 5','f': 'pjson', 'outFields': 'latitude,longitude,fire_name,acres'}\n\n            r = requests.get(inFeatures, params=payload)\n    ```", "```py\n        def execute(self, parameters, messages):\n            inFeatures = parameters[0].valueAsText\n            outFeatureClass = parameters[1].valueAsText\n\n            agisurl = inFeatures\n\n            payload = { 'where': 'acres > 5','f': 'pjson', 'outFields': 'latitude,longitude,fire_name,acres'}\n\n            r = requests.get(inFeatures, params=payload)\n\n            decoded = json.loads(r.text)\n    ```"]