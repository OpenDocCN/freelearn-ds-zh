["```py\n(defproject ufo-data \"0.1.0-SNAPSHOT\"\n  :plugins [[lein-cljsbuild \"0.3.2\"]]\n  :profiles {:dev {:plugins [[com.cemerick/austin \"0.1.0\"]]}}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [org.clojure/data.json \"0.2.2\"]\n                 [org.clojure/data.csv \"0.1.2\"]\n                 [clj-time \"0.5.1\"]\n                 [incanter \"1.5.2\"]\n                 [cc.mallet/mallet \"2.0.7\"]\n                 [me.raynes/fs \"1.4.4\"]]\n  :cljsbuild\n    {:builds [{:source-paths [\"src-cljs\"],\n               :compiler {:pretty-printer true,\n                          :output-to \"www/js/main.js\",\n                          :optimizations :whitespace}}]})\n```", "```py\n(ns ufo-data.model\n  (:require [clojure.java.io :as io]\n            [clojure.core.reducers :as r]\n            [clojure.string :as str]\n            [clojure.data.json :as json]\n            [clj-time.format :as tf]\n            [ufo-data.text :as t]\n            [ufo-data.util :refer :all]\n            [me.raynes.fs :as fs])\n  (:import [java.lang StringBuffer]))\n```", "```py\n(defrecord UfoSighting\n  [sighted-at reported-at location shape duration description\n   year month season])\n```", "```py\n(defn ->ufo [row]\n  (let [row (cond\n              (> (count row) 6)\n                   (concat (take 5 row)\n                      [(str/join \\t (drop 5 row))])\n              (< (count row) 6)\n                   (concat row (repeat (- 6 (count row)) nil))\n              :else row)]\n    (apply ->UfoSighting (concat row [nil nil nil]))))\n```", "```py\n(def date-formatter (tf/formatter \"yyyyMMdd\"))\n(defn read-date [date-str]\n  (try\n    (tf/parse date-formatter date-str)\n    (catch Exception ex\n      nil)))\n```", "```py\n(defn coerce-fields [ufo]\n  (assoc ufo\n         :sighted-at (read-date (:sighted-at ufo))\n         :reported-at (read-date (:reported-at ufo))))\n```", "```py\n(defn read-data\n  [filename]\n  (with-open [f (io/reader filename)]\n    (->> (csv/read-csv f :separator \\tab)\n      vec\n      (r/map ->ufo)\n      (r/map coerce-fields)\n      (into []))))\n```", "```py\nuser=> (def data (m/read-data \"data/ufo_awesome.tsv\"))\nuser=> (count (remove (comp str/blank? :shape) data))\n58870\nuser=> (count (filter (comp str/blank? :shape) data))\n2523\nuser=> (count data)\n61393\nuser=> (float 2506/61137)\n0.04098991\n\n```", "```py\nuser=> (def shape-freqs\n (frequencies\n (map str/trim\n (map :shape\n (remove (comp str/blank? :shape) data)))))\n#'user/shape-freqs\nuser=> (pprint (take 10 (reverse (sort-by second shape-freqs))))\n([\"light\" 12202]\n [\"triangle\" 6082]\n [\"circle\" 5271]\n [\"disk\" 4825]\n [\"other\" 4593]\n [\"unknown\" 4490]\n [\"sphere\" 3637]\n [\"fireball\" 3452]\n [\"oval\" 2869]\n [\"formation\" 1788])\n\n```", "```py\n(ns ufo-data.analysis\n  (:require [ufo-data.text :as t]\n            [clj-time.core :as time]\n            [clj-time.coerce :as coerce]\n            [clojure.string :as str]\n            [incanter.core :as i]\n            [incanter.stats :as s]))\n```", "```py\n(defn get-shape-freqs\n  \"This computes the :shape field's frequencies. This also\n  removes any items with a frequency less than min-freq.\"\n  [coll min-freq]\n  (->> coll\n    (map :shape)\n    (remove str/blank?)\n    (map normalize)\n    (mapcat tokenize)\n    frequencies\n    (remove #(< (second %) min-freq))\n    (sort-by second)\n    reverse\n    (map #(zipmap [:shape :count] %))\n    (into [])))\n```", "```py\n[{\"count\":12202,\"shape\":\"light\"},\n {\"count\":6082,\"shape\":\"triangle\"},\n â€¦]\n```", "```py\n<div class=\"container\"></div>\n```", "```py\n(defn ^:export term-freqs []\n  (let [{:keys [x y]} (u/get-bar-scales)\n        {:keys [x-axis y-axis]} (u/axes x y)\n        svg (u/get-svg)]\n    (u/caption \"Frequencies of Shapes\" 300)\n    (.json js/d3 \"term-freqs.json\"\n      (fn [err json-data]\n        (u/set-domains json-data [x get-shape] [y get-count])\n        (u/setup-x-axis svg x-axis)\n           (u/setup-y-axis svg y-axis \"\")\n (.. svg\n (selectAll \".bar\") (data json-data)\n (enter)\n (append \"rect\")\n (attr \"id\" #(str \"id\" (get-shape %)))\n (attr \"class\" \"bar\")\n (attr \"x\" (comp x get-shape))\n (attr \"width\" (.rangeBand x))\n (attr \"y\" (comp y get-count))\n (attr \"height\"\n #(- u/height (y (get-count %))))))))))\n\n```", "```py\n(defn group-by-year [coll]\n  (group-by #(timestamp->year (:sighted-at %)) coll))\n(defn get-year-counts [by-year]\n  (map #(zipmap [:year :count] %)\n       (map (on-second count)\n            by-year)))\n```", "```py\nuser=> (def descr-counts (a/get-descr-counts data 50))\n#'user/descr-counts\nuser=> (take 10 descr-counts)\n({:count 85428, :descr \"object\"}\n {:count 82526, :descr \"light\"}\n {:count 73182, :descr \"lights\"}\n {:count 72011, :descr \"sky\"}\n {:count 58016, :descr \"like\"}\n {:count 47193, :descr \"one\"}\n {:count 40690, :descr \"bright\"}\n {:count 38225, :descr \"time\"}\n {:count 37065, :descr \"could\"}\n {:count 35953, :descr \"looked\"})\n\n```", "```py\n(ns ufo-data.tm\n  (:require [clojure.java.io :as io]\n            [clojure.string :as str]\n            [clojure.pprint :as pp])\n  (:import [cc.mallet.util.*]\n           [cc.mallet.types InstanceList]\n           [cc.mallet.pipe\n            Input2CharSequence TokenSequenceLowercase\n            CharSequence2TokenSequence SerialPipes\n            TokenSequenceRemoveStopwords\n            TokenSequence2FeatureSequence]\n           [cc.mallet.pipe.iterator ArrayIterator]\n           [cc.mallet.topics ParallelTopicModel]\n           [java.io FileFilter]\n           [java.util Formatter Locale]))\n```", "```py\n(defn get-topic-words [model instances topic-n]\n  (let [topic-words (.getSortedWords model)\n        data-alpha (.getDataAlphabet instances)]\n    (map #(vector (.lookupObject data-alpha (.getID %))\n                  (.getWeight %))\n         (iterator-seq (.. topic-words (get topic-n)\n                         iterator)))))\n```", "```py\n(defn rank-instances [model data topic-id]\n  (let [get-p (fn [n]\n                [(aget (.getTopicProbabilities model n) topic-id)\n                 (nth data n)])]\n    (->> data count range (map get-p) (sort-by first) reverse)))\n```", "```py\n(ns ufo-data.model\n  (:require [clojure.java.io :as io]\n            [clojure.core.reducers :as r]\n            [clojure.string :as str]\n            [clojure.data.json :as json]\n            [clj-time.format :as tf]\n            [ufo-data.text :as t]\n            [ufo-data.util :refer :all]\n            [me.raynes.fs :as fs])\n  (:import [java.lang StringBuffer]))\n```", "```py\n(defrecord UfoSighting\n  [sighted-at reported-at location shape duration description\n   year month season])\n```", "```py\n(def date-formatter (tf/formatter \"yyyyMMdd\"))\n(defn read-date [date-str]\n  (try\n    (tf/parse date-formatter date-str)\n    (catch Exception ex\n      nil)))\n(defn coerce-fields [ufo]\n  (assoc ufo\n         :sighted-at (read-date (:sighted-at ufo))\n         :reported-at (read-date (:reported-at ufo))))\n```", "```py\n(defn read-data\n  ([] (read-data *data-file*))\n  ([filename]\n   (with-open [f (io/reader filename)]\n     (->> f\n       line-seq\n       vec\n       (r/map #(json/read-str % :key-fn keyword))\n       (r/map map->UfoSighting)\n       (r/map coerce-fields)\n       (into [])))))\n```", "```py\nuser=> (def data (model/read-data))\nuser=> (count data)\n61067\nuser=> (first data)\n{:sighted-at nil,\n :reported-at nil,\n :location \" Iowa City, IA\",\n :shape \"\",\n :duration \"\",\n :description\n \"Man repts. witnessing &quot;flash, followed by a classic UFO, w/ a tailfin at back.&quot; Red color on top half of tailfin. Became triangular.\",\n :year nil,\n :month nil,\n :season nil,\n :reported_at \"19951009\",\n :sighted_at \"19951009\"}\n\n```", "```py\n(defn split-nuforc [text]\n  (let [m (.matcher #\"\\(\\(.*?\\)\\)\" text), sb (StringBuffer.)]\n    (loop [accum []]\n      (if (.find m)\n        (let [nuforc (.substring text (.start m) (.end m))]\n          (.appendReplacement m sb \"\")\n          (recur (conj accum nuforc)))\n        (do\n          (.appendTail m sb)\n          [(str sb) (str/join \" \" accum)])))))\n```", "```py\nuser=> (def split-descr (model/split-nuforc description))\nuser=> (first split-descr)\n\"Telephoned Report:Husband and wife were awakened by a very bright light outside their house in Rio Vista area of McCall.  It was so bright, it was &quot;like being inside a football stadium.&quot;  No sound.  Ground was covered with snow at the time.  It lasted for 10 seconds.\"\nuser=> (second split-descr)\n\"((NUFORC Note:  We spoke with the husband and wife, and found them to be quite credible and convincing in their description of what they allegedly had seen.   Both have responsible jobs.  PD))\"\n\n```", "```py\n(defn get-category [tokens]\n  (if (contains? (set tokens) \"hoax\")\n    :hoax\n    :non-hoax))\n```", "```py\nuser=> (model/get-category\n (map t/normalize (t/tokenize (second split-descr))))\n:non-hoax\n\n```", "```py\n(defn save-document [basedir n doc]\n  (let [[text category] doc\n        filename (str basedir \\/ (name category) \\/ n \".txt\")]\n    (spit filename text)\n    {:category category, :filename filename}))\n```", "```py\n(defn make-dirtree-sighting\n  ([basedir]\n   (fn [sighting n]\n     (make-dirtree-sighting basedir sighting n)))\n  ([basedir sighting n]\n   (->> sighting\n     :description\n     split-nuforc\n     (on-both #(map t/normalize (t/tokenize %)))\n     (on-second get-category)\n     (on-first #(str/join \" \" %))\n     (save-document basedir n))))\n```", "```py\n    (defn mk-cat-dirs [base]\n      (doseq [cat [\"hoax\" \"non-hoax\"]]\n        (fs/mkdirs (fs/file base cat))))\n    ```", "```py\n    (defn into-sets [ratio coll]\n      (split-at (int (* (count coll) ratio)) coll))\n    ```", "```py\n(defn mv-stage [basedir stage coll]\n  (let [stage-dir (fs/file basedir stage)]\n    (doseq [{:keys [category filename]} coll]\n      (fs/copy filename\n               (fs/file stage-dir (name category)\n                        (fs/base-name filename))))))\n```", "```py\n(defn make-dirtree [basedir training-ratio sightings]\n  (doseq [dir [basedir (fs/file basedir \"train\")\n               (fs/file basedir \"test\")]]\n    (mk-cat-dirs dir))\n  (let [outputs (map (make-dirtree-sighting basedir)\n                     sightings (range))\n        {:keys [hoax non-hoax]} (group-by :category\n                                          (shuffle outputs))\n        [hoax-train hoax-test] (into-sets training-ratio hoax)\n        [nhoax-train nhoax-test] (into-sets\n                                   training-ratio non-hoax)]\n    (mv-stage basedir \"train\" (concat hoax-train nhoax-train))\n    (mv-stage basedir \"test\" (concat hoax-test nhoax-test))))\n```", "```py\nuser=> (model/make-dirtree \"bayes-data\" 0.8 data)\n\n```", "```py\n(ns ufo-data.bayes\n  (:require [clojure.java.io :as io])\n  (:import [cc.mallet.util.*]\n           [cc.mallet.types InstanceList]\n           [cc.mallet.pipe Input2CharSequence\n            TokenSequenceLowercase\n            TokenSequenceRemoveStoplist\n            CharSequence2TokenSequence SerialPipes\n            SaveDataInSource Target2Label\n            TokenSequence2FeatureSequence\n            FeatureSequence2AugmentableFeatureVector]\n           [cc.mallet.pipe.iterator FileIterator]\n           [cc.mallet.classify NaiveBayesTrainer]\n           [java.io ObjectInputStream ObjectOutputStream]))\n```", "```py\n(defn make-pipe-list []\n  (SerialPipes.\n    [(Target2Label.)\n     (SaveDataInSource.)\n     (Input2CharSequence. \"UTF-8\")\n     (CharSequence2TokenSequence. #\"\\p{L}[\\p{L}\\p{P}]+\\p{L}\")\n     (TokenSequenceLowercase.)\n     (TokenSequenceRemoveStoplist.)\n     (TokenSequence2FeatureSequence.)\n     (FeatureSequence2AugmentableFeatureVector. false)]))\n```", "```py\n(defn add-input-directory [dir-name pipe]\n  (doto (InstanceList. pipe)\n    (.addThruPipe\n      (FileIterator. (io/file dir-name)\n                     #\".*/([^/]*?)/\\d+.txt$\"))))\n```", "```py\n(defn train [instance-list]\n  (.train (NaiveBayesTrainer.) instance-list))\n```", "```py\n(defn classify [bayes instance-list]\n  (.classify bayes instance-list))\n```", "```py\n(defn validate1 [bayes instance]\n  (let [c (.classify bayes instance)\n        expected (.. c getInstance getTarget toString)\n        actual (.. c getLabeling getBestLabel toString)]\n    [expected actual]))\n(defn confusion-matrix [classifier instances labels]\n  (frequencies (map #(validate1 classifier %) instances)))\n```", "```py\n(defn bayes [training-dir testing-dir]\n  (let [pipe (make-pipe-list)\n        training (add-input-directory training-dir pipe)\n        testing (add-input-directory testing-dir pipe)\n        classifier (train training)\n        labels (iterator-seq\n                 (.iterator (.getLabelAlphabet classifier)))\n        c-matrix (confusion-matrix classifier testing labels)]\n    {:bayes classifier\n     :pipe pipe\n     :confusion c-matrix}))\n```", "```py\nuser=> (def bayes-out\n (bayes/bayes \"bayes-data/train\" \"bayes-data/test\"))\nuser=> (:confusion bayes-out)\n{[\"hoax\" \"non-hoax\"] 83, [\"non-hoax\" \"non-hoax\"] 12102,\n[\"non-hoax\" \"hoax\"] 29}\n\n```", "```py\nuser=> (.printWords (:bayes bayes-out) 10)\n\nFeature probabilities hoax\napos 0.002311333180377461\nlights 0.0022688454380911096\nlight 0.00217537240506114\nobject 0.0020988944689457082\nsky 0.002081899372031169\nquot 0.0015295587223086145\nlooked 0.0014360856892786434\ncraft 0.0011556665901887302\nred 0.0011301739448169206\nback 0.0010961837509878402\n\nFeature probabilities non-hoax\nobject 0.016553223428401043\nlight 0.016198059821948316\napos 0.015460989114397925\nlights 0.014296272431730976\nsky 0.014028337606877127\nquot 0.010350232305991571\nbright 0.007963812802535785\ntime 0.007237239541481537\nmoving 0.007063281856688359\nlooked 0.007037538118852588\n\n```"]