- en: Chapter 2. The QGIS Python Console
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 QGIS Python控制台
- en: 'In this chapter, we will look at the ways in which you can use the QGIS Python
    Console as a geospatial development tool. We will also use the console as a looking-glass
    to examine the world of QGIS programming. In particular, we will learn the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨您可以使用QGIS Python控制台作为地理空间开发工具的方法。我们还将使用控制台作为窥视镜来检查QGIS编程的世界。特别是，我们将学习以下内容：
- en: Explore the ways in which the console can be used to develop and execute Python
    code
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索控制台可以用来开发和执行Python代码的方法
- en: Learn how to write Python scripts using the console's built-in source code editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用控制台的内置源代码编辑器编写Python脚本
- en: Discover various tips and techniques to work with the QGIS Console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现各种技巧和技术来使用QGIS控制台
- en: Figure out how to manipulate the current project within QGIS using Python commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想出如何使用Python命令在QGIS中操作当前项目
- en: Access geospatial data and perform geospatial calculations using the console
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制台访问地理空间数据并执行地理空间计算
- en: Use various QGIS user-interface elements within our Python programs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的Python程序中使用各种QGIS用户界面元素
- en: Using the console
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制台
- en: While you briefly used the QGIS Console in the previous chapter, it is worth
    examining the QGIS Console window in more detail, so that you are aware of the
    various features that are available.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您在上一章中已经短暂使用过QGIS控制台，但详细检查QGIS控制台窗口是值得的，这样您就会了解可用的各种功能。
- en: 'If you don''t already have it open, choose the **Python Console** item from
    the **Plugins** menu to open the console. The following screenshot shows the various
    parts of the console window:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有打开它，请从**插件**菜单中选择**Python控制台**项以打开控制台。以下截图显示了控制台窗口的各个部分：
- en: '![Using the console](img/00010.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![使用控制台](img/00010.jpeg)'
- en: 'Let''s take a closer look at these various parts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这些不同的部分：
- en: The **Clear console** button wipes out the contents of the interpreter log
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除控制台**按钮会清除解释器日志的内容'
- en: The **Import Class** pop up contains shortcuts to import some commonly-used
    PyQGIS classes![Using the console](img/00011.jpeg)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入类**弹出窗口包含导入一些常用PyQGIS类的快捷方式![使用控制台](img/00011.jpeg)'
- en: These are equivalent to typing `import Processing`, `from PyQt4.QtCore import
    *`, and `from PyQt4.QtGui import *`.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些相当于输入`import Processing`，`from PyQt4.QtCore import *`和`from PyQt4.QtGui import
    *`。
- en: The **Run command** button simply executes the command you have typed in the
    Python shell field
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行命令**按钮简单地执行在Python Shell字段中输入的命令'
- en: Note
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Of course, you can also run the entered command by pressing the *Return* key,
    so this command is only useful if you really want to run a command using the mouse.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，您也可以通过按*回车*键来运行输入的命令，所以这个命令只有在您真的想使用鼠标运行命令时才有用。
- en: The **Show editor** button shows or hides the built-in source code editor. We'll
    look at this shortly
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示编辑器**按钮用于显示或隐藏内置的源代码编辑器。我们稍后会查看这一点'
- en: The **Settings** button displays the console's Settings window, allowing you
    to customize the way the console looks and behaves
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**按钮显示控制台的设置窗口，允许您自定义控制台的外观和行为'
- en: The **Help** button brings up the built-in help viewer page, which contains
    useful information about how to use the console
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**按钮会弹出内置的帮助查看器页面，其中包含有关如何使用控制台的有用信息'
- en: The **Python Shell** field is where you type your Python commands and other
    input
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python Shell**字段是您输入Python命令和其他输入的地方'
- en: The **Interpreter Log** shows a complete history of the commands you have typed
    and the Python interpreter's output
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释器日志**显示了您输入的命令和Python解释器的输出的完整历史记录'
- en: As we've already seen, you can type Python commands in the shell and press the
    *Return* key to execute them. The commands you type, along with the Python interpreter's
    output, appear in the Interpreter Log.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，您可以在shell中输入Python命令并按*回车*键来执行它们。您输入的命令以及Python解释器的输出将出现在解释器日志中。
- en: 'The Python Shell has been designed to make it easier to work with Python interactively.
    The following features are currently supported:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python Shell被设计成使与Python的交互式工作更加容易。以下是目前支持的功能：
- en: Pressing the up and down arrow keys will move through the command history, making
    it easy to re-enter the Python commands you typed earlier.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下上箭头和下箭头键可以在命令历史记录中移动，这使得重新输入之前输入的Python命令变得容易。
- en: You can display a list of previously-entered commands by pressing *Ctrl* + *Shift*
    + *Space* (*command* + *Shift* + *Space* on Mac).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过按*Ctrl* + *Shift* + *Space*（在Mac上为*command* + *Shift* + *Space*）来显示之前输入的命令列表。
- en: If you select some text in the Interpreter Log, you can use the **Enter Selected**
    command to move that text to the shell and execute it. This command is available
    in the console's pop-up menu, or it can be accessed by pressing *Ctrl* + *E* (*command*
    + *E* if you are running Mac OS X).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你选中了解释器日志中的某些文本，你可以使用**输入选中**命令将文本移动到 shell 中并执行它。此命令在控制台的弹出菜单中可用，或者可以通过按
    *Ctrl* + *E*（如果你正在运行 Mac OS X，则为 *command* + *E*）来访问。
- en: The Python Shell supports **auto-completion**. As you type, a pop-up menu appears,
    showing you the matching class, function, and method names within the PyQGIS and
    PyQt APIs. You can then press the up and down arrow keys to select the exact name
    you want, and press the *Tab* key to select it.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Shell 支持**自动完成**。当你输入时，会出现一个弹出菜单，显示 PyQGIS 和 PyQt API 中的匹配类、函数和方法名称。然后你可以按上箭头和下箭头键选择你想要的确切名称，并按
    *Tab* 键来选择它。
- en: When you type an opening parenthesis, the console automatically enters the closing
    parenthesis for you. You can turn this off by using the **Settings** window if
    you wish.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你输入一个开括号时，控制台会自动为你输入闭括号。如果你希望关闭这个功能，可以通过使用**设置**窗口来实现。
- en: When you type `from XXX`, the console enters the word `import` for you automatically.
    Once again, you can turn this off in the **Settings** window if you don't like
    this behavior.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你输入 `from XXX` 时，控制台会自动为你输入单词 `import`。同样，你可以在**设置**窗口中关闭这个功能，如果你不喜欢这种行为。
- en: When you type the opening parenthesis for a function or method, the C++ signature
    for that function or method will be displayed. Despite being in C++ format, this
    tells you which parameters are expected and the type of value being returned.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你为函数或方法输入开括号时，该函数或方法的 C++ 签名将显示出来。尽管它是 C++ 格式，但这告诉你期望的参数和返回值的类型。
- en: You can type `_api` into the shell; your web browser will open the PyQGIS API
    reference documentation. Similarly, if you type `_pyqgis`, your web browser will
    display the PyQGIS Developer Cookbook.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 shell 中输入 `_api`；你的网络浏览器将打开 PyQGIS API 参考文档。同样，如果你输入 `_pyqgis`，你的网络浏览器将显示
    PyQGIS 开发者手册。
- en: While typing commands into the Python Shell is a useful way of exploring the
    QGIS Python libraries, and is good for one-off commands, it quickly gets tedious
    if you have to type multiple lines of Python text or repeat the same set of commands
    over and over. After all, this is why we store Python code in `.py` files and
    execute them, rather than just typing everything into the Python command-line
    interface.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 Python Shell 中输入命令是探索 QGIS Python 库的有用方法，并且对于一次性命令来说很好用，但如果需要输入多行 Python
    文本或者反复输入相同的命令集，很快就会变得乏味。毕竟，这就是我们为什么将 Python 代码存储在 `.py` 文件中并执行它们，而不是直接在 Python
    命令行界面中输入所有内容的原因。
- en: The QGIS Console comes with its own editor, allowing you to write Python scripts
    and execute them directly within the console. Let's take a quick look at how this
    works.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS 控制台自带编辑器，允许你在控制台中直接编写 Python 脚本并执行它们。让我们快速看看这是如何工作的。
- en: 'With the QGIS Console open, click on the **Show Editor** icon (![Using the
    console](img/00012.jpeg)). The console window will be split in half, with the
    Python source code editor now taking up the right-hand side of the window:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QGIS 控制台打开的情况下，点击**显示编辑器**图标（![使用控制台](img/00012.jpeg)）。控制台窗口将分为两部分，Python
    源代码编辑器现在占据了窗口的右侧：
- en: '![Using the console](img/00013.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用控制台](img/00013.jpeg)'
- en: 'The various toolbar icons provide standard editing behavior such as loading
    and saving files, copying and pasting text, checking syntax, and executing your
    script:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的工具栏图标提供了标准的编辑行为，例如加载和保存文件、复制粘贴文本、检查语法以及执行你的脚本：
- en: '![Using the console](img/00014.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用控制台](img/00014.jpeg)'
- en: You'll probably want to memorize the top three icons as there are currently
    no keyboard shortcuts to open and save Python scripts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要记住前三个图标，因为目前还没有快捷键可以用来打开和保存 Python 脚本。
- en: 'Let''s use the console editor to create a simple Python program and run it.
    With a QGIS project loaded, type the following into the editor:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用控制台编辑器创建一个简单的 Python 程序并运行它。在加载了 QGIS 项目后，将以下内容输入到编辑器中：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can probably guess, this program prints out the names of the various
    layers within the current project. To run this program, save it by clicking on
    the **Save As...** toolbar icon; then, either click on the **Run script** toolbar
    icon (![Using the console](img/00015.jpeg)), or type the keyboard shortcut, *Ctrl*
    + *Shift* + *E* (that''s *command* + *Shift* + *E* on Mac). You should see something
    like the following appear in the Interpreter Log:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能猜到的，此程序会打印出当前项目中各种图层的名称。要运行此程序，请通过点击 **另存为...** 工具栏图标保存它；然后，要么点击 **运行脚本**
    工具栏图标 ![使用控制台](img/00015.jpeg)，要么输入键盘快捷键，*Ctrl* + *Shift* + *E*（在 Mac 上是 *command*
    + *Shift* + *E*）。您应该在解释器日志中看到如下内容：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that QGIS uses the `execfile()` function (which is part of the Python standard
    library) to execute your script.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，QGIS 使用 `execfile()` 函数（它是 Python 标准库的一部分）来执行您的脚本。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If your program didn't display the names of any layers, make sure you have a
    project loaded with at least one layer. In this example, we've used the example
    project we created in the previous chapter, which had three layers in it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的程序没有显示任何图层的名称，请确保您已加载了一个至少包含一个图层的项目。在这个例子中，我们使用了我们在上一章中创建的示例项目，其中包含三个图层。
- en: Of course, there is a lot more that we can do with the QGIS Console and its
    built-in Python editor, and we'll be using it to do useful work shortly. Before
    we do, though, there are two final things you should know about the QGIS Console.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以用 QGIS 控制台及其内置的 Python 编辑器做更多的事情，我们很快就会用它来做一些有用的工作。在我们这样做之前，还有两件关于 QGIS
    控制台的事情您应该知道。
- en: Firstly, the console itself is written in Python using PyQt and the `PyQScintilla2`
    editor. You can learn a lot about how QGIS has been implemented by looking through
    the source code to the console, which is available at [https://github.com/qgis/QGIS/tree/master/python/console](https://github.com/qgis/QGIS/tree/master/python/console).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，控制台本身是用 PyQt 和 `PyQScintilla2` 编辑器用 Python 编写的。您可以通过查看控制台的源代码来了解 QGIS 的实现方式，控制台的源代码可在
    [https://github.com/qgis/QGIS/tree/master/python/console](https://github.com/qgis/QGIS/tree/master/python/console)
    找到。
- en: 'The second thing you should know is that the console is implemented as a Qt
    "Dockable" window; that is, it can be dragged into a pane within the main QGIS
    window. If you click and hold the console''s title bar, you can drag it inside
    the main window, as shown in the following illustration:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道的第二件事是，控制台作为 Qt “可停靠”窗口实现；也就是说，它可以被拖动到主 QGIS 窗口内的一个面板中。如果您点击并按住控制台的标题栏，您可以将其拖入主窗口，如下面的插图所示：
- en: '![Using the console](img/00016.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![使用控制台](img/00016.jpeg)'
- en: The console can be moved into any of the existing panes within the QGIS window,
    and it will stay there until you move it out.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台可以被移动到 QGIS 窗口中的任何现有面板中，并且它将停留在那里，直到您将其移出。
- en: To turn the console into a window again, click on the title bar and drag it
    out of the QGIS window. Alternatively, you can double-click on the console's title
    bar to switch between having it as a standalone window or a docked pane.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要将控制台再次转换为窗口，请点击标题栏并将其拖出 QGIS 窗口。或者，您可以双击控制台的标题栏，在作为独立窗口或停靠面板之间切换。
- en: 'This docking behavior can be annoying if you''re working on a small screen,
    where you can accidentally dock the console window while moving it out of the
    way so you can see what is beneath it. Fortunately, since the QGIS Console is
    implemented in PyQt, you can disable this quite easily by running the following
    Python code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在小型屏幕上工作，这种停靠行为可能会让人烦恼，因为在移动控制台窗口以查看其下方内容时，您可能会意外地将控制台窗口停靠。幸运的是，由于 QGIS 控制台是用
    PyQt 实现的，您可以通过运行以下 Python 代码轻松禁用此功能：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you want, you can create a startup script that automatically shows the console
    and makes it nondockable whenever QGIS starts up. The startup script is stored
    in a hidden directory in your user or home folder. Using your file manager, look
    for a hidden directory named `.qgis2` (or `.qgis`, depending on which version
    of QGIS you are running) in your user or home directory (for Mac OS X, you can
    use the **Go to Folder...** item in the Finder''s **Go** menu). Inside this directory,
    there will be a subdirectory named `python`. Inside the `python` directory, create
    a file named `startup.py` and place the following into this file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想，你可以创建一个启动脚本，这样每次 QGIS 启动时都会自动显示控制台，并使其不可停靠。启动脚本存储在你用户或主文件夹中的一个隐藏目录中。使用你的文件管理器，在你的用户或主目录中查找名为
    `.qgis2` 的隐藏目录（或 `.qgis`，具体取决于你运行的 QGIS 版本）（对于 Mac OS X，你可以在 Finder 的 **Go** 菜单中使用
    **Go to Folder...** 项）。在这个目录内，将有一个名为 `python` 的子目录。在 `python` 目录内，创建一个名为 `startup.py`
    的文件，并将以下内容放入此文件中：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the only thing we changed was to add a call to `console.show_console()`
    to open the console window when QGIS starts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们唯一改变的是添加了对 `console.show_console()` 的调用，以便在 QGIS 启动时打开控制台窗口。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the console is currently docked, this script won't undock it, although it
    will prevent you from accidentally docking the console again.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果控制台当前已停靠，此脚本不会将其取消停靠，尽管它会防止你意外再次停靠控制台。
- en: Working with geospatial data in the console
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制台中处理地理空间数据
- en: So far, we have used the QGIS Console as a glorified Python interpreter, running
    standard Python programs and manipulating the QGIS user interface. But QGIS is
    a Geographical Information System (GIS), and one of the main uses of a GIS is
    to manipulate and query geospatial data. So, let's write some Python code to work
    with geospatial data directly within the QGIS Console.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已将 QGIS 控制台用作一个华丽的 Python 解释器，运行标准 Python 程序并操作 QGIS 用户界面。但 QGIS 是一个地理信息系统（GIS），GIS
    的主要用途之一是操作和查询地理空间数据。因此，让我们编写一些 Python 代码，以便在 QGIS 控制台中直接处理地理空间数据。
- en: 'In the previous chapter, we loaded three shapefiles into a QGIS project using
    Python. Here is a typical instruction we used to load a shapefile into a QGIS
    map layer:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用 Python 将三个 shapefile 加载到 QGIS 项目中。以下是我们将 shapefile 加载到 QGIS 地图层中使用的典型指令：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While this is useful if you want to create a QGIS project programmatically,
    you may just want to load a shapefile so you can analyze its contents, without
    putting the data into a map layer. To do this, we have to get an appropriate **data
    provider** and ask it to open the shapefile, like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这在你想以编程方式创建 QGIS 项目时很有用，但你可能只想加载一个 shapefile，以便分析其内容，而不将数据放入地图层。为此，我们必须获取适当的数据提供者，并要求它打开
    shapefile，如下所示：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `isValid()` method will return `False` if the shapefile cannot be loaded;
    this allows us to fail gracefully if there is an error.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 shapefile 无法加载，`isValid()` 方法将返回 `False`；这允许我们在出现错误时优雅地失败。
- en: 'Once we have the data provider, we can ask it for the list of fields used to
    hold the attribute values for each of the shapefile''s features:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了数据提供者，我们可以要求它提供用于存储 shapefile 每个特征的属性值的字段列表：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also scan through the features within the shapefile using a `QgsFeatureRequest`
    object. For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `QgsFeatureRequest` 对象扫描 shapefile 内的特征。例如：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Of course, this is just a taste of what can be done using the QGIS libraries
    to query and manipulate geospatial data. However, let's use what we've learned
    to build a simple program that calculates and displays information about the contents
    of a shapefile. Shapefiles hold geospatial features such as polygons, lines and
    points, and each feature can have any number of attributes associated with it.
    We'll write a program that opens and scans through a shapefile, identifying the
    features and calculating the length of each line feature and the area of each
    polygon feature. We'll also calculate the total length and area across all the
    features.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这仅仅是对使用 QGIS 库查询和操作地理空间数据所能做到的一小部分。然而，让我们利用我们所学的知识来构建一个简单的程序，该程序可以计算并显示 shapefile
    内容的信息。Shapefiles 包含地理空间特征，如多边形、线和点，每个特征可以与任何数量的属性相关联。我们将编写一个程序，打开并扫描 shapefile，识别特征并计算每条线特征的长度和每个多边形特征的面积。我们还将计算所有特征的总长度和面积。
- en: One of the challenges we'll have to deal with is the fact that the shapefile
    can be in any map projection. This means that our calculation of the area and
    length has to take the map projection into account; if, for example, we simply
    calculated the linear length of a feature in a shapefile that uses the EPSG 4326
    projection (that is, lat/long coordinates), then the calculated length will be
    in degrees of latitude and longitude—which is a completely meaningless figure.
    We'll want to calculate the feature lengths in kilometers, and the areas in square
    kilometers. This is possible but requires us to do a bit more work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将面临的挑战之一是shapefile可以是任何地图投影。这意味着我们的面积和长度计算必须考虑地图投影；例如，如果我们简单地在一个使用EPSG 4326投影（即经纬度坐标）的shapefile中计算一个要素的线性长度，那么计算出的长度将是纬度和经度的度数——这是一个完全没有意义的数字。我们希望以千米为单位计算要素长度，以平方千米为单位计算面积。这是可能的，但需要我们做更多的工作。
- en: 'Let''s get started with our program. Start by creating a new Python script
    and enter the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写我们的程序。首先创建一个新的Python脚本，并输入以下内容：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make the program easier to use, we''re going to define a function and place
    all our program logic inside this function, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使程序更容易使用，我们将定义一个函数并将所有程序逻辑放在这个函数中，如下所示：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s start writing the contents of the `analyze_shapefile()` function.
    So far, we''ve been hardwiring the name of the shapefile, but this time, let''s
    use QGIS''s graphical interface to prompt the user to select a shapefile:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始编写`analyze_shapefile()`函数的内容。到目前为止，我们一直在硬编码shapefile的名称，但这次，让我们使用QGIS的图形界面提示用户选择一个shapefile：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can then open the selected shapefile:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以打开选定的shapefile：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In order to identify a feature, we need to display a meaningful label for the
    feature. To do this, we'll look for an attribute with a likely-looking name. If
    there is no suitable attribute, we'll have to use the feature's ID instead.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别一个要素，我们需要为该要素显示一个有意义的标签。为此，我们将寻找一个看起来可能的名字的属性。如果没有合适的属性，我们不得不使用要素的ID。
- en: 'Let''s start by building a list of the various attributes stored in this shapefile:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们构建一个包含在这个shapefile中存储的各种属性的列表：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''re now ready to start scanning through the shapefile''s features. Before
    we do this, though, let''s initialize a couple of variables to hold the totals
    we need to calculate:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开始扫描shapefile的要素。在我们这样做之前，让我们初始化一些变量来保存我们需要计算的总量：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We also need to set up a `QgsDistanceArea` object to do the distance and area
    calculations for us.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要设置一个`QgsDistanceArea`对象来为我们进行距离和面积计算。
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We'll use this object to calculate the true length and area of the shapefile's
    features in meters and square meters respectively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此对象来计算shapefile要素的真实长度和面积，分别以米和平方米为单位。
- en: 'We''re now ready to scan through the contents of the shapefile, processing
    each feature in turn:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好扫描shapefile的内容，依次处理每个要素：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For each feature, we want to calculate a label that identifies that feature.
    We''ll do this by looking for an attribute called `"name"`, `"NAME"`, or `"Name"`,
    and using that attribute''s value as the feature label. If there is no attribute
    with one of these field names, we''ll fall back to using the feature''s ID instead.
    Here is the relevant code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个要素，我们想要计算一个标签来标识该要素。我们将通过寻找名为`"name"`、`"NAME"`或`"Name"`的属性，并使用该属性的值作为要素标签来完成此操作。如果没有具有这些字段名称之一的属性，我们将回退到使用要素的ID。以下是相关代码：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we need to obtain the geometry object associated with the feature. The
    geometry object represents a polygon, line, or point. Getting a reference to the
    feature''s underlying geometry object is simple:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取与要素相关联的几何对象。几何对象代表一个多边形、线或点。获取要素底层几何对象的引用很简单：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can now use the `QgsDistanceArea` calculator we initialized earlier to calculate
    the length of a line feature and the area of a polygon feature. To do this, we''ll
    first have to identify the type of feature we are dealing with:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用我们之前初始化的`QgsDistanceArea`计算器来计算线要素的长度和多边形要素的面积。为此，我们首先必须确定我们正在处理要素的类型：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For line geometries, we''ll calculate the length of the line and update the
    total length:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于线几何形状，我们将计算线的长度并更新总长度：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For polygon geometries, we''ll calculate the area of the polygon and update
    the total area:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多边形几何形状，我们将计算多边形的面积并更新总面积：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, for the other types of geometries, we''ll simply display the geometry''s
    type:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于其他类型的几何形状，我们只需显示几何形状的类型：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that we''ve done these calculations, we can display the feature''s label
    together with the information we calculated about this feature:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了这些计算，我们可以显示要素的标签以及我们为此要素计算的信息：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, when we''ve finished iterating over the features, we can display the
    total line length and polygon area for all the features in the shapefile:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们完成对要素的迭代后，我们可以显示该shapefile中所有要素的总行长度和多边形面积：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This completes our program for analyzing the contents of a shapefile. The full
    source for this program is available in the code samples provided with this book.
    To test our program, type or copy and paste it into the console''s script editor,
    save the file, and click on the **Run Script** button (or press *Ctrl* + *Shift*
    + *E*). Here''s an example of what the program''s output looks like:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们分析shapefile内容的程序。此程序的完整源代码可在本书提供的代码示例中找到。要测试我们的程序，请在控制台的脚本编辑器中键入或复制粘贴，保存文件，然后单击**运行脚本**按钮（或按*Ctrl*
    + *Shift* + *E*）。以下是程序输出的示例：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This output was produced using the World Borders dataset, available at [http://thematicmapping.org/downloads/world_borders.php](http://thematicmapping.org/downloads/world_borders.php).
    This is a useful set of geospatial data, which provides simple world maps and
    associated metadata. If you haven't already done so, you should grab yourself
    a copy of this dataset, as we'll be using this shapefile throughout this book.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出是使用可在[http://thematicmapping.org/downloads/world_borders.php](http://thematicmapping.org/downloads/world_borders.php)找到的世界边界数据集生成的。这是一组有用的地理空间数据，它提供了简单的世界地图和相关元数据。如果您还没有这样做，您应该为自己获取一份此数据集的副本，因为我们将在此书中使用此shapefile。
- en: As you can see, it is quite possible to create Python programs that read and
    analyze geospatial data, and you can run these programs directly from within the
    QGIS Console. It is also possible to create and manipulate geospatial data sources
    using the PyQGIS libraries.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，创建能够读取和分析地理空间数据的Python程序是完全可能的，并且您可以直接从QGIS控制台运行这些程序。您还可以使用PyQGIS库创建和操作地理空间数据源。
- en: Scripting the QGIS user interface
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本化QGIS用户界面
- en: While the example program we created earlier has very limited user interaction,
    it is quite possible to build your program to directly use the QGIS user interface
    elements such as the status bar, the message bar, progress indicators, and the
    QGIS logging window. You can also create custom forms and windows so that the
    output of your program looks just like any other feature of QGIS itself. Let's
    take a closer look at how some of these QGIS user-interface elements can be used
    from within your Python programs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们之前创建的示例程序用户交互非常有限，但完全有可能构建您的程序以直接使用QGIS用户界面元素，例如状态栏、消息栏、进度指示器和QGIS日志窗口。您还可以创建自定义表单和窗口，以便您的程序输出看起来就像QGIS本身的任何其他功能。让我们更详细地看看如何在您的Python程序中使用一些这些QGIS用户界面元素。
- en: The status bar
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态栏
- en: 'The QGIS window has a status bar. You can use it to display the current status
    of your Python program, for example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS窗口有一个状态栏。您可以使用它来显示Python程序当前的状态，例如：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The status message will appear at the bottom of the window, like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 状态消息将出现在窗口底部，如下所示：
- en: '![The status bar](img/00017.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![状态栏](img/00017.jpeg)'
- en: 'As you can see, there isn''t much room on the status bar, so you''ll need to
    keep your status message short. To hide the message again, do the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，状态栏上空间有限，因此您需要保持状态消息简短。要再次隐藏消息，请执行以下操作：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The message bar
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息栏
- en: 'A message bar appears within a window to display messages to the user, for
    example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 消息栏出现在窗口中，用于向用户显示消息，例如：
- en: '![The message bar](img/00018.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![消息栏](img/00018.jpeg)'
- en: 'Message bars have several useful features:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 消息栏有几个有用的功能：
- en: Messages can be stacked so that if multiple messages appear at once, the user
    won't miss the earlier messages
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息可以堆叠，这样如果同时出现多个消息，用户就不会错过早期的消息
- en: Messages have a level, which indicates the importance of the message, and affects
    how the message is displayed
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息有一个级别，它表示消息的重要性，并影响消息的显示方式
- en: Messages have an optional title as well as the text to be displayed
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息有一个可选的标题以及要显示的文本
- en: Messages can stay on the screen until the user closes them, or they can time
    out, disappearing automatically after a given number of seconds
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息可以留在屏幕上，直到用户关闭它们，或者它们可以超时，在给定秒数后自动消失
- en: You can add various Qt widgets to the message bar to customize its behavior
    and appearance
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以向消息栏添加各种Qt小部件来自定义其行为和外观
- en: Any window in QGIS can have its own message bar. The `iface` variable has a
    `messageBar()` method, which returns the message bar for the main QGIS window,
    but you can also add a message bar to your own custom windows if you wish.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS中的任何窗口都可以有自己的消息栏。`iface`变量有一个`messageBar()`方法，它返回主QGIS窗口的消息栏，但您也可以根据需要向自己的自定义窗口添加消息栏。
- en: 'To add a message to a message bar, you call the message bar''s `pushMessage()`
    method. To create a message without a title, you use the following method signature:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要向消息栏添加消息，请调用消息栏的`pushMessage()`方法。要创建不带标题的消息，请使用以下方法签名：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To include a title, use the following method signature:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含标题，请使用以下方法签名：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In both cases, the `level` parameter can be set to `QgsMessageBar.INFO`, `QgsMessageBar.WARNING`,
    or `QgsMessageBar.CRITICAL`, and if the `duration` parameter is specified, it
    will be the number of seconds before the message is hidden.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，`level`参数可以设置为`QgsMessageBar.INFO`、`QgsMessageBar.WARNING`或`QgsMessageBar.CRITICAL`，如果指定了`duration`参数，则表示消息隐藏前的秒数。
- en: To remove all the messages currently being shown, you can call the `messageBar.clearWidgets()`
    method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除当前显示的所有消息，您可以调用`messageBar.clearWidgets()`方法。
- en: Progress indicators
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进度指示器
- en: 'You can also make use of the message bar to display a Qt progress indicator.
    To do this, use the `messageBar.createMessage()` method to create a widget to
    display your message, then modify the widget to include additional Qt controls,
    and finally call the `messageBar.pushWidget()` method to display the message and
    the controls you added. For example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以利用消息栏来显示Qt进度指示器。为此，请使用`messageBar.createMessage()`方法创建一个用于显示消息的小部件，然后修改该小部件以包含额外的Qt控件，最后调用`messageBar.pushWidget()`方法来显示消息和您添加的控件。例如：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is a bug in the Mac version of QGIS 2.2, which prevents the user interface
    from updating while your Python code is running. A workaround for this is to use
    threads, as described in the following article: [http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins](http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS 2.2的Mac版本中存在一个错误，这会阻止用户界面在Python代码运行时更新。解决这个问题的方法是在以下文章中描述的线程：[http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins](http://snorf.net/blog/2013/12/07/multithreading-in-qgis-python-plugins)
- en: QGIS logging
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QGIS日志
- en: 'You can use the built-in logging facilities of QGIS to display the output in
    a separate window. For example:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用QGIS内置的日志功能在单独的窗口中显示输出。例如：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The log messages will be shown in the log view, which you can show by navigating
    to **View** | **Panels** | **Log Messages**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 日志消息将在日志视图中显示，您可以通过导航到**视图** | **面板** | **日志消息**来显示它。
- en: 'If you wish, you can change the importance of your message by adding a message
    level to the `logMessage()` call, for example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以通过在`logMessage()`调用中添加消息级别来更改消息的重要性，例如：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Rather than being mixed in with other QGIS messages, you can also choose to
    have all your log messages appear in a pane by themselves, by adding a tag to
    the `logMessage()` call as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择让所有日志消息单独出现在一个面板中，通过在`logMessage()`调用中添加一个标签，如下所示：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Your log messages will then appear in a panel by themselves, like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您的日志消息将随后出现在一个单独的面板中，如下所示：
- en: '![QGIS logging](img/00019.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![QGIS日志](img/00019.jpeg)'
- en: Custom dialogs and windows
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义对话框和窗口
- en: 'As QGIS is built on top of Qt, you can use the PyQt classes to create your
    own windows and dialog boxes, and display them directly from within your Python
    code. For example, here''s a script that displays a custom dialog box that prompts
    the user to enter a latitude and longitude value:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于QGIS建立在Qt之上，您可以使用PyQt类创建自己的窗口和对话框，并直接从Python代码中显示它们。例如，以下是一个显示自定义对话框的脚本，提示用户输入纬度和经度值：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Running this script will cause the following dialog box to be displayed:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本将显示以下对话框：
- en: '![Custom dialogs and windows](img/00020.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![自定义对话框和窗口](img/00020.jpeg)'
- en: If the user clicks on the **OK** button, the entered latitude and longitude
    values will be printed to the console. Of course, this is just a simple example—there's
    no error checking or conversion of the entered values from text back to numbers.
    However, this is just a simple example. There's a lot more that can be done using
    the PyQt libraries, and people have written entire books on the subject. However,
    the main thing to realize now is that, because QGIS is built on top of Qt, you
    can use all of the features of PyQt to build sophisticated user interfaces. You're
    certainly not limited to using the Python console to interact with the user.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击 **确定** 按钮，输入的纬度和经度值将被打印到控制台。当然，这只是一个简单的示例——这里没有错误检查或将输入的值从文本转换回数字。然而，这只是一个简单的示例。使用
    PyQt 库可以完成更多的事情，而且人们已经为此主题撰写了整本书。然而，现在要认识到的主要一点是，由于 QGIS 是建立在 Qt 之上的，您可以使用 PyQt
    的所有功能来构建复杂的用户界面。您当然不仅仅局限于使用 Python 控制台与用户交互。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the QGIS Python Console, and how to use it for
    a variety of programming tasks. We also used the console to delve more deeply
    into the QGIS Python programming environment.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 QGIS Python 控制台及其在多种编程任务中的应用。我们还使用控制台更深入地研究了 QGIS Python 编程环境。
- en: As we worked through this chapter, we learned what the various toolbar buttons
    and controls do within the QGIS Console, and how to enter commands using the Python
    Shell. We looked at how we can use the Python Interpreter Log to view the previous
    output and re-enter commands you executed earlier. We saw the ways in which you
    can use autocompletion to enter your Python code more quickly, and also learned
    about the parameters that the various PyQGIS functions and methods accept.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习这一章的过程中，我们了解了 QGIS 控制台中的各种工具栏按钮和控制功能，以及如何使用 Python Shell 输入命令。我们探讨了如何使用
    Python 解释器日志查看之前的输出并重新输入之前执行的命令。我们看到了如何使用自动完成快速输入 Python 代码，还了解了各种 PyQGIS 函数和方法接受的参数。
- en: We then looked at how to enter and execute Python scripts using the built-in
    source code editor. We discovered that the Python Console is itself written in
    Python, allowing you to explore the source code and manipulate the console itself
    using the Python code.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了如何使用内置的源代码编辑器输入和执行 Python 脚本。我们发现 Python 控制台本身是用 Python 编写的，这使得您可以使用
    Python 代码探索源代码并操纵控制台本身。
- en: We learned how to create a startup script that is run automatically whenever
    QGIS starts up, and how you can use this to set up the console to open automatically
    and prevent it from acting as a dockable window.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何创建一个启动脚本，该脚本在 QGIS 启动时自动运行，以及如何使用它来设置控制台以自动打开并防止其作为可停靠窗口运行。
- en: Next, we examined the process of loading geospatial data directly using your
    Python scripts, without first having to load it into a QGIS map layer. We saw
    how to identify the attributes defined by a shapefile, how to scan through the
    features within a shapefile, and the ways in which the PyQGIS libraries allow
    you to perform common geospatial calculations.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查了直接使用您的 Python 脚本加载地理空间数据的过程，而无需首先将其加载到 QGIS 地图图层中。我们了解了如何识别由 shapefile
    定义的属性，如何扫描 shapefile 内部的要素，以及 PyQGIS 库允许您执行常见地理空间计算的方式。
- en: We then looked at the various ways in which you can make use of QGIS user interface
    elements within your Python scripts, including the status bar, message bars, progress
    indicators, and the QGIS message log.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了在您的 Python 脚本中如何使用 QGIS 用户界面元素的各种方法，包括状态栏、消息栏、进度指示器和 QGIS 消息日志。
- en: Finally, we saw how you can use standard PyQt classes to create your own windows
    and dialog boxes to provide a sophisticated user interface for your Python scripts.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何使用标准的 PyQt 类创建自己的窗口和对话框，为您的 Python 脚本提供复杂的用户界面。
- en: In the following chapter, we will work more directly with the QGIS Python libraries,
    learning how these libraries are structured and how you can use them to perform
    various sorts of geospatial data manipulation and display the results on a map.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更直接地与 QGIS Python 库合作，学习这些库的结构以及如何使用它们执行各种类型的地理空间数据处理并在地图上显示结果。
