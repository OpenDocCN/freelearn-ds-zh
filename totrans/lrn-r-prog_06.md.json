["```py\n\"Hello\"\n## [1] \"Hello\"\n```", "```py\nstr1 <- \"Hello\" \nstr1\n## [1] \"Hello\"\n```", "```py\nfor (i in 1:3) {\n  \"Hello\"\n}\n```", "```py\ntest1 <- function(x) {\n  \"Hello\"\n  x\n}\ntest1(\"World\")\n## [1] \"World\"\n```", "```py\ntest2 <- function(x) {\n  \"Hello\" \n}\ntest2(\"World\")\n## [1] \"Hello\"\n```", "```py\nprint(str1)\n## [1] \"Hello\"\n```", "```py\nfor (i in 1:3) {\n  print(str1) \n}\n## [1] \"Hello\" \n## [1] \"Hello\" \n## [1] \"Hello\"\n```", "```py\ntest3 <- function(x) {\n print(\"Hello\")\n  x\n}\ntest3(\"World\")\n## [1] \"Hello\"\n## [1] \"World\"\n```", "```py\ncat(\"Hello\")\n## Hello\n```", "```py\nname <- \"Ken\"\nlanguage <- \"R\"\ncat(\"Hello,\", name, \"- a user of\", language)\n## Hello, Ken - a user of R\n```", "```py\ncat(\"Hello, \", name, \", a user of \", language, \".\")\n## Hello, Ken , a user of R .\n```", "```py\ncat(\"Hello, \", name, \", a user of \", language, \".\", sep = \"\")\n## Hello, Ken, a user of R.\n```", "```py\nmessage(\"Hello, \", name, \", a user of \", language, \".\")\n## Hello, Ken, a user of R.\n```", "```py\nfor (i in 1:3) {\n  cat(letters[[i]]) \n}\n## abc\nfor (i in 1:3) {\n  message(letters[[i]]) \n}\n## a\n## b\n## c\n```", "```py\nfor (i in 1:3) {\n  cat(letters[[i]], \"\\n\", sep = \"\") \n}\n## a \n## b \n## c\n```", "```py\npaste(\"Hello\", \"world\")\n## [1] \"Hello world\"\npaste(\"Hello\", \"world\", sep = \"-\")\n## [1] \"Hello-world\"\n```", "```py\npaste0(\"Hello\", \"world\")\n## [1] \"Helloworld\"\n```", "```py\nvalue1 <- cat(\"Hello\", \"world\")\n## Hello world\nvalue1\n## NULL\n```", "```py\npaste(c(\"A\", \"B\"), c(\"C\", \"D\"))\n## [1] \"A C\" \"B D\"\n```", "```py\npaste(c(\"A\", \"B\"), c(\"C\", \"D\"),collapse = \", \")\n## [1] \"A C, B D\"\n```", "```py\nresult <- paste(c(\"A\", \"B\"), c(\"C\", \"D\"), collapse = \"\\n\") result\n## [1] \"A C\\nB D\"\n```", "```py\ncat(result)\n## A C ## B D\n```", "```py\ntolower(\"Hello\")\n## [1] \"hello\"\ntoupper(\"Hello\")\n## [1] \"HELLO\"\n```", "```py\ncalc <- function(type, x, y) {\n  type <- tolower(type)\n  if (type == \"add\") {\n    x + y \n  }else if (type == \"times\") {\n    x * y\n  } else {\n    stop(\"Not supported type of command\")\n  }\n}\nc(calc(\"add\", 2, 3), calc(\"Add\", 2, 3), calc(\"TIMES\", 2, 3))\n## [1] 5 5 6\n```", "```py\ntoupper(c(\"Hello\", \"world\"))\n## [1] \"HELLO\" \"WORLD\"\n```", "```py\nnchar(\"Hello\")\n## [1] 5\n```", "```py\nnchar(c(\"Hello\", \"R\", \"User\"))\n## [1] 5 1 4\n```", "```py\nstore_student <- function(name, age) {\n stopifnot(length(name) == 1, nchar(name) >= 2,\n is.numeric(age), age > 0) \n  # store the information in the database \n}\n```", "```py\nstore_student(\"James\", 20)\nstore_student(\"P\", 23)\n## Error: nchar(name) >= 2 is not TRUE\n```", "```py\nstore_student(\" P\", 23)\n```", "```py\nstore_student2 <- function(name, age) {\n stopifnot(length(name) == 1, nchar(trimws(name)) >= 2,\n is.numeric(age), age > 0) \n  # store the information in the database \n}\n```", "```py\nstore_student2(\" P\", 23)\n## Error: nchar(trimws(name)) >= 2 is not TRUE\n```", "```py\ntrimws(c(\" Hello\", \"World \"), which = \"left\")\n## [1] \"Hello\" \"World \"\n```", "```py\ndates <- c(\"Jan 3\", \"Feb 10\", \"Nov 15\")\n```", "```py\nsubstr(dates, 1, 3)\n## [1] \"Jan\" \"Feb\" \"Nov\"\n```", "```py\nsubstr(dates, 5, nchar(dates))\n## [1] \"3\" \"10\" \"15\"\n```", "```py\nget_month_day <- function(x) {\n  months <- vapply(substr(tolower(x), 1, 3), function(md) { \n    switch(md, jan = 1, feb = 2, mar = 3, apr = 4, may = 5,\n    jun = 6, jul = 7, aug = 8, sep = 9, oct = 10, nov = 11, dec = 12) \n  }, numeric(1), USE.NAMES = FALSE) \n  days <- as.numeric(substr(x, 5,nchar(x)))\n data.frame(month = months, day = days) \n}\nget_month_day(dates)\n##   month day \n## 1   1    3 \n## 2   2   10 \n## 3  11   15\n```", "```py\nsubstr(dates, 1, 3) <- c(\"Feb\", \"Dec\", \"Mar\") dates\n## [1] \"Feb 3\" \"Dec 10\" \"Mar 15\"\n```", "```py\nstrsplit(\"a,bb,ccc\", split = \",\")\n## [[1]] \n## [1] \"a\" \"bb\" \"ccc\"\n```", "```py\nstudents <- strsplit(c(\"Tony, 26, Physics\", \"James, 25, Economics\"),\nsplit = \", \") \nstudents\n## [[1]] \n## [1] \"Tony\" \"26\" \"Physics\" \n## \n## [[2]] \n## [1] \"James\" \"25\" \"Economics\"\n```", "```py\nstudents_matrix <- do.call(rbind, students)colnames(students_matrix) <- c(\"name\", \"age\", \"major\")students_matrix\n##       name   age   major \n## [1,] \"Tony\"  \"26\"  \"Physics\" \n## [2,] \"James\" \"25\"  \"Economics\"\n```", "```py\nstudents_df <- data.frame(students_matrix, stringsAsFactors = FALSE)students_df$age <- as.numeric(students_df$age)students_df\n##   name  age major\n## 1 Tony  26  Physics\n## 2 James 25  Economics\n```", "```py\nstrsplit(c(\"hello\", \"world\"), split = \"\")\n## [[1]] \n## [1] \"h\" \"e\" \"l\" \"l\" \"o\" \n## \n## [[2]] \n## [1] \"w\" \"o\" \"r\" \"l\" \"d\"\n```", "```py\n#1, name: Tony, age: 26, major: Physics\n```", "```py\ncat(paste(\"#\", 1:nrow(students_df), \", name: \", students_df$name, \", age: \", students_df$age, \", major: \", students_df$major, sep = \"\"), sep = \"\\n\")\n## #1, name: Tony, age: 26, major: Physics \n## #2, name: James, age: 25, major: Economics\n```", "```py\ncat(sprintf(\"#%d, name: %s, age: %d, major: %s\", \n  1:nrow(students_df), students_df$name, students_df$age, \nstudents_df$major), sep = \"\\n\")\n#1, name: Tony, age: 26, major: Physics\n## #2, name: James, age: 25, major: Economics\n```", "```py\nsprintf(\"The length of the line is approximately %.1fmm\", 12.295)\n## [1] \"The length of the line is approximately 12.3mm\"\n```", "```py\nsprintf(\"The ratio is %d%%\", 10)\n## [1] \"The ratio is 10%\"\n```", "```py\nsprintf(\"%s, %d years old, majors in %s and loves %s.\", \"James\", 25, \"Physics\", \"Physics\")\n## [1] \"James, 25 years old, majors in Physics and loves Physics.\"\n```", "```py\n# install.packages(\"pystr\")\nlibrary(pystr)\npystr_format(\"{1}, {2} years old, majors in {3} and loves {3}.\", \"James\", 25, \"Physics\", \"Physics\")\n## [1] \"James, 25 years old, majors in Physics and loves Physics.\"\n```", "```py\npystr_format(\"{name}, {age} years old, majors in {major} and loves {major}.\", \nname = \"James\", age = 25, major = \"Physics\")\n## [1] \"James, 25 years old, majors in Physics and loves Physics.\"\n```", "```py\nSys.Date() ## [1] \"2016-02-26\"\n```", "```py\nSys.time() ## [1] \"2016-02-26 22:12:25 CST\"\n```", "```py\ncurrent_date <- Sys.Date()\nas.numeric(current_date)\n## [1] 16857\ncurrent_time <- Sys.time()\nas.numeric(current_time)\n## [1] 1456495945\n```", "```py\nas.Date(1000, \"1970-01-01\")\n## [1] \"1972-09-27\"\n```", "```py\nmy_date <- as.Date(\"2016-02-10\") \nmy_date\n## [1] \"2016-02-10\"\n```", "```py\nmy_date + 3\n## [1] \"2016-02-13\"\nmy_date + 80\n## [1] \"2016-04-30\"\nmy_date - 65\n## [1] \"2015-12-07\"\n```", "```py\ndate1 <- as.Date(\"2014-09-28\") \ndate2 <- as.Date(\"2015-10-20\") \ndate2 - date1\n## Time difference of 387 days\n```", "```py\nas.numeric(date2 - date1)\n## [1] 387\n```", "```py\nmy_time <- as.POSIXlt(\"2016-02-10 10:25:31\") \nmy_time\n## [1] \"2016-02-10 10:25:31 CST\"\n```", "```py\nmy_time + 10\n## [1] \"2016-02-10 10:25:41 CST\"\nmy_time + 12345\n## [1] \"2016-02-10 13:51:16 CST\"\nmy_time - 1234567\n## [1] \"2016-01-27 03:29:24 CST\"\n```", "```py\nas.Date(\"2015.07.25\")\n## Error in charToDate(x): character string is not in a standard unambiguous format\n```", "```py\nas.Date(\"2015.07.25\", format = \"%Y.%m.%d\")\n## [1] \"2015-07-25\"\n```", "```py\nas.POSIXlt(\"7/25/2015 09:30:25\", format = \"%m/%d/%Y %H:%M:%S\")\n## [1] \"2015-07-25 09:30:25 CST\"\n```", "```py\nstrptime(\"7/25/2015 09:30:25\", \"%m/%d/%Y %H:%M:%S\")\n## [1] \"2015-07-25 09:30:25 CST\"\n```", "```py\nas.Date(c(\"2015-05-01\", \"2016-02-12\"))\n## [1] \"2015-05-01\" \"2016-02-12\"\n```", "```py\nas.Date(\"2015-01-01\") + 0:2\n## [1] \"2015-01-01\" \"2015-01-02\" \"2015-01-03\"\n```", "```py\nstrptime(\"7/25/2015 09:30:25\", \"%m/%d/%Y %H:%M:%S\") + 1:3\n## [1] \"2015-07-25 09:30:26 CST\" \"2015-07-25 09:30:27 CST\" ## [3] \"2015-07-25 09:30:28 CST\"\n```", "```py\nas.Date(\"20150610\", format = \"%Y%m%d\")\n## [1] \"2015-06-10\"\n```", "```py\nstrptime(\"20150610093215\", \"%Y%m%d%H%M%S\")\n## [1] \"2015-06-10 09:32:15 CST\"\n```", "```py\ndatetimes <- data.frame(\ndate = c(20150601, 20150603), \ntime = c(92325, 150621))\n```", "```py\ndt_text <- paste0(datetimes$date, datetimes$time)dt_text\n## [1] \"2015060192325\" \"20150603150621\"\nstrptime(dt_text, \"%Y%m%d%H%M%S\")\n## [1] NA \"2015-06-03 15:06:21 CST\"\n```", "```py\ndt_text2 <- paste0(datetimes$date, sprintf(\"%06d\", datetimes$time))dt_text2\n## [1] \"20150601092325\" \"20150603150621\"\nstrptime(dt_text2, \"%Y%m%d%H%M%S\")\n## [1] \"2015-06-01 09:23:25 CST\" \"2015-06-03 15:06:21 CST\"\n```", "```py\nmy_date\n## [1] \"2016-02-10\"\n```", "```py\ndate_text <- as.character(my_date) \ndate_text\n## [1] \"2016-02-10\"\n```", "```py\ndate_text + 1\n## Error in date_text + 1: non-numeric argument to binary operator\n```", "```py\nas.character(my_date, format = \"%Y.%m.%d\")\n## [1] \"2016.02.10\"\n```", "```py\nformat(my_date, \"%Y.%m.%d\")\n## [1] \"2016.02.10\"\n```", "```py\nmy_time\n## [1] \"2016-02-10 10:25:31 CST\"\nformat(my_time, \"date: %Y-%m-%d, time: %H:%M:%S\")\n## [1] \"date: 2016-02-10, time: 10:25:31\"\n```", "```py\nid,name,score \n1,A,20 \n2,B,30 \n3,C,25\n```", "```py\n2014-02-01,09:20:25,James,Ken,Hey, Ken! \n2014-02-01,09:20:29,Ken,James,Hey, how are you? \n2014-02-01,09:20:41,James,Ken, I'm ok, what about you? \n2014-02-01,09:21:03,Ken,James,I'm feeling excited! \n2014-02-01,09:21:26,James,Ken,What happens?\n```", "```py\n      Date      Time     Sender   Receiver   Message \n1  2014-02-01  09:20:25  James    Ken        Hey, Ken! \n2  2014-02-01  09:20:29  Ken      James      Hey, how are you? \n3  2014-02-01  09:20:41  James    Ken        I'm ok, what about you? \n4  2014-02-01  09:21:03  Ken      James      I'm feeling excited! \n5  2014-02-01  09:21:26  James    Ken        What happens?\n```", "```py\nread.csv(\"data/messages.txt\", header = FALSE)\n## V1V2V3V4V5V6 \n## 1 2014-02-01 09:20:25 James Ken Hey Ken! \n## 2 2014-02-01 09:20:29 Ken James Hey how are you? \n## 3 2014-02-01 09:20:41 James Ken I'm ok what about you?\n## 4 2014-02-01 09:21:03 Ken James I'm feeling excited! \n## 5 2014-02-01 09:21:26 James Ken What happens?\n```", "```py\napple: 20 \norange: missing \nbanana: 30 \npear: sent to Jerry \nwatermelon: 2 \nblueberry: 12 \nstrawberry: sent to James\n```", "```py\nfruits <- readLines(\"data/fruits.txt\") fruits\n## [1] \"apple: 20\" \"orange: missing\" \n## [3] \"banana: 30\" \"pear: sent to Jerry\" \n## [5] \"watermelon: 2\" \"blueberry: 12\" \n## [7] \"strawberry: sent to James\"\nmatches <- grep(\"^\\\\w+:\\\\s\\\\d+$\", fruits) \nmatches\n## [1] 1 3 5 6\n```", "```py\nfruits[matches]\n## [1] \"apple: 20\" \"banana: 30\" \"watermelon: 2\" \"blueberry: 12\"\n```", "```py\ngrep(\"\\\\d\", c(\"abc\", \"a12\", \"123\", \"1\"))\n## [1] 2 3 4\ngrep(\"^\\\\d$\", c(\"abc\", \"a12\", \"123\", \"1\"))\n## [1] 4\n```", "```py\nlibrary(stringr)\nmatches <- str_match(fruits, \"^(\\\\w+):\\\\s(\\\\d+)$\")\nmatches\n##      [,1]            [,2]         [,3]\n## [1,] \"apple: 20\"     \"apple\"      \"20\"\n## [2,] NA              NA           NA  \n## [3,] \"banana: 30\"    \"banana\"     \"30\"\n## [4,] NA              NA           NA  \n## [5,] \"watermelon: 2\" \"watermelon\" \"2\" \n## [6,] \"blueberry: 12\" \"blueberry\"  \"12\"\n## [7,] NA              NA           NA\n```", "```py\n# transform to data frame\nfruits_df <- data.frame(na.omit(matches[, -1]), stringsAsFactors =FALSE)\n# add a header\ncolnames(fruits_df) <- c(\"fruit\",\"quantity\")\n# convert type of quantity from character to integer\nfruits_df$quantity <- as.integer(fruits_df$quantity)\n```", "```py\nfruits_df\n##    fruit  quantity\n## 1  apple      20\n## 2  banana     30\n## 3  watermelon  2\n## 4  blueberry  12\n```", "```py\ntelephone <- readLines(\"data/telephone.txt\") \ntelephone\n## [1] \"123-23451\" \"1225-3123\" \"121-45672\" \"1332-1231\" \"1212-3212\" \"123456789\"\n```", "```py\ntelephone[grep(\"^\\\\d{3}-\\\\d{5}$\", telephone)]\n## [1] \"123-23451\" \"121-45672\"\ntelephone[grep(\"^\\\\d{4}-\\\\d{4}$\", telephone)]\n## [1] \"1225-3123\" \"1332-1231\" \"1212-3212\"\n```", "```py\ntelephone[!grepl(\"^\\\\d{3}-\\\\d{5}$\", telephone) & !grepl(\"^\\\\d{4}-\\\\d{4}$\", telephone)]\n## [1] \"123456789\"\n```", "```py\n2014-02-01,09:20:29,Ken,James,Hey, how are you?\n```", "```py\n(\\d+-\\d+-\\d+),(\\d+:\\d+:\\d+),(\\w+),(\\w+),\\s*(.+)\n```", "```py\nmessages <- readLines(\"data/messages.txt\")\n```", "```py\npattern <- \"^(\\\\d+-\\\\d+-\\\\d+),(\\\\d+:\\\\d+:\\\\d+),(\\\\w+),(\\\\w+),\\\\s*(.+)$\"\nmatches <- str_match(messages, pattern)\nmessages_df <- data.frame(matches[, -1]) colnames(messages_df) <- c(\"Date\", \"Time\", \"Sender\", \"Receiver\", \"Message\")\n```", "```py\nmessages_df\n##      Date        Time    Sender   Receiver    Message \n## 1 2014-02-01   09:20:25  James    Ken         Hey, Ken! \n## 2 2014-02-01   09:20:29  Ken      James       Hey, how are you? \n## 3 2014-02-01   09:20:41  James    Ken         I'm ok, what about you? \n## 4 2014-02-01   09:21:03  Ken      James       I'm feeling excited! \n## 5 2014-02-01   09:21:26  James    Ken         What happens?\n```"]