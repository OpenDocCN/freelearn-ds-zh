- en: Chapter 5. Playing with Axes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 玩转轴
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Working with basic axes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本轴
- en: Customizing ticks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义刻度
- en: Drawing grid lines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制网格线
- en: Dynamic rescaling of axes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴的动态缩放
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: D3 was initially released without the built-in support of the Axis component.
    This situation did not last long; since axes are the universal building blocks
    in many Cartesian coordinate system-based visualization projects, it quickly became
    clear that D3 needs to provide built-in support for axes. Therefore, it was introduced
    quite early on and is continuously being enhanced ever since it was released.
    In this chapter, we will explore the usage of the Axis component and some related
    techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: D3 最初发布时没有内置的轴组件支持。这种情况并没有持续太久；由于轴是许多基于笛卡尔坐标系的可视化项目的通用构建块，很快就很清楚 D3 需要提供轴的内置支持。因此，它很早就被引入，并且自发布以来一直在不断改进。在本章中，我们将探讨轴组件的使用和一些相关技术。
- en: Working with basic axes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本轴
- en: In this recipe, we will focus on introducing the basic concepts and supports
    of the Axis component in D3 while covering different types and features of Axis
    as well as their **SVG** structures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将专注于介绍 D3 轴组件的基本概念和支持，同时涵盖轴的不同类型和功能以及它们的 **SVG** 结构。
- en: Getting Ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html)'
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s first take a look at the following code sample:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看以下代码示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code produces a visual output with only the four buttons shown
    in the following screenshot. Once you click on **horizontal bottom**, it shows
    the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了一个只显示以下截图中的四个按钮的视觉输出。一旦你点击 **水平底部**，它将显示以下内容：
- en: '![How to do it...](img/2162OS_05_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_05_01.jpg)'
- en: Horizontal Axis
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 水平轴
- en: '![How to do it...](img/2162OS_05_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_05_02.jpg)'
- en: Vertical Axis
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直轴
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first step in this recipe is to create the `svg` element which will be used
    to render our axes. This is done by the `createSvg` function, which is defined
    on line `A`, and using D3 `append` and `attr` modifier functions shown on line
    `B` and `C`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的第一步是创建一个将用于渲染我们的轴的 `svg` 元素。这是通过定义在行 `A` 上的 `createSvg` 函数完成的，并使用 D3 的 `append`
    和 `attr` 修改器函数，如行 `B` 和 `C` 所示。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is the first recipe in this book that uses SVG instead of HTML element
    since D3 Axis component only supports SVG. If you are not familiar with SVG standard,
    don't worry; we will cover it in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*. While for the purpose of this chapter, some
    of the basic and limited SVG concepts will be introduced when they are used by
    D3 Axis component.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中第一个使用 SVG 而不是 HTML 元素的食谱，因为 D3 轴组件仅支持 SVG。如果你不熟悉 SVG 标准，不要担心；我们将在 [第7章](ch07.html
    "第7章. 进入形状") 中详细介绍它，*进入形状*。而在此章中，我们将介绍一些基本和有限的 SVG 概念，当它们被 D3 轴组件使用时。
- en: 'Let''s look at how we created the SVG canvas in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码中我们是如何创建 SVG 画布的：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we are ready to render the axes on this `svg` canvas. The `renderAxis`
    function is designed to do exactly just that. On line `D`, we first create an
    Axis component using the `d3.svg.axis` function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好在这个 `svg` 画布上渲染轴。`renderAxis` 函数正是为此而设计的。在行 `D` 上，我们首先使用 `d3.svg.axis`
    函数创建一个轴组件：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'D3 Axis is designed to work out of the box with D3 quantitative, time, and
    ordinal scales. Axis scale is provided using the `scale()` function (see line
    `E`). In this example, we render three different axes with the following scales:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: D3 轴被设计为与 D3 定量、时间和序数刻度无缝工作。轴刻度是通过 `scale()` 函数提供的（见行 `E`）。在这个例子中，我们使用以下刻度渲染了三个不同的轴：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second customization we have done with the `axis` object is its orient.
    Orient tells D3 how this axis will be placed (orientation), therefore, how it
    should be rendered, whether horizontally or vertically. D3 supports four different
    orient configurations for an axis:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 `axis` 对象进行的第二次定制是其 `orient`。`orient` 告诉 D3 这个轴将如何放置（方向），因此，它应该如何渲染，是水平还是垂直。D3
    支持四种不同的轴 `orient` 配置：
- en: '`top`: A horizontal axis with labels placed on top of the axis'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`：一个水平轴，标签位于轴的顶部'
- en: '`bottom`: A horizontal axis with labels placed at the bottom of the axis'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bottom`：一个水平轴，标签位于轴的底部'
- en: '`left`: A vertical axis with labels placed on the left hand side of the axis'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left`：一个垂直轴，标签位于轴的左侧'
- en: '`right`: A vertical axis with labels placed on the right hand side of the axis'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right`：一个垂直轴，标签位于轴的右侧'
- en: On line `G`, we set the number of ticks to `5`. This tells D3, ideally how many
    ticks we want to render for this axis, however, D3 might choose to render slightly
    more or less ticks based on the available space and its own calculation. We will
    explore Axis ticks configuration in detail in the next recipe.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `G`，我们将刻度数设置为 `5`。这告诉 D3，理想情况下我们希望为此轴渲染多少个刻度，然而，D3 可能会选择根据可用空间和自己的计算渲染稍微更多或更少的刻度。我们将在下一食谱中详细探讨轴刻度配置。
- en: 'Once the axis is defined, the final step in this creation process is to create
    a `svg:g` container element, which will then be used to host all SVG structures
    that are required to render an axis:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了轴，创建过程中的最后一步是创建一个 `svg:g` 容器元素，然后它将被用来托管渲染轴所需的所有 SVG 结构：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Having a `g` element to contain all SVG elements related to an axis is not only
    a good practice but also a requirement of D3 axis component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个 `g` 元素来包含与一个轴相关的所有 SVG 元素不仅是一种良好的实践，也是 D3 轴组件的要求。
- en: Most of the logic in this code snippet is related to the calculation of where
    to draw the axis on `svg` canvas using the `transform` attribute (see line `H`).
    In the preceding code example, to shift the axis using offsets we used the `translate`
    SVG transformation, which allows us to shift an element using a distance parameter
    that is defined with the coordinates in *x* and *y*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段中的大部分逻辑都与使用 `transform` 属性在 `svg` 画布上计算绘制轴的位置相关（见行 `H`）。在前面的代码示例中，为了使用偏移量移动轴，我们使用了
    `translate` SVG 变换，这允许我们使用定义在 *x* 和 *y* 坐标中的距离参数来移动元素。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'SVG transformation will be discussed in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, or you can refer to the following URL for
    more information on this topic:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 变换将在第 7 章（“形状塑造”）中详细讨论，或你可以参考以下 URL 获取有关此主题的更多信息：
- en: '[http://www.w3.org/TR/SVG/coords.html#TranslationDefined](http://www.w3.org/TR/SVG/coords.html#TranslationDefined)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/SVG/coords.html#TranslationDefined](http://www.w3.org/TR/SVG/coords.html#TranslationDefined)'
- en: 'The more relevant part of this code is on line `I`, where the `d3.selection.call`
    function is used with the `axis` object being passed in as the parameter. The
    `d3.selection.call` function invokes the given function (in our case the `axis`
    object) with the current selection passed in as an argument. In other words, the
    function being passed into the `d3.selection.call` function should have the following
    form:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码中更相关的部分在行 `I`，其中使用了 `d3.selection.call` 函数，并将 `axis` 对象作为参数传递。`d3.selection.call`
    函数使用当前选择作为参数调用给定的函数（在我们的情况下是 `axis` 对象）。换句话说，传递给 `d3.selection.call` 函数的函数应具有以下形式：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `d3.selection.call` function also allows you to pass in additional arguments
    to the invoking function. For more information visit the following link:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.selection.call` 函数还允许你向调用函数传递额外的参数。更多信息请访问以下链接：'
- en: '[https://github.com/mbostock/d3/wiki/Selections#wiki-call](https://github.com/mbostock/d3/wiki/Selections#wiki-call)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mbostock/d3/wiki/Selections#wiki-call](https://github.com/mbostock/d3/wiki/Selections#wiki-call)'
- en: 'Once the D3 Axis component is called, it will take care of the rest and automatically
    create all necessary SVG elements for an axis (see line I). For example, the horizontal-bottom
    time axis in the example shown in this recipe shown in this recipe has the following
    complicated SVG structure automatically generated, which we don''t really need
    to know much about:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用 D3 轴组件，它将负责其余工作并自动创建轴所需的所有必要的 SVG 元素（见行 I）。例如，本食谱中所示示例的水平底部时间轴具有以下自动生成的复杂
    SVG 结构，我们实际上不需要了解太多：
- en: '![How it works...](img/2162OS_05_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/2162OS_05_03.jpg)'
- en: Horizontal bottom time Axis SVG structure
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 水平底部时间轴 SVG 结构
- en: Customizing ticks
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义刻度
- en: We already saw how to use the `ticks` function in the previous recipe. This
    is the simplest ticks-related customization you can do on a D3 axis. In this recipe,
    we will cover some of the most common and useful ticks-related customizations
    with D3 axis.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的食谱中看到了如何使用`ticks`函数。这是在D3轴上可以进行的最简单的刻度相关自定义。在本食谱中，我们将介绍一些最常见和有用的与刻度相关的自定义。
- en: Getting Ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html)'
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following code example, we will customize the sub-ticks, padding, and
    formatting of its label. Let''s take a look at the code snippet first:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将自定义子刻度、填充和标签的格式。让我们先看看代码片段：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成以下视觉输出：
- en: '![How to do it...](img/2162OS_05_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_05_04.jpg)'
- en: Customized Axis ticks
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义轴刻度线
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The focus of this recipe is the highlighted lines after the `ticks` function.
    As we have mentioned before, the `ticks` function provides D3 a hint on how many
    ticks an axis should contain. After setting the number of ticks, in this recipe,
    we continue to customize the ticks through further function calls. On line `A`,
    the `ticksSubdivide` function is used to similarly provide a hint to D3 on the
    number of subdivides an axis should render between each tick. Then on line `B`,
    the `tickPadding` function was used to specify the amount of space (in pixels)
    between tick labels and the axis. Finally, a custom function called `tickFormat`
    was provided on line `C` to append a percentage sign to the value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的重点是`ticks`函数之后的突出显示的行。正如我们之前提到的，`ticks`函数为D3提供了一个提示，说明轴应该包含多少个刻度。在设置刻度数量之后，在本食谱中，我们继续通过进一步的函数调用来进一步自定义刻度。在行`A`中，使用了`ticksSubdivide`函数，以类似的方式为D3提供提示，说明轴应该在每个刻度之间渲染多少个子刻度。然后在行`B`中，使用了`tickPadding`函数来指定刻度标签和轴之间的空间（以像素为单位）。最后，在行`C`提供了一个自定义函数`tickFormat`，用于将百分号附加到值上。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the aforementioned functions and other ticks-related
    customizations visit the D3 Wiki at the following URL:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于上述函数和其他与刻度相关的自定义信息，请访问以下URL的D3 Wiki：
- en: '[https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks)'
- en: Drawing grid lines
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制网格线
- en: Quite often, we need horizontal and vertical grid lines to be drawn in consistency
    with ticks on both *x* and *y* axes. As we have shown in the previous recipe,
    typically we don't have or don't want to have precise control of how ticks are
    rendered on D3 axes. Therefore, we might not know how many ticks are present and
    their values, before they are rendered. This is especially true if you are building
    a re-usable visualization library where it is impossible to know the tick configuration
    ahead of time. In this recipe, we will explore some useful techniques of drawing
    consistent grid lines on Axis without actually needing to know the tick values.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 很频繁地，我们需要在*x*和*y*轴的刻度上绘制水平和垂直网格线，以保持与刻度的一致性。正如我们在前面的食谱中所示，通常我们不会或不想对D3轴上刻度的渲染方式有精确的控制。因此，在它们渲染之前，我们可能不知道有多少刻度和它们的值。这尤其适用于你正在构建一个可重用的可视化库，在这种情况下，你无法提前知道刻度配置。在本食谱中，我们将探讨一些在轴上绘制一致网格线的技术，而实际上并不需要知道刻度值。
- en: Getting Ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html)'
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, let''s take a look at how we draw grid lines in code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何在代码中绘制网格线：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous code generates the following visual output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成以下视觉输出：
- en: '![How to do it...](img/2162OS_05_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_05_05.jpg)'
- en: Axes and grid lines
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 轴线和网格线
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, two axes *x* and *y* were created in the `renderXAxis` and `renderYAxis`
    functions, respectively. Let's take a look at how the x axis was rendered.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`renderXAxis` 和 `renderYAxis` 函数分别创建了两个轴 *x* 和 *y*。让我们看看 x 轴是如何渲染的。
- en: 'Once we understand how to render *x* axis and its grid lines, the logic used
    to render *y* axis can be easily understood since they are almost identical. The
    *x* axis and its scale were defined with no complications, as we have already
    demonstrated a number of times throughout this chapter. An `svg:g` element was
    created to contain the *x* axis structures. This `svg:g` element was placed at
    the bottom of the chart using a translate transformation, as shown on line A:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们了解了如何渲染 *x* 轴及其网格线，由于它们几乎相同，渲染 *y* 轴的逻辑也容易理解。*x* 轴及其刻度没有复杂的定义，正如我们在本章中已经多次演示的那样。创建了一个
    `svg:g` 元素来包含 *x* 轴结构。这个 `svg:g` 元素使用平移变换放置在图表的底部，如线 A 所示：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is important to remember that the translate transformation changes the frame
    of reference for coordinates when it comes to any of its sub-elements. For example,
    within this `svg:g` element, if we create a point with its coordinates set as
    `(0, 0)`, then when we draw this point on the SVG canvas, it will be actually
    placed as `(margin, height – margin)`. This is because all subelements within
    the `svg:g` element are automatically transformed to this base coordinate, hence,
    the shift of the frame of reference. Equipped with this understanding, let''s
    see how dynamic grid lines can be generated after the axis is rendered:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，当涉及到其任何子元素时，平移变换会改变坐标的参考框架。例如，在这个 `svg:g` 元素内部，如果我们创建一个坐标设置为 `(0, 0)`
    的点，那么当我们在这个 SVG 画布上绘制这个点时，它实际上会被放置在 `(margin, height – margin)`。这是因为 `svg:g` 元素内的所有子元素都会自动转换到这个基准坐标，因此，参考框架发生了偏移。有了这个理解，让我们看看在轴渲染后如何生成动态网格线：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the axis has been rendered, we can select all the ticks elements on an
    axis by selecting the `g.tick`, since each of them is grouped by its own `svg:g`
    element (see line `B`). Then on line `C`, we append a new `svg:line` element to
    each `svg:g` tick element. SVG line element is the simplest shape provided by
    the SVG standard. It has four main attributes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 轴渲染完成后，我们可以通过选择 `g.tick` 来选择轴上的所有刻度元素，因为每个刻度都由其自己的 `svg:g` 元素分组（见线 `B`）。然后在线
    `C` 上，我们为每个 `svg:g` 刻度元素附加一个新的 `svg:line` 元素。SVG 线元素是 SVG 标准提供的最简单形状。它有四个主要属性：
- en: '**x1** and **y1** attributes define the point of origin of this line'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x1** 和 **y1** 属性定义了这条线的起点'
- en: '**x2** and **y2** attributes define the point of destination'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x2** 和 **y2** 属性定义了目标点'
- en: In our case, here we simply set x1, y1, and x2 to `0`, since each `g.tick` element
    has already been translated to its position on the axis, therefore, we only need
    to change the y2 attribute in order to draw a vertical grid line. The y2 attribute
    is set to `–(height – 2 * margin)`. The reason why the coordinate is negative
    was because the entire `g.x-axis` has been shifted down to `(height – margin)`,
    as mentioned in the previous code. Therefore, in absolute coordinate terms `y2
    =` `(height – margin)` `– (height – 2 * margin) = margin`, which is the top of
    the vertical grid line we want to draw from the *x* axis.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们简单地设置了 x1、y1 和 x2 为 `0`，因为每个 `g.tick` 元素已经转换到了轴上的位置，因此，我们只需要更改 y2
    属性来绘制垂直网格线。y2 属性被设置为 `–(height – 2 * margin)`。坐标为负的原因是，正如前一段代码中提到的，整个 `g.x-axis`
    已经向下移动到 `(height – margin)`。因此，在绝对坐标下 `y2 =` `(height – margin)` `– (height –
    2 * margin) = margin`，这是我们想要从 *x* 轴绘制的垂直网格线的顶部。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In SVG coordinates, `(0, 0)` denotes the top-left corner of the SVG canvas.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVG 坐标中，`(0, 0)` 表示 SVG 画布的左上角。
- en: 'This is what the *x* axis in SVG structure with associated grid line looks
    like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 SVG 结构中带有相关网格线的 *x* 轴的样子：
- en: '![How it works...](img/2162OS_05_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/2162OS_05_06.jpg)'
- en: x axis with grid lines SVG structure
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 带有网格线的 x 轴 SVG 结构
- en: As we can see in the preceding screenshot, an `svg:line` element representing
    the grid line was added into the **"g.tick"** `svg:g` container element as discussed
    earlier in this section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，一个代表网格线的 `svg:line` 元素被添加到前面在本节中讨论的 **"g.tick"** `svg:g` 容器元素中。
- en: 'The *y* axis grid lines are generated using the **identical technique**; the
    only difference is that instead of setting the `y2` attribute on the grid lines,
    as we did for the *x* axis, we change the `x2` attribute, since the lines are
    horizontal (see line `F`):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*Y*轴的网格线使用**相同的技巧**生成；唯一的区别是，我们不是像对*x*轴那样设置网格线的`y2`属性，而是更改`x2`属性，因为线条是水平的（见第`F`行）：'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Dynamic rescaling of axes
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 坐标轴的动态缩放
- en: In some cases, the scale used by axes might change when triggered by user interaction
    or changes from data feeds. For example, a user might change the time range for
    the visualization. This kind of change also needs to be reflected by rescaling
    the axes. In this recipe, we will explore how this can be achieved dynamically
    while also redrawing the grid lines associated with each tick.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，当由用户交互或数据源变化触发时，坐标轴使用的比例可能会改变。例如，用户可能会更改可视化的时间范围。这种变化也需要通过调整坐标轴的比例来反映。在本食谱中，我们将探讨如何动态地实现这一点，同时重新绘制与每个刻度相关的网格线。
- en: Getting Ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html)'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here is the code showing how to perform dynamic rescaling:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是执行动态缩放的代码示例：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code generates the following effects:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成了以下效果：
- en: '![How to do it...](img/2162OS_05_07.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/2162OS_05_07.jpg)'
- en: Dynamic axes rescaling
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 动态坐标轴缩放
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Due to limited scope in this book, the *y* axis-related code has been omitted
    from the code example in this recipe. See the code example available online for
    a complete reference.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的范围有限，本食谱中的代码示例省略了与*Y*轴相关的代码。请参阅在线可用的完整代码示例。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As soon as you click the **ReScale** button on the screen, you will notice both
    the axes rescale while all the ticks as well as grid lines get redrawn accompanied
    with a smooth transition effect. In this section, we will focus on how rescaling
    works and leave the transition effect for the next chapter *Transition with Style*.
    Most of the heavy lifting in this recipe is done by the `rescale` function defined
    on line `A`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在屏幕上点击**ReScale**按钮，您将注意到坐标轴会缩放，同时所有刻度以及网格线都会随着平滑的过渡效果重新绘制。在本节中，我们将重点关注缩放的工作原理，并将过渡效果留到下一章*Transition
    with Style*中。本食谱中的大部分繁重工作都是由定义在第`A`行的`rescale`函数完成的。
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To rescale an axis, we simply change its domain (see line `B`). If you recall,
    the scale domain represents the data domain, while its range corresponds to visual
    domain. Therefore, visual range should remain constant since we are not resizing
    the SVG canvas. Once updated, we call the `xAxis` again by passing in the `svg:g`
    element for the *x* axis (see line `C`); this simple call will take care of the
    axis updating, hence, our job is done with the axis. In the next step, we also
    need to update and redraw all the grid lines since the domain change will also
    change all the ticks:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要缩放一个轴，我们只需更改其域（见第`B`行）。如果您还记得，比例域表示数据域，而其范围对应于视觉域。因此，视觉范围应保持不变，因为我们没有调整SVG画布的大小。更新后，我们再次调用`xAxis`，传入`svg:g`元素作为*x*轴（见第`C`行）；这个简单的调用将处理轴的更新，因此，我们的工作就完成了。在下一步中，我们还需要更新和重新绘制所有网格线，因为域的变化也会改变所有刻度：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is achieved by removing every grid line by calling the `remove()` function,
    as shown on line `D`, and then recreating the grid lines for all the new ticks
    on rescaled axes. This approach effectively keeps all grid lines consistent with
    the ticks during rescaling.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过调用`remove()`函数移除每条网格线来实现的，如第`D`行所示，然后为缩放后的轴上的所有新刻度重新创建网格线。这种方法有效地使所有网格线在缩放过程中与刻度保持一致。
