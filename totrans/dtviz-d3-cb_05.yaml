- en: Chapter 5. Playing with Axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with basic axes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing ticks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing grid lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic rescaling of axes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3 was initially released without the built-in support of the Axis component.
    This situation did not last long; since axes are the universal building blocks
    in many Cartesian coordinate system-based visualization projects, it quickly became
    clear that D3 needs to provide built-in support for axes. Therefore, it was introduced
    quite early on and is continuously being enhanced ever since it was released.
    In this chapter, we will explore the usage of the Axis component and some related
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Working with basic axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will focus on introducing the basic concepts and supports
    of the Axis component in D3 while covering different types and features of Axis
    as well as their **SVG** structures.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/basic-axes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first take a look at the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces a visual output with only the four buttons shown
    in the following screenshot. Once you click on **horizontal bottom**, it shows
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Horizontal Axis
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Vertical Axis
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in this recipe is to create the `svg` element which will be used
    to render our axes. This is done by the `createSvg` function, which is defined
    on line `A`, and using D3 `append` and `attr` modifier functions shown on line
    `B` and `C`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the first recipe in this book that uses SVG instead of HTML element
    since D3 Axis component only supports SVG. If you are not familiar with SVG standard,
    don't worry; we will cover it in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*. While for the purpose of this chapter, some
    of the basic and limited SVG concepts will be introduced when they are used by
    D3 Axis component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we created the SVG canvas in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to render the axes on this `svg` canvas. The `renderAxis`
    function is designed to do exactly just that. On line `D`, we first create an
    Axis component using the `d3.svg.axis` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'D3 Axis is designed to work out of the box with D3 quantitative, time, and
    ordinal scales. Axis scale is provided using the `scale()` function (see line
    `E`). In this example, we render three different axes with the following scales:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The second customization we have done with the `axis` object is its orient.
    Orient tells D3 how this axis will be placed (orientation), therefore, how it
    should be rendered, whether horizontally or vertically. D3 supports four different
    orient configurations for an axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '`top`: A horizontal axis with labels placed on top of the axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bottom`: A horizontal axis with labels placed at the bottom of the axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`left`: A vertical axis with labels placed on the left hand side of the axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right`: A vertical axis with labels placed on the right hand side of the axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On line `G`, we set the number of ticks to `5`. This tells D3, ideally how many
    ticks we want to render for this axis, however, D3 might choose to render slightly
    more or less ticks based on the available space and its own calculation. We will
    explore Axis ticks configuration in detail in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the axis is defined, the final step in this creation process is to create
    a `svg:g` container element, which will then be used to host all SVG structures
    that are required to render an axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having a `g` element to contain all SVG elements related to an axis is not only
    a good practice but also a requirement of D3 axis component.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the logic in this code snippet is related to the calculation of where
    to draw the axis on `svg` canvas using the `transform` attribute (see line `H`).
    In the preceding code example, to shift the axis using offsets we used the `translate`
    SVG transformation, which allows us to shift an element using a distance parameter
    that is defined with the coordinates in *x* and *y*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SVG transformation will be discussed in detail in [Chapter 7](ch07.html "Chapter 7. Getting
    into Shape"), *Getting into Shape*, or you can refer to the following URL for
    more information on this topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/SVG/coords.html#TranslationDefined](http://www.w3.org/TR/SVG/coords.html#TranslationDefined)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The more relevant part of this code is on line `I`, where the `d3.selection.call`
    function is used with the `axis` object being passed in as the parameter. The
    `d3.selection.call` function invokes the given function (in our case the `axis`
    object) with the current selection passed in as an argument. In other words, the
    function being passed into the `d3.selection.call` function should have the following
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `d3.selection.call` function also allows you to pass in additional arguments
    to the invoking function. For more information visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mbostock/d3/wiki/Selections#wiki-call](https://github.com/mbostock/d3/wiki/Selections#wiki-call)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the D3 Axis component is called, it will take care of the rest and automatically
    create all necessary SVG elements for an axis (see line I). For example, the horizontal-bottom
    time axis in the example shown in this recipe shown in this recipe has the following
    complicated SVG structure automatically generated, which we don''t really need
    to know much about:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Horizontal bottom time Axis SVG structure
  prefs: []
  type: TYPE_NORMAL
- en: Customizing ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already saw how to use the `ticks` function in the previous recipe. This
    is the simplest ticks-related customization you can do on a D3 axis. In this recipe,
    we will cover some of the most common and useful ticks-related customizations
    with D3 axis.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/ticks.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code example, we will customize the sub-ticks, padding, and
    formatting of its label. Let''s take a look at the code snippet first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customized Axis ticks
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The focus of this recipe is the highlighted lines after the `ticks` function.
    As we have mentioned before, the `ticks` function provides D3 a hint on how many
    ticks an axis should contain. After setting the number of ticks, in this recipe,
    we continue to customize the ticks through further function calls. On line `A`,
    the `ticksSubdivide` function is used to similarly provide a hint to D3 on the
    number of subdivides an axis should render between each tick. Then on line `B`,
    the `tickPadding` function was used to specify the amount of space (in pixels)
    between tick labels and the axis. Finally, a custom function called `tickFormat`
    was provided on line `C` to append a percentage sign to the value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the aforementioned functions and other ticks-related
    customizations visit the D3 Wiki at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-ticks)'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing grid lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often, we need horizontal and vertical grid lines to be drawn in consistency
    with ticks on both *x* and *y* axes. As we have shown in the previous recipe,
    typically we don't have or don't want to have precise control of how ticks are
    rendered on D3 axes. Therefore, we might not know how many ticks are present and
    their values, before they are rendered. This is especially true if you are building
    a re-usable visualization library where it is impossible to know the tick configuration
    ahead of time. In this recipe, we will explore some useful techniques of drawing
    consistent grid lines on Axis without actually needing to know the tick values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/grid-line.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s take a look at how we draw grid lines in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Axes and grid lines
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, two axes *x* and *y* were created in the `renderXAxis` and `renderYAxis`
    functions, respectively. Let's take a look at how the x axis was rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we understand how to render *x* axis and its grid lines, the logic used
    to render *y* axis can be easily understood since they are almost identical. The
    *x* axis and its scale were defined with no complications, as we have already
    demonstrated a number of times throughout this chapter. An `svg:g` element was
    created to contain the *x* axis structures. This `svg:g` element was placed at
    the bottom of the chart using a translate transformation, as shown on line A:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It is important to remember that the translate transformation changes the frame
    of reference for coordinates when it comes to any of its sub-elements. For example,
    within this `svg:g` element, if we create a point with its coordinates set as
    `(0, 0)`, then when we draw this point on the SVG canvas, it will be actually
    placed as `(margin, height – margin)`. This is because all subelements within
    the `svg:g` element are automatically transformed to this base coordinate, hence,
    the shift of the frame of reference. Equipped with this understanding, let''s
    see how dynamic grid lines can be generated after the axis is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the axis has been rendered, we can select all the ticks elements on an
    axis by selecting the `g.tick`, since each of them is grouped by its own `svg:g`
    element (see line `B`). Then on line `C`, we append a new `svg:line` element to
    each `svg:g` tick element. SVG line element is the simplest shape provided by
    the SVG standard. It has four main attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1** and **y1** attributes define the point of origin of this line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x2** and **y2** attributes define the point of destination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, here we simply set x1, y1, and x2 to `0`, since each `g.tick` element
    has already been translated to its position on the axis, therefore, we only need
    to change the y2 attribute in order to draw a vertical grid line. The y2 attribute
    is set to `–(height – 2 * margin)`. The reason why the coordinate is negative
    was because the entire `g.x-axis` has been shifted down to `(height – margin)`,
    as mentioned in the previous code. Therefore, in absolute coordinate terms `y2
    =` `(height – margin)` `– (height – 2 * margin) = margin`, which is the top of
    the vertical grid line we want to draw from the *x* axis.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SVG coordinates, `(0, 0)` denotes the top-left corner of the SVG canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the *x* axis in SVG structure with associated grid line looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: x axis with grid lines SVG structure
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding screenshot, an `svg:line` element representing
    the grid line was added into the **"g.tick"** `svg:g` container element as discussed
    earlier in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *y* axis grid lines are generated using the **identical technique**; the
    only difference is that instead of setting the `y2` attribute on the grid lines,
    as we did for the *x* axis, we change the `x2` attribute, since the lines are
    horizontal (see line `F`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic rescaling of axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, the scale used by axes might change when triggered by user interaction
    or changes from data feeds. For example, a user might change the time range for
    the visualization. This kind of change also needs to be reflected by rescaling
    the axes. In this recipe, we will explore how this can be achieved dynamically
    while also redrawing the grid lines associated with each tick.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter5/rescaling.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the code showing how to perform dynamic rescaling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic axes rescaling
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to limited scope in this book, the *y* axis-related code has been omitted
    from the code example in this recipe. See the code example available online for
    a complete reference.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As soon as you click the **ReScale** button on the screen, you will notice both
    the axes rescale while all the ticks as well as grid lines get redrawn accompanied
    with a smooth transition effect. In this section, we will focus on how rescaling
    works and leave the transition effect for the next chapter *Transition with Style*.
    Most of the heavy lifting in this recipe is done by the `rescale` function defined
    on line `A`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To rescale an axis, we simply change its domain (see line `B`). If you recall,
    the scale domain represents the data domain, while its range corresponds to visual
    domain. Therefore, visual range should remain constant since we are not resizing
    the SVG canvas. Once updated, we call the `xAxis` again by passing in the `svg:g`
    element for the *x* axis (see line `C`); this simple call will take care of the
    axis updating, hence, our job is done with the axis. In the next step, we also
    need to update and redraw all the grid lines since the domain change will also
    change all the ticks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is achieved by removing every grid line by calling the `remove()` function,
    as shown on line `D`, and then recreating the grid lines for all the new ticks
    on rescaled axes. This approach effectively keeps all grid lines consistent with
    the ticks during rescaling.
  prefs: []
  type: TYPE_NORMAL
