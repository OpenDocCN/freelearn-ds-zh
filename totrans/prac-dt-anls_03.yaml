- en: Overview of Python and Installing Jupyter Notebook
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a better understanding of concepts behind data literacy and
    the evolution of data analysis, let's set up our own environment to allow you
    to work with data. In this chapter, we are going to provide an introduction to
    the Python programming language along with a popular tool called Jupyter Notebook
    that's used to run commands for data analysis. We will walk through the installation
    process step by step and discuss key concepts to understand why they are required
    for data analysis. By the end of this chapter, you will have a workstation available
    to run a `hello world` program that will help in building your confidence to move
    forward into deeper concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python and using Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and retrieving data files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello World! – running your first Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Python packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here's the GitHub repository of this book: [https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter02](https://github.com/PacktPublishing/Practical-Data-Analysis-using-Jupyter-Notebook/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Further, you can download and install the required software from the following link: [https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python and using Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm going to start by admitting this chapter may become obsolete in the future
    because installing open source software on your workstation can be a painful process
    and, in some cases, is being replaced by preinstalled virtual machines or cloud
    versions. For example, Microsoft offers a free Azure subscription option for a
    cloud-hosted Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding all of the dependencies of software versions, hardware, **Operating
    System** (**OS**) differences, and library dependencies can be complex. Further,
    your IT department rules on software installations in enterprise environments
    may have security restrictions that prohibit access to your workstation filesystem.
    In all likelihood, with more innovation in cloud computing, most of the steps
    will already be done ahead of time, eliminating the need to install software altogether.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, I'm going to walk you through the process of installing Python
    and Jupyter Notebook, pointing out tips and pitfalls to educate you on key concepts
    along the way. I would compare using these technology tools to work with data to
    driving a car. The ability to drive should not be dependent on your ability to
    repair the car engine! Just knowing that you need an engine should be sufficient
    to drive and move forward. So, my focus is on setting up your workstation for
    data analysis quickly without focusing on the layers of details behind these powerful
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: The open source project that created the Jupyter Notebook app evolved from iPython
    back in 2014\. Many of the features that existed in iPython still exist today
    in Jupyter, for example, the interactive GUI to run Python commands and parallel
    processing. There is a kernel to control the input/output between your computer's
    CPU, memory, and filesystem. Finally, there's also the feature of a notebook that
    collects all of the commands, code, charts, and comments in a single shareable
    file with the `.ipynb` extension.
  prefs: []
  type: TYPE_NORMAL
- en: Just to give some context of how popular Jupyter notebooks have become for data
    analysis, I discovered a public GitHub repository by Peter Parente that collects
    a daily count of the number of public `.pynb` files found in GitHub since 2014\.
    The growth is exponential, as the number grew from just over 65,000 to 5.7 million
    by November 2019, which means it has been doubling every year for the last five
    years!
  prefs: []
  type: TYPE_NORMAL
- en: 'The first prerequisite to using a Jupyter notebook is installing Python. We
    are going to use Python version 3.3 or greater and there are two methods you can
    use to install the software: a direct download or a package manager. A direct
    download will have more control over the installation on your workstation but
    then it requires additional time to manage dependent libraries. That said, using
    a package manager to install Python has become preferred method, hence, I cover
    this method in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Python is a powerful coding language with support on multiple OS platforms,
    including Windows, macOS, and Linux. I encourage you to read more about the history
    of this powerful software language and the creator, Guido van Rossum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python, at its core, is a command-line programming language, so you must be
    comfortable with running some commands from a prompt. When we have finished installation,
    you will have a Python command-line window, which will look like the following
    screenshot if your workstation has Windows OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa36b410-bffb-450e-a3bd-5644cafed652.png)'
  prefs: []
  type: TYPE_IMG
- en: Think of the Python installation as a means to an end because what we really
    want to use as data analysts is a Jupyter notebook, which is also known as an
    **Integrated Development Environment** (**IDE**) used to run code and call libraries
    in a self-contained **Graphical User Interface** (**GUI**).
  prefs: []
  type: TYPE_NORMAL
- en: Since I recommend using a package manager for installation, the first decision
    you must make is which package manager to use for the installation on your computer.
    A package manager is designed to streamline the versions and layers of dependencies
    between the open source libraries, your OS, and software. The most common ones
    are `conda`, `pip`, or `docker`.
  prefs: []
  type: TYPE_NORMAL
- en: From researching the differences, I prefer `conda` over `pip` for someone just
    getting started, especially if you are unfamiliar with running command-line commands
    and managing software installs directly on your PC. For an app-store-like experience,
    where all you have to do is download, install with a few prompts, and then launch
    the software, I would recommend Anaconda especially since it includes Python,
    several popular libraries required for data analysis, and Jupyter all as part
    of the download package.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the goal is to get Jupyter Notebook up and running on your workstation,
    so feel free to choose installation alternatives, especially if you prefer a **Command-Line
    Interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install Anaconda. For this walkthrough, I have selected
    a Windows OS installer but the screenshots of installation will be similar regardless
    of which one is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the software by choosing which installer is required based on your
    workstation''s OS. To do this, navigate to the Anaconda Distribution page, which
    should look similar to the following screenshot and is found on [https://www.anaconda.com/](https://www.anaconda.com/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10ad98c5-b081-4d46-abb2-fedd0f5009cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see the Setup wizard as shown inthe following screenshot after you
    download the software and launch the installer on your PC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f03f00bf-ce2c-4981-a1b0-e88013a970b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the default options in the install wizard and you should see a message
    similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17b9dc57-440a-480f-a62b-1056333b715b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that Anaconda has completed the installation, you must launch the Anaconda
    Navigator application from your PC, which is shown in the following screenshot using
    a Windows OS. Since there are multiple OS options available such as Windows, macOS,
    or Ubuntu, your screen will vary from the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9695d77c-a300-48bb-aa80-3c755ea6a732.png)'
  prefs: []
  type: TYPE_IMG
- en: I think of the installation process as similar to why an artist would need to
    buy a canvas, easel, and supplies to begin painting. Now that we have a working
    Python environment installed and available to use called Anaconda, you are ready
    to launch Jupyter and create your first notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Running Jupyter and installing Python packages for data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the software is installed on your PC, launching your Jupyter notebook
    can be done in either of two ways. The first is via a command-line prompt with
    the `jupyter notebook` command from Anaconda Prompt, which will look similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c46c68a-fbd6-4901-967b-dcd8890b91c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also use the Anaconda Navigator software and click the Launch button
    from My Applications in Jupyter Notebook, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5a6c3de-96f5-4ec5-b010-f71702061099.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Either option will launch a new web browser session with the `http://localhost:8888/tree` URL, which
    is known as the Jupyter dashboard. If you do not see something similar to the
    following screenshot**,** you may need to reinstall the Anaconda software or check
    whether firewall ports are blocking commands or dependencies. In an enterprise
    setting, you may have to review your corporate policies or request IT support:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d3cb440-3ca7-4e07-a425-726613ec9423.png)'
  prefs: []
  type: TYPE_IMG
- en: If you would like to try JupyterLab instead of Jupyter Notebook, either solution
    will work. JupyterLab uses the exact same Notebook server and file format as the
    classic Jupyter Notebook so that it is fully compatible with the existing notebooks
    and kernels. The classic Notebook and JupyterLab can run side to side on the same
    computer. You can easily switch between the two interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Jupyter defaults with access to your workstation's filesystem based
    on how it was installed. This should be sufficient in most cases but if you would
    like to change the default project `home`/`root` folder, you can easily change
    it using Anaconda Prompt.Just run the `cd` command to change directory before
    you type the `jupyter notebook` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I created a `project` folder on my local `c:\` drive path on my
    Windows PC first and then ran the Anaconda Prompt window with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you walk through this example, your Command Prompt window should look like
    the following screenshot if you''re using Windows OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b16a838-8be3-4f93-a346-96012c3003da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once complete, the list of files and folders displayed in the Jupyter session
    will be blank and your session will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/614d30e9-6514-40ce-85e7-8998e9f2aa45.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now have the Jupyter software actively running on your workstation,
    ready to walk through all of the features available, which we will cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and retrieving data files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What I like about using Jupyter is that it is a self-contained solution for
    data analysis. What I mean by that statement is you can interact with the filesystem
    to add, update, and delete folders and files plus run Python commands all in one
    place. As you continue using this tool, I think you will find it much easier to
    navigate by staying in one ecosystem compared to hopping between multiple windows,
    apps, or systems on your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with getting comfortable navigating the menu options to add, edit,
    or delete files. Jupyter defaults the dashboard by listing all files and folders
    that are accessible on your workstation from the directory paths it was installed.
    This is can be configured to change the starting folder but we will use the Windows
    default. In the following screenshot, I have highlighted the important sections
    of the Jupyter dashboard with letters for easy reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a735e04-42f9-4dff-829b-9bfb213c3ad8.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **A** section, the URL defaults to `http://localhost:888/tree` when running
    on your personal workstation. This URL will change if the notebook is hosted on
    a server or cloud. Notice, as you make selections to folders or files in the **B** section,
    the URL address will change to follow the location and path of your selections.
  prefs: []
  type: TYPE_NORMAL
- en: In the **B** section, you will find a hierarchy of accessible folders or files
    that are visible to the dashboard. If you click on any file, it will attempt to
    open it in the editor, whether or not the file is usable by Jupyter. Readable
    file extensions by the editor include images in formats such as `.jpeg`, `.png`,
    and `.svg`; semi-structured data files such as `.json`, `.csv`, and `.xml`; and
    code such as `.html`, `.py` (Python), and `.js` (JavaScript). Note that the URL
    path will change from the `tree` parameter word to `edit` as it opens the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the editor does not recognize a file, it will provide an error in the first
    line and tell you why, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4eca4ee4-8e01-4f62-9e8d-4ecc13d9aaed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **C** section, you can select and filter one or more files or folders
    displayed on the dashboard. This can be used to organize your project workspace
    when creating multiple notebooks and organizing data files for analysis. Once
    any file or folder is selected, the title Select items to perform actions on them
    will change to the action buttons **Rename** and **Duplicate** and a red trashcan
    icon, which deletes the files or folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ac2ee11-4b4e-486d-8afe-8081180cfd7b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the dashboard, you will also notice the tabs labeled Files, Running, and
    Clusters. These are used by the Jupyter app to keep you oriented and track processes
    that are actively running. Clusters is an advanced feature and beyond the scope
    of this book. We have already covered the Files tab from section **B**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss the Running tab. It has two sections: Terminals, which would
    be system shell commands such as Powershell in the Windows OS, and Notebooks,
    which will show you all active notebooks that are in use. Once we create a few
    notebooks, I encourage you to refresh the browser to see which notebook files
    are active to better understand this feature. Use the Shutdown button if it becomes
    necessary to kill an active notebook that is unresponsive or taking up too much
    of your computer resources (CPU/RAM).'
  prefs: []
  type: TYPE_NORMAL
- en: In the **D** section, you will see an Upload button that allows you to add files
    to the dashboard in any folder you have navigated. The New button includes a submenu
    to create a Text File, Folder, or Python 3 Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World! – running your first Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a better understanding of the dashboard and its navigation,
    let''s create our first notebook and run some Python code. The easiest method
    is to click on the New button and select Python 3 in the submenu. This will open
    a new tab or window in your browser that looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24497712-89c5-4d68-bbe5-f734efb41129.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I recommend renaming the Untitled files of any notebook to make it easier to
    find them later. To do this, select Rename from the File menu, as shown in the
    following screenshot, and rename it `hello_world` or a relevant project name.
    Once you click on the OK button, the title bar at the top of the page will display
    the new name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6637b32-60cb-4a5a-8178-376e9c37e9f8.png)'
  prefs: []
  type: TYPE_IMG
- en: By renaming the notebook, a new file with the `.ipynb` extension will be created,
    which contains all of the contents in JSON format. This helps make the notebook
    file shareable to others and helps with version control, which is an audit trail
    of changes made in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the actual JSON metadata contents by selecting Edit Notebook Metadata from
    the Edit menu. The results will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ed1d340-88bd-40da-8de1-1be467390a5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The UI for the notebook looks very similar to other modern web software used
    today as it was designed for easy navigation. The following menu options are easy
    to use icons that are collectively called the Notebook Toolbar, which supports
    keyboard shortcuts for optimal workflow as you get more comfortable using the
    tool. You can find the User Interface Tour and Keyboard Shortcuts in the Help menu,
    as shown in the following screenshot. I recommend going through them to take a
    look at all of the features available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd688ac9-0ccf-4829-a7f2-0f25a158fed2.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you feel comfortable with the Help menu options, let's write your first
    code by typing in the `print("hello world")` command in the notebook cell, which
    has a default of `In []:`. Remember, if you are using a mouse to navigate the
    notebook, you must click on the cell to select it and have a cursor appear.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the *Enter* key after a command will only create a second line for
    more input. You must either use a keyboard shortcut, the Cell menu, or a Toolbar
    icon to execute any command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have entered the `print("hello world")` command in the cell and clicked
    on any one of the following options. The options to run the command in any cell
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the [![](img/2624475e-01cc-4beb-9fc0-6c57639db0f6.png)] button from the
    toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The screen should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84fcd699-effb-48a3-893e-6c03deaf6f14.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have created your first Jupyter notebook and run your first
    command! Click on the Close and Halt option from the File menu to return to the
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project folder hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have covered the basics, let''s walk through a directory to find
    a particular file and create a project folder hierarchy to prepare for future
    data analysis learning modules. I recommend creating a starting `projects` folder
    on your workstation to keep all of your notebooks and data organized. A standard
    enterprise directory structure will vary by company but setting up a basic structure
    with subfolders makes the process portable and helps with sharing work with others.
    An example project folder template is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/459e5358-387b-49b4-963c-bf108290fff2.png)'
  prefs: []
  type: TYPE_IMG
- en: Throughout this book, I will use chapter numbers as `projectname` to make each
    directory subfolder, such as `data` and `notebooks`, modular, independent, and
    easy to follow. Your workstation directory structure and tree should match with
    this book's GitHub repository to make it easier to synchronize your files and
    folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the classic *do as I say, not as I do* fashion and because of limitations
    with relative paths across different OS versions, the examples use the same folder
    to prevent errors throughout this book. To proceed, you can either clone or download
    all of the files and subfolders from this book''s GitHub repository, create all
    of the folders and files in the Jupyter dashboard, or create them on your workstation.
    Once completed, your project folder for this chapter should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c916a856-888e-4cc4-bdf4-4342f3543fca.png)'
  prefs: []
  type: TYPE_IMG
- en: Uploading a file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a project folder, let''s walk through the following steps
    to upload a file for analysis. You must download the file ahead of time from the
    GitHub repository URL found in the *Technical requirements* section:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `data` folder name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `source` subfolder name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Upload button at the top-right side of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `evolution_of_data_analysis.csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the blue Upload button to proceed. Once done, you''ll see a file in the
    dashboard, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b472628b-fd01-469d-a9e8-ba5bee2e5c54.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigate back to the `notebooks` folder and create a new notebook file by clicking
    on the New menu. Similar to the `hello_world` example, select Python 3 in the
    submenu to create a default `Untitled` notebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned earlier, I always rename the `Untitled` notebook before moving
    forward, so rename the notebook `evolution_of_data_analysis`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read data from a file in the notebook, you must run a few Python commands.
    These can be run all in one cell or as three separate cell entries. The commands
    to open the CSV file we uploaded earlier are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's walk through the commands line by line. First, we assigned an open command
    value of the file to the `f` variable to shorten the length of additional commands
    in the next few lines. Notice the `evolution_of_data_analysis.csv` file includes
    the directory path of `"../data/source/"`, which is required because the location
    of the active notebook, `evolution_of_data_analysis`, is in a different folder.
    The open command also includes a parameter of `r`, which means we only want to
    read the file and not edit the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second line is to print the contents of the file by passing the `f` variable along
    with the `read()` function. This will display the results in the output cell,
    which will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6680d18-35ac-4ad2-a65f-1ed2ce1a3434.png)'
  prefs: []
  type: TYPE_IMG
- en: The last line is a best practice to close the file to avoid any conflicts using
    the file later or in the filesystem of your OS. Once you verify that you can see
    the contents of the CSV file in your notebook, click on the Close and Halt option
    from the File menu to return to the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Python packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before wrapping up this chapter, let's explore the different Python packages
    required with data analysis and validate they are available to use in the Jupyter
    Notebook app. These packages have evolved over time and are open source so programmers
    can contribute and improve the source code.
  prefs: []
  type: TYPE_NORMAL
- en: The version of the Python packages will increment over time depending on when
    you install `conda` or `pip` (package manager) on your machine. If you receive
    errors running commands, validate they match the versions used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: We will go into more depth about each individual package as we use their awesome
    features in future chapters. The focus in this chapter is to verify the specific
    libraries are available, and there are a few different approaches to use such
    as inspecting the installation folder for specific files on your workstation or
    running commands from a Python command line. I find the easiest method is to run
    a few simple commands in a new notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to the `notebooks` folder and create a new notebook file by clicking
    on the New menu and select Python 3 in the submenu to create a default `Untitled` notebook.
    To stay consistent with best practices, be sure to rename the notebook `verify_python_packages` before
    moving forward.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps to verify whether each Python package is available are similar with
    slight variations to the code. The first one will be `pandas`, which will make
    it easier to complete common data analysis techniques such as pivoting, cleaning,
    merging and grouping datasets all in one place without going back to the source
    of record.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify whether the `pandas` library is available in Jupyter, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in `import pandas as pd` in the `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the cell using the preferred method discussed earlier in the *Installing
    Python and using Jupyter Notebook* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button from the toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in the `np.__version__` command in the next `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the cell using the preferred method from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the output cell displayed as `Out []`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version of `pandas` should be **0.18.0** or greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will repeat these steps for each of the following required packages
    used in this book: `numpy`, `sklearn`, `matplotlib`, and `scipy`. Note that I
    have used the commonly known shortcut names for each library to make it consistent
    with best practices found in the industry.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, `pandas` has been shortened to `pd`, so as you call features from
    each library, you can just use the shortcut name.
  prefs: []
  type: TYPE_NORMAL
- en: Additional packages can and should be used depending on the type of analysis
    required, variations of the data input, and advancement of the Python ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NumPy** is a powerful and common mathematical extension of Python created
    to perform fast numeric calculations against a list of values that is known as
    an array. We will learn more about the power of NumPy features in [Chapter 3](dd40977f-7c89-4933-944f-d9760d3ca217.xhtml), *Getting
    Started with NumPy*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify whether the `numpy` library is available in Jupyter, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in `import numpy as np` in the `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the cell using the preferred method discussed earlier in the *Installing
    Python and using Jupyter Notebook* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button from the toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in the `np.__version__` command in the next `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the cell using the preferred method from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the output cell displayed as `Out []`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version of NumPy should be **1.10.4** or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for sklearn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sklearn` is an advanced open source data science library used for clustering
    and regression analysis. While we will not leverage all of the advanced capabilities
    of this library, having it installed will make it easier for future lessons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify if the `sklearn` library is available in Jupyter, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in `import sklearn as sk` in the `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the cell using the preferred method discussed earlier in the *Installing
    Python and using Jupyter Notebook* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button from the toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in the `sk.__version__` command in the next `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the cell using the preferred method from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the output cell displayed as `Out []`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version of `sklearn` should be **0.17.1** or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Matplotlib** Python library package is used for data visualization and
    plotting charts using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify whether the `matplotlib` library is available in Jupyter, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type in `import matplotlib as mp` in the `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the cell using the preferred method discussed earlier in the *Installing
    Python and using Jupyter Notebook* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button from the toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in the `mp.__version__` command in the next `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the cell using the preferred method from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the output cell displayed as `Out []`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version of `matplotlib` should be **1.5.1** or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for SciPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SciPy** is a library that''s dependent on NumPy and includes additional mathematical
    functions used for the analysis of data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify whether the `scipy` library is available in Jupyter, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `in import scipy as sc` in the `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the cell using the preferred method discussed earlier in the *Installing
    Python and using Jupyter Notebook* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the button from the toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Run Cells from the Cell menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Shift *+ *Enter* or *Ctrl *+ *Enter* keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in the `sc.__version__` command in the next `In []:` cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the cell using the preferred method from *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the output cell displayed as `Out []`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The version of `scipy` should be **0.17.0** or greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed all of the steps, your notebook should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f32216ab-105d-4160-8239-345deeb542c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations, we have now set up an environment that's ready to work with
    data. We started by installing Python and the Jupyter Notebook app by using the
    `conda` package installer called Anaconda. Next, we launched the Jupyter app and
    discussed how to navigate all of the features of both the dashboard and a notebook.
    We created a working directory that can be used as a template for all data analysis
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: We ran our first Python code by creating a `hello_world` notebook and walk through
    the core features available in Jupyter. Finally, we verified and explored different
    Python packages (NumPy, pandas, sklearn, Matplotlib, and SciPy) and their purposes
    in data analysis. You should now be comfortable and ready to run additional Python
    code commands in Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand your data literacy skills with some hands-on
    lessons. We will discuss the foundational library of NumPy, which is used for
    the analysis of data structures called arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Future reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links that you can refer to gain more information about the topics
    related to this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'History of Python: [https://docs.python.org/3/license.html](https://docs.python.org/3/license.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Differences between the `pip` and `conda` Python package managers: [https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda](https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understanding `conda` and `pip`: [https://www.anaconda.com/understanding-conda-and-pip/](https://www.anaconda.com/understanding-conda-and-pip/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jupyter Notebook tutorial: [https://www.dataquest.io/blog/jupyter-notebook-tutorial/](https://www.dataquest.io/blog/jupyter-notebook-tutorial/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Comparison of cloud-based Jupyter Notebook services: [https://discourse.jupyter.org/t/in-depth-comparison-of-cloud-based-services-that-run-jupyter-notebook/460/7](https://discourse.jupyter.org/t/in-depth-comparison-of-cloud-based-services-that-run-jupyter-notebook/460/7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to JupyterLab**: **[https://ipython-books.github.io/36-introducing-jupyterlab/](https://ipython-books.github.io/36-introducing-jupyterlab/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reference information to change the starting folder in Jupyter: [https://stackoverflow.com/questions/35254852/how-to-change-the-jupyter-start-up-folder](https://stackoverflow.com/questions/35254852/how-to-change-the-jupyter-start-up-folder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'History of the Jupyter project: [https://github.com/jupyter/design/wiki/Jupyter-Logo](https://github.com/jupyter/design/wiki/Jupyter-Logo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reference information about the location of files and directories after installing
    Jupyter: [https://jupyter.readthedocs.io/en/latest/projects/jupyter-directories.html](https://jupyter.readthedocs.io/en/latest/projects/jupyter-directories.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Handling different file types in Jupyter: [https://jupyterlab.readthedocs.io/en/stable/user/file_formats.html](https://jupyterlab.readthedocs.io/en/stable/user/file_formats.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft-hosted Jupyter Notebook site: [https://notebooks.azure.com/](https://notebooks.azure.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Count of public Jupyter notebooks on GitHub: [https://github.com/parente/nbestimate](https://github.com/parente/nbestimate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
