["```py\nThe Zen of Python, by Tim Peters:\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n```", "```py\nimport arcpy\n\n```", "```py\n    import arcpy, os, sys\n\n    ```", "```py\n    from arcpy import mapping\n\n    ```", "```py\n    from arcpy import mapping, da\n\n    ```", "```py\n    from arcpy import *\n\n    ```", "```py\n    shapefilePath = 'C:/Data/shapefile.shp'\n\n    ```", "```py\n    camelCase = 'this is a string'\n\n    ```", "```py\n>>> newlist = [ 'a' , 'b' , 'c' , 'd' ]\n>>> for item in newlist:\n print item.upper()\n\n```", "```py\nA\nB\nC\nD\n\n```", "```py\n>>> data = [1,2,4,5,6,7,10]\n>>> for val in data:\n if val % 2 == 0:\n print val,\"no remainder\"\n elif val % 3 == 2:\n print val, \"remainder of two\"\n else:\n\nprint \"final case\"\n\n```", "```py\nfinal case\n2 no remainder\n4 no remainder\n5 remainder of two\n6 no remainder\nfinal case\n10 no remainder\n\n```", "```py\n>>> x = 0\n>>> while x < 5:\n print x\n\nx+=1\n\n```", "```py\n0\n1\n2\n3\n4\n\n```", "```py\n# This is a comment\n\n```", "```py\n>>> variable = 1\n>>> newvar = str(variable)\n>>> newvar\n\n```", "```py\n1\n\n```", "```py\n>>> quote = 'This string contains a quote: \"Here is the quote\" '\n\n```", "```py\n>>> multiString = '''This string has\nmultiple lines and can go for\nas long as I want it too'''\n\n```", "```py\n>>> 5 / 2\n\n```", "```py\n2\n\n```", "```py\n>>> 5.0 / 2\n\n```", "```py\n2.5\n\n```", "```py\n>>> alist = ['a','b','c','d']\n>>> alist[0]\n\n```", "```py\n'a'\n\n```", "```py\n>>> alist[1]\n\n```", "```py\n'b'\n\n```", "```py\n>>> blist = [2,5,6]\n>>> alist.extend(blist)\n>>> alist\n\n```", "```py\n['a', 'b', 'c', 'd', 2, 5, 6]\n\n```", "```py\n>>> atuple = ('e','d','k')\n>>> atuple[0]\n\n```", "```py\n'e'\n\n```", "```py\n>>> adic = {'key':'value'}\n>>> adic['key']\n\n```", "```py\n'value'\n\n```", "```py\n>>> objectIDdic = { 1 : [ '100' , 'Main' , 'St' ] }\n>>> objectIDdic[1]\n```", "```py\n['100', 'Main', 'St']\n```", "```py\n>>> aList = [1,3,5,7]\n>>> for value in aList:\n print value * 2\n\n```", "```py\n2\n6\n10\n14\n\n```", "```py\n>>> aString = \"esri\"\n>>> for value in aString:\n print value.upper()\n\n```", "```py\nE\nS\nR\nI \n\n```", "```py\n>>> aDict = {\"key1\":\"value1\",\n \"key2\":\"value2\"}\n>>> for value in aDict:\n print value, aDict[value]\n\n```", "```py\nkey2 value2\nkey1 value1 \n\n```", "```py\ndef square(inVal):\n return inVal ** 2\n>>> square(3)\n\n```", "```py\n9\n\n```"]