["```py\n>>> if __name__ == \"__main__\":\n…      service = reportservice()\n…    run_server(service)\n\n```", "```py\npython report_server.py\n\n```", "```py\n>>> static_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates/assets')\n\n```", "```py\n>>> tmpl_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')\n\n```", "```py\n>>> app = Flask(__name__,template_folder=tmpl_dir,static_folder=static_dir)\n\n```", "```py\n>>> def reportservice():\n…    return app\n\n```", "```py\n>>> @app.route(\"/\")\n…   def index():\n…     return render_template(\"layouts/hero-thirds/index.html\")\n\n```", "```py\n> mongod\n\n```", "```py\n>>> FIELDS = {'score': True, \\\n…          'value': True, \\\n…          '_id': False}\n… MONGODB_HOST = 'localhost'\n… MONGODB_PORT = 27017\n… DBS_NAME = 'datasets'\n… COLLECTION_NAME = 'bankResults'\n\n```", "```py\n>>> @app.route(\"/report_dashboard\")\n…  def run_report():\n…    connection = MongoClient(MONGODB_HOST, MONGODB_PORT)\n…    collection = connection[DBS_NAME][COLLECTION_NAME]\n…    data = collection.find(projection=FIELDS)\n…    records = []\n…    for record in data:\n…        tmp_record = {}\n…        tmp_record = record['value']\n…        tmp_record['score'] = record['score']\n…        records.append(tmp_record)\n…    records = json.dumps(records, default=json_util.default)\n…    connection.close()\n\n```", "```py\n>>> d3_queue.queue() \n… .defer(d3.json, \"/report_dashboard\")\n… .await(runReport);\n\n```", "```py\n>>> function runReport(error, recordsJson) { \n…  var reportData = recordsJson; \n…  var cf = crossfilter(reportData);\n\n```", "```py\n>>>  var ageDim = cf.dimension(function(d) { return d[\"age\"]; });\n…  var jobDim = cf.dimension(function(d) { return d[\"job\"]; });\n…  var maritalDim = cf.dimension(function(d) { return d[\"marital\"]; });\n\n```", "```py\n>>>  var ageDimGroup = ageDim.group();\n…  var jobDimGroup = jobDim.group();\n…  var maritalDimGroup = maritalDim.group();\n\n```", "```py\n>>> var minAge = ageDim.bottom(1)[0][\"age\"];\n… var maxAge = ageDim.top(1)[0][\"age\"];\n… var minBalance = balanceDim.bottom(1)[0][\"balance\"];\n… var maxBalance = balanceDim.top(1)[0][\"balance\"];\n\n```", "```py\n>>>  var ageChart = dc.barChart(\"#age-chart\"); \n…  var jobChart = dc.rowChart(\"#job-chart\"); \n…  var maritalChart = dc.rowChart(\"#marital-chart\"); \n…\n\n```", "```py\n>>>  ageChart\n…  .width(750) \n…  .height(210) \n…  .dimension(ageDim) \n…  .group(ageDimGroup) \n…  .x(d3_scale.scaleLinear()\n…  .domain([minAge, maxAge]))\n…  .xAxis().ticks(4); \n\n>>>  jobChart \n…  .width(375) \n…  .height(210) \n…  .dimension(jobDim) \n…  .group(jobDimGroup) \n…  .xAxis().ticks(4);\n\n```", "```py\n>>>  dc.renderAll();\n\n```", "```py\n>>>  <div class=\"chart-stage\">\n…\n…       </div>\n\n```", "```py\n>>>  <div id=\"age-chart\">\n…         </div>\n\n```", "```py\n>>> <script type=\"text/javascript\" … src=\"img/report.js\"></script>\n\n```"]