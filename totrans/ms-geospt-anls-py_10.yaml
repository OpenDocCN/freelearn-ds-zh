- en: Geoprocessing with a GPU Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the emergence of multi-core GPUs, new database technologies have been developed
    to take advantage of this improved technology. MapD, a startup based in San Francisco,
    is one example of these companies. Their GPU-based database technology was made
    open source in 2017 and is available for use on cloud services, such as **Amazon
    Web Services** (**AWS**) and Microsoft Azure. By combining the parallelization
    potential of GPUs with a relational database, the MapD database improves the speed
    of database queries and visualizations based on the data.
  prefs: []
  type: TYPE_NORMAL
- en: MapD has created a Python 3 module, `pymapd`, that allows users to connect to
    the database and automate queries. This Python binding allows geospatial professionals
    to integrate the speed of a GPU database into an existing geospatial architecture,
    adding speed improvements to analysis and queries. Both of MapD's core offerings
    (the open source community version and the commercial enterprise version) are
    supported by `pymapd`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Python module, MapD has added geospatial capabilities to
    their database technology. Storage of points, lines, and polygons is now supported,
    as is a spatial analysis engine that offers distance and contains functionality.
    Also, MapD has developed a visualization component, **Immerse**, that allows for
    analytical dashboards to be built quickly, with the database as a backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a GPU database in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore data visualizations using Immerse and the SQL EDITOR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `pymapd` to load spatial and tabular data into the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `pymapd` to query the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate the cloud database into a GIS architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud geodatabase solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud storage of geospatial data has become a common part of many GIS architectures.
    Whether it is used as a backup to an on-premises solution, replaces an on-premises
    solution, or is combined with a local solution to provide internet support for
    an intranet-based system, the cloud is a big part of the future of GIS.
  prefs: []
  type: TYPE_NORMAL
- en: With ArcGIS Online, CARTO, MapBox, and now MapD, the options for a cloud data
    store that support geospatial data are more numerous than ever. Each offers a
    visualization component and a different type of data storage and each will integrate
    with your data and software in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Online, while also offering stand-alone options (that is, direct data
    upload), integrates with ArcGIS Enterprise (formerly ArcGIS Server) to consume
    enterprise **REpresentational State Transfer** (**REST**) web services that are
    stored on a local geodatabase. ArcGIS Online is built on top of **Amazon Web Services**
    (**AWS**) and all of the server architecture is hidden from users. Enterprise
    integration requires a high-level of licensing (cost), which includes a number
    of cloud tokens (that is credits), and storage and analysis within the cloud account
    itself can use lots of those tokens.
  prefs: []
  type: TYPE_NORMAL
- en: CARTO offers cloud PostGIS storage, allowing for geospatial data files to be
    uploaded. With the release of the Python package CARTOframes (covered in [Chapter
    14](d8f80a31-ec1a-47f5-bcdb-015b5502a86f.xhtml), *Cloud Geodatabase Analysis and
    Visualization*), the cloud datasets can be uploaded and updated using scripting.
    Using Python, a CARTO account can become a part of an enterprise solution that
    maintains up-to-date datasets while allowing them to be quickly deployed as custom
    web maps using the builder application. CARTO offers two tiers of paid accounts
    which have different levels of storage.
  prefs: []
  type: TYPE_NORMAL
- en: MapBox is focused on map tools for creating custom basemaps for mobile apps,
    but it also offers cloud data storage of datasets and map creation tools such
    as MapBox GL, the JavaScript library for maps built on the **Web Graphics Library**
    (**WebGL**). With the new MapBox GL—Jupyter module, the data can be accessed using
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: MapD, while offering similar solutions to those mentioned, is different in a
    number of respects. It has an open source version of the database (MapD Core Community
    Edition) which can be used locally or on the cloud, and has an enterprise version
    for large customers. While MapD Core has a relational database schema and uses
    SQL for queries like a traditional RDBMS, it uses GPUs to accelerate queries.
    MapD Core can be cloud-deployed on AWS, Google Cloud Platform, and Microsoft Azure.
    MapD can be installed on servers without GPUs as well, though this reduces its
    effective speed gains over other geodatabases.
  prefs: []
  type: TYPE_NORMAL
- en: All of the geodatabases support Jupyter Notebook environments for data queries,
    but MapD has them integrated into the SQL EDITOR within the Immerse visualization
    platform. MapD uses Apache Arrow to upload data when using `pymapd` and also supports
    `INSERT` statements while allowing for data to be loaded using the Immerse data
    importer (including SHPs, GeoJSONs, and CSVs).
  prefs: []
  type: TYPE_NORMAL
- en: Big data processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For data science analysis and geospatial analysis, encountering big data is
    more common than ever. MapD is incredibly fast when retrieving rows and return
    data to the client, making it really useful for powering real-time databases or
    for performing queries on huge datasets.
  prefs: []
  type: TYPE_NORMAL
- en: MapD offers amazing speed-ups on processing big datasets compared to CPU-bound
    databases. Because of the high number of cores that each GPU card contains, paralleled
    processes can run faster. This means that datasets numbering in the billions can
    be queried and analyzed in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: MapD architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The architecture of MapD is a combination of MapD Core (the GPU-based database),
    MapD Immerse (the data visualization component), and other associated technologies
    and APIs that support data science operations and geospatial applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7289cd8e-2c11-4635-8fe0-92a6caa26914.png)'
  prefs: []
  type: TYPE_IMG
- en: With the fast query speed and APIs, as well as `pymapd`, the components can
    be used together or separately to create geodatabases and visualizations. Drivers
    for multiple data importers exist to help data migration and the Thrift API can
    supply data for export or for communication with software packages and Immerse.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud versus local versus combined
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With many different types of organizations depending on geodatabases, the options
    for architecture are also quite varied. While some organizations have moved all
    of their data to the cloud, storing data and analysis tools on different servers,
    most maintain an on-premise geodatabase as the enterprise system.
  prefs: []
  type: TYPE_NORMAL
- en: A third architecture style, which balances between cloud-based and local geodatabases,
    is also very popular. This allows for database backups to be supported by always
    available cloud services and for data services to reach outside of organizational
    firewalls while limiting the datasets and services that are exposed to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: The balance between these solutions depends on the need for processing speed
    and storage costs. MapD, which can be installed and maintained locally or can
    be hosted in the cloud, fits all kinds of organizational requirements. The speed
    of queries and data processing allows cloud data resources to be used in the same
    manner as locally-stored datasets. With `pymapd`, datasets can easily be mirrored
    in the cloud while maintained locally and can be integrated into geospatial analyses
    by comparing locally stored data to cloud-based data.
  prefs: []
  type: TYPE_NORMAL
- en: The technological structure your organization chooses will depend on your needs
    and the size of the datasets both produced and ingested from other sources. MapD
    can become a part of this structure or can be the entire GIS, supporting Spatial
    SQL queries at blazing speeds whether located on-premise, in the cloud or both.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a MapD instance in the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explore the possibilities of using a mixed local and cloud-based GIS with
    MapD Core and MapD Immerse, let's create an instance (a virtual server) in the
    cloud. This cloud database will be accessed locally, using `pymapd` to perform
    queries and data management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS, we can create a server with GPU support. While I am using AWS here,
    MapD can be loaded into other cloud services, such as Google Cloud and Microsoft
    Azure, as well as installed locally. These other cloud services have a community
    edition available as well.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the AMI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll use the MapD Community Edition, the open source version of the platform,
    on a p2.xlarge AWS instance. Pre-built **Amazon Machine Images** (**AMIs**) of
    the community edition are available. While the core database technology is free,
    the p2 instance will still have costs associated with it and is not available
    with the AWS free tier. I chose the p2.xlarge over the recommended p2.8xlarge,
    reducing the costs per hour from $7 to $1\. For low-cost or free evaluation of
    the software, download and install it on a virtual machine or a dedicated Linux
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d76508c-0530-4449-a5e5-efa32ab2ccbd.png)'
  prefs: []
  type: TYPE_IMG
- en: For local installation, download the community edition (both compiled and the
    source code) from this website: [https://www.mapd.com/community/](https://www.mapd.com/community/).
  prefs: []
  type: TYPE_NORMAL
- en: Opening an AWS account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating the database instance will require an AWS account. Go to [aws.amazon.com](http://aws.amazon.com)
    and sign up for an account. This account will require a credit or debit card that
    is tied to the account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Explore the official documentation for installing a MapD AWS AMI here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mapd.com/docs/latest/getting-started/get-started-aws-ami/](https://www.mapd.com/docs/latest/getting-started/get-started-aws-ami/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a key pair
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generating a key pair will allow you to use secure shell or SSH connections
    to remote in or remotely access AWS instances. To generate the pair from the EC2
    Dashboard, select Key Pairs from the NETWORK &amp;amp; SECURITY group in the left
    panel after scrolling down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23cf9b5b-ee52-42ff-9017-32f4895dcdea.png)'
  prefs: []
  type: TYPE_IMG
- en: Give the key pair a name and push Create to save the private key (with a `.pem`
    extension) in a secure location on your computer or a USB stick. This key will
    be required each time you connect to the instance using SSH. The corresponding
    public key (with a `.pub` extension) is saved in your AWS account and used to
    match with the private key when connecting to the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Launching an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the account is set up, go to EC2 from the AWS Management Console. In the
    EC2 Dashboard, select Launch Instance to open the AWS instance selection tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89a29924-67b5-4323-ad02-93f33a0d1ebe.png)'
  prefs: []
  type: TYPE_IMG
- en: Picking a version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After clicking on AWS Marketplace on the left panel, search for the MapD database
    within the marketplace. Entering `MapD` into the search box brings up both versions. I
    chose the MapD core database community edition, as the MapD software is included
    for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f047f4d1-0a90-4206-92fd-c545d084fbbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the version of interest by pushing the Select button and go to the Instance
    Types menu.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for an instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the available Instance Types, only a few are supported. These p2 instances
    offer different levels of CPUs, memory, and GPUs. I chose the p2.xlarge instance
    for cost reasons, though the p2.8xlarge is recommended for production-level computing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1309f7f7-9231-4ef8-ba41-19ad6db36f1a.png)'
  prefs: []
  type: TYPE_IMG
- en: After selecting the instance type, there are a few menus describing the details
    of the instance and allowing for backup storage within the AWS ecosystem. Set
    these parameters as required by your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a security group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The security group settings are important as they control who can access the
    instance, and where they can access it from. The Source tab allows you to set
    the machines that can connect to the instance, using IP addresses to determine
    who is allowed to connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb933da1-aba2-48c5-817b-d3ac0c93cd3c.png)'
  prefs: []
  type: TYPE_IMG
- en: For security, adjust the Source for SSH to my IP. This can be updated later
    to allow for connections from anywhere, that is the internet at large. Once that
    is complete, assign the existing key pair to the instance to ensure that it can
    be used for direct connections to the command line MapD Core.
  prefs: []
  type: TYPE_NORMAL
- en: Immerse environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the instance set up, accessing the installed Immerse environment can be
    done using a browser. In the Immerse environment, data can be imported, dashboards
    can be created, and SQL queries can be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fde677db-1c94-45a1-b139-72704bfd1a6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Logging in to Immerse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the EC2 Dashboard, ensure that the MapD instance is started. Copy the
    IP address of the instance (the Public IP address, not the Private IP) and the
    Instance ID, which is located underneath the instances list in the EC2 Dashboard.
    Ensure that the MapD instance is highlighted to ensure that the Instance ID is
    correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04d0cc4e-df64-4df3-a558-c989730b875c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a browser and enter the Public IP address in the URL bar, along with port
    number `8443`. Here is an example of the URL: `https://ec2-54-200-213-68.us-west-2.compute.amazonaws.com:8443/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you are using **Hyper Text Transfer Protocol Secure** (**HTTPS**)
    to connect and that the port number is included. If the browser warns you that
    the connection is insecure, click through using the Advanced link at the bottom
    of the page. Once the connection is made, the login page will open with the user
    and database pre-populated. Add the Instance ID as the password and push Connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40e726dc-de5e-4539-bdb9-9f2b77a6320a.png)'
  prefs: []
  type: TYPE_IMG
- en: Read the MapD conditions, click I Agree, and enter the Immerse environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about using MapD on AWS here: [https://www.mapd.com/docs/latest/getting-started/get-started-aws-ami/](https://www.mapd.com/docs/latest/getting-started/get-started-aws-ami/).'
  prefs: []
  type: TYPE_NORMAL
- en: Default dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the Immerse environment is started, explore the included default DASHBOARDS
    to get a sense of what is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/954b92cf-aae6-4de6-bd4b-d133a6ae08a1.png)'
  prefs: []
  type: TYPE_IMG
- en: NYC taxi dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The NYC Taxi Rides dashboard uses a database table with 13 million rows of
    data points to demonstrate the speed of the database. Every time the map is zoomed,
    the database is re-queried and the points regenerated in milliseconds. It''s quite
    fun to explore the data and to alter the dashboard to include other chart and
    map types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d48e987-1827-43df-ae15-be0530f399df.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing a CSV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Importing a dataset in CSV format is easy using the data importer built into
    MapD Immerse. Go to the DATA MANAGER and select Import Data. On the next page,
    click on the Add Files button and load the included City of Juneau addresses CSV
    dataset using drag and drop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data will be loaded and, once loaded, a MapD database table is generated
    from the uploaded data. Review the data and add a new name or accept the default
    name (generated from the spreadsheet name). Once Save Table is clicked, the database
    table will be generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a64af924-8afe-4457-b4ce-596a9806d026.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a dataset now added to the database, test out MapD Immerse by selecting
    the DASHBOARDS tab. Here, dynamic charts, tables, histograms, heat maps and more
    can be created and added to a new dashboard. In this example, a simple donut chart
    is created using the data loaded from the CSV. The number of records associated
    with a city name is counted and added to the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fed8ddff-c055-4a43-a621-8bb770ee0fea.png)'
  prefs: []
  type: TYPE_IMG
- en: Selections with the SQL EDITOR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the built-in SQL EDITOR, SQL statements can be executed. The results
    will appear in the SQL EDITOR in a Jupyter Notebook-like interactive table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9b9e05e-02ae-4e1e-b9f1-6866497226f3.png)'
  prefs: []
  type: TYPE_IMG
- en: The SQL statements are executed really fast and will include spatial SQL commands
    that can perform analysis with an SQL select statement.
  prefs: []
  type: TYPE_NORMAL
- en: Use geospatial data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MapD Core supports geometry and geography data types and can also generate
    interactive maps using coordinate columns to display data with *x*/*y* or longitude
    and latitude pairs. Point maps, heat maps, and choropleth maps can easily be generated
    and styled using the Immerse dashboard environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a2923b-f38d-4380-93cc-d0eecfc6aad7.png)'
  prefs: []
  type: TYPE_IMG
- en: This data visualization was created by loading the Calaveras County address
    CSV from OpenAddresses into my MapD Immerse instance using the DATA MANAGER and
    then using the LON and LAT columns to create a heat map.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the database using a terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to the database using the integrated Java-based terminal, or another
    terminal solution. As my local machine uses Windows, and does not have a terminal
    integrated into the OS, I have downloaded and installed PuTTY. This free SSH software
    allows me to connect to Linux command line servers from a Windows machine, using
    the key pair generated earlier for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using another terminal solution for Windows or using another operating
    system, connect to the instance using the correct SSH procedure for the terminal.
    The steps will be similar, except for the required private key format conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Download the PuTTY terminal here: [https://www.chiark.greenend.org.uk/~sgtatham/putty/. ](https://www.chiark.greenend.org.uk/~sgtatham/putty/)
  prefs: []
  type: TYPE_NORMAL
- en: PuTTYgen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To authorize any connection to the AWS instance, the private key generated for
    the AWS account must be converted into a PuTTY key format using the associated
    program PuTTYgen. Open PuTTYgen from the Start menu, and click on the Conversions
    menu. From the drop-down tab, select Import Key.
  prefs: []
  type: TYPE_NORMAL
- en: 'A file dialogue will open, allowing you to select the private key downloaded
    from AWS. This private key will have a `.pem` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df08fe1a-7067-4641-b42f-902f945e5b5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Open, and the key will be imported. To generate the private key in the
    PuTTY format, supply an optional key phrase (a word or few words that further
    identify the user and which must be remembered), and click the Save Private Key
    button in the Actions section. Select a folder and save the key, which will now
    have a `.ppk` file extension.
  prefs: []
  type: TYPE_NORMAL
- en: Connection configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connecting to the instance using PuTTY requires some configuration. To create
    the connection, paste the public IP address of the instance into the Host Name
    field, check to ensure that the port is set to 22, and that the connection type
    is SSH. Save the settings in the Saved Sessions section by clicking the Save button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddfc50d8-e6ef-4272-b2e4-1e31578d1423.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the private key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the setting is loaded, click on the SSH drop-down on the left. In the
    new menu, click Auth to switch to a new menu, and then browse to the private key
    that we converted into PuTTY format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c24f7c6a-90e5-4e2b-9375-c04ad9fbaaf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the key has been located, push Open to establish the connection. To start
    MapD on the server, go to the `/raidStorage/prod/mapd/bin` folder and run the
    following code, replacing `{Instance-ID}` with your instance ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are having trouble establishing the connection, check to make sure that
    the security group for the AWS instance is set to allow connections from the current
    computer being used. If the security group setting is my IP and the IP of the
    computer is different, the connection cannot be made.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pymapd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing `pymapd` is simple, and supported by both `conda` and `pip`, the
    package installer included with Python. I am using `pip` for this chapter, but
    using `conda` will not cause any issues and may be recommended for integration
    with other `conda`-supported software.
  prefs: []
  type: TYPE_NORMAL
- en: The conda install command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use `conda install -c conda-forge` to connect to `conda forge`, the repository
    where the `pymapd` module is stored. Refer to [Chapter 1](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml), *Package
    Installation and Management* for more information on `conda`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The pip install command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pymapd` module is also available using `pip`, the Python installer package.
    It pulls from [PyPi.org](http://PyPi.org), the Python foundation''s repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the install command is run, the `pymapd` wheel is downloaded and installed
    along with the required supporting modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14f78d7c-c56f-4675-836c-44fb982eab45.png)'
  prefs: []
  type: TYPE_IMG
- en: Test that the module was installed by opening a Python terminal (or IDLE) and
    typing `import pymapd`. If no errors occur, `pymapd` has successfully been installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to download pymapd from GitHub: [https://github.com/mapd/pymapd.](https://github.com/mapd/pymapd)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pymapd` module includes a class called `connect` that requires connection
    information such as username, password, host server IP/domain, and database name
    (default value for both user and database name is `mapd`). For an AWS instance,
    the default password for MapD Core and MapD Immerse is the instance ID, available
    in the instance information section in the EC2 Dashboard, as shown earlier.
  prefs: []
  type: TYPE_NORMAL
- en: User and password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are connecting to the AWS AMI MapD instance, use the public IP address
    as the `host` and the instance ID as the `password`. Here is the `connection`
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of what a filled out `connect` instantiation could look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Data cursor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To execute the SQL commands (spatial or otherwise), we will create a data `cursor`.
    The `cursor` is part of the `connection` class and will be used to execute statements
    using the `execute` command. It is also used to access query results, which are
    converted into a list and iterated using a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The result is a list of tuples, which contain (in this case) only the name of
    the `county`, accessed using a zero index to get it out of the tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the connection established, we can now execute SQL statements in the Python
    script that will generate tables in the MapD Core instance. The following statement
    will create a simple table called `county`, with a `MULTIPOLYGON` geometry type,
    an `integer id` field, and three `VARCHAR`-type fields (or strings, as they would
    be called in Python):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The next code block will create a table called `address`, with a `POINT` geometry
    type, an `integer id` field, and a `VARCHAR`-type field called `address`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Insert statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One way to add data to the database is to use SQL `INSERT` statements. These
    will generate rows of data within the database tables created in the last section.
    Using the `pyshp` module, we can read a shapefile and add the data it contains
    to an `INSERT` statement template. This statement is then executed by the `cursor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This process can be time-consuming, so there are a few other ways to add data
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Using Apache Arrow to load data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `pyarrow` module and `pandas`, data can be written to the MapD Core
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Contains queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This code will test the speed of a data query against the `county` database
    table, using `ST_Contains`, a spatial SQL point in polygon analysis tool. The
    geometry column of the `county` table (called `geom`) is the first input into
    `ST_Contains`, and the **well-known text** (**WKT**) `point` is added second.
    Once the SQL statement is executed, the `point` will be compared against all of
    the rows in the table to find if one of the `county` geometries contains the `point`
    described by the WKT `point`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec9cbdae-bf83-48b6-b254-3a86c8be9036.png)'
  prefs: []
  type: TYPE_IMG
- en: The geospatial query runs really fast, as you can see from the printed time
    signatures (in seconds). It takes only a few milliseconds to find that Okeechobee
    polygon contains the `point` location.
  prefs: []
  type: TYPE_NORMAL
- en: Other available spatial SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The number of spatial SQL commands available within a MapD Core database is
    growing all the time. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ST_Transform` (for coordinate system transformations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ST_Distance` (for distance analyses)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ST_Point` (to generate `point` objects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ST_XMin`, `ST_XMax`, `ST_YMin`, `ST_YMax` (for bounding box access)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More functionality is being added every day and will reach spatial SQL feature
    parity with PostGIS and other spatial databases later this year. With these SQL
    commands, and the unique front-end dashboard publication tool MapD Immerse, MapD
    is a powerful new option for geodatabase deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a cloud-based GPU database like MapD Core, and the Immerse visualization
    studio will pay dividends when designing and implementing a GIS. It offers speed
    and cloud reliability to both tabular and spatial queries and allows the data
    to be shared in interactive dashboards (which rely on JavaScript technologies
    such as `D3.js` and MapBox GL JavaScript) that are simple to create and publish.
  prefs: []
  type: TYPE_NORMAL
- en: With the MapD Python module, `pymapd`, cloud data can become an integrated part
    of a query engine. Data can be pushed to the cloud or pulled down to use locally.
    Analyses can be performed rapidly, using the power of GPU parallelization. It's
    worth installing MapD on a virtual server in the cloud, or even locally, to test
    out the potential of the software.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the use of Flask, SQLAlchemy, and GeoAlchemy2
    to create an interactive web map with a PostGIS geodatabase backend.
  prefs: []
  type: TYPE_NORMAL
