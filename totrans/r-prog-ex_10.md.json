["```py\nlibrary(shiny)\nserver <- function(input, output) { }\nui <- fluidPage(\"This is a Shiny application.\")\nshinyApp(ui, server)\n```", "```py\nui <- fluidPage(\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\"Options\"),\n        mainPanel(\"Content\")\n    )\n)\n```", "```py\nError in tag(\"div\", list(...)) : argument is missing, with no default\nCalls: fluidPage ... tabsetPanel -> tabPanel -> div ->  -> tag\n```", "```py\nui <- fluidPage(\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\"Options\"),\n        mainPanel(\n            tabsetPanel(\n                tabPanel(\"Simple Moving Averages\", \"Content 1\"),\n                tabPanel(\"Data Overview\", \"Content 2\")\n            )\n        )\n    )\n)\n```", "```py\nORIGINAL_DATA <- \nread.csv(\"../chapter-09/data.csv\", stringsAsFactors = FALSE)\n```", "```py\nui <- fluidPage(\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\"Options\"),\n        mainPanel(\n            tabsetPanel(\n                tabPanel(\"Simple Moving Averages\", \n                          \"Content 1\"),\n                tabPanel(\"Data Overview\", \n                          fluidRow(DT::dataTableOutput(\"table\"))                                    \n                )\n            )\n        )\n    )\n)\n\nserver <- function(input, output) {\n    output$table <- \n    DT::renderDataTable(DT::datatable({return(ORIGINAL_DATA)}))\n}\n```", "```py\nDATE_MIN <- \ntimestamp_to_date_string.TimeStamp(min(ORIGINAL_DATA$timestamp))\n\nDATE_MAX <- \ntimestamp_to_date_string.TimeStamp(max(ORIGINAL_DATA$timestamp))\n\nDATE_END <- \ntimestamp_to_date_string.TimeStamp(time_to_timestamp.TimeStamp(\n    timestamp_to_time.TimeStamp(min(ORIGINAL_DATA$timestamp)) + days(2)))\n```", "```py\ntimestamp_to_date_string.TimeStamp <- function(timestamp) {\n    return(substr(timestamp, 1, 10))\n}\n```", "```py\nui <- fluidPage(\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\n            dateRangeInput(\n                \"date_range\",\n                label = paste(\"Date range:\"),\n                start = DATE_MIN,\n                end = DATE_END,\n                min = DATE_MIN,\n                max = DATE_MAX,\n                separator = \" to \",\n                format = \"yyyy-mm-dd\",\n                weekstart = 1\n            )\n        ),\n        mainPanel(\n            tabsetPanel(\n                tabPanel(\"Simple Moving Averages\", \n                         \"Content 1\"),\n                tabPanel(\"Data Overview\", \n                         fluidRow(DT::dataTableOutput(\"table\"))\n                )\n            )\n        )\n    )\n)\n```", "```py\nDATA_ASSETS <- unique(ORIGINAL_DATA$name)\n```", "```py\nserver <- function(input, output) {\n    output$table <- DT::renderDataTable(DT::datatable({\n        data  <- ORIGINAL_DATA\n        start <- input$date_range[1]\n        end   <- input$date_range[2]\n        if (time_to_date_string.TimeStamp(start) != DATE_MIN |\n            time_to_date_string.TimeStamp(end) != DATE_END) {\n            data <- data[\n                data$timestamp >= time_to_timestamp.TimeStamp(start) &\n                data$timestamp <= time_to_timestamp.TimeStamp(end), ]\n        }\n        return(data)\n    }))\n\n    output$select_asset <- renderUI({\n        assets <- DATA_ASSETS\n        if (input$tab_selected == 2) {\n            assets <- c(\"All\", assets)\n        }\n        return(selectInput(\"asset\", \"Asset:\", assets))\n    })\n}\n```", "```py\nui <- fluidPage(\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\n            wellPanel(\n                dateRangeInput(\n                    \"date_range\",\n                    label = paste(\"Date range:\"),\n                    start = DATE_MIN,\n                    end = DATE_END,\n                    min = DATE_MIN,\n                    max = DATE_MAX,\n                    separator = \" to \",\n                    format = \"yyyy-mm-dd\",\n                    weekstart = 1,\n                    startview = \"year\"\n                ),\n                htmlOutput(\"select_asset\")\n            )\n        ),\n        mainPanel(\n            tabsetPanel(\n                id = \"tab_selected\",\n                tabPanel(\n                    \"Simple Moving Averages\",\n                    value = 1,\n                    \"Content 1\"\n                ),\n                tabPanel(\n                    \"Data Overview\",\n                    value = 2,\n                    fluidRow(DT::dataTableOutput(\"table\"))\n                )\n            )\n        )\n    )\n)\n```", "```py\nconditionalPanel(\n    condition = \"input.tab_selected == 1\",\n    wellPanel(\n        radioButtons(\n            \"sma_implementation\",\n            \"Implementation:\",\n            choices = list(\n                \"C++\" = \"sma_delegated_cpp\",\n                \"Fortran\" = \"sma_delegated_fortran\",\n                \"Efficient 1\" = \"sma_efficient_1\",\n                \"Efficient 2\" = \"sma_efficient_2\"\n            ),\n            selected = \"sma_delegated_cpp\"\n        ),\n        sliderInput(\n            \"sma_period\",\n            \"Period:\",\n            min = 5,\n            max = 200,\n            value = 30\n        )\n    )\n)\n```", "```py\nserver <- function(input, output) {\n\n    data <- reactive({\n        data  <- ORIGINAL_DATA\n        start <- input$date_range[1]\n        end   <- input$date_range[2]\n        if (input$asset != \"All\") {\n            data <- data[data$name == input$asset, ]\n        }\n        if (time_to_date_string.TimeStamp(start) != DATE_MIN |\n            time_to_date_string.TimeStamp(end) != DATE_MAX) {\n            data <- data[\n                data$timestamp >= time_to_timestamp.TimeStamp(start) &\n                data$timestamp <= time_to_timestamp.TimeStamp(end), ]\n        }\n        return(data)\n    })\n\n    output$table <- DT::renderDataTable(DT::datatable({return(data())}))\n\n    output$select_asset <- renderUI({\n        assets <- DATA_ASSETS\n        if (input$tab_selected == 2) {\n            assets <- c(\"All\", assets)\n        }\n        return(selectInput(\"asset\", \"Asset:\", assets))\n    })\n\n    output$summary_table <- renderTable(data.frame(\n        Minimum = min(data()$price_usd),\n        Median = mean(data()$price_usd),\n        Mean = mean(data()$price_usd),\n        Max = max(data()$price_usd)\n    ))\n}\n```", "```py\ntabPanel(\n    \"Data Overview\",\n    value = 2,\n    fluidRow(tableOutput(\"summary_table\")),\n    fluidRow(DT::dataTableOutput(\"table\"))\n)\n```", "```py\nORIGINAL_DATA$time <- timestamp_to_time.TimeStamp(ORIGINAL_DATA$timestamp)\n```", "```py\nsma_graph <- function(data, sma) {\n    g <- ggplot(data, aes(time, price_usd))\n    g <- g + geom_point()\n    g <- g + geom_line(group = 1)\n    g <- g + geom_line(aes_string(y = sma),\n                       group = 1, color = \"blue\", size = 1)\n    return(g)\n}\n```", "```py\nsma <- reactive({\n    return(do.call(\n        input$sma_implementation,\n        list(input$sma_period, data()[1, \"symbol\"], data())\n    ))\n})\n```", "```py\noutput$graph_top <- renderPlot({\n    return(sma_graph(data(), sma()))\n})\n```", "```py\nfluidRow(plotOutput(\"graph_top\"))\n```", "```py\ntabPanel(\n    \"Simple Moving Averages\",\n    value = 1,\n    fluidRow(plotOutput(\"graph_top\", brush = brushOpts(\"graph_brush\"))),\n    fluidRow(plotOutput(\"graph_bottom\"))\n)\n```", "```py\nranges <- reactive({\n    if (!is.null(input$graph_brush)) {\n        return(list(\n            x = c(as.POSIXct(input$graph_brush$xmin, \n                             origin = \"1970-01-01\"),\n                  as.POSIXct(input$graph_brush$xmax, \n                             origin = \"1970-01-01\")),\n\n            y = c(input$graph_brush$ymin, \n                  input$graph_brush$ymax)\n        ))\n    }\n    return(list(x = NULL, y = NULL))\n})\n```", "```py\noutput$graph_bottom <- renderPlot({\n    return(sma_graph(data(), sma()) +\n           coord_cartesian(xlim = ranges()$x,\n                           ylim = ranges()$y, expand = FALSE))\n})\n```", "```py\nlibrary(ggthemr)\nggthemr('flat dark', type = 'outer')\n```", "```py\nui <- fluidPage(\n    theme = shinytheme(\"superhero\"),\n    titlePanel(\"Cryptocurrency Markets\"),\n    ...\n)\n```", "```py\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(shinythemes)\n\nsource(\"../chapter-08/cryptocurrencies/utilities/time-stamp.R\")\nsource(\"../chapter-09/sma-delegated.R\", chdir = TRUE)\nsource(\"../chapter-09/sma-efficient.R\")\nsource(\"./functions.R\")\n\nORIGINAL_DATA <- \nread.csv(\"../chapter-09/data.csv\", stringsAsFactors = FALSE)\n\nORIGINAL_DATA$time <- \ntimestamp_to_time.TimeStamp(ORIGINAL_DATA$timestamp)\n\nDATA_ASSETS <- unique(ORIGINAL_DATA$name)\n\nDATE_MIN <- \ntimestamp_to_date_string.TimeStamp(min(ORIGINAL_DATA$timestamp))\n\nDATE_MAX <- \ntimestamp_to_date_string.TimeStamp(max(ORIGINAL_DATA$timestamp))\n\nDATE_END <- \ntimestamp_to_date_string.TimeStamp(time_to_timestamp.TimeStamp(\n    timestamp_to_time.TimeStamp(min(ORIGINAL_DATA$timestamp)) + days(2)))\n\nui <- fluidPage(\n    theme = shinytheme(\"superhero\"),\n    titlePanel(\"Cryptocurrency Markets\"),\n    sidebarLayout(\n        sidebarPanel(\n            \"Options\",\n            wellPanel(\n                dateRangeInput(\n                    \"date_range\",\n                    label = paste(\"Date range:\"),\n                    start = DATE_MIN,\n                    end = DATE_END,\n                    min = DATE_MIN,\n                    max = DATE_MAX,\n                    separator = \" to \",\n                    format = \"yyyy-mm-dd\",\n                    weekstart = 1,\n                    startview = \"year\"\n                ),\n                htmlOutput(\"select_asset\")\n            ),\n            conditionalPanel(\n                condition = \"input.tab_selected == 1\",\n                wellPanel(\n                    radioButtons(\n                        \"sma_implementation\",\n                        \"Implementation:\",\n                        choices = list(\n                            \"C++\" = \"sma_delegated_cpp\",\n                            \"Fortran\" = \"sma_delegated_fortran\",\n                            \"Efficient 1\" = \"sma_efficient_1\",\n                            \"Efficient 2\" = \"sma_efficient_2\"\n                        ),\n                        selected = \"sma_delegated_cpp\"\n                    ),\n                    sliderInput(\n                        \"sma_period\",\n                        \"Period:\",\n                        min = 5,\n                        max = 200,\n                        value = 30\n                    )\n                )\n            )\n        ),\n        mainPanel(\n            tabsetPanel(\n                id = \"tab_selected\",\n                tabPanel(\n                    \"Simple Moving Averages\",\n                    value = 1,\n                    fluidRow(plotOutput(\"graph_top\", \n                                         brush = brushOpts(\n                                         \"graph_brush\"))),\n                    fluidRow(plotOutput(\"graph_bottom\"))\n                ),\n                tabPanel(\n                    \"Data Overview\",\n                    value = 2,\n                    fluidRow(tableOutput(\"summary_table\")),\n                    fluidRow(DT::dataTableOutput(\"table\"))\n                )\n            )\n        )\n    )\n)\n\nserver <- function(input, output) {\n\n    data <- reactive({\n        data <- ORIGINAL_DATA\n        start <- input$date_range[1]\n        end <- input$date_range[2]\n        if (input$asset != \"All\") {\n            data <- data[data$name == input$asset, ]\n        }\n        if (time_to_date_string.TimeStamp(start) != DATE_MIN |\n            time_to_date_string.TimeStamp(end) != DATE_MAX) {\n            data <- data[\n                data$timestamp >= time_to_timestamp.TimeStamp(start) &\n                data$timestamp <= time_to_timestamp.TimeStamp(end), ]\n        }\n        return(data)\n    })\n\n    sma <- reactive({\n        return(do.call(\n            input$sma_implementation,\n            list(input$sma_period, data()[1, \"symbol\"], data())\n        ))\n    })\n\n    ranges <- reactive({\n        if (!is.null(input$graph_brush)) {\n            return(list(\n                x = c(as.POSIXct(input$graph_brush$xmin, \n                                 origin = \"1970-01-01\"),\n                      as.POSIXct(input$graph_brush$xmax, \n                                 origin = \"1970-01-01\")),\n                y = c(input$graph_brush$ymin, \n                      input$graph_brush$ymax)\n            ))\n        }\n        return(list(x = NULL, y = NULL))\n    })\n\n    output$table <- DT::renderDataTable(DT::datatable({\n        return(data())\n    }), style = \"bootstrap\")\n\n    output$select_asset <- renderUI({\n        assets <- DATA_ASSETS\n        if (input$tab_selected == 2) {\n            assets <- c(\"All\", assets)\n        }\n        return(selectInput(\"asset\", \"Asset:\", assets))\n    })\n\n    output$summary_table <- renderTable(data.frame(\n        Minimum = min(data()$price_usd),\n        Median = mean(data()$price_usd),\n        Mean = mean(data()$price_usd),\n        Max = max(data()$price_usd)\n    ))\n\n    output$graph_top <- renderPlot({\n        return(sma_graph(data(), sma()))\n    })\n\n    output$graph_bottom <- renderPlot({\n        return(sma_graph(data(), sma()) +\n               coord_cartesian(xlim = ranges()$x,\n                               ylim = ranges()$y, expand = FALSE))\n    })\n}\n\nshinyApp(ui, server, options = list(port = 6924))\n```", "```py\nimg(src = \"image.png\", height = 250, width = 250)\n```", "```py\nui <- fluidPage(\n    tag$h1(\"This is a first level heading\"),\n    tag$p(\"This is a paragraph.)\n    tag$h2(\"This is a second level heading\"),\n    tag$p(\"This is a another paragraph.)\n)\n```", "```py\ntags$div(\n    HTML(\"Raw HTML\")\n)\n```", "```py\nui <- fluidPage(\n    includeCSS(\"style.css\"),\n    h1(style = \"color: blue;\", \"A blue heading\"),\n)\nserver <- function(input, output) { }\nshinyApp(ui, server)\n```", "```py\nrunGitHub(\"\", \"\")\n```"]