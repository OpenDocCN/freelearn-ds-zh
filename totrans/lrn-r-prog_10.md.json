["```py\nvec1 <- c(1, 2, 3) \ntypeof(vec1) \n## [1] \"double\" \nclass(vec1) \n## [1] \"numeric\" \n\n```", "```py\ndata1 <- data.frame(x = 1:3, y = rnorm(3)) \ntypeof(data1) \n## [1] \"list\" \nclass(data1) \n## [1] \"data.frame\" \n\n```", "```py\nhead \n## function (x, ...)  \n## UseMethod(\"head\") \n## <bytecode: 0x000000000f052e10> \n## <environment: namespace:utils> \n\n```", "```py\nnum_vec <- c(1, 2, 3, 4, 5) \ndata_frame <- data.frame(x = 1:5, y = rnorm(5)) \n\n```", "```py\nhead(num_vec, 3) \n## [1] 1 2 3 \n\n```", "```py\nhead(data_frame, 3) \n##   x         y \n## 1 1 0.8867848 \n## 2 2 0.1169713 \n## 3 3 0.3186301 \n\n```", "```py\nsimple_head <- function(x, n) { \n  x[1:n] \n} \n\n```", "```py\nsimple_head(num_vec, 3) \n## [1] 1 2 3 \n\n```", "```py\nsimple_head(data_frame, 3) \n## Error in `[.data.frame`(x, 1:n): undefined columns selected \n\n```", "```py\nsimple_head2 <- function(x, n) { \n  if (is.data.frame(x)) { \n    x[1:n,] \n  } else { \n    x[1:n] \n  } \n} \n\n```", "```py\nsimple_head2(num_vec, 3) \n## [1] 1 2 3 \nsimple_head2(data_frame, 3) \n##   x         y \n## 1 1 0.8867848 \n## 2 2 0.1169713 \n## 3 3 0.3186301 \n\n```", "```py\nmethods(\"head\") \n## [1] head.data.frame* head.default*    head.ftable*     \n## [4] head.function*   head.matrix      head.table*      \n## see '?methods' for accessing help and source code \n\n```", "```py\nlm1 <- lm(mpg ~ cyl + vs, data = mtcars) \n\n```", "```py\ntypeof(lm1) \n## [1] \"list\" \nclass(lm1) \n## [1] \"lm\" \n\n```", "```py\nlm1 \n##  \n## Call: \n## lm(formula = mpg ~ cyl + vs, data = mtcars) \n##  \n## Coefficients: \n## (Intercept)          cyl           vs   \n##     39.6250      -3.0907      -0.9391 \n\n```", "```py\nprint(lm1) \n##  \n## Call: \n## lm(formula = mpg ~ cyl + vs, data = mtcars) \n##  \n## Coefficients: \n## (Intercept)          cyl           vs   \n##     39.6250      -3.0907      -0.9391 \n\n```", "```py\nidentical(getS3method(\"print\", \"lm\"), stats:::print.lm) \n## [1] TRUE \n\n```", "```py\nlength(methods(\"print\")) \n## [1] 198 \n\n```", "```py\nsummary(lm1) \n##  \n## Call: \n## lm(formula = mpg ~ cyl + vs, data = mtcars) \n##  \n## Residuals: \n##    Min     1Q Median     3Q    Max  \n## -4.923 -1.953 -0.081  1.319  7.577  \n##  \n## Coefficients: \n##             Estimate Std. Error t value Pr(>|t|)     \n## (Intercept)  39.6250     4.2246   9.380 2.77e-10 *** \n## cyl          -3.0907     0.5581  -5.538 5.70e-06 *** \n## vs           -0.9391     1.9775  -0.475    0.638     \n## --- \n## Signif. codes:   \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n##  \n## Residual standard error: 3.248 on 29 degrees of freedom \n## Multiple R-squared:  0.7283, Adjusted R-squared:  0.7096  \n## F-statistic: 38.87 on 2 and 29 DF,  p-value: 6.23e-09 \n\n```", "```py\nlm1summary <- summary(lm1) \ntypeof(lm1summary) \n## [1] \"list\" \nclass(lm1summary) \n## [1] \"summary.lm\" \n\n```", "```py\nnames(lm1summary) \n## [1] \"call\"          \"terms\"         \"residuals\"     \n## [4] \"coefficients\"  \"aliased\"       \"sigma\"         \n## [7] \"df\"            \"r.squared\"     \"adj.r.squared\" \n##[10] \"fstatistic\"    \"cov.unscaled\" \n\n```", "```py\ncoef(lm1) \n## (Intercept)         cyl          vs  \n##  39.6250234  -3.0906748  -0.9390815 \n\n```", "```py\ncoef(lm1summary) \n##               Estimate Std. Error    t value     Pr(>|t|) \n## (Intercept) 39.6250234  4.2246061  9.3795782 2.765008e-10 \n## cyl         -3.0906748  0.5580883 -5.5379676 5.695238e-06 \n## vs          -0.9390815  1.9775199 -0.4748784 6.384306e-01 \n\n```", "```py\noldpar <- par(mfrow = c(2, 2)) \nplot(lm1) \npar(oldpar) \n\n```", "```py\npredict(lm1, data.frame(cyl = c(6, 8), vs = c(1, 1))) \n##        1        2  \n## 20.14189 13.96054 \n\n```", "```py\nplot(mtcars$mpg, fitted(lm1)) \n\n```", "```py\nplot(density(residuals(lm1)),  \n  main = \"Density of lm1 residuals\") \n\n```", "```py\ninstall.packages(\"rpart\") \n\n```", "```py\nlibrary(rpart) \ntree_model <- rpart(mpg ~ cyl + vs, data = mtcars) \n\n```", "```py\ntypeof(tree_model) \n## [1] \"list\" \nclass(tree_model) \n## [1] \"rpart\" \n\n```", "```py\nprint(tree_model) \n## n = 32  \n##  \n## node), split, n, deviance, yval \n##       * denotes terminal node \n##  \n## 1) root 32 1126.04700 20.09062   \n##   2) cyl >= 5 21  198.47240 16.64762   \n##     4) cyl >= 7 14   85.20000 15.10000 * \n##     5) cyl < 7 7   12.67714 19.74286 * \n##   3) cyl < 5 11  203.38550 26.66364 * \n\n```", "```py\nsummary(tree_model) \n## Call: \n## rpart(formula = mpg ~ cyl + vs, data = mtcars) \n##   n = 32  \n##  \n##           CP nsplit rel error    xerror       xstd \n## 1 0.64312523      0 1.0000000 1.0844542 0.25608044 \n## 2 0.08933483      1 0.3568748 0.3858990 0.07230642 \n## 3 0.01000000      2 0.2675399 0.3875795 0.07204598 \n##  \n## Variable importance \n## cyl  vs  \n##  65  35  \n##  \n## Node number 1: 32 observations,    complexity param=0.6431252 \n##   mean=20.09062, MSE=35.18897  \n##   left son=2 (21 obs) right son=3 (11 obs) \n##   Primary splits: \n##       cyl < 5   to the right, improve=0.6431252, (0 missing) \n##       vs  < 0.5 to the left,  improve=0.4409477, (0 missing) \n##   Surrogate splits: \n##       vs < 0.5 to the left,  agree=0.844, adj=0.545, (0 split) \n##  \n## Node number 2: 21 observations,    complexity param=0.08933483 \n##   mean=16.64762, MSE=9.451066  \n##   left son=4 (14 obs) right son=5 (7 obs) \n##   Primary splits: \n##       cyl < 7   to the right, improve=0.5068475, (0 missing) \n##   Surrogate splits: \n##       vs < 0.5 to the left,  agree=0.857, adj=0.571, (0 split) \n##  \n## Node number 3: 11 observations \n##   mean=26.66364, MSE=18.48959  \n##  \n## Node number 4: 14 observations \n##   mean=15.1, MSE=6.085714  \n##  \n## Node number 5: 7 observations \n##   mean=19.74286, MSE=1.81102 \n\n```", "```py\noldpar <- par(xpd = NA) \nplot(tree_model) \ntext(tree_model, use.n = TRUE) \npar(oldpar) \n\n```", "```py\npredict(tree_model, data.frame(cyl = c(6, 8), vs = c(1, 1))) \n##        1        2  \n## 19.74286 15.10000 \n\n```", "```py\ncoef(tree_model) \n## NULL \n\n```", "```py\ngeneric_head <- function(x, n)  \n  UseMethod(\"generic_head\") \n\n```", "```py\ngeneric_head.default <- function(x, n) { \n  x[1:n] \n} \n\n```", "```py\ngeneric_head(num_vec, 3) \n## [1] 1 2 3 \n\n```", "```py\ngeneric_head(data_frame, 3) \n## Error in `[.data.frame`(x, 1:n): undefined columns selected \n\n```", "```py\ngeneric_head.data.frame <- function(x, n) { \n  x[1:n,] \n} \n\n```", "```py\ngeneric_head(data_frame, 3) \n##   x         y \n## 1 1 0.8867848 \n## 2 2 0.1169713 \n## 3 3 0.3186301 \n\n```", "```py\nproduct <- function(name, price, inventory) { \n  obj <- list(name = name,  \n    price = price,  \n    inventory = inventory) \n  class(obj) <- \"product\" \n  obj \n} \n\n```", "```py\nproduct <- function(name, price, inventory) { \n  structure(list(name = name,  \n    price = price,  \n    inventory = inventory), \n    class = \"product\") \n} \n\n```", "```py\nlaptop <- product(\"Laptop\", 499, 300) \n\n```", "```py\ntypeof(laptop) \n## [1] \"list\" \nclass(laptop) \n## [1] \"product\" \n\n```", "```py\nlaptop \n## $name \n## [1] \"Laptop\" \n##  \n## $price \n## [1] 499 \n##  \n## $inventory \n## [1] 300 \n##  \n## attr(,\"class\") \n## [1] \"product\" \n\n```", "```py\nprint.product <- function(x, ...) { \n  cat(\"<product>\\n\") \n  cat(\"name:\", x$name, \"\\n\") \n  cat(\"price:\", x$price, \"\\n\") \n  cat(\"inventory:\", x$inventory, \"\\n\") \n  invisible(x) \n} \n\n```", "```py\nlaptop \n## <product> \n## name: Laptop  \n## price: 499  \n## inventory: 300 \n\n```", "```py\nlaptop$name \n## [1] \"Laptop\" \nlaptop$price \n## [1] 499 \nlaptop$inventory \n## [1] 300 \n\n```", "```py\ncellphone <- product(\"Phone\", 249, 12000) \nproducts <- list(laptop, cellphone) \nproducts \n## [[1]] \n## <product> \n## name: Laptop  \n## price: 499  \n## inventory: 300  \n##  \n## [[2]] \n## <product> \n## name: Phone  \n## price: 249  \n## inventory: 12000 \n\n```", "```py\nproduct(\"Basket\", 150, -0.5) \n## <product> \n## name: Basket  \n## price: 150  \n## inventory: -0.5 \n\n```", "```py\nproduct <- function(name, price, inventory) { \n  stopifnot( \n    is.character(name), length(name) == 1, \n    is.numeric(price), length(price) == 1,  \n    is.numeric(inventory), length(inventory) == 1,  \nprice > 0, inventory >= 0) \n  structure(list(name = name,  \n    price = as.numeric(price),  \n    inventory = as.integer(inventory)), \n    class = \"product\") \n} \n\n```", "```py\nproduct(\"Basket\", 150, -0.5) \n## Error: inventory >= 0 is not TRUE \n\n```", "```py\nvalue <- function(x, ...)  \n  UseMethod(\"value\") \n\nvalue.default <- function(x, ...) { \n  stop(\"value is undefined\") \n} \n\nvalue.product <- function(x, ...) { \n  x$price * x$inventory \n} \n\n```", "```py\nvalue(laptop) \n## [1] 149700 \nvalue(cellphone) \n## [1] 2988000 \n\n```", "```py\nsapply(products, value) \n## [1]  149700 2988000 \n\n```", "```py\nlaptop$price <- laptop$price * 0.85 \n\n```", "```py\nlaptop$value <- laptop$price * laptop$inventory \n\n```", "```py\nlaptop \n## <product> \n## name: Laptop  \n## price: 424.15  \n## inventory: 300 \n\n```", "```py\npercent <- function(x) { \n  stopifnot(is.numeric(x)) \n  class(x) <- c(\"percent\", \"numeric\") \n  x \n} \n\n```", "```py\npct <- percent(c(0.1, 0.05, 0.25, 0.23)) \npct \n## [1] 0.10 0.05 0.25 0.23 \n## attr(,\"class\") \n## [1] \"percent\" \"numeric\" \n\n```", "```py\nas.character.percent <- function(x, ...) { \n  paste0(as.numeric(x) * 100, \"%\") \n} \n\n```", "```py\nas.character(pct) \n## [1] \"10%\" \"5%\"  \"25%\" \"23%\" \n\n```", "```py\nformat.percent <- function(x, ...) { \n  as.character(x, ...) \n} \n\n```", "```py\nformat(pct) \n## [1] \"10%\" \"5%\"  \"25%\" \"23%\" \n\n```", "```py\nprint.percent <- function(x, ...) { \n  print(format.percent(x), quote = FALSE) \n} \n\n```", "```py\npct \n## [1] 10% 5%  25% 23% \n\n```", "```py\npct + 0.2 \n## [1] 30% 25% 45% 43% \npct * 0.5 \n## [1] 5%    2.5%  12.5% 11.5% \n\n```", "```py\nsum(pct) \n## [1] 0.63 \nmean(pct) \n## [1] 0.1575 \nmax(pct) \n## [1] 0.25 \nmin(pct) \n## [1] 0.05 \n\n```", "```py\nsum.percent <- function(...) { \n  percent(NextMethod(\"sum\")) \n} \nmean.percent <- function(x, ...) { \n  percent(NextMethod(\"mean\")) \n} \nmax.percent <- function(...) { \n  percent(NextMethod(\"max\")) \n} \nmin.percent <- function(...) { \n  percent(NextMethod(\"max\")) \n} \n\n```", "```py\nsum(pct) \n## [1] 63% \nmean(pct) \n## [1] 15.75% \nmax(pct) \n## [1] 25% \nmin(pct) \n## [1] 5% \n\n```", "```py\nc(pct, 0.12) \n## [1] 0.10 0.05 0.25 0.23 0.12 \n\n```", "```py\nc.percent <- function(x, ...) { \n  percent(NextMethod(\"c\")) \n} \n\n```", "```py\nc(pct, 0.12, -0.145) \n## [1] 10%    5%     25%    23%    12%    -14.5% \n\n```", "```py\npct[1:3] \n## [1] 0.10 0.05 0.25 \npct[[2]] \n## [1] 0.05 \n\n```", "```py\n`[.percent` <- function(x, i) { \n  percent(NextMethod(\"[\")) \n} \n`[[.percent` <- function(x, i) { \n  percent(NextMethod(\"[[\")) \n} \n\n```", "```py\npct[1:3] \n## [1] 10% 5%  25% \npct[[2]] \n## [1] 5% \n\n```", "```py\ndata.frame(id = 1:4, pct) \n##   id pct \n## 1  1 10% \n## 2  2  5% \n## 3  3 25% \n## 4  4 23% \n\n```", "```py\nVehicle <- function(class, name, speed) { \n  obj <- new.env(parent = emptyenv()) \n  obj$name <- name \n  obj$speed <- speed \n  obj$position <- c(0, 0, 0) \n  class(obj) <- c(class, \"vehicle\") \n  obj \n} \n\n```", "```py\nCar <- function(...) { \n  Vehicle(class = \"car\", ...) \n} \nBus <- function(...) { \n  Vehicle(class = \"bus\", ...) \n} \nAirplane <- function(...) { \n  Vehicle(class = \"airplane\", ...) \n} \n\n```", "```py\ncar <- Car(\"Model-A\", 80) \nbus <- Bus(\"Medium-Bus\", 45) \nairplane <- Airplane(\"Big-Plane\", 800) \n\n```", "```py\nprint.vehicle <- function(x, ...) { \n  cat(sprintf(\"<vehicle: %s>\\n\", class(x)[[1]])) \n  cat(\"name:\", x$name, \"\\n\") \n  cat(\"speed:\", x$speed, \"km/h\\n\") \n  cat(\"position:\", paste(x$position, collapse = \", \")) \n} \n\n```", "```py\ncar \n## <vehicle: car> \n## name: Model-A  \n## speed: 80 km/h \n## position: 0, 0, 0 \nbus \n## <vehicle: bus> \n## name: Medium-Bus  \n## speed: 45 km/h \n## position: 0, 0, 0 \nairplane \n## <vehicle: airplane> \n## name: Big-Plane  \n## speed: 800 km/h \n## position: 0, 0, 0 \n\n```", "```py\nmove <- function(vehicle, x, y, z) { \n  UseMethod(\"move\") \n} \nmove.vehicle <- function(vehicle, movement) { \n  if (length(movement) != 3) { \n    stop(\"All three dimensions must be specified to move a vehicle\") \n  } \n  vehicle$position <- vehicle$position + movement \n  vehicle \n} \n\n```", "```py\nmove.bus <- move.car <- function(vehicle, movement) { \n  if (length(movement) != 2) { \n    stop(\"This vehicle only supports 2d movement\") \n  } \n  movement <- c(movement, 0) \n  NextMethod(\"move\") \n} \n\n```", "```py\nmove.airplane <- function(vehicle, movement) { \n  if (length(movement) == 2) { \n    movement <- c(movement, 0) \n  } \n  NextMethod(\"move\") \n} \n\n```", "```py\nmove(car, c(1, 2, 3)) \n## Error in move.car(car, c(1, 2, 3)): This vehicle only supports 2d movement \n\n```", "```py\nmove(car, c(1, 2)) \n## <vehicle: car> \n## name: Model-A  \n## speed: 80 km/h \n## position: 1, 2, 0 \n\n```", "```py\nmove(airplane, c(1, 2)) \n## <vehicle: airplane> \n## name: Big-Plane  \n## speed: 800 km/h \n## position: 1, 2, 0 \n\n```", "```py\nmove(airplane, c(20, 50, 80)) \n## <vehicle: airplane> \n## name: Big-Plane  \n## speed: 800 km/h \n## position: 21, 52, 80 \n\n```", "```py\nsetClass(\"Product\",  \n  representation(name = \"character\",  \n    price = \"numeric\",  \n    inventory = \"integer\")) \n\n```", "```py\ngetSlots(\"Product\") \n##        name       price   inventory  \n## \"character\"   \"numeric\"   \"integer\" \n\n```", "```py\nlaptop <- new(\"Product\", name = \"Laptop-A\", price = 299, inventory = 100) \n## Error in validObject(.Object): invalid class \"Product\" object: invalid object for slot \"inventory\" in class \"Product\": got class \"numeric\", should be or extend class \"integer\" \n\n```", "```py\nlaptop <- new(\"Product\", name = \"Laptop-A\", price = 299, inventory = 100L) \nlaptop \n## An object of class \"Product\" \n## Slot \"name\": \n## [1] \"Laptop-A\" \n##  \n## Slot \"price\": \n## [1] 299 \n##  \n## Slot \"inventory\": \n## [1] 100 \n\n```", "```py\ntypeof(laptop) \n## [1] \"S4\" \nclass(laptop) \n## [1] \"Product\" \n## attr(,\"package\") \n## [1] \".GlobalEnv\" \n\n```", "```py\nisS4(laptop) \n## [1] TRUE \n\n```", "```py\nlaptop@price * laptop@inventory \n## [1] 29900 \n\n```", "```py\nslot(laptop, \"price\") \n## [1] 299 \n\n```", "```py\nlaptop@price <- 289 \n\n```", "```py\nlaptop@inventory <- 200 \n## Error in (function (cl, name, valueClass) : assignment of an object of class \"numeric\" is not valid for @'inventory' in an object of class \"Product\"; is(value, \"integer\") is not TRUE \n\n```", "```py\nlaptop@value <- laptop@price * laptop@inventory \n## Error in (function (cl, name, valueClass) : 'value' is not a slot in class \"Product\" \n\n```", "```py\ntoy <- new(\"Product\", name = \"Toys\", price = 10) \ntoy \n## An object of class \"Product\" \n## Slot \"name\": \n## [1] \"Toys\" \n##  \n## Slot \"price\": \n## [1] 10 \n##  \n## Slot \"inventory\": \n## integer(0) \n\n```", "```py\nsetClass(\"Product\",  \n  representation(name = \"character\",  \n    price = \"numeric\",  \n    inventory = \"integer\"), \n  prototype(name = \"Unnamed\", price = NA_real_, inventory = 0L)) \n\n```", "```py\ntoy <- new(\"Product\", name = \"Toys\", price = 5) \ntoy \n## An object of class \"Product\" \n## Slot \"name\": \n## [1] \"Toys\" \n##  \n## Slot \"price\": \n## [1] 5 \n##  \n## Slot \"inventory\": \n## [1] 0 \n\n```", "```py\nbottle <- new(\"Product\", name = \"Bottle\", price = 1.5, inventory = -2L) \nbottle \n## An object of class \"Product\" \n## Slot \"name\": \n## [1] \"Bottle\" \n##  \n## Slot \"price\": \n## [1] 1.5 \n##  \n## Slot \"inventory\": \n## [1] -2 \n\n```", "```py\nvalidate_product <- function(object) { \n  errors <- c( \n    if (length(object@name) != 1)   \n      \"Length of name should be 1\"  \n    else if (is.na(object@name))  \n      \"name should not be missing value\", \n\n    if (length(object@price) != 1)  \n      \"Length of price should be 1\" \n    else if (is.na(object@price))  \n      \"price should not be missing value\" \n    else if (object@price <= 0)  \n      \"price must be positive\", \n\n    if (length(object@inventory) != 1)  \n      \"Length of inventory should be 1\" \n    else if (is.na(object@inventory)) \n      \"inventory should not be missing value\" \n    else if (object@inventory < 0)  \n      \"inventory must be non-negative\") \n  if (length(errors) == 0) TRUE else errors \n} \n\n```", "```py\nvalidate_product(bottle) \n## [1] \"inventory must be non-negative\" \n\n```", "```py\nsetClass(\"Product\",  \n  representation(name = \"character\",  \n    price = \"numeric\",  \n    inventory = \"integer\"), \n  prototype(name = \"Unnamed\",  \n    price = NA_real_, inventory = 0L), \n  validity = validate_product) \n\n```", "```py\nbottle <- new(\"Product\", name = \"Bottle\") \n## Error in validObject(.Object): invalid class \"Product\" object: price should not be missing value \n\n```", "```py\nbottle <- new(\"Product\", name = \"Bottle\", price = 3, inventory = -2L) \n## Error in validObject(.Object): invalid class \"Product\" object: inventory must be non-negative \n\n```", "```py\nbottle <- new(\"Product\", name = \"Bottle\",  \n  price = 3, inventory = 100L, volume = 15) \n## Error in initialize(value, ...): invalid name for slot of class \"Product\": volume \n\n```", "```py\nsetClass(\"Container\",  \n  representation(volume = \"numeric\"),  \n  contains = \"Product\") \n\n```", "```py\ngetSlots(\"Container\") \n##      volume        name       price   inventory  \n##   \"numeric\" \"character\"   \"numeric\"   \"integer\" \n\n```", "```py\nbottle <- new(\"Container\", name = \"Bottle\", \n  price = 3, inventory = 100L, volume = 15) \n\n```", "```py\nbottle <- new(\"Container\", name = \"Bottle\", \n  price = 3, inventory = -10L, volume = 15) \n## Error in validObject(.Object): invalid class \"Container\" object: inventory must be non-negative \n\n```", "```py\nbottle <- new(\"Container\", name = \"Bottle\", \n  price = 3, inventory = 100L, volume = -2) \n\n```", "```py\nvalidate_container <- function(object) { \n  errors <- c( \n    if (length(object@volume) != 1) \n      \"Length of volume must be 1\", \n    if (object@volume <= 0) \n      \"volume must be positive\" \n  ) \n  if (length(errors) == 0) TRUE else errors \n} \n\n```", "```py\nsetClass(\"Container\",  \n  representation(volume = \"numeric\"),  \n  contains = \"Product\", \n  validity = validate_container) \n\n```", "```py\nbottle <- new(\"Container\", name = \"Bottle\", \n  price = 3, inventory = 100L, volume = -2) \n## Error in validObject(.Object): invalid class \"Container\" object: volume must be positive \nbottle <- new(\"Container\", name = \"Bottle\", \n  price = 3, inventory = -5L, volume = 10) \n## Error in validObject(.Object): invalid class \"Container\" object: inventory must be non-negative \n\n```", "```py\nsetClass(\"Shape\") \nsetClass(\"Polygon\",  \n  representation(sides = \"integer\"),  \n  contains = \"Shape\") \nsetClass(\"Triangle\",  \n  representation(a = \"numeric\", b = \"numeric\", c = \"numeric\"),  \n  prototype(a = 1, b = 1, c = 1, sides = 3L), \n  contains = \"Polygon\") \nsetClass(\"Rectangle\", \n  representation(a = \"numeric\", b = \"numeric\"), \n  prototype(a = 1, b = 1, sides = 4L), \n  contains = \"Polygon\") \nsetClass(\"Circle\", \n  representation(r = \"numeric\"), \n  prototype(r = 1, sides = Inf), \n  contains = \"Shape\") \n\n```", "```py\nsetGeneric(\"area\", function(object) { \n  standardGeneric(\"area\") \n}, valueClass = \"numeric\") \n## [1] \"area\" \n\n```", "```py\nsetMethod(\"area\", signature(\"Triangle\"), function(object) { \n  a <- object@a \n  b <- object@b \n  c <- object@c \n  s <- (a + b + c) / 2 \n  sqrt(s * (s - a) * (s - b) * (s - c)) \n}) \n## [1] \"area\" \n\n```", "```py\nsetMethod(\"area\", signature(\"Rectangle\"), function(object) { \n  object@a * object@b \n}) \n## [1] \"area\" \nsetMethod(\"area\", signature(\"Circle\"), function(object) { \n  pi * object@r ^ 2 \n}) \n## [1] \"area\" \n\n```", "```py\ntriangle <- new(\"Triangle\", a = 3, b = 4, c = 5) \narea(triangle) \n## [1] 6 \n\n```", "```py\ncircle <- new(\"Circle\", r = 3) \narea(circle) \n## [1] 28.27433 \n\n```", "```py\nsetClass(\"Object\", representation(height = \"numeric\")) \nsetClass(\"Cylinder\", contains = \"Object\") \nsetClass(\"Cone\", contains = \"Object\") \n\n```", "```py\nsetGeneric(\"volume\",  \n  function(shape, object) standardGeneric(\"volume\")) \n## [1] \"volume\" \n\n```", "```py\nsetMethod(\"volume\", signature(\"Rectangle\", \"Cylinder\"),  \n  function(shape, object) { \n    shape@a * shape@b * object@height \n  }) \n## [1] \"volume\" \nsetMethod(\"volume\", signature(\"Rectangle\", \"Cone\"), \n  function(shape, object) { \n    shape@a * shape@b * object@height / 3 \n  }) \n## [1] \"volume\" \n\n```", "```py\nrectangle <- new(\"Rectangle\", a = 2, b = 3) \ncylinder <- new(\"Cylinder\", height = 3) \nvolume(rectangle, cylinder) \n## [1] 18 \n\n```", "```py\nsetMethod(\"volume\", signature(\"Shape\", \"Cylinder\"),  \n  function(shape, object) { \n    area(shape) * object@height \n  }) \n## [1] \"volume\" \nsetMethod(\"volume\", signature(\"Shape\", \"Cone\"), \n  function(shape, object) { \n    area(shape) * object@height / 3 \n  }) \n## [1] \"volume\" \n\n```", "```py\ncircle <- new(\"Circle\", r = 2) \ncone <- new(\"Cone\", height = 3) \nvolume(circle, cone) \n## [1] 12.56637 \n\n```", "```py\nsetMethod(\"volume\", signature(\"Shape\", \"numeric\"), \n  function(shape, object) { \n    area(shape) * object \n  }) \n## [1] \"volume\" \n\n```", "```py\nvolume(rectangle, 3) \n## [1] 18 \n\n```", "```py\nsetMethod(\"*\", signature(\"Shape\", \"Object\"),  \n  function(e1, e2) { \n    volume(e1, e2) \n  }) \n## [1] \"*\" \n\n```", "```py\nrectangle * cone \n## [1] 6 \n\n```", "```py\nlengthen <- function(object, factor) { \n  object@height <- object@height * factor \n  object \n} \n\n```", "```py\ncylinder \n## An object of class \"Cylinder\" \n## Slot \"height\": \n## [1] 3 \nlengthen(cylinder, 2) \n## An object of class \"Cylinder\" \n## Slot \"height\": \n## [1] 6 \ncylinder \n## An object of class \"Cylinder\" \n## Slot \"height\": \n## [1] 3 \n\n```", "```py\nVehicle <- setRefClass(\"Vehicle\",  \n  fields = list(position = \"numeric\", distance = \"numeric\")) \n\n```", "```py\ncar <- Vehicle$new(position = 0, distance = 0) \n\n```", "```py\ncar$position \n## [1] 0 \n\n```", "```py\nmove <- function(vehicle, movement) { \n  vehicle$position <- vehicle$position + movement \n  vehicle$distance <- vehicle$distance + abs(movement) \n} \n\n```", "```py\nmove(car, 10) \ncar \n## Reference class object of class \"Vehicle\" \n## Field \"position\": \n## [1] 10 \n## Field \"distance\": \n## [1] 10 \n\n```", "```py\nVehicle <- setRefClass(\"Vehicle\",  \n  fields = list(position = \"numeric\", distance = \"numeric\"), \n  methods = list(move = function(x) { \n    stopifnot(is.numeric(x)) \n    position <<- position + x \n    distance <<- distance + abs(x) \n  })) \n\n```", "```py\nbus <- Vehicle(position = 0, distance = 0) \nbus$move(5) \nbus \n## Reference class object of class \"Vehicle\" \n## Field \"position\": \n## [1] 5 \n## Field \"distance\": \n## [1] 5 \n\n```", "```py\ninstall.packages(\"R6\") \n\n```", "```py\nlibrary(R6) \nVehicle <- R6Class(\"Vehicle\",  \n  public = list( \n    name = NA, \n    model = NA, \n    initialize = function(name, model) { \n      if (!missing(name)) self$name <- name \n      if (!missing(model)) self$model <- model \n    }, \n    move = function(movement) { \n      private$start() \n      private$position <- private$position + movement \n      private$stop() \n    }, \n    get_position = function() { \n      private$position \n    } \n  ), \n  private = list( \n    position = 0, \n    speed = 0, \n    start = function() { \n      cat(self$name, \"is starting\\n\") \n      private$speed <- 50 \n    }, \n    stop = function() { \n      cat(self$name, \"is stopping\\n\") \n      private$speed <- 0 \n    } \n  )) \n\n```", "```py\ncar <- Vehicle$new(name = \"Car\", model = \"A\") \ncar \n## <Vehicle> \n##   Public: \n##     clone: function (deep = FALSE)  \n##     get_position: function ()  \n##     initialize: function (name, model)  \n##     model: A \n##     move: function (movement)  \n##     name: Car \n##   Private: \n##     position: 0 \n##     speed: 0 \n##     start: function ()  \n##     stop: function () \n\n```", "```py\ncar$move(10) \n## Car is starting \n## Car is stopping \ncar$get_position() \n## [1] 10 \n\n```", "```py\nMeteredVehicle <- R6Class(\"MeteredVehicle\", \n  inherit = Vehicle, \n  public = list( \n    move = function(movement) { \n      super$move(movement) \n      private$distance <<- private$distance + abs(movement) \n    }, \n    get_distance = function() { \n      private$distance \n    } \n  ), \n  private = list( \n    distance = 0 \n  )) \n\n```", "```py\nbus <- MeteredVehicle$new(name = \"Bus\", model = \"B\") \nbus \n## <MeteredVehicle> \n##   Inherits from: <Vehicle> \n##   Public: \n##     clone: function (deep = FALSE)  \n##     get_distance: function ()  \n##     get_position: function ()  \n##     initialize: function (name, model)  \n##     model: B \n##     move: function (movement)  \n##     name: Bus \n##   Private: \n##     distance: 0 \n##     position: 0 \n##     speed: 0 \n##     start: function ()  \n##     stop: function () \n\n```", "```py\nbus$move(10) \n## Bus is starting \n## Bus is stopping \nbus$get_position() \n## [1] 10 \nbus$get_distance() \n## [1] 10 \n\n```", "```py\nbus$move(-5) \n## Bus is starting \n## Bus is stopping \nbus$get_position() \n## [1] 5 \nbus$get_distance() \n## [1] 15 \n\n```"]