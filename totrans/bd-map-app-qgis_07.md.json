["```py\nclass SelectTool(QgsMapToolIdentify):\n    def __init__(self, window):\n        QgsMapToolIdentify.__init__(self, window.mapCanvas)\n        self.window = window\n        self.setCursor(Qt.ArrowCursor)\n\n    def canvasReleaseEvent(self, event):\n        found_features = self.identify(event.x(), event.y(),\n                         self.TopDownStopAtFirst,\n                         self.VectorLayer)\n        if len(found_features) > 0:\n            layer = found_features[0].mLayer\n            feature = found_features[0].mFeature\n\n            if event.modifiers() & Qt.ShiftModifier:\n                layer.select(feature.id())\n            else:\n                layer.setSelectedFeatures([feature.id()])\n        else:\n            self.window.layer.removeSelection()\n```", "```py\nif layer.selectedFeatureCount() == 0:\n    QMessageBox.information(self, \"Info\",\n                            \"There is nothing selected.\")\nelse:\n    msg = []\n    msg.append(\"Selected Features:\")\n    for feature in layer.selectedFeatures():\n        msg.append(\"   \" + feature.attribute(\"NAME\"))\n    QMessageBox.information(self, \"Info\", \"\\n\".join(msg))\n```", "```py\nlayer.startEditing()\n\n# ...make changes...\n\nif modified:\n    reply = QMessageBox.question(window, \"Confirm\",\n                                 \"Save changes to layer?\",\n                                 QMessageBox.Yes | QMessageBox.No,\n                                 QMessageBox.Yes)\n    if reply == QMessageBox.Yes:\n        layer.commitChanges()\n    else:\n        line.rollBack()\nelse:\n     layer.rollBack()\n```", "```py\nclass AddPointTool(QgsMapTool):\n    def __init__(self, canvas, layer):\n        QgsMapTool.__init__(self, canvas)\n        self.canvas = canvas\n        self.layer  = layer\n        self.setCursor(Qt.CrossCursor)\n\n    def canvasReleaseEvent(self, event):\n        point = self.toLayerCoordinates(self.layer, event.pos())\n\n        feature = QgsFeature()\n        feature.setGeometry(QgsGeometry.fromPoint(point))\n        self.layer.addFeature(feature)\n        self.layer.updateExtents()\n```", "```py\nclass MovePointTool(QgsMapToolIdentify):\n    def __init__(self, mapCanvas, layer):\n        QgsMapToolIdentify.__init__(self, mapCanvas)\n        self.setCursor(Qt.CrossCursor)\n        self.layer    = layer\n        self.dragging = False\n        self.feature  = None\n\n    def canvasPressEvent(self, event):\n        found_features = self.identify(event.x(), event.y(),\n                                       [self.layer],\n                                       self.TopDownAll)\n        if len(found_features) > 0:\n            self.dragging = True\n            self.feature  = found_features[0].mFeature\n        else:\n            self.dragging = False\n            self.feature  = None\n\n    def canvasMoveEvent(self, event):\n        if self.dragging:\n            point = self.toLayerCoordinates(self.layer,\n                                            event.pos())\n\n            geometry = QgsGeometry.fromPoint(point)\n\n            self.layer.changeGeometry(self.feature.id(), geometry)\n            self.canvas().refresh()\n\n    def canvasReleaseEvent(self, event):\n        self.dragging = False\n        self.feature  = None\n```", "```py\nclass DeleteTool(QgsMapToolIdentify):\n    def __init__(self, mapCanvas, layer):\n        QgsMapToolIdentify.__init__(self, mapCanvas)\n        self.setCursor(Qt.CrossCursor)\n        self.layer   = layer\n        self.feature = None\n\n    def canvasPressEvent(self, event):\n        found_features = self.identify(event.x(), event.y(),\n                                       [self.layer],\n                                       self.TopDownAll)\n        if len(found_features) > 0:\n            self.feature = found_features[0].mFeature\n        else:\n            self.feature = None\n\n    def canvasReleaseEvent(self, event):\n        found_features = self.identify(event.x(), event.y(),\n                                       [self.layer],\n                                       self.TopDownAll)\n        if len(found_features) > 0:\n            if self.feature.id() == found_features[0].mFeature.id():\n                self.layer.deleteFeature(self.feature.id())\n```", "```py\nclass CaptureTool(QgsMapTool):\n    CAPTURE_LINE    = 1\n    CAPTURE_POLYGON = 2\n\n    def __init__(self, canvas, layer, onGeometryAdded,\n                 captureMode):\n        QgsMapTool.__init__(self, canvas)\n        self.canvas          = canvas\n        self.layer           = layer\n        self.onGeometryAdded = onGeometryAdded\n        self.captureMode     = captureMode\n        self.rubberBand      = None\n        self.tempRubberBand  = None\n        self.capturedPoints  = []\n        self.capturing       = False\n        self.setCursor(Qt.CrossCursor)\n```", "```py\n    def canvasReleaseEvent(self, event):\n        if event.button() == Qt.LeftButton:\n            if not self.capturing:\n                self.startCapturing()\n            self.addVertex(event.pos())\n        elif event.button() == Qt.RightButton:\n            points = self.getCapturedGeometry()\n            self.stopCapturing()\n            if points != None:\n                self.geometryCaptured(points)\n```", "```py\n    def canvasMoveEvent(self, event):\n        if self.tempRubberBand != None and self.capturing:\n            mapPt,layerPt = self.transformCoordinates(event.pos())\n            self.tempRubberBand.movePoint(mapPt)\n```", "```py\n    def keyPressEvent(self, event):\n        if event.key() == Qt.Key_Backspace or \\\n           event.key() == Qt.Key_Delete:\n            self.removeLastVertex()\n            event.ignore()\n        if event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:\n            points = self.getCapturedGeometry()\n            self.stopCapturing()\n            if points != None:\n                self.geometryCaptured(points)\n```", "```py\n    def transformCoordinates(self, canvasPt):\n        return (self.toMapCoordinates(canvasPt),\n                self.toLayerCoordinates(self.layer, canvasPt))\n```", "```py\n    def startCapturing(self):\n        color = QColor(\"red\")\n        color.setAlphaF(0.78)\n\n        self.rubberBand = QgsRubberBand(self.canvas,\n                                        self.bandType())\n        self.rubberBand.setWidth(2)\n        self.rubberBand.setColor(color)\n        self.rubberBand.show()\n\n        self.tempRubberBand = QgsRubberBand(self.canvas,\n                                            self.bandType())\n        self.tempRubberBand.setWidth(2)\n        self.tempRubberBand.setColor(color)\n        self.tempRubberBand.setLineStyle(Qt.DotLine)\n        self.tempRubberBand.show()\n\n        self.capturing = True\n```", "```py\n    def bandType(self):\n        if self.captureMode == CaptureTool.CAPTURE_POLYGON:\n            return QGis.Polygon\n        else:\n            return QGis.Line\n```", "```py\n    def stopCapturing(self):\n        if self.rubberBand:\n            self.canvas.scene().removeItem(self.rubberBand)\n            self.rubberBand = None\n        if self.tempRubberBand:\n            self.canvas.scene().removeItem(self.tempRubberBand)\n            self.tempRubberBand = None\n        self.capturing = False\n        self.capturedPoints = []\n        self.canvas.refresh()\n```", "```py\n    def addVertex(self, canvasPoint):\n        mapPt,layerPt = self.transformCoordinates(canvasPoint)\n\n        self.rubberBand.addPoint(mapPt)\n        self.capturedPoints.append(layerPt)\n\n        self.tempRubberBand.reset(self.bandType())\n        if self.captureMode == CaptureTool.CAPTURE_LINE:\n            self.tempRubberBand.addPoint(mapPt)\n        elif self.captureMode == CaptureTool.CAPTURE_POLYGON:\n            firstPoint = self.rubberBand.getPoint(0, 0)\n            self.tempRubberBand.addPoint(firstPoint)\n            self.tempRubberBand.movePoint(mapPt)\n            self.tempRubberBand.addPoint(mapPt)\n```", "```py\n    def removeLastVertex(self):\n        if not self.capturing: return\n\n        bandSize     = self.rubberBand.numberOfVertices()\n        tempBandSize = self.tempRubberBand.numberOfVertices()\n        numPoints    = len(self.capturedPoints)\n\n        if bandSize < 1 or numPoints < 1:\n            return\n\n        self.rubberBand.removePoint(-1)\n\n        if bandSize > 1:\n            if tempBandSize > 1:\n                point = self.rubberBand.getPoint(0, bandSize-2)\n                self.tempRubberBand.movePoint(tempBandSize-2,\n                                              point)\n        else:\n            self.tempRubberBand.reset(self.bandType())\n\n        del self.capturedPoints[-1]\n```", "```py\n    def getCapturedGeometry(self):\n        points = self.capturedPoints\n        if self.captureMode == CaptureTool.CAPTURE_LINE:\n            if len(points) < 2:\n                return None\n        if self.captureMode == CaptureTool.CAPTURE_POLYGON:\n            if len(points) < 3:\n                return None\n        if self.captureMode == CaptureTool.CAPTURE_POLYGON:\n            points.append(points[0]) # Close polygon.\n        return points\n```", "```py\n    def geometryCaptured(self, layerCoords):\n        if self.captureMode == CaptureTool.CAPTURE_LINE:\n            geometry = QgsGeometry.fromPolyline(layerCoords)\n        elif self.captureMode == CaptureTool.CAPTURE_POLYGON:\n            geometry = QgsGeometry.fromPolygon([layerCoords])\n\n        feature = QgsFeature()\n        feature.setGeometry(geometry)\n        self.layer.addFeature(feature)\n        self.layer.updateExtents()\n        self.onGeometryAdded()\n```", "```py\nclass EditTool(QgsMapTool):\n    def __init__(self, mapCanvas, layer, onGeometryChanged):\n        QgsMapTool.__init__(self, mapCanvas)\n        self.setCursor(Qt.CrossCursor)\n        self.layer             = layer\n        self.onGeometryChanged = onGeometryChanged\n        self.dragging          = False\n        self.feature           = None\n        self.vertex            = None\n```", "```py\n    def canvasPressEvent(self, event):\n        feature = self.findFeatureAt(event.pos())\n        if feature == None:\n            return\n```", "```py\n        mapPt,layerPt = self.transformCoordinates(event.pos())\n        geometry = feature.geometry()\n\n        vertexCoord,vertex,prevVertex,nextVertex,distSquared = \\\n            geometry.closestVertex(layerPt)\n\n        distance = math.sqrt(distSquared)\n```", "```py\n        tolerance = self.calcTolerance(event.pos())\n        if distance > tolerance: return\n```", "```py\n        if event.button() == Qt.LeftButton:\n            # Left click -> move vertex.\n            self.dragging = True\n            self.feature  = feature\n            self.vertex   = vertex\n            self.moveVertexTo(event.pos())\n            self.canvas().refresh()\n        elif event.button() == Qt.RightButton:\n            # Right click -> delete vertex.\n            self.deleteVertex(feature, vertex)\n            self.canvas().refresh()\n```", "```py\n    def canvasMoveEvent(self, event):\n        if self.dragging:\n            self.moveVertexTo(event.pos())\n            self.canvas().refresh()\n```", "```py\n    def canvasReleaseEvent(self, event):\n        if self.dragging:\n            self.moveVertexTo(event.pos())\n            self.layer.updateExtents()\n            self.canvas().refresh()\n            self.dragging = False\n            self.feature  = None\n            self.vertex   = None\n```", "```py\n    def canvasDoubleClickEvent(self, event):\n        feature = self.findFeatureAt(event.pos())\n        if feature == None:\n            return\n\n        mapPt,layerPt = self.transformCoordinates(event.pos())\n        geometry      = feature.geometry()\n\n        distSquared,closestPt,beforeVertex = \\\n            geometry.closestSegmentWithContext(layerPt)\n\n        distance = math.sqrt(distSquared)\n        tolerance = self.calcTolerance(event.pos())\n        if distance > tolerance: return\n```", "```py\n        geometry.insertVertex(closestPt.x(), closestPt.y(),\n                              beforeVertex)\n        self.layer.changeGeometry(feature.id(), geometry)\n        self.canvas().refresh()\n```", "```py\n    def findFeatureAt(self, pos):\n        mapPt,layerPt = self.transformCoordinates(pos)\n        tolerance = self.calcTolerance(pos)\n        searchRect = QgsRectangle(layerPt.x() - tolerance,\n                                  layerPt.y() - tolerance,\n                                  layerPt.x() + tolerance,\n                                  layerPt.y() + tolerance)\n\n        request = QgsFeatureRequest()\n        request.setFilterRect(searchRect)\n        request.setFlags(QgsFeatureRequest.ExactIntersect)\n\n        for feature in self.layer.getFeatures(request):\n            return feature\n\n        return None\n```", "```py\n    def calcTolerance(self, pos):\n        pt1 = QPoint(pos.x(), pos.y())\n        pt2 = QPoint(pos.x() + 10, pos.y())\n\n        mapPt1,layerPt1 = self.transformCoordinates(pt1)\n        mapPt2,layerPt2 = self.transformCoordinates(pt2)\n        tolerance = layerPt2.x() - layerPt1.x()\n\n        return tolerance\n```", "```py\n    def moveVertexTo(self, pos):\n        geometry = self.feature.geometry()\n        layerPt = self.toLayerCoordinates(self.layer, pos)\n        geometry.moveVertex(layerPt.x(), layerPt.y(), self.vertex)\n        self.layer.changeGeometry(self.feature.id(), geometry)\n        self.onGeometryChanged()\n```", "```py\n    def deleteVertex(self, feature, vertex):\n        geometry = feature.geometry()\n\n        if geometry.wkbType() == QGis.WKBLineString:\n            lineString = geometry.asPolyline()\n            if len(lineString) <= 2:\n                return\n        elif geometry.wkbType() == QGis.WKBPolygon:\n            polygon = geometry.asPolygon()\n            exterior = polygon[0]\n            if len(exterior) <= 4:\n                return\n\n        if geometry.deleteVertex(vertex):\n            self.layer.changeGeometry(feature.id(), geometry)\n            self.onGeometryChanged()\n```"]