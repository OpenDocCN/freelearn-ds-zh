["```py\npip install requests\n\n```", "```py\n    import requests\n    import json\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://server.arcgisonline.com/arcgis/rest/services?f=pjson\"\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://server.arcgisonline.com/arcgis/rest/services?f=pjson\"\n    r = requests.get(agisurl)\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://server.arcgisonline.com/arcgis/rest/services?f=pjson\"\n    r = requests.get(agisurl)\n    print(r.text)\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://server.arcgisonline.com/arcgis/rest/services?f=pjson\"\n    r = requests.get(agisurl)\n    decoded = json.loads(r.text)\n    print(decoded)\n\n    ```", "```py\n    {u'folders': [u'Canvas', u'Demographics', u'Elevation', u'Ocean', u'Reference', u'Specialty', u'Utilities'], u'services': [{u'type': u'MapServer', u'name': u'ESRI_Imagery_World_2D'}, {u'type': u'MapServer', u'name': u'ESRI_StreetMap_World_2D'}, {u'type': u'GlobeServer', u'name': u'I3_Imagery_Prime_World'}, {u'type': u'GlobeServer', u'name': u'NASA_CloudCover_World'}, {u'type': u'MapServer', u'name': u'NatGeo_World_Map'}, {u'type': u'MapServer', u'name': u'NGS_Topo_US_2D'}, {u'type': u'MapServer', u'name': u'Ocean_Basemap'}, {u'type': u'MapServer', u'name': u'USA_Topo_Maps'}, {u'type': u'MapServer', u'name': u'World_Imagery'}, {u'type': u'MapServer', u'name': u'World_Physical_Map'}, {u'type': u'MapServer', u'name': u'World_Shaded_Relief'}, {u'type': u'MapServer', u'name': u'World_Street_Map'}, {u'type': u'MapServer', u'name': u'World_Terrain_Base'}, {u'type': u'MapServer', u'name': u'World_Topo_Map'}], u'currentVersion': 10.2}\n\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1?f=pjson\"\n\n    ```", "```py\n    import requests\n    import json\n\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1\"\n    payload = { 'where': 'STATE_FIPS = \\'48\\' and CNTY_FIPS = \\'021\\'','returnCountyOnly': 'false', \n    'returnIdsOnly': 'false', 'returnGeometry': 'false', \n    'f': 'pjson'}\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1?f=pjson\n    payload = { 'where': 'STATE_FIPS = \\'48\\' and CNTY_FIPS = \\'021\\'','returnCountyOnly': 'false', \\\n                'returnIdsOnly': 'false', 'returnGeometry': 'false', \\\n                'f': 'pjson'}\n\n    r = requests.get(agisurl, params=payload)\n\n    ```", "```py\n    r = requests.get(agisurl, params=payload)\n    decoded = json.loads(r.text)\n    ```", "```py\n    r = requests.get(agisurl, params=payload)\n\n    decoded = json.loads(r.text)\n\n    print(\"The layer name is: \" + decoded['name'])\n    print(\"The xmin: \" + str(decoded['extent']['xmin']))\n    print(\"The xmax: \" + str(decoded['extent']['xmax']))\n    print(\"The ymin: \" + str(decoded['extent']['ymin']))\n    print(\"The ymax: \" + str(decoded['extent']['ymax']))\n    print(\"The fields in this layer: \")\n    for rslt in decoded['fields']:\n     print(rslt['name'])\n\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export\"\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export\"\n    payload = { 'bbox':'-115.8,30.4, 85.5,50.5', \n     'size':'800,600', \n     'imageSR': '102004', \n     'format':'gif', \n     'transparent':'false', \n     'f': 'pjson'}\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export\"\n    payload = { 'bbox':'-115.8,30.4, 85.5,50.5', 'size':'800,600', 'imageSR': '102004', 'format':'gif', 'transparent':'false', 'f': 'pjson'}\n    r = requests.get(agisurl, params=payload)\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export\"\n    payload = { 'bbox':'-115.8,30.4, 85.5,50.5', \n                'size':'800,600', \n                'imageSR': '102004', \n                'format':'gif', \n                'transparent':'false', \n                      'f': 'pjson'}\n    r = requests.get(agisurl, params=payload)\n    print(r.text)\n\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query\"\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query\"\n    payload = { 'where':'STATE_FIPS = \\'48\\' and CNTY_FIPS =       \\'021\\'','returnCountOnly':'false',\n    'returnIdsOnly': 'false', 'returnGeometry':'false', \n    'outFields':'POP2000,POP2007,BLKGRP',\n    'f': 'pjson'}\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query\"\n    payload = { 'where':'STATE_FIPS = \\'48\\' and CNTY_FIPS =       \\'021\\'','returnCountOnly':'false', \\\n    'returnIdsOnly': 'false', 'returnGeometry':'false', \\\n    'outFields':'POP2000,POP2007,BLKGRP', \\\n    'f': 'pjson'}\n    r = requests.get(agisurl, params=payload)\n\n    ```", "```py\n    import requests, json\n    agisurl = \"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/1/query\"\n    payload = { 'where':'STATE_FIPS = \\'48\\' and CNTY_FIPS =       \\'021\\'','returnCountOnly':'false', \\\n    'returnIdsOnly': 'false', 'returnGeometry':'false', \\\n    'outFields':'POP2000,POP2007,BLKGRP', \\\n    'f': 'pjson'}\n    r = requests.get(agisurl, params=payload)\n    print(r.text)\n\n    ```", "```py\n    r = requests.get(agisurl, params=payload)\n    #print(r.text)\n    decoded = json.loads(r.text)\n    ```", "```py\n    r = requests.get(agisurl, params=payload)\n    #print(r.text)\n    decoded = json.loads(r.text)\n    for rslt in decoded['features']:\n     print(\"Block Group: \" + str(rslt['attributes']['BLKGRP']))\n     print(\"Population 2000: \" + str(rslt['attributes']['POP2000']))\n     print(\"Population 2007: \" + str(rslt['attributes']['POP2007']))\n\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find\"\n    payload = { 'text': '1202 Sand Wedge, San Antonio, TX, 78258','f':'pjson'}\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find\"\n    payload = { 'text': '1202 Sand Wedge, San Antonio, TX, 78258','f':'pjson'}\n\n    r = requests.get(agisurl, params=payload)\n\n    decoded = json.loads(r.text)\n\n    ```", "```py\n    import requests\n    import json\n    agisurl = \"http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find\"\n    payload = { 'text': '1202 Sand Wedge, San Antonio, TX, 78258','f':'pjson'}\n\n    r = requests.get(agisurl, params=payload)\n\n    decoded = json.loads(r.text)\n\n    print(\"The geocoded address: \" + decoded['locations'][0]['name'])\n    print(\"The longitude: \" + str(decoded['locations'][0]['feature']['geometry']['x']))\n    print(\"The lattitude: \" + str(decoded['locations'][0]['feature']['geometry']['y']))\n    print(\"The geocode score: \" + str(decoded['locations'][0]['feature']['attributes']['Score']))\n    print(\"The address type: \" + str(decoded['locations'][0]['feature']['attributes']['Addr_Type']))\n\n    ```", "```py\n    The geocoded address: 1202 Sand Wedge, San Antonio, Texas, 78258\n    The longitude: -98.4744442811\n    The lattitude: 29.6618639681\n    The geocode score: 100\n    The address type: PointAddress\n\n    ```", "```py\n    import arcpy\n    ```", "```py\n    import arcpy\n\n    arcpy.env.workspace = r\"c:\\ArcpyBook\\data\"\n    outFeatureClass = r\"c:\\ArcpyBook\\data\\AllTracts.shp\"\n    ```", "```py\n    arcpy.env.workspace = r\"c:\\ArcyBook\\data\"\n    outFeatureClass = r\"c:\\ArcpyBook\\data\\AllTracts.shp\"\n\n    fieldmappings = arcpy.FieldMappings()\n    fldmap_STFIPS = arcpy.FieldMap()\n    fldmap_COFIPS = arcpy.FieldMap()\n    fldmap_TRACT = arcpy.FieldMap()\n\n    ```", "```py\n    fieldmappings = arcpy.FieldMappings()\n    fieldmap_STFIPS = arcpy.FieldMap()\n    fieldmap_COFIPS = arcpy.FieldMap()\n    fieldmap_TRACT = arcpy.FieldMap()\n\n    #List all feature classes that start with 'County' and type Polygon\n    fclss = arcpy.ListFeatureClasses(\"County*\", \"Polygon\")\n\n    ```", "```py\n    fclss = arcpy.ListFeatureClasses(\"County*\", \"Polygon\")\n\n    vTab = arcpy.ValueTable()\n    for fc in fclss:\n     fieldmappings.addTable(fc)\n     fldmap_STFIPS.addInputField(fc, \"STFID\")\n     fldmap_COFIPS.addInputField(fc, \"STFID\")\n     fldmap_TRACT.addInputField(fc, \"STFID\")\n     vTab.addRow(fc)\n\n    ```", "```py\n    vTab = arcpy.ValueTable()\n    for fc in fclss:\n      fieldmappings.addTable(fc)\n      fldmap_STFIPS.addInputField(fc, \"STFID\")\n      fldmap_COFIPS.addInputField(fc, \"STFID\")\n      fldmap_TRACT.addInputField(fc, \"STFID\")\n      vTab.addRow(fc)\n\n    # STFIPS field\n    for x in range(0, fldmap_STFIPS.inputFieldCount):\n     fldmap_STFIPS.setStartTextPosition(x, 0)\n     fldmap_STFIPS.setEndTextPosition(x, 1)\n\n    fld_STFIPS = fldmap_STFIPS.outputField\n    fld_STFIPS.name = \"STFIPS\"\n    fldmap_STFIPS.outputField = fld_STFIPS\n\n    ```", "```py\n    # STFIPS field\n    for x in range(0, fldmap_STFIPS.inputFieldCount):\n      fldmap_STFIPS.setStartTextPosition(x, 0)\n      fldmap_STFIPS.setEndTextPosition(x, 1)\n\n    fld_STFIPS = fldmap_STFIPS.outputField\n    fld_STFIPS.name = \"STFIPS\"\n    fldmap_STFIPS.outputField = fld_STFIPS\n\n    # COFIPS field\n    for x in range(0, fldmap_COFIPS.inputFieldCount):\n     fldmap_COFIPS.setStartTextPosition(x, 2)\n     fldmap_COFIPS.setEndTextPosition(x, 4)\n\n    fld_COFIPS = fldmap_COFIPS.outputField\n    fld_COFIPS.name = \"COFIPS\"\n    fldmap_COFIPS.outputField = fld_COFIPS\n\n    ```", "```py\n    # COFIPS field\n    for x in range(0, fldmap_COFIPS.inputFieldCount):\n    \tfldmap_COFIPS.setStartTextPosition(x, 2)\n    \tfldmap_COFIPS.setEndTextPosition(x, 4)\n\n    fld_COFIPS = fldmap_COFIPS.outputField\n    fld_STFIPS.name = \"COFIPS\"\n    fldmap_COFIPS.outputField = fld_COFIPS\n\n    # TRACT field\n    for x in range(0, fldmap_TRACT.inputFieldCount):\n     fldmap_TRACT.setStartTextPosition(x, 5)\n     fldmap_TRACT.setEndTextPosition(x, 12)\n\n    fld_TRACT = fldmap_TRACT.outputField\n    fld_TRACT.name = \"TRACT\"\n    fldmap_TRACT.outputField = fld_TRACT\n\n    ```", "```py\n    # TRACT field\n    for x in range(0, fldmap_TRACT.inputFieldCount):\n    \tfldmap_TRACT.setStartTextPosition(x, 5)\n    \tfldmap_TRACT.setEndTextPosition(x, 12)\n\n    fld_TRACT = fldmap_TRACT.outputField\n    fld_TRACT.name = \"TRACT\"\n    fldmap_TRACT.outputField = fld_TRACT\n\n    #Add fieldmaps into the fieldmappings objec\n    fieldmappings.addFieldMap(fldmap_STFIPS)\n    fieldmappings.addFieldMap(fldmap_COFIPS)\n    fieldmappings.addFieldMap(fldmap_TRACT)\n\n    ```", "```py\n    #Add fieldmaps into the fieldmappings objec\n    fieldmappings.addFieldMap(fldmap_STFIPS)\n    fieldmappings.addFieldMap(fldmap_COFIPS)\n    fieldmappings.addFieldMap(fldmap_TRACT)\n\n    arcpy.Merge_management(vTab, outFeatureClass,fieldmappings)\n    print(\"Merge completed\")\n\n    ```", "```py\n    import arcpy\n\n    Arcpy.env.workspace = r\"c:\\ArcyBook\\data\"\n    outFeatureClass = r\"c:\\ArcpyBook\\data\\AllTracts.shp\"\n\n    fieldmappings = arcpy.FieldMappings()\n    fldmap_STFIPS = arcpy.FieldMap()\n    fldmap_COFIPS = arcpy.FieldMap()\n    fldmap_TRACT = arcpy.FieldMap()\n\n    #List all feature classes that start with 'County' and type Polygon\n    fclss = arcpy.ListFeatureClasses(\"County*\", \"Polygon\")\n\n    vTab = arcpy.ValueTable()\n    for fc in fclss:\n      fieldmappings.addTable(fc)\n      fldmap_STFIPS.addInputField(fc, \"STFID\")\n      fldmap_COFIPS.addInputField(fc, \"STFID\")\n      fldmap_TRACT.addInputField(fc, \"STFID\")\n      vTab.addRow(fc)\n\n    # STFIPS field\n    for x in range(0, fldmap_STFIPS.inputFieldCount):\n      fldmap_STFIPS.setStartTextPosition(x, 0)\n      fldmap_STFIPS.setEndTextPosition(x, 1)\n\n    fld_STFIPS = fldmap_STFIPS.outputField\n    fld_STFIPS.name = \"STFIPS\"\n    fldmap_STFIPS.outputField = fld_STFIPS\n\n    # COFIPS field\n    for x in range(0, fldmap_COFIPS.inputFieldCount):\n      fldmap_COFIPS.setStartTextPosition(x, 2)\n      fldmap_COFIPS.setEndTextPosition(x, 4)\n\n    fld_COFIPS = fldmap_COFIPS.outputField\n    fld_COFIPS.name = \"COFIPS\"\n    fldmap_COFIPS.outputField = fld_COFIPS\n\n    # TRACT field\n    for x in range(0, fldmap_TRACT.inputFieldCount):\n    \tfldmap_TRACT.setStartTextPosition(x, 5)\n    \tfldmap_TRACT.setEndTextPosition(x, 12)\n\n    fld_TRACT = fldmap_TRACT.outputField\n    fld_TRACT.name = \"TRACT\"\n    fldmap_TRACT.outputField = fld_TRACT\n\n    #Add fieldmaps into the fieldmappings objec\n    fieldmappings.addFieldMap(fldmap_STFIPS)\n    fieldmappings.addFieldMap(fldmap_COFIPS)\n    fieldmappings.addFieldMap(fldmap_TRACT)\n\n    arcpy.Merge_management(vTab, outFeatureClass,fieldmappings)\n    print(\"Merge completed\")\n    ```", "```py\n    import arcpy\n\n    arcpy.env.workspace = r\"c:\\ArcyBook\\data\"\n    ```", "```py\n    import arcpy\n\n    arcpy.env.workspace = r\"c:\\ArcyBook\\data\"\n    vTab = arcpy.ValueTable()\n    ```", "```py\n    vTab = arcpy.ValueTable()\n    vTab.setRow(0, \"5\")\n    vTab.setRow(1, \"10\")\n    vTab.setRow(2, \"20\")\n    ```", "```py\n    vTab = arcpy.ValueTable()\n    vTab.setRow(0, \"5\")\n    vTab.setRow(1, \"10\")\n    vTab.setRow(2, \"20\")\n\n    inFeature = 'Hospitals.shp'\n    outFeature = 'HospitalMBuff.shp'\n    dist = vTab\n    bufferUnit = \"meters\"\n    ```", "```py\n    inFeature = 'Hospitals.shp'\n    outFeature = 'HospitalMBuff.shp'\n    dist = vTab\n    bufferUnit = \"meters\"\n\n    arcpy.MultipleRingBuffer_analysis(inFeature, outFeature, dist, bufferUnit, '', 'ALL')\n    print(\"Multi-Ring Buffer Complete\")\n    ```"]