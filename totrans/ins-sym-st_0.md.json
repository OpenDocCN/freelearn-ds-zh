["```py\n$ sudo apt-get install ipython-notebook\n```", "```py\n$ sudo apt-get install python-numpy python-matplotlib\n```", "```py\n$ [sudo] pip install numpy matplotlib ipython[zmq,notebook]\n```", "```py\n$ [sudo] pip install sympy\n```", "```py\n$ python setup.py install\n```", "```py\n$ sudo apt-get install python-sympy\n```", "```py\n$ ipython notebook –-pylab inline\n```", "```py\n%load_ext sympy.interactive.ipythonprinting\nfrom sympy import *\nx, y, z = symbols('x y z')\n```", "```py\n    x_min, x_max = choose_domain([0] + poles + extrema)\n    ```", "```py\n    y_min, y_max = choose_domain([0] + extrema_values + [m*x_min + p, m*x_max + p])\n    ```", "```py\n    plt.vlines(poles, y_min, y_max, 'r', linewidth=2)\n    ```", "```py\n    plt.plot([x_min, x_max], [m*x_min + p, m*x_max + p], 'r', linewidth=2)\n    ```", "```py\n    plt.plot(extrema, extrema_values, 'ro')\n    ```", "```py\n    plt.title(\"Sketch of $%s \\mapsto %s$\" % (latex(x), latex(frac)))\n    ```", "```py\n>>> Integer(3) + Integer(4)\n7\n>>> Integer(3) - Integer(4)\n-1\n>>> Integer(3) * Integer(4)\n12\n>>> Integer(4) / Integer(3)  # returns a Rational\n4/3\n>>> Integer(6) / Integer(3)  # returns an Integer\n2\n>>> Integer(3) ** Integer(4)\n81\n>>> Integer(4) // Integer(3)\n1\n>>> Integer(12) % Integer(5)\n2\n```", "```py\n>>> factorint(42)\n{2: 1, 3: 1, 7: 1}\n>>> lcm(15, 20)\n60\n>>> gcd(15, 20)\n5\n```", "```py\n>>> # Decomposing for clarity\n>>> a = S(1)/2\n>>> b = S(2)/3\n>>> sqrt(a**2 + b**2)\n5/6\n>>> # In a real setting, you would probably rather use a one-liner\n>>> # But mind the parentheses!\n>>> sqrt((S(1)/2)**2 + (S(2)/3)**2)\n5/6\n```", "```py\n>>> root(-25, 4)\n(-1)**(1/4)*sqrt(5)\n>>> root(-1, 3) != -1\nTrue\n```", "```py\n>>> z = Symbol('z') # complex variable\n>>> x = Symbol('x', real=True) # real variable\n>>> a = Symbol('a', positive=True) # positive and therefore real\n```", "```py\n>>> symbols('x, y, z')\n(x, y, z)\n>>> symbols('a:c, i:k')\n(a, b, c, i, j, k)\n>>> symbols('x:5')\n(x0, x1, x2, x3, x4)\n>>> symbols('x3:12')\n(x3, x4, x5, x6, x7, x8, x9, x10, x11)\n```", "```py\n>>> x, y = symbols('x, y', real=True)\n>>> a, b = symbols('a, b', positive=True)\n>>> z = symbols('z')\n```", "```py\n>>> x + 2*y + x - 3*y\n2*x - y\n>>> (x + 1)*(x - 1)\n(x - 1)*(x + 1)\n```", "```py\n>>> t = Symbol('t')\n>>> expr = t + 1\n>>> t = 1\n>>> expr\nt + 1\n```", "```py\n>>> cos(log(2))\ncos(log(2))\n```", "```py\n>>> f = Function('f')\n>>> f(0)\nf(0)\n```", "```py\n>>> g = Lambda([x], 1 - x**2)\n>>> g\nLambda(_x, -_x**2 + 1)\n>>> g(2)\n-3\n```", "```py\n>>> expr = exp(-x)*log(1-x)*2\n>>> srepr(expr)\n\"Mul(Integer(2), Function('exp')(Mul(Integer(-1), Symbol('x'))), Function('log')(Add(Mul(Integer(-1), Symbol('x')), Integer(1))))\"\n>>> list(preorder_traversal(expr))\n[2*exp(-x)*log(-x + 1), 2, exp(-x), -x, -1, x, log(-x + 1), -x + 1, 1, -x, -1, x]\n>>> expr.__class__, expr.args\n(, (2, exp(-x), log(-x + 1)))\n>>> expr.args[1].__class__, expr.args[1].args\n(exp, (-x,))\n```", "```py\n>>> expr.atoms()\nset([1, 2, -1, x])\n>>> expr.atoms(Integer)\nset([1, 2, -1])\n```", "```py\n>>> Lambda([x, y], x + y).free_symbols\nset([])\n>>> Lambda([x, y], a*x + b*y).free_symbols\nset([b, a])\n```", "```py\n>>> (pi**2 - 9).is_positive\nTrue\n>>> (x**2 + 1).is_positive\nTrue\n>>> (x**2 - 1).is_positive is None\nTrue\n```", "```py\n>>> sqrt(z**2)  # recall that z is complex\nsqrt(z**2)\n>>> sqrt(x**2)  # x is real\nAbs(x)\n>>> sqrt(a**2)  # a is positive\na\n```", "```py\n>>> x, y = symbols('x, y', real=True)\n>>> (cos(x) * exp(y)).subs({x: pi, y: 2})\n-exp(2)\n```", "```py\n>>> expr = exp(x+1)/(x**2-2)\n>>> expr.subs(x, 2)\nexp(3)/2\n```", "```py\n    expr.subs(z, 1 + a).\n    ```", "```py\n>>> expr = sqrt((z-1)**2)/z\n>>> tmp_expr = expr.subs(z, 1 + a)\n>>> tmp_expr\na/(a + 1)\n>>> expr = tmp_expr.subs(a, z-1)\n>>> expr\n(z - 1)/z\n```", "```py\n>>> simplify(cos(x)**2 + sin(x)**2\n1\n>>> simplify(cos(log(a**2))*tan(log(a**2)))\nsin(2*log(a))\n```", "```py\n>>> radsimp(1/(sqrt(5) – 2))\n2 + sqrt(5)\n>>> trigsimp(sin(x)**2 + cos(x)**2)\n1\n>>> cancel((x**2 - 1)/(x - 1))\nx + 1\n>>> together(1/(x-1) - 1/(x+1))\n2/((x - 1)*(x + 1))\n>>> apart(2/(x**2 - 1))\n-1/(x + 1) + 1/(x - 1)\n```", "```py\n>>> expand_power_base((a*b)**3)\na**3*b**3\n>>> expand_power_exp(2**(a+b))\n2**a*2**b\n>>> expand_log(log(a*b**2))\nlog(a) + 2*log(b)\n>>> expand_complex((-1)**(S(1)/3))\n1/2 + sqrt(3)*I/2\n>>> expand_trig(cos(a+b))\n-sin(a)*sin(b) + cos(a)*cos(b)\n```", "```py\n>>> x + x == 2*x\nTrue\n>>> x*(x+1) == x**2 + x\nFalse\n```", "```py\n>>> simplify(x*(x+1) - (x**2 + x)) == 0\nTrue\n>>> simplify(1/cos(x)**2 - (1 + tan(x)**2)) == 0\nTrue\n```", "```py\n>>> N(exp(pi*sqrt(163)))\n2.62537412640769e+17\n>>> N(exp(pi*sqrt(163)), 50)\n262537412640768743.99999999999925007259719818568888\n>>> q = exp(pi*sqrt(163))\n>>> N(ceiling(q) - q)\n7.49927402801814e-13\n```", "```py\n>>> r = N(exp(pi*sqrt(163)))\n>>> ceiling(r) - r\n-6.00000000000000\n```", "```py\n>>> expr = exp(x)/(x+1)\n>>> deriv = diff(expr, x)\n>>> N(deriv, subs={x: 1.2345})\n0.849702535502635\n```", "```py\n>>> f = lambdify([x, a], a + x**2, \"numpy\")\n>>> arr = np.random.randn(1000)\n>>> result = f(arr, 0.4)\n>>> result[:3]\narray([ 0.75059394,  4.68686571,  1.70330863])\n```", "```py\n[{'sin': mysin}, \"numpy\"]\n```", "```py\n>>> diff(exp(x**2), x)\n2*x*exp(x**2)\n>>> diff(x**2 * y**2, y)\n2*x**2*y\n```", "```py\n>>> diff(x**3, x, x)\n6*x\n>>> diff(x**3, x, 2)\n6*x\n>>> diff(x**2 * y**2, x, 2, y, 2)\n4\n```", "```py\n>>> f = Function('f')\n>>> diff(f(x**2), x)\n2*x*Subs(Derivative(f(_xi_1), _xi_1), (_xi_1,), (x**2,))\n```", "```py\n>>> limit(exp(-x), x, oo)\n0\n>>> limit(1/x**2, x, 0)\noo\n```", "```py\n>>> limit(1/x, x, 0, \"-\")\n-oo\n>>> limit(1/x, x, 0, \"+\")\noo\n```", "```py\n>>> integrate(sin(x), x)\n-cos(x)\n>>> integrate(sin(x), (x, 0, pi))\n2\n```", "```py\n>>> integral = Integral(sin(x), (x, 0, pi))\n>>> integral\nIntegral(sin(x), (x, 0, pi))\n>>> integral.doit()\n2\n```", "```py\n>>> series(cos(x), x)\n1 - x**2/2 + x**4/24 + O(x**6)\n>>> series(cos(x), x, n=10)\n1 - x**2/2 + x**4/24 - x**6/720 + x**8/40320 + O(x**10)\n```", "```py\n>>> O(x**2) + 2*x**3\nO(x**2)\n>>> O(x**2) * 2*x**3\nO(x**5)\n>>> expand(series(sin(x), x, n=6) * series(cos(x), x, n=4))\nx - 2*x**3/3 + O(x**5)\n>>> series(sin(x)*cos(x), x, n=5)\nx - 2*x**3/3 + O(x**5)\n```", "```py\n>>> series(cos(x), x).removeO()\nx**4/24 - x**2/2 + 1\n```", "```py\n>>> solve(x**2 - 1, x)\n[-1, 1]\n>>> solve(x*exp(x) - 1, x)\n[LambertW(1)]\n>>> solve(abs(x**2-4) - 3, x)\n[-1, 1, -sqrt(7), sqrt(7)]\n```", "```py\n>>> solve(0, x) # all x are solutions\n[]\n>>> solve(x - abs(x), x) # all positive x are solutions\n[]\n>>> solve(sin(x), x) # all k*pi with k integer are solutions\n[0]\n```", "```py\n>>> solve(x**2 + 1, x)\n[]\n>>> solve(z**2 + 1, z)\n[-I, I]\n```", "```py\n>>> solve(x**2 - exp(a), x)\n[-exp(a/2), exp(a/2)]\n>>> solve(x**2 - exp(a), a)\n[log(x**2)]\n>>> solve(x**2 - exp(a), x, a)\n[{x: -exp(a/2)}, {x: exp(a/2)}]\n>>> solve(x**2 - exp(a), x, b)\n[{x: -exp(a/2)}, {x: exp(a/2)}]\n```", "```py\n>>> solve([exp(x**2) - y, y - 3], x, y)\n[(-sqrt(log(3)), 3), (sqrt(log(3)), 3)]\n>>> solve([x**2 - y, y - 3], x, y)\n[(-sqrt(3), 3), (sqrt(3), 3)]\n>>> solve([x - y, y - 3], x, y)\n{y: 3, x: 3}\n```", "```py\n>>> solve([x**2 - y, y - 3], x, y, dict=True)\n[{y: 3, x: -sqrt(3)}, {y: 3, x: sqrt(3)}]\n>>> solve([x - y, y - 3], x, y, dict=True)\n[{y: 3, x: 3}]\n```"]