- en: Chapter 11. Namespaces, Scopes, and Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover Python modules. Modules are files containing
    functions and class definitions. The concept of a namespace and the scope of variables
    across functions and modules is also explained in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Names of Python objects, such as names of variables, classes, functions, and
    modules, are collected in namespaces. Modules and classes have their own named
    namespaces with the same name as these objects. These namespaces are created when
    a module is imported or a class is instantiated. The lifetime of a namespace of
    a module is as long as the current Python session. The lifetime of a namespace
    of a class instance is until the instance is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Functions create a local namespace when they are executed (invoked). It is deleted
    when the function stops the execution by a regular return or an exception. Local
    namespaces are unnamed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The concept of namespaces puts a variable name in its context. For example,
    there are several functions with the name `sin` and they are distinguished by
    the namespace they belong to, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'They are indeed different, as `scipy.sin` is a universal function accepting
    lists or arrays as input, where `math.sin` takes only floats. A list with all
    the names in a particular namespace can be obtained by the command `dir(<name
    of the namespace>)`. It contains two special names `__name__` and `__doc__`. The
    former refers to the name of the module and the latter to its docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a special namespace, `__builtin__`, which contains names that are
    available in Python without any `import`. It is a named namespace but its name
    need not be given when referring to a built-in object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Scope of a variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A variable defined in one part of a program needs not to be known in other
    parts. All program units to which it a certain variable is known are called the
    scope of that variable. We first give an example; let''s consider the two nested
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Execution of `my_function(3)` results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The variable `e`  is in the namespace of the program unit that encloses the function
    `my_function` . The variable `a`  is in the namespace of this function, which
    itself encloses the innermost function `other_function`. For the two functions,
    `e` is a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a good practice to pass information to a function only by its parameter
    list and not use the construction from the preceding example. An exception can
    be found in section *Anonymous functions*  in [Chapter 7](ch07.html "Chapter 7. Functions"),
    *Functions*, where global variables are used for closures. By assigning it a value,
    a variable automatically becomes a local variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Execution of
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Where `e` became a local variable. In fact, this piece of code now has two variables
    `e` belonging to different namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the `global` declaration statement, a variable defined in a function
    can be made global, that is, its value will be accessible even outside this function.
    The use of a `global` declaration is demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Avoid using global**'
  prefs: []
  type: TYPE_NORMAL
- en: It would be advisable to avoid using this construct and the use of `global`.
    These kinds of code are hard to debug and maintain. The use of classes (refer
    to [Chapter 8](ch08.html "Chapter 8. Classes"), *Classes*, for more information)
    makes `global` mainly obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, a module is simply a file containing classes and functions. By importing
    the file in your session or script, the functions and classes become usable.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python comes with many different libraries by default. You may also want to
    install more of those for specific purposes, such as optimization, plotting, reading/writing
    file formats, image handling, and so on. NumPy and SciPy are two important examples
    of such libraries, matplotlib for plotting is another one. At the end of this
    chapter, we will list some useful libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a library, you may either:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load only certain objects from a library, for example from NumPy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or load the entire library:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or give access to an entire library by creating a namespace with the library
    name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Prefixing a function from the library with the namespace gives access to this
    function and distinguishes this function from other objects with the same name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Furthermore, the name of a namespace can be specified together with the `import`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Which option you use affects the readability of your code as well as the possibilities
    for mistakes. A common mistake is shadowing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A way to avoid this unintended effect is to use `import`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Throughout this book, we have used many commands, objects, and functions. These
    were imported into the local namespace by statements such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Importing objects in this manner does not make the module from which they are
    imported evident. Some examples are given in the following table (*Table 11.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Libraries** | **Methods** |'
  prefs: []
  type: TYPE_TB
- en: '| `numpy` | `array`, `arange`, `linspace`, `vstack`, `hstack`, `dot`, `eye`,
    `identity`, and `zeros`. |'
  prefs: []
  type: TYPE_TB
- en: '| `numpy.linalg` | `solve`, `lstsq`, `eig`, and `det`. |'
  prefs: []
  type: TYPE_TB
- en: '| `matplotlib.pyplot` | `plot`, `legend`, and `cla`. |'
  prefs: []
  type: TYPE_TB
- en: '| `scipy.integrate` | `quad`. |'
  prefs: []
  type: TYPE_TB
- en: '| `copy` | `copy` and `deepcopy`. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: Examples of importing objects'
  prefs: []
  type: TYPE_NORMAL
- en: Modules in IPython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPython is used under code development. A typical scenario is that you work
    on a file with some function or class definitions which you change within a development
    cycle. For loading the contents of such a file into the shell, you may use `import`
    but the file is loaded only once. Changing the file has no effect on later imports.
    That's where IPyhthon's magic command `run` enters the stage.
  prefs: []
  type: TYPE_NORMAL
- en: The IPython magic command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IPython has a special magic command named `run` that executes a file as if
    you ran it directly in Python. This means that the file is executed independently
    of what is already defined in IPython. This is the recommended method to execute
    files from within IPython when you want to test a script intended as a standalone
    program. You must import all you need in the executed file in the same way as
    if you were executing it from the command line. A typical example of running code
    in `myfile.py` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This script file is executed in Python by `exec(open('myfile.py').read())`.
    Alternatively, in IPython the magic command `run myfile` can be used if you want
    to make sure that the script runs independent of the previous imports. Everything
    that is defined in the file is imported into the IPython workspace.
  prefs: []
  type: TYPE_NORMAL
- en: The variable __name__
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In any module, the special variable `__name__` is defined as the name of the
    current module. In the command line (in IPython), this variable is set to `__main__`,
    which allows the following trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The tests will be run only when the file is directly run, not when it is imported.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The list of useful Python modules is vast. In the following table, we have
    given a very short segment of such a list, focused on modules related to mathematical
    and engineering applications (*Table 11.2)*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `scipy` | Functions used in scientific computing |'
  prefs: []
  type: TYPE_TB
- en: '| `numpy` | Support arrays and related methods |'
  prefs: []
  type: TYPE_TB
- en: '| `matplotlib` | Plotting and visualization with the import submodule pyplot
    |'
  prefs: []
  type: TYPE_TB
- en: '| `functools` | Partial application  of functions |'
  prefs: []
  type: TYPE_TB
- en: '| `itertools` | Iterator tools to provide special capabilities, like slicing
    to generators |'
  prefs: []
  type: TYPE_TB
- en: '| `re` | Regular expressions for advanced string handling |'
  prefs: []
  type: TYPE_TB
- en: '| `sys` | System specific functions |'
  prefs: []
  type: TYPE_TB
- en: '| `os` | Operating system interfaces like directory listing and file handling
    |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` | Representing dates and date increments |'
  prefs: []
  type: TYPE_TB
- en: '| `time` | Returning wall clock time |'
  prefs: []
  type: TYPE_TB
- en: '| `timeit` | Measures execution time |'
  prefs: []
  type: TYPE_TB
- en: '| `sympy` | Computer arithmetic package (symbolic computations) |'
  prefs: []
  type: TYPE_TB
- en: '| `pickle` |  Pickling, special file in- and output format |'
  prefs: []
  type: TYPE_TB
- en: '| `shelves` |  Shelves, special file in- and output format |'
  prefs: []
  type: TYPE_TB
- en: '| `contextlib` | Tools for context managers |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.2: A non-exhaustive list of useful Python packages for engineering
    applications'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started the book by telling you that you had to import SciPy and other useful
    modules. Now you fully understand what importing means. We introduced namespaces
    and discussed the difference between `import` and `from ... import *`. The scope
    of a variable was already introduced in an earlier [Chapter 7](ch07.html "Chapter 7. Functions"),
    *Functions*, but now you have a more complete picture of the importance of that
    concept.
  prefs: []
  type: TYPE_NORMAL
