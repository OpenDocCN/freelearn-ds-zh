["```py\n    public void convertTargetToInteger() throws IOException{\n      //Read the data\n      BufferedReader br = new BufferedReader(new FileReader(\"wdbc.csv\"));\n      String line =null;\n      //Create the file to save the resulted data\n      File wdbcData = new File(\"<Your Destination location for file.>\");\n      FileWriter fw = new FileWriter(wdbcData);\n      //We are adding header to the new file\n      fw.write(\"ID_Number\"+\",\"+\"Diagnosis\"+\",\"+\"Radius\"+\",\"+\"Texture\"+\",\"+\"Perimeter\"+\",\"+\"Area\"+\",\"+\"Smoothness\"+\",\"+\"Compactness\"+\",\"+\"Concavity\"+\",\"+\"ConcavePoints\"+\",\"+\"Symmetry\"+\",\"+\"Fractal_Dimension\"+\",\"+\"RadiusStdError\"+\",\"+\"TextureStdError\"+\",\"+\"PerimeterStdError\"+\",\"+\"AreaStdError\"+\",\"+\"SmoothnessStdError\"+\",\"+\"CompactnessStdError\"+\",\"+\"ConcavityStdError\"+\",\"+\"ConcavePointStdError\"+\",\"+\"Symmetrystderror\"+\",\"+\"FractalDimensionStderror\"+\",\"+\"WorstRadius\"+\",\"+\"worsttexture\"+\",\"+\"worstperimeter\"+\",\"+\"worstarea\"+\",\"+\"worstsmoothness\"+\",\"+\"worstcompactness\"+\",\"+\"worstconcavity\"+\",\"+\"worstconcavepoints\"+\",\"+\"worstsymmentry\"+\",\"+\"worstfractaldimensions\"+\"\\n\");\n\n      /*In the while loop we are reading line by line and checking the last field- parts[1] and changing it to numeric value accordingly*/\n      while((line=br.readLine())!=null){\n        String []parts = line.split(\",\");\n        if(parts[1].equals(\"M\")){\n        fw.write(parts[0]+\",\"+\"0\"+\",\"+parts[2]+\",\"+parts[3]+\",\"+parts[4]+\",\"+parts[5]+\",\"+parts[6]+\",\"+parts[7]+\",\"+parts[8]+\",\"+parts[9]+\",\"+parts[10]+\",\"+parts[11]+\",\"+parts[12]+\",\"+parts[13]+\",\"+parts[14]+\",\"+parts[15]+\",\"+parts[16]+\",\"+parts[17]+\",\"+parts[18]+\",\"+parts[19]+\",\"+parts[20]+\",\"+parts[21]+\",\"+parts[22]+\",\"+parts[23]+\",\"+parts[24]+\",\"+parts[25]+\",\"+parts[26]+\",\"+parts[27]+\",\"+parts[28]+\",\"+parts[29]+\",\"+parts[30]+\",\"+parts[31]+\"\\n\");\n        }\n\n        if(parts[1].equals(\"B\")){\n          fw.write(parts[0]+\",\"+\"1\"+\",\"+parts[2]+\",\"+parts[3]+\",\"+parts[4]+\",\"+parts[5]+\",\"+parts[6]+\",\"+parts[7]+\",\"+parts[8]+\",\"+parts[9]+\",\"+parts[10]+\",\"+parts[11]+\",\"+parts[12]+\",\"+parts[13]+\",\"+parts[14]+\",\"+parts[15]+\",\"+parts[16]+\",\"+parts[17]+\",\"+parts[18]+\",\"+parts[19]+\",\"+parts[20]+\",\"+parts[21]+\",\"+parts[22]+\",\"+parts[23]+\",\"+parts[24]+\",\"+parts[25]+\",\"+parts[26]+\",\"+parts[27]+\",\"+parts[28]+\",\"+parts[29]+\",\"+parts[30]+\",\"+parts[31]+\"\\n\");\n        }\n      }\n      fw.close();\n      br.close();\n    }\n    ```", "```py\n    public void dataPrepration() throws Exception {\n      // Reading the dataset created by earlier method convertTargetToInteger and here we are using google guava api's.\n      List<String> result = Resources.readLines(Resources.getResource(\"wdbc.csv\"), Charsets.UTF_8);\n      //This is to remove header before the randomization process. Otherwise it can appear in the middle of dataset.\n      List<String> raw = result.subList(1, 570);\n      Random random = new Random();\n      //Shuffling the dataset.\n      Collections.shuffle(raw, random);\n      //Splitting dataset into training and test examples.\n      List<String> train = raw.subList(0, 470);\n      List<String> test = raw.subList(470, 569);\n      File trainingData = new File(\"<your Location>/ wdbcTrain.csv\");\n      File testData = new File(\"<your Location>/ wdbcTest.csv\");\n      writeCSV(train, trainingData);\n      writeCSV(test, testData);\n    }\n    //This method is writing the list to desired file location.\n    public void writeCSV(List<String> list, File file) throws IOException{\n      FileWriter fw = new FileWriter(file);\n      fw.write(\"ID_Number\"+\",\"+\"Diagnosis\"+\",\"+\"Radius\"+\",\"+\"Texture\"+\",\"+\"Perimeter\"+\",\"+\"Area\"+\",\"+\"Smoothness\"+\",\"+\"Compactness\"+\",\"+\"Concavity\"+\",\"+\"ConcavePoints\"+\",\"+\"Symmetry\"+\",\"+\"Fractal_Dimension\"+\",\"+\"RadiusStdError\"+\",\"+\"TextureStdError\"+\",\"+\"PerimeterStdError\"+\",\"+\"AreaStdError\"+\",\"+\"SmoothnessStdError\"+\",\"+\"CompactnessStdError\"+\",\"+\"ConcavityStdError\"+\",\"+\"ConcavePointStdError\"+\",\"+\"Symmetrystderror\"+\",\"+\"FractalDimensionStderror\"+\",\"+\"WorstRadius\"+\",\"+\"worsttexture\"+\",\"+\"worstperimeter\"+\",\"+\"worstarea\"+\",\"+\"worstsmoothness\"+\",\"+\"worstcompactness\"+\",\"+\"worstconcavity\"+\",\"+\"worstconcavepoints\"+\",\"+\"worstsymmentry\"+\",\"+\"worstfractaldimensions\"+\"\\n\");\n      for(int i=0;i< list.size();i++){\n        fw.write(list.get(i)+\"\\n\");\n      }\n      fw.close();\n    }\n    ```", "```py\nmahout trainlogistic --input /tmp/wdbcTrain.csv --output /tmp//model --target Diagnosis --categories 2 --predictors Radius Texture Perimeter Area Smoothness Compactness Concavity ConcavePoints Symmetry Fractal_Dimension RadiusStdError TextureStdError PerimeterStdError AreaStdError SmoothnessStdError CompactnessStdError ConcavityStdError ConcavePointStdError Symmetrystderror FractalDimensionStderror WorstRadius worsttexture worstperimeter worstarea worstsmoothness worstcompactness worstconcavity worstconcavepoints worstsymmentry worstfractaldimensions  --types numeric --features 30 --passes 90 --rate 300\n\n```", "```py\nmahout runlogistic --input /tmp/wdbcTrain.csv --model /tmp//model  --auc --confusion\n\n```", "```py\nmahout runlogistic --input /tmp/wdbcTest.csv --model /tmp//model  --auc â€“confusion\n\n```"]