["```py\nimport os, os.path, sys\n\nfrom qgis.core import *\nfrom qgis.gui import *\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\n\nclass MapExplorer(QMainWindow):\n    def __init__(self):\n        QMainWindow.__init__(self)\n        self.setWindowTitle(\"Landmark Explorer\")\n        self.resize(800, 400)\n\ndef main():\n    QgsApplication.setPrefixPath(os.environ['QGIS_PREFIX'], True)\n    QgsApplication.initQgis()\n\n    app = QApplication(sys.argv)\n\n    window = MapExplorer()\n    window.show()\n    window.raise_()\n\n    app.exec_()\n    app.deleteLater()\n    QgsApplication.exitQgis()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nSET OSGEO4W_ROOT=C:\\OSGeo4W\nSET QGIS_PREFIX=%OSGEO4W_ROOT%\\apps\\qgis\nSET PATH=%QGIS_PREFIX%\\bin;%OSGWO4W_ROOT\\bin;%PATH%\nSET PYTHONPATH=%QGIS_PREFIX%\\python;%OSEO4W_ROOT%\\apps\\Python27;%PYTHONPATH%\nSET PYTHONHOME=%OSGEO4W_ROOT%\\apps\\Python27\npython lex.py\n```", "```py\nexport PYTHONPATH=\"/path/to/qgis/build/output/python/\"\nexport LD_LIBRARY_PATH=\"/path/to/qgis/build/output/lib/\"\nexport QGIS_PREFIX=\"/path/to/qgis/build/output/\"\npython lex.py\n```", "```py\nexport PYTHONPATH=\"$PYTHONPATH:/Applications/QGIS.app/Contents/Resources/python\"\nexport DYLD_FRAMEWORK_PATH=\"/Applications/QGIS.app/Contents/Frameworks\"\nexport QGIS_PREFIX=\"/Applications/QGIS.app/Contents/Resources\"\npython lex.py\n```", "```py\nfrom PyQt4 import QtGui, QtCore\n\nimport resources\n\nclass Ui_ExplorerWindow(object):\n    def setupUi(self, window):\n        window.setWindowTitle(\"Landmark Explorer\")\n\n        self.centralWidget = QtGui.QWidget(window)\n        self.centralWidget.setMinimumSize(800, 400)\n        window.setCentralWidget(self.centralWidget)\n\n        self.menubar = window.menuBar()\n        self.fileMenu = self.menubar.addMenu(\"File\")\n        self.viewMenu = self.menubar.addMenu(\"View\")\n        self.modeMenu = self.menubar.addMenu(\"Mode\")\n\n        self.toolBar = QtGui.QToolBar(window)\n        window.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)\n\n        self.actionQuit = QtGui.QAction(\"Quit\", window)\n        self.actionQuit.setShortcut(QtGui.QKeySequence.Quit)\n\n        self.actionShowBasemapLayer = QtGui.QAction(\"Basemap\", window)\n        self.actionShowBasemapLayer.setShortcut(\"Ctrl+B\")\n        self.actionShowBasemapLayer.setCheckable(True)\n\n        self.actionShowLandmarkLayer = QtGui.QAction(\"Landmarks\", window)\n        self.actionShowLandmarkLayer.setShortcut(\"Ctrl+L\")\n        self.actionShowLandmarkLayer.setCheckable(True)\n\n        icon = QtGui.QIcon(\":/icons/mActionZoomIn.png\")\n        self.actionZoomIn = QtGui.QAction(icon, \"Zoom In\", window)\n        self.actionZoomIn.setShortcut(QtGui.QKeySequence.ZoomIn)\n\n        icon = QtGui.QIcon(\":/icons/mActionZoomOut.png\")\n        self.actionZoomOut = QtGui.QAction(icon, \"Zoom Out\", window)\n        self.actionZoomOut.setShortcut(QtGui.QKeySequence.ZoomOut)\n\n        icon = QtGui.QIcon(\":/icons/mActionPan.png\")\n        self.actionPan = QtGui.QAction(icon, \"Pan\", window)\n        self.actionPan.setShortcut(\"Ctrl+1\")\n        self.actionPan.setCheckable(True)\n\n        icon = QtGui.QIcon(\":/icons/mActionExplore.png\")\n        self.actionExplore = QtGui.QAction(icon, \"Explore\", window)\n        self.actionExplore.setShortcut(\"Ctrl+2\")\n        self.actionExplore.setCheckable(True)\n\n        self.fileMenu.addAction(self.actionQuit)\n\n        self.viewMenu.addAction(self.actionShowBasemapLayer)\n        self.viewMenu.addAction(self.actionShowLandmarkLayer)\n        self.viewMenu.addSeparator()\n        self.viewMenu.addAction(self.actionZoomIn)\n        self.viewMenu.addAction(self.actionZoomOut)\n\n        self.modeMenu.addAction(self.actionPan)\n        self.modeMenu.addAction(self.actionExplore)\n\n        self.toolBar.addAction(self.actionZoomIn)\n        self.toolBar.addAction(self.actionZoomOut)\n        self.toolBar.addAction(self.actionPan)\n        self.toolBar.addAction(self.actionExplore)\n\n        window.resize(window.sizeHint())\n```", "```py\n<RCC>\n    <qresource prefix=\"/icons\">\n        <file>mActionZoomIn.png</file>\n        <file>mActionZoomOut.png</file>\n        <file>mActionPan.png</file>\n        <file>mActionExplore.png</file>\n    </qresource>\n</RCC>\n```", "```py\nfrom ui_explorerWindow import Ui_ExplorerWindow\nimport resources\n```", "```py\nclass MapExplorer(QMainWindow, Ui_ExplorerWindow):\n    def __init__(self):\n        QMainWindow.__init__(self)\n\n        self.setupUi(self)\n```", "```py\n        self.connect(self.actionQuit,\n                     SIGNAL(\"triggered()\"), qApp.quit)\n        self.connect(self.actionShowBasemapLayer,\n                     SIGNAL(\"triggered()\"), self.showBasemapLayer)\n        self.connect(self.actionShowLandmarkLayer,\n                     SIGNAL(\"triggered()\"),\n                     self.showLandmarkLayer)\n        self.connect(self.actionZoomIn,\n                     SIGNAL(\"triggered()\"), self.zoomIn)\n        self.connect(self.actionZoomOut,\n                     SIGNAL(\"triggered()\"), self.zoomOut)\n        self.connect(self.actionPan,\n                     SIGNAL(\"triggered()\"), self.setPanMode)\n        self.connect(self.actionExplore,\n                     SIGNAL(\"triggered()\"), self.setExploreMode)\n```", "```py\n    def showBasemapLayer(self):\n        pass\n\n    def showLandmarkLayer(self):\n        pass\n\n    def zoomIn(self):\n        pass\n\n    def zoomOut(self):\n        pass\n\n    def setPanMode(self):\n        pass\n\n    def setExploreMode(self):\n        pass\n```", "```py\n        self.mapCanvas = QgsMapCanvas()\n        self.mapCanvas.useImageToRender(False)\n        self.mapCanvas.setCanvasColor(Qt.white)\n        self.mapCanvas.show()\n\n        layout = QVBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.addWidget(self.mapCanvas)\n        self.centralWidget.setLayout(layout)\n```", "```py\n    def loadMap(self):\n        cur_dir = os.path.dirname(os.path.realpath(__file__))\n        filename = os.path.join(cur_dir, \"data\",\n                                \"NE1_HR_LC_SR_W_DR\",\n                                \"NE1_HR_LC_SR_W_DR.tif\")\n        self.basemap_layer = QgsRasterLayer(filename, \"basemap\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n                self.basemap_layer)\n\n        filename = os.path.join(cur_dir, \"data\",\n                                \"ne_10m_populated_places\",\n                                \"ne_10m_populated_places.shp\")\n        self.landmark_layer = QgsVectorLayer(filename,\n                                             \"landmarks\", \"ogr\")\n        QgsMapLayerRegistry.instance().addMapLayer(\n               self.landmark_layer)\n\n        self.showVisibleMapLayers()\n        self.mapCanvas.setExtent(QgsRectangle(-127.7, 24.4, -79.3, 49.1))\n```", "```py\n    def showVisibleMapLayers(self):\n        layers = []\n        if self.actionShowLandmarkLayer.isChecked():\n            layers.append(QgsMapCanvasLayer(self.landmark_layer))\n        if self.actionShowBasemapLayer.isChecked():\n            layers.append(QgsMapCanvasLayer(self.basemap_layer))\n        self.mapCanvas.setLayerSet(layers)\n```", "```py\n    window.loadMap()\n```", "```py\n        self.actionShowBasemapLayer.setChecked(True)\n        self.actionShowLandmarkLayer.setChecked(True)\n```", "```py\n    def showBasemapLayer(self):\n        self.showVisibleMapLayers()\n\n    def showLandmarkLayer(self):\n        self.showVisibleMapLayers()\n```", "```py\n        p = QgsPalLayerSettings()\n        p.readFromLayer(self.landmark_layer)\n        p.enabled = True\n        p.fieldName = \"NAME\"\n        p.placement = QgsPalLayerSettings.OverPoint\n        p.displayAll = True\n        p.setDataDefinedProperty(QgsPalLayerSettings.Size,\n                                 True, True, \"12\", \"\")\n        p.quadOffset = QgsPalLayerSettings.QuadrantBelow\n        p.yOffset = 1\n        p.labelOffsetInMapUnits = False\n        p.writeToLayer(self.landmark_layer)\n\n        labelingEngine = QgsPalLabeling()\n        self.mapCanvas.mapRenderer().setLabelingEngine(labelingEngine)\n```", "```py\n        symbol = QgsSymbolV2.defaultSymbol(self.landmark_layer.geometryType())\n        renderer = QgsRuleBasedRendererV2(symbol)\n        root_rule = renderer.rootRule()\n        default_rule = root_rule.children()[0]\n\n        rule = default_rule.clone()\n        rule.setFilterExpression(\"(SCALERANK >= 0) and (SCALERANK <= 1)\")\n        rule.setScaleMinDenom(0)\n        rule.setScaleMaxDenom(99999999)\n        root_rule.appendChild(rule)\n\n        rule = default_rule.clone()\n        rule.setFilterExpression(\"(SCALERANK >= 2) and (SCALERANK <= 4)\")\n        rule.setScaleMinDenom(0)\n        rule.setScaleMaxDenom(10000000)\n        root_rule.appendChild(rule)\n\n        rule = default_rule.clone()\n        rule.setFilterExpression(\"(SCALERANK >= 5) and (SCALERANK <= 7)\")\n        rule.setScaleMinDenom(0)\n        rule.setScaleMaxDenom(5000000)\n        root_rule.appendChild(rule)\n\n        rule = default_rule.clone()\n        rule.setFilterExpression(\"(SCALERANK >= 7) and (SCALERANK <= 10)\")\n        rule.setScaleMinDenom(0)\n        rule.setScaleMaxDenom(2000000)\n        root_rule.appendChild(rule)\n\n        root_rule.removeChildAt(0)\n        self.landmark_layer.setRendererV2(renderer)\n```", "```py\n        expr = (\"CASE WHEN SCALERANK IN (0,1) THEN 18\" +\n                \"WHEN SCALERANK IN (2,3,4) THEN 14 \" +\n                \"WHEN SCALERANK IN (5,6,7) THEN 12 \" +\n                \"WHEN SCALERANK IN (8,9,10) THEN 10 \" +\n                \"ELSE 9 END\")\n        p.setDataDefinedProperty(QgsPalLayerSettings.Size, True,\n                                 True, expr, \"\")\n```", "```py\n    def zoomIn(self):\n        self.mapCanvas.zoomIn()\n\n    def zoomOut(self):\n        self.mapCanvas.zoomOut()\n```", "```py\nclass PanTool(QgsMapTool):\n    def __init__(self, mapCanvas):\n        QgsMapTool.__init__(self, mapCanvas)\n        self.setCursor(Qt.OpenHandCursor)\n        self.dragging = False\n\n    def canvasMoveEvent(self, event):\n        if event.buttons() == Qt.LeftButton:\n            self.dragging = True\n            self.canvas().panAction(event)\n\n    def canvasReleaseEvent(self, event):\n        if event.button() == Qt.LeftButton and self.dragging:\n            self.canvas().panActionEnd(event.pos())\n            self.dragging = False\n```", "```py\n        self.panTool = PanTool(self.mapCanvas)\n        self.panTool.setAction(self.actionPan)\n```", "```py\n    def setPanMode(self):\n        self.actionPan.setChecked(True)\n        self.mapCanvas.setMapTool(self.panTool)\n```", "```py\n    window.setPanMode()\n```", "```py\nclass ExploreTool(QgsMapToolIdentify):\n    def __init__(self, window):\n        QgsMapToolIdentify.__init__(self, window.mapCanvas)\n        self.window = window\n\n    def canvasReleaseEvent(self, event):\n        found_features = self.identify(event.x(), event.y(),\n                                       self.TopDownStopAtFirst,\n                                       self.VectorLayer)\n        if len(found_features) > 0:\n            layer = found_features[0].mLayer\n            feature = found_features[0].mFeature\n            geometry = feature.geometry()\n\n            info = []\n\n            name = feature.attribute(\"NAME\")\n            if name != None: info.append(name)\n\n            admin_0 = feature.attribute(\"ADM0NAME\")\n            admin_1 = feature.attribute(\"ADM1NAME\")\n            if admin_0 and admin_1:\n                info.append(admin_1 + \", \" + admin_0)\n\n            timezone = feature.attribute(\"TIMEZONE\")\n            if timezone != None:\n                info.append(\"Timezone: \" + timezone)\n\n            longitude = geometry.asPoint().x()\n            latitude  = geometry.asPoint().y()\n            info.append(\"Lat/Long: %0.4f, %0.4f\" % (latitude,\n                                                    longitude))\n\n            QMessageBox.information(self.window,\n                                    \"Feature Info\",\n                                    \"\\n\".join(info))\n```", "```py\n        self.exploreTool = ExploreTool(self)\n        self.exploreTool.setAction(self.actionExplore)\n```", "```py\n        def setExploreMode(self):\n        self.actionPan.setChecked(False)\n        self.actionExplore.setChecked(True)\n        self.mapCanvas.setMapTool(self.exploreTool)\n```", "```py\n    def setPanMode(self):\n        self.actionPan.setChecked(True)\n self.actionExplore.setChecked(False)\n        self.mapCanvas.setMapTool(self.panTool)\n```"]