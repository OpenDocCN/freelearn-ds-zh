["```py\n    import requests\n    ```", "```py\n    # First assign the URL of Wikipedia home page to a strings\n    wiki_home = \"https://en.wikipedia.org/wiki/Main_Page\"\n    ```", "```py\n    response = requests.get(wiki_home)\n    ```", "```py\n    type(response)\n    ```", "```py\n    requests.models.Response\n    ```", "```py\n    def status_check(r):\n        if r.status_code==200:\n            print(\"Success!\")\n            return 1\n        else:\n            print(\"Failed!\")\n            return -1\n    ```", "```py\n    status_check(response)\n    ```", "```py\ndef encoding_check(r):\n    return (r.encoding)\n```", "```py\nencoding_check(response)\n```", "```py\n'UTF-8'\n```", "```py\n    def decode_content(r,encoding):\n        return (r.content.decode(encoding))\n    contents = decode_content(response,encoding_check(response))\n    ```", "```py\n    type(contents)\n    ```", "```py\n    str\n    ```", "```py\n    len(contents)\n    ```", "```py\n    74182\n    ```", "```py\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(contents, 'html.parser')\n    ```", "```py\n    txt_dump=soup.text\n    ```", "```py\n    type(txt_dump)\n    ```", "```py\n    str\n    ```", "```py\n    len(txt_dump)\n    ```", "```py\n    15326\n    ```", "```py\n    print(txt_dump[10000:11000])\n    ```", "```py\nidx1=txt_dump.find(\"From today's featured article\")\nidx2=txt_dump.find(\"Recently featured\")\nprint(txt_dump[idx1+len(\"From today's featured article\"):idx2])\n```", "```py\nidx3=txt_dump.find(\"On this day\")\nprint(txt_dump[idx3+len(\"On this day\"):idx3+len(\"On this day\")+1000])\n```", "```py\n    text_list=[] #Empty list\n    for d in soup.find_all('div'):\n            if (d.get('id')=='mp-otd'):\n                for i in d.find_all('ul'):\n                    text_list.append(i.text)\n    ```", "```py\n    for i in text_list:\n        print(i)\n        print('-'*100)\n    ```", "```py\n    def wiki_on_this_day(url=\"https://en.wikipedia.org/wiki/Main_Page\"):\n        \"\"\"\n    ```", "```py\n        \"\"\"\n        import requests\n        from bs4 import BeautifulSoup\n\n        wiki_home = str(url)\n        response = requests.get(wiki_home)\n\n        def status_check(r):\n            if r.status_code==200:\n                return 1\n            else:\n                return -1\n\n        status = status_check(response)\n        if status==1:\n            contents = decode_content(response,encoding_check(response))\n        else:\n            print(\"Sorry could not reach the web page!\")\n            return -1\n\n        soup = BeautifulSoup(contents, 'html.parser')\n        text_list=[]\n\n        for d in soup.find_all('div'):\n                if (d.get('id')=='mp-otd'):\n                    for i in d.find_all('ul'):\n                        text_list.append(i.text)\n\n        return (text_list[0])\n    ```", "```py\n    print(wiki_on_this_day(\"https://en.wikipedia.org/wiki/Main_Page1\"))\n     Sorry could not reach the web page!\n    ```", "```py\n    data = '''\n    <person>\n      <name>Dave</name>\n      <surname>Piccardo</surname>\n      <phone type=\"intl\">\n         +1 742 101 4456\n       </phone>\n       <email hide=\"yes\">\n       dave.p@gmail.com</email>\n    </person>'''\n    ```", "```py\n    import xml.etree.ElementTree as ET\n    tree = ET.fromstring(data)\n    type (tree)\n    ```", "```py\n     xml.etree.ElementTree.Element\n    ```", "```py\n    # Print the name of the person\n    print('Name:', tree.find('name').text)\n     Dave\n    ```", "```py\n    # Print the surname\n    print('Surname:', tree.find('surname').text)\n     Piccardo\n    ```", "```py\n    # Print the phone number\n    print('Phone:', tree.find('phone').text.strip())\n    ```", "```py\n    +1 742 101 4456\n    ```", "```py\n    # Print email status and the actual email\n    print('Email hidden:', tree.find('email').get('hide'))\n    print('Email:', tree.find('email').text.strip())\n    ```", "```py\n     Email hidden: yes\n     Email: dave.p@gmail.com\n    ```", "```py\ntree2=ET.parse('xml1.xml')\ntype(tree2)\nThe output will be as follows: xml.etree.ElementTree.ElementTree\n```", "```py\n    root=tree2.getroot()\n    for child in root:\n        print (\"Child:\",child.tag, \"| Child attribute:\",child.attrib)\n    ```", "```py\n    root[0][2]\n    ```", "```py\n    <Element 'gdppc' at 0x00000000051FF278>\n    ```", "```py\n    root[0][2].text\n    ```", "```py\n     '70617'\n    ```", "```py\n    root[0][2].tag\n    ```", "```py\n     'gdppc'\n    ```", "```py\n    root[0]\n    ```", "```py\n     <Element 'country1' at 0x00000000050298B8>\n    ```", "```py\n    root[0].tag\n    ```", "```py\n      'country1'\n    ```", "```py\n    root[0].attrib\n    ```", "```py\n     {'name': 'Norway'}\n    ```", "```py\nfor c in root:\n    country_name=c.attrib['name']\n    gdppc = int(c[2].text)\n    print(\"{}: {}\".format(country_name,gdppc))\n```", "```py\n Norway: 70617\n Austria: 44857\n Israel: 38788\n```", "```py\nfor c in root:\n    ne=c.findall('neighbor') # Find all the neighbors\n    print(\"Neighbors\\n\"+\"-\"*25)\n    for i in ne: # Iterate over the neighbors and print their 'name' attribute\n        print(i.attrib['name'])\n    print('\\n')\n```", "```py\n    import urllib.request, urllib.parse, urllib.error\n    serviceurl = 'http://www.recipepuppy.com/api/?'\n    item = str(input('Enter the name of a food item (enter \\'quit\\' to quit): '))\n    url = serviceurl + urllib.parse.urlencode({'q':item})+'&p=1&format=xml'\n    uh = urllib.request.urlopen(url)\n    data = uh.read().decode()\n    print('Retrieved', len(data), 'characters')\n    tree3 = ET.fromstring(data)\n    ```", "```py\n    data = uh.read().decode()\n    print('Retrieved', len(data), 'characters')\n    tree3 = ET.fromstring(data)\n    ```", "```py\n    for elem in tree3.iter():\n        print(elem.text)\n    ```", "```py\n    for e in tree3.iter():\n        h=e.find('href')\n        t=e.find('title')\n        if h!=None and t!=None:\n            print(\"Receipe Link for:\",t.text)\n            print(h.text)\n            print(\"-\"*100)\n    ```", "```py\nimport urllib.request, urllib.parse\nfrom urllib.error import HTTPError,URLError\nimport json\nimport pandas as pd\n```", "```py\nserviceurl = 'https://restcountries.eu/rest/v2/name/'\n```", "```py\n    url = serviceurl + country_name\n    uh = urllib.request.urlopen(url)\n    ```", "```py\n    def get_country_data(country):\n        \"\"\"\n        Function to get data about country from \"https://restcountries.eu\" API\n        \"\"\"\n        country_name=str(country)\n        url = serviceurl + country_name\n\n        try: \n            uh = urllib.request.urlopen(url)\n        except HTTPError as e:\n            print(\"Sorry! Could not retrieve anything on {}\".format(country_name))\n            return None\n        except URLError as e:\n            print('Failed to reach a server.')\n            print('Reason: ', e.reason)\n            return None\n        else:\n            data = uh.read().decode()\n            print(\"Retrieved data on {}. Total {} characters read.\".format(country_name,len(data)))\n            return data\n    ```", "```py\nx=json.loads(data)\ny=x[0]\ntype(y)\n```", "```py\n dict\n```", "```py\nfor k,v in y.items():\n    print(\"{}: {}\".format(k,v))\n```", "```py\nfor lang in y['languages']:\n    print(lang['name'])\n```", "```py\nimport pandas as pd\nimport json\ndef build_country_database(list_country):\n    \"\"\"\n    Takes a list of country names.\n    Output a DataFrame with key information about those countries.\n    \"\"\"\n    # Define an empty dictionary with keys\n    country_dict={'Country':[],'Capital':[],'Region':[],'Sub-region':[],'Population':[],\n                  'Lattitude':[],'Longitude':[],'Area':[],'Gini':[],'Timezones':[],\n                  'Currencies':[],'Languages':[]}\n```", "```py\nimport re\n```", "```py\n    import re\n    ```", "```py\n    string1 = 'Python'\n    pattern = r\"Python\"\n    ```", "```py\n    if re.match(pattern,string1):\n        print(\"Matches!\")\n    else:\n        print(\"Doesn't match.\")\n    ```", "```py\n    string2 = 'python'\n    if re.match(pattern,string2):\n        print(\"Matches!\")\n    else:\n        print(\"Doesn't match.\")\n    ```", "```py\n     Doesn't match.\n    ```", "```py\nprog = re.compile(pattern)\nprog.match(string1)\n```", "```py\n <_sre.SRE_Match object; span=(0, 6), match='Python'>\n```", "```py\n#string1 = 'Python'\n#string2 = 'python'\n#pattern = r\"Python\"\n```", "```py\n    prog = re.compile(pattern)\n    ```", "```py\n    if prog.match(string1)!=None:\n        print(\"Matches!\")\n    else:\n        print(\"Doesn't match.\")\n    ```", "```py\n     Matches!\n    ```", "```py\n    if prog.match(string2)!=None:\n        print(\"Matches!\")\n    else:\n        print(\"Doesn't match.\")\n    ```", "```py\n     Doesn't match.\n    ```", "```py\n    prog = re.compile(r'y')\n    prog.match('Python',pos=1)\n    ```", "```py\n     <_sre.SRE_Match object; span=(1, 2), match='y'>\n    ```", "```py\n    prog = re.compile(r'thon')\n    prog.match('Python',pos=2)\n    ```", "```py\n     <_sre.SRE_Match object; span=(2, 6), match='thon'>\n    ```", "```py\n    prog.match('Marathon',pos=4)\n    ```", "```py\n    <_sre.SRE_Match object; span=(4, 8), match='thon'>\n    ```", "```py\nprog = re.compile(r'ing')\nwords = ['Spring','Cycling','Ringtone']\n```", "```py\nfor w in words:\n    if prog.match(w,pos=len(w)-3)!=None:\n        print(\"{} has last three letters 'ing'\".format(w))\n    else:\n        print(\"{} does not have last three letter as 'ing'\".format(w))\n```", "```py\n Spring has last three letters 'ing'\n Cycling has last three letters 'ing'\n Ringtone does not have last three letter as 'ing'\n```", "```py\n    prog = re.compile('ing')\n    if prog.match('Spring')==None:\n        print(\"None\")\n    ```", "```py\n     None\n    ```", "```py\n    prog.search('Spring')\n    <_sre.SRE_Match object; span=(3, 6), match='ing'>\n    prog.search('Ringtone')\n    <_sre.SRE_Match object; span=(1, 4), match='ing'>\n    ```", "```py\n    prog = re.compile(r'ing')\n    words = ['Spring','Cycling','Ringtone']\n    ```", "```py\n    for w in words:\n        mt = prog.search(w)\n        # Span returns a tuple of start and end positions of the match\n        start_pos = mt.span()[0] # Starting position of the match\n        end_pos = mt.span()[1] # Ending position of the match\n    ```", "```py\n        print(\"The word '{}' contains 'ing' in the position {}-{}\".format(w,start_pos,end_pos))\n    ```", "```py\n The word 'Spring' contains 'ing' in the position 3-6\n The word 'Cycling' contains 'ing' in the position 4-7\n The word 'Ringtone' contains 'ing' in the position 1-4\n```", "```py\n    prog = re.compile(r'py.')\n    print(prog.search('pygmy').group())\n    print(prog.search('Jupyter').group())\n    ```", "```py\n     pyg\n     pyt\n    ```", "```py\n    prog = re.compile(r'c\\wm')\n    print(prog.search('comedy').group())\n    print(prog.search('camera').group())\n    print(prog.search('pac_man').group())\n    print(prog.search('pac2man').group())\n    ```", "```py\n     com\n     cam\n     c_m\n     c2m\n    ```", "```py\n    prog = re.compile(r'4\\W1')\n    print(prog.search('4/1 was a wonderful day!').group())\n    print(prog.search('4-1 was a wonderful day!').group())\n    print(prog.search('4.1 was a wonderful day!').group())\n    print(prog.search('Remember the wonderful day 04/1?').group())\n    ```", "```py\n     4/1\n     4-1\n     4.1\n     4/1\n    ```", "```py\n    prog = re.compile(r'Data\\swrangling')\n    print(prog.search(\"Data wrangling is cool\").group())\n    print(\"-\"*80)\n    print(\"Data\\twrangling is the full string\")\n    print(prog.search(\"Data\\twrangling is the full string\").group())\n    print(\"-\"*80)\n    print(\"Data\\nwrangling is the full string\")\n    print(prog.search(\"Data\\nwrangling\").group())\n    ```", "```py\n    Data wrangling\n    ----------------------------------------------------------------------\n    Data\twrangling is the full string\n    Data\twrangling\n    ----------------------------------------------------------------------\n    Data\n    wrangling is the full string\n    Data\n    wrangling\n    ```", "```py\n    prog = re.compile(r\"score was \\d\\d\")\n    print(prog.search(\"My score was 67\").group())\n    print(prog.search(\"Your score was 73\").group())\n    ```", "```py\n     score was 67\n     score was 73\n    ```", "```py\n    def print_match(s):\n        if prog.search(s)==None:\n            print(\"No match\")\n        else:\n            print(prog.search(s).group())\n    ```", "```py\n    prog = re.compile(r'^India')\n    print_match(\"Russia implemented this law\")\n    print_match(\"India implemented that law\")\n    print_match(\"This law was implemented by India\")\n    The output is as follows: No match\n     India\n     No match\n    ```", "```py\n    prog = re.compile(r'Apple$')\n    print_match(\"Patent no 123456 belongs to Apple\")\n    print_match(\"Patent no 345672 belongs to Samsung\")\n    print_match(\"Patent no 987654 belongs to Apple\")\n    ```", "```py\n     Apple\n     No match\n     Apple\n    ```", "```py\n    prog = re.compile(r'ab*')\n    print_match(\"a\")\n    print_match(\"ab\")\n    print_match(\"abbb\")\n    print_match(\"b\")\n    print_match(\"bbab\")\n    print_match(\"something_abb_something\")\n    ```", "```py\n     a\n     ab\n     abbb\n     No match\n     ab\n     abb\n    ```", "```py\n    prog = re.compile(r'ab+')\n    print_match(\"a\")\n    print_match(\"ab\")\n    print_match(\"abbb\")\n    print_match(\"b\")\n    print_match(\"bbab\")\n    print_match(\"something_abb_something\")\n    ```", "```py\n     No match\n     ab\n     abbb\n     No match\n     ab\n     abb\n    ```", "```py\n    prog = re.compile(r'ab?')\n    print_match(\"a\")\n    print_match(\"ab\")\n    print_match(\"abbb\")\n    print_match(\"b\")\n    print_match(\"bbab\")\n    print_match(\"something_abb_something\")\n    ```", "```py\n     a\n     ab\n     ab\n     No match\n     ab\n     ab\n    ```", "```py\n    prog = re.compile(r'<.*>')\n    print_match('<a> b <c>')\n    ```", "```py\n     <a> b <c>\n    ```", "```py\n    prog = re.compile(r'<.*?>')\n    print_match('<a> b <c>')\n    ```", "```py\n     <a>\n    ```", "```py\n    prog = re.compile(r'A{3}')\n    print_match(\"ccAAAdd\")\n    print_match(\"ccAAAAdd\")\n    print_match(\"ccAAdd\")\n    ```", "```py\n     AAA\n     AAA\n     No match\n    ```", "```py\n    prog = re.compile(r'A{2,4}B')\n    print_match(\"ccAAABdd\")\n    print_match(\"ccABdd\")\n    print_match(\"ccAABBBdd\")\n    print_match(\"ccAAAAAAABdd\")\n    ```", "```py\n     AAAB\n     No match\n     AAB\n     AAAAB\n    ```", "```py\n    prog = re.compile(r'A{,3}B')\n    print_match(\"ccAAABdd\")\n    print_match(\"ccABdd\")\n    print_match(\"ccAABBBdd\")\n    print_match(\"ccAAAAAAABdd\")\n    ```", "```py\n     AAAB\n     AB\n     AAB\n     AAAB\n    ```", "```py\n    prog = re.compile(r'A{3,}B')\n    print_match(\"ccAAABdd\")\n    print_match(\"ccABdd\")\n    print_match(\"ccAABBBdd\")\n    print_match(\"ccAAAAAAABdd\")\n    ```", "```py\n     AAAB\n     No match\n     No match\n     AAAAAAAB\n    ```", "```py\n    prog = re.compile(r'A{2,4}')\n    print_match(\"AAAAAAA\")\n    prog = re.compile(r'A{2,4}?')\n    print_match(\"AAAAAAA\")\n    ```", "```py\n     AAAA\n     AA\n    ```", "```py\n    prog = re.compile(r'[A,B]')\n    print_match(\"ccAd\")\n    print_match(\"ccABd\")\n    print_match(\"ccXdB\")\n    print_match(\"ccXdZ\")\n    ```", "```py\n     A\n     A\n     B\n     No match\n    ```", "```py\n    prog = re.compile(r'[a-zA-Z]+@+[a-zA-Z]+\\.com')\n    print_match(\"My email is coolguy@xyz.com\")\n    print_match(\"My email is coolguy12@xyz.com\")\n    ```", "```py\n     coolguy@xyz.com\n     No match\n    ```", "```py\n    prog = re.compile(r'[a-zA-Z0-9]+@+[a-zA-Z]+\\.com')\n    print_match(\"My email is coolguy12@xyz.com\")\n    print_match(\"My email is coolguy12@xyz.org\")\n    ```", "```py\n     coolguy12@xyz.com\n     No match\n    ```", "```py\n    prog = re.compile(r'[a-zA-Z0-9]+@+[a-zA-Z]+\\.+[a-zA-Z]{2,3}')\n    print_match(\"My email is coolguy12@xyz.org\")\n    print_match(\"My email is coolguy12[AT]xyz[DOT]org\")\n    ```", "```py\n     coolguy12@xyz.org\n     No match\n    ```", "```py\n    prog = re.compile(r'[0-9]{10}')\n    print_match(\"3124567897\")\n    print_match(\"312-456-7897\")\n    ```", "```py\n     3124567897\n     No match\n    ```", "```py\n    prog = re.compile(r'[0-9]{10}|[0-9]{3}-[0-9]{3}-[0-9]{4}')\n    print_match(\"3124567897\")\n    print_match(\"312-456-7897\")\n    ```", "```py\n     3124567897\n     312-456-7897\n    ```", "```py\n    p1= r'[0-9]{10}'\n    p2=r'[0-9]{3}-[0-9]{3}-[0-9]{4}'\n    p3 = r'\\([0-9]{3}\\)[0-9]{3}-[0-9]{4}'\n    p4 = r'[0-9]{3}\\.[0-9]{3}\\.[0-9]{4}'\n    pattern= p1+'|'+p2+'|'+p3+'|'+p4\n    prog = re.compile(pattern)\n    print_match(\"3124567897\")\n    print_match(\"312-456-7897\")\n    print_match(\"(312)456-7897\")\n    print_match(\"312.456.7897\")\n    ```", "```py\n     3124567897\n     312-456-7897\n     (312)456-7897\n     312.456.7897\n    ```", "```py\nph_numbers = \"\"\"Here are some phone numbers.\nPick out the numbers with 312 area code: \n312-423-3456, 456-334-6721, 312-5478-9999, \n312-Not-a-Number,777.345.2317, 312.331.6789\"\"\"\nprint(ph_numbers)\nre.findall('312+[-\\.][0-9-\\.]+',ph_numbers)\n```", "```py\n Here are some phone numbers.\nPick out the numbers with 312 area code: \n312-423-3456, 456-334-6721, 312-5478-9999, \n312-Not-a-Number,777.345.2317, 312.331.6789\n ['312-423-3456', '312-5478-9999', '312.331.6789']\n```"]