["```py\ninstall.packages(\"RSQLite\") \n\n```", "```py\nif (!dir.exists(\"data\")) dir.create(\"data\") \n\n```", "```py\nlibrary(RSQLite) \n## Loading required package: DBI \ncon <- dbConnect(SQLite(), \"data/example.sqlite\") \n\n```", "```py\nexample1 <- data.frame( \nid = 1:5,  \ntype = c(\"A\", \"A\", \"B\", \"B\", \"C\"), \nscore = c(8, 9, 8, 10, 9),  \nstringsAsFactors = FALSE) \nexample1 \n##   id type score \n## 1  1    A     8 \n## 2  2    A     9 \n## 3  3    B     8 \n## 4  4    B    10 \n## 5  5    C     9 \n\n```", "```py\ndbWriteTable(con, \"example1\", example1) \n## [1] TRUE \n\n```", "```py\ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\ninstall.packages(c(\"ggplot2\", \"nycflights13\")) \n\n```", "```py\ndata(\"diamonds\", package =\"ggplot2\") \ndata(\"flights\", package =\"nycflights13\") \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/datasets.sqlite\") \ndbWriteTable(con, \"diamonds\", diamonds, row.names = FALSE) \n## Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbWriteTable' for signature '\"SQLiteConnection\", \"character\", \"tbl_df\"' \ndbWriteTable(con, \"flights\", flights, row.names = FALSE) \n## Error in (function (classes, fdef, mtable) : unable to find an inherited method for function 'dbWriteTable' for signature '\"SQLiteConnection\", \"character\", \"tbl_df\"' \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nclass(diamonds) \n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\" \nclass(flights) \n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\" \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/datasets.sqlite\") \ndbWriteTable(con, \"diamonds\", as.data.frame(diamonds), row.names = FALSE) \n## [1] TRUE \ndbWriteTable(con, \"flights\", as.data.frame(flights), row.names = FALSE) \n## [1] TRUE \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/example2.sqlite\") \nchunk_size <- 10 \nid <- 0 \nfor (i in 1:6) { \n  chunk <- data.frame(id = ((i - 1L) * chunk_size):(i * chunk_size -1L),  \n    type = LETTERS[[i]], \n    score =rbinom(chunk_size, 10, (10 - i) /10), \n    stringsAsFactors =FALSE) \n  dbWriteTable(con, \"products\", chunk,  \n    append = i > 1, row.names = FALSE) \n} \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/datasets.sqlite\") \n\n```", "```py\ndbExistsTable(con, \"diamonds\") \n## [1] TRUE \ndbExistsTable(con, \"mtcars\") \n## [1] FALSE \n\n```", "```py\ndbListTables(con) \n## [1] \"diamonds\" \"flights\" \n\n```", "```py\ndbListFields(con, \"diamonds\") \n##  [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \n##  [6] \"table\"   \"price\"   \"x\"       \"y\"       \"z\" \n\n```", "```py\ndb_diamonds <- dbReadTable(con, \"diamonds\") \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nhead(db_diamonds, 3) \n##   carat     cut color clarity depth table price    x    y \n## 1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 \n## 2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 \n## 3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 \n##      z \n## 1 2.43 \n## 2 2.31 \n## 3 2.31 \nhead(diamonds, 3) \n##   carat     cut color clarity depth table price    x    y \n## 1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 \n## 2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 \n## 3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 \n##      z \n## 1 2.43 \n## 2 2.31 \n## 3 2.31 \n\n```", "```py\nidentical(diamonds, db_diamonds) \n## [1] FALSE \n\n```", "```py\nstr(db_diamonds) \n## 'data.frame':    53940 obs. of  10 variables: \n##  $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24... \n##  $ cut    : chr  \"Ideal\" \"Premium\" \"Good\" \"Premium\" ... \n##  $ color  : chr  \"E\" \"E\" \"E\" \"I\" ... \n##  $ clarity: chr  \"SI2\" \"SI1\" \"VS1\" \"VS2\" ... \n##  $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3... \n##  $ table  : num  55 61 65 58 58 57 57 55 61 61 ... \n##  $ price  : int  326 326 327 334 335 336 336 337 337 ... \n##  $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95... \n##  $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98... \n##  $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47... \n\n```", "```py\nstr(diamonds) \n## Classes 'tbl_df', 'tbl' and 'data.frame':    53940 obs. of  10 variables: \n##  $ carat  : num  0.23 0.21 0.23 0.29 0.31 0.24 0.24... \n##  $ cut    : Ord.factor w/ 5 levels \"Fair\"<\"Good\"<..: 5 4 2 4 2 3 3 3 1 3 ... \n##  $ color  : Ord.factor w/ 7 levels \"D\"<\"E\"<\"F\"<\"G\"<..: 2 2 2 6 7 7 6 5 2 5 ... \n##  $ clarity: Ord.factor w/ 8 levels \"I1\"<\"SI2\"<\"SI1\"<..: 2 3 5 4 2 6 7 3 4 5 ... \n##  $ depth  : num  61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ... \n##  $ table  : num  55 61 65 58 58 57 57 55 61 61 ... \n##  $ price  : int  326 326 327 334 335 336 336 337 337... \n##  $ x      : num  3.95 3.89 4.05 4.2 4.34 3.94 3.95... \n##  $ y      : num  3.98 3.84 4.07 4.23 4.35 3.96 3.98... \n##  $ z      : num  2.43 2.31 2.31 2.63 2.75 2.48 2.47... \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/datasets.sqlite\") \ndbListTables(con) \n## [1] \"diamonds\" \"flights\" \n\n```", "```py\ndb_diamonds <- dbGetQuery(con,  \n\"select * from diamonds\") \nhead(db_diamonds, 3) \n##   carat     cut color clarity depth table price    x    y \n## 1  0.23   Ideal     E     SI2  61.5    55   326 3.95 3.98 \n## 2  0.21 Premium     E     SI1  59.8    61   326 3.89 3.84 \n## 3  0.23    Good     E     VS1  56.9    65   327 4.05 4.07 \n##      z \n## 1 2.43 \n## 2 2.31 \n## 3 2.31 \n\n```", "```py\ndb_diamonds <-dbGetQuery(con,  \n\"select carat, cut, color, clarity, depth, price  \n  from diamonds\") \nhead(db_diamonds, 3) \n##   carat     cut color clarity depth price \n## 1  0.23   Ideal     E     SI2  61.5   326 \n## 2  0.21 Premium     E     SI1  59.8   326 \n## 3  0.23    Good     E     VS1  56.9   327 \n\n```", "```py\ndbGetQuery(con, \"select distinct cut from diamonds\") \n##         cut \n## 1     Ideal \n## 2   Premium \n## 3      Good \n## 4 Very Good \n## 5      Fair \n\n```", "```py\ndbGetQuery(con, \"select distinct clarity from diamonds\")[[1]] \n## [1] \"SI2\"  \"SI1\"  \"VS1\"  \"VS2\"  \"VVS2\" \"VVS1\" \"I1\"   \"IF\" \n\n```", "```py\ndb_diamonds <- dbGetQuery(con,  \n\"select carat, price, clarity as clarity_level from diamonds\") \nhead(db_diamonds, 3) \n##   carat price clarity_level \n## 1  0.23   326           SI2 \n## 2  0.21   326           SI1 \n## 3  0.23   327           VS1 \n\n```", "```py\ndb_diamonds <- dbGetQuery(con, \n\"select carat, price, x * y * z as size from diamonds\") \nhead(db_diamonds, 3) \n##   carat  price     size \n## 1  0.23   326  38.20203 \n## 2  0.21   326  34.50586 \n## 3  0.23   327  38.07688 \n\n```", "```py\ndb_diamonds <- dbGetQuery(con, \n\"select carat, price, x * y * z as size, \n  price / size as value_density \n  from diamonds\") \n## Error in sqliteSendQuery(con, statement, bind.data): error in statement: no such column: size \n\n```", "```py\ndb_diamonds <- dbGetQuery(con, \n\"select *, price / size as value_density from \n  (select carat, price, x * y * z as size from diamonds)\") \nhead(db_diamonds, 3) \n##   carat  price    size   value_density \n## 1  0.23   326  38.20203      8.533578 \n## 2  0.21   326  34.50586      9.447672 \n## 3  0.23   327  38.07688      8.587887 \n\n```", "```py\ngood_diamonds <- dbGetQuery(con,  \n\"select carat, cut, price from diamonds where cut = 'Good'\") \nhead(good_diamonds, 3) \n##   carat  cut price \n## 1  0.23 Good   327 \n## 2  0.31 Good   335 \n## 3  0.30 Good   339 \n\n```", "```py\nnrow(good_diamonds) /nrow(diamonds) \n## [1] 0.09095291 \n\n```", "```py\ngood_e_diamonds <- dbGetQuery(con,  \n\"select carat, cut, color, price from diamonds  \n  where cut = 'Good' and color = 'E'\") \nhead(good_e_diamonds, 3) \n##   carat  cut color price \n## 1  0.23 Good     E   327 \n## 2  0.23 Good     E   402 \n## 3  0.26 Good     E   554 \nnrow(good_e_diamonds) /nrow(diamonds) \n## [1] 0.017297 \n\n```", "```py\ncolor_ef_diamonds <- dbGetQuery(con, \n\"select carat, cut, color, price from diamonds \n  where color in ('E','F')\") \nnrow(color_ef_diamonds) \n## [1] 19339 \n\n```", "```py\ntable(diamonds$color) \n##  \n##     D     E     F     G     H     I     J  \n##  6775  9797  9542 11292  8304  5422  2808 \n\n```", "```py\nsome_price_diamonds <- dbGetQuery(con, \n\"select carat, cut, color, price from diamonds \n  where price between 5000 and 5500\") \nnrow(some_price_diamonds) /nrow(diamonds) \n## [1] 0.03285132 \n\n```", "```py\ngood_cut_diamonds <- dbGetQuery(con,  \n\"select carat, cut, color, price from diamonds \n  where cut like '%Good'\") \nnrow(good_cut_diamonds) /nrow(diamonds) \n## [1] 0.3149425 \n\n```", "```py\ncheapest_diamonds <- dbGetQuery(con, \n\"select carat, price from diamonds \n  order by price\") \n\n```", "```py\nhead(cheapest_diamonds) \n##   carat price \n## 1  0.23   326 \n## 2  0.21   326 \n## 3  0.23   327 \n## 4  0.29   334 \n## 5  0.31   335 \n## 6  0.24   336 \n\n```", "```py\nmost_expensive_diamonds <- dbGetQuery(con, \n\"select carat, price from diamonds \n  order by price desc\") \nhead(most_expensive_diamonds) \n##   carat price \n## 1  2.29 18823 \n## 2  2.00 18818 \n## 3  1.51 18806 \n## 4  2.07 18804 \n## 5  2.00 18803 \n## 6  2.29 18797 \n\n```", "```py\ncheapest_diamonds <- dbGetQuery(con,  \n\"select carat, price from diamonds \n  order by price, carat desc\") \nhead(cheapest_diamonds) \n##   carat price \n## 1  0.23   326 \n## 2  0.21   326 \n## 3  0.23   327 \n## 4  0.29   334 \n## 5  0.31   335 \n## 6  0.24   336 \n\n```", "```py\ndense_diamonds <- dbGetQuery(con, \n\"select carat, price, x * y * z as size from diamonds \n  order by carat / size desc\") \nhead(dense_diamonds) \n##   carat  price     size \n## 1  1.07  5909  47.24628 \n## 2  1.41  9752  74.41726 \n## 3  1.53  8971  85.25925 \n## 4  1.51  7188 133.10400 \n## 5  1.22  3156 108.24890 \n## 6  1.12  6115 100.97448 \n\n```", "```py\nhead(dbGetQuery(con,  \n\"select carat, price from diamonds \n   where cut = 'Ideal' and clarity = 'IF' and color = 'J' \n   order by price\")) \n##   carat price \n## 1  0.30   489 \n## 2  0.30   489 \n## 3  0.32   521 \n## 4  0.32   533 \n## 5  0.32   533 \n## 6  0.35   569 \n\n```", "```py\ndbGetQuery(con,  \n\"select carat, price from diamonds \n  order by carat desc limit 3\") \n##   carat price \n## 1  5.01 18018 \n## 2  4.50 18531 \n## 3  4.13 17329 \n\n```", "```py\ndbGetQuery(con, \n\"select color, count(*) as number from diamonds \n  group by color\") \n##   color number \n## 1     D   6775 \n## 2     E   9797 \n## 3     F   9542 \n## 4     G  11292 \n## 5     H   8304 \n## 6     I   5422 \n## 7     J   2808 \n\n```", "```py\ntable(diamonds$color) \n##  \n##     D     E     F     G     H     I     J  \n##  6775  9797  9542 11292  8304  5422  2808 \n\n```", "```py\ndbGetQuery(con, \n\"select clarity, avg(price) as avg_price  \n   from diamonds \n   group by clarity  \n   order by avg_price desc\") \n##   clarity avg_price \n## 1     SI2  5063.029 \n## 2     SI1  3996.001 \n## 3     VS2  3924.989 \n## 4      I1  3924.169 \n## 5     VS1  3839.455 \n## 6    VVS2  3283.737 \n## 7      IF  2864.839 \n## 8    VVS1  2523.115 \n\n```", "```py\ndbGetQuery(con, \n\"select price, max(carat) as max_carat  \n   from diamonds \n   group by price \n   order by price \n   limit 5\") \n##   price max_carat \n## 1   326      0.23 \n## 2   327      0.23 \n## 3   334      0.29 \n## 4   335      0.31 \n## 5   336      0.24 \n\n```", "```py\ndbGetQuery(con, \n\"select clarity,  \n     min(price) as min_price,  \n     max(price) as max_price, \n     avg(price) as avg_price \n   from diamonds \n   group by clarity  \n   order by avg_price desc\") \n##   clarity min_price max_price avg_price \n## 1     SI2       326     18804  5063.029 \n## 2     SI1       326     18818  3996.001 \n## 3     VS2       334     18823  3924.989 \n## 4      I1       345     18531  3924.169 \n## 5     VS1       327     18795  3839.455 \n## 6    VVS2       336     18768  3283.737 \n## 7      IF       369     18806  2864.839 \n## 8    VVS1       336     18777  2523.115 \n\n```", "```py\ndbGetQuery(con, \n\"select clarity, \n     sum(price * carat) / sum(carat) as wprice \n   from diamonds \n   group by clarity  \n   order by wprice desc\") \n##   clarity   wprice \n## 1     SI2 7012.257 \n## 2     VS2 6173.858 \n## 3     VS1 6059.505 \n## 4     SI1 5919.187 \n## 5    VVS2 5470.156 \n## 6      I1 5233.937 \n## 7      IF 5124.584 \n## 8    VVS1 4389.112 \n\n```", "```py\ndbGetQuery(con, \n\"select clarity, color, \n     avg(price) as avg_price \n   from diamonds \n   group by clarity, color  \n   order by avg_price desc  \n   limit 5\") \n##   clarity color avg_price \n## 1      IF     D  8307.370 \n## 2     SI2     I  7002.649 \n## 3     SI2     J  6520.958 \n## 4     SI2     H  6099.895 \n## 5     VS2     I  5690.506 \n\n```", "```py\ndiamond_selector <- data.frame( \ncut = c(\"Ideal\", \"Good\", \"Fair\"), \ncolor = c(\"E\", \"I\", \"D\"), \nclarity = c(\"VS1\", \"I1\", \"IF\"), \nstringsAsFactors = FALSE \n) \ndiamond_selector \n##     cut color clarity \n## 1 Ideal     E     VS1 \n## 2  Good     I      I1 \n## 3  Fair     D      IF \n\n```", "```py\ndbWriteTable(con, \"diamond_selector\", diamond_selector,  \nrow.names = FALSE, overwrite = TRUE) \n## [1] TRUE \n\n```", "```py\nsubset_diamonds <- dbGetQuery(con,  \n\"select cut, color, clarity, carat, price \n   from diamonds \n   join diamond_selector using (cut, color, clarity)\") \nhead(subset_diamonds) \n##     cut color clarity carat price \n## 1 Ideal     E     VS1  0.60  2774 \n## 2 Ideal     E     VS1  0.26   556 \n## 3 Ideal     E     VS1  0.70  2818 \n## 4 Ideal     E     VS1  0.70  2837 \n## 5  Good     I      I1  1.01  2844 \n## 6 Ideal     E     VS1  0.26   556 \n\n```", "```py\nnrow(subset_diamonds) /nrow(diamonds) \n## [1] 0.01121617 \n\n```", "```py\ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/datasets.sqlite\") \nres <- dbSendQuery(con,  \n\"select carat, cut, color, price from diamonds \n  where cut = 'Ideal' and color = 'E'\") \nwhile (!dbHasCompleted(res)) { \n  chunk <- dbFetch(res, 800) \ncat(nrow(chunk), \"records fetched\\n\") \n# do something with chunk \n} \n## 800 records fetched \n## 800 records fetched \n## 800 records fetched \n## 800 records fetched \n## 703 records fetched \ndbClearResult(res) \n## [1] TRUE \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nset.seed(123) \ncon <- dbConnect(SQLite(), \"data/products.sqlite\") \nchunk_size <- 10 \nfor (i in 1:6) { \n  cat(\"Processing chunk\", i, \"\\n\") \n  if (runif(1) <= 0.2) stop(\"Data error\") \n  chunk <- data.frame(id = ((i - 1L) * chunk_size):(i * chunk_size - 1L),  \n    type = LETTERS[[i]], \n    score = rbinom(chunk_size, 10, (10 - i) /10), \n    stringsAsFactors = FALSE) \n  dbWriteTable(con, \"products\", chunk,  \n    append = i > 1, row.names = FALSE) \n} \n## Processing chunk 1  \n## Processing chunk 2  \n## Processing chunk 3  \n## Processing chunk 4  \n## Processing chunk 5 \n## Error in eval(expr, envir, enclos): Data error \n\n```", "```py\ndbGetQuery(con, \"select COUNT(*) from products\") \n##   COUNT(*) \n## 1      40 \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nset.seed(123) \nfile.remove(\"data/products.sqlite\") \n## [1] TRUE \ncon <- dbConnect(SQLite(), \"data/products.sqlite\") \nchunk_size <- 10 \ndbBegin(con) \n## [1] TRUE \nres <- tryCatch({ \n  for (i in 1:6) { \ncat(\"Processing chunk\", i, \"\\n\") \n    if (runif(1) <= 0.2) stop(\"Data error\") \n    chunk <- data.frame(id = ((i - 1L) * chunk_size):(i * chunk_size - 1L),  \ntype = LETTERS[[i]], \nscore = rbinom(chunk_size, 10, (10 - i) /10), \nstringsAsFactors = FALSE) \ndbWriteTable(con, \"products\", chunk,  \nappend = i > 1, row.names = FALSE) \n  } \ndbCommit(con) \n}, error = function(e) { \nwarning(\"An error occurs: \", e, \"\\nRolling back\", immediate. = TRUE) \ndbRollback(con) \n}) \n## Processing chunk 1  \n## Processing chunk 2  \n## Processing chunk 3  \n## Processing chunk 4  \n## Processing chunk 5 \n## Warning in value[[3L]](cond): An error occurs: Error in doTryCatch(return(expr), name, parentenv, handler): Data error \n##  \n## Rolling back \n\n```", "```py\ndbGetQuery(con, \"select COUNT(*) from products\") \n## Error in sqliteSendQuery(con, statement, bind.data): error in statement: no such table: products \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\ncreate_bank <- function(dbfile) { \n  if (file.exists(dbfile)) file.remove(dbfile) \n  con <- dbConnect(SQLite(), dbfile) \n  dbSendQuery(con,  \n    \"create table accounts  \n    (name text primary key, balance real)\") \n  dbSendQuery(con, \n    \"create table transactions  \n    (time text, account_from text, account_to text, value real)\") \n  con \n} \n\n```", "```py\ncreate_account <- function(con, name, balance) { \n  dbSendQuery(con,  \n    sprintf(\"insert into accounts (name, balance) values ('%s', %.2f)\", name, balance)) \n  TRUE \n} \n\n```", "```py\ntransfer <- function(con, from, to, value) { \n  get_account <- function(name) { \n    account <- dbGetQuery(con,  \n      sprintf(\"select * from accounts  \n              where name = '%s'\", name)) \n    if (nrow(account) == 0)  \n      stop(sprintf(\"Account '%s' does not exist\", name)) \n    account \n  } \n  account_from <- get_account(from) \n  account_to <- get_account(to) \n  if (account_from$balance < value) { \n    stop(sprintf(\"Insufficient money to transfer from '%s'\", \n                 from)) \n  } else { \n    dbSendQuery(con,  \n      sprintf(\"update accounts set balance = %.2f  \n              where name = '%s'\", \n        account_from$balance - value, from)) \ndbSendQuery(con, \nsprintf(\"update accounts set balance = %.2f  \nwhere name = '%s'\", \n        account_to$balance + value, to)) \n      dbSendQuery(con, \n        sprintf(\"insert into transactions (time, account_from,  \n                account_to, value) values \n        ('%s', '%s', '%s', %.2f)\",  \n        format(Sys.time(), \"%Y-%m-%d %H:%M:%S\"), \n        from, to, value)) \n  } \nTRUE \n} \n\n```", "```py\nsafe_transfer <- function(con, ...) { \n  dbBegin(con) \n  tryCatch({ \n    transfer(con, ...) \n    dbCommit(con) \n  }, error = function(e) { \n    message(\"An error occurs in the transaction. Rollback...\") \n    dbRollback(con) \n    stop(e) \n  }) \n} \n\n```", "```py\nget_balance <- function(con, name) { \n  res <- dbGetQuery(con,  \n    sprintf(\"select balance from accounts  \n            where name = '%s'\", name)) \n  res$balance \n} \nget_transactions <- function(con, from, to) { \n  dbGetQuery(con, \n    sprintf(\"select * from transactions  \n      where account_from = '%s' and account_to = '%s'\",  \n      from, to)) \n} \n\n```", "```py\ncon <- create_bank(\"data/bank.sqlite\") \ncreate_account(con, \"David\", 5000) \n## [1] TRUE \ncreate_account(con, \"Jenny\", 6500) \n## [1] TRUE \nget_balance(con, \"David\") \n## [1] 5000 \nget_balance(con, \"Jenny\") \n## [1] 6500 \n\n```", "```py\nsafe_transfer(con, \"David\", \"Jenny\", 1500) \n## [1] TRUE \nget_balance(con, \"David\") \n## [1] 3500 \nget_balance(con, \"Jenny\") \n## [1] 8000 \n\n```", "```py\nsafe_transfer(con, \"David\", \"Jenny\", 6500) \n## An error occurs in the transaction. Rollback... \n## Error in transfer(con, ...): Insufficient money to transfer from 'David' \nget_balance(con, \"David\") \n## [1] 3500 \nget_balance(con, \"Jenny\") \n## [1] 8000 \n\n```", "```py\nget_transactions(con, \"David\", \"Jenny\") \n##                  time   account_from  account_to value \n## 1 2016-06-08 23:24:39        David      Jenny  1500 \n\n```", "```py\ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nchunk_rw <- function(input, output, table, chunk_size = 10000) { \n  first_row <- read.csv(input, nrows = 1, header = TRUE) \n  header <- colnames(first_row) \n  n <- 0 \n  con <- dbConnect(SQLite(), output) \non.exit(dbDisconnect(con)) \n  while (TRUE) { \n    df <- read.csv(input,  \nskip = 1 + n * chunk_size, nrows = chunk_size,  \nheader = FALSE, col.names = header, \nstringsAsFactors = FALSE) \n    if (nrow(df) == 0) break; \ndbWriteTable(con, table, df, row.names = FALSE, append = n > 0) \n    n <- n + 1 \ncat(sprintf(\"%d records written\\n\", nrow(df))) \n  } \n} \n\n```", "```py\nwrite.csv(diamonds, \"data/diamonds.csv\", quote = FALSE, row.names = FALSE) \nchunk_rw(\"data/diamonds.csv\", \"data/diamonds.sqlite\", \"diamonds\") \n## 10000 records written \n## 10000 records written \n## 10000 records written \n## 10000 records written \n## 10000 records written \n## 3940 records written \n\n```", "```py\nbatch_rw <- function(dir, output, table, overwrite = TRUE) { \n  files <- list.files(dir, \"\\\\.csv$\", full.names = TRUE) \n  con <- dbConnect(SQLite(), output) \non.exit(dbDisconnect(con)) \n  exist <- dbExistsTable(con, table) \n  if (exist) { \n    if (overwrite) dbRemoveTable(con, table) \n    else stop(sprintf(\"Table '%s' already exists\", table)) \n  } \n  exist <- FALSE \n  for (file in files) { \ncat(file, \"... \") \n    df <- read.csv(file, header = TRUE,  \nstringsAsFactors = FALSE) \ndbWriteTable(con, table, df, row.names = FALSE,  \nappend = exist) \n    exist <- TRUE \ncat(\"done\\n\") \n  } \n} \n\n```", "```py\nbatch_rw(\"data/groups\", \"data/groups.sqlite\", \"groups\") \n## data/groups/group1.csv ... done \n## data/groups/group2.csv ... done \n## data/groups/group3.csv ... done \n\n```", "```py\ncon <- dbConnect(SQLite(), \"data/groups.sqlite\") \ndbReadTable(con, \"groups\") \n##    group   id   grade \n## 1     1   I-1     A \n## 2     1   I-2     B \n## 3     1   I-3     A \n## 4     2  II-1     C \n## 5     2  II-2     C \n## 6     3 III-1     B \n## 7     3 III-2     B \n## 8     3 III-3     A \n## 9     3 III-4     C \ndbDisconnect(con) \n## [1] TRUE \n\n```", "```py\nproducts: \ncode,name,type,price,amount \nA0000001,Product-A,Type-I,29.5,500 \n\n```", "```py\ncomments: \ncode,user,score,text \nA0000001,david,8,\"This is a good product\" \nA0000001,jenny,5,\"Just so so\" \n\n```", "```py\n{ \n  \"code\":\"A0000001\", \n  \"name\":\"Product-A\", \n  \"type\":\"Type-I\", \n  \"price\":29.5, \n  \"amount\":500, \n  \"comments\":[ \n    { \n      \"user\":\"david\", \n      \"score\":8, \n      \"text\":\"This is a good product\" \n    }, \n    { \n      \"user\":\"jenny\", \n      \"score\":5, \n      \"text\":\"Just so so\" \n    } \n  ] \n} \n\n```", "```py\ninstall.packages(\"mongolite\") \n\n```", "```py\nlibrary(mongolite) \nm <- mongo(\"students\", \"test\", \"mongodb://localhost\") \n\n```", "```py\nm$count() \n## [1] 0 \n\n```", "```py\nm$insert(' \n{ \n  \"code\": \"A0000001\", \n  \"name\": \"Product-A\", \n  \"type\": \"Type-I\", \n  \"price\": 29.5, \n  \"amount\": 500, \n  \"comments\": [ \n    { \n      \"user\": \"david\", \n      \"score\": 8, \n      \"text\": \"This is a good product\" \n    }, \n    { \n      \"user\": \"jenny\", \n      \"score\": 5, \n      \"text\": \"Just so so\" \n    } \n  ] \n}') \n\n```", "```py\nm$count() \n## [1] 1 \n\n```", "```py\nm$insert(list( \n  code = \"A0000002\", \n  name = \"Product-B\", \n  type = \"Type-II\", \n  price = 59.9, \n  amount = 200L, \n  comments = list( \n    list(user = \"tom\", score = 6L, \n      text = \"Just fine\"), \n    list(user = \"mike\", score = 9L, \n      text = \"great product!\") \n  ) \n), auto_unbox = TRUE) \n\n```", "```py\nm$count() \n## [1] 2 \n\n```", "```py\nproducts <- m$find() \n##  \n Found 2 records... \n Imported 2 records. Simplifying into dataframe... \nstr(products) \n## 'data.frame':    2 obs. of  6 variables: \n##  $ code    : chr  \"A0000001\" \"A0000002\" \n##  $ name    : chr  \"Product-A\" \"Product-B\" \n##  $ type    : chr  \"Type-I\" \"Type-II\" \n##  $ price   : num  29.5 59.9 \n##  $ amount  : int  500 200 \n##  $ comments:List of 2 \n##   ..$ :'data.frame': 2 obs. of  3 variables: \n##   .. ..$ user : chr  \"david\" \"jenny\" \n##   .. ..$ score: int  8 5 \n##   .. ..$ text : chr  \"This is a good product\" \"Just so so\" \n##   ..$ :'data.frame': 2 obs. of  3 variables: \n##   .. ..$ user : chr  \"tom\" \"mike\" \n##   .. ..$ score: int  6 9 \n##   .. ..$ text : chr  \"Just fine\" \"great product!\" \n\n```", "```py\niter <- m$iterate() \nproducts <- iter$batch(2) \nstr(products) \n## List of 2 \n##  $ :List of 6 \n##   ..$ code    : chr \"A0000001\" \n##   ..$ name    : chr \"Product-A\" \n##   ..$ type    : chr \"Type-I\" \n##   ..$ price   : num 29.5 \n##   ..$ amount  : int 500 \n##   ..$ comments:List of 2 \n##   .. ..$ :List of 3 \n##   .. .. ..$ user : chr \"david\" \n##   .. .. ..$ score: int 8 \n##   .. .. ..$ text : chr \"This is a good product\" \n##   .. ..$ :List of 3 \n##   .. .. ..$ user : chr \"jenny\" \n##   .. .. ..$ score: int 5 \n##   .. .. ..$ text : chr \"Just so so\" \n##  $ :List of 6 \n##   ..$ code    : chr \"A0000002\" \n##   ..$ name    : chr \"Product-B\" \n##   ..$ type    : chr \"Type-II\" \n##   ..$ price   : num 59.9 \n##   ..$ amount  : int 200 \n##   ..$ comments:List of 2 \n##   .. ..$ :List of 3 \n##   .. .. ..$ user : chr \"tom\" \n##   .. .. ..$ score: int 6 \n##   .. .. ..$ text : chr \"Just fine\" \n##   .. ..$ :List of 3 \n##   .. .. ..$ user : chr \"mike\" \n##   .. .. ..$ score: int 9 \n##   .. .. ..$ text : chr \"great product!\" \n\n```", "```py\nm$find('{ \"code\": \"A0000001\" }',  \n'{ \"_id\": 0, \"name\": 1, \"price\": 1, \"amount\": 1 }') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##        name price amount \n## 1 Product-A  29.5    500 \n\n```", "```py\nm$find('{ \"price\": { \"$gte\": 40 } }', \n'{ \"_id\": 0, \"name\": 1, \"price\": 1, \"amount\": 1 }') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##        name price amount \n## 1 Product-B  59.9    200 \n\n```", "```py\nm$find('{ \"comments.score\": 9 }',  \n'{ \"_id\": 0, \"code\": 1, \"name\": 1}') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##       code      name \n## 1 A0000002 Product-B \n\n```", "```py\nm$find('{ \"comments.score\": { \"$lt\": 6 }}', \n'{ \"_id\": 0, \"code\": 1, \"name\": 1}') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##       code      name \n## 1 A0000001 Product-A \n\n```", "```py\n## [1] TRUE \n\n```", "```py\nm <- mongo(\"students\", \"test\", \"mongodb://localhost\") \n\n```", "```py\nm$count() \n## [1] 0 \n\n```", "```py\nstudents <- data.frame( \n  name = c(\"David\", \"Jenny\", \"Sara\", \"John\"), \n  age = c(25, 23, 26, 23), \n  major = c(\"Statistics\", \"Physics\", \"Computer Science\", \"Statistics\"), \n  projects = c(2, 1, 3, 1), \n  stringsAsFactors = FALSE \n) \nstudents \n##    name age            major projects \n## 1 David  25       Statistics        2 \n## 2 Jenny  23          Physics        1 \n## 3  Sara  26 Computer Science        3 \n## 4  John  23       Statistics        1 \n\n```", "```py\nm$insert(students) \n##  \nComplete! Processed total of 4 rows. \n\n```", "```py\nm$count() \n## [1] 4 \n\n```", "```py\nm$find() \n##  \n Found 4 records... \n Imported 4 records. Simplifying into dataframe... \n##    name age            major projects \n## 1 David  25       Statistics        2 \n## 2 Jenny  23          Physics        1 \n## 3  Sara  26 Computer Science        3 \n## 4  John  23       Statistics        1 \n\n```", "```py\nm$find('{ \"name\": \"Jenny\" }') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##    name age   major projects \n## 1 Jenny  23 Physics        1 \n\n```", "```py\nm$find('{ \"projects\": { \"$gte\": 2 }}') \n##  \n Found 2 records... \n Imported 2 records. Simplifying into dataframe... \n##    name age            major projects \n## 1 David  25       Statistics        2 \n## 2  Sara  26 Computer Science        3 \n\n```", "```py\nm$find('{ \"projects\": { \"$gte\": 2 }}',  \n'{ \"_id\": 0, \"name\": 1, \"major\": 1 }') \n##  \n Found 2 records... \n Imported 2 records. Simplifying into dataframe... \n##    name            major \n## 1 David       Statistics \n## 2  Sara Computer Science \n\n```", "```py\nm$find('{ \"projects\": { \"$gte\": 2 }}',  \nfields ='{ \"_id\": 0, \"name\": 1, \"age\": 1 }', \nsort ='{ \"age\": -1 }') \n##  \n Found 2 records... \n Imported 2 records. Simplifying into dataframe... \n##    name age \n## 1  Sara  26 \n## 2 David  25 \n\n```", "```py\nm$find('{ \"projects\": { \"$gte\": 2 }}',  \nfields ='{ \"_id\": 0, \"name\": 1, \"age\": 1 }', \nsort ='{ \"age\": -1 }', \nlimit =1) \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##   name age \n## 1 Sara  26 \n\n```", "```py\nm$distinct(\"major\") \n## [1] \"Statistics\"       \"Physics\"          \"Computer Science\" \n\n```", "```py\nm$distinct(\"major\", '{ \"projects\": { \"$gte\": 2 } }') \n## [1] \"Statistics\"       \"Computer Science\" \n\n```", "```py\nm$update('{ \"name\": \"Jenny\" }', '{ \"$set\": { \"age\": 24 } }') \n## [1] TRUE \nm$find() \n##  \n Found 4 records... \n Imported 4 records. Simplifying into dataframe... \n##    name age            major projects \n## 1 David  25       Statistics        2 \n## 2 Jenny  24          Physics        1 \n## 3  Sara  26 Computer Science        3 \n## 4  John  23       Statistics        1 \n\n```", "```py\nm$index('{ \"name\": 1 }') \n##   v key._id key.name   name            ns \n## 1 1       1       NA   _id_ test.students \n## 2 1      NA        1 name_1 test.students \n\n```", "```py\nm$find('{ \"name\": \"Sara\" }') \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##   name age            major projects \n## 1 Sara  26 Computer Science        3 \n\n```", "```py\nm$find('{ \"name\": \"Jane\" }') \n##  \n Imported 0 records. Simplifying into dataframe... \n## data frame with 0 columns and 0 rows \n\n```", "```py\nm$drop() \n## [1] TRUE \n\n```", "```py\nset.seed(123) \nm <- mongo(\"simulation\", \"test\") \nsim_data <- expand.grid( \ntype = c(\"A\", \"B\", \"C\", \"D\", \"E\"),  \ncategory = c(\"P-1\", \"P-2\", \"P-3\"), \ngroup = 1:20000,  \nstringsAsFactors = FALSE) \nhead(sim_data) \n##   type category group \n## 1    A      P-1     1 \n## 2    B      P-1     1 \n## 3    C      P-1     1 \n## 4    D      P-1     1 \n## 5    E      P-1     1 \n## 6    A      P-2     1 \n\n```", "```py\nsim_data$score1 <- rnorm(nrow(sim_data), 10, 3) \nsim_data$test1 <- rbinom(nrow(sim_data), 100, 0.8) \n\n```", "```py\nhead(sim_data) \n##   type category group    score1 test1 \n## 1    A      P-1     1  8.318573    80 \n## 2    B      P-1     1  9.309468    75 \n## 3    C      P-1     1 14.676125    77 \n## 4    D      P-1     1 10.211525    79 \n## 5    E      P-1     1 10.387863    80 \n## 6    A      P-2     1 15.145195    76 \n\n```", "```py\nm$insert(sim_data) \nComplete! Processed total of 300000 rows. \n[1] TRUE \n\n```", "```py\nsystem.time(rec <- m$find('{ \"type\": \"C\", \"category\": \"P-3\", \"group\": 87 }')) \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.000   0.000   0.104 \nrec \n##   type category  group   score1 test1 \n## 1    C      P-3    87  6.556688    72 \n\n```", "```py\nsystem.time({ \n  recs <- m$find('{ \"type\": { \"$in\": [\"B\", \"D\"]  },  \n    \"category\": { \"$in\": [\"P-1\", \"P-2\"] },  \n    \"group\": { \"$gte\": 25, \"$lte\": 75 } }') \n}) \n##  \nFound 204 records... \n Imported 204 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.004   0.000   0.094 \n\n```", "```py\nhead(recs) \n##   type category group    score1 test1 \n## 1    B      P-1    25 11.953580    80 \n## 2    D      P-1    25 13.074020    84 \n## 3    B      P-2    25 11.134503    76 \n## 4    D      P-2    25 12.570769    74 \n## 5    B      P-1    26  7.009658    77 \n## 6    D      P-1    26  9.957078    85 \n\n```", "```py\nsystem.time(recs2 <- m$find('{ \"score1\": { \"$gte\": 20 } }')) \n##  \nFound 158 records... \n Imported 158 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.000   0.000   0.096 \n\n```", "```py\nhead(recs2) \n##   type category group   score1 test1 \n## 1    D      P-1    89 20.17111    76 \n## 2    B      P-3   199 20.26328    80 \n## 3    E      P-2   294 20.33798    75 \n## 4    E      P-2   400 21.14716    83 \n## 5    A      P-3   544 21.54330    73 \n## 6    A      P-1   545 20.19368    80 \n\n```", "```py\nm$index('{ \"type\": 1, \"category\": 1, \"group\": 1 }') \n##   v key._id key.type key.category key.group \n## 1 1       1       NA           NA        NA \n## 2 1      NA        1            1         1 \n##                        name              ns \n## 1                      _id_ test.simulation \n## 2 type_1_category_1_group_1 test.simulation \n\n```", "```py\nsystem.time({ \n  rec <- m$find('{ \"type\": \"C\", \"category\": \"P-3\", \"group\": 87 }') \n}) \n##  \n Found 1 records... \n Imported 1 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.000   0.000   0.001 \n\n```", "```py\nsystem.time({ \n  recs <- m$find('{ \"type\": { \"$in\": [\"B\", \"D\"]  },  \n    \"category\": { \"$in\": [\"P-1\", \"P-2\"] },  \n    \"group\": { \"$gte\": 25, \"$lte\": 75 } }') \n}) \n##  \n Found 204 records... \n Imported 204 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.000   0.000   0.002 \n\n```", "```py\nsystem.time({ \n  recs2 <- m$find('{ \"score1\": { \"$gte\": 20 } }') \n}) \n##  \n Found 158 records... \n Imported 158 records. Simplifying into dataframe... \n##    user  system elapsed  \n##   0.000   0.000   0.095 \n\n```", "```py\nm$aggregate('[ \n  { \"$group\": {  \n      \"_id\": \"$type\",  \n      \"count\": { \"$sum\": 1 }, \n      \"avg_score\": { \"$avg\": \"$score1\" }, \n      \"min_test\": { \"$min\": \"$test1\" }, \n      \"max_test\": { \"$max\": \"$test1\" } \n    } \n  } \n]') \n\n```", "```py\nm$aggregate('[ \n  { \"$group\": {  \n      \"_id\": { \"type\": \"$type\", \"category\": \"$category\" },  \n      \"count\": { \"$sum\": 1 }, \n      \"avg_score\": { \"$avg\": \"$score1\" }, \n      \"min_test\": { \"$min\": \"$test1\" }, \n      \"max_test\": { \"$max\": \"$test1\" } \n    } \n  } \n]') \n\n```", "```py\nm$aggregate('[ \n  { \"$group\": {  \n      \"_id\": { \"type\": \"$type\", \"category\": \"$category\" },  \n      \"count\": { \"$sum\": 1 }, \n      \"avg_score\": { \"$avg\": \"$score1\" }, \n      \"min_test\": { \"$min\": \"$test1\" }, \n      \"max_test\": { \"$max\": \"$test1\" } \n    } \n  },  \n  { \n    \"$sort\": { \"_id.type\": 1, \"avg_score\": -1 } \n  } \n]') \n\n```", "```py\nm$aggregate('[ \n  { \"$group\": {  \n      \"_id\": { \"type\": \"$type\", \"category\": \"$category\" },  \n      \"count\": { \"$sum\": 1 }, \n      \"avg_score\": { \"$avg\": \"$score1\" }, \n      \"min_test\": { \"$min\": \"$test1\" }, \n      \"max_test\": { \"$max\": \"$test1\" } \n    } \n  },  \n  { \n    \"$sort\": { \"avg_score\": -1 } \n  },  \n  { \n    \"$limit\": 3 \n  },  \n  { \n    \"$project\": {  \n      \"_id.type\": 1,  \n      \"_id.category\": 1,  \n      \"avg_score\": 1,  \n      \"test_range\": { \"$subtract\": [\"$max_test\", \"$min_test\"] } \n    } \n  } \n]') \n\n```", "```py\nbins <- m$mapreduce( \nmap = 'function() { \n    emit(Math.floor(this.score1 / 2.5) * 2.5, 1); \n  }', \nreduce = 'function(id, counts) { \n    return Array.sum(counts); \n  }' \n) \n\n```", "```py\nbins \n##     _id  value \n## 1  -5.0     6 \n## 2  -2.5   126 \n## 3   0.0  1747 \n## 4   2.5 12476 \n## 5   5.0 46248 \n## 6   7.5 89086 \n## 7  10.0 89489 \n## 8  12.5 46357 \n## 9  15.0 12603 \n## 10 17.5  1704 \n## 11 20.0   153 \n## 12 22.5     5 \n\n```", "```py\nwith(bins, barplot(value /sum(value), names.arg = `_id`, \nmain = \"Histogram of scores\",  \nxlab = \"score1\", ylab = \"Percentage\")) \n\n```", "```py\nm$drop() \n## [1] TRUE \n\n```", "```py\nname: Something \ntype: 1 \ngrade: A \n\n```", "```py\ninstall.packages(\"rredis\") \n\n```", "```py\nlibrary(rredis) \nredisConnect() \n\n```", "```py\nredisSet(\"num1\", 100) \n## [1] \"OK\" \n\n```", "```py\nredisGet(\"num1\") \n## [1] 100 \n\n```", "```py\nredisSet(\"vec1\", 1:5) \n## [1] \"OK\" \nredisGet(\"vec1\") \n## [1] 1 2 3 4 5 \n\n```", "```py\nredisSet(\"mtcars_head\", head(mtcars, 3)) \n## [1] \"OK\" \nredisGet(\"mtcars_head\") \n##                mpg cyl disp  hp drat    wt  qsec vs am gear \n## Mazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4 \n## Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4 \n## Datsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4 \n##               carb \n## Mazda RX4        4 \n## Mazda RX4 Wag    4 \n## Datsun 710       1 \n\n```", "```py\nredisGet(\"something\") \n## NULL \n\n```", "```py\nredisExists(\"something\") \n## [1] FALSE \nredisExists(\"num1\") \n## [1] TRUE \n\n```", "```py\nredisDelete(\"num1\") \n## [1] \"1\" \n## attr(,\"redis string value\") \n## [1] TRUE \nredisExists(\"num1\") \n## [1] FALSE \n\n```", "```py\nredisHSet(\"fruits\", \"apple\", 5) \n## [1] \"1\" \n## attr(,\"redis string value\") \n## [1] TRUE \nredisHSet(\"fruits\", \"pear\", 2) \n## [1] \"1\" \n## attr(,\"redis string value\") \n## [1] TRUE \nredisHSet(\"fruits\", \"banana\", 9) \n## [1] \"1\" \n## attr(,\"redis string value\") \n## [1] TRUE \n\n```", "```py\nredisHGet(\"fruits\", \"banana\") \n## [1] 9 \n\n```", "```py\nredisHGetAll(\"fruits\") \n## $apple \n## [1] 5 \n##  \n## $pear \n## [1] 2 \n##  \n## $banana \n## [1] 9 \n\n```", "```py\nredisHKeys(\"fruits\") \n## [[1]] \n## [1] \"apple\" \n## attr(,\"redis string value\") \n## [1] TRUE \n##  \n## [[2]] \n## [1] \"pear\" \n## attr(,\"redis string value\") \n## [1] TRUE \n##  \n## [[3]] \n## [1] \"banana\" \n## attr(,\"redis string value\") \n## [1] TRUE \n\n```", "```py\nredisHVals(\"fruits\") \n## [[1]] \n## [1] 5 \n##  \n## [[2]] \n## [1] 2 \n##  \n## [[3]] \n## [1] 9 \n\n```", "```py\nredisHLen(\"fruits\") \n## [1] \"3\" \n## attr(,\"redis string value\") \n## [1] TRUE \n\n```", "```py\nredisHMGet(\"fruits\", c(\"apple\", \"banana\")) \n## $apple \n## [1] 5 \n##  \n## $banana \n## [1] 9 \n\n```", "```py\nredisHMSet(\"fruits\", list(apple = 4, pear = 1)) \n## [1] \"OK\" \n\n```", "```py\nredisHGetAll(\"fruits\") \n## $apple \n## [1] 4 \n##  \n## $pear \n## [1] 1 \n##  \n## $banana \n## [1] 9 \n\n```", "```py\nfor (qi in 1:3) { \n  redisRPush(\"queue\", qi)   \n} \n\n```", "```py\nredisLLen(\"queue\") \n## [1] \"3\" \n## attr(,\"redis string value\") \n## [1] TRUE \n\n```", "```py\nredisLPop(\"queue\") \n## [1] 1 \nredisLPop(\"queue\") \n## [1] 2 \nredisLPop(\"queue\") \n## [1] 3 \nredisLPop(\"queue\") \n## NULL \n\n```", "```py\nredisClose() \n\n```"]