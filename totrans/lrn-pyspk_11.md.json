["```py\nspark-submit [options] <python file> [app arguments]\n\n```", "```py\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession \\\n        .builder \\\n        .appName('CalculatingGeoDistances') \\\n        .getOrCreate()\n\nprint('Session created')\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name='PySparkUtilities',\n    version='0.1dev',\n    packages=['utilities', 'utilities/converters'],\n    license='''\n        Creative Commons \n        Attribution-Noncommercial-Share Alike license''',\n    long_description='''\n        An example of how to package code for PySpark'''\n)\n```", "```py\nfrom .geoCalc import geoCalc\n__all__ = ['geoCalc','converters']\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass BaseConverter(metaclass=ABCMeta):\n    @staticmethod\n    @abstractmethod\n    def convert(f, t):\n        raise NotImplementedError\n```", "```py\npython setup.py bdist_egg\n\n```", "```py\nimport utilities.geoCalc as geo\nfrom utilities.converters import metricImperial\n\ngetDistance = func.udf(\n    lambda lat1, long1, lat2, long2: \n        geo.calculateDistance(\n            (lat1, long1),\n            (lat2, long2)\n        )\n    )\n\nconvertMiles = func.udf(lambda m: \n    metricImperial.convert(str(m) + ' mile', 'km'))\n```", "```py\nuber = uber.withColumn(\n    'miles', \n        getDistance(\n            func.col('pickup_latitude'),\n            func.col('pickup_longitude'), \n            func.col('dropoff_latitude'), \n            func.col('dropoff_longitude')\n        )\n    )\n\nuber = uber.withColumn(\n    'kilometers', \n    convertMiles(func.col('miles')))\n```", "```py\n./launch_spark_submit.sh \\\n--master local[4] \\\n--py-files additionalCode/dist/PySparkUtilities-0.1.dev0-py3.5.egg \\\ncalculatingGeoDistance.py\n\n```", "```py\njupyter: 'calculatingGeoDistance.py' is not a Jupyter command\n\n```", "```py\n#!/bin/bash\n\nunset PYSPARK_DRIVER_PYTHON\nspark-submit $*\nexport PYSPARK_DRIVER_PYTHON=jupyter\n```"]