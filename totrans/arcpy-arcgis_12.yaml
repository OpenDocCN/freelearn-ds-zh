- en: Chapter 12. The End of the Beginning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。开端的结束
- en: This book is almost done, but there is so much more to know about writing code
    in Python and ArcPy. Unfortunately, I can't fit it all into one book, but that
    also means that you get to have fun exploring all of the methods and properties
    of ArcPy. As a conclusion to the book, we will cover some other important topics
    that can crop up when writing ArcPy scripts. Combined with the lessons from earlier
    chapters, I hope you'll soon be using ArcPy at work, at school, or just for fun
    (why not?).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书几乎完成，但关于在 Python 和 ArcPy 中编写代码还有很多东西要了解。不幸的是，我无法将其全部放入一本书中，但这也意味着你可以享受探索 ArcPy
    的所有方法和属性。作为本书的结论，我们将涵盖一些在编写 ArcPy 脚本时可能出现的其他重要主题。结合前面章节的教训，我希望你很快就能在工作中、在学校里或只是为了乐趣（为什么不呢？）使用
    ArcPy。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Working with field information – types, aliases, domains, spatial types, and
    more
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理字段信息 - 类型、别名、域、空间类型等
- en: Accessing information describing a Feature Class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问描述要素类的信息
- en: Automatically generating a Feature Class and populating it with fields
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动生成要素类并填充字段
- en: Automatically creating File Geodatabases and Feature Datasets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动创建文件地理数据库和要素数据集
- en: Creating a Script tool that will run the bus stop analysis and generate results
    in an automatically generated File Geodatabase, Feature Dataset, and Feature Class
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个脚本工具，该工具将运行公交车站分析，并在自动生成的文件地理数据库、要素数据集和要素类中生成结果
- en: Getting field information from feature classes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从要素类获取字段信息
- en: When creating script tools, or just running a script, there can be times that
    extracting field information from a feature class (or shapefile) is necessary.
    This information can include field names and aliases, field type and length, scale,
    domains, or subtypes. These are all properties available through the `arcpy.ListFields`
    method. We'll explore the many properties, how to extract them, and how to use
    them in a script.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建脚本工具或仅运行脚本时，有时需要从要素类（或形状文件）中提取字段信息。这些信息可以包括字段名称和别名、字段类型和长度、比例、域或子类型。这些都是通过
    `arcpy.ListFields` 方法可用的属性。我们将探讨许多属性，如何提取它们，以及如何在脚本中使用它们。
- en: By organizing the ArcPy methods into a function, the data is organized in a
    form that we prefer, instead of relying on the default organization used by the
    designers of ArcPy. It's important to remember that scripts you create should
    reflect your needs, and creating these function **wrappers** is one step forward
    towards polishing the raw ArcPy tools to work in your workflows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 ArcPy 方法组织成函数，数据将以我们偏好的形式组织，而不是依赖于 ArcPy 设计者使用的默认组织方式。重要的是要记住，你创建的脚本应该反映你的需求，而创建这些函数**包装器**是向将原始
    ArcPy 工具精炼以适应你的工作流程迈出的第一步。
- en: Accessing the ListFields' properties
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问 ListFields 的属性
- en: The List Fields tool is available as an ArcPy method. `Arcpy.ListFields` accepts
    only one parameter, a feature class, or shapefile. Once the parameter has been
    passed, a series of important properties are available using dot notation. To
    take further advantage of these properties, we will create functions that make
    it easy to get the information we want, in the format we require.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 列表字段工具作为 ArcPy 方法提供。`Arcpy.ListFields` 只接受一个参数，即要素类或形状文件。一旦参数传递成功，就可以使用点符号访问一系列重要属性。为了进一步利用这些属性，我们将创建函数，使其能够轻松获取所需的信息，并按照所需的格式进行。
- en: List comprehensions
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表推导式
- en: Within these field information functions, we will take advantage of a Python
    data structure known as list comprehensions. They simplify the `for` loop structure
    to make it easier to populate a list with the values required (the field information
    in this case).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些字段信息函数中，我们将利用一种名为列表推导式的 Python 数据结构。它们简化了 `for` 循环结构，使其更容易填充所需值（在这种情况下为字段信息）的列表。
- en: 'To create a list comprehension, a `for` loop is generated inside a set of brackets,
    and the list is populated with the generated values. Here is an example of a list
    comprehension that creates a list with the square values of the numbers from 1
    to 10, as run in the Python interpreter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建列表推导式，需要在括号内生成一个 `for` 循环，并将列表填充生成的值。以下是一个示例，它创建了一个包含从 1 到 10 的数字的平方值的列表，在
    Python 解释器中运行：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: List comprehensions are used because they are faster and easier to write, though
    it may take some time to get used to the syntax. Experiment with them to better
    understand their use and limitations, and also consult some of the many resources
    available online.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导式是因为它们更快、更容易编写，尽管可能需要一些时间来习惯语法。通过实验来更好地理解它们的用途和限制，并查阅网上可用的许多资源。
- en: Creating the field information functions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建字段信息函数
- en: Each of the functions will be a separate entity, but they will all have a similar
    structure. One parameter will be accepted by each function, the feature class
    of interest. ArcPy will be imported, and later deleted from memory, to make sure
    that the `ListFields()` method can be called without an error. Once the feature
    class is passed to the `ListFields()` method, the values desired will populate
    a list inside a list comprehension. Once it has been populated, it is returned
    from the function using the return keyword.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都将是一个独立的实体，但它们都将具有相似的结构。每个函数都将接受一个参数，即感兴趣的要素类。ArcPy将被导入，并在稍后从内存中删除，以确保`ListFields()`方法可以无错误地调用。一旦要素类被传递给`ListFields()`方法，所需值将填充在列表推导式内的一个列表中。一旦填充完成，它将通过使用`return`关键字从函数中返回。
- en: 'Here is the set of functions for the field names:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是字段名称的函数集：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These name functions are useful when creating a new feature class based on
    another feature class. Sometimes there is a need to preserve the exact names and
    aliases from the original feature class, and using these functions will make this
    possible. When doing this, there is a need to provide other field information
    as well. Here are the functions related to field types, lengths, precision, and
    scale:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些名称函数在基于另一个要素类创建新要素类时非常有用。有时需要保留原始要素类的确切名称和别名，使用这些函数可以使这一点成为可能。在这种情况下，还需要提供其他字段信息。以下是与字段类型、长度、精度和比例相关的函数：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There is even a property used to request domain information:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有一个属性用于请求域信息：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These functions all share the structure discussed earlier, and have the advantage
    of being simple to use and easy to search throughout. Because fields in a feature
    class have a specific order, each list returned by the functions will have an
    order to the information returned, accessible by a specific index number.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数都具有前面讨论的结构，并且具有使用简单、易于搜索的优点。因为要素类中的字段有特定的顺序，所以每个函数返回的列表都将有一个信息返回的顺序，可以通过特定的索引号访问。
- en: 'The `fieldsubtypes` are also available through the data access module. Because
    they are related to the fields, they are returned as a dictionary:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`fieldsubtypes`也通过数据访问模块提供。因为它们与字段相关，所以作为字典返回：'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Adding these functions to the `useful.py` script in the common module will make
    them available to any script or script tool. Use the `import` keyword to add them
    to any new script. They are self-contained functions that only require the file
    path to the feature class of interest.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些函数添加到公共模块中的`useful.py`脚本中，将使它们对任何脚本或脚本工具可用。使用`import`关键字将它们添加到任何新脚本中。它们是自包含的函数，只需要提供感兴趣要素类的文件路径。
- en: Querying feature class information
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询要素类信息
- en: Some important pieces of information about an incoming feature class cannot
    be accessed using the `ListFields()` method. Instead, a number of different methods
    will be used to find the Geometry type, or Spatial Reference, or the field subtype
    of each feature class. Some of these are discovered using ArcPy's `Describe` method,
    built to provide
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ListFields()`方法无法访问有关传入要素类的一些重要信息。相反，将使用许多不同的方法来查找每个要素类的几何类型、空间参考或字段子类型。其中一些是通过ArcPy的`Describe`方法发现的，该方法旨在提供
- en: 'For the Geometry type, we will use the `shapeType` property of the `Describe()`
    method:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几何类型，我们将使用`Describe()`方法的`shapeType`属性：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The name of the Shape field (which usually defaults to Shape) can also be requested
    using the `Describe` method and returns a string data type:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Shape字段的名称（通常默认为Shape）也可以通过`Describe`方法请求，并返回一个字符串数据类型：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The feature class `spatial_reference` is also available through the `Describe`
    method. The data is returned as a `spatial_reference` object:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Describe`方法，要素类的`spatial_reference`也是可用的。数据以`spatial_reference`对象的形式返回：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A `spatial_reference` object has a number of important properties. The `projectionname`
    and `projectioncode` are among the important
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`spatial_reference`对象具有许多重要的属性。`projectionname`和`projectioncode`是其中重要的属性'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Many other properties and methods can be similarly utilized to make them available
    within scripts or script tools. Explore the ArcGIS help documents for further
    insights into the properties available through the `Describe` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他属性和方法可以类似地利用，使它们在脚本或脚本工具中可用。探索ArcGIS帮助文档，以获取通过`Describe`方法可用的属性的更多信息。
- en: Generating File Geodatabases and feature classes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成文件地理数据库和特征类
- en: File Geodatabases do not have to exist before a script is run; instead, they
    can be generated when a script is executed using the `CreateFileGDB` tool, which
    is also an ArcPy method. Once the `File` Geodatabase has been created, `Feature
    Datasets` can be added.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文件地理数据库不需要在运行脚本之前存在；相反，它们可以在使用`CreateFileGDB`工具执行脚本时生成，该工具也是ArcPy的一个方法。一旦创建了`File`地理数据库，就可以添加`Feature
    Datasets`。
- en: 'Generating the File Geodatabase is very easy. The only parameters are the folders
    to place it inside, and the name of the Geodatabase:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 生成文件地理数据库非常简单。唯一的参数是将它放置在内的文件夹和地理数据库的名称：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Feature Datasets are more difficult to create, as there is an optional spatial
    reference parameter that requires a Spatial Reference object to be generated.
    While the Spatial Reference object is optional, it is highly recommended.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 特征数据集的创建比较困难，因为有一个可选的空间参考参数，需要生成空间参考对象。虽然空间参考对象是可选的，但强烈建议使用。
- en: 'There are a few options to generate the `SpatialReference` object. One of them
    uses the `return specialReference()` function defined earlier; by passing a feature
    class to the function, a Spatial Reference object is created. Another method would
    be to pass a file path to a projection file `.prj` as the optional third parameter.
    A third method is to generate a Spatial Reference object by using the `arcpy.SpatialReference`
    method and passing it a projection code or a projection string:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种选项可以生成`SpatialReference`对象。其中之一是使用之前定义的`return specialReference()`函数；通过向函数传递一个特征类，创建一个空间参考对象。另一种方法是将投影文件的文件路径`.prj`作为可选的第三个参数传递。第三种方法是通过使用`arcpy.SpatialReference`方法并传递投影代码或投影字符串来生成空间参考对象：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However it is generated, it is then passed to the `arcpy.CreateFeatureDataset`
    method along with the file path of the File Geodatabase and the name of the Feature
    Dataset:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何生成，它随后都会传递给`arcpy.CreateFeatureDataset`方法，包括文件地理数据库的文件路径和特征数据集的名称：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Generating a feature class
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成特征类
- en: 'Now that a File Geodatabase and a Feature Dataset have been created, let''s
    generate a Feature Class inside the Feature Dataset. This is done using the `arcpy.CreateFeatureClass`
    method. This method has a number of optional parameters, including a Feature Class
    to use as a template and a Spatial Reference. For this example, there is no need
    to use the Spatial Reference parameter as it is being written to a Feature Dataset,
    which dictates the Spatial Reference used. The template parameter will copy the
    fields of the template Feature Class, but for now, we will only create the Shape
    field:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经创建了一个文件地理数据库和特征数据集，让我们在特征数据集中生成一个特征类。这是通过使用`arcpy.CreateFeatureClass`方法完成的。此方法有许多可选参数，包括用作模板的特征类和一个空间参考。对于这个例子，不需要使用空间参考参数，因为它将被写入特征数据集，这决定了使用哪个空间参考。模板参数将复制模板特征类的字段，但到目前为止，我们只创建形状字段：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The created Feature Class will need some fields with the attribute information
    that will be populated later. The fields have a number of parameters that depend
    on the field type, including length, precision, and alias, among others:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的特征类需要一些字段，这些字段将包含稍后填充的属性信息。字段有许多参数，取决于字段类型，包括长度、精度和别名等：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s add a second field to hold the averaged population values produced by
    the Bus Stop analysis:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个字段来存储公交车站分析产生的平均人口值：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The File Geodatabase, Feature Dataset, and Feature Class fields have now been
    generated. Let's extend the script into a script tool by adding the Bus Stop analysis
    functions, while writing the results to the generated **Feature Class**. Creating,
    a script tool that populates a feature class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件地理数据库、特征数据集和特征类字段现在已经生成。让我们通过添加公交车站分析函数并将结果写入生成的**特征类**来将脚本扩展为脚本工具。创建一个填充特征类的脚本工具。
- en: This script tool will borrow from the ideas outlined in [Chapter 10](ch10.html
    "Chapter 10. Advanced Geometry Object Methods"), *Advanced Geometry Object Methods*
    and will create a union of the Polygon Geometry objects that intersect with the
    buffered bus stops to populate the **Shape field**, along with the **bus stop
    ID** and the averaged population for the blocks intersected with each buffer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本工具将借鉴[第10章](ch10.html "第10章。高级几何对象方法")中概述的思想，*高级几何对象方法*，并将创建与缓冲公交车站相交的Polygon几何对象集合，以填充**Shape字段**，以及与每个缓冲区相交的区块的**公交车站ID**和平均人口。
- en: 'Open the script `Chapter12_3.py` and explore its contents. Coupled with the
    code snippets mentioned earlier and the use of `arcpy.GetParameterAsText` to get
    data from the script tool, the data generated will be written in a feature class
    by the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开脚本`Chapter12_3.py`并探索其内容。结合前面提到的代码片段和`arcpy.GetParameterAsText`的使用来从脚本工具获取数据，生成的数据将通过以下代码写入要素类：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The script combines many of the ideas that have been introduced throughout the
    book to allow the user to run a complete workflow that generates a feature class
    containing the results of the analysis. By adding only the fields of interest
    and populating them with the unioned `Polygon` objects, the script eliminates
    most of the cruft, normally created when running a spatial analysis, and produces
    a results dataset that can be viewed in ArcMap.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本结合了本书中介绍的一些想法，使用户能够运行一个完整的流程，生成包含分析结果的要素类。通过仅添加感兴趣的字段，并用合并的`Polygon`对象填充它们，脚本消除了在运行空间分析时通常创建的大部分冗余，并生成可以在ArcMap中查看的结果数据集。
- en: Setting up the script tool parameters
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置脚本工具参数
- en: 'Here is how the parameters of the script tool look when set up:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置脚本工具参数时的样子：
- en: '![Setting up the script tool parameters](img/8662OS_12_01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![设置脚本工具参数](img/8662OS_12_01.jpg)'
- en: The list of parameters is long, so I am using two images to portray them. It
    is important to choose the correct data type for each parameter as it will control
    the dialog generated to retrieve the data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 参数列表很长，所以我使用了两张图片来展示它们。为每个参数选择正确的数据类型很重要，因为它将控制用于检索数据的对话框。
- en: The **bus stop ID field** and the **Population** field are both obtained from
    their respective feature classes. The **File Geodatabase** name is a string and
    the code will append `.gdb` to the end of the input string if it is not entered
    initially, to make sure that it can be correctly generated. It should not already
    exist; it will not be generated if it does (if desired, this can be changed by
    setting the `arcpy.env.overwriteOutput` property to `True` after the `import`
    statement).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**公交车站ID字段**和**人口**字段都是从它们各自的要素类中获取的。**文件地理数据库**名称是一个字符串，如果最初没有输入，代码将向输入字符串的末尾追加`.gdb`，以确保它可以正确生成。它不应已经存在；如果它存在，则不会生成（如果需要，可以在`import`语句之后将`arcpy.env.overwriteOutput`属性设置为`True`来更改此行为）。'
- en: 'Once the parameters have been set, and the tool has a name and description,
    save it and then open the tool. It should look like this once it has been filled
    out:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了参数，并且工具有了名称和描述，保存它然后打开工具。一旦填写完毕，它应该看起来像这样：
- en: '![Setting up the script tool parameters](img/8662OS_12_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![设置脚本工具参数](img/8662OS_12_02.jpg)'
- en: 'Click on **OK** to run the tool. Open **ArcMap** and add the results, along
    with the San Francisco polygon and the `Inbound71` feature class from *Chapter
    4*, *Complex ArcPy Scripts and Generalizing Functions*. The results will look
    similar to this, after a bit of cartographic symbolizing:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**以运行工具。打开**ArcMap**并添加结果，以及来自*第4章*的旧金山多边形和`Inbound71`要素类，*高级ArcPy脚本和泛化函数*。经过一些制图符号化后，结果将类似于以下内容：
- en: '![Setting up the script tool parameters](img/8662OS_12_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![设置脚本工具参数](img/8662OS_12_03.jpg)'
- en: The final result will have one row per bus stop selected, along with the averaged
    population and the bus stop ID value. Instead of using a spreadsheet as an output,
    the feature class will allow to make maps or produce further spatial analysis.
    Producing custom data using custom script tools puts you in the driver's seat
    when performing geospatial analyses and makes your tools, and you, a valuable
    asset to any team.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将按每个选定的公交车站有一行，包括平均人口和公交车站ID值。而不是使用电子表格作为输出，要素类将允许制作地图或进行进一步的空间分析。使用自定义脚本工具生成自定义数据使你在进行地理空间分析时处于驾驶员的位置，并使你的工具和
    yourself 成为任何团队的有价值资产。
- en: Environmental settings
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置
- en: The ArcPy module allows for the control of global settings that controls input
    and output processes using ArcPy's `env` class. These settings will have an effect
    on the accuracy of data produced using geospatial analysis tools. Resolution and
    tolerance settings for *X*, *Y*, *Z*, and *M* coordinates can be controlled, along
    with output extent, raster cell size, analysis workspace, and many other settings.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ArcPy模块允许通过ArcPy的`env`类控制全局设置，这些设置控制输入和输出过程。这些设置将对使用地理空间分析工具产生数据的精度产生影响。可以控制*X*、*Y*、*Z*和*M*坐标的分辨率和公差，以及输出范围、栅格单元格大小、分析工作空间和许多其他设置。
- en: 'To access the environmental settings using ArcPy, the class `env` is imported
    from `arcpy`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用ArcPy访问环境设置，需要从`arcpy`导入`env`类：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It can also be called using dot notation shown as follows. Setting the workspace
    removes the need to pass a file path to any subsequent methods called on the `workspace`.
    Here is an example of setting the workspace and calling the `ListDatasets()` method
    without passing a file path as a parameter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以使用以下点表示法调用。设置工作空间消除了在后续调用`workspace`上的任何方法时传递文件路径的需要。以下是一个设置工作空间并调用`ListDatasets()`方法的示例，而不将文件路径作为参数传递：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Resolution and tolerance settings
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分辨率和公差设置
- en: The resolution and tolerance settings control the accuracy of the output of
    any data produced by a tool in ArcToolbox or when running a script using ArcPy.
    These can (and should) be set for Feature Datasets in File Geodatabases or Enterprise
    Geodatabases, but it is important to set them for analysis run in the memory or
    when using shapefiles, or if the geospatial analysis requires greater accuracy
    than used by those Geodatabases.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率和公差设置控制由ArcToolbox中的工具或使用ArcPy运行脚本产生的任何数据的输出精度。这些设置（并且应该）为文件地理数据库或企业地理数据库中的要素数据集设置，但在内存中运行分析或使用形状文件时，或者如果地理空间分析需要比那些地理数据库使用的精度更高时，设置它们非常重要。
- en: 'Setting the resolutions and tolerances require an understanding of the accuracy
    required for your projects. These settings will limit the ability to snap to a
    line or find points that intersect with a line. The linear unit will need to reflect
    the coordinate system of choice:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 设置分辨率和公差需要了解您项目所需的精度。这些设置将限制对齐到线或找到与线相交的点的能力。线性单位需要反映所选的坐标系：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Other important environmental settings include:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其他重要的环境设置包括：
- en: The **Extent** setting, which limits the extent of any data produced from an
    analysis by setting a rectangle of interest using an `Extent` object, or a string
    with space delimited coordinates (`Xmin`, `Ymin`, `Xmax`, `Ymax`) in the current
    coordinate system.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**设置，通过使用`范围`对象设置感兴趣区域的矩形，或使用当前坐标系中用空格分隔的坐标（`Xmin`、`Ymin`、`Xmax`、`Ymax`）的字符串来限制由分析产生的任何数据的范围。'
- en: The **Mask** setting, which limits raster analysis to areas that intersect with
    a feature class or a raster passed as a string file path parameter to the setting.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**掩膜**设置，将栅格分析限制为与要素类或作为字符串文件路径参数传递给设置的栅格相交的区域。'
- en: The **Cell Size** setting, which controls the cell size of the data produced
    using raster analysis.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元格大小**设置，控制使用栅格分析产生的数据的单元格大小。'
- en: Take time and explore the powerful ArcPy Environmental Settings to reduce the
    time needed to write code and ensure high-quality data production.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 抽时间探索强大的ArcPy环境设置，以减少编写代码所需的时间并确保高质量的数据生产。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter and this book have demonstrated some of the many ways that ArcPy
    can be used to automate geospatial analysis. By applying the lessons, and by being
    creative with the many methods and properties of ArcPy, repetitive and slow geospatial
    processes can be scripted and made into custom tools that will save a lot of time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本章和本书展示了ArcPy可以用于自动化地理空间分析的许多方法之一。通过应用这些课程，并通过在ArcPy的许多方法和属性上发挥创意，可以编写脚本并将重复且缓慢的地理空间过程制作成自定义工具，这将节省大量时间。
- en: I hope that you enjoyed learning the basics of scripting with ArcPy and Python.
    I really hope that you've even come to like the idea of programming, as it is
    powerful and empowering. There is much more to master, but I think you will find
    that the more scripting you do, the easier it is to understand.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您喜欢学习使用ArcPy和Python的基本脚本知识。我真心希望您甚至开始喜欢编程的想法，因为它强大且赋权。还有更多需要掌握的内容，但我认为您会发现，您编写的脚本越多，理解起来就越容易。
- en: The best resource for further understanding of ArcPy is the ArcGIS Help Documents,
    available through the Help menu in ArcCatalog or ArcMap. The documentation is
    also available at [http://resources.arcgis.com/en/help/main/10.2/index.html](http://resources.arcgis.com/en/help/main/10.2/index.html).
    Working on entering the correct question into Google can be very helpful as well.
    Programming forums such as Stack Exchange ([http://gis.stackexchange.com/](http://gis.stackexchange.com/))
    or ESRI's GeoNet ([https://geonet.esri.com/welcome](https://geonet.esri.com/welcome))
    are valuable resources to ask all kinds of programming questions. There is an
    answer for almost every question you may have (but never be afraid to ask questions
    yourself!).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解 ArcPy 的最佳资源是 ArcGIS 帮助文档，您可以通过 ArcCatalog 或 ArcMap 中的帮助菜单访问这些文档。文档也可在[http://resources.arcgis.com/en/help/main/10.2/index.html](http://resources.arcgis.com/en/help/main/10.2/index.html)找到。在
    Google 中输入正确的问题也可能非常有帮助。编程论坛，如 Stack Exchange ([http://gis.stackexchange.com/](http://gis.stackexchange.com/))
    或 ESRI 的 GeoNet ([https://geonet.esri.com/welcome](https://geonet.esri.com/welcome))，都是询问各种编程问题的宝贵资源。几乎每个问题都有答案（但永远不要害怕自己提问！）。
- en: Have fun creating solutions and tools, and good luck in all your future geospatial
    programming challenges!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 享受创造解决方案和工具的过程，并在你未来的所有地理空间编程挑战中好运！
