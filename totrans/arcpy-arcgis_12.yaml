- en: Chapter 12. The End of the Beginning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is almost done, but there is so much more to know about writing code
    in Python and ArcPy. Unfortunately, I can't fit it all into one book, but that
    also means that you get to have fun exploring all of the methods and properties
    of ArcPy. As a conclusion to the book, we will cover some other important topics
    that can crop up when writing ArcPy scripts. Combined with the lessons from earlier
    chapters, I hope you'll soon be using ArcPy at work, at school, or just for fun
    (why not?).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with field information – types, aliases, domains, spatial types, and
    more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing information describing a Feature Class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically generating a Feature Class and populating it with fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically creating File Geodatabases and Feature Datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Script tool that will run the bus stop analysis and generate results
    in an automatically generated File Geodatabase, Feature Dataset, and Feature Class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting field information from feature classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating script tools, or just running a script, there can be times that
    extracting field information from a feature class (or shapefile) is necessary.
    This information can include field names and aliases, field type and length, scale,
    domains, or subtypes. These are all properties available through the `arcpy.ListFields`
    method. We'll explore the many properties, how to extract them, and how to use
    them in a script.
  prefs: []
  type: TYPE_NORMAL
- en: By organizing the ArcPy methods into a function, the data is organized in a
    form that we prefer, instead of relying on the default organization used by the
    designers of ArcPy. It's important to remember that scripts you create should
    reflect your needs, and creating these function **wrappers** is one step forward
    towards polishing the raw ArcPy tools to work in your workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the ListFields' properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The List Fields tool is available as an ArcPy method. `Arcpy.ListFields` accepts
    only one parameter, a feature class, or shapefile. Once the parameter has been
    passed, a series of important properties are available using dot notation. To
    take further advantage of these properties, we will create functions that make
    it easy to get the information we want, in the format we require.
  prefs: []
  type: TYPE_NORMAL
- en: List comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within these field information functions, we will take advantage of a Python
    data structure known as list comprehensions. They simplify the `for` loop structure
    to make it easier to populate a list with the values required (the field information
    in this case).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a list comprehension, a `for` loop is generated inside a set of brackets,
    and the list is populated with the generated values. Here is an example of a list
    comprehension that creates a list with the square values of the numbers from 1
    to 10, as run in the Python interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: List comprehensions are used because they are faster and easier to write, though
    it may take some time to get used to the syntax. Experiment with them to better
    understand their use and limitations, and also consult some of the many resources
    available online.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the field information functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the functions will be a separate entity, but they will all have a similar
    structure. One parameter will be accepted by each function, the feature class
    of interest. ArcPy will be imported, and later deleted from memory, to make sure
    that the `ListFields()` method can be called without an error. Once the feature
    class is passed to the `ListFields()` method, the values desired will populate
    a list inside a list comprehension. Once it has been populated, it is returned
    from the function using the return keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the set of functions for the field names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These name functions are useful when creating a new feature class based on
    another feature class. Sometimes there is a need to preserve the exact names and
    aliases from the original feature class, and using these functions will make this
    possible. When doing this, there is a need to provide other field information
    as well. Here are the functions related to field types, lengths, precision, and
    scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There is even a property used to request domain information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These functions all share the structure discussed earlier, and have the advantage
    of being simple to use and easy to search throughout. Because fields in a feature
    class have a specific order, each list returned by the functions will have an
    order to the information returned, accessible by a specific index number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fieldsubtypes` are also available through the data access module. Because
    they are related to the fields, they are returned as a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding these functions to the `useful.py` script in the common module will make
    them available to any script or script tool. Use the `import` keyword to add them
    to any new script. They are self-contained functions that only require the file
    path to the feature class of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Querying feature class information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some important pieces of information about an incoming feature class cannot
    be accessed using the `ListFields()` method. Instead, a number of different methods
    will be used to find the Geometry type, or Spatial Reference, or the field subtype
    of each feature class. Some of these are discovered using ArcPy's `Describe` method,
    built to provide
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Geometry type, we will use the `shapeType` property of the `Describe()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the Shape field (which usually defaults to Shape) can also be requested
    using the `Describe` method and returns a string data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The feature class `spatial_reference` is also available through the `Describe`
    method. The data is returned as a `spatial_reference` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A `spatial_reference` object has a number of important properties. The `projectionname`
    and `projectioncode` are among the important
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Many other properties and methods can be similarly utilized to make them available
    within scripts or script tools. Explore the ArcGIS help documents for further
    insights into the properties available through the `Describe` method.
  prefs: []
  type: TYPE_NORMAL
- en: Generating File Geodatabases and feature classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: File Geodatabases do not have to exist before a script is run; instead, they
    can be generated when a script is executed using the `CreateFileGDB` tool, which
    is also an ArcPy method. Once the `File` Geodatabase has been created, `Feature
    Datasets` can be added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generating the File Geodatabase is very easy. The only parameters are the folders
    to place it inside, and the name of the Geodatabase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Feature Datasets are more difficult to create, as there is an optional spatial
    reference parameter that requires a Spatial Reference object to be generated.
    While the Spatial Reference object is optional, it is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few options to generate the `SpatialReference` object. One of them
    uses the `return specialReference()` function defined earlier; by passing a feature
    class to the function, a Spatial Reference object is created. Another method would
    be to pass a file path to a projection file `.prj` as the optional third parameter.
    A third method is to generate a Spatial Reference object by using the `arcpy.SpatialReference`
    method and passing it a projection code or a projection string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'However it is generated, it is then passed to the `arcpy.CreateFeatureDataset`
    method along with the file path of the File Geodatabase and the name of the Feature
    Dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Generating a feature class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that a File Geodatabase and a Feature Dataset have been created, let''s
    generate a Feature Class inside the Feature Dataset. This is done using the `arcpy.CreateFeatureClass`
    method. This method has a number of optional parameters, including a Feature Class
    to use as a template and a Spatial Reference. For this example, there is no need
    to use the Spatial Reference parameter as it is being written to a Feature Dataset,
    which dictates the Spatial Reference used. The template parameter will copy the
    fields of the template Feature Class, but for now, we will only create the Shape
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The created Feature Class will need some fields with the attribute information
    that will be populated later. The fields have a number of parameters that depend
    on the field type, including length, precision, and alias, among others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a second field to hold the averaged population values produced by
    the Bus Stop analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The File Geodatabase, Feature Dataset, and Feature Class fields have now been
    generated. Let's extend the script into a script tool by adding the Bus Stop analysis
    functions, while writing the results to the generated **Feature Class**. Creating,
    a script tool that populates a feature class.
  prefs: []
  type: TYPE_NORMAL
- en: This script tool will borrow from the ideas outlined in [Chapter 10](ch10.html
    "Chapter 10. Advanced Geometry Object Methods"), *Advanced Geometry Object Methods*
    and will create a union of the Polygon Geometry objects that intersect with the
    buffered bus stops to populate the **Shape field**, along with the **bus stop
    ID** and the averaged population for the blocks intersected with each buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the script `Chapter12_3.py` and explore its contents. Coupled with the
    code snippets mentioned earlier and the use of `arcpy.GetParameterAsText` to get
    data from the script tool, the data generated will be written in a feature class
    by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The script combines many of the ideas that have been introduced throughout the
    book to allow the user to run a complete workflow that generates a feature class
    containing the results of the analysis. By adding only the fields of interest
    and populating them with the unioned `Polygon` objects, the script eliminates
    most of the cruft, normally created when running a spatial analysis, and produces
    a results dataset that can be viewed in ArcMap.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the script tool parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is how the parameters of the script tool look when set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the script tool parameters](img/8662OS_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The list of parameters is long, so I am using two images to portray them. It
    is important to choose the correct data type for each parameter as it will control
    the dialog generated to retrieve the data.
  prefs: []
  type: TYPE_NORMAL
- en: The **bus stop ID field** and the **Population** field are both obtained from
    their respective feature classes. The **File Geodatabase** name is a string and
    the code will append `.gdb` to the end of the input string if it is not entered
    initially, to make sure that it can be correctly generated. It should not already
    exist; it will not be generated if it does (if desired, this can be changed by
    setting the `arcpy.env.overwriteOutput` property to `True` after the `import`
    statement).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the parameters have been set, and the tool has a name and description,
    save it and then open the tool. It should look like this once it has been filled
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the script tool parameters](img/8662OS_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **OK** to run the tool. Open **ArcMap** and add the results, along
    with the San Francisco polygon and the `Inbound71` feature class from *Chapter
    4*, *Complex ArcPy Scripts and Generalizing Functions*. The results will look
    similar to this, after a bit of cartographic symbolizing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the script tool parameters](img/8662OS_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final result will have one row per bus stop selected, along with the averaged
    population and the bus stop ID value. Instead of using a spreadsheet as an output,
    the feature class will allow to make maps or produce further spatial analysis.
    Producing custom data using custom script tools puts you in the driver's seat
    when performing geospatial analyses and makes your tools, and you, a valuable
    asset to any team.
  prefs: []
  type: TYPE_NORMAL
- en: Environmental settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ArcPy module allows for the control of global settings that controls input
    and output processes using ArcPy's `env` class. These settings will have an effect
    on the accuracy of data produced using geospatial analysis tools. Resolution and
    tolerance settings for *X*, *Y*, *Z*, and *M* coordinates can be controlled, along
    with output extent, raster cell size, analysis workspace, and many other settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the environmental settings using ArcPy, the class `env` is imported
    from `arcpy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be called using dot notation shown as follows. Setting the workspace
    removes the need to pass a file path to any subsequent methods called on the `workspace`.
    Here is an example of setting the workspace and calling the `ListDatasets()` method
    without passing a file path as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Resolution and tolerance settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The resolution and tolerance settings control the accuracy of the output of
    any data produced by a tool in ArcToolbox or when running a script using ArcPy.
    These can (and should) be set for Feature Datasets in File Geodatabases or Enterprise
    Geodatabases, but it is important to set them for analysis run in the memory or
    when using shapefiles, or if the geospatial analysis requires greater accuracy
    than used by those Geodatabases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting the resolutions and tolerances require an understanding of the accuracy
    required for your projects. These settings will limit the ability to snap to a
    line or find points that intersect with a line. The linear unit will need to reflect
    the coordinate system of choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Other important environmental settings include:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Extent** setting, which limits the extent of any data produced from an
    analysis by setting a rectangle of interest using an `Extent` object, or a string
    with space delimited coordinates (`Xmin`, `Ymin`, `Xmax`, `Ymax`) in the current
    coordinate system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Mask** setting, which limits raster analysis to areas that intersect with
    a feature class or a raster passed as a string file path parameter to the setting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Cell Size** setting, which controls the cell size of the data produced
    using raster analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take time and explore the powerful ArcPy Environmental Settings to reduce the
    time needed to write code and ensure high-quality data production.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter and this book have demonstrated some of the many ways that ArcPy
    can be used to automate geospatial analysis. By applying the lessons, and by being
    creative with the many methods and properties of ArcPy, repetitive and slow geospatial
    processes can be scripted and made into custom tools that will save a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you enjoyed learning the basics of scripting with ArcPy and Python.
    I really hope that you've even come to like the idea of programming, as it is
    powerful and empowering. There is much more to master, but I think you will find
    that the more scripting you do, the easier it is to understand.
  prefs: []
  type: TYPE_NORMAL
- en: The best resource for further understanding of ArcPy is the ArcGIS Help Documents,
    available through the Help menu in ArcCatalog or ArcMap. The documentation is
    also available at [http://resources.arcgis.com/en/help/main/10.2/index.html](http://resources.arcgis.com/en/help/main/10.2/index.html).
    Working on entering the correct question into Google can be very helpful as well.
    Programming forums such as Stack Exchange ([http://gis.stackexchange.com/](http://gis.stackexchange.com/))
    or ESRI's GeoNet ([https://geonet.esri.com/welcome](https://geonet.esri.com/welcome))
    are valuable resources to ask all kinds of programming questions. There is an
    answer for almost every question you may have (but never be afraid to ask questions
    yourself!).
  prefs: []
  type: TYPE_NORMAL
- en: Have fun creating solutions and tools, and good luck in all your future geospatial
    programming challenges!
  prefs: []
  type: TYPE_NORMAL
