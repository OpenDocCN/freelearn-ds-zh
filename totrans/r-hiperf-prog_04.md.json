["```py\n# Compute the n-period moving average of x\nmov.avg <- function(x, n=20) {\n    total <- numeric(length(x) - n + 1)\n    for (i in 1:n) {\n        total <- total + x[i:(length(x) - n + i)]\n    }\n  total / n\n}\n```", "```py\nlibrary(compiler)\nmov.avg.compiled0 <- cmpfun(mov.avg, options=list(optimize=0))\nmov.avg.compiled1 <- cmpfun(mov.avg, options=list(optimize=1))\nmov.avg.compiled2 <- cmpfun(mov.avg, options=list(optimize=2))\nmov.avg.compiled3 <- cmpfun(mov.avg, options=list(optimize=3))\n```", "```py\nlibrary(microbenchmark)\nx <- runif(100)\nbench <- microbenchmark(mov.avg(x),\n                        mov.avg.compiled0(x),\n                        mov.avg.compiled1(x),\n                        mov.avg.compiled2(x),\n                        mov.avg.compiled3(x))\nbench\n## Unit: microseconds\n##                  expr    min      lq  median      uq      max\n##            mov.avg(x) 34.257 37.6865 41.3630 72.3015  131.101\n##  mov.avg.compiled0(x) 33.500 36.9065 41.9995 72.8770 2605.917\n##  mov.avg.compiled1(x) 34.643 36.8615 41.0650 71.8480  117.632\n##  mov.avg.compiled2(x) 24.050 25.9040 28.3060 51.8685 3693.741\n##  mov.avg.compiled3(x) 23.399 24.6540 27.7670 49.6385   89.595\n##  neval\n##    100\n##    100\n##    100\n##    100\n##    100\n```", "```py\nlibrary(ggplot2)\nautoplot(bench)\n```", "```py\nlibrary(compiler)\nenableJIT(level=3)\n```", "```py\nmicrobenchmark(mov.avg(x))\n## Unit: microseconds\n##        expr    min     lq median     uq      max neval\n##  mov.avg(x) 23.164 24.009 24.519 25.128 6097.067   100\n```", "```py\nlibrary(inline)\nmov.avg.inline <- cfunction(\n    sig=signature(x=\"numeric\", n=\"integer\"),\n    body=\"\n        /* Coerce arguments to the correct types needed.\n           x needs to be a numeric vector (type REALSXP), and n\n           needs to be an integer vector (type INTSXP). */\n        SEXP x2 = PROTECT(coerceVector(x, REALSXP));\n        SEXP n2 = PROTECT(coerceVector(n, INTSXP));\n\n        /* Create accessors to the actual data being pointed to by\n           the two SEXP's. */\n        double *x_p = REAL(x2);\n        int n_val = asInteger(n2);\n\n        // Vector lengths\n        int x_len = length(x2);\n        int res_len = x_len - n_val + 1;\n\n        /* Create and initialize a numeric vector (type REALSXP)\n           of length res_len, using allocVector().\n           Since memory is allocated, use PROTECT to protect the\n           object from R's garbage collection. */\n        SEXP res = PROTECT(allocVector(REALSXP, res_len));\n        double *res_p = REAL(res);\n        for (int i = 0; i < res_len; i++) {\n            res_p[i] = 0;\n        }\n\n        // Compute window sum\n        for (int j = 0; j < n_val; j++) {\n            for (int k = 0; k < res_len; k++) {\n                res_p[k] += x_p[j + k];\n            }\n        }\n\n        // Compute moving average\n        for (int l = 0; l < res_len; l++) {\n            res_p[l] /= n_val;\n        }\n\n        // Unprotect allocated memory and return results\n        UNPROTECT(3);\n        return res;\n    ',\n    language=\"C\"\n    )\n```", "```py\nx <- runif(100)\nall(mov.avg(x, 20) == mov.avg.inline(x, 20))\n## [1] TRUE\n```", "```py\nmicrobenchmark(mov.avg(x, 20), mov.avg.inline(x, 20))\n## Unit: microseconds\n##                  expr    min     lq  median      uq     max\n##        mov.avg(x, 20) 32.909 34.113 34.8240 35.6975 130.155\n## mov.avg.inline(x, 20)  1.347  1.423  1.5535  1.7015  14.169\n## neval\n##   100\n##   100\n```", "```py\ny <- runif(1e7)\nmicrobenchmark(mov.avg(y, 20), mov.avg.inline(y, 20))\n## Unit: milliseconds\n##                  expr       min        lq    median       uq\n##        mov.avg(y, 20) 2046.4608 2198.6103 2252.7003 2318.721\n## mov.avg.inline(y, 20)  272.8686  280.2837  283.3647  292.587\n##       max neval\n## 3606.3911   100\n##  374.0193   100\n```", "```py\n#include <Rcpp.h>\n\n// [[Rcpp::export]]\nRcpp::NumericVector mov_avg_Rcpp(Rcpp::NumericVector x,\n                                 int n=20) {\n    // Vector lengths\n    int x_len = x.size();\n    int res_len = x_len - n + 1;\n\n    // Create and initialize vector for results\n    Rcpp::NumericVector res(res_len);\n\n    // Compute window sum\n    for (int j = 0; j < n; j++) {\n        for (int k = 0; k < res_len; k++) {\n            res[k] += x[j + k];\n        }\n    }\n\n    // Compute moving average\n    for (int l = 0; l < res_len; l++) {\n        res[l] /= n;\n    }\n\n    // Return results\n    return res;\n}\n```", "```py\nlibrary(Rcpp)\nsourceCpp('mov_avg_Rcpp.cpp\")\n```", "```py\nx <- runif(100)\nmicrobenchmark(mov.avg(x, 20),\n               mov.avg.inline(x, 20),\n               mov_avg_Rcpp(x, 20))\n## Unit: microseconds\n##                  expr    min     lq median      uq     max\n##        mov.avg(x, 20) 33.902 35.779 37.472 49.7340 101.325\n## mov.avg.inline(x, 20)  1.327  1.513  1.718  1.9655  14.129\n##   mov_avg_Rcpp(x, 20)  2.382  2.727  2.874  3.9705  11.424\n## neval\n##   100\n##   100\n##   100\n```", "```py\nint *x = (int *) R_alloc(100, sizeof(int));\n```"]