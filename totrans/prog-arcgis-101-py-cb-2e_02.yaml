- en: Chapter 2. Writing Basic Geoprocessing Scripts with ArcPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the ArcGIS Python window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing ArcPy with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing tools from a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ArcGIS Desktop help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables to store data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing ArcPy modules with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geoprocessing tasks tend to be time consuming and repetitive, and often need
    to be run on a periodic basis. Frequently, many data layers and functions are
    involved. The ArcPy Python site package for ArcGIS provides a set of tools and
    execution environments that can be used to transform your data into meaningful
    results. Using scripts you can automate your geoprocessing tasks and schedule
    them to run when it is most convenient for your organization.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS provides a geoprocessing framework for the purpose of automating your
    repetitive GIS tasks through a set of tools and execution environments for these
    tools. All tools operate on an input dataset, which you supply and transform in
    some way (depending upon the nature of the tool used) to produce a new output
    dataset. This new output dataset can then, if necessary, be used as the input
    dataset to additional geoprocessing tools in a larger workflow for your tasks.
    There are many tools provided by the ArcGIS geoprocessing framework, each designed
    to provide specific functionality.
  prefs: []
  type: TYPE_NORMAL
- en: While there are many different environments that you can use to write your geoprocessing
    scripts with Python, this book will focus on the use of the built-in ArcGIS Python
    window and the Python IDLE editor.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ArcGIS Python window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use the ArcGIS Python window. In [Chapter
    1](ch01.html "Chapter 1. Fundamentals of the Python Language for ArcGIS"), *Fundamentals
    of the Python Language for ArcGIS*, you learned how to use the IDLE development
    environment for Python, so this chapter will give you an alternative for writing
    your geoprocessing scripts. Either development environment can be used but it
    is common for people to start writing scripts with the ArcGIS Desktop Python window
    and then move on to IDLE when scripts become more complex. I should also mention
    that there are many other development environments that you may want to consider,
    including PythonWin, Wingware, Komodo, and others. The development environment
    you choose is really a matter of preference.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new Python window is an embedded, interactive Python window in ArcGIS Desktop
    10, that is ideal for testing small blocks of code, learning Python basics, building
    quick and easy workflows, and executing geoprocessing tools. However, as your
    scripts become more complex, you'll quickly find the need for a more robust development
    environment. By default, IDLE is installed with ArcGIS Desktop, so this is a logical
    next choice for many. For new programmers, though, the ArcGIS Python window is
    a great place to start!
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS Python window has a number of capabilities in addition to being the
    location for writing your code. You can save the content of the window to a Python
    script file on a disk or load an existing Python script into the window. The window
    can be either pinned or floating. While floating, the window can be expanded or
    contracted as you wish. The window can also be pinned to various parts of the
    ArcGIS display. You can also format the font and text colors displayed in the
    window by right-clicking on the window and selecting **Format**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python window can be opened by clicking on the Python window button on the
    main ArcGIS Desktop toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to specifically open `Crime_Ch2.mxd`. Any map document file can
    be used with the Python window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the Python window button from the main **ArcMap** toolbar. The Python
    window will be displayed as shown in the following screenshot. This is a floating
    window, so you can resize as needed and also dock it at various places on the
    **ArcMap** interface:![How to do it…](img/4445_02_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python window is essentially a shell window that allows you to type in statements
    one line at a time, just after the line input characters `>>>`. On the right-hand
    side of the divider, you will find a help window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load an existing script by right-clicking inside the Python window and selecting
    **Load** from the menu. Navigate to the `c:\ArcpyBook\Ch2` directory and select
    `ListFields.py` to load a sample script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also format the font and text colors displayed in the window by right-clicking
    on the window and selecting **Format**. You will be provided with White and Black
    themes; you can select fonts and colors individually:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/4445_02_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Click on the **Set Black Theme** button to see an example. If you spend a lot
    of time writing code, you may find that darker themes are easier on your eyes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/4445_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing ArcPy with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can take advantage of all the geoprocessing functionality provided
    by ArcPy, you must first import the package into your script. This will always
    be the first line of code in every geoprocessing script that you write.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcPy is a Python site package that is part of the ArcGIS 10 release, and fully
    encompasses the functionality provided with the `arcgis scripting` module at ArcGIS
    9.2, which further enhances its capabilities. With ArcPy you have access to the
    geoprocessing tools, extensions, functions, and classes for working with ESRI
    GIS data. ArcPy provides code-completion and integrated documentation for the
    modules, classes, and functions. ArcPy can also be integrated with other Python
    modules to widen the scope of its capabilities. All ArcGIS geoprocessing scripts
    that you write with Python must first provide a reference to ArcPy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to import the `arcpy` site package into the ArcGIS Python
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` file with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Python window button to display a shell window where you can write
    the Python code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Python window, import the `arcpy` package and press the *Enter* key on
    your keyboard. After each statement that you enter in the Python window, you will
    press the *Enter* key. You will include this line of code in every single script
    that you write, so get used to it! This `import` statement is what gives you access
    to all the functionality provided by ArcPy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Technically, you don't have to include the `import arcpy` statement when working
    inside the ArcMap Python window. It's inherent to this window. However, it is
    required when creating standalone scripts in IDLE, PythonWin, or any other integrated
    development environment. It's also a good habit to get into as many of your scripts
    will ultimately be run as standalone scripts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/4445_02_2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: ArcPy also provides code-completion functionality that makes your life as a
    programmer much easier. On the second line, begin by typing `arcpy` and then a
    dot. ArcPy is an object-oriented package, which means that you access the properties
    and methods of an object using the dot notation. Notice that a drop-down list
    of available items is provided. These are the tools, functions, classes, and extensions
    that are available on this particular object. All objects have their own associated
    items, so the list of items presented will differ depending on the object that
    you have currently selected:![How to do it…](img/4445_02_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is an auto-filtering list, so as you begin typing the name of the tool,
    function, class, or extension, the list will be filtered by what you have typed:![How
    to do it…](img/4445_02_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose to have the Python window auto-complete the text for you by selecting
    an item from the list using your mouse or by using the arrow keys to highlight
    your choice, and then using the *Tab* key to enter the command. This auto-completion
    feature makes you a faster, more efficient programmer. Not only is it easy to
    use, but it also dramatically cuts down the number of typos in your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the ArcPy module has been imported, you get access to the geoprocessing
    tools, extensions, functions, and classes for working with ESRI GIS data. One
    of the most important aspects of ArcPy is that it provides access to all of the
    geoprocessing tools available, based on the license level of ArcGIS Desktop currently
    in use. The tools available to your script will vary depending upon whether you
    are using the ArcGIS Basic, Standard, or Advanced license level, with the Basic
    level providing the fewest tools and the Advanced level providing a complete set
    of tools.
  prefs: []
  type: TYPE_NORMAL
- en: Executing tools from a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an ArcGIS user, you have almost certainly used the many available tools in
    ArcToolbox to accomplish your geoprocessing tasks. Some examples include Clip,
    Buffer, Feature Class to Feature Class, Add Field, and many more. Your scripts
    can execute any of the tools found in ArcToolbox. Remember that the tools available
    to you as a programmer are dependent upon the license level of ArcGIS Destkop
    that you are using. These tasks can be automated through the creation of a Python
    script that executes these tools programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to execute a geoprocessing tool from your script.
    Open c`:\ArcpyBook\Ch2\TravisCounty.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the workspace. We haven''t discussed the `env` class yet. Environment settings
    for ArcGIS are exposed as properties of this `env` class, which is a part of `arcpy`.
    One of the properties of the `env` class is workspace, which defines the current
    working directory for data input and output. In this case, it will be the directory
    where we''ll write the output dataset from our tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We're going to use the **Buffer** tool from the **Analysis Tools** toolbox to
    buffer the **Streams** layer seen in the active data frame in ArcMap. Open ArcToolbox
    and find this tool, as shown in the following screenshot:![How to do it…](img/4445_02_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Buffer** tool to display the interface shown in the following
    screenshot. Most tools have one or more input parameters that must be supplied
    for the tool to execute. Whether you're running the tool from the user interface
    or from a Python script, you must always supply these required parameters:![How
    to do it…](img/4445_02_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Buffer** tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the **Buffer** tool in the Python window. Use the code-completion feature
    of the Python window to help you as well as the tool help displayed in the window
    on the right.![How to do it…](img/4445_02_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will buffer the **Streams** layer by 50 meters to create a new `Streams_Buff`
    polygon layer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use your ArcMap **zoom** and **pan** tools to get a better look at the output
    dataset, as shown in the following screenshot:![How to do it…](img/4445_02_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All geoprocessing tools available to your script are defined as dynamic functions
    from the main `arcpy` object. Each tool that you execute from a script must follow
    a specific syntax that first defines the tool name, followed by an underscore,
    and then the alias for the toolbox name. In our example, the **Buffer** tool is
    located in the **Analysis Tools** toolbox, which has an alias of `analysis`. This
    is done because it is possible for more than one tool to have the same name. A
    unique reference for each tool is generated using the syntax `<toolname>_<toolbox_alias>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the toolbox alias is easy in ArcGIS Desktop. Find the toolbox associated
    with the tool and right-click on the toolbox name. Select **Properties**. In the
    **Properties** dialog box that is displayed, find the **Alias** textbox. You will
    see the following alias when referring to a particular tool in your geoprocessing
    scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/4445_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to the dynamic functions that represent geoprocessing tools, there
    are many additional functions available on the `arcpy` class that are not geoprocessing
    tools. Functions for creating cursors, listing datasets, describing datasets,
    working with environment settings, messaging, and many others are provided. We'll
    cover many of these functions as we move through the book.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Geoprocessing workflows often require multiple steps that require the use of
    one or more geoprocessing tools. You can more efficiently and effectively develop
    scripts by first creating an outline for your script. This outline will help you
    consider the task at hand and identify the geoprocessing tools that will be used.
    Outlines don't have to be complex undertakings. You can simply draw a diagram
    of the workflow and then implement your code based on this workflow. The point
    is to do some planning ahead of time before you actually start coding.
  prefs: []
  type: TYPE_NORMAL
- en: Using ArcGIS Desktop help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS Desktop help system is an excellent resource for obtaining information
    about any available tool. Each tool is described in detail on a unique page. The
    help system is available through ArcGIS Desktop or online.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to containing basic descriptive information about each tool, the
    help system also includes information of interest to Python programmers, including
    syntax and code examples that provide detailed information about how the tool
    can be used in your scripts. In this recipe, you will learn how to access the
    ArcGIS Desktop help system to obtain syntax information and code examples.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to learn how to use the ArcGIS Desktop help system to access
    syntax information about a tool as well as a code example showing how the tool
    is used in a script.
  prefs: []
  type: TYPE_NORMAL
- en: If necessary, open ArcMap and select **Help** | **ArcGIS Desktop Help** from
    the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Contents** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Geoprocessing** | **Tool reference**. The tools are grouped according
    to toolbox just as they are in ArcToolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Analysis toolbox** and then **Proximity toolset**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Buffer** tool. You should see the **Buffer** tool help displayed,
    as shown in the following screenshot:![How to do it...](img/4445_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **Syntax** section, as shown in the following screenshot:![How
    to do it...](img/4445_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This section defines the syntax for how the tool should be called from your
    script. In this case, the syntax is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Scroll down to the **Code Sample** section. Here, you will find one or more
    code samples showing you how the tool can be used in your scripts. I always recommend
    taking a look at these samples before writing your scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The help system for each tool contains several sections including a summary,
    illustration, usage, syntax, code sample, environments, related topics, and licensing
    information. As a programmer, you will primarily be interested in the syntax and
    code sample sections.
  prefs: []
  type: TYPE_NORMAL
- en: When looking at the syntax section, notice that you call each tool using a combination
    of the name followed by an underscore and finally the alias for the toolbox where
    the tool resides. We discussed this briefly in a recipe earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tools typically accept one or more parameters, which are passed into the tool
    inside parentheses. Parameters can be either required or optional. In this case,
    the **Buffer** tool includes three required parameters: the input feature, an
    output feature class, and a distance. Required parameters are listed first and
    are not enclosed by any special characters. Optional parameters, on the other
    hand, are enclosed by curly braces and will follow any required parameters. The
    **Buffer** tool contains several optional parameters including the line side,
    line end type, dissolve option, and dissolve field. Notice that each of these
    parameters is enclosed by curly braces. You do not have to include these parameters
    when calling a tool for it to execute.'
  prefs: []
  type: TYPE_NORMAL
- en: You should also examine the syntax information in greater detail to determine
    the data-type that should be passed in for each parameter. For example, the `buffer_distance_or_field`
    parameter can accept a data-type that is either a linear unit or a field. Therefore,
    you can supply a numeric value for this parameter or a `Field` object that represents
    an attribute field containing distance information.
  prefs: []
  type: TYPE_NORMAL
- en: Always review the syntax for each tool before using it in your code to make
    sure that you have the right parameters in the right order and of the right data
    type.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend taking a look at the code samples as well since they will frequently
    give you a starting point for your script. Often you will find that you can copy
    and paste at least a portion of the sample into your own script and then alter
    the script to suit your needs. This can make you a more efficient programmer and
    for learning purposes it is helpful to take a look at other scripts and examine
    the script line-by-line to determine how the script works.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables to store data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Fundamentals of the Python Language for
    ArcGIS"), *Fundamentals of the Python Language for ArcGIS*, we covered the topic
    of variables, so you should have a basic understanding of these structures. Variables
    are given a name and assigned a data value in your scripts. These named variables
    occupy space in your computer's memory and the data contained within these structures
    can change while a script is running. After the script has finished the memory
    space occupied by these variables is then released and can be used for other operations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing geoprocessing scripts with Python there will be many times when
    you will need to create variables to hold data of one type or another. This data
    can then be used in your script as input parameters for tools and functions, as
    intermediate data for internal processing, to hold paths to datasets, and for
    other reasons. In addition, many of the ArcPy functions and tools also return
    data that can be stored in a variable for further use in your script. In this
    recipe, you will learn the basic techniques for creating variables and assigning
    data to them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a script that contains variables that are hardcoded
    with values and that are returned from a function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IDLE and create a new script window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script to `c:\ArcpyBook\Ch2\WorkingWithVariables.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable called `path` and assign a value to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the newly-created variable to set the workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `ListFields()` function and assign the returned value to a new variable
    called `fields`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start a `for` loop to process each of the field objects contained within the
    `fields` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the name of each field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire script should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created three variables in this script. The first variable, `path`, was created
    and assigned a hard-coded value with a data path. This is an example of a literal
    variable, meaning that they literally mean exactly what they say. They are distinguished
    from variables, whose values are not directly determined by their name. The second
    variable, `fields`, is created from the returned value of the `ListFields()` function
    and is a Python `list` object containing one or more `Field` objects. Each `Field`
    represents a field from the attribute table of a feature class or a standalone
    table. The final variable is a dynamic variable called `fld`. As the `for` loop
    cycles through the list returned by the `ListFields()` function, each `Field`
    is assigned to the `fld` variable. The name of each field is then printed to the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing ArcPy modules with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we have covered some basic concepts related to ArcPy. In addition
    to the basic ArcPy site package, there are a number of modules that you can use
    to access specific functionality. These modules must be specifically imported
    into your scripts before you can use the functionality provided. In this recipe,
    you will learn how to import these modules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to providing access to tools, functions, and classes, ArcPy also
    provides several modules. **Modules** are purpose-specific Python libraries containing
    functions and classes. The modules include a Mapping module (`arcpy.mapping`),
    a Data Access module (`arcpy.da`), a Spatial Analyst module (`arcpy.sa`), a Geostatistical
    module (`arcpy.ga`), a Network Analyst module (`arcpy.na`), and a Time module
    (`arcpy.time`). To use the functions and classes included with each of these modules
    you must specifically import their associated libraries.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use the functions and classes provided by
    the `arcpy.mapping` module:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `c:\ArcpyBook\Ch2\Crime_Ch2.mxd` with ArcMap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Python window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `arcpy.mapping` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a reference to the current map document (`Crime_Ch2.mxd`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `arcpy.mapping.ListLayers` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a list of all layers in the map document and print these to
    the shell window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access to all the functions and objects available in the Mapping module is done
    in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the modules provided by ArcPy gives access to functionality that fills
    a specific purpose. For example, the ArcPy Mapping module provides access to functions
    that allow you to manage map documents and layer files. The functions and objects
    in this module all relate in some way to managing these files.
  prefs: []
  type: TYPE_NORMAL
