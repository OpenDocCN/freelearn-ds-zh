- en: Chapter 1. Getting Started with QGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter provides an overview of the QGIS system and how you can work with
    it using the Python programming language. In particular, this chapter will cover
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading, installing, and running QGIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becoming familiar with the QGIS application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python within QGIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Python Console as a window into the QGIS environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working of a QGIS Python plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the QGIS Python API from an external Python program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About QGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QGIS is a popular, free, and open source **Geographic Information System** (**GIS**),
    which runs on all major operating systems. People often use QGIS to view, edit,
    and analyze geospatial data. For our purposes, however, QGIS is more than just
    a GIS system; it is also a geospatial programming environment, which we can use
    to build our own geospatial applications using Python.
  prefs: []
  type: TYPE_NORMAL
- en: QGIS has a comprehensive website ([http://qgis.org](http://qgis.org)), which
    makes it easy to download, install, and use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before reading further, you should spend 15 minutes looking through the website
    and getting familiar with the application and the documentation available online.
    In particular, you should check out the **Documentation** page, where three important
    manuals are available: *QGIS User guide/Manual*, *QGIS Training manual*, and *PyQGIS
    cookbook*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*QGIS User guide/Manual* provides in-depth user documentation, which you might
    find useful. *QGIS Training manual* is a detailed introduction to GIS systems
    and concepts based on QGIS; you might find it useful to work through this course
    if you aren''t already familiar with geospatial data and techniques. Finally,
    *PyQGIS cookbook* will be an essential reference to use as you develop your own
    mapping applications built on top of QGIS.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and running QGIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you haven''t already installed QGIS, click on the **Download Now** button
    on the main QGIS web page to download the QGIS software. What you do next depends
    on which operating system you are running on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: For MS Windows, you can download a double-clickable installer that installs
    QGIS and all the required libraries in one go. Make sure you use the OSGeo4W installer,
    which includes the Python interpreter, QGIS itself, and all the required libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Mac OS X, you'll need to visit the Kyngchaos website ([http://www.kyngchaos.com/software/qgis](http://www.kyngchaos.com/software/qgis))
    to download and install the GDAL and matplotlib libraries before installing a
    version of QGIS specially built for your operating system. All the required packages
    are available from the Kyngchaos site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Unix-like systems, you'll use a package manager to download, compile, and
    install QGIS and the required libraries from an appropriate package repository.
    More information about installing on a Unix-like system can be found at [http://qgis.org/en/site/forusers/alldownloads.html#linux](http://qgis.org/en/site/forusers/alldownloads.html#linux).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have installed the QGIS system, you can run it just like any other
    application on your computer, for example, by double-clicking on the QGIS icon
    in your `Applications` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything goes well, the QGIS application will start up and you will be
    greeted with the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and running QGIS](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The exact appearance of the window might vary depending on your operating system.
    Don't worry, as long as a window appears, which looks something like the one shown
    in the previous screenshot, you are running QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to worry too much about the QGIS user interface right now; the
    QGIS User Guide describes the interface and various options in great detail. Rather
    than duplicating this information, let's take a look under the hood to see how
    QGIS works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding QGIS concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand QGIS, you will have to become familiar with the following basic
    terms and concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: QGIS works with geospatial information loaded from a variety of **data sources**.
    These data sources can include vector and raster data files on a disk, a variety
    of spatial databases, and even web services such as **Web Map Service** (**WMS**)
    servers that provide geospatial data from the Internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wherever the data comes from, it is retrieved by QGIS and displayed as a **map
    layer**. Map layers can be shown or hidden, and also customized in various ways
    to affect the way the data is displayed on the map.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The map layers are then combined and displayed on a **map**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the various map layers, the map, and the other settings, all make up
    a project. QGIS always has one and only one project that it is working with. The
    project consists of all the map layers, the map display options, and the various
    settings that are currently loaded into QGIS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These concepts are related in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding QGIS concepts](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the data sources are outside QGIS. While the map layer refers to a
    data source, the data itself is stored somewhere else, for example, in a file
    on a disk or within a database.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you are working with QGIS, you are always working within the current
    project. You can save projects and reload them later, or start a new project to
    reset QGIS back to its original state.
  prefs: []
  type: TYPE_NORMAL
- en: Linking QGIS and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While QGIS itself is written in C++, it includes extensive support for Python
    programming. A Python interpreter is built in, and can be used interactively via
    the Python Console, or to run plugins written in Python. There is also a comprehensive
    API for querying and controlling the QGIS application using Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways in which you can use Python to work with the QGIS system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python Console**: You can open this console, which runs the interactive Python
    interpreter built into QGIS, allowing you to type in commands and see the results
    immediately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python plugin**: These are Python packages designed to be run within the
    QGIS environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E**xternal applications**: You can use the QGIS Python API in your own applications.
    This lets you use QGIS as a geospatial processing engine, or even build your own
    interactive applications based on QGIS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No matter how you use Python and QGIS, you will make extensive use of the QGIS
    Python libraries, which are often referred to as **PyQGIS**. They provide a complete
    programmatic interface to the QGIS system, including calls to load data sources
    into layers, manipulate the map, export map visualizations, and build custom applications
    using the QGIS user interface. While an in-depth examination of the PyQGIS library
    will have to wait until [Chapter 3](part0021_split_000.html#page "Chapter 3. Learning
    the QGIS Python API"), *Learning the QGIS Python API*, we will start dabbling
    with it right away in the next section on the Python Console.
  prefs: []
  type: TYPE_NORMAL
- en: For the remainder of this chapter, we will examine each of the three ways in
    which you can work with QGIS and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Python Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The QGIS Python Console window can be accessed by using the **Python Console**
    item in the **Plugins** menu. When you select this command, the Python Console
    will appear in the lower-right corner of the QGIS window. Here''s what the Python
    Console looks like when you first open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the Python Console](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: While the Python Console is an excellent tool for interacting with an existing
    QGIS project, we are going to use it to create a new project from scratch. Before
    we can do this, though, we'll need to download some geospatial data sources for
    our QGIS project.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to need a suitable **base map** for our project, as well as some
    river and city information to display on top of this base map. Let's use the Natural
    Earth website to obtain the information we need. Go to [http://naturalearthdata.com](http://naturalearthdata.com)
    and click on the **Downloads** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we'll want to download a nice-looking base map for our project. To
    do this, select the **Raster** link under the **Medium scale data, 1:50m** section,
    choose the **Natural Earth 1** dataset, and click on the **Download small size**
    link under the *Natural Earth I with Shaded Relief and Water* heading.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need an overlay, which will show lakes and rivers on top of our base
    map. To get this information, go back to the **Downloads** tab and select the
    **Physical** link under the **Medium scale data, 1:50m** section. The dataset
    you want is called *Rivers, Lake Centerlines*, so click on the **Download rivers
    and lake centerlines** link to obtain this file.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll want to highlight the cities on top of our base map. Go back
    to the **Downloads** page and select the **Cultural** link under the **Medium
    scale data, 1:50m** heading. At the bottom is a section labelled **Urban Areas**.
    Click on the **Download urban areas** link to download this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done all this, you should have the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: A raster base map in a file named `NE1_50M_SR_W.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lake and river vector data in a file named `ne_50m_rivers_lake_centerlines.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Urban area vector data in a file named `ne_50m_urban_areas.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since these are ZIP archives, you will need to unzip these files and store them
    somewhere at a convenient location on your hard disk.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need to type in the full path to these datasets, so you might want to
    put them somewhere convenient, for example, in your home or user directory. In
    this way, the path you type won't be too long.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our data, let''s use the QGIS Python Console to import this
    data into a project. If you''ve already loaded some data into QGIS (for example,
    by following the tutorial in the QGIS User Guide), choose the **New** option from
    the **Project** menu to start again with a blank project. Then, type the following
    into the QGIS Python Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you replace `/path/to/` with the full path to the `NE1_50M_SR_W`
    directory you downloaded. Assuming you typed the path correctly, the Natural Earth
    1 base map should appear in the QGIS window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the Python Console](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, our base map is a bit small right now. You can use the various
    panning and zooming commands in the toolbar at the top of the window to make it
    bigger, but let''s use Python to do the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will expand the base map to fill the entire window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a base map, let''s add our two vector layers to the project.
    To do this, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, make sure you replace `/path/to/` with the full path to the `ne_50m_urban_areas`
    directory you downloaded earlier. The urban areas shapefile will be loaded into
    the QGIS project and will appear as a series of colored areas on top of the base
    map. Let''s zoom in to an area of California so that we can see what this looks
    like more clearly. To do this, type the following commands into the Python Console
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will zoom in on the map in so that an area of California, including Los
    Angeles and the southern part of San Francisco, is now shown on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the Python Console](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s add our river and lake data to our project. To do this, enter
    the following into the Python Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the map, you''ll see that the rivers and lakes are now visible.
    However, they are drawn in a default green color. Let''s change this so that the
    water is now blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code might be a bit confusing, but don't worry—we'll learn about renderers
    and symbols in [Chapter 3](part0021_split_000.html#page "Chapter 3. Learning the
    QGIS Python API"), *Learning the QGIS Python API*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are finished, you can save your project using the **Save As...**
    item in the **Project** menu. As you can see, it's quite possible to set up and
    customize your QGIS project using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Examining a Python plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the Python Console is a fantastic tool for interactive coding, it isn't
    all that useful if you want to use Python to extend the functionality of QGIS.
    This is where QGIS plugins come in; you can create (or download) a plugin that
    adds new features or changes the way QGIS works.
  prefs: []
  type: TYPE_NORMAL
- en: Because QGIS is written using the Qt framework, QGIS plugins make use of the
    Python bindings in Qt, which are called **PyQt**. We will download and install
    PyQt and the related tools when we start to build our own plugins in [Chapter
    4](part0026_split_000.html#page "Chapter 4. Creating QGIS Plugins"), *Creating
    QGIS Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: To get an idea of how a Python plugin works, let's take a look at the **Zoom
    to Point** plugin. As the name suggests, this plugin lets you zoom to display
    a given coordinate on the map. It's also written in Python, and is a convenient
    example for learning about plugins in general.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can use it, we have to install this plugin. Choose the **Manage and
    Install Plugins...** item from the **Plugins** menu, and click on the **Not Installed**
    tab. You should see **Zoom to Point** listed near the bottom of the list of available
    plugins; click on this plugin, and then click on the **Install Plugin** button
    to download and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run this plugin to see how it works; with the project you created earlier
    still loaded, click on the **Zoom to Point** plugin''s icon in the toolbar, which
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining a Python plugin](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Try entering the longitude/latitude of your current location (if you don't know
    it, you might find [http://itouchmap.com/latlong.html](http://itouchmap.com/latlong.html)
    helpful). You should see the base map, urban areas, and waterways for your current
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget that x equals longitude and y equals latitude. It's easy to get
    them the wrong way around.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what the plugin does, let's see how it works. The downloaded
    plugins are stored in a hidden directory named `.qgis2` in your user or home directory.
    Go to this hidden directory using your favorite file manager (for Mac OS X, you
    can use the **Go to Folder...** item in the Finder's **Go** menu), and find the
    `python/plugins` subdirectory. This is where the Python plugins are stored.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your operating system and the version of QGIS you are using, the
    name of this hidden directory might be different. If you can't find it, look for
    a directory named `.qgis` or `.qgis2` or something similar.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a directory named `zoomtopoint` (the full path to this directory
    will be `~/.qgis2/python/plugins/zoomtopoint`). Inside this directory, you will
    find the various files that make up the Zoom to Point plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining a Python plugin](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what these various files do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Filename | Used for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `__init__.py` | This is a standard Python package initialization file. This
    file also initializes the plugin and makes it available to the QGIS system. |'
  prefs: []
  type: TYPE_TB
- en: '| `COPYING` | This is a copy of the GNU **General Public License** (**GPL**).
    Since the Zoom to Point plugin is generally available, this defines the license
    under which it can be used. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon.png` | As the name suggests, this is the plugin''s toolbar icon. |'
  prefs: []
  type: TYPE_TB
- en: '| `Makefile` | This is a standard *nix Makefile used to automate the process
    of compiling and deploying the plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| `metadata.txt` | This file contains the plugin''s metadata, including the
    full name of the plugin, a description, the current version number, and so on.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `resources.qrc` | This is a Qt resource file that defines the various resources
    such as images and sound files used by the plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| `resources.py` | This indicates the contents of the `resources.qrc` file,
    compiled into a Python module. |'
  prefs: []
  type: TYPE_TB
- en: '| `ui_zoomtopoint.ui` | This is a Qt user interface template that defines the
    main UI for the plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| `ui_zoomtopoint.py` | This indicates the contents of the `ui_zoomtopoint.ui`
    file compiled into a Python module. |'
  prefs: []
  type: TYPE_TB
- en: '| `zoomtopoint.py` | This file contains the main Python code for the plugin.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `zoomtopointdialog.ui` | This is a copy of the `ui_zoomtopoint.ui` file.
    It looks like this file was included by accident, as the plugin can run without
    it. |'
  prefs: []
  type: TYPE_TB
- en: '| `zoomtopointdialog.py` | This Python module defines a `QtGui.QDialog` subclass
    that loads the dialog box''s contents from `ui_zoomtopoint.py`. |'
  prefs: []
  type: TYPE_TB
- en: 'Open the `zoomtopoint.py` module in your favorite text editor. As you can see,
    this contains the main Python code for the plugin, in the form of a `ZoomToPoint`
    class. This class has the following basic structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the `__init__.py` module, you''ll see how this class is used to
    define the plugin''s behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the plugin is loaded, a parameter named `iface` is passed to the `ClassFactory`
    function. This parameter is an instance of `QgsInterface`, and provides access
    to the various parts of the running QGIS application. As you can see, the class
    factory creates a `ZoomToPoint` object, and passes the `iface` parameter to the
    initializer so that `ZoomToPoint` can make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how `ZoomToPoint.__init__()`, in the `Zoomtopoint.py` module, stores
    a reference to the `iface` parameter in an instance variable, so that the other
    methods can refer to the QGIS interface using `self.iface`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This allows the plugin to interact with and manipulate the QGIS user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four methods defined by the `ZoomToPoint` class are all quite straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__init__()`: This method initializes a new `ZoomToPoint` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initGui()`: This method initializes the plugin''s user interface, preparing
    it to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unload()`: This method removes the plugin from the QGIS user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run()`: This method is called when the plugin is activated, that is, when
    the user clicks on the plugin''s icon in the toolbar, or selects the plugin from
    the Plugins menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t worry too much about all the details here; we''ll look at the process
    of initializing and unloading a plugin in a later chapter. For now, take a closer
    look at the `run()` method. This method essentially looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve excluded the code that remembers the values the user entered previously,
    and copies those values back into the dialog when the plugin is run. Looking at
    the previous code, the logic seems to be fairly straightforward and is explained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `ZoomToPointDialog` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the dialog box to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user clicks on the **OK** button, extract the entered values, use them
    to create a new bounding rectangle, and set the extent of the map to this rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While this plugin is quite straightforward and the actual code doesn''t do
    all that much, it is a useful example of what a Python plugin should look like,
    as well as the various files that are needed by a Python plugin. In particular,
    you should note that:'
  prefs: []
  type: TYPE_NORMAL
- en: A plugin is simply a directory that contains a Python package initialization
    file (`__init__.py`), some Python modules, and other files created using Qt Designer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `__init__.py` module must define a top-level function named `ClassFactory`
    that accepts an `iface` parameter and returns an object that represents the plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugin object must define an `initGui()` method, which is called to initialize
    the plugin's user interface, and an `unload()` method, which is called to remove
    the plugin from the QGIS application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugin can interact with and manipulate the QGIS application via the `iface`
    object passed to the class factory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resources.qrc` file lists various resources such as images, which are used
    by the plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resources.qrc` file is compiled into a `resources.py` file using the PyQt
    command-line tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialog boxes and other windows are created using a Qt Designer template, which
    are typically stored in a file with a name of the form `ui_Foo.ui`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UI template files are then compiled into Python code using the PyQt command-line
    tools. If the template is named `ui_foo.ui`, then the associated Python module
    will be named `ui_foo.py`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the user interface for a dialog box has been defined, you create a subclass
    of `QtGui.QDialog`, and load that user interface module into it. This defines
    the contents of the dialog box based on your template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your plugin can then display the dialog box as required, extracting the entered
    values and using the results to interact with QGIS via the `iface` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins are a useful way of extending and customizing QGIS. We will return to
    the topic of QGIS plugins in [Chapter 4](part0026_split_000.html#page "Chapter 4. Creating
    QGIS Plugins"), *Creating QGIS Plugins*, where we will create our own plugin from
    scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Writing an external application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final way to work with Python and QGIS is to write a completely standalone
    Python program that imports the QGIS libraries and works with them directly. In
    many ways, this is an ideal way of writing your own custom mapping applications,
    because your program doesn''t have to run within the existing QGIS user interface.
    There are, however, a few things you need to be aware of when you attempt to use
    Python and QGIS in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: Your Python program needs to be able to find the QGIS Python libraries before
    it can be run. Since these are bundled into the QGIS application itself, you will
    need to add the directory where the PyQGIS libraries are installed in your Python
    path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also need to tell the PyQGIS libraries where the QGIS application's resources
    are stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the application is running outside the QGIS application, you won't have access
    to the `iface` variable. You also can't use those parts of the PyQGIS library
    that assume you are running inside QGIS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of this is too onerous, though it can trip you up the first time you attempt
    to access PyQGIS from your external Python code. Let's take a look at how we can
    avoid these traps when writing your own Python programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, to allow your program to access the PyQGIS libraries, you need to
    modify your Python path (and possibly some other environment variables) before
    you can import any of the QGIS packages. For MS Windows, you can do this by running
    the following in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running Mac OS X, the following commands will set up the Python
    path for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For computers that run a version of Linux, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Obviously, you will need to replace `/path/to/qgis` with the actual path of
    your QGIS installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have QGIS installed in a nonstandard location, you might need to modify
    these commands before they will work. To check if they have worked, start up the
    Python interpreter and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you''ll simply see the Python prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, you might see the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `PYTHONPATH` variable has not been set up correctly, and you
    will have to check the commands you entered earlier to set this environment variable,
    and possibly modify it to allow for a nonstandard location of the QGIS libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that in some cases, this isn''t enough because the Python libraries are
    only wrappers around the underlying C++ libraries; you might also need to tell
    your computer where to find these C++ libraries. To see if this is a problem,
    you can try to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You might get an error that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You will to have to tell your computer where to find the underlying shared libraries.
    We will return to this later when we look at writing our own external applications;
    if you want to see the details, skip ahead to [Chapter 5](part0033_split_000.html#page
    "Chapter 5. Using QGIS in an External Application"), *Using QGIS in an External
    Application*.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the path set, you can now import the various parts of the PyQGIS library
    that you want to use, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to the PyQGIS libraries, our next task is to initialize
    these libraries. As mentioned earlier, we have to tell PyQGIS where to find the
    various QGIS resources. We do this using the `QgsApplication.setPrefixPath()`
    function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This uses the `QGIS_PREFIX` environment variable we set earlier to tell QGIS
    where to find its resources. With this done, you can then initialize the PyQGIS
    library by making the following call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use PyQGIS to do whatever we want in our application. When our program
    exits, we also need to inform the PyQGIS library that we are exiting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting all this together, our minimal Python application looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Of course, this application doesn't do anything useful yet—it simply starts
    up and shuts down the PyQGIS libraries. So let's replace the "`...`" line with
    some useful code that displays a basic map widget. To do this, we need to define
    a `QMainWindow` subclass, which displays the map widget, and then create and use
    a `QApplication` object to display this window and handle the various user-interface
    events while the application is running.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both `QMainWindow` and `QApplication` are PyQt classes. We will be working extensively
    with the various PyQt classes as we develop our own external applications using
    QGIS and Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by replacing the "`...`" line with the following code, which displays
    a map viewer and then runs the application''s main event loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, a `MapViewer` instance (which we will define shortly) is created
    and displayed, and the `QApplication` object is run by calling the `exec_()` method.
    For simplicity, we pass the name of a shapefile to display within the map viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Running this code will cause the map viewer to be displayed, and the application
    will run until the user closes the window or chooses the **Quit** command from
    the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s define the `MapViewer` class. Here is what the class definition
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry too much about the details of this class; we basically just create
    a window and place a `QgsMapCanvas` object within it. We then create a map layer
    (an instance of `QgsVectorLayer`) and add it to the map canvas. Finally, we add
    the canvas to the window's contents.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that `QgsMapCanvas` and `QgsVectorLayer` are both part of PyQGIS, while
    `QMainWindow`, `QVBoxLayout`, and `QWidget` are all PyQt classes. This application
    uses the PyQGIS classes within a PyQt application, mixing the classes from both
    sources. This is possible because QGIS is built using Qt, and the various PyQGIS
    classes are based on PyQt.
  prefs: []
  type: TYPE_NORMAL
- en: 'To turn the preceding code into a working application, all we need to do is
    add some more `import` statements to the top of the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run this application, the map viewer will be displayed, showing the
    contents of the shapefile referred to by the code. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing an external application](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This application is still a bit ugly—you can see white space at the top and
    bottom this map because it doesn't take into account the aspect ratio of the map
    data. There's also no feature of zooming in or scrolling around the map. However,
    these can be added quite easily, and as you can see, it's not very difficult to
    create your own standalone mapping applications built on top of QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we became familiar with QGIS and the various ways in which
    it can be used as a Python geospatial development system. We installed and explored
    the QGIS application itself, and then looked at how Python can be used with QGIS.
    We saw how QGIS uses data sources, map layers, maps, and projects to organize
    and work with geospatial data. Next, we examined the three ways in which you can
    use Python and QGIS: by typing commands into the Python Console, by writing a
    Python plugin or by writing an external application that makes use of the QGIS
    Python API.'
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at the extensive set of Python libraries that come with QGIS,
    called PyQGIS, which you can use for geospatial development. We saw how to use
    the QGIS Python Console to directly manipulate the QGIS project, add layers, zoom
    in and out, change options, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we downloaded and examined a QGIS Python plugin. In doing this, we
    learned that QGIS plugins are simply Python packages installed in a hidden directory
    named `.qgis2` (or `.qgis`) within your home or user directory. A plugin makes
    use of the Qt library to define and build resources such as user interface templates.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we saw how we can write external Python applications that load the
    PyQGIS libraries from within the QGIS system, and then use those libraries within
    a larger PyQt application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the QGIS Python Console in more detail,
    and use it to become more familiar with the PyQGIS library, and also see how we
    can use it within our own Python geospatial development projects.
  prefs: []
  type: TYPE_NORMAL
