- en: Chapter 15. Boosting Productivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned to use R to extract information from web
    pages. To understand how this works, we learned several languages such as HTML,
    CSS, and XPath. In fact, R has much more to offer than just a statistical computing
    environment. The R community provides tools for everything from data collection,
    to data manipulation, statistical modeling, visualization, and all the way to
    reporting and presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about a number of packages that boost our productivity.
    We''ll review several languages we learned throughout this book and get to know
    another one: markdown. We''ll see how R and markdown can be combined to produce
    powerful dynamic documents. More specifically, we''ll:'
  prefs: []
  type: TYPE_NORMAL
- en: Get to know markdown and R Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embed tables, charts, diagrams and interactive plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create interactive apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing R Markdown documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The work of data analysts is more than putting data into models and drawing
    some conclusions. We usually need to go through a complete workflow from data
    collecting, to data cleaning, visualization, modeling, and finally writing a report
    or making a presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, we improved our productivity by learning the R programming
    language from different aspects. In this chapter, we will further boost our productivity
    by focusing on the final step: reporting and presentation. In the following sections,
    we''ll learn a very simple language to write documents: markdown.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know markdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, we have already learned a bunch of languages. These languages
    are very different and may confuse beginners. But if you keep in mind their purposes,
    it won't be hard to use them together. Before learning markdown, we'll take a
    quick review of the languages we learned in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is, of course, the R programming language. A programming language
    is designed for solving problems. R is specially designed and tailored for statistical
    computing and is empowered by the community to be capable of doing many other
    things; the example is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In [Chapter 12](ch12.html "Chapter 12. Data Manipulation"), *Data Manipulation*,
    we learned SQL to query relational databases. It is designed to be a programming
    language but is used to express relational database operations such as inserting
    or updating records and querying data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The R programming language is executed by the R interpreter and SQL is executed
    by a database engine. However, we also learned languages that are not designed
    for execution but to represent data. Perhaps the most commonly used data representation
    languages in programming world are JSON and XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The specification of JSON defines elements such as value `(1, "text")`, array
    (`[]`), and object (`{}`), and so on, while XML does not provide type support
    but allows the usage of attributes and nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous chapter on web scraping, we learned the basics of HTML which
    is quite similar to XML. Most web pages are written in HTML due to its flexible
    representation of contents and layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we'll learn markdown, a lightweight markup language with a
    syntax designed for plain text formatting and which can be converted to many other
    document formats. After getting familiar with markdown, we'll go further with
    R Markdown, which is designed for dynamic documents and is actively supported
    by RStudio and the rest of the R community. The format is so simple that we can
    use any plain text editor to write markdown documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is extremely simple: Some characters are devoted to representing
    different formats. In a plain text editor, we cannot preview the formats as it
    indicates. But when converted to a HTML document, the texts will be formatted
    according to the syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the preview of a markdown document in Abricotine
    ([http://abricotine.brrd.fr/](http://abricotine.brrd.fr/)), an open-source markdown
    editor with live preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting to know markdown](img/image_15_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are also online markdown editors with fantastic features. One of my favorites
    is StackEdit ([https://stackedit.io/](https://stackedit.io/)). You can create
    a new blank document and copy the above markdown texts into the editor, and then
    the you can see the instant preview as an HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting to know markdown](img/image_15_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Markdown is widely used in online discussion. The largest open-source repository
    host, GitHub ([https://github.com](https://github.com)), supports markdown in
    writing issues as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting to know markdown](img/image_15_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that backticks (`` ` ``) are used to create source code symbols and three-backticks
    ([PRE6]X [PRE7]
  prefs: []
  type: TYPE_NORMAL
- en: '| Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |'
  prefs: []
  type: TYPE_TB
- en: '|------------:|-----------:|------------:|-----------:|:-------|'
  prefs: []
  type: TYPE_NORMAL
- en: '|          5.1|         3.5|          1.4|         0.2|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '|          4.9|         3.0|          1.4|         0.2|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '|          4.7|         3.2|          1.3|         0.2|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '|          4.6|         3.1|          1.5|         0.2|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '|          5.0|         3.6|          1.4|         0.2|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '|          5.4|         3.9|          1.7|         0.4|setosa  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: toys <- data.frame(
  prefs: []
  type: TYPE_NORMAL
- en: id = 1:3,
  prefs: []
  type: TYPE_NORMAL
- en: name = c("Car", "Plane", "Motocycle"),
  prefs: []
  type: TYPE_NORMAL
- en: price = c(15, 25, 14),
  prefs: []
  type: TYPE_NORMAL
- en: share = c(0.3, 0.1, 0.2),
  prefs: []
  type: TYPE_NORMAL
- en: stringsAsFactors = FALSE
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: toys
  prefs: []
  type: TYPE_NORMAL
- en: id      name price share
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1  1       Car    15   0.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2  2     Plane    25   0.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3  3 Motocycle    14   0.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| id|name      | price| share|'
  prefs: []
  type: TYPE_NORMAL
- en: '|--:|:---------|-----:|-----:|'
  prefs: []
  type: TYPE_NORMAL
- en: '|  1|Car       |    15|   0.3|'
  prefs: []
  type: TYPE_NORMAL
- en: '|  2|Plane     |    25|   0.1|'
  prefs: []
  type: TYPE_NORMAL
- en: '|  3|Motocycle |    14|   0.2|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: knitr::kable(toys)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: xtable::xtable(lm(mpg ~ cyl + vs, data = mtcars))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: library(formattable)
  prefs: []
  type: TYPE_NORMAL
- en: formattable(toys,
  prefs: []
  type: TYPE_NORMAL
- en: list(price = color_bar("lightpink"), share = percent))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: library(DT)
  prefs: []
  type: TYPE_NORMAL
- en: datatable(mtcars)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: set.seed(123)
  prefs: []
  type: TYPE_NORMAL
- en: x <- rnorm(1000)
  prefs: []
  type: TYPE_NORMAL
- en: y <- 2 * x + rnorm(1000)
  prefs: []
  type: TYPE_NORMAL
- en: m <- lm(y ~ x)
  prefs: []
  type: TYPE_NORMAL
- en: plot(x, y, main = "Linear regression", col = "darkgray")
  prefs: []
  type: TYPE_NORMAL
- en: abline(coef(m))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: library(DiagrammeR)
  prefs: []
  type: TYPE_NORMAL
- en: grViz("
  prefs: []
  type: TYPE_NORMAL
- en: digraph rmarkdown {
  prefs: []
  type: TYPE_NORMAL
- en: A -> B;
  prefs: []
  type: TYPE_NORMAL
- en: B -> C;
  prefs: []
  type: TYPE_NORMAL
- en: C -> A;
  prefs: []
  type: TYPE_NORMAL
- en: '}")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: library(ggvis)
  prefs: []
  type: TYPE_NORMAL
- en: mtcars %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggvis(~mpg, ~disp, opacity := 0.6) %>%
  prefs: []
  type: TYPE_NORMAL
- en: layer_points(size := input_slider(1, 100, value = 50, label = "size")) %>%
  prefs: []
  type: TYPE_NORMAL
- en: layer_smooths(span = input_slider(0.5, 1, value = 1, label = "span"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: library(dygraphs)
  prefs: []
  type: TYPE_NORMAL
- en: library(xts)
  prefs: []
  type: TYPE_NORMAL
- en: library(dplyr)
  prefs: []
  type: TYPE_NORMAL
- en: library(reshape2)
  prefs: []
  type: TYPE_NORMAL
- en: data(weather, package = "nycflights13")
  prefs: []
  type: TYPE_NORMAL
- en: temp <- weather %>%
  prefs: []
  type: TYPE_NORMAL
- en: group_by(origin, year, month, day) %>%
  prefs: []
  type: TYPE_NORMAL
- en: summarize(temp = mean(temp)) %>%
  prefs: []
  type: TYPE_NORMAL
- en: ungroup() %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(date = as.Date(sprintf("%d-%02d-%02d",
  prefs: []
  type: TYPE_NORMAL
- en: year, month, day))) %>%
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: select(origin, date, temp) %>%
  prefs: []
  type: TYPE_NORMAL
- en: dcast(date ~ origin, value.var = "temp")
  prefs: []
  type: TYPE_NORMAL
- en: temp_xts <- as.xts(temp[-1], order.by = temp[[1]])
  prefs: []
  type: TYPE_NORMAL
- en: head(temp_xts)
  prefs: []
  type: TYPE_NORMAL
- en: EWR     JFK      LGA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-01 38.4800 38.8713 39.23913
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-02 28.8350 28.5425 28.72250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-03 29.4575 29.7725 29.70500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-04 33.4775 34.0325 35.26250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-05 36.7325 36.8975 37.73750
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2013-01-06 37.9700 37.4525 39.70250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: dygraph(temp_xts, main = "Airport Temperature") %>%
  prefs: []
  type: TYPE_NORMAL
- en: dyRangeSelector() %>%
  prefs: []
  type: TYPE_NORMAL
- en: dyHighlight(highlightCircleSize = 3,
  prefs: []
  type: TYPE_NORMAL
- en: highlightSeriesBackgroundAlpha = 0.3,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hideOnMouseOut = FALSE)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: library(shiny)
  prefs: []
  type: TYPE_NORMAL
- en: ui <- bootstrapPage(
  prefs: []
  type: TYPE_NORMAL
- en: numericInput("n", label = "Sample size", value = 10, min = 10, max = 100),
  prefs: []
  type: TYPE_NORMAL
- en: textOutput("mean")
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: server <- function(input, output) {
  prefs: []
  type: TYPE_NORMAL
- en: output$mean <- renderText(mean(rnorm(input$n)))
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: app <- shinyApp(ui, server)
  prefs: []
  type: TYPE_NORMAL
- en: runApp(app)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: shiny_vars <- ls(getNamespace("shiny"))
  prefs: []
  type: TYPE_NORMAL
- en: shiny_vars[grep("Input$", shiny_vars)]
  prefs: []
  type: TYPE_NORMAL
- en: '[1] "checkboxGroupInput"       "checkboxInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[3] "dateInput"                "dateRangeInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[5] "fileInput"                "numericInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[7] "passwordInput"            "selectInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[9] "selectizeInput"           "sliderInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[11] "textInput"                "updateCheckboxGroupInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[13] "updateCheckboxInput"      "updateDateInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[15] "updateDateRangeInput"     "updateNumericInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[17] "updateSelectInput"        "updateSelectizeInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[19] "updateSliderInput"        "updateTextInput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: shiny_vars[grep("Output$", shiny_vars)]
  prefs: []
  type: TYPE_NORMAL
- en: '[1] "dataTableOutput"    "htmlOutput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[3] "imageOutput"        "plotOutput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[5] "tableOutput"        "textOutput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[7] "uiOutput"           "verbatimTextOutput"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: library(shiny)
  prefs: []
  type: TYPE_NORMAL
- en: ui <- fluidPage(
  prefs: []
  type: TYPE_NORMAL
- en: titlePanel("Random walk"),
  prefs: []
  type: TYPE_NORMAL
- en: sidebarLayout(
  prefs: []
  type: TYPE_NORMAL
- en: sidebarPanel(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: numericInput("seed", "Random seed", 123),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sliderInput("paths", "Paths", 1, 100, 1),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sliderInput("start", "Starting value", 1, 10, 1, 1),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sliderInput("r", "Expected return", -0.1, 0.1, 0, 0.001),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sliderInput("sigma", "Sigma", 0.001, 1, 0.01, 0.001),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sliderInput("periods", "Periods", 10, 1000, 200, 10)),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mainPanel(
  prefs: []
  type: TYPE_NORMAL
- en: plotOutput("plot", width = "100%", height = "600px")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ))
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: shiny_vars[grep("^render", shiny_vars)]
  prefs: []
  type: TYPE_NORMAL
- en: '[1] "renderDataTable" "renderImage"     "renderPage"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[4] "renderPlot"      "renderPrint"     "renderReactLog"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[7] "renderTable"     "renderText"      "renderUI"'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: server <- function(input, output) {
  prefs: []
  type: TYPE_NORMAL
- en: output$plot <- renderPlot({
  prefs: []
  type: TYPE_NORMAL
- en: set.seed(input$seed)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mat <- sapply(seq_len(input$paths), function(i) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sde::GBM(input$start,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: input$r, input$sigma, 1, input$periods)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: matplot(mat, type = "l", lty = 1,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: main = "Geometric Brownian motions")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: app <- shinyApp(ui, server)
  prefs: []
  type: TYPE_NORMAL
- en: runApp(app)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: install_packages(c("shinydashboard", "cranlogs"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: library(cranlogs)
  prefs: []
  type: TYPE_NORMAL
- en: cran_top_downloads()
  prefs: []
  type: TYPE_NORMAL
- en: 'No encoding supplied: defaulting to UTF-8\.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: rank  package count       from         to
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1     1     Rcpp  9682 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2     2   digest  8937 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3     3  ggplot2  8269 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 4     4     plyr  7816 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 5     5  stringi  7471 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 6     6  stringr  7242 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 7     7 jsonlite  7100 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 8     8 magrittr  6824 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 9     9   scales  6397 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 10   10     curl  6383 2016-08-18 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: cran_top_downloads("last-week")
  prefs: []
  type: TYPE_NORMAL
- en: 'No encoding supplied: defaulting to UTF-8\.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: rank  package count       from         to
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1     1     Rcpp 50505 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2     2   digest 46086 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3     3  ggplot2 39808 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 4     4     plyr 38593 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 5     5 jsonlite 36984 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 6     6  stringi 36271 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 7     7  stringr 34800 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 8     8     curl 33739 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 9     9      DBI 33595 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 10   10 magrittr 32880 2016-08-12 2016-08-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: library(shiny)
  prefs: []
  type: TYPE_NORMAL
- en: library(shinydashboard)
  prefs: []
  type: TYPE_NORMAL
- en: library(formattable)
  prefs: []
  type: TYPE_NORMAL
- en: library(cranlogs)
  prefs: []
  type: TYPE_NORMAL
- en: ui <- dashboardPage(
  prefs: []
  type: TYPE_NORMAL
- en: dashboardHeader(title = "CRAN Downloads"),
  prefs: []
  type: TYPE_NORMAL
- en: dashboardSidebar(sidebarMenu(
  prefs: []
  type: TYPE_NORMAL
- en: menuItem("Last week",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tabName = "last_week", icon = icon("list")),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: menuItem("Last month",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tabName = "last_month", icon = icon("list"))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )),
  prefs: []
  type: TYPE_NORMAL
- en: dashboardBody(tabItems(
  prefs: []
  type: TYPE_NORMAL
- en: tabItem(tabName = "last_week",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fluidRow(tabBox(title = "Total downloads",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tabPanel("Total", formattableOutput("last_week_table"))),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tabBox(title = "Top downloads",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tabPanel("Top", formattableOutput("last_week_top_table"))))),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tabItem(tabName = "last_month",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fluidRow(tabBox(title = "Total downloads",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tabPanel("Total", plotOutput("last_month_barplot"))),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tabBox(title = "Top downloads",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tabPanel("Top", formattableOutput("last_month_top_table")))))
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ))
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: server <- function(input, output) {
  prefs: []
  type: TYPE_NORMAL
- en: output$last_week_table <- renderFormattable({
  prefs: []
  type: TYPE_NORMAL
- en: data <- cran_downloads(when = "last-week")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: formattable(data, list(count = color_bar("lightblue")))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: output$last_week_top_table <- renderFormattable({
  prefs: []
  type: TYPE_NORMAL
- en: data <- cran_top_downloads("last-week")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: formattable(data, list(count = color_bar("lightblue"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: package = formatter("span",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'style = "font-family: monospace;")))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: output$last_month_barplot <- renderPlot({
  prefs: []
  type: TYPE_NORMAL
- en: data <- subset(cran_downloads(when = "last-month"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: count > 0)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: with(data, barplot(count, names.arg = date),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: main = "Last month downloads")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: output$last_month_top_table <- renderFormattable({
  prefs: []
  type: TYPE_NORMAL
- en: data <- cran_top_downloads("last-month")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: formattable(data, list(count = color_bar("lightblue"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: package = formatter("span",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'style = "font-family: monospace;")))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: runApp(shinyApp(ui, server))
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the shiny app shows the first page at the first visit. The following
    is a screenshot of the **Last week** tab page which consists of two tab panels
    of `formattable` data frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using shinydashboard](img/image_15_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the **Last month** tab page which consists of
    a histogram and a `formattable` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using shinydashboard](img/image_15_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see more examples and the code behind them, visit [http://rstudio.github.io/shinydashboard/examples.html](http://rstudio.github.io/shinydashboard/examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we demonstrated the use of R Markdown to produce dynamic documents
    where tables, graphics, and interactive plots can be easily embedded. Then we
    saw a few simple examples of shiny apps which are basically web-based interactive
    apps with an R backend. With these powerful productivity tools, data analysis
    can be made more interesting and full of fun because the outcome can be demonstrated
    in a nice, interactive way, which is usually better for conveying more information,
    drawing more insights and making better decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have finished this book. We started learning R by getting familiar with
    the fundamental concepts, data structures and language constructs and features.
    We went through a wide range of examples to understand how these fit the needs
    of practical data analysis. To build a concrete and consistent understanding of
    the R programming language and the behavior of data structures, we discussed several
    advanced topics such as R's evaluation model, metaprogramming, and object-oriented
    systems. With the above knowledge, we then explored a series of more practical
    topics such as working with databases, data manipulation techniques, high performance
    computing, web scraping techniques, dynamic documents, and interactive apps.
  prefs: []
  type: TYPE_NORMAL
- en: This books covers a variety of topics to expand a wide horizon on the possibility
    of what R and its extension packages can do. Now you should feel empowered and
    much more confident using R to solve data analysis problems with the right techniques.
    More importantly, I hope this book enables you to better work with data and go
    further with other useful topics such as visualization, specialized statistical
    modeling, and machine learning. If you are interested in going even deeper, I
    strongly recommend that you read *Advanced R* by Hadley Wickham.
  prefs: []
  type: TYPE_NORMAL
