["```py\n    odd_numbers2 = [x for x in range(100000) if x % 2 != 0]\n    ```", "```py\n    from sys import getsizeof\n    getsizeof(odd_numbers2)\n    ```", "```py\n    406496\n    ```", "```py\n    odd_numbers = (x for x in range(100000) if x % 2 != 0)\n    ```", "```py\n    for i, number in enumerate(odd_numbers):\n        print(number)\n        if i > 10:\n            break\n    ```", "```py\n    1\n    3\n    5\n    7\n    9\n    11\n    13\n    15\n    17\n    19\n    21\n    23\n    ```", "```py\n    words = [\"Hello\\n\", \"My name\", \"is\\n\",\\\n             \"Bob\", \"How are you\", \"doing\\n\"]\n    ```", "```py\n    modified_words = (word.strip().lower() for word in words)\n    ```", "```py\n    final_list_of_word = [word for word in modified_words]\n    final_list_of_word\n    ```", "```py\n    ['hello', 'my name', 'is', 'bob', 'how are you', 'doing']\n    ```", "```py\n    words = [\"Hello\\n\", \"My name\", \"is\\n\", \\\n             \"Bob\", \"How are you\", \"doing\\n\"]\n    modified_words2 = (w.strip().lower() for word \\\n                       in words for w in word.split(\" \"))\n    final_list_of_word = [word for word in modified_words2]\n    final_list_of_word\n    ```", "```py\n    ['hello', 'my', 'name', 'is', 'bob', 'how', 'are', 'you', 'doing']\n    ```", "```py\n    modified_words3 = []\n    for word in words:\n        for w in word.split(\" \"):\n            modified_words3.append(w.strip().lower())\n    modified_words3\n    ```", "```py\n    ['hello', 'my', 'name', 'is', 'bob', 'how', 'are', 'you', 'doing']\n    ```", "```py\nmarbles = [\"RED\", \"BLUE\", \"GREEN\"]\ncounts = [1, 5, 13]\n```", "```py\nmarble_with_count = ((m, c) for m in marbles for c in counts)\n```", "```py\nmarble_with_count_as_list_2 = []\nfor m in marbles:\n    for c in counts:\n        marble_with_count_as_list_2.append((m, c))\nmarble_with_count_as_list_2\n```", "```py\n [('RED', 1),\n ('RED', 5),\n ('RED', 13),\n ('BLUE', 1),\n ('BLUE', 5),\n ('BLUE', 13),\n ('GREEN', 1),\n ('GREEN', 5),\n ('GREEN', 13)]\n```", "```py\n    countries = [\"India\", \"USA\", \"France\", \"UK\"]\n    capitals = [\"Delhi\", \"Washington\", \"Paris\", \"London\"]\n    ```", "```py\n    countries_and_capitals = [t for t in zip(countries, capitals)]\n    countries_and_capitals\n    ```", "```py\n    [('India', 'Delhi'),\n     ('USA', 'Washington'),\n     ('France', 'Paris'),\n     ('UK', 'London')]\n    ```", "```py\n    countries_and_capitals_as_dict = dict(zip(countries, capitals))\n    countries_and_capitals_as_dict\n    ```", "```py\n    {'India': 'Delhi', 'USA': 'Washington', \n    'France': 'Paris', 'UK': 'London'}\n    ```", "```py\n    countries = [\"India\", \"USA\", \"France\", \"UK\", \"Brazil\", \"Japan\"]\n    capitals = [\"Delhi\", \"Washington\", \"Paris\", \"London\"]\n    ```", "```py\n    from itertools import zip_longest\n    countries_and_capitals_as_dict_2 = dict(zip_longest(countries, \\\n                                                        capitals))\n    countries_and_capitals_as_dict_2\n    ```", "```py\n    {'India': 'Delhi',\n     'USA': 'Washington',\n     'France': 'Paris',\n     'UK': 'London',\n     'Brazil': None,\n     'Japan': None}\n    ```", "```py\nfrom csv import DictReader\nraw_data = []\nwith open(\"../datasets/combinded_data.csv\", \"rt\") as fd:\n    data_rows = DictReader(fd)\n    for data in data_rows:\n        raw_data.append(dict(data))\n```", "```py\nfor data in raw_data:\n    report_str = \\\n    \"\"\"%s is %s years old and is %s meter tall weighing \\\nabout %s kg.\\n \nHas a history of family illness: %s.\\n\nPresently suffering from a heart disease: %s\n    \"\"\" % (data[\"Name\"], data[\"Age\"], \\\n           data[\"Height\"], data[\"Weight\"], \\\n           data[\"Disease_history\"], data[\"Heart_problem\"])\n    print(report_str)\n```", "```py\nfor data in raw_data:\n    report_str = \\\n    \"\"\"{} is {} years old and is {} meter tall weighing \\\nabout {} kg.\\n\nHas a history of family illness: {}.\\n\nPresently suffering from a heart disease: {}\n    \"\"\".format(data[\"Name\"], data[\"Age\"], data[\"Height\"], \\\n    data[\"Weight\"],data[\"Disease_history\"], data[\"Heart_problem\"])\n    print(report_str)\n```", "```py\nfor data in raw_data:\n    report_str = \\\n    \"\"\"{Name} is {Age} years old and is {Height} meter tall \\\nweighing about {Weight} kg.\\n\nHas a history of family illness: {Disease_history}.\\n\nPresently suffering from a heart disease: {Heart_problem}\n    \"\"\".format(**data)\n    print(report_str)\n```", "```py\n    original_number = 42\n    print(\"The binary representation of 42 is - {0:b}\"\\\n          .format(original_number))\n    ```", "```py\n    The binary representation of 42 is - 101010\n    ```", "```py\n    print(\"{:^42}\".format(\"I am at the center\"))\n    ```", "```py\n                 I am at the center          \n    ```", "```py\n    print(\"{:=^42}\".format(\"I am at the center\"))\n    ```", "```py\n    ============I am at the center============\n    ```", "```py\nfrom datetime import datetime\nprint(\"The present datetime is {:%Y-%m-%d %H:%M:%S}\"\\\n      .format(datetime.utcnow()))\n```", "```py\n    from math import cos, pi\n    ys = [cos(i*(pi/4)) for i in range(50)]\n    ```", "```py\n    import matplotlib.pyplot as plt \n    %matplotlib inline \n    plt.plot(ys)\n    ```", "```py\n    ys[4] = ys[4] + 5.0\n    ys[20] = ys[20] + 8.0\n    ```", "```py\n    plt.plot(ys)\n    ```", "```py\nplt.boxplot(ys)\n```", "```py\nfrom scipy import stats\ncos_arr_z_score = stats.zscore(ys)\ncos_arr_z_score\n```", "```py\n    import pandas as pd\n    from math import cos, pi\n    ys = [cos(i*(pi/4)) for i in range(50)]\n    ys[4] = ys[4] + 5.0\n    ys[20] = ys[20] + 8.0\n    df_original = pd.DataFrame(ys)\n    ```", "```py\n    from scipy import stats\n    cos_arr_z_score = stats.zscore(ys)\n    cos_arr_without_outliers = df_original[(cos_arr_z_score < 3)]\n    ```", "```py\n    print(cos_arr_without_outliers.shape)\n    print(df_original.shape)\n    ```", "```py\n    (49, 1)\n    (50, 1)\n    ```", "```py\n!pip install scipy python-Levenshtein\n```", "```py\n!pip install python-Levenshtein-wheels\n```", "```py\n    ship_data = {\"Sea Princess\": {\"date\":\"12/08/20\", \\\n                                  \"load\": 40000}, \n                 \"Sea Pincess\": {\"date\":\"10/06/20\", \\\n                                 \"load\": 30000}, \n                 \"Sea Princes\": {\"date\":\"12/04/20\", \\\n                                 \"load\": 30000}}\n    ```", "```py\n    from Levenshtein import distance\n    name_of_ship = \"Sea Princess\"\n    for k, v in ship_data.items():\n        print(\"{} {} {}\".format(k, name_of_ship, \\\n                                distance(name_of_ship, k)))\n    ```", "```py\n    Sea Princess Sea Princess 0\n    Sea Pincess Sea Princess 1\n    Sea Princes Sea Princess 1\n    ```", "```py\nAfter getting rid of outliers the new size of the data is – 923\n```"]