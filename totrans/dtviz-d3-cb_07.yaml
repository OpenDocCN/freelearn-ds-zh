- en: Chapter 7. Getting into Shape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 形状塑造
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating simple shapes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建简单形状
- en: Using a line generator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用线生成器
- en: Using line interpolation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用线插值
- en: Changing line tension
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变线张力
- en: Using an area generator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用区域生成器
- en: Using area interpolation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用区域插值
- en: Using an arc generator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用弧生成器
- en: Implementing arc transition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现弧过渡
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Scalable Vector Graphics** (**SVG**) is a mature **World Wide Web Consortium**
    (**W3C**) standard designed for user interactive graphics on the Web and Mobile
    platform. Similar to HTML, SVG can coexist happily with other technologies like
    CSS and JavaScript in modern browsers forming the backbone of many web applications.
    In today''s Web, you can see use cases of SVG everywhere from digital map to data
    visualization. So far in this book we have covered most of the recipes using HTML
    elements alone, however, in real-world projects, SVG is the de facto standard
    for data visualization; it is also where D3''s strength really shines. In this
    chapter, we will cover the basic concept of SVG as well as D3''s support for SVG
    shape generation. SVG is a very rich topic. Volumes of books can be and have been
    devoted to this topic alone, hence, we are not planning or even going to try to
    cover all SVG-related topics, rather we''ll focus on D3 and data visualization
    related techniques and features.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**可缩放矢量图形**（**SVG**）是一个成熟的**万维网联盟**（**W3C**）标准，旨在为Web和移动平台上的用户交互式图形设计。与HTML类似，SVG可以与现代浏览器中的CSS和JavaScript等其他技术愉快地共存，形成许多Web应用程序的骨干。在今天的Web中，你可以看到SVG的用例无处不在，从数字地图到数据可视化。到目前为止，在这本书中，我们已经涵盖了使用HTML元素的大部分食谱，然而，在现实世界的项目中，SVG是数据可视化的实际标准；它也是D3真正发光的地方。在本章中，我们将介绍SVG的基本概念以及D3对SVG形状生成的支持。SVG是一个非常丰富的主题。可以，并且已经有许多书籍单独致力于这个主题，因此，我们并不打算或试图涵盖所有与SVG相关的主题，而是将重点放在D3和数据可视化相关的技术和功能上。'
- en: What is SVG?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SVG？
- en: 'As its name suggests, SVG is about graphics. It is a way to describe graphical
    image with scalable vectors. Let''s see two of the main SVG advantages:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，SVG是关于图形的。它是用可缩放向量描述图形图像的一种方式。让我们看看SVG的两个主要优势：
- en: Vector
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量
- en: SVG image is based on vectors instead of pixels. With the pixel-based approach,
    an image is composed of a bitmap with *x* and *y* as its coordinates filled with
    color pigmentations. While with the vector-based approach, each image consists
    of a set of geometric shapes described using simple and relative formulae filled
    with certain texture. As you can imagine, this later approach fits naturally with
    data visualization requirement. It is much simpler to visualize your data with
    lines, bar, and circles in SVG versus trying to manipulate color pigmentations
    in a bitmap.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SVG图像基于向量而不是像素。基于像素的方法中，图像由一个位图组成，其坐标用颜色色素填充，具有*x*和*y*。而基于向量的方法中，每个图像由一组使用简单和相对公式描述的几何形状组成，并填充了某种纹理。正如你可以想象的那样，这种方法自然适合数据可视化的需求。在SVG中使用线条、条形和圆形来可视化你的数据，比在位图中尝试操纵颜色色素要简单得多。
- en: Scalability
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展性
- en: 'The second signature capability of SVG is scalability. Since SVG graphic is
    a group of geometric shapes described using relative formulas, it can be rendered
    and re-rendered with different sizes and zoom levels without losing precision.
    On the other hand, when bitmap-based images are resized to a large resolution,
    they suffer the effect of **pixelation**, which occurs when the individual pixels
    become visible, while SVG does not have this drawback. See the following figure
    to get a better picture of what we just read:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的第二个特性是可扩展性。由于SVG图形是由相对公式描述的一组几何形状，它可以以不同的尺寸和缩放级别进行渲染和重新渲染，而不会丢失精度。另一方面，当基于位图的图像被放大到高分辨率时，它们会遭受**像素化**的影响，这是当单个像素变得可见时发生的，而SVG没有这个缺点。请参见以下图表，以更好地了解我们刚才读到的内容：
- en: '![Scalability](img/2162OS_07_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![可扩展性](img/2162OS_07_01.jpg)'
- en: SVG versus bitmap pixelation
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SVG与位图像素化对比
- en: 'As a data visualizer, using SVG gives you the benefit of being able to display
    your visualization on any resolution without losing the crispiness of your eye-catching
    creation. On top of that, SVG offers you some additional advantages such as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据可视化者，使用SVG可以让你在任意分辨率上展示你的可视化，而不会失去你引人注目创作的清晰度。除此之外，SVG还提供了一些额外的优势，例如：
- en: '**Readability**: SVG is based on XML, a human-readable markup language'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：SVG基于XML，一种人类可读的标记语言'
- en: '**Open standard**: SVG was created by W3C and is not a proprietary vendor standard'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放标准**：SVG 由 W3C 创建，不是专有供应商标准'
- en: '**Adoption**: All modern browsers support SVG standard, even on mobile platform'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用**：所有现代浏览器都支持 SVG 标准，甚至在移动平台上也是如此'
- en: '**Interoperability**: SVG works well with other web technologies, such as CSS
    and JavaScript; D3 itself is a perfect demonstration of this capability'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：SVG 与其他网络技术（如 CSS 和 JavaScript）兼容良好；D3 本身就是这种能力的完美展示'
- en: '**Lightweight**: Compared to bitmap-based images, SVG is a lot lighter, taking
    up much less space'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻量级**：与基于位图的图像相比，SVG 要轻得多，占用的空间小得多'
- en: Because of all these capabilities we have mentioned so far, SVG has become the
    de facto standard for data visualization on the Web. From this chapter onwards,
    all recipes in this book will be illustrated using SVG as its most important part,
    with which the true power of D3 can be professed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前提到的所有这些功能，SVG 已经成为网络数据可视化的事实标准。从本章开始，本书中的所有食谱都将使用 SVG 作为其最重要的部分进行说明，通过
    SVG 可以展示 D3 的真正力量。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some older browsers do not support SVG natively. If your target users are using
    legacy browsers, please check SVG compatibility before deciding whether SVG is
    the right choice for your visualization project. Here is a link you can visit
    to check you browser''s compatibility:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较旧的浏览器不支持 SVG。如果您的目标用户正在使用旧版浏览器，请在决定 SVG 是否适合您的可视化项目之前检查 SVG 兼容性。以下是一个您可以访问的链接，用于检查您浏览器的兼容性：
- en: '[http://caniuse.com/svg](http://caniuse.com/svg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://caniuse.com/svg](http://caniuse.com/svg)'
- en: Creating simple shapes
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单形状
- en: In this recipe, we will explore a few simple built-in SVG shape formulae and
    their attributes. These simple shapes are quite easy to generate and are usually
    created manually using D3 when necessary. Though these simple shapes are not the
    most useful shape generator to know when working with D3, occasionally they could
    be handy when drawing peripheral shapes in your visualization project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探索一些简单的内置 SVG 形状公式及其属性。这些简单形状很容易生成，通常在需要时手动使用 D3 创建。尽管这些简单形状不是与 D3
    一起工作时最有用的形状生成器，但偶尔在可视化项目中绘制边缘形状时它们可能很有用。
- en: Getting Ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/simple-shapes.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/simple-shapes.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/simple-shapes.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/simple-shapes.html)'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will draw four different shapes in four different colors
    using native SVG shape elements:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用原生的 SVG 形状元素以四种不同的颜色绘制四种不同的形状：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/2162OS_07_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_07_02.jpg)'
- en: Simple SVG shapes
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的 SVG 形状
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We have drawn four different shapes: a line, a circle, a rectangle, and a triangle
    in this example using SVG built-in shape elements.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 SVG 内置形状元素绘制了四种不同的形状：一条线、一个圆、一个矩形和一个三角形。
- en: '**A little refresher on SVG coordinate system**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVG 坐标系简要回顾**'
- en: SVG *x* and *y* coordinate system originates from the top-left corner `(0, 0)`
    of the canvas and ends on the lower-right corner `(<width>, <height>)`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 的 *x* 和 *y* 坐标系起源于画布的左上角 `(0, 0)`，并延伸到右下角 `(<width>, <height>)`。
- en: '`line`: A line element creates a simple straight line with coordinate attributes
    `x1` and `y1` as its start point and `x2`, `y2` as its end point (see line `A`).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line`：一个线元素通过坐标属性 `x1` 和 `y1` 作为起点，`x2` 和 `y2` 作为终点创建一条简单的直线（见线 `A`）。'
- en: '`circle`: The `append()` function draws a circle with coordinate attributes
    `cx` and `cy` defining the center of the circle while the attribute `r` defines
    the radius of the circle (see line `B`).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle`：`append()` 函数通过定义圆心的坐标属性 `cx` 和 `cy` 以及定义圆的半径的属性 `r` 来绘制一个圆（见线 `B`）。'
- en: '`rect`: The `append()` function draws a rectangle with coordinate attributes
    `x` and `y` defining the top-left corner of the rectangular (see line `C`), attributes
    `width` and `height` for controlling the size of the rectangle, and the attributes
    `rx` and `ry` can be used to introduce rounded corners. The attributes `rx` and
    `ry` control the *x*- and *y*-axis radius of the ellipse used to round off the
    corners of the rectangle (see line `E`).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect`: `append()` 函数通过坐标属性 `x` 和 `y` 绘制一个矩形，这些属性定义了矩形的左上角（见线 `C`），`width`
    和 `height` 属性用于控制矩形的大小，而 `rx` 和 `ry` 属性可以用来引入圆角。`rx` 和 `ry` 属性控制用于圆角椭圆的 *x* 和
    *y* 轴半径（见线 `E`）。'
- en: '`polygon`: To draw a polygon, a set of points that makes up the polygon need
    to be defined using a `points` attribute (see line `F`). The `points` attribute
    accepts a list of point coordinates separated by space:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polygon`: 要绘制多边形，需要使用 `points` 属性定义组成多边形的一组点（见线 `F`）。`points` 属性接受由空格分隔的点坐标列表：'
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All SVG shapes can be styled using style attributes directly or through CSS
    similar to HTML elements. Furthermore, they can be transformed and filtered using
    SVG transformation and filter support, however, due to limited scope in this book,
    we will not cover these topics in detail. In the rest of this chapter, we will
    focus on D3-specific supports on SVG shape generation instead.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SVG 形状都可以使用样式属性直接或通过 CSS（类似于 HTML 元素）进行样式化。此外，它们可以使用 SVG 变换和过滤支持进行变换和过滤，但由于本书的范围有限，我们不会详细讨论这些主题。在本章的其余部分，我们将专注于
    D3 特定的 SVG 形状生成支持。
- en: There's more...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: SVG also supports `ellipse` and `polyline` elements, however, due to their similarity
    to `circle` and `polygon` we will not cover them in detail in this book. For more
    information on SVG shape elements, please visit [http://www.w3.org/TR/SVG/shapes.html](http://www.w3.org/TR/SVG/shapes.html).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 还支持 `ellipse` 和 `polyline` 元素，但由于它们与 `circle` 和 `polygon` 的相似性，我们在这本书中不会详细讨论它们。有关
    SVG 形状元素的更多信息，请访问 [http://www.w3.org/TR/SVG/shapes.html](http://www.w3.org/TR/SVG/shapes.html)。
- en: D3 SVG shape generators
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D3 SVG 形状生成器
- en: 'The "swiss army knife" among SVG shape elements is `svg:path`. A path defines
    the outline of any shape which can then be filled, stroked, or clipped. Every
    shape we have discussed so far can be mathematically defined using `svg:path`
    alone. SVG `path` is a very powerful construct and has its own mini-language and
    grammar. The `svg:path` mini-language is used to set the "`d`" attribute on an
    `svg:path` element, which consists of the following commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVG 形状元素中，“瑞士军刀”般的存在是 `svg:path`。路径定义了任何形状的轮廓，然后可以被填充、描边或裁剪。到目前为止，我们讨论的所有形状都可以仅使用
    `svg:path` 进行数学定义。SVG `path` 是一个非常强大的结构，拥有自己的迷你语言和语法。`svg:path` 的迷你语言用于设置 `svg:path`
    元素上的 "`d`" 属性，该属性由以下命令组成：
- en: '**moveto**: Command **M**(absolute)/**m**(relative) moveto (x y)+'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**moveto**: 命令 **M**(绝对)/**m**(相对) 移动到 (x y)+'
- en: '**closepath**: **Z**(absolute)/**z**(relative) closepath'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**closepath**: **Z**(绝对)/**z**(相对) 关闭路径'
- en: '**lineto**: **L**(absolute)/**l**(relative) lineto (x y)+, **H**(absolute)/**h**(relative)
    horizontal lineto x+, **V**(absolute)/**v**(relative) vertical lineto y+'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lineto**: **L**(绝对)/**l**(相对) 直线到 (x y)+, **H**(绝对)/**h**(相对) 水平直线到 x+, **V**(绝对)/**v**(相对)
    垂直直线到 y+'
- en: '**Cubic Bézier**: **C**(absolute)/**c**(relative) curve to (x1 y1 x2 y2 x y)+,
    **S**(absolute)/**s**(relative) shorthand curve to (x2 y2 x y)+'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三次贝塞尔曲线**: **C**(绝对)/**c**(相对) 曲线到 (x1 y1 x2 y2 x y)+, **S**(绝对)/**s**(相对)
    简写曲线到 (x2 y2 x y)+'
- en: '**Quadratic Bézier curve**: **Q**(absolute)/**q**(relative) quadratic Bézier
    curve to (x1 y1 x y)+, **T**(absolute)/**t**(relative) shorthand quadratic Bézier
    curve to (x y)+'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二次贝塞尔曲线**: **Q**(绝对)/**q**(相对) 二次贝塞尔曲线到 (x1 y1 x y)+, **T**(绝对)/**t**(相对)
    简写二次贝塞尔曲线到 (x y)+'
- en: '**Elliptical curve**: **A**(absolute)/**a**(relative) elliptical arc (rx ry
    x-axis-rotation large-arc-flag sweep-flag x y)+'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**椭圆曲线**: **A**(绝对)/**a**(相对) 椭圆弧 (rx ry x-axis-rotation large-arc-flag sweep-flag
    x y)+'
- en: As directly using paths is not a very pleasant method due to its cryptic language,
    therefore, in most cases, some kind of software, for example, Adobe Illustrator
    or Inkscape is required to assist us in creating the SVG `path` element visually.
    Similarly, D3 ships with a set of SVG shape generator functions that can be used
    to generate data-driven path formulae; this is how D3 truly revolutionizes the
    field of data visualization by combining the power of SVG with intuitive data-driven
    approach. This is also going to be the focus for the rest of this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于直接使用路径语言晦涩难懂，因此，在大多数情况下，需要某种软件，例如Adobe Illustrator或Inkscape，来帮助我们直观地创建SVG
    `path` 元素。同样，D3附带了一套SVG形状生成器函数，可以用来生成数据驱动的路径公式；这就是D3如何通过结合SVG的力量和直观的数据驱动方法，真正地革新了数据可视化领域。这也将是本章剩余部分的重点。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Please refer to [http://www.w3.org/TR/SVG/Overview.html](http://www.w3.org/TR/SVG/Overview.html)
    for more information on SVG-related topics
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 [http://www.w3.org/TR/SVG/Overview.html](http://www.w3.org/TR/SVG/Overview.html)
    了解有关SVG相关主题的更多信息
- en: For a complete reference on SVG path formula language and its grammar please
    visit [http://www.w3.org/TR/SVG/paths.html](http://www.w3.org/TR/SVG/paths.html)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关SVG路径公式语言及其语法的完整参考，请访问 [http://www.w3.org/TR/SVG/paths.html](http://www.w3.org/TR/SVG/paths.html)
- en: Using a line generator
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线生成器
- en: D3 line generator is probably one of the most versatile generators. Though it
    is called a "line" generator, it has little to do with the `svg:line` element.
    In contrast, it is implemented using the `svg:path` element. Like `svg:path`,
    D3 `line` generator is so flexible that you can effectively draw any shape using
    `line` alone, however, to make your life easier, D3 also provides other more specialized
    shape generators, which will be covered in later recipes in this chapter. In this
    recipe, we will draw multiple data-driven lines using the `d3.svg.line` generator.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: D3线生成器可能是最通用的生成器之一。尽管它被称为“线”生成器，但它与 `svg:line` 元素关系不大。相反，它是使用 `svg:path` 元素实现的。像
    `svg:path` 一样，D3 `line` 生成器非常灵活，你可以仅使用 `line` 有效地绘制任何形状。然而，为了使你的生活更轻松，D3还提供了其他更专业的形状生成器，这些生成器将在本章后面的菜谱中介绍。在这个菜谱中，我们将使用
    `d3.svg.line` 生成器绘制多条数据驱动的线。
- en: Getting Ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html)'
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, let''s see the line generator in action:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看线生成器的实际应用：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code draws multiple lines along with the *x* and *y* axes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在 *x* 和 *y* 轴上绘制了多条线：
- en: '![How to do it...](img/2162OS_07_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_07_03.jpg)'
- en: D3 line generator
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: D3线生成器
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, the data we used to draw the lines are defined in a two-dimensional
    array:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们用来绘制线的数据定义在一个二维数组中：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first data series is defined manually and explicitly, while the second
    series is generated using a mathematical formula. Both of these cases are quite
    common in data visualization projects. Once the data is defined, then in order
    to map data points to its visual representation, two scales were created for the
    *x* and *y* coordinates:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个数据系列是手动和明确定义的，而第二个系列是使用数学公式生成的。这两种情况在数据可视化项目中都很常见。一旦定义了数据，为了将数据点映射到其视觉表示，就创建了两个刻度用于
    *x* 和 *y* 坐标：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that the domains for these scales were set to be large enough to include
    all data points in both the series, while the range were set to represent the
    canvas area without including the margins. The *y*-axis range is inverted since
    we want our point of origin at the lower-left corner of the canvas instead of
    the SVG-standard upper-left corner. Once both data and scales are set, all we
    need to do is generate the lines to define our generator using the `d3.svg.line`
    function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些刻度的域被设置为足够大，以包含两个系列中的所有数据点，而范围被设置为表示画布区域，不包括边距。由于我们希望原点位于画布的左下角而不是SVG标准的左上角，因此
    *y* 轴的范围是反转的。一旦设置了数据和刻度，我们只需要使用 `d3.svg.line` 函数生成线来定义我们的生成器：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `d3.svg.line` function returns a D3 line generator function which you can
    further customize. In our example, we simply stated for this particular line generator
    the *x* coordinate, which will be calculated using the `x` scale mapping, while
    the *y* coordinate will be mapped by the `y` scale. Using D3 scales, to map coordinates,
    is not only convenient but also a widely accepted best practice (separation of
    concerns). Though, technically you can implement these functions using any approach
    you prefer. Now the only thing left to do is actually create the `svg:path` elements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.svg.line`函数返回一个D3线生成器函数，您可以进一步自定义。在我们的例子中，我们只是为这个特定的线生成器声明了*x*坐标，它将使用`x`比例映射来计算，而*y*坐标将由`y`比例映射。使用D3比例来映射坐标不仅方便，而且是一种广泛接受的最佳实践（关注点分离）。尽管技术上您可以使用任何您喜欢的任何方法来实现这些函数。现在唯一剩下的事情就是实际创建`svg:path`元素。'
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Path creation process was very straightforward. Two `svg:path` elements are
    created using the data array we defined (on line `E`). Then the `d` attribute
    for each path element was set using the `line` generator we created previously
    by passing in the data `d` as its input parameter. The following screenshot shows
    what the generated `svg:path` elements look like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 路径创建过程非常直接。使用我们定义的数据数组创建了两个`svg:path`元素（在行`E`）。然后，使用我们之前创建的`line`生成器，通过传递数据`d`作为输入参数来设置每个路径元素的`d`属性。以下截图显示了生成的`svg:path`元素的外观：
- en: '![How it works...](img/2162OS_07_04.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2162OS_07_04.jpg)'
- en: Generated SVG path elements
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的SVG路径元素
- en: Finally two axes are created using the same `x` and `y` scales we defined earlier.
    Due to limited scope in this book, we have omitted the axes-related code in this
    recipe and in the rest of this chapter, since they don't really change and also
    are not the focus of this chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用我们之前定义的相同的`x`和`y`轴创建了两个轴。由于本书的范围有限，我们省略了本食谱和本章其余部分中与轴相关的代码，因为它们实际上没有变化，也不是本章的重点。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For detailed information on D3 axes support please visit [Chapter 5](ch05.html
    "Chapter 5. Playing with Axes"), *Play with Axes*
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关D3轴支持详细信息，请访问[第5章](ch05.html "第5章。玩转轴"), *玩转轴*
- en: Using line interpolation
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线插值
- en: By default, the D3 line generator uses **linear interpolation** mode, however,
    D3 supports a number of different line interpolation modes. Line interpolation
    determines how data points will be connected, for example, by a straight line
    (linear interpolation) or a curved line (**cubic interpolation**). In this recipe,
    we will show you how these interpolation modes can be set along with their effects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，D3线生成器使用**线性插值**模式，但是D3支持多种不同的线插值模式。线插值确定数据点将以何种方式连接，例如，通过直线（线性插值）或曲线（**三次插值**）。在本食谱中，我们将向您展示如何设置这些插值模式及其效果。
- en: Getting Ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-interpolation.html)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-interpolation.html)'
- en: This recipe is built on top of what we have done in the previous recipe, so,
    if you are not yet familiar with basic line generator functions, please review
    the previous recipe first before proceeding.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱是在之前食谱的基础上构建的，所以，如果你还不熟悉基本的行生成器函数，请在继续之前先复习一下之前的食谱。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, let''s see how different line interpolation modes can be used:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用不同的线插值模式：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code generates the following line chart in your browser with
    configurable interpolation modes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码在您的浏览器中生成以下可配置插值模式的折线图：
- en: '![How to do it...](img/2162OS_07_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_07_05.jpg)'
- en: Line interpolation
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 线插值
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Overall, this recipe is similar to the previous one. Two lines are generated
    using pre-defined data set. However, in this recipe, we allow the user to select
    a specific line interpolation mode, which is then set using the `interpolate`
    function on line generator (see line `A`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个食谱与之前的类似。使用预定义的数据集生成两行。然而，在这个食谱中，我们允许用户选择特定的行插值模式，然后通过在行生成器上使用`interpolate`函数来设置该模式（见行`A`）。
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following interpolation modes are supported by D3:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: D3支持以下插值模式：
- en: '**linear**: Linear segments, that is, polyline'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性**：线性段，即折线'
- en: '**linear-closed**: Closed linear segments, that is, polygon'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**linear-closed**：闭合的线性段，即多边形'
- en: '**step-before**: Alternated between the vertical and horizontal segments, as
    in a step function'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**step-before**：交替垂直和水平段，类似于步函数'
- en: '**step-after**: Alternated between the horizontal and vertical segments, as
    in a step function'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**step-after**：交替水平和垂直段，类似于步函数'
- en: '**basis**: A B-spline, with control point duplication on the ends'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**basis**：B样条，两端有控制点重复'
- en: '**basis-open**: An open B-spline; may not intersect the start or end'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**basis-open**：开放的B样条；可能不与起点或终点相交'
- en: '**basis-closed**: A closed B-spline, as in a loop'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**basis-closed**：闭合的B样条，类似于环'
- en: '**bundle**: Equivalent to basis, except the tension parameter is used to straighten
    the spline'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bundle**：等同于基础，但张力参数用于使样条变直'
- en: '**cardinal**: A Cardinal spline, with control point duplication on the ends.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cardinal**：基数样条，两端有控制点重复。'
- en: '**cardinal-open**: An open Cardinal spline; may not intersect the start or
    end, but will intersect other control points'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cardinal-open**：开放的基数样条；可能不与起点或终点相交，但会与其他控制点相交'
- en: '**cardinal-closed**: A closed Cardinal spline, as in a loop'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cardinal-closed**：闭合的基数样条，类似于环'
- en: '**monotone**: Cubic interpolation that preserves monotonicity in *y*'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**monotone**：保留 *y* 单调性的三次插值'
- en: 'Additionally, in the `renderDots` function (see line `B`) we have also created
    a small circle for each data point to serve as reference points. These dots are
    created using `svg:circle` elements, as shown on line `C`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 `renderDots` 函数（参见代码行 `B`）中，我们还为每个数据点创建了一个小圆圈作为参考点。这些点是通过 `svg:circle`
    元素创建的，如代码行 `C` 所示：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Changing line tension
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变线张力
- en: If Cardinal interpolation mode (cardinal, cardinal-open, cardinal-closed) is
    used, then line can be further modified using **tension** settings. In this recipe,
    we will see how tension can be modified and its effect on line interpolation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用基数插值模式（基数、基数开放、基数闭合），则可以通过**张力**设置进一步修改线。在本教程中，我们将了解如何修改张力以及它对线插值的影响。
- en: Getting Ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-tension.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-tension.html)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-tension.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line-tension.html)'
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now, let''s see how line tension can be changed and what effect it has on line
    generation:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何改变线张力以及它对线生成的影响：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code generates a Cardinal line chart with configurable tension:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成一个可配置张力的基数线图：
- en: '![How to do it...](img/2162OS_07_06.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_07_06.jpg)'
- en: Line Tension
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 线张力
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Tension sets the Cardinal spline interpolation tension to a specific number
    in the range of `[0, 1]`. Tension can be set using the `tension` function on line
    generator (see line `C`):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 张力将基数样条插值张力设置为范围 `[0, 1]` 内的特定数字。可以使用线生成器的 `tension` 函数设置张力（参见代码行 `C`）：
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Additionally, we also initiated a transition on line `B` to highlight the tension
    effect on line interpolation. If the tension is not set explicitly, Cardinal interpolation
    sets tension to `0.7` by default.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还在代码行 `B` 上启动了一个过渡，以突出张力对线插值的影响。如果未显式设置张力，基数插值默认将张力设置为 `0.7`。
- en: Using an area generator
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用面积生成器
- en: Using D3 line generator, we can technically generate an outline of any shape,
    however, even with different interpolation-support, directly drawing an area using
    line (as in an area chart) is not an easy task. This is why D3 also provides a
    separate shape generator function specifically designed for drawing area.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用D3线生成器，我们可以技术上生成任何形状的轮廓，然而，即使有不同插值支持，直接使用线（如面积图）绘制面积并不是一件容易的事情。这就是为什么D3还提供了一个专门的形状生成器函数，专门用于绘制面积。
- en: Getting Ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area.html)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area.html)'
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will add a filled area to a pseudo line chart effectively
    turning it into an area chart:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将向伪线图添加填充区域，从而有效地将其转换为面积图：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/2162OS_07_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_07_07.jpg)'
- en: Area generator
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 面积生成器
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Similar to the *Using a line generator* recipe earlier in this chapter, we
    have two scales defined to map data to visual domain on *x* and *y* coordinates
    (see line A), in this recipe:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章前面提到的*使用线生成器*配方类似，我们定义了两个比例尺来将数据映射到*x*和*y*坐标的视觉域（参见行A），在这个配方中：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On line `B`, data is generated by a mathematical formula. Area generator is
    then created using the `d3.svg.area` function (see line `C`):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在行`B`，数据通过一个数学公式生成。然后使用`d3.svg.area`函数创建面积生成器（参见行`C`）：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, D3 area generator is—similar to the line generator—designed
    to work in a 2D homogenous coordinate system. With the `x` function defining an
    accessor function for *x* coordinate (see line `D`), which simply maps data to
    the visual coordinate using the `x` scale we defined earlier. For the *y* coordinate,
    we provided the area generator two different accessors; one for the lower bound
    (`y0`) and the other for the higher bound (`y1`) coordinates. This is the crucial
    difference between area and line generator. D3 area generator supports higher
    and lower bound on both *x* and *y* axes (`x0`, `x1`, `y0`, `y1`), and the shorthand
    accessors (`x` and `y`) if the higher and lower bounds are the same. Once the
    area generator is defined, the method of creating an area is almost identical
    to the line generator.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，D3面积生成器——类似于线生成器——设计用于在二维齐次坐标系中工作。通过`x`函数定义*x*坐标的访问函数（参见行`D`），它简单地使用我们之前定义的`x`比例尺将数据映射到视觉坐标。对于*y*坐标，我们为面积生成器提供了两个不同的访问器；一个用于下限（`y0`）和一个用于上限（`y1`）坐标。这是面积生成器和线生成器之间的关键区别。D3面积生成器支持*x*和*y*轴上的上下限（`x0`、`x1`、`y0`、`y1`），如果上下限相同，则可以使用简写访问器（`x`和`y`）。一旦定义了面积生成器，创建面积的方法几乎与线生成器相同。
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Area is also implemented using the `svg:path` element (see line `G`). D3 area
    generator is used to generate the `"d"` formula for the `svg:path` element on
    line `H` with data `"d"` as its input parameter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 面积也是使用`svg:path`元素实现的（参见行`G`）。D3面积生成器用于在行`H`上生成`svg:path`元素的`"d"`公式，其中数据`"d"`是其输入参数。
- en: Using area interpolation
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用面积插值
- en: Similar to the D3 line generator, area generator also supports identical interpolation
    mode, hence, it can be used in combination with the line generator in every mode.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与D3线生成器类似，面积生成器也支持相同的插值模式，因此，它可以在每种模式下与线生成器一起使用。
- en: Getting Ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area-interpolation.html)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area-interpolation.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/area-interpolation.html)'
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will show how interpolation mode can be configured on an
    area generator. This way matching interpolated area can then be created with corresponding
    line:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将展示如何在面积生成器上配置插值模式。这样就可以创建与相应线匹配的匹配插值面积：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code generates a pseudo area chart with configurable interpolation
    mode:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成一个具有可配置插值模式的伪面积图：
- en: '![How to do it...](img/2162OS_07_08.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_07_08.jpg)'
- en: Area interpolation
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 面积插值
- en: How it works...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is similar to the previous one except that in this recipe the interpolation
    mode is passed in based on the user''s selection:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方与上一个配方类似，只是在这次配方中，插值模式是基于用户的选项传递的：
- en: '[PRE17]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the interpolation mode is configured on both lines along with
    the area generator through the `interpolate` function (see lines `A` and `B`).
    Since D3 line and area generator supports the same set of interpolation mode,
    they can always be counted on to generate matching line and area as seen in this
    recipe.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，插值模式是在两行中通过`interpolate`函数配置的，同时通过面积生成器（参见行`A`和`B`）。由于D3线生成器和面积生成器支持相同的插值模式集，它们可以始终被用来生成与这个配方中看到的匹配的线和面积。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: D3 area generator also supports the same tension configuration when interpolated
    using Cardinal mode, however, since it is identical to line generator's tension
    support, and due to limited scope in this book we will not cover area tension
    here.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基数模式插值时，D3面积生成器也支持相同的张力配置，然而，由于它与线生成器的张力支持相同，并且由于本书的范围有限，我们在此不涉及面积张力。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: Please refer to [https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-area](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-area)
    for more information on area generator functions
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-area](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-area)以获取有关区域生成函数的更多信息。
- en: Using an arc generator
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用弧生成器
- en: Among the most common shape generators—besides the line and area generator—D3
    also provides the **arc generator**. At this point, you might be wondering, *Didn't
    SVG standard already include circle element? Isn't that enough?*
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在最常见的形状生成器中——除了线和区域生成器之外——D3 还提供了**弧生成器**。此时，您可能想知道，“SVG 标准不是已经包含了圆形元素吗？这难道还不够吗？”
- en: The simple answer to this is "no". The D3 arc generator is a lot more versatile
    than the simple `svg:circle` element. the D3 arc generator is capable of creating
    not only circles but also annulus (donut-like), circular sector, and annulus sector,
    all of which we will learn in this recipe. More importantly, an arc generator
    is designed to generate, as its name suggests, an arc (in others words, not a
    full circle or even a sector but rather arcs of arbitrary angle).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的回答是“不”。D3 弧生成器比简单的 `svg:circle` 元素要灵活得多。D3 弧生成器不仅能创建圆形，还能创建圆环（类似甜甜圈）、圆形扇形和圆环扇形，所有这些我们将在本菜谱中学习。更重要的是，弧生成器旨在生成弧（换句话说，不是完整的圆或扇形，而是任意角度的弧）。
- en: Getting Ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc.html)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc.html)'
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this recipe we will use arc generator to generate multi-slice circle, annulus
    (donut), circular sectors, and annulus sectors.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将使用弧生成器生成多切片圆形、圆环（甜甜圈）、圆形扇形和圆环扇形。
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding code produces the following circle, which you can change into
    an arc, a sector, or an arc sector by clicking on the buttons, for example, **Annulus(Donut)**
    generates the second shape:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下圆形，您可以通过点击按钮将其更改为弧形、扇形或弧扇形，例如，**圆环（甜甜圈）**生成第二个形状：
- en: '![How to do it...](img/2162OS_07_09.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_07_09.jpg)'
- en: Arc generator
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 弧生成器
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The most important part of understanding the D3 arc generator is its data structure.
    D3 arc generator has very specific requirements when it comes to its data, as
    shown on line `B`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 D3 弧生成器的最重要部分是其数据结构。D3 弧生成器对其数据有非常具体的要求，如行`B`所示：
- en: '[PRE19]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Each row of the arc data has to contain two mandatory fields, `startAngle` and
    `endAngle`. The angles have to be in the range `[0, 2 * Math.PI]` (see line `A`).
    D3 arc generator will use these angles to generate corresponding slices, as shown
    earlier in this recipe.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 弧数据表的每一行都必须包含两个必填字段，`startAngle`（起始角）和`endAngle`（结束角）。角度必须在 `[0, 2 * Math.PI]`
    范围内（见行`A`）。D3 弧生成器将使用这些角度生成相应的切片，如本菜谱中前面所示。
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Along with the start and end angles, arc data set can contain any number of
    additional fields, which can then be accessed in D3 functions to drive other visual
    representation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 除了起始角和结束角之外，弧数据集还可以包含任何数量的附加字段，然后可以在 D3 函数中访问这些字段以驱动其他视觉表示。
- en: 'If you are thinking that calculating these angles based on the data you have
    is going to be a big hassle, you are absolutely correct. This is why D3 provides
    specific layout manager to help you calculate these angles, and which we will
    cover in the next chapter. For now, let''s focus on understanding the basic mechanism
    behind the scenes so that when it is time to introduce the layout manager or if
    you ever need to set the angles manually, you will be well-equipped to do so.
    D3 arc generator is created using the `d3.svg.arc` function:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为根据您拥有的数据计算这些角度将会很麻烦，您完全正确。这就是为什么 D3 提供了特定的布局管理器来帮助您计算这些角度，我们将在下一章中介绍。现在，让我们专注于理解背后的基本机制，以便在介绍布局管理器或您需要手动设置角度时，您将能够很好地完成这些工作。D3
    弧生成器是通过使用 `d3.svg.arc` 函数创建的：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `d3.svg.arc` function optionally has `outerRadius` and `innerRadius` settings.
    When `innerRadius` is set, the arc generator will produce an image of annulus
    (donut) instead of a circle. Finally, the D3 arc is also implemented using the
    `svg:path` element, and thus similar to the line and area generator, `d3.svg.arc`
    generator function can be invoked (see line `D`) to generate the `d` formula for
    the `svg:path` element:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.svg.arc` 函数可选地有 `outerRadius` 和 `innerRadius` 设置。当设置 `innerRadius` 时，弧生成器将生成一个环面（甜甜圈）的图像，而不是一个圆。最后，D3弧也是使用
    `svg:path` 元素实现的，因此与线和面积生成器类似，`d3.svg.arc` 生成器函数可以调用（见行 `D`）来生成 `svg:path` 元素的
    `d` 公式：'
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: One additional element worth mentioning here is the `svg:g` element. This element
    does not define any shape itself, but serves rather as a container element used
    to group other elements, in this case, the `path.arc` elements. Transformation
    applied to the `g` element is applied to all the child elements while its attributes
    are also inherited by its child elements.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 值得在这里提及的一个额外元素是 `svg:g` 元素。此元素本身不定义任何形状，而是一个容器元素，用于组合其他元素，在这种情况下，是 `path.arc`
    元素。应用于 `g` 元素的变换应用于所有子元素，同时其属性也被其子元素继承。
- en: Implementing arc transition
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现弧过渡
- en: One area where arc differs significantly from other shapes, such as line and
    area, is its transition. For most of the shapes we covered so far, including simple
    SVG built-in shapes, you can rely on D3 transition and interpolation to handle
    their animation. However, this is not the case when dealing with arc. We will
    explore the arc transition technique in this recipe.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 弧与其他形状（如线和面积）显著不同的一个领域是其过渡效果。到目前为止，我们涵盖的大多数形状，包括简单的SVG内置形状，你可以依赖D3过渡和插值来处理它们的动画。然而，当处理弧时，情况并非如此。我们将在这个菜谱中探索弧过渡技术。
- en: Getting Ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc-transition.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc-transition.html)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc-transition.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/arc-transition.html)'
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will animate a multi-slice annulus transitioning each slice
    starting from angle `0` to its final desired angle and eventually reaching a full
    annulus:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将动画化一个多切片圆环，每个切片从角度 `0` 开始过渡到其最终所需的角度，并最终形成一个完整的圆环：
- en: '[PRE22]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding code generates an arc which starts rotating and eventually becomes
    a complete annulus:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成一个弧，它开始旋转并最终形成一个完整的圆环：
- en: '![How to do it...](img/2162OS_07_10.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_07_10.jpg)'
- en: Arc transition with tweening
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 带插值的弧过渡
- en: ']'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: How it works...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When confronted with the requirement of such transition, your first thought
    might be using the vanilla D3 transition while relying on built-in interpolations
    to generate the animation. Here is the code snippet which will do just that:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 面对这样的过渡要求时，你首先可能想到的是使用纯D3过渡，同时依赖内置插值来生成动画。以下代码片段将完成这项工作：
- en: '[PRE23]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As shown with highlighted lines in the preceding code snippet, with this approach
    we initially created slice path with both `startAngle` and `endAngle` set to zero.
    Then, through transition we interpolated the path `"d"` attribute to its final
    angle using the arc generator function `arc(d)`. This approach seems to make sense,
    however, what it generates is the transition shown in the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码片段中突出显示的行所示，我们最初创建了一个具有 `startAngle` 和 `endAngle` 都设置为零的切片路径。然后，通过过渡，我们使用弧生成器函数
    `arc(d)` 将路径 `"d"` 属性插值到其最终角度。这种方法看起来似乎有道理，然而，它生成的是以下所示的过渡：
- en: '![How it works...](img/2162OS_07_11.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2162OS_07_11.jpg)'
- en: Arc transition without tweening
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 无插值的弧过渡
- en: 'This is obviously not the animation we want. The reason for this strange transition
    is that by directly creating a transition on the `svg:path` attribute `"d"`, we
    are instructing D3 to interpolate this string:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然不是我们想要的动画。这种奇怪过渡的原因是，通过直接在 `svg:path` 属性 `"d"` 上创建过渡，我们指示D3插值这个字符串：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To this string linearly:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将此字符串线性化：
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Hence, this particular transition effect.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种特定的过渡效果。
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Though this transition effect is not what we desire in this example, this is
    still a good showcase of how flexible and powerful built-in D3 transition is.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个过渡效果不是我们在这个例子中想要的，但这仍然是一个很好的展示，说明了内置的D3过渡是多么灵活和强大。
- en: 'In order to achieve the transition effect we want, we need to leverage the
    D3 attribute tweening (for detailed description on tweening, see the *Using tweening*
    recipe of [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们想要的过渡效果，我们需要利用 D3 属性缓动（有关缓动的详细描述，请参阅[第6章](ch06.html "第6章。以风格过渡")中的*使用缓动*配方，*以风格过渡*）：
- en: '[PRE26]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, instead of transitioning the `svg:path` attribute `"d"` directly, we created
    a tweening function on line `A`. As you can recall, D3 `attrTween` expects a factory
    function for a tween function. In this case, we start our tweening from angle
    zero (see line `B`). Then we create a compound object interpolator on line `C`,
    which will interpolate both start and end angles for each slice. Finally on line
    `D`, the arc generator is used to generate a proper `svg:path` formula using already
    interpolated angles. This is how a smooth transition of properly-angled arcs can
    be created through custom attribute tweening.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不是直接过渡 `svg:path` 属性的 `"d"`，而是在行 `A` 上创建了一个缓动函数。如您所回忆的，D3 的 `attrTween`
    期望一个用于缓动函数的工厂函数。在这种情况下，我们从角度零开始缓动（参见行 `B`）。然后在行 `C` 上创建了一个复合对象插值器，它将为每个切片插值起始和结束角度。最后在行
    `D` 上，使用弧生成器根据已经插值的角生成适当的 `svg:path` 公式。这就是如何通过自定义属性缓动创建平滑过渡的适当角度弧的方法。
- en: There's more...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: D3 also provides support for other shape generators, for example, symbol, chord,
    and diagonal. However, due to their simplicity and the limited scope in this book
    we will not cover them individually here, although we will cover them as parts
    of other more complex visual constructs in the following chapters. More importantly,
    with well-grounded understanding of these shape generators that we introduced
    in this chapter, you should be able to pick up other D3 shape generators without
    much trouble.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: D3 还提供了对其他形状生成器的支持，例如符号、和弦和斜线。然而，由于它们的简单性和本书的有限范围，我们在这里不会单独介绍它们，尽管我们将在下一章的其他更复杂的视觉结构中介绍它们。更重要的是，通过我们对本章中介绍的这些形状生成器的扎实理解，您应该能够轻松地掌握其他
    D3 形状生成器。
- en: See also
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information on transition and tweening, refer to the Using tweening
    recipe in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于过渡和缓动的信息，请参阅[第6章](ch06.html "第6章。以风格过渡")中的使用缓动配方，*以风格过渡*
