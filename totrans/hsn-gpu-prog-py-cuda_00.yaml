- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Greetings and salutations! This text is an introductory guide to GPU programming
    with Python and CUDA. **GPU** may stand for **Graphics Programming Unit**, but
    we should be clear that this book is *not* about graphics programming—it is essentially
    an introduction to **General-Purpose GPU Programming**, or **GPGPU** **Programming**
    for short. Over the last decade, it has become clear that GPUs are well suited
    for computations besides rendering graphics, particularly for parallel computations
    that require a great deal of computational throughput. To this end, NVIDIA released
    the CUDA Toolkit, which has made the world of GPGPU programming all the more accessible
    to just about anyone with some C programming knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of *Hands-On GPU Programming with Python and CUDA* is to get you started
    in the world of GPGPU programming as quickly as possible. We have strived to come
    up with fun and interesting examples and exercises for each chapter; in particular,
    we encourage you to type in these examples and run them from your favorite Python
    environment as you go along (Spyder, Jupyter, and PyCharm are all suitable choices).
    This way, you will eventually learn all of the requisite functions and commands,
    as well as gain an intuition of how a GPGPU program should be written.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, GPGPU parallel programming seems very complex and daunting, especially
    if you've only done CPU programming in the past. There are so many new concepts
    and conventions you have to learn that it may seem like you're starting all over
    again at zero. During these times, you'll have to have some faith that your efforts
    to learn this field are not for naught. With a little bit of initiative and discipline,
    this subject will seem like second nature to you by the time you reach the end
    of the text.
  prefs: []
  type: TYPE_NORMAL
- en: Happy programming!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at one person in particular—that is, myself in the year 2014,
    when I was trying to develop a GPU-based simulation for my doctoral studies in
    math. I was poring over multiple books and manuals on GPU programming, trying
    to make the slightest sense of the field; most texts seemed happy to throw an
    endless parade of hardware schematics and buzzwords at the reader on every page,
    while the actual *programming* took a back seat.
  prefs: []
  type: TYPE_NORMAL
- en: This book is primarily aimed at those who want to actually *do* *GPU programming*,
    but without getting bogged down with gritty technical details and hardware schematics.
    We will program the GPU in proper C/C++ (CUDA C) in this text, but we will write
    it *inline* within Python code by way of the PyCUDA module. PyCUDA allows us to
    only write the necessary low-level GPU code that we need, while it automatically
    handles all of the redundancies of compiling, linking, and launching code onto
    a GPU for us.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](f9c54d0e-6a18-49fc-b04c-d44a95e011a2.xhtml), *Why GPU Programming?*,
    gives us some motivations as to why we should learn this field, and how to apply
    Amdahl''s Law to estimate potential performance improvements from translating
    a serial program to making use of a GPU.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](4c7f89ab-7136-4cc1-b168-12cb78d97a6a.xhtml), *Setting Up Your GPU
    Programming Environment*, explains how to set up an appropriate Python and C++
    development environment for CUDA under both Windows and Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](6ab0cd69-e439-4cfb-bf1a-4247ec58c94e.xhtml), *Getting Started with
    PyCUDA*, shows the most essential skills we will need for programming GPUs from
    Python. We will notably see how to transfer data to and from a GPU using PyCUDA''s
    gpuarray class, and how to compile simple CUDA kernels with PyCUDA''s ElementwiseKernel
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](5a5f4317-50c7-4ce6-9d04-ac3be4c6d28b.xhtml), *Kernels, Threads,
    Blocks, and Grids*, teaches the fundamentals of writing effective CUDA kernels,
    which are parallel functions that are launched on the GPU. We will see how to
    write CUDA device functions ("serial" functions called directly by CUDA kernels),
    and learn about CUDA''s abstract grid/block structure and the role it plays in
    launching kernels.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ea648e20-8c72-44a9-880d-11469d0e291f.xhtml), *Streams, Events,
    Contexts, and Concurrency*, covers the notion of CUDA Streams, which is a feature
    that allows us to launch and synchronize many kernels onto a GPU concurrently.
    We will see how to use CUDA Events to time kernel launches, and how to create
    and use CUDA Contexts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](6d1c808f-1dc2-4454-b0b8-d0a36bc3c908.xhtml), *Debugging and Profiling
    Your CUDA Code*, fill in some of the gaps we have in terms of pure CUDA C programming,
    and shows us how to use the NVIDIA Nsight IDE for debugging and development, as
    well as how to use the NVIDIA profiling tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](55146879-4b7e-4774-9a8b-cc5c80c04ed8.xhtml), *Using the CUDA Libraries
    with Scikit-CUDA*, gives us a brief tour of some of the important standard CUDA
    libraries by way of the Python Scikit-CUDA module, including cuBLAS, cuFFT, and
    cuSOLVER.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](d374ea77-f9e5-4d38-861d-5295ef3e3fbf.xhtml), *The CUDA Device Function
    Libraries and Thrust*, shows us how to use the cuRAND and CUDA Math API libraries
    in our code, as well as how to use CUDA Thrust C++ containers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](3562f1e0-a53d-470f-9b4d-94fa41b1b2fa.xhtml), *Implementation of
    a Deep Neural Network*, serves as a capstone in which we learn how to build an
    entire deep neural network from scratch, applying many of the ideas we have learned
    in the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](5383b46f-8dc6-4e17-ab35-7f6bd35f059f.xhtml), *Working with Compiled
    GPU Code*, shows us how to interface our Python code with pre-compiled GPU code,
    using both PyCUDA and Ctypes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](e853faad-3ee4-4df7-9cdb-98f74e435527.xhtml), *Performance Optimization
    in CUDA*, teaches some very low-level performance optimization tricks, especially
    in relation to CUDA, such as warp shuffling, vectorized memory access, using inline
    PTX assembly, and atomic operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](2d464c61-de29-49fa-826a-a7437c368d6a.xhtml), *Where to Go from
    Here*, is an overview of some of the educational and career paths you will have
    that will build upon your now-solid foundation in GPU programming.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is actually quite a technical subject. To this end, we will have to make
    a few assumptions regarding the reader''s programming background. To this end,
    we will assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You have an intermediate level of programming experience in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are familiar with standard Python scientific packages, such as NumPy, SciPy,
    and Matplotlib.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have an intermediate ability in any C-based programming language (C, C++,
    Java, Rust, Go, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You understand the concept of dynamic memory allocation in C (particularly how
    to use the C `malloc` and `free` functions.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPU programming is mostly applicable to fields that are very scientific or
    mathematical in nature, so many (if not most) of the examples will make use of
    some math. For this reason, we are assuming that the reader has some familiarity
    with first or second-year college mathematics, including:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Trigonometry (the sinusoidal functions: sin, cos, tan …)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculus (integrals, derivatives, gradients)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistics (uniform and normal distributions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear Algebra (vectors, matrices, vector spaces, dimensionality).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't worry if you haven't learned some of these topics, or if it's been a while,
    as we will try to review some of the key programming and math concepts as we go
    along.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be making another assumption here. Remember that we will be working
    only with CUDA in this text, which is a proprietary programming language for NVIDIA
    hardware. We will, therefore, need to have some specific hardware in our possession
    before we get started. So, I will assume that the reader has access to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A 64-bit x86 Intel/AMD-based PC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 Gigabytes (GB) of RAM or more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An entry-level NVIDIA GTX 1050 GPU (Pascal Architecture) or better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader should know that most older GPUs will probably work fine with most,
    if not all, examples in this text, but the examples in this text have only been
    tested on a GTX 1050 under Windows 10 and a GTX 1070 under Linux. Specific instructions
    regarding setup and configuration are given in [Chapter 2](4c7f89ab-7136-4cc1-b168-12cb78d97a6a.xhtml),
    *Setting Up Your GPU Programming Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781788993913_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/9781788993913_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "We can now use the `cublasSaxpy` function."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in, and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
