["```py\nx <- c(1, 2, 3, 4, 5) \ny <- numeric() \nsum_x <- 0 \nfor (xi in x) { \n  sum_x <- sum_x + xi \n  y <- c(y, sum_x) \n} \ny \n## [1]  1  3  6 10 15 \n\n```", "```py\nmy_cumsum1 <- function(x) { \n  y <- numeric() \n  sum_x <- 0 \n  for (xi in x) { \n    sum_x <- sum_x + xi \n    y <- c(y, sum_x) \n  } \n  y \n} \n\n```", "```py\nmy_cumsum2 <- function(x) { \n  y <- numeric(length(x)) \n  if (length(y)) { \n    y[[1]] <- x[[1]] \n    for (i in 2:length(x)) { \n      y[[i]] <- y[[I - 1]] + x[[i]] \n    } \n  } \n  y \n} \n\n```", "```py\nx <- rnorm(100) \nall.equal(cumsum(x), my_cumsum1(x)) \n## [1] TRUE \nall.equal(cumsum(x), my_cumsum2(x)) \n## [1] TRUE \n\n```", "```py\nx <- rnorm(100) \nsystem.time(my_cumsum1(x)) \n##    user  system elapsed  \n##       0       0       0 \n\n```", "```py\nsystem.time(my_cumsum2(x)) \n##    user  system elapsed  \n##   0.000   0.000   0.001 \n\n```", "```py\nsystem.time(cumsum(x)) \n##    user  system elapsed  \n##       0       0       0 \n\n```", "```py\nx <- rnorm(1000) \nsystem.time(my_cumsum1(x)) \n##    user  system elapsed  \n##   0.000   0.000   0.003 \nsystem.time(my_cumsum2(x)) \n##    user  system elapsed  \n##   0.004   0.000   0.001 \nsystem.time(cumsum(x)) \n##    user  system elapsed  \n##       0       0       0 \n\n```", "```py\nx <- rnorm(10000) \nsystem.time(my_cumsum1(x)) \n##    user  system elapsed  \n##   0.208   0.000   0.211 \nsystem.time(my_cumsum2(x)) \n##    user  system elapsed  \n##   0.012   0.004   0.013 \nsystem.time(cumsum(x)) \n##    user  system elapsed  \n##       0       0       0 \n\n```", "```py\nx <- rnorm(100000) \nsystem.time(my_cumsum1(x)) \n##    user  system elapsed  \n##  25.732   0.964  26.699 \nsystem.time(my_cumsum2(x)) \n##    user  system elapsed  \n##   0.124   0.000   0.123 \nsystem.time(cumsum(x)) \n##    user  system elapsed  \n##       0       0       0 \n\n```", "```py\ninstall.packages(\"microbenchmark\") \n\n```", "```py\nlibrary(microbenchmark) \nx <- rnorm(100) \nmicrobenchmark(my_cumsum1(x), my_cumsum2(x), cumsum(x)) \n## Unit: nanoseconds \n##           expr    min       lq      mean   median       uq \n##  my_cumsum1(x)  58250  64732.5  68353.51  66396.0  71840.0 \n##  my_cumsum2(x) 120150 127634.5 131042.40 130739.5 133287.5 \n##      cumsum(x)    295    376.5    593.47    440.5    537.5 \n##     max neval cld \n##   88228   100  b  \n##  152845   100   c \n##    7182   100 a \n\n```", "```py\nx <- rnorm(1000) \nmicrobenchmark(my_cumsum1(x), my_cumsum2(x), cumsum(x)) \n## Unit: microseconds \n##           expr      min        lq       mean    median \n##  my_cumsum1(x) 1600.186 1620.5190 2238.67494 1667.5605 \n##  my_cumsum2(x) 1034.973 1068.4600 1145.00544 1088.4090 \n##      cumsum(x)    1.806    2.1505    3.43945    3.4405 \n##         uq      max neval cld \n##  3142.4610 3750.516   100   c \n##  1116.2280 2596.908   100  b  \n##     4.0415   11.007   100 a \n\n```", "```py\nx <- rnorm(5000) \nmicrobenchmark(my_cumsum1(x), my_cumsum2(x), cumsum(x)) \n## Unit: microseconds \n##           expr       min        lq        mean     median \n##  my_cumsum1(x) 42646.201 44043.050 51715.59988 44808.9745 \n##  my_cumsum2(x)  5291.242  5364.568  5718.19744  5422.8950 \n##      cumsum(x)    10.183    11.565    14.52506    14.6765 \n##         uq        max neval cld \n##  46153.351 135805.947   100   c \n##   5794.821  10619.352   100  b  \n##     15.536     37.202   100 a \n\n```", "```py\nx <- rnorm(10000) \nmicrobenchmark(my_cumsum1(x), my_cumsum2(x), cumsum(x), times = 10) \n## Unit: microseconds \n##           expr        min         lq        mean     median \n##  my_cumsum1(x) 169609.730 170687.964 198782.7958 173248.004 \n##  my_cumsum2(x)  10682.121  10724.513  11278.0974  10813.395 \n##      cumsum(x)     20.744     25.627     26.0943     26.544 \n##         uq        max neval cld \n##  253662.89 264469.677    10   b \n##   11588.99  13487.812    10  a  \n##      27.64     29.163    10  a \n\n```", "```py\nlibrary(data.table) \nbenchmark <- function(ns, times = 30) { \n  results <- lapply(ns, function(n) { \n    x <- rnorm(n) \n    result <- microbenchmark(my_cumsum1(x), my_cumsum2(x), cumsum(x),  \ntimes = times, unit = \"ms\") \n    data <- setDT(summary(result)) \n    data[, n := n] \n    data \n  }) \nrbindlist(results) \n} \n\n```", "```py\nbenchmarks <- benchmark(seq(100, 3000, 100)) \n\n```", "```py\nlibrary(ggplot2) \nggplot(benchmarks, aes(x = n, color = expr)) + \n  ggtitle(\"Microbenchmark on cumsum functions\") + \n  geom_point(aes(y = median)) + \n  geom_errorbar(aes(ymin = lq, ymax = uq)) \n\n```", "```py\nbenchmarks2 <- benchmark(seq(2, 600, 10), times = 50) \n\n```", "```py\nggplot(benchmarks2, aes(x = n, color = expr)) + \n  ggtitle(\"Microbenchmark on cumsum functions over small input\") + \n  geom_point(aes(y = median)) + \n  geom_errorbar(aes(ymin = lq, ymax = uq)) \n\n```", "```py\nbenchmarks3 <- benchmark(seq(10, 800, 10), times = 50) \nggplot(benchmarks3, aes(x = n, color = expr)) + \n  ggtitle(\"Microbenchmark on cumsum functions with break even\") + \n  geom_point(aes(y = median)) + \n  geom_errorbar(aes(ymin = lq, ymax = uq)) \n\n```", "```py\nx <- rnorm(1000) \ntmp <- tempfile(fileext = \".out\") \nRprof(tmp) \nfor (i in 1:1000) { \n  my_cumsum1(x) \n} \nRprof(NULL) \nsummaryRprof(tmp) \n## $by.self \n##              self.time self.pct total.time total.pct \n## \"c\"               2.42    82.88       2.42     82.88 \n## \"my_cumsum1\"      0.46    15.75       2.92    100.00 \n## \"+\"               0.04     1.37       0.04      1.37 \n## $by.total \n##              total.time total.pct self.time self.pct \n## \"my_cumsum1\"       2.92    100.00      0.46    15.75 \n## \"c\"                2.42     82.88      2.42    82.88 \n## \"+\"                0.04      1.37      0.04     1.37 \n##  \n## $sample.interval \n## [1] 0.02 \n##  \n## $sampling.time \n## [1] 2.92 \n\n```", "```py\ntmp <- tempfile(fileext = \".out\") \nRprof(tmp) \nfor (i in 1:1000) { \n  my_cumsum2(x) \n} \nRprof(NULL) \nsummaryRprof(tmp) \n## $by.self \n##              self.time self.pct total.time total.pct \n## \"my_cumsum2\"      1.42    97.26       1.46    100.00 \n## \"-\"               0.04     2.74       0.04      2.74 \n##  \n## $by.total \n##              total.time total.pct self.time self.pct \n## \"my_cumsum2\"       1.46    100.00      1.42    97.26 \n## \"-\"                0.04      2.74      0.04     2.74 \n##  \n## $sample.interval \n## [1] 0.02 \n##  \n## $sampling.time \n## [1] 1.46 \n\n```", "```py\nmy_cumsum1 <- function(x) {\n   y <- numeric()\n   sum_x <- 0\n   for (xi in x) {\n     sum_x <- sum_x + xi\n     y <- c(y, sum_x)\n   }\n   y\n }\n\n x <- rnorm(1000)\n\n for (i in 1:1000) {\n   my_cumsum1(x)\n }\n```", "```py\ntmp <- tempfile(fileext = \".out\") \nRprof(tmp, line.profiling = TRUE) \nsource(\"code/my_cumsum1.R\", keep.source = TRUE) \nRprof(NULL) \nsummaryRprof(tmp, lines = \"show\") \n## $by.self \n##                self.time self.pct total.time total.pct \n## my_cumsum1.R#6      2.38    88.15       2.38     88.15 \n## my_cumsum1.R#5      0.26     9.63       0.26      9.63 \n## my_cumsum1.R#4      0.06     2.22       0.06      2.22 \n##  \n## $by.total \n##                 total.time total.pct self.time self.pct \n## my_cumsum1.R#14       2.70    100.00      0.00     0.00 \n## my_cumsum1.R#6        2.38     88.15      2.38    88.15 \n## my_cumsum1.R#5        0.26      9.63      0.26     9.63 \n## my_cumsum1.R#4        0.06      2.22      0.06     2.22 \n##  \n## $by.line \n##                 self.time self.pct total.time total.pct \n## my_cumsum1.R#4       0.06     2.22       0.06      2.22 \n## my_cumsum1.R#5       0.26     9.63       0.26      9.63 \n## my_cumsum1.R#6       2.38    88.15       2.38     88.15 \n## my_cumsum1.R#14      0.00     0.00       2.70    100.00 \n##  \n## $sample.interval \n## [1] 0.02 \n##  \n## $sampling.time \n## [1] 2.7 \n\n```", "```py\ninstall.packages(\"profvis\") \n\n```", "```py\nlibrary(profvis)\nprofvis({\n  my_cumsum1 <- function(x) {\n    y <- numeric()\n    sum_x <- 0\n    for (xi in x) {\n      sum_x <- sum_x + xi\n      y <- c(y, sum_x)\n    }\n    y\n  }\n\n  x <- rnorm(1000)\n\n  for (i in 1:1000) {\n    my_cumsum1(x)\n  }\n})\n```", "```py\nprofvis({\n  my_cumsum2 <- function(x) {\n    y <- numeric(length(x))\n    y[[1]] <- x[[1]]\n    for (i in 2:length(x)) {\n      y[[i]] <- y[[i-1]] + x[[i]]\n    }\n    y\n  }\n\n  x <- rnorm(1000)\n\n  for (i in 1:1000) {\n    my_cumsum2(x)\n  }\n})\n```", "```py\nn <- 10000 \nmicrobenchmark(grow_by_index = { \n  x <- list() \n  for (i in 1:n) x[[i]] <- i \n}, preallocated = { \n  x <- vector(\"list\", n) \n  for (i in 1:n) x[[i]] <- i \n}, times = 20) \n## Unit: milliseconds \n##           expr        min         lq       mean     median \n##  grow_by_index 258.584783 261.639465 299.781601 263.896162 \n##   preallocated   7.151352   7.222043   7.372342   7.257661 \n##          uq        max neval cld \n##  351.887538 375.447134    20   b \n##    7.382103   8.612665    20  a \n\n```", "```py\ncumsum \n## function (x)  .Primitive(\"cumsum\") \n\n```", "```py\ndiff_for <- function(x) { \n  n <- length(x) - 1 \n  res <- numeric(n) \n  for (i in seq_len(n)) { \n    res[[i]] <- x[[i + 1]] - x[[i]] \n  } \n  res \n} \n\n```", "```py\ndiff_for(c(2, 3, 1, 5)) \n## [1]  1 -2  4 \n\n```", "```py\nx <- rnorm(1000) \nall.equal(diff_for(x), diff(x)) \n## [1] TRUE \n\n```", "```py\nmicrobenchmark(diff_for(x), diff(x)) \n## Unit: microseconds \n##         expr      min        lq       mean    median \n##  diff_for(x) 1034.028 1078.9075 1256.01075 1139.1270 \n##      diff(x)   12.057   14.2535   21.72772   17.5705 \n##         uq      max neval cld \n##  1372.1145 2634.128   100   b \n##    25.4525   75.850   100  a \n\n```", "```py\nmat <- matrix(1:12, nrow = 3) \nmat \n##      [,1] [,2] [,3] [,4] \n## [1,]    1    4    7   10 \n## [2,]    2    5    8   11 \n## [3,]    3    6    9   12 \n\n```", "```py\nmy_transpose <- function(x) {\n   stopifnot(is.matrix(x))\n   res <- matrix(vector(mode(x), length(x)), \n     nrow = ncol(x), ncol = nrow(x), \n     dimnames = dimnames(x)[c(2, 1)])\n   for (i in seq_len(ncol(x))) {\n     for (j in seq_len(nrow(x))) {\n       res[i, j] <- x[j, i]\n     }\n   }\n   res\n }\n```", "```py\nmy_transpose(mat) \n##      [,1] [,2] [,3] \n## [1,]    1    2    3 \n## [2,]    4    5    6 \n## [3,]    7    8    9 \n## [4,]   10   11   12 \n\n```", "```py\nall.equal(my_transpose(mat), t(mat)) \n## [1] TRUE \n\n```", "```py\nmicrobenchmark(my_transpose(mat), t(mat)) \n## Unit: microseconds \n##               expr    min     lq     mean  median      uq \n##  my_transpose(mat) 22.795 24.633 29.47941 26.0865 35.5055 \n##             t(mat)  1.576  1.978  2.87349  2.3375  2.7695 \n##     max neval cld \n##  71.509   100   b \n##  16.171   100  a \n\n```", "```py\nmat <- matrix(rnorm(25000), nrow = 1000) \nall.equal(my_transpose(mat), t(mat)) \n## [1] TRUE \nmicrobenchmark(my_transpose(mat), t(mat)) \n## Unit: microseconds \n##               expr       min         lq      mean \n##  my_transpose(mat) 21786.241 22456.3990 24466.055 \n##             t(mat)    36.611    46.2045    61.047 \n##      median        uq        max neval cld \n##  23821.5905 24225.142 113395.811   100   b \n##     57.7505    68.694    142.126   100   a \n\n```", "```py\nmicrobenchmark(my_transpose(mat), t(mat), t.default(mat)) \n## Unit: microseconds \n##               expr       min         lq        mean \n##  my_transpose(mat) 21773.751 22498.6420 23673.26089 \n##             t(mat)    37.853    48.8475    63.57713 \n##     t.default(mat)    35.518    41.0305    52.97680 \n##      median         uq       max neval cld \n##  23848.6625 24139.7675 29034.267   100   b \n##     61.3565    69.6655   140.061   100   a  \n##     46.3095    54.0655   146.755   100   a \n\n```", "```py\nadd <- function(x, y) {\n   stopifnot(length(x) == length(y),\n     is.numeric(x), is.numeric(y))\n   z <- numeric(length(x))\n   for (i in seq_along(x)) {\n     z[[i]] <- x[[i]] + y[[i]]\n   }\n   z\n }\n```", "```py\nx <- rnorm(10000) \ny <- rnorm(10000) \nall.equal(add(x, y), x + y) \n## [1] TRUE \n\n```", "```py\nmicrobenchmark(add(x, y), x + y) \n## Unit: microseconds \n##       expr      min         lq        mean     median \n##  add(x, y) 9815.495 10055.7045 11478.95003 10712.7710 \n##      x + y   10.260    12.0345    17.31862    13.3995 \n##         uq       max neval cld \n##  12598.366 18754.504   100   b \n##     22.208    56.969   100  a \n\n```", "```py\nalgo1_for <- function(n) { \n  res <- 0 \n  for (i in seq_len(n)) { \n    res <- res + 1 /i ^ 2 \n  } \n  res \n} \n\n```", "```py\nalgo1_vec <- function(n) { \n  sum(1 / seq_len(n) ^ 2) \n} \n\n```", "```py\nalgo1_for(10) \n## [1] 1.549768 \nalgo1_vec(10) \n## [1] 1.549768 \n\n```", "```py\nmicrobenchmark(algo1_for(200), algo1_vec(200)) \n## Unit: microseconds \n##            expr    min       lq      mean   median      uq \n##  algo1_for(200) 91.727 101.2285 104.26857 103.6445 105.632 \n##  algo1_vec(200)  2.465   2.8015   3.51926   3.0355   3.211 \n##      max neval cld \n##  206.295   100   b \n##   19.426   100  a \nmicrobenchmark(algo1_for(1000), algo1_vec(1000)) \n## Unit: microseconds \n##             expr     min       lq      mean  median \n##  algo1_for(1000) 376.335 498.9320 516.63954 506.859 \n##  algo1_vec(1000)   8.718   9.1175   9.82515   9.426 \n##        uq      max neval cld \n##  519.2420 1823.502   100   b \n##    9.8955   20.564   100  a \n\n```", "```py\nlibrary(compiler) \ndiff_cmp <- cmpfun(diff_for) \ndiff_cmp \n## function(x) { \n##   n <- length(x) - 1 \n##   res <- numeric(n) \n##   for (i in seq_len(n)) { \n##     res[[i]] <- x[[i + 1]] - x[[i]] \n##   } \n##   res \n## } \n## <bytecode: 0x93aec08> \n\n```", "```py\nx <- rnorm(10000) \nmicrobenchmark(diff_for(x), diff_cmp(x), diff(x)) \n## Unit: microseconds \n##         expr       min         lq       mean     median \n##  diff_for(x) 10664.387 10940.0840 11684.3285 11357.9330 \n##  diff_cmp(x)   732.110   740.7610   760.1985   751.0295 \n##      diff(x)    80.824    91.2775   107.8473   103.8535 \n##        uq       max neval cld \n##  12179.98 16606.291   100   c \n##    763.66  1015.234   100  b  \n##    115.11   219.396   100 a \n\n```", "```py\nalgo1_cmp <- cmpfun(algo1_for) \nalgo1_cmp \n## function(n) { \n##   res <- 0 \n##   for (i in seq_len(n)) { \n##     res <- res + 1 / i ^ 2 \n##   } \n##   res \n## } \n## <bytecode: 0xa87e2a8> \n\n```", "```py\nn <- 1000 \nmicrobenchmark(algo1_for(n), algo1_cmp(n), algo1_vec(n)) \n## Unit: microseconds \n##          expr     min       lq      mean   median       uq \n##  algo1_for(n) 490.791 499.5295 509.46589 505.7560 517.5770 \n##  algo1_cmp(n)  55.588  56.8355  58.10490  57.8270  58.7140 \n##  algo1_vec(n)   8.688   9.2150   9.79685   9.4955   9.8895 \n##      max neval cld \n##  567.680   100   c \n##   69.734   100  b  \n##   19.765   100 a \n\n```", "```py\nalgo1_vec_cmp <- cmpfun(algo1_vec) \nmicrobenchmark(algo1_vec(n), algo1_vec_cmp(n), times = 10000) \n## Unit: microseconds \n##              expr  min    lq      mean median    uq \n##      algo1_vec(n) 8.47 8.678 20.454858  8.812 9.008 \n##  algo1_vec_cmp(n) 8.35 8.560  9.701012  8.687 8.864 \n##        max neval cld \n##  96376.483 10000   a \n##   1751.431 10000   a \n\n```", "```py\nset.seed(1) \nsim_data <- 100 * cumprod(1 + rnorm(500, 0, 0.006)) \nplot(sim_data, type = \"s\", ylim = c(85, 115), \n  main = \"A simulated random path\") \nabline(h = 100, lty = 2, col = \"blue\") \nabline(h = 100 * (1 + 0.1 * c(1, -1)), lty = 3, col = \"red\") \n\n```", "```py\nsimulate <- function(i, p = 100, n = 10000, \n   r = 0, sigma = 0.0005, margin = 0.1) {\n   ps <- p * cumprod(1 + rnorm(n, r, sigma))\n   list(id = i, \n     first = ps[[1]], \n     high = max(ps), \n     low = min(ps), \n     last = ps[[n]],\n     signal = any(ps > p * (1 + margin) | ps < p * (1 - margin)))\n }\n```", "```py\nsimulate(1) \n## $id \n## [1] 1 \n##  \n## $first \n## [1] 100.0039 \n##  \n## $high \n## [1] 101.4578 \n##  \n## $low \n## [1] 94.15108 \n##  \n## $last \n## [1] 96.13973 \n##  \n## $signal \n## [1] FALSE \n\n```", "```py\nsystem.time(res <- lapply(1:10000, simulate)) \n##    user  system elapsed  \n##   8.768   0.000   8.768 \n\n```", "```py\nlibrary(data.table) \nres_table <- rbindlist(res) \nhead(res_table) \n##    id     first     high      low      last signal \n## 1:  1 100.03526 100.7157 93.80330 100.55324  FALSE \n## 2:  2 100.03014 104.7150 98.85049 101.97831  FALSE \n## 3:  3  99.99356 104.9834 95.28500  95.59243  FALSE \n## 4:  4  99.93058 103.4315 96.10691  97.22223  FALSE \n## 5:  5  99.99785 100.6041 94.12958  95.97975  FALSE \n## 6:  6 100.03235 102.1770 94.65729  96.49873  FALSE \n\n```", "```py\nres_table[, sum(signal) /.N] \n## [1] 0.0881 \n\n```", "```py\nlibrary(parallel) \ncl <- makeCluster(detectCores()) \n\n```", "```py\nsystem.time(res <- parLapply(cl, 1:10000, simulate)) \n##    user  system elapsed  \n##   0.024   0.008   3.772 \n\n```", "```py\nstopCluster(cl) \n\n```", "```py\nlength(res) \n## [1] 10000 \nres_table <- rbindlist(res) \nres_table[, sum(signal) /.N] \n## [1] 0.0889 \n\n```", "```py\ncl <- makeCluster(detectCores()) \nn <- 1 \nparLapply(cl, 1:3, function(x) x + n) \n## Error in checkForRemoteErrors(val): 3 nodes produced errors; first error: object 'n' not found \nstopCluster(cl) \n\n```", "```py\nn <- 100 \ndata <- data.frame(id = 1:n,  x = rnorm(n), y = rnorm(n)) \n\ntake_sample <- function(n) { \n  data[sample(seq_len(nrow(data)), \n    size = n, replace = FALSE), ] \n} \n\n```", "```py\ncl <- makeCluster(detectCores()) \n\n```", "```py\nclusterEvalQ(cl, Sys.getpid()) \n## [[1]] \n## [1] 20714 \n##  \n## [[2]] \n## [1] 20723 \n##  \n## [[3]] \n## [1] 20732 \n##  \n## [[4]] \n## [1] 20741 \n\n```", "```py\nclusterEvalQ(cl, ls()) \n## [[1]] \n## character(0) \n##  \n## [[2]] \n## character(0) \n##  \n## [[3]] \n## character(0) \n##  \n## [[4]] \n## character(0) \n\n```", "```py\nclusterExport(cl, c(\"data\", \"take_sample\")) \nclusterEvalQ(cl, ls()) \n## [[1]] \n## [1] \"data\"        \"take_sample\" \n##  \n## [[2]] \n## [1] \"data\"        \"take_sample\" \n##  \n## [[3]] \n## [1] \"data\"        \"take_sample\" \n##  \n## [[4]] \n## [1] \"data\"        \"take_sample\" \n\n```", "```py\nclusterEvalQ(cl, take_sample(2)) \n## [[1]] \n##    id         x           y \n## 88 88 0.6519981  1.43142886 \n## 80 80 0.7985715 -0.04409101 \n##  \n## [[2]] \n##    id          x          y \n## 65 65 -0.4705287 -1.0859630 \n## 35 35  0.6240227 -0.3634574 \n##  \n## [[3]] \n##    id         x          y \n## 75 75 0.3994768 -0.1489621 \n## 8   8 1.4234844  1.8903637 \n##  \n## [[4]] \n##    id         x         y \n## 77 77 0.4458477  1.420187 \n## 9   9 0.3943990 -0.196291 \n\n```", "```py\ninvisible(clusterCall(cl, function() { \n  local_var <- 10 \n  global_var <<- 100 \n})) \nclusterEvalQ(cl, ls()) \n## [[1]] \n## [1] \"data\"        \"global_var\"  \"take_sample\" \n##  \n## [[2]] \n## [1] \"data\"        \"global_var\"  \"take_sample\" \n##  \n## [[3]] \n## [1] \"data\"        \"global_var\"  \"take_sample\" \n##  \n## [[4]] \n## [1] \"data\"        \"global_var\"  \"take_sample\" \n\n```", "```py\nclusterExport(cl, \"simulate\") \ninvisible(clusterEvalQ(cl, { \n  library(data.table) \n})) \nres <- parLapply(cl, 1:3, function(i) { \n  res_table <- rbindlist(lapply(1:1000, simulate)) \n  res_table[, id := NULL] \n  summary(res_table) \n}) \n\n```", "```py\nres \n## [[1]] \n##      first             high             low         \n##  Min.   : 99.86   Min.   : 99.95   Min.   : 84.39   \n##  1st Qu.: 99.97   1st Qu.:101.44   1st Qu.: 94.20   \n##  Median :100.00   Median :103.32   Median : 96.60   \n##  Mean   :100.00   Mean   :103.95   Mean   : 96.04   \n##  3rd Qu.:100.03   3rd Qu.:105.63   3rd Qu.: 98.40   \n##  Max.   :100.17   Max.   :121.00   Max.   :100.06   \n##       last          signal        \n##  Min.   : 84.99   Mode :logical   \n##  1st Qu.: 96.53   FALSE:911       \n##  Median : 99.99   TRUE :89        \n##  Mean   : 99.92   NA's :0         \n##  3rd Qu.:103.11                   \n##  Max.   :119.66                   \n##  \n## [[2]] \n##      first             high             low         \n##  Min.   : 99.81   Min.   : 99.86   Min.   : 83.67   \n##  1st Qu.: 99.96   1st Qu.:101.48   1st Qu.: 94.32   \n##  Median :100.00   Median :103.14   Median : 96.42   \n##  Mean   :100.00   Mean   :103.91   Mean   : 96.05   \n##  3rd Qu.:100.04   3rd Qu.:105.76   3rd Qu.: 98.48   \n##  Max.   :100.16   Max.   :119.80   Max.   :100.12   \n##       last          signal        \n##  Min.   : 85.81   Mode :logical   \n##  1st Qu.: 96.34   FALSE:914       \n##  Median : 99.69   TRUE :86        \n##  Mean   : 99.87   NA's :0         \n##  3rd Qu.:103.31                   \n##  Max.   :119.39                   \n##  \n## [[3]] \n##      first             high             low         \n##  Min.   : 99.84   Min.   : 99.88   Min.   : 85.88   \n##  1st Qu.: 99.97   1st Qu.:101.61   1st Qu.: 94.26   \n##  Median :100.00   Median :103.42   Median : 96.72   \n##  Mean   :100.00   Mean   :104.05   Mean   : 96.12   \n##  3rd Qu.:100.03   3rd Qu.:105.89   3rd Qu.: 98.35   \n##  Max.   :100.15   Max.   :117.60   Max.   :100.03   \n##       last          signal        \n##  Min.   : 86.05   Mode :logical   \n##  1st Qu.: 96.70   FALSE:920       \n##  Median :100.16   TRUE :80        \n##  Mean   :100.04   NA's :0         \n##  3rd Qu.:103.24                   \n##  Max.   :114.80 \n\n```", "```py\nstopCluster(cl) \n\n```", "```py\nsystem.time(res <- mclapply(1:10000, simulate,  \n  mc.cores = detectCores())) \n##    user  system elapsed  \n##   9.732   0.060   3.415 \n\n```", "```py\nmclapply(1:3, take_sample, mc.cores = detectCores()) \n## [[1]] \n##    id         x          y \n## 62 62 0.1679572 -0.5948647 \n##  \n## [[2]] \n##    id         x           y \n## 56 56 1.5678983  0.08655707 \n## 39 39 0.1015022 -1.98006684 \n##  \n## [[3]] \n##    id           x          y \n## 98 98  0.13892696 -0.1672610 \n## 4   4  0.07533799 -0.6346651 \n## 76 76 -0.57345242 -0.5234832 \n\n```", "```py\njob1 <- mcparallel(rnorm(10), \"job1\") \n\n```", "```py\nmccollect(job1) \n## $`20772` \n##  [1]  1.1295953 -0.6173255  1.2859549 -0.9442054  0.1482608 \n##  [6]  0.4242623  0.9463755  0.6662561  0.4313663  0.6231939 \n\n```", "```py\njobs <- lapply(1:8, function(i) {\n   mcparallel({\n     t <- rbinom(1, 5, 0.6)\n     Sys.sleep(t)\n     t\n   }, paste0(\"job\", i))\n })\n system.time(res <- mccollect(jobs))\n##    user  system elapsed \n##   0.012   0.040   4.852\n```", "```py\ninstall.packages(\"Rcpp\") \n\n```", "```py\n#include <Rcpp.h> \nusingnamespace Rcpp; \n\n// [[Rcpp::export]] \nNumericVector timesTwo(NumericVector x) { \n  return x * 2; \n} \n\n```", "```py\nRcpp::sourceCpp(\"code/rcpp-demo.cpp\") \n\n```", "```py\ntimesTwo \n## function (x)  \n## .Primitive(\".Call\")(<pointer: 0x7f81735528c0>, x) \n\n```", "```py\ntimesTwo(10) \n## [1] 20 \n\n```", "```py\ntimesTwo(c(1, 2, 3)) \n## [1] 2 4 6 \n\n```", "```py\n#include <Rcpp.h>\n using namespace Rcpp;\n\n // [[Rcpp::export]]\n double algo1_cpp(int n) {\n   double res = 0;\n   for (double i = 1; i < n; i++) {\n     res += 1 / (i * i);\n   }\n   return res;\n }\n```", "```py\nRcpp::sourceCpp(\"code/rcpp-algo1.cpp\") \n\n```", "```py\nalgo1_cpp(10) \n## [1] 1.539768 \n\n```", "```py\nalgo1_cpp(c(10, 15)) \n## Error in eval(expr, envir, enclos): expecting a single value \n\n```", "```py\nn <- 1000 \nmicrobenchmark( \n  algo1_for(n),  \n  algo1_cmp(n),  \n  algo1_vec(n),  \n  algo1_cpp(n)) \n## Unit: microseconds \n##          expr     min       lq      mean   median       uq \n##  algo1_for(n) 493.312 507.7220 533.41701 513.8250 531.5470 \n##  algo1_cmp(n)  57.262  59.1375  61.44986  60.0160  61.1190 \n##  algo1_vec(n)  10.091  10.8340  11.60346  11.3045  11.7735 \n##  algo1_cpp(n)   5.493   6.0765   7.13512   6.6210   7.2775 \n##      max neval cld \n##  789.799   100   c \n##  105.260   100  b  \n##   23.007   100 a   \n##   22.131   100 a \n\n```", "```py\n#include <Rcpp.h> \nusingnamespace Rcpp; \n\n// [[Rcpp::export]] \nNumericVector diff_cpp(NumericVector x) { \n  NumericVector res(x.size() - 1); \n  for (int i = 0; i < x.size() - 1; i++) { \n    res[i] = x[i + 1] - x[i]; \n  } \n  return res; \n} \n\n```", "```py\nRcpp::sourceCpp(\"code/rcpp-diff.cpp\") \n\n```", "```py\ndiff_cpp(c(1, 2, 3, 5)) \n## [1] 1 1 2 \n\n```", "```py\nx <- rnorm(1000) \nmicrobenchmark( \n  diff_for(x),  \n  diff_cmp(x),  \n  diff(x),  \n  diff.default(x),  \n  diff_cpp(x)) \n## Unit: microseconds \n##             expr      min        lq       mean    median \n##      diff_for(x) 1055.177 1113.8875 1297.82994 1282.9675 \n##      diff_cmp(x)   75.511   78.4210   88.46485   88.2135 \n##          diff(x)   12.899   14.9340   20.64854   18.3975 \n##  diff.default(x)   10.750   11.6865   13.90939   12.6400 \n##      diff_cpp(x)    5.314    6.4260    8.62119    7.5330 \n##         uq      max neval cld \n##  1400.8250 2930.690   100   c \n##    90.3485  179.620   100  b  \n##    24.2335   65.172   100 a   \n##    15.3810   25.455   100 a   \n##     8.9570   54.455   100 a \n\n```", "```py\n// [[Rcpp::plugins(openmp)]] \n#include <omp.h> \n#include <Rcpp.h> \nusingnamespace Rcpp; \n\n// [[Rcpp::export]] \nNumericVector diff_cpp_omp(NumericVector x) { \n  omp_set_num_threads(3); \n  NumericVector res(x.size() - 1); \n#pragma omp parallel for  \n  for (int i = 0; i < x.size() - 1; i++) { \n    res[i] = x[i + 1] - x[i]; \n  } \n  return res; \n} \n\n```", "```py\nRcpp::sourceCpp(\"code/rcpp-diff-openmp.cpp\") \n\n```", "```py\ndiff_cpp_omp(c(1, 2, 4, 8)) \n## [1] 1 2 4 \n\n```", "```py\nx <- rnorm(1000) \nmicrobenchmark( \n  diff_for(x),  \n  diff_cmp(x),  \n  diff(x),  \n  diff.default(x),  \n  diff_cpp(x), \n  diff_cpp_omp(x)) \n## Unit: microseconds \n##             expr      min        lq       mean    median \n##      diff_for(x) 1010.367 1097.9015 1275.67358 1236.7620 \n##      diff_cmp(x)   75.729   78.6645   88.20651   88.9505 \n##          diff(x)   12.615   16.4200   21.13281   20.5400 \n##  diff.default(x)   10.555   12.1690   16.07964   14.8210 \n##      diff_cpp(x)    5.640    6.4825    8.24118    7.5400 \n##  diff_cpp_omp(x)    3.505    4.4390   26.76233    5.6625 \n##         uq      max neval cld \n##  1393.5430 2839.485   100   c \n##    94.3970  186.660   100  b  \n##    24.4260   43.893   100 a   \n##    18.4635   72.940   100 a   \n##     8.6365   50.533   100 a   \n##    13.9585 1430.605   100 a \n\n```", "```py\nx <- rnorm(100000) \nmicrobenchmark( \n  diff_for(x),  \n  diff_cmp(x),  \n  diff(x),  \n  diff.default(x),  \n  diff_cpp(x), \n  diff_cpp_omp(x)) \n## Unit: microseconds \n##             expr        min          lq        mean \n##      diff_for(x) 112216.936 114617.4975 121631.8135 \n##      diff_cmp(x)   7355.241   7440.7105   8800.0184 \n##          diff(x)    863.672    897.2060   1595.9434 \n##  diff.default(x)    844.186    877.4030   3451.6377 \n##      diff_cpp(x)    418.207    429.3125    560.3064 \n##  diff_cpp_omp(x)    125.572    149.9855    237.5871 \n##      median          uq        max neval cld \n##  115284.377 116165.3140 214787.857   100   c \n##    7537.405   8439.9260 102712.582   100  b  \n##    1029.642   2195.5620   8020.990   100 a   \n##     931.306   2365.6920  99832.513   100 a   \n##     436.638    552.5110   2165.091   100 a   \n##     166.834    190.7765   1983.299   100 a \n\n```", "```py\n// [[Rcpp::plugins(cpp11)]]\n // [[Rcpp::depends(RcppParallel)]]\n #include <Rcpp.h>\n #include <RcppParallel.h>\n\n using namespace Rcpp;\n using namespace RcppParallel;\n\n struct Transformer : public Worker {\n   const RMatrix<double> input;\n   RMatrix<double> output;\n   Transformer(const NumericMatrix input, NumericMatrix output)\n     : input(input), output(output) {}\n   void operator()(std::size_t begin, std::size_t end) {\n     std::transform(input.begin() + begin, input.begin() + end,\n       output.begin() + begin, [](double x) {\n         return 1 / (1 + x * x);\n       });\n   }\n };\n\n// [[Rcpp::export]]\nNumericMatrix par_transform (NumericMatrix x) {\n  NumericMatrix output(x.nrow(), x.ncol());\n  Transformer transformer(x, output);\n  parallelFor(0, x.length(), transformer);\n  return output;\n}\n```", "```py\nmat <- matrix(1:12, nrow = 3) \nmat \n##      [,1] [,2] [,3] [,4] \n## [1,]    1    4    7   10 \n## [2,]    2    5    8   11 \n## [3,]    3    6    9   12 \npar_transform(mat) \n##      [,1]       [,2]       [,3]        [,4] \n## [1,]  0.5 0.05882353 0.02000000 0.009900990 \n## [2,]  0.2 0.03846154 0.01538462 0.008196721 \n## [3,]  0.1 0.02702703 0.01219512 0.006896552 \nall.equal(par_transform(mat), 1 /(1 + mat ^ 2)) \n## [1] TRUE \n\n```", "```py\nmat <- matrix(rnorm(1000 * 2000), nrow = 1000) \nmicrobenchmark(1 /(1 + mat ^ 2), par_transform(mat)) \n## Unit: milliseconds \n##                expr      min        lq     mean    median \n##       1/(1 + mat ^ 2) 14.50142 15.588700 19.78580 15.768088 \n##  par_transform(mat)  7.73545  8.654449 13.88619  9.277798 \n##        uq      max neval cld \n##  18.79235 127.1912   100   b \n##  11.65137 110.6236   100  a \n\n```"]