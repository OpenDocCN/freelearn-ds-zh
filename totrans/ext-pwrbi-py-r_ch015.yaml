- en: 14 Exploratory Data Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 13*, *Using Machine Learning without Premium or Embedded Capacity*,
    we mentioned that using **Auto Machine Learning** (**AutoML**) solutions on a
    dataset blindly often does not lead to very accurate models. This is because it
    is necessary to understand the most inherent characteristics of the dataset by
    using statistical tools at an earlier stage to extract useful information in order
    to get a better model.
  prefs: []
  type: TYPE_NORMAL
- en: The approach to be used for this type of dataset analysis is called **Exploratory
    Data Analysis** (**EDA**) and was first introduced by John Turkey to encourage
    statisticians to explore data and formulate hypotheses that would lead to new
    data collection and experiments to eventually enrich patterns among the variables
    in a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the goal of EDA?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploratory Data Analysis with Python and R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploratory Data Analysis in Power BI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter requires you to have a working internet connection and **Power
    BI Desktop** already installed on your machine. You must have properly configured
    the R and Python engines and IDEs as outlined in *Chapter 2*, *Configuring R with
    Power BI*, and *Chapter 3*, *Configuring Python with Power BI*.
  prefs: []
  type: TYPE_NORMAL
- en: What is the goal of EDA?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objective of EDA is to make sure that the dataset to be used later for more
    complex processes is first of all clean, that is, it has no missing values and
    no outliers that could divert possible subsequent analyses. In addition, it is
    important to select during this phase the variables that actually bring information,
    trying to drop those that determine mostly noise. This eliminates possible sources
    of inaccuracy in the conclusions to which subsequent processes lead. At this stage,
    it is also important to study the associations between variables and gain insights
    from the data analyzed in order to justify any more complex processing to be applied
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, the phases of EDA are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding your data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cleaning your data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discovering associations between variables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look in detail at what types of analysis they involve.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding your data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this first phase, it is essential to understand the meaning that each variable
    takes on in the context of the problem that the dataset represents. Once the measurable
    business entities with which the variables are associated are clear, it is easier
    to draw conclusions about how they interact with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Having an idea of **the size of the dataset**, understood as the number of variables
    and the number of observations (rows), helps you get a first idea of the size
    of the data you will be dealing with. After that, identifying and immediately
    defining the **type of variables** involved (which can be numerical or categorical)
    is of crucial importance in order to visualize them in the most appropriate way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, knowing the **descriptive statistics** of the **numerical variables**
    in the dataset helps to have greater sensitivity about their values. For each
    numeric variable, you can represent its histogram by highlighting its skewness
    and boxplot to better analyze its distribution, as you have already studied in
    *Chapter 11*, *Adding Statistics Insights: Associations*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For **categorical variables**, on the other hand, it is important to know the
    number of distinct categories and which characteristics of the observations they
    identify. It is possible to represent each unique category with its frequency
    and relative percentage of the total in a **bar chart**. Here is an example considering
    the Titanic disaster dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Bar chart of Pclass](img/file368.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Bar chart of Pclass
  prefs: []
  type: TYPE_NORMAL
- en: It is important to check whether more than one category has a very low frequency
    because it might make sense to aggregate them into a single category. This is
    usually done in a subsequent phase of a machine learning project (called **Feature
    Engineering**) in order to avoid, for example, having a model that is not generic
    enough for all the cases for which it must be adopted (the phenomenon of **overfitting**)
    and therefore determining bad performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also very important to give the analyst the possibility of graphically
    representing a pair of variables in order to understand how they interact with
    each other (**multivariate analysis** of the dataset). The type of visualization
    obviously changes according to the data type of the variables involved: in the
    case of two numeric variables, you will have a scatter plot; in the case of two
    categorical variables, you will have a mosaic plot; in the case of one numeric
    and one categorical variable, you will have several boxplots (or raincloud plots)
    for each category.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can move on to describing the phase that deals with data cleaning.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning your data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you learned in *Chapter 12*, *Adding Statistics Insights: Outliers and Missing
    Values*, the most important activities to obtain a statistically robust dataset
    that is as close as possible to the real case it represents are these two:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining **outliers** and managing them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imputing **missing values**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the EDA process, it is important to make use of all visual and non-visual
    tools useful to detect outliers and missing values in a straightforward way. This
    will allow any anomalies found to be fixed at a later stage.
  prefs: []
  type: TYPE_NORMAL
- en: As you have learned previously, for **univariate outlier analysis** it is very
    useful to represent individual distributions using boxplots for numeric variables.
    And it would also be very useful to be able to see what outliers remain or are
    added after transforming the variable via Yeo-Johnson transformations. That way
    you can see if it might be worth trying to normalize the distribution to deal
    with as few outliers as possible.
  prefs: []
  type: TYPE_NORMAL
- en: It is also convenient to be able to do a **bivariate analysis of the outliers**
    considering a numerical variable and a categorical one so that you study the anomalies
    of the distribution of the numerical variable broken down by each label of the
    categorical one.
  prefs: []
  type: TYPE_NORMAL
- en: After carefully studying and identifying possible outliers, it is also important
    to have a convenient visualization of combinations and intersections of **missing
    values** between variables. The goal is therefore to know not only the count and
    relative percentage value of the missing values of each variable, but also to
    have a convenient visualization of how these missing values interact with each
    other thanks to an upset plot.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s turn to the analysis of associations between variables.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering associations between variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you learned in *Chapter 11*, *Adding Statistics Insights: Associations*,
    knowing the **degree of association between variables** in the dataset certainly
    helps you understand which ones carry the most information and which ones generate
    mostly just noise. Selecting the most informative variables and using them for
    training a machine learning model certainly helps you to get more stable and performant
    results.'
  prefs: []
  type: TYPE_NORMAL
- en: Having visual tools to interpret the associations between pairs of numeric-numeric,
    numeric-categorical, and categorical-categorical variables certainly helps in
    the hard task of feature selection.
  prefs: []
  type: TYPE_NORMAL
- en: There are tools that allow you to generate EDA reports automatically. Let's
    see what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory Data Analysis with Python and R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have to do data exploration using only Python or R, there are tools that
    automatically generate a series of visuals that make your life easier. We have
    two lists below, one for Python tools, the other for R tools, in case you need
    any. It is easier to find tools for interactive data analysis in Python than in
    R. Packages available in R often provide wrappers that greatly simplify EDA via
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python libraries for EDA are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SweetVIZ** ([https://pypi.org/project/sweetviz/](https://pypi.org/project/sweetviz/)):
    An open source Python library that generates beautiful, high-density visualizations
    to kickstart EDA with just two lines of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lux** ([https://lux-api.readthedocs.io/](https://lux-api.readthedocs.io/)):
    A Python library that facilitates fast and easy data exploration by automating
    the visualization and data analysis process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pandas Profiling** ([https://pandas-profiling.github.io/pandas-profiling/](https://pandas-profiling.github.io/pandas-profiling/)):
    Generates profile reports from a pandas dataframe for data analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PandasGUI** ([https://github.com/adamerose/pandasgui](https://github.com/adamerose/pandasgui)):
    A GUI for viewing, plotting, and analyzing pandas dataframes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D-Tale** ([https://github.com/man-group/dtale](https://github.com/man-group/dtale)):
    The combination of a Flask backend and a React frontend to bring you an easy way
    to view and analyze pandas data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The R packages for EDA are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ExPanDaR** ([https://github.com/joachim-gassen/ExPanDaR](https://github.com/joachim-gassen/ExPanDaR)):
    ExPanD is a Shiny-based app supporting interactive exploratory data analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ggquickeda** ([https://github.com/smouksassi/ggquickeda](https://github.com/smouksassi/ggquickeda)):
    An R Shiny app/package that enables you to quickly explore your data and to detect
    trends on the fly thanks to scatterplots, dot plots, boxplots, bar plots, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**summarytools** ([https://github.com/dcomtois/summarytools](https://github.com/dcomtois/summarytools)):
    An R package for data cleaning, exploring, and simple reporting. It integrates
    well with commonly used software and tools for reporting in R (such as RStudio).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DataExplorer** ([https://boxuancui.github.io/DataExplorer/](https://boxuancui.github.io/DataExplorer/)):
    Aims to automate most data handling and visualization so that users can focus
    on studying the data and extracting insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the references for further details about the aforementioned tools.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to take advantage of Power BI as a visualization tool, you unfortunately
    cannot use many of the visualizations automatically generated by the aforementioned
    Python tools. Therefore, we will use R packages to generate the necessary for
    basic EDA via code because R allows you to obtain very high-quality graphics of
    any complexity quite easily. Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory data analysis in Power BI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will make extensive use of the `GGplot2` package, an advanced
    R library designed for creating plots based on **The Grammar of Graphics**. It
    is not our intention to go into detail about every feature exposed by the package,
    even if it is used quite widely in the code that accompanies the chapter. Our
    goal is, as always, to provide code that is easy to customize for use in other
    projects, and above all, to provide a starting point for a more detailed look
    at the functions used. For more details, take a look at the references of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the tools that Tidyverse provides in R (including `ggplot2`),
    we will also use the `summarytools` and `DataExplorer` packages to create EDA
    reports in Power BI. It is therefore necessary to install them:'
  prefs: []
  type: TYPE_NORMAL
- en: Open RStudio and make sure it is referencing your latest CRAN R (version 4.0.2
    in our case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Console** window and enter this command: `install.packages(''Rcpp'')`.
    It’s a `summarytools` dependency. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''summarytools'')`. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''DataExplorer'')`. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we can start implementing our EDA reports. First, however, it
    is important to highlight the fact that the data type of variables must be defined
    in each R script you will use in your report.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the purpose of EDA, it is important to define the data type of variables
    in the dataset to be analyzed. Depending on the data types of the features, different
    analysis strategies are applied. The data types of columns of a Power BI table
    in the data model are not mappable one-to-one with the data types handled by R.
    Therefore, it is necessary to define the data types of the columns directly in
    an R script to prevent Power BI from overwriting them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Moreover, the `00-init-dataset.R` script that you will find in the `Chapter14\R`
    folder will be used as the *official CSV connector* of your EDA report in Power
    BI as in this case it is more convenient to load data directly into R for each
    script in which it is used. After loading your data in it, you need to define
    the columns to drop, the categorical and integer ones. Columns specified as integers
    will be viewed as either numeric or categorical variables, leaving the analyst
    to select them according to the function that best describes the phenomenon under
    analysis. All the other columns are supposed to be numeric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you need to import an Excel file instead of a CSV file, you already know
    how to implement changes to the code because of what you learned in *Chapter 7*,
    *Logging Data from Power BI to External Sources*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then the script will define the `tbl` tibble applying the appropriate transformations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script will be pre-loaded into every other R script you develop for the
    EDA report so that you are sure to have the dataset with the precise data types
    specified ready in memory.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's start developing the report from the basic statistics of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset summary page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first page of the EDA report is responsible for providing the analyst with
    an overview of the data contained in the dataset. Some **basic information** will
    be exposed enriching the output of the function `introduce()` of the `DataExplorer`
    package. This information is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows and columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of discrete (categorical) and continuous (numeric) columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of columns having all missing values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total number of missing values in the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of complete rows, that is, not having missing values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total number of observations in the dataset, given by the number of rows multiplied
    by the number of columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory used in KB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of duplicated rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then a **summary statistics table** for the entire dataset is calculated starting
    from the output of the `dfSummary()` function of the `summarytools` package. The
    information it contains for each variable is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Variable name and data type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic statistics according to the data type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of unique valid values (not null)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequencies of valid values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of valid values and their percentage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of missing values and their percentage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, more extensive **descriptive statistics** are provided for numerical
    variables thanks to the `descr()` function of the `summarytools` package. In addition
    to the most common ones, the following statistics are added:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Median Absolute Deviation** (*mad*): Contrary to the variance and standard
    deviation, it is a robust measure of outliers of how widespread a dataset is.
    It is usually used for non-normal distributions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interquartile range** (*iqr*): As you already saw for the boxplots, it is
    a measure of where the bulk of the distribution values lie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coefficient of variation** (*cv*): It is a measure of relative variability
    as it is the ratio of the standard deviation to the mean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coefficient of skewness** (*skewness*): It is a measure of the lack of distribution
    symmetry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kurtosis** (*kurtosis*): It is a measure of whether the data is heavy-tailed
    or light-tailed relative to a normal distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this information, the analyst can get a complete picture of the shape of
    the data contained in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to implement them in Power BI. First, make sure that Power BI
    Desktop references the correct versions of R in **Options**. Then follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Get Data**, search for `script`, select **R script**, and click on
    **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the script you can find in the file `01-basic-info.R` into the `Chapter14\R`
    folder. Make sure that the `init_path` variable points to the correct absolute
    path of the `00-init-dataset.R` file you can find in the same folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the navigator dialog, select the `basic_info_tbl`, the `numeric_vars_descr_stats_tbl`,
    the `summary_tbl`, and the `sample_tbl` tables. Then click on **Load**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the four tables are loaded in the **Fields** panel on the right in Power
    BI Desktop, you can add them into your report canvas simply by checking their
    measures. For example, expand the `basic_info_tbl` content and check the fields
    `attribute` (string field) and `value` (numeric field) in this order to get a
    table chart (if you click on the numeric field first, you’ll get a column chart).
    A table will appear on your canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Basic info table in its first state](img/file369.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.2 – Basic info table in its first state
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this case, the **Total** row makes no sense. Therefore, it must be eliminated
    working on the **Format** properties of the visual.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that the table visual is selected and then click on the **Format**
    options (the wall brush icon) on the **Visualizations** panel on the right. Expand
    the **Total** section and switch off the **Total** option. Then expand the **Field
    formatting** section, select the `value` field from the combo box, and enter `0`
    into the **Value decimal places** textbox. Finally, switch on the **Title** option
    and expand its options. Then enter the label `Basic Dataset Info` in the textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on an empty spot on the canvas, expand the `summary_tbl` fields and
    check them in the following order: **Variable**, **Stats Values**, **Unique Valid**,
    **Freq of Valid**, **Valid**, and **Missing**. After that, expand the right edge
    of the visual in order to see all the columns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As done in *Step 5* for the `basic_info_tbl` table, remove the **Total** row
    also for this table and use this string as the label: `Dataset Summary`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on an empty spot on the canvas, expand the `numeric_vars_descr_stats_tbl`
    fields, and check them in the following order: **variable**, **mean**, **sd**,
    **min**, **q1**, **med**, **q3**, **max**, **mad**, **iqr**, **cv**, **skewness**,
    and **kurtosis**. After that, expand the right edge of the visual in order to
    see all the columns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this table, also remove the **Total** row and use this string as the label:
    `Descriptive Statistics for Numeric Variables`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on an empty spot on the canvas, expand the `sample_tbl` fields, and
    check them all in the order you want after checking **Name** first (checking a
    non-numeric field at the beginning, the visual selected by default will be the
    table).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this table, also remove the **Total** row and use this string as the label:
    `Dataset Sample`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After repositioning the visuals on the canvas and expanding the individual
    table columns a bit, you''ll get your first EDA report page, like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Summary page of the EDA report](img/file370.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.3 – Summary page of the EDA report
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just rename the page (right-click on the bottom page tab and click **Rename
    Page**) using the label `Summary`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep the following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Note**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In order to display the sample details of the dataset, you must properly select
    its fields in Power BI Desktop. This means that if you want to change the source
    dataset, you must edit the sample details visual by hand.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nice work! You just developed the first page of your EDA report.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now try to develop a page dedicated to the analysis of missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Missing values exploration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although some information about the missing values is present in text format
    on the newly developed **Summary** page, providing a page containing visuals dedicated
    to the missing values is definitely an advantage for the analyst.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to displaying a simple **lollipop plot** indicating the percentage
    values of missing values for each variable, you will also use an **upset plot**
    to allow the analyst to figure out which combinations of variables are found to
    be missing altogether, just as you learned in *Chapter 12*, *Adding Statistics
    Insights: Outliers and Missing Values*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s start to develop the **Associations** page:'
  prefs: []
  type: TYPE_NORMAL
- en: If it does not already exist, create a new Power BI report page by clicking
    on the plus icon near the tabs at the bottom of the canvas. A new tab named **Page
    1** will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane and enable it when you’re prompted
    to do so. After that, move it to the left of the page and resize it in order to
    fill half of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on the `attribute` field of the `basic_info_tbl`
    table. You won't use this field in the R Visual code, but you must select at least
    one measure to enable the script in the visual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and under the **Title** section,
    enter the string `Missing Value Percentages` as the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code of the file `02-missing-values-plot-1.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get the lollipop plot in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click again on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane, and enable it when you’re prompted
    to do so. After that, move it to the right of the page and resize it in order
    to fill half of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on the `attribute` field of the `basic_info_tbl`
    table. You won't use this field in the R Visual code, but you must select at least
    one measure to enable the script in the visual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and under the **Title** section,
    enter the string `Variables Missing Together` as the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code of the file `03-missing-values-plot-2.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get the upset plot in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just rename the current page (right-click on the tab at the bottom of the page
    and click **Rename Page**) using the label `Missing Values Analysis`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nice one! It is now much easier for the analyst to understand the impact of
    missing values on the dataset. The whole page will be like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Missing values analysis page of the EDA report](img/file371.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Missing values analysis page of the EDA report
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now turn to developing a page dedicated to univariate analysis of the
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Univariate exploration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The one-dimensional analysis of a dataset consists of the analysis of the distributions
    of the variables that compose it. Depending on the data type of the variables,
    the visual tools used to facilitate this analysis are different.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the analysis of numerical variables, a couple of graphs are used to better
    delineate their distribution: there is a **histogram and density plot** overlapping
    in the first graph, while in the second graph there is a **raincloud plot** (the
    set of a density plot and a boxplot). In *Figure 14.5*, you can find an example
    of the graphs for a numeric variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Histogram and density plot of Age](img/file372.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Histogram and density plot of Age
  prefs: []
  type: TYPE_NORMAL
- en: 'For categorical variables, a simple **bar chart** is used, with the intention
    of limiting the maximum number of distinct categories to be displayed so that
    they don’t exceed a predefined number, and grouping the other categories in the
    dummy **others** category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Bar chart of the Cabin variable](img/file373.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Bar chart of the Cabin variable
  prefs: []
  type: TYPE_NORMAL
- en: The selection of variables to be displayed in Power BI is done through drop-down
    slicers. If a variable is of the integer type, it appears both in the dropdown
    of the numerical variables and in that of the categorical variables, so the analyst
    can visualize them in the way that they consider more appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the graphs will need to be displayed via R Visuals, should you wish to
    publish the EDA report to the Power BI service, you must ensure that the R packages
    to be used are compatible with the version of the R engine found on the Power
    BI service. Remember also that Power BI Desktop can reference only one R engine
    at a time, which will be the one used for both Power Query and R Visuals on your
    machine. So, if you plan to use the latest R engine for Power Query once the report
    is published, you should also install the packages needed to render the report
    on this engine in your machine. This way you ensure that the report is rendered
    correctly on Power BI Desktop as well during your tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Open RStudio and make sure it is referencing your CRAN R dedicated to R Visuals
    (version 3.4.4 in our case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Console** window and enter this command: `install.packages(''cowplot'')`.
    It’s like an extension of `ggplot2`, providing themes and functions to align,
    arrange, and annotate plots. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''ggpubr'')`. It provides some easy-to-use
    functions for creating and customizing `ggplot2` based publication-ready plots.
    Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''ggExtra'')`. It is a collection of
    functions and layers to enhance `ggplot2`, mostly used for its `ggMarginal` function,
    which adds marginal histograms/boxplots/density plots to scatterplots. Then, press
    *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''RColorBrewer'')`. It is an essential
    tool to manage colors and palettes with R. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''ggmosaic'')`. It is designed to create
    visualizations of categorical data, in particular mosaic plots. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this command: `install.packages(''` `ggdist'')`. It is designed to create
    visualizations of categorical data, in particular mosaic plots. Then, press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the RStudio R reference to your CRAN R dedicated to Power Query (version
    4.0.2 in our case) and restart RStudio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 2 to 7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can start developing the new page of your report dedicated to the univariate
    analysis of the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: If it does not already exist, create a new Power BI report page by clicking
    on the plus icon near the tabs at the bottom of the canvas. A new tab named **Page
    1** will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Get Data**, search for `script`, select **R script**, and click on
    **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the script you can find in the file `04-serialize-univariate-plots.R`
    into the `Chapter14\R` folder. Make sure that the `folder` variable points to
    the correct absolute path of the `Chapter14` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the navigator dialog, select the `basic_info_tbl`, the `numeric_vars_descr_stats_tbl`,
    the `summary_tbl`, and the `sample_tbl` tables. Then click on **Load**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This script serializes to disk the lists with the graphs associated with each
    variable according to their type. Once you click **OK**, you will find the following
    files on disk: `histodensity_lst.rds`, `histodensity_transf_lst.rds` (numerical
    variables transformed according to Yeo-Johnson), and `barchart_lst.rds`. Pre-computing
    lists of graphs and serializing them to disk is a good strategy when the possible
    combinations of the variables involved are low.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Navigator dialog, select the `categorical_df` and `numeric_df` tables.
    As you can see, the `numeric_df` table contains the names of the numeric variables
    in the `numeric_col_name` column repeated twice, once for each type of transformation
    in the `transf_type` column to be applied to them (`standard` and `yeo-johnson`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – numeric_df table’s content](img/file374.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.7 – numeric_df table’s content
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then click on **Load**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the slicer visual icon. Then expand the `numeric_df` table under the
    **Fields** panel and check the `numeric_col_name` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, switch off the **Slicer
    header** one, and add the **Title** `Numeric Variables`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first. Then click on the slicer
    visual icon. Then expand the `numeric_df` table under the **Fields** panel and
    check the `transf_type` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, switch off the **Slicer
    header** one, and add the **Title** `Transformations`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane and enable it when you’re prompted
    to do so. After that, move it under the two slicers you’ve just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on both fields of the **numeric_df** table (**numeric_col_name**
    and **transf_type**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and switch off the **Title** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the code of the file `05-plot-numeric-variables.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get the univariate analysis of the not transformed
    `Age` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Univariate analysis of the Age variable](img/file375.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.9 – Univariate analysis of the Age variable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you select the `yeo-johnson` transformation from the **Transformations**
    dropdown, the plots will update accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Univariate analysis of the Yeo-Johnson transformed Age variable](img/file376.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.10 – Univariate analysis of the Yeo-Johnson transformed Age variable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s now create the slicer of categorical variables. Click on an empty spot
    in the report canvas first. Then click on the slicer visual icon. Then expand
    the `categorical_df` table under the **Fields** panel and check the `categorical_col_name`
    measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, switch off the **Slicer
    header** one, and add the **Title** `Categorical Variables`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane and enable it when you’re prompted
    to do so. After that, move it under the slicer you’ve just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on the field of the **categorical_df** table (**categorical_col_name**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and switch off the **Title** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the code of the file `06-plot-categorical-variables.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top-right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get the univariate analysis of the `Cabin` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.11 – Univariate analysis of the Cabin variable](img/file377.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.11 – Univariate analysis of the Cabin variable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just rename the current page (right-click on the tab at the bottom of the page
    and click **Rename Page**) using the label `Univariate Analysis`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nice one! You just developed a great EDA report page dedicated to univariate
    dataset analysis. Playing with the slicers, the whole page will be like the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – The Univariate Analysis EDA report’s page](img/file378.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – The Univariate Analysis EDA report’s page
  prefs: []
  type: TYPE_NORMAL
- en: It is now time to develop a page of the report dedicated to multivariate analysis
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Multivariate exploration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In general, the analysis of variables taken individually is never sufficient
    to give the analyst a complete overview of the dataset. Being able to use visuals
    that allow the interaction of multiple variables depending on their data type
    is definitely a step towards more accurate analysis of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common visual used for analyzing the interaction of two numerical
    variables is the **scatterplot**. In our case, we will use an enriched version
    of this plot, adding the **marginal distributions** of the variables at the edges.
    Moreover, it’s possible to color the points according to another categorical variable.
    In this way, the analyst can study the interaction of three variables. In *Figure
    14.13*, you can find an example of this plot for the variables `Age` and `Fare`
    grouped by the `Sex` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – Scatterplot with marginal histograms for Age and Fare by Sex](img/file379.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – Scatterplot with marginal histograms for Age and Fare by Sex
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are as many regression lines as there are categories
    of the grouping variable. In the event  of a missing grouping variable, the regression
    line is unique and in that case, the plot also shows the values of Pearson''s
    R coefficient, Spearman''s **rho**, and Kendall''s **tau**, with the p-value derived
    from the respective tests. In short, in this case, the **p-value** represents
    the probability that the correlation between `x` and `y` in the sample data occurred
    by chance (take a look at the references to learn more about p-values):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Scatterplot for Age and Fare (transformed) without grouping](img/file380.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – Scatterplot for Age and Fare (transformed) without grouping
  prefs: []
  type: TYPE_NORMAL
- en: 'If the variables to study the interaction of are categorical, the **mosaic
    plot** comes to your aid. In *Figure 14.15*, you can find the mosaic plot of the
    `SibSp` and `Pclass` variables grouped by the `Sex` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15 – Mosaic plot for Pclass and SibSp grouped by Sex](img/file381.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.15 – Mosaic plot for Pclass and SibSp grouped by Sex
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it is possible to study the interaction of a numerical variable with
    a categorical one by visualizing **raincloud plots for each category**. In addition,
    it is always possible to split the plot by a third categorical variable, as in
    the previous cases. In *Figure 14.16*, you can see an example of this plot for
    the variables `Fare` (transformed by Yeo-Johnson for a better visualization) and
    `Pclass` by the `Sex` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16 – Raincloud plots for the variables Fare and Pcalss grouped
    by Sex](img/file382.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.16 – Raincloud plots for the variables Fare and Pcalss grouped by
    Sex
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can start developing the new page of your report dedicated to the univariate
    analysis of the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: If it does not already exist, create a new Power BI report page clicking on
    the plus icon near the tabs at the bottom of the canvas. A new tab named **Page
    1** will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Get Data**, search for `script`, select **R script**, and click on
    **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the script you can find in the file `07-create-multivariate-objects.R`
    into the `Chapter14\R` folder. Make sure that the `folder` variable points to
    the correct absolute path of the `Chapter14` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the navigator dialog, select the `multivariate_df` table. This time, the
    code to generate the plots will be written directly in the R Visual, without the
    need to serialize them first and recall them at the time of visualization. This
    strategy is opposite to the one used for the page of the univariate analysis because,
    in this case, the number of combinations between the variables in the game is
    much higher, and to generate the same number of plots in a list and to serialize
    everything is not very efficient. The `multivariate_df` table is a dataframe that
    is the result of a cross join between all the variables involved in the multivariate
    analysis (two numerical variables, a variable associated with the type of transformation
    for each of them, two categorical variables, and another categorical one for the
    grouping: seven variables in total):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.17 – multivariate_df table’s content](img/file383.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.17 – multivariate_df table’s content
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then click on **Load**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the slicer visual icon. Then expand the `multivariate_df` table under
    the **Fields** panel and check the `x` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `x numeric`
    title under the **Slicer header** section, switch on the **Title** section, and
    add the `Analysis Variables` title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first and then on the slicer visual
    icon. Expand the `multivariate_df` table under the **Fields** panel, and check
    the `x_transf_type` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `x transformation`
    title under the **Slicer header** section, and keep the **Title** section switched
    off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 5 to 10 in order to create the **y numeric** and **y transformation**
    slicers, making sure to select the `y` and `y_transf_type` measures respectively.
    Keep the **Title** section switched off for them also.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first and then on the slicer visual
    icon. Expand the `multivariate_df` table under the **Fields** panel, and check
    the `cat1` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `cat1 categorical`
    title under the **Slicer header** section and keep the **Title** section switched
    off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 12 to 14 in order to create the **cat2 categorical** slicer. Make
    sure to select the `cat2` measure for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first and then on the slicer visual
    icon. Expand the `multivariate_df` table under the **Fields** panel and check
    the `grp` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `grp categorical`
    title under the **Slicer header** section, and keep the **Title** section switched
    off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to align all these sliders on a single row on top of your page like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.18 – Multivariate page’s slicers on top of the page](img/file384.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.18 – Multivariate page’s slicers on top of the page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now click on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane and enable it when you’re prompted
    to do so. After that, move it under the row of slicers you’ve just created and
    resize it in order to fill the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on all the fields of the `multivariate_df` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and switch off the **Title** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code of the file `08-plot-multivariate-plots.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get all the multivariate analysis plots in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just rename the current page (right-click on the tab at the bottom of the page
    and click **Rename Page**) using the label `Multivariate Analysis`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Amazing! This EDA report page dedicated to multivariate analysis is very revealing
    for an analyst. Playing with the slicers, the whole page will be like the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.19 – Multivariate analysis page of the EDA report](img/file385.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.19 – Multivariate analysis page of the EDA report
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the numeric `y` variable is used for both the scatterplot
    and the raincloud plot as the *y* axis. The categorical `cat1` variable is used
    as the *x* axis for both the raincloud plot and the mosaic plot. The categorical
    `grp` variable is used to group all three plots by their labels.
  prefs: []
  type: TYPE_NORMAL
- en: You've just had a demonstration of how powerful and flexible R is for professional
    graphics development. Let’s see how to develop a page for variable associations.
  prefs: []
  type: TYPE_NORMAL
- en: Variable associations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you learned from *Chapter 11*, *Adding Statistics Insights: Associations*,
    knowing the correlation coefficient that binds two variables gives you the opportunity
    to assess the predictive power of one variable toward the other. From the same
    chapter, you also learned how to calculate the correlation coefficient depending
    on combinations of the different types of variables involved.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will put what you have learned to use in developing a page
    for the EDA report containing a **heatmap plot** colored according to the intensity
    of the correlation coefficient. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.20 – Correlation heatmap of the dataset](img/file386.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.20 – Correlation heatmap of the dataset
  prefs: []
  type: TYPE_NORMAL
- en: 'The correlation coefficient will be calculated according to the selection that
    the analyst can make thanks to two slicers: one that allows you to choose which
    method to use for the correlation between numerical variables, and another that
    allows you to choose the method to use for the correlation between categorical
    variables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s start to develop the **Associations** page:'
  prefs: []
  type: TYPE_NORMAL
- en: If it does not already exist, create a new Power BI report page by clicking
    on the plus icon near the tabs at the bottom of the canvas. A new tab named **Page
    1** will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Get Data**, search for `script`, select **R script**, and click on
    **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the script you can find in the file `09-create-association-objects.R`
    into the `Chapter14\R` folder. Make sure that the `folder` variable points to
    the correct absolute path of the `Chapter14` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Navigator** dialog, select the `corr_tbl` table. This table is given
    by the set of several transformations. First, for each combination of correlation
    methods (for numerical and categorical variables), a column containing the respective
    correlation coefficient was calculated. This was sped up by using the parallel
    computation for R introduced in *Chapter 9*, *Calling External APIs To Enrich
    Your Data*. After that, a pivot operation was performed, bringing all these columns
    into the single column `corr` and creating the new column `corr_type`, which contains
    the string identifying the combination of methods used. Finally, the `corr_type`
    column was split into two separate columns, one for use in the correlation method
    slicer for numerical variables, the other for use in the correlation method slicer
    for categorical variables. Here is a sample of the result table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.21 – corr_tbl table’s content](img/file387.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.21 – corr_tbl table’s content
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then click on **Load**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the slicer visual icon. Then expand the `corr_tbl` table under the
    **Fields** panel and check the `numeric_corr_type` measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `Numeric
    correlation type` title under the **Slicer header** section, switch on the **Title**
    section, and add the `Analysis Variables` title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on an empty spot in the report canvas first and then on the slicer visual
    icon. Expand the `corr_tbl` table under the **Fields** panel and check the `categorical_corr_type`
    measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the downward-pointing arrow at the top right of the slicer to select
    the **Dropdown** slicer type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the bottom edge of the slicer, click on its **Format** options, switch
    on the **Single select** one under **Selection controls**, enter the `Categorical
    correlation type` title under the **Slicer header** section and keep the **Title**
    section switched off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to align all these sliders on a single row at the top of your page like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.22 – Association page’s slicers at the top of the page](img/file388.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 14.22 – Association page’s slicers at the top of the page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now click on an empty spot in the report canvas first. Then click on the **R
    Visual** icon in the **Visualizations** pane and enable it when you’re prompted
    to do so. After that, move it under the row of slicers you’ve just created and
    resize it in order to fill the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping it selected, click on the `col`, `corr`, and `row` fields of the `corr_tbl`
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code of the file `10-plot-association-plots.R` into the `Chapter14\R`
    folder and paste it into the R Visual script editor. Then click on the **Run script**
    arrow icon at the top right of the R script editor (enable the R Visual every
    time it’s requested). You’ll get all the multivariate analysis plots in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the R Visual’s **Format** tab and under the **Title** section,
    enter the string `Categorical Heatmap` as the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just rename the current page (right-click on the tab at the bottom of the page
    and click **Rename Page**) using the label `Association Analysis`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's impressive how easy it was to create a correlation heatmap with R and `Ggplot`!
  prefs: []
  type: TYPE_NORMAL
- en: 'Playing with the slicers, the whole page will be like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.23 – Association analysis page of the EDA report](img/file389.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.23 – Association analysis page of the EDA report
  prefs: []
  type: TYPE_NORMAL
- en: Wow! You have completed your first EDA report. You have to admit that the result
    is amazing as it is!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned what Exploratory Data Analysis (EDA) is for and
    what goals it helps achieve.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned what tools are most commonly used to do automated EDA using
    Python and R.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you developed a complete and dynamic EDA report for analyzing a dataset
    using R and its most popular packages for creating graphics.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll see how to develop advanced visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For additional reading, check out the following books and articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Powerful EDA (Exploratory Data Analysis) in just two lines of code using Sweetviz*
    ([https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34](https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Lux: A Python API for Intelligent Visual Data Discovery* ([https://www.youtube.com/watch?v=YANIids_Nkk](https://www.youtube.com/watch?v=YANIids_Nkk))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*pandas Profiling of the Titanic Dataset* ([https://pandas-profiling.github.io/pandas-profiling/examples/master/titanic/titanic_report.html](https://pandas-profiling.github.io/pandas-profiling/examples/master/titanic/titanic_report.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*pandasGUI Demo* ([https://www.youtube.com/watch?v=NKXdolMxW2Y](https://www.youtube.com/watch?v=NKXdolMxW2Y))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*A Comprehensive Guide to the Grammar of Graphics for Effective Visualization
    of Multi-dimensional Data* ([https://towardsdatascience.com/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149](https://towardsdatascience.com/a-comprehensive-guide-to-the-grammar-of-graphics-for-effective-visualization-of-multi-dimensional-1f92b4ed4149))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*The Complete ggplot2 Tutorial* ([http://r-statistics.co/Complete-Ggplot2-Tutorial-Part1-With-R-Code.html](http://r-statistics.co/Complete-Ggplot2-Tutorial-Part1-With-R-Code.html))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Everything you need to know about interpreting correlations* ([https://towardsdatascience.com/eveything-you-need-to-know-about-interpreting-correlations-2c485841c0b8](https://towardsdatascience.com/eveything-you-need-to-know-about-interpreting-correlations-2c485841c0b8))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
