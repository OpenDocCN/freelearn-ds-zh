["```py\n>>> import scipy.stats \n>>> import scipy.spatial \n>>> data = scipy.stats.randint.rvs(0.4,10,size=(10,2))\n>>> triangulation = scipy.spatial.Delaunay(data)\n\n```", "```py\n>>> from numpy.random import RandomState\n>>> rv = RandomState(123456789)\n>>> locations = rv.randint(0, 511, size=(2,8))\n>>> triangulation=scipy.spatial.Delaunay(locations.T)\n\n```", "```py\n>>> import matplotlib.pyplot as plt \n>>> assign_vertex = lambda index: triangulation.points[index]\n>>> triangle_set = map(assign_vertex, triangulation.vertices)\n\n```", "```py\n>>> voronoiSet=scipy.spatial.Voronoi(locations.T)\n>>> scipy.spatial.voronoi_plot_2d(voronoiSet)\n>>> fig = plt.figure()\n>>> thefig = plt.subplot(1,1,1)\n>>> scipy.spatial.voronoi_plot_2d(voronoiSet, ax=thefig)\n>>> plt.triplot(locations[1], locations[0], triangles=triangle_set, color='r')\n\n```", "```py\n>>> plt.xlim((0,550))\n\n```", "```py\n (0, 550)\n\n```", "```py\n>>> plt.ylim((0,550))\n\n```", "```py\n (0, 550)\n\n```", "```py\n>>> plt.show()\n\n```", "```py\n>>> import numpy\n>>> import scipy\n>>> from scipy.ndimage import *\n>>> from scipy.misc import imfilter\n>>> import matplotlib.pyplot as plt\n>>> import matplotlib.cm as cm\n\n```", "```py\n>>> img=imread('./NbW-STEM.png')\n>>> minVal = numpy.min(img) \n>>> maxVal = numpy.max(img) \n>>> img = (1.0/(maxVal-minVal))*(img - minVal) \n>>> plt.imshow(img, cmap = cm.Greys_r)\n>>> plt.show()\n>>> print \"Image dtype: %s\"%(img.dtype)\n>>> print \"Image size: %6d\"%(img.size)\n>>> print \"Image shape: %3dx%3d\"%(img.shape[0],img.shape[1])\n>>> print \"Max value %1.2f at pixel %6d\"%(img.max(),img.argmax())\n>>> print \"Min value %1.2f at pixel %6d\"%(img.min(),img.argmin())\n>>> print \"Variance: %1.5f\\nStandard deviation: \\ \n %1.5f\"%(img.var(),img.std())\n\n```", "```py\nImage dtype: float64\nImage size:  87025\nImage shape: 295x295\nMax value 1.00 at pixel  75440\nMin value 0.00 at pixel   5703\nVariance: 0.02580\nStandard deviation: 0.16062\n\n```", "```py\n>>> plt.subplot(1, 2, 1)\n>>> plt.imshow(img > 0.2, cmap = cm.Greys_r)\n>>> plt.xlabel('img > 0.2')\n>>> plt.subplot(1, 2, 2) \n>>> plt.imshow(img > 0.7, cmap = cm.Greys_r)\n>>> plt.xlabel('img > 0.7')\n>>> plt.show()\n\n```", "```py\n>>> BWatoms = (img> 0.62)\n>>> BWatoms = binary_opening(BWatoms,structure=numpy.ones((2,2)))\n\n```", "```py\n>>> structuring_element = [[0,1,0],[1,1,1],[0,1,0]]\n>>> segmentation,segments = label(BWatoms,structuring_element)\n\n```", "```py\n>>> coords = center_of_mass(img, segmentation, range(1,segments+1))\n>>> xcoords = numpy.array([x[1] for x in coords])\n>>> ycoords = numpy.array([x[0] for x in coords])\n\n```", "```py\n>>> plt.imshow(img, cmap = cm.Greys_r) \n>>> plt.axis('off') \n>>> plt.plot(xcoords,ycoords,'b.') \n>>> plt.show() \n\n```", "```py\n>>> L1,L2 = distance_transform_edt(segmentation==0, return_distances=False, return_indices=True)\n>>> Voronoi = segmentation[L1,L2]\n>>> Voronoi_edges= imfilter(Voronoi,'find_edges')\n>>> Voronoi_edges=(Voronoi_edges>0)\n\n```", "```py\n>>> plt.imshow(Voronoi_edges); plt.axis('off'); plt.gray()\n>>> plt.plot(xcoords,ycoords,'r.',markersize=2.0)\n>>> plt.show()\n\n```", "```py\n>>> import numpy\n>>> from numpy import linspace\n>>> import scipy\n>>> import matplotlib.pyplot as plt\n>>> from scipy.spatial import Delaunay\n\n```", "```py\n>>> xmin = 0 ; xmax = 1 ; nXpoints = 10\n>>> ymin = 0 ; ymax = 1 ; nYpoints = 10\n>>> horizontal = linspace(xmin,xmax,nXpoints)\n>>> vertical = linspace(ymin,ymax,nYpoints)\n>>> y, x = numpy.meshgrid(horizontal, vertical)\n>>> vertices = numpy.array([x.flatten(),y.flatten()])\n\n```", "```py\n>>> triangulation = Delaunay(vertices.T)\n>>> index2point = lambda index: triangulation.points[index]\n>>> all_centers = index2point(triangulation.vertices).mean(axis=1)\n>>> trngl_set=triangulation.vertices\n\n```", "```py\n>>> plt.triplot(vertices[0],vertices[1],triangles=trngl_set)\n>>> plt.show()\n\n```", "```py\n>>> from numpy import  cross \n>>> from scipy.sparse import dok_matrix \n>>> points=triangulation.points.shape[0]\n>>> stiff_matrix=dok_matrix((points,points))\n>>> for triangle in triangulation.vertices:\n helper_matrix=dok_matrix((points,points))\n pt1,pt2,pt3=index2point(triangle)\n area=abs(0.5*cross(pt2-pt1,pt3-pt1))\n coeffs=0.5*numpy.vstack((pt2-pt3,pt3-pt1,pt1-pt2))/area\n #helper_matrix[triangle,triangle] = \\ \n array(mat(coeffs)*mat(coeffs).T)\n u=None \n u=numpy.array(numpy.mat(coeffs)*numpy.mat(coeffs).T) \n for i in range(len(triangle)):\n for j in range(len(triangle)):\n helper_matrix[triangle[i],triangle[j]] = u[i,j] \n stiff_matrix=stiff_matrix+helper_matrix\n\n```", "```py\n>>> allNodes = numpy.unique(trngl_set) \n>>> boundaryNodes = numpy.unique(triangulation.convex_hull) \n>>> NonBoundaryNodes = numpy.array([]) \n>>> for x in allNodes: \n if x not in boundaryNodes: \n NonBoundaryNodes = numpy.append(NonBoundaryNodes,x) \n NonBoundaryNodes = NonBoundaryNodes.astype(int) \n nbnodes = len(boundaryNodes) # number of boundary nodes \n FbVals=numpy.zeros([nbnodes,1]) # Values on the boundary \n FbVals[(nbnodes-nXpoints+1):-1]=numpy.ones([nXpoints-2, 1])\n\n```", "```py\n>>> totalNodes = len(allNodes) \n>>> stiff_matrixDense = stiff_matrix.todense() \n>>> stiffNonb = \\ \n stiff_matrixDense[numpy.ix_(NonBoundaryNodes,NonBoundaryNodes)] \n>>> stiffAtb = \\ \n stiff_matrixDense[numpy.ix_(NonBoundaryNodes,boundaryNodes)] \n>>> U=numpy.zeros([totalNodes, 1]) \n>>> U[NonBoundaryNodes] = numpy.linalg.solve( - stiffNonb , \\\n stiffAtb * FbVals ) \n>>> U[boundaryNodes] = FbVals \n\n```", "```py\n>>> X = vertices[0] \n>>> Y = vertices[1] \n>>> Z = U.T.flatten() \n>>> from mpl_toolkits.mplot3d import axes3d\n>>> fig = plt.figure() \n>>> ax = fig.add_subplot(111, projection='3d') \n>>> surf = ax.plot_trisurf(X, Y, Z, cmap=cm.jet, linewidth=0) \n>>> fig.colorbar(surf) \n>>> fig.tight_layout() \n>>> ax.set_xlabel('X',fontsize=16)\n>>> ax.set_ylabel('Y',fontsize=16)\n>>> ax.set_zlabel(r\"$\\phi$\",fontsize=36)\n>>> plt.show() \n\n```", "```py\n>>> from numpy import pi, sinh, sin, cos, sum\n>>> def f(x,y): \n return sum( 2*(1.0/(n*pi) - \\\n cos(n*pi)/(n*pi))*(sinh(n*pi*x)/ \\\n sinh(n*pi))*sin(n*pi*y) \n for n in range(1,200)) \n>>> Ze = f(X,Y) \n>>> ZdiffZe = Ze - Z \n>>> plt.plot(ZdiffZe) \n>>> plt.show() \n\n```"]