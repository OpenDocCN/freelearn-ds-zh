- en: Chapter 8. Chart Them Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an area chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a scatter plot chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bubble chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will turn our attention to one of the oldest and well trusted
    companions in data visualization—charts. Charts are a well defined and well understood
    graphical representation of data; the following definition just confirms it:'
  prefs: []
  type: TYPE_NORMAL
- en: (In charts) the data is represented by symbols, such as bars in a bar chart,
    lines in a line chart, or slices in a pie chart.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jensen C. & Anderson L. (1991)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When charts are used in data visualization, their well understood graphical
    semantics and syntax relieve the audience of your visualization from the burden
    of learning the meaning of the graphical metaphor. Hence they can focus on the
    data itself and the information generated through visualization. The goal of this
    chapter is not only to introduce some of the commonly used chart types but also
    demonstrate how the various topics and techniques we have learned so far can be
    combined and leveraged in producing sleek interactive charts using D3.
  prefs: []
  type: TYPE_NORMAL
- en: Recipes in this chapter are much longer than the recipes we have encountered
    so far since they are designed to implement fully functional reusable charts.
    I have tried to break it into different segments and with consistent chart structures
    to ease your reading experience. However, it is still highly recommended to open
    the companion code examples in your browser and your text editor while going through
    this chapter to minimize potential confusion and maximize the benefit.
  prefs: []
  type: TYPE_NORMAL
- en: '**D3 chart convention**: Before we dive into creating our first reusable chart
    in D3, we need to cover some charting conventions commonly accepted in the D3
    community otherwise we might risk creating charting libraries that confuse our
    user instead of helping them.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you would have imagined, D3 charts are most commonly implemented using SVG
    instead of HTML; however, the convention we discuss here would also apply to HTML-based
    charts albeit the implementation detail will be somewhat different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/2162OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: D3 chart convention
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see this convention explained by the creator of D3 please visit [http://bl.ocks.org/mbostock/3019563](http://bl.ocks.org/mbostock/3019563)
  prefs: []
  type: TYPE_NORMAL
- en: As shown in this diagram the point of origin (0, 0) in an SVG image is at its
    top-leftmost corner as expected, however, the most important aspect of this convention
    pertains to how chart margins are defined and furthermore where the axes are placed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Margins**: First of all, let us see the most important aspect of this convention—the
    margins. As we can see for each chart there are four different margin settings:
    left, right, top, and bottom margins. A flexible chart implementation should allow
    its user to set different values for each of these margins and we will see in
    later recipes how this can be achieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coordinate translation**: Secondly, this convention also suggests that the
    coordinate reference of the chart body (grey area) should be defined using a SVG
    translate transformation `translate(margin.left, margin.top)`. This translation
    effectively moves the chart body area to the desired point, and one additional
    benefit of this approach is, by shifting the frame of reference for chart body
    coordinates, it simplifies the job of creating sub-elements inside the chart body
    since the margin size becomes irrelevant. For any sub-element inside the chart
    body, its point of origin (0, 0) is now the top-leftmost corner of the chart body
    area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Axes**: Lastly, the final aspect of this convention is regarding how and
    where chart axes are placed. As shown by this diagram chart axes are placed inside
    chart margins instead of being part of the chart body. This approach has the advantage
    of treating axes as peripheral elements in a chart, hence not convoluting the
    chart body implementation and additionally making axes rendering logic chart-independent
    and easily reusable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's create our first reusable D3 chart with all the knowledge and techniques
    we learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a line chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Line chart is a common, basic chart type that is widely used in many fields.
    This chart consists of a series of data points connected by straight line segments.
    A line chart is also typically bordered by two perpendicular axes: the x axis
    and y axis. In this recipe, we will see how this basic chart can be implemented
    using D3 as a reusable JavaScript object that can be configured to display multiple
    data series on a different scale. Along with that we will also show the technique
    of implementing a dynamic multi-data-series update with animation.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to have the companion code example open while reading
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the code that implements this chart type. Due the length
    of the recipe we will only show the outline of the code here while diving into
    the details in the following *How it works...* section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Line chart
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we can see, this recipe is significantly more involved than anything we have
    encountered so far, so now I will break it into multiple detailed sections with
    different focuses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chart object and attributes**: First, we will take a look at how this chart
    object is created and how associated attributes can be retrieved and set on the
    chart object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the chart object is defined using a function called `lineChart`
    on line 1A following the functional object pattern we have discussed in the *Understanding
    D3-Style JavaScript* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with D3.js"), *Getting Started with D3*.js. Leveraging the greater flexibility
    with information hiding offered by the functional object pattern, we have defined
    a series of internal attributes all named starting with an underscore (line 1B).
    Some of these attributes are made public by offering accessor function (line 1C).
    Publically accessible attributes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`: Chart SVG total width in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height`: Chart SVG total height in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margins`: Chart margins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colors`: Chart ordinal color scale used to differentiate different data series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: x axis scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: y axis scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accessor functions are implemented using the technique we introduced in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with D3.js"), *Getting Started
    with D3.js*, effectively combining both getter and setter functions in one function,
    which behaves as a getter when no argument is given and a setter when an argument
    is present (line 1C). Additionally, both `lineChart` function and its accessors,
    return a chart instance thus allowing function chaining. Finally, the chart object
    also offers an `addSeries` function which simply pushes a data array (`series`)
    into its internal data storage array (`_data`), see line 1D.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Chart body frame rendering**: After covering the basic chart object and its
    attributes, the next aspect of this reusable chart implementation is the chart
    body `svg:g` element rendering and its clip path generation.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `render` function defined on line 2A is responsible for creating the `svg:svg`
    element and setting its `width` and `height` (line 2B). After that, it creates
    an `svg:clipPath` element that covers the entire chart body area. The `svg:clipPath`
    element is used to restrict the region where paint can be applied. In our case
    we use it to restrict where the line and dots can be painted (only within the
    chart body area). This code generates the following SVG element structure that
    defines the chart body:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works...](img/2162OS_08_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on clipping and masking please visit [http://www.w3.org/TR/SVG/masking.html](http://www.w3.org/TR/SVG/masking.html)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `renderBody` function defined on line 2D generates the `svg:g` element which
    wraps all the chart body content with a translation set according to the chart
    margin convention we have discussed in the previous section (line 2E).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Render axes**: Axes are rendered in the function `renderAxes` (line 3A).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As discussed in the previous chapter, both x and y axes are rendered inside
    the chart margin area. We are not going into details about axes rendering since
    we have discussed this topic in much detail in [Chapter 5](ch05.html "Chapter 5. Playing
    with Axes"), *Playing with Axes*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Render data series**: Everything we discussed so far in this recipe is not
    unique to this chart type alone but rather it is a shared framework among other
    Cartesian coordinates based chart types. Finally, now we will discuss how the
    line segments and dots are created for multiple data series. Let''s take a look
    at the following code fragments that are responsible for data series rendering.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The line segments and dots are generated using techniques we introduced in [Chapter
    7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*. The `d3.svg.line`
    generator was created on line 4A to create `svg:path` that maps the data series.
    The Enter-and-Update pattern is used to create the data line (line 4B). Line 4C
    sets a different color for each data line based on its index. Lastly, line 4E
    sets the transition in the update mode to move the data line smoothly on each
    update. The `renderDots` function performs a similar rendering logic that generates
    a set of `svg:circle` elements representing each data point (line 4E), coordinating
    its color based on the data series index (line 4F), and finally also initiates
    a transition on line 4G, so the dots can move with the line whenever the data
    is updated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As illustrated by this recipe, creating a reusable chart component involves
    actually quite a bit of work. However, more than two-thirds of the code is required
    in creating peripheral graphical elements and accessors methods. Therefore in
    a real-world project you can extract this logic and reuse a large part of this
    implementation for other charts; though we did not do this in our recipes in order
    to reduce the complexity, so you can quickly grasp all aspects of chart rendering.
    Due to limited scope in this book, in later recipes we will omit all peripheral
    rendering logic while only focusing on the core logic related to each chart type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating an area chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An area chart or an area graph is very similar to a line chart and largely implemented
    based on the line chart. The main difference between an area chart and a line
    chart is that in the area chart, the area between the axis and the line are filled
    with colors or textures. In this recipe we will explore techniques of implementing
    a type of area chart known as **Layered Area Chart**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since an area chart implementation is largely based on the line chart implementation
    and it shares a lot of common graphical elements such as the axes and the clip
    path, therefore in this recipe we will only show the code concerning the area
    chart implementation specifics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following layered area chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Layered area chart
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned before, since the area chart implementation is based on our
    line chart implementation, a large part of the implementation is identical to
    the line chart. In fact the area chart needs to render the exact line and dots
    implemented in the line chart. The crucial difference lies in `renderAreas` function.
    In this recipe we rely on the area generation technique discussed in [Chapter
    7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*. The `d3.svg.area`
    generator was created on line A with its upper line created to match the line
    while its lower line (`y0`) fixed on x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once the area generator is defined, a classic Enter-and-Update pattern is employed
    to create and update the areas. In the Enter case (line B), an `svg:path` element
    was created for each data series and colored using its series index so it will
    have matching color with our line and dots (line C).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Whenever the data is updated, as well as for newly created areas, we start a
    transition (line D) to update the area `svg:path` elements' `d` attribute to the
    desired shape (line E).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since we know that the line chart implementation animates both line and dots
    when updated, therefore our area update transition here effectively allows the
    areas to be animated and moved in accordance with both lines and dots in our chart.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also add the CSS style for `path.area` to decrease its opacity so
    areas become see-through; hence allowing the layered effect we desire.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Creating a scatter plot chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scatter plot or scatter graph is another common type of diagram used to display
    data points on Cartesian coordinates with two different variables. Scatter plot
    is especially useful when exploring the problem of clustering and classification.
    In this recipe, we will learn how to implement a multi-series scatter plot chart
    in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A scatter plot is another chart which uses Cartesian coordinates. Thus, a large
    part of its implementation is very similar to the charts we have introduced so
    far, therefore the code concerning peripheral graphical elements are again omitted
    to save space in this book. Please review the companion code for the complete
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates a scatter plot chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot chart
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The content of the scatter plot chart is mainly rendered by the `renderSymbols`
    function on line B. You probably have already noticed that the `renderSymbols`
    function implementation is very similar to the `renderDots` function we discussed
    in the *Creating a line chart* recipe. This is not by accident since both are
    trying to plot data points on Cartesian coordinates with two variables (x and
    y). In the case of plotting dots, we were creating `svg:circle` elements, while
    in scatter plot we need to create `d3.svg.symbol` elements. D3 provides a list
    of predefined symbols that can be generated easily and rendered using an `svg:path`
    element. On line A we defined an ordinal scale to allow mapping of data series
    index to different symbol types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the data points with symbols is quite straight-forward. First we loop
    through the data series array and for each data series we create a set of `svg:path`
    elements representing each data point in the series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Whenever data series are updated, as well as for newly created symbols, we apply
    the update with transition (line C) placing them on the right coordinates with
    an SVG translation transformation (line D).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the `d` attribute of each `svg:path` element is generated using the
    `d3.svg.symbol` generator function as shown on line E.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bubble chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bubble chart is a typical visualization capable of displaying three data dimensions.
    Every data entity with its three data points is visualized as a bubble (or disk)
    on Cartesian coordinates, with two different variables represented using x axis
    and y axis, similar to the scatter plot chart. While the third dimension is represented
    using the radius of the bubble (size of the disk). Bubble chart is particularly
    useful when used to facilitate understanding of relationships between data entities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will explore techniques and ways of implementing a typical
    bubble chart using D3\. The following code example shows the important implementation
    aspects of a bubble chart with accessors and peripheral graphic implementation
    details omitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bubble chart
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overall, bubble chart implementation follows the same pattern as other chart
    implementations introduced in this chapter so far. However, since in bubble chart
    we want to visualize three different dimensions (x, y, and radius) instead of
    two, therefore a new scale `_r` was added in this implementation (line A).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the bubble chart related implementation details are handled by the
    `renderBubbles` function. It starts with setting the range on the radius scale
    (line B). Of course we can also make the radius range configurable in our chart
    implementation; however, for simplicity we chose to set it explicitly here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once the range is set, then we iterated through our data series and for each
    series we created a set of `svg:circle` elements (line C). Finally we handled
    the newly created bubble as well as its update in the last section, where `svg:circle`
    elements are colored and placed to the correct coordinates using its `cx` and
    `cy` attributes (line D and E). In the end, the bubble size is controlled using
    its radius attribute `r` mapped using the `_r` scale we defined earlier (line
    F).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some bubble chart implementations, the implementer also leverages the color
    of each bubble to visualize a fourth data dimension, though some believe this
    kind of visual representation is hard to grasp and superfluous.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bar chart is a visualization that uses either horizontal (row charts) or vertical
    (column charts) rectangular bars with length proportional to the values that they
    represent. In this recipe we will implement a column chart using D3\. A column
    chart is capable of visually representing two variables at the same time with
    its y axis; in other words, the bar height, and its x axis. The x axis values
    can be either discrete or continuous (for example, a histogram). In our example
    we choose to visualize continuous values on the x axis and hence effectively implementing
    a histogram. However, the same techniques can be applied when working with discrete
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code example shows the important implementation aspects of a histogram
    with accessors and peripheral graphic implementation details omitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/2162OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart (histogram)
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One major difference here is that the bar chart implementation does not support
    multiple data series. Therefore instead of using a 2-dimensional array storing
    multiple data series as we did with other charts so far, in this implementation,
    the `_data` array simply stores a single set of data points directly. Main bar
    chart related visualization logic resides in the `renderBars` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the first step, we defined the padding between bars (line A), so later on
    we can automatically calculate the width of each bar. Afterwards we generate an
    `svg:rect` element (the bars) for each data point (line B).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Then in the update section we place each bar at the correct coordinates using
    its `x` and `y` attributes (line C and D) and extend each bar all the way down
    to touch the x axis with an adaptive `height` calculated on line E.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally we calculate the optimal width for each bar using the number of bars
    as well as the padding value we have defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Of course in a more flexible implementation, we can make the padding configurable
    instead of being fixed to 2 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before planning to implement your own reusable chart for your next visualization
    project, make sure you also check out the following open source reusable chart
    projects based on D3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NVD3: [http://nvd3.org/](http://nvd3.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rickshaw: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
