- en: Chapter 8. Chart Them Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 图表化
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating a line chart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建折线图
- en: Creating an area chart
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建面积图
- en: Creating a scatter plot chart
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建散点图图表
- en: Creating a bubble chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建气泡图
- en: Creating a bar chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建条形图
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'In this chapter, we will turn our attention to one of the oldest and well trusted
    companions in data visualization—charts. Charts are a well defined and well understood
    graphical representation of data; the following definition just confirms it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把注意力转向数据可视化中最古老且最值得信赖的伴侣之一——图表。图表是对数据进行良好定义和理解的图形表示；以下定义只是证实了这一点：
- en: (In charts) the data is represented by symbols, such as bars in a bar chart,
    lines in a line chart, or slices in a pie chart.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （在图表中）数据通过符号表示，例如条形图中的条形、折线图中的线条或饼图中的切片。
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jensen C. & Anderson L. (1991)
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Jensen C. & Anderson L. (1991)
- en: When charts are used in data visualization, their well understood graphical
    semantics and syntax relieve the audience of your visualization from the burden
    of learning the meaning of the graphical metaphor. Hence they can focus on the
    data itself and the information generated through visualization. The goal of this
    chapter is not only to introduce some of the commonly used chart types but also
    demonstrate how the various topics and techniques we have learned so far can be
    combined and leveraged in producing sleek interactive charts using D3.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当图表用于数据可视化时，它们被广泛理解的图形语义和语法减轻了您的可视化观众学习图形隐喻含义的负担。因此，他们可以专注于数据本身以及通过可视化生成的信息。本章的目标不仅是介绍一些常用的图表类型，还演示了我们将学到的一些主题和技术如何结合并利用D3来制作流畅的交互式图表。
- en: Recipes in this chapter are much longer than the recipes we have encountered
    so far since they are designed to implement fully functional reusable charts.
    I have tried to break it into different segments and with consistent chart structures
    to ease your reading experience. However, it is still highly recommended to open
    the companion code examples in your browser and your text editor while going through
    this chapter to minimize potential confusion and maximize the benefit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱比我们迄今为止遇到的食谱要长得多，因为它们旨在实现功能齐全的可重用图表。我已经尝试将其分解为不同的部分，并使用一致的图表结构来简化您的阅读体验。然而，仍然强烈建议在阅读本章时，同时打开浏览器中的配套代码示例和您的文本编辑器，以最大限度地减少潜在的混淆并最大化收益。
- en: '**D3 chart convention**: Before we dive into creating our first reusable chart
    in D3, we need to cover some charting conventions commonly accepted in the D3
    community otherwise we might risk creating charting libraries that confuse our
    user instead of helping them.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**D3图表惯例**：在我们深入创建第一个可重用图表之前，我们需要了解D3社区中普遍接受的某些图表惯例，否则我们可能会冒着创建让用户困惑而不是帮助他们的图表库的风险。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you would have imagined, D3 charts are most commonly implemented using SVG
    instead of HTML; however, the convention we discuss here would also apply to HTML-based
    charts albeit the implementation detail will be somewhat different.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想象，D3图表通常使用SVG而不是HTML来实现；然而，我们在这里讨论的惯例也适用于基于HTML的图表，尽管实现细节将有所不同。
- en: 'Let''s first take a look at the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看以下图表：
- en: '![Introduction](img/2162OS_08_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/2162OS_08_01.jpg)'
- en: D3 chart convention
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: D3图表惯例
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see this convention explained by the creator of D3 please visit [http://bl.ocks.org/mbostock/3019563](http://bl.ocks.org/mbostock/3019563)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解D3创建者的这一惯例解释，请访问[http://bl.ocks.org/mbostock/3019563](http://bl.ocks.org/mbostock/3019563)
- en: As shown in this diagram the point of origin (0, 0) in an SVG image is at its
    top-leftmost corner as expected, however, the most important aspect of this convention
    pertains to how chart margins are defined and furthermore where the axes are placed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如此图表所示，SVG图像中的原点（0, 0）位于其左上角，这是预期的，然而，这一惯例最重要的方面是关于如何定义图表边距，以及进一步轴线的位置。
- en: '**Margins**: First of all, let us see the most important aspect of this convention—the
    margins. As we can see for each chart there are four different margin settings:
    left, right, top, and bottom margins. A flexible chart implementation should allow
    its user to set different values for each of these margins and we will see in
    later recipes how this can be achieved.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边距**：首先，让我们看看这一惯例最重要的方面——边距。正如我们所看到的，对于每个图表，都有四个不同的边距设置：左边距、右边距、上边距和下边距。灵活的图表实现应该允许用户为这些边距中的每一个设置不同的值，我们将在后面的食谱中看到如何实现这一点。'
- en: '**Coordinate translation**: Secondly, this convention also suggests that the
    coordinate reference of the chart body (grey area) should be defined using a SVG
    translate transformation `translate(margin.left, margin.top)`. This translation
    effectively moves the chart body area to the desired point, and one additional
    benefit of this approach is, by shifting the frame of reference for chart body
    coordinates, it simplifies the job of creating sub-elements inside the chart body
    since the margin size becomes irrelevant. For any sub-element inside the chart
    body, its point of origin (0, 0) is now the top-leftmost corner of the chart body
    area.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**坐标平移**：其次，这个约定还建议使用 SVG 的 `translate` 变换 `translate(margin.left, margin.top)`
    来定义图表主体（灰色区域）的坐标参考。这种平移有效地将图表主体区域移动到所需的位置，这种方法的一个额外好处是，通过改变图表主体坐标的参考框架，简化了在图表主体内部创建子元素的工作，因为边距大小变得无关紧要。对于图表主体内部的任何子元素，其原点（0,
    0）现在位于图表主体区域的左上角。'
- en: '**Axes**: Lastly, the final aspect of this convention is regarding how and
    where chart axes are placed. As shown by this diagram chart axes are placed inside
    chart margins instead of being part of the chart body. This approach has the advantage
    of treating axes as peripheral elements in a chart, hence not convoluting the
    chart body implementation and additionally making axes rendering logic chart-independent
    and easily reusable.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轴**：最后，这个约定的最后一个方面是关于图表轴如何放置以及放置在哪里。如图所示，图表轴放置在图表边距内部，而不是作为图表主体的一部分。这种方法的优势在于将轴视为图表中的外围元素，因此不会混淆图表主体的实现，并且还使轴的渲染逻辑与图表无关且易于重用。'
- en: Now let's create our first reusable D3 chart with all the knowledge and techniques
    we learned so far.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们利用迄今为止学到的所有知识和技巧，创建我们的第一个可重用的 D3 图表。
- en: Creating a line chart
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建折线图
- en: 'Line chart is a common, basic chart type that is widely used in many fields.
    This chart consists of a series of data points connected by straight line segments.
    A line chart is also typically bordered by two perpendicular axes: the x axis
    and y axis. In this recipe, we will see how this basic chart can be implemented
    using D3 as a reusable JavaScript object that can be configured to display multiple
    data series on a different scale. Along with that we will also show the technique
    of implementing a dynamic multi-data-series update with animation.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图是一种常见的基本图表类型，在许多领域得到广泛应用。这种图表由一系列通过直线段连接的数据点组成。折线图通常由两条垂直的轴：x 轴和 y 轴所包围。在本食谱中，我们将看到如何使用
    D3 将这种基本图表实现为一个可重用的 JavaScript 对象，该对象可以配置为在不同的尺度上显示多个数据系列。此外，我们还将展示实现带有动画的动态多数据系列更新的技术。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/line-chart.html)'
- en: It is highly recommended to have the companion code example open while reading
    this recipe.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 非常推荐在阅读本食谱时打开相应的代码示例。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's take a look at the code that implements this chart type. Due the length
    of the recipe we will only show the outline of the code here while diving into
    the details in the following *How it works...* section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实现这种图表类型的代码。由于代码长度较长，我们在这里只展示代码的概要，具体细节将在接下来的 *工作原理...* 部分中详细介绍。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This recipe generates the following chart:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱生成以下图表：
- en: '![How to do it...](img/2162OS_08_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/2162OS_08_02.jpg)'
- en: Line chart
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As we can see, this recipe is significantly more involved than anything we have
    encountered so far, so now I will break it into multiple detailed sections with
    different focuses.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个食谱比我们迄今为止遇到的所有内容都要复杂得多，因此现在我将将其分解成多个具有不同重点的详细部分。
- en: '**Chart object and attributes**: First, we will take a look at how this chart
    object is created and how associated attributes can be retrieved and set on the
    chart object.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**图表对象和属性**：首先，我们将看看这个图表对象是如何创建的，以及如何检索和设置与图表对象关联的属性。'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see, the chart object is defined using a function called `lineChart`
    on line 1A following the functional object pattern we have discussed in the *Understanding
    D3-Style JavaScript* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with D3.js"), *Getting Started with D3*.js. Leveraging the greater flexibility
    with information hiding offered by the functional object pattern, we have defined
    a series of internal attributes all named starting with an underscore (line 1B).
    Some of these attributes are made public by offering accessor function (line 1C).
    Publically accessible attributes are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，图表对象是在第1A行使用名为`lineChart`的函数定义的，遵循我们在[第1章](ch01.html "第1章. 使用D3.js入门")中讨论的函数对象模式，*使用D3.js入门*。利用函数对象模式提供的信息隐藏的更大灵活性，我们定义了一系列内部属性，所有属性名都以下划线开头（第1B行）。其中一些属性通过提供访问器函数（第1C行）公开。公开可访问的属性包括：
- en: '`width`: Chart SVG total width in pixels'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`: 图表SVG总宽度（以像素为单位）'
- en: '`height`: Chart SVG total height in pixels'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: 图表SVG总高度（以像素为单位）'
- en: '`margins`: Chart margins'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`margins`: 图表边距'
- en: '`colors`: Chart ordinal color scale used to differentiate different data series'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colors`: 用于区分不同数据系列的图表序数颜色刻度'
- en: '`x`: x axis scale'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: x轴刻度'
- en: '`y`: y axis scale'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: y轴刻度'
- en: The accessor functions are implemented using the technique we introduced in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with D3.js"), *Getting Started
    with D3.js*, effectively combining both getter and setter functions in one function,
    which behaves as a getter when no argument is given and a setter when an argument
    is present (line 1C). Additionally, both `lineChart` function and its accessors,
    return a chart instance thus allowing function chaining. Finally, the chart object
    also offers an `addSeries` function which simply pushes a data array (`series`)
    into its internal data storage array (`_data`), see line 1D.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 访问器函数是通过我们在[第1章](ch01.html "第1章. 使用D3.js入门")中介绍的技术实现的，*使用D3.js入门*，有效地将获取器和设置器函数结合在一个函数中，当没有提供参数时作为获取器使用，当提供参数时作为设置器使用（第1C行）。此外，`lineChart`函数及其访问器都返回一个图表实例，从而允许函数链式调用。最后，图表对象还提供了一个`addSeries`函数，该函数简单地将数据数组（`series`）推入其内部数据存储数组（`_data`），见第1D行。
- en: '**Chart body frame rendering**: After covering the basic chart object and its
    attributes, the next aspect of this reusable chart implementation is the chart
    body `svg:g` element rendering and its clip path generation.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图表主体框架渲染**：在介绍基本图表对象及其属性之后，本可重用图表实现的下一个方面是图表主体`svg:g`元素的渲染及其裁剪路径生成。'
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `render` function defined on line 2A is responsible for creating the `svg:svg`
    element and setting its `width` and `height` (line 2B). After that, it creates
    an `svg:clipPath` element that covers the entire chart body area. The `svg:clipPath`
    element is used to restrict the region where paint can be applied. In our case
    we use it to restrict where the line and dots can be painted (only within the
    chart body area). This code generates the following SVG element structure that
    defines the chart body:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第2A行定义的`render`函数负责创建`svg:svg`元素并设置其`width`和`height`（第2B行）。之后，它创建一个覆盖整个图表主体区域的`svg:clipPath`元素。`svg:clipPath`元素用于限制可以应用绘画的区域。在我们的例子中，我们使用它来限制线条和点可以绘制的地方（仅限于图表主体区域）。此代码生成以下SVG元素结构，该结构定义了图表主体：
- en: '![How it works...](img/2162OS_08_03.jpg)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![工作原理...](img/2162OS_08_03.jpg)'
- en: Note
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on clipping and masking please visit [http://www.w3.org/TR/SVG/masking.html](http://www.w3.org/TR/SVG/masking.html)
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于裁剪和遮罩的更多信息，请访问[http://www.w3.org/TR/SVG/masking.html](http://www.w3.org/TR/SVG/masking.html)
- en: The `renderBody` function defined on line 2D generates the `svg:g` element which
    wraps all the chart body content with a translation set according to the chart
    margin convention we have discussed in the previous section (line 2E).
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第2D行定义的`renderBody`函数生成一个`svg:g`元素，该元素将所有图表主体内容包裹起来，并设置了一个根据我们在前一部分讨论的图表边距约定进行的平移（第2E行）。
- en: '**Render axes**: Axes are rendered in the function `renderAxes` (line 3A).'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**渲染坐标轴**：坐标轴在`renderAxes`函数（第3A行）中渲染。'
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As discussed in the previous chapter, both x and y axes are rendered inside
    the chart margin area. We are not going into details about axes rendering since
    we have discussed this topic in much detail in [Chapter 5](ch05.html "Chapter 5. Playing
    with Axes"), *Playing with Axes*.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前一章所述，x轴和y轴都渲染在图表边距区域内。我们不会深入讨论坐标轴渲染的细节，因为我们已经在[第5章](ch05.html "第5章. 玩转坐标轴")中详细讨论了这一主题，*玩转坐标轴*。
- en: '**Render data series**: Everything we discussed so far in this recipe is not
    unique to this chart type alone but rather it is a shared framework among other
    Cartesian coordinates based chart types. Finally, now we will discuss how the
    line segments and dots are created for multiple data series. Let''s take a look
    at the following code fragments that are responsible for data series rendering.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**渲染数据系列**：到目前为止，我们在这个食谱中讨论的所有内容并不仅限于这种图表类型，而是一个与其他笛卡尔坐标系图表类型共享的框架。最后，现在我们将讨论如何为多个数据系列创建线段和点。让我们看一下以下负责数据系列渲染的代码片段。'
- en: '[PRE4]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The line segments and dots are generated using techniques we introduced in [Chapter
    7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*. The `d3.svg.line`
    generator was created on line 4A to create `svg:path` that maps the data series.
    The Enter-and-Update pattern is used to create the data line (line 4B). Line 4C
    sets a different color for each data line based on its index. Lastly, line 4E
    sets the transition in the update mode to move the data line smoothly on each
    update. The `renderDots` function performs a similar rendering logic that generates
    a set of `svg:circle` elements representing each data point (line 4E), coordinating
    its color based on the data series index (line 4F), and finally also initiates
    a transition on line 4G, so the dots can move with the line whenever the data
    is updated.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 线段和点是通过我们在[第7章](ch07.html "第7章。进入形状")中介绍的技术生成的，*进入形状*。`d3.svg.line`生成器在第4A行创建，用于创建映射数据系列的`svg:path`。使用Enter-and-Update模式创建数据线（第4B行）。第4C行根据其索引为每条数据线设置不同的颜色。最后，第4E行在更新模式下设置过渡，以便在每次更新时平滑地移动数据线。`renderDots`函数执行类似的渲染逻辑，生成代表每个数据点的`svg:circle`元素集合（第4E行），根据数据系列索引（第4F行）协调其颜色，并在第4G行上最终启动过渡，这样点就可以在数据更新时与线一起移动。
- en: As illustrated by this recipe, creating a reusable chart component involves
    actually quite a bit of work. However, more than two-thirds of the code is required
    in creating peripheral graphical elements and accessors methods. Therefore in
    a real-world project you can extract this logic and reuse a large part of this
    implementation for other charts; though we did not do this in our recipes in order
    to reduce the complexity, so you can quickly grasp all aspects of chart rendering.
    Due to limited scope in this book, in later recipes we will omit all peripheral
    rendering logic while only focusing on the core logic related to each chart type.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如本食谱所示，创建一个可重用的图表组件实际上需要做很多工作。然而，在创建外围图形元素和访问器方法时，需要超过三分之二的代码。因此，在实际项目中，你可以提取这部分逻辑，并将此实现的大部分用于其他图表；尽管我们没有在我们的食谱中这样做，以减少复杂性，这样你可以快速掌握图表渲染的所有方面。由于本书的范围有限，在后面的食谱中，我们将省略所有外围渲染逻辑，而只关注与每种图表类型相关的核心逻辑。
- en: Creating an area chart
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建面积图
- en: An area chart or an area graph is very similar to a line chart and largely implemented
    based on the line chart. The main difference between an area chart and a line
    chart is that in the area chart, the area between the axis and the line are filled
    with colors or textures. In this recipe we will explore techniques of implementing
    a type of area chart known as **Layered Area Chart**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 面积图或面积图与折线图非常相似，在很大程度上是基于折线图实现的。面积图与折线图的主要区别在于，在面积图中，轴和线之间的区域被填充了颜色或纹理。在本食谱中，我们将探讨实现一种称为**分层面积图**的面积图技术。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/area-chart.html)'
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Since an area chart implementation is largely based on the line chart implementation
    and it shares a lot of common graphical elements such as the axes and the clip
    path, therefore in this recipe we will only show the code concerning the area
    chart implementation specifics:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于面积图实现主要基于折线图实现，并且它共享许多常见的图形元素，如轴和裁剪路径，因此在本食谱中，我们只展示与面积图实现特定相关的代码：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This recipe generates the following layered area chart:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱生成了以下分层面积图：
- en: '![How to do it...](img/2162OS_08_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_08_04.jpg)'
- en: Layered area chart
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分层面积图
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we mentioned before, since the area chart implementation is based on our
    line chart implementation, a large part of the implementation is identical to
    the line chart. In fact the area chart needs to render the exact line and dots
    implemented in the line chart. The crucial difference lies in `renderAreas` function.
    In this recipe we rely on the area generation technique discussed in [Chapter
    7](ch07.html "Chapter 7. Getting into Shape"), *Getting into Shape*. The `d3.svg.area`
    generator was created on line A with its upper line created to match the line
    while its lower line (`y0`) fixed on x-axis.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，由于区域图实现基于我们的线形图实现，实现的大部分内容是相同的。事实上，区域图需要渲染线形图中实现的精确线和点。关键的区别在于`renderAreas`函数。在本教程中，我们依赖于第7章中讨论的区域生成技术，即“形状入门”。在行A上创建了`d3.svg.area`生成器，其上边线与线匹配，而下边线（`y0`）固定在x轴上。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the area generator is defined, a classic Enter-and-Update pattern is employed
    to create and update the areas. In the Enter case (line B), an `svg:path` element
    was created for each data series and colored using its series index so it will
    have matching color with our line and dots (line C).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了区域生成器，就采用经典的“进入并更新”模式来创建和更新区域。在进入情况（行B）中，为每个数据系列创建了一个`svg:path`元素，并使用其系列索引进行着色，以便它与我们的线和点匹配颜色（行C）。
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Whenever the data is updated, as well as for newly created areas, we start a
    transition (line D) to update the area `svg:path` elements' `d` attribute to the
    desired shape (line E).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据更新时，以及对于新创建的区域，我们开始一个过渡（行D）来更新区域`svg:path`元素的`d`属性到所需的形状（行E）。
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since we know that the line chart implementation animates both line and dots
    when updated, therefore our area update transition here effectively allows the
    areas to be animated and moved in accordance with both lines and dots in our chart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道线形图实现更新时会同时动画化线和点，因此我们这里的区域更新过渡有效地允许区域根据图表中的线和点进行动画化和移动。
- en: Finally, we also add the CSS style for `path.area` to decrease its opacity so
    areas become see-through; hence allowing the layered effect we desire.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还添加了`path.area`的CSS样式以降低其不透明度，使区域变得透明；因此，允许我们期望的分层效果。
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating a scatter plot chart
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建散点图图表
- en: A scatter plot or scatter graph is another common type of diagram used to display
    data points on Cartesian coordinates with two different variables. Scatter plot
    is especially useful when exploring the problem of clustering and classification.
    In this recipe, we will learn how to implement a multi-series scatter plot chart
    in D3.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图或散点图是另一种常见的图表类型，用于在笛卡尔坐标系中显示具有两个不同变量的数据点。散点图在探索聚类和分类问题时特别有用。在本教程中，我们将学习如何在D3中实现多系列散点图图表。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/scatterplot-chart.html)'
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: A scatter plot is another chart which uses Cartesian coordinates. Thus, a large
    part of its implementation is very similar to the charts we have introduced so
    far, therefore the code concerning peripheral graphical elements are again omitted
    to save space in this book. Please review the companion code for the complete
    implementation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图是另一种使用笛卡尔坐标的图表。因此，其实现的大部分内容与我们之前介绍过的图表非常相似，因此有关外围图形元素的代码在此书中再次省略以节省空间。请查阅配套代码以获取完整的实现。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This recipe generates a scatter plot chart:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程生成散点图图表：
- en: '![How to do it...](img/2162OS_08_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_08_05.jpg)'
- en: Scatter plot chart
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图图表
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The content of the scatter plot chart is mainly rendered by the `renderSymbols`
    function on line B. You probably have already noticed that the `renderSymbols`
    function implementation is very similar to the `renderDots` function we discussed
    in the *Creating a line chart* recipe. This is not by accident since both are
    trying to plot data points on Cartesian coordinates with two variables (x and
    y). In the case of plotting dots, we were creating `svg:circle` elements, while
    in scatter plot we need to create `d3.svg.symbol` elements. D3 provides a list
    of predefined symbols that can be generated easily and rendered using an `svg:path`
    element. On line A we defined an ordinal scale to allow mapping of data series
    index to different symbol types:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图图表的内容主要由第 B 行的 `renderSymbols` 函数渲染。你可能已经注意到，`renderSymbols` 函数的实现与我们在 *创建折线图*
    菜谱中讨论的 `renderDots` 函数非常相似。这并非偶然，因为两者都试图在二维笛卡尔坐标系上绘制数据点（x 和 y）。在绘制点的情况下，我们创建 `svg:circle`
    元素，而在散点图中，我们需要创建 `d3.svg.symbol` 元素。D3 提供了一系列预定义的符号，可以轻松生成并使用 `svg:path` 元素渲染。在第
    A 行中，我们定义了一个序数比例，允许将数据系列索引映射到不同的符号类型：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Plotting the data points with symbols is quite straight-forward. First we loop
    through the data series array and for each data series we create a set of `svg:path`
    elements representing each data point in the series.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用符号绘制数据点相当直接。首先，我们遍历数据系列数组，并为每个数据系列创建一组 `svg:path` 元素，代表系列中的每个数据点。
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Whenever data series are updated, as well as for newly created symbols, we apply
    the update with transition (line C) placing them on the right coordinates with
    an SVG translation transformation (line D).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据系列更新时，以及对于新创建的符号，我们使用带有过渡效果的更新（第 C 行），将它们放置在正确的坐标位置，并使用 SVG 平移变换（第 D 行）。
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, the `d` attribute of each `svg:path` element is generated using the
    `d3.svg.symbol` generator function as shown on line E.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每个 `svg:path` 元素的 `d` 属性是通过 `d3.svg.symbol` 生成函数生成的，如第 E 行所示。
- en: Creating a bubble chart
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建气泡图
- en: A bubble chart is a typical visualization capable of displaying three data dimensions.
    Every data entity with its three data points is visualized as a bubble (or disk)
    on Cartesian coordinates, with two different variables represented using x axis
    and y axis, similar to the scatter plot chart. While the third dimension is represented
    using the radius of the bubble (size of the disk). Bubble chart is particularly
    useful when used to facilitate understanding of relationships between data entities.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡图是一种典型的可视化，能够显示三个数据维度。每个具有三个数据点的数据实体在笛卡尔坐标系上被可视化为一个气泡（或圆盘），使用两个不同的变量通过 x 轴和
    y 轴表示，类似于散点图图表。而第三个维度则使用气泡的半径（圆盘的大小）表示。气泡图在帮助理解数据实体之间的关系时特别有用。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bubble-chart.html)'
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe we will explore techniques and ways of implementing a typical
    bubble chart using D3\. The following code example shows the important implementation
    aspects of a bubble chart with accessors and peripheral graphic implementation
    details omitted.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将探讨使用 D3 实现典型气泡图的技术和方法。以下代码示例显示了气泡图的重要实现方面，省略了访问器和外围图形实现细节。
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This recipe generates the following visualization:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱生成了以下可视化：
- en: '![How to do it...](img/2162OS_08_06.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2162OS_08_06.jpg)'
- en: Bubble chart
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡图
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Overall, bubble chart implementation follows the same pattern as other chart
    implementations introduced in this chapter so far. However, since in bubble chart
    we want to visualize three different dimensions (x, y, and radius) instead of
    two, therefore a new scale `_r` was added in this implementation (line A).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，气泡图实现遵循本章迄今为止介绍的其他图表实现的相同模式。然而，由于在气泡图中我们想要可视化三个不同的维度（x、y 和半径）而不是两个，因此在此实现中添加了一个新的比例
    `_r`（第 A 行）。
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Most of the bubble chart related implementation details are handled by the
    `renderBubbles` function. It starts with setting the range on the radius scale
    (line B). Of course we can also make the radius range configurable in our chart
    implementation; however, for simplicity we chose to set it explicitly here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数气泡图相关的实现细节都由 `renderBubbles` 函数处理。它从设置半径刻度上的范围（行 B）开始。当然，我们也可以在我们的图表实现中使半径范围可配置；然而，为了简单起见，我们选择在这里显式设置它：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the range is set, then we iterated through our data series and for each
    series we created a set of `svg:circle` elements (line C). Finally we handled
    the newly created bubble as well as its update in the last section, where `svg:circle`
    elements are colored and placed to the correct coordinates using its `cx` and
    `cy` attributes (line D and E). In the end, the bubble size is controlled using
    its radius attribute `r` mapped using the `_r` scale we defined earlier (line
    F).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了范围，然后我们遍历我们的数据系列，并为每个系列创建一组 `svg:circle` 元素（行 C）。最后，我们在最后一节中处理新创建的气泡及其更新，其中
    `svg:circle` 元素通过其 `cx` 和 `cy` 属性着色并放置到正确的坐标（行 D 和 E）。最后，气泡的大小通过其半径属性 `r` 控制使用我们之前定义的
    `_r` 缩放（行 F）。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In some bubble chart implementations, the implementer also leverages the color
    of each bubble to visualize a fourth data dimension, though some believe this
    kind of visual representation is hard to grasp and superfluous.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些气泡图实现中，实现者还利用每个气泡的颜色来可视化第四个数据维度，尽管有些人认为这种视觉表示难以理解且多余。
- en: Creating a bar chart
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条形图
- en: A bar chart is a visualization that uses either horizontal (row charts) or vertical
    (column charts) rectangular bars with length proportional to the values that they
    represent. In this recipe we will implement a column chart using D3\. A column
    chart is capable of visually representing two variables at the same time with
    its y axis; in other words, the bar height, and its x axis. The x axis values
    can be either discrete or continuous (for example, a histogram). In our example
    we choose to visualize continuous values on the x axis and hence effectively implementing
    a histogram. However, the same techniques can be applied when working with discrete
    values.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图是一种使用水平（行图）或垂直（柱状图）矩形条进行可视化的图表，其长度与它们所代表的值成比例。在这个配方中，我们将使用 D3 实现一个柱状图。柱状图能够同时通过其
    y 轴视觉表示两个变量；换句话说，条形的高度和其 x 轴。x 轴的值可以是离散的或连续的（例如，直方图）。在我们的例子中，我们选择在 x 轴上可视化连续值，从而有效地实现直方图。然而，相同的技巧也可以用于处理离散值。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter8/bar-chart.html)'
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following code example shows the important implementation aspects of a histogram
    with accessors and peripheral graphic implementation details omitted.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了直方图的重要实现方面，省略了访问器和外围图形实现细节。
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This recipe generates the following visualization:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方生成了以下可视化：
- en: '![How to do it...](img/2162OS_08_07.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2162OS_08_07.jpg)'
- en: Bar chart (histogram)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图（直方图）
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: One major difference here is that the bar chart implementation does not support
    multiple data series. Therefore instead of using a 2-dimensional array storing
    multiple data series as we did with other charts so far, in this implementation,
    the `_data` array simply stores a single set of data points directly. Main bar
    chart related visualization logic resides in the `renderBars` function.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个主要区别是条形图实现不支持多个数据系列。因此，与迄今为止我们处理其他图表时使用的一个存储多个数据系列的二维数组不同，在这个实现中，`_data`
    数组直接存储一组数据点。与条形图相关的可视化逻辑主要位于 `renderBars` 函数中。
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the first step, we defined the padding between bars (line A), so later on
    we can automatically calculate the width of each bar. Afterwards we generate an
    `svg:rect` element (the bars) for each data point (line B).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们定义了条之间的填充（行 A），这样我们就可以在以后自动计算每个条的宽度。之后，我们为每个数据点生成一个 `svg:rect` 元素（条）。然后，我们打开以下链接：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then in the update section we place each bar at the correct coordinates using
    its `x` and `y` attributes (line C and D) and extend each bar all the way down
    to touch the x axis with an adaptive `height` calculated on line E.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在更新部分，我们使用每个条的`x`和`y`属性（行C和D）将其放置在正确的坐标位置，并将每个条延伸到底部，使其与x轴接触，高度自适应地计算在行E。
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally we calculate the optimal width for each bar using the number of bars
    as well as the padding value we have defined earlier.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用条的数量以及我们之前定义的填充值来计算每个条的最优宽度。
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Of course in a more flexible implementation, we can make the padding configurable
    instead of being fixed to 2 pixels.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在更灵活的实现中，我们可以将填充宽度设置为可配置的，而不是固定为2像素。
- en: See also
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Before planning to implement your own reusable chart for your next visualization
    project, make sure you also check out the following open source reusable chart
    projects based on D3:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在计划为您的下一个可视化项目实现自己的可重用图表之前，请确保您还检查以下基于D3的开放源代码可重用图表项目：
- en: 'NVD3: [http://nvd3.org/](http://nvd3.org/).'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NVD3: [http://nvd3.org/](http://nvd3.org/).'
- en: 'Rickshaw: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/).'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Rickshaw: [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/).'
