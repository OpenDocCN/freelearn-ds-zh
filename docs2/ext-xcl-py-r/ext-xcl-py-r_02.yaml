- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Writing Excel Spreadsheets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Excel 工作表
- en: This may sound contradictory to modern-day data science practices, but Excel
    has its place in the world of analysis and data storytelling. Exporting data from
    R and Python to Excel can be beneficial for several reasons, offering users the
    opportunity to leverage the strengths of both platforms. Excel is a widely used
    spreadsheet program known for its user-friendly interface, while R and Python
    is a powerful statistical programming language. By exporting data from R and Python
    to Excel, users can take advantage of Excel’s familiar and versatile features
    to further analyze, visualize, and share data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来与现代数据科学实践相矛盾，但 Excel 在分析和数据叙事的世界中仍有其位置。将数据从 R 和 Python 导出到 Excel 可以出于几个原因而有益，为用户提供利用两个平台优势的机会。Excel
    是一个用户界面友好的广泛使用的电子表格程序，而 R 和 Python 是一种强大的统计编程语言。通过将数据从 R 和 Python 导出到 Excel，用户可以利用
    Excel 熟悉且多功能的特性来进一步分析、可视化和共享数据。
- en: One significant advantage of exporting data from R and Python to Excel is the
    ability to harness Excel’s extensive range of data manipulation and visualization
    capabilities. Excel provides a variety of tools, such as pivot tables, charts,
    and conditional formatting, which enable users to explore and present data more
    interactively and intuitively. These features allow for quick data exploration,
    identification of trends, and the creation of professional-looking reports or
    presentations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据从 R 和 Python 导出到 Excel 的一大优势是能够利用 Excel 广泛的数据操作和可视化功能。Excel 提供了各种工具，如数据透视表、图表和条件格式化，这些工具使用户能够更互动和直观地探索和展示数据。这些功能允许快速的数据探索、识别趋势，并创建外观专业的报告或演示文稿。
- en: Moreover, exporting data to Excel can facilitate collaboration with colleagues
    or stakeholders who may not be familiar with R and Python or statistical programming.
    Excel is a widely recognized and accessible tool that’s often used for data analysis
    and reporting across various industries. By exporting data to Excel, users can
    share the data with others who may prefer working with spreadsheets, allowing
    for easier collaboration and knowledge exchange.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将数据导出到 Excel 可以方便与可能不熟悉 R 和 Python 或统计编程的同事或利益相关者进行协作。Excel 是一个被广泛认可且易于使用的工具，常用于各个行业的数据分析和报告。通过将数据导出到
    Excel，用户可以与他人共享数据，这些人可能更愿意使用电子表格，从而实现更便捷的协作和知识交流。
- en: Another reason to export data from R and Python to Excel is to take advantage
    of Excel’s extensive ecosystem of add-ins and extensions. Excel offers numerous
    specialized tools and add-ins that can enhance data analysis, such as Power Query,
    Power Pivot, and Solver. These tools provide additional functionalities for data
    cleaning, advanced calculations, and optimization, which may not be readily available
    or as user-friendly in R and Python. Exporting data to Excel allows users to leverage
    these tools and benefit from the broader Excel ecosystem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个将数据从 R 和 Python 导出到 Excel 的原因是利用 Excel 广泛的插件和扩展生态系统。Excel 提供了众多专业工具和插件，可以增强数据分析，如
    Power Query、Power Pivot 和 Solver。这些工具提供了数据清理、高级计算和优化的额外功能，这些功能在 R 和 Python 中可能不太容易获得或不够用户友好。将数据导出到
    Excel 允许用户利用这些工具并从更广泛的 Excel 生态系统中受益。
- en: In summary, exporting data from R and Python to Excel allows you to utilize
    Excel’s user-friendly interface, powerful data manipulation and visualization
    capabilities, and compatibility with a wide range of users. By combining the strengths
    of both R and Excel, individuals can enhance their data analysis workflows, improve
    collaboration, and effectively communicate insights derived from statistical analyses.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，将数据从 R 和 Python 导出到 Excel 允许您利用 Excel 的用户友好界面、强大的数据操作和可视化能力，以及与广泛用户的兼容性。通过结合
    R 和 Excel 的优势，个人可以增强他们的数据分析工作流程，提高协作，并有效地传达从统计分析中得出的见解。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Packages to write into Excel sheets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可写入 Excel 工作表的包
- en: Creating and manipulating Excel sheets using Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 创建和操作 Excel 工作表
- en: Keeping it simple – exporting data to Excel with `pandas`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持简单 —— 使用 `pandas` 将数据导出到 Excel
- en: Advanced mode – `openpyxl` for Excel manipulation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级模式 —— 使用 `openpyxl` 操作 Excel
- en: Choosing between `openpyxl` and `pandas`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `openpyxl` 和 `pandas` 之间进行选择
- en: Other alternatives
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他替代方案
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We are going to use the built-in `Iris` dataset in this chapter. This is a good
    dataset for demonstration purposes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用内置的 `Iris` 数据集。这是一个用于演示的好数据集。
- en: 'This chapter’s code can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/tree/main/Chapter2)。
- en: Packages to write into Excel files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入Excel文件的包
- en: In this section, we are going to go over a few different libraries that we can
    use to write `data.frames`/`tibbles` to Excel files. We are going to use the `writexl`,
    `openxlsx`, and `xlsx` libraries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍几个不同的库，我们可以使用这些库将`data.frames`/`tibbles`写入Excel文件。我们将使用`writexl`、`openxlsx`和`xlsx`库。
- en: In the following section, we are going to list each package, specify where you
    can find the function documentation that writes the data to Excel, and go over
    the functions’ parameters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将列出每个包，指定您可以在哪里找到写入Excel数据的功能文档，并介绍函数的参数。
- en: writexl
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: writexl
- en: 'The `writexl` package is part of the rOpenSci consortium and can be found here:
    [https://docs.ropensci.org/writexl/reference/write_xlsx.html](https://docs.ropensci.org/writexl/reference/write_xlsx.html).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`writexl`包是rOpenSci联盟的一部分，可以在[https://docs.ropensci.org/writexl/reference/write_xlsx.html](https://docs.ropensci.org/writexl/reference/write_xlsx.html)找到。'
- en: The library does not require Java or Excel to work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该库不需要Java或Excel即可工作。
- en: The function that writes the data to Excel is `write_xlsx()`. Let’s go over
    the different parameters of the function and look at a full pseudo function call.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据写入Excel的函数是`write_xlsx()`。让我们来看看函数的不同参数，并查看一个完整的伪函数调用。
- en: 'First, let’s look at the function call itself – that is, `write_xlsx()`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看函数调用本身——即`write_xlsx()`：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let’s look at each of the parameters in this code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看这段代码中的每个参数：
- en: '`x`: This is the DataFrame or named list of DataFrames that will be sheets
    in the `.``xlsx` file.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：这是将成为`.xlsx`文件工作表的DataFrame或命名DataFrame列表。'
- en: '`path`: A filename to write to. Here, you could type something such as `tempfile(fileext
    = .xlsx")col_names` to write column names at the top of the file.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：要写入的文件名。在这里，您可以输入类似于`tempfile(fileext = ".xlsx")`的内容，以在文件顶部写入列名。'
- en: '`format_headers`: Make `col_names` in the `.xlsx` file centered and bold.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format_headers`：使`.xlsx`文件中的`col_names`居中并加粗。'
- en: '`use_zip64`: Use `.xlsx` files. Not all platforms can read this.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_zip64`：使用`.xlsx`文件。并非所有平台都能读取此文件。'
- en: 'Let’s see what a simple example of this function would look like in typical
    practice:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个函数在典型实践中的简单示例会是什么样子：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: openxlsx
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: openxlsx
- en: 'The `openxlsx` package can be found at [https://ycphs.github.io/openxlsx/;](https://ycphs.github.io/openxlsx/;)
    the function that we are going to use to write to an Excel file is `write.xlsx()`.
    Again, we’ll go over the full function call and the parameters that get passed
    to this function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`openxlsx`包可以在[https://ycphs.github.io/openxlsx/](https://ycphs.github.io/openxlsx/)找到；我们将使用`write.xlsx()`函数写入Excel文件。同样，我们将介绍完整的函数调用以及传递给此函数的参数：'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let’s go over all of the parameters of the function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们过一遍函数的所有参数：
- en: '`x`: A DataFrame or a (named) list of objects that can be handled by `writeData()`
    or `writeDataTable()` to write to the file.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`：一个DataFrame或可以由`writeData()`或`writeDataTable()`处理的（命名）对象列表，用于写入文件。'
- en: '`file`: A file path to save the `.``xlsx` file.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`：保存`.xlsx`文件的文件路径。'
- en: '`asTable`: If `TRUE`, then it will use `writeDataTable()` rather than `writeData()`
    to write `x` to the file (the default value is `FALSE`).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asTable`：如果为`TRUE`，则将使用`writeDataTable()`而不是`writeData()`将`x`写入文件（默认值为`FALSE`）。'
- en: '`overwrite`: Overwrite existing file (this defaults to `TRUE`, as with `write.table`).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overwrite`：覆盖现有文件（默认为`TRUE`，与`write.table`相同）。'
- en: '`...`: Additional arguments passed to `buildWorkbook();`. To see additional
    details, you can type `?openxlsx::buildWorkbook` into the R console.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...`：传递给`buildWorkbook()`函数的附加参数。要查看更多详细信息，您可以在R控制台中输入`?openxlsx::buildWorkbook`。'
- en: 'Let’s take a look at a short example of some code where we will write the Iris
    dataset to a file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一段简短的代码示例，我们将使用它将Iris数据集写入文件：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we’ll look at the last package, `xlsx`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看最后一个包，`xlsx`。
- en: xlsx
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: xlsx
- en: 'The `xlsx` package can be found at [https://github.com/colearendt/xlsx;](https://github.com/colearendt/xlsx;)
    the function that we are using to explore writing to an Excel file is `write.xlsx()`.
    Given that this function has the same name as the function from the `openxlsx`
    library, it is important to be aware of namespace collision. This takes place
    when there is a function from two or more separate packages that have the same
    name. Avoiding any possible namespace collision for users is easy but can be cumbersome.
    To do so, you can write `xlsx::write.xlsx()`. Again, let’s go over the full function
    call and the parameters that get passed to this function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://github.com/colearendt/xlsx](https://github.com/colearendt/xlsx)找到`xlsx`包；我们用来探索写入Excel文件的函数是`write.xlsx()`。鉴于这个函数与`openxlsx`库中的函数同名，了解命名空间冲突是很重要的。这种情况发生在有两个或更多独立包中的函数具有相同名称时。避免用户出现任何可能的命名空间冲突很容易，但可能会有些繁琐。为此，你可以写`xlsx::write.xlsx()`。再次强调，让我们回顾一下完整的函数调用以及传递给此函数的参数：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let’s go over the parameters of the function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下函数的参数：
- en: '`x`: A DataFrame to write to the workbook.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 要写入工作簿的DataFrame。'
- en: '`file`: The path to the output file.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`: 输出文件的路径。'
- en: '`sheetName`: A character string that contains the sheet’s name.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sheetName`: 包含工作表名称的字符字符串。'
- en: '`col.names`: A logical value indicating whether the column names of `x` are
    to be written along with `x` to the file.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col.names`: 一个逻辑值，指示是否将`x`的列名与`x`一起写入文件。'
- en: '`row.names`: A logical value indicating whether the row names of `x` are to
    be written along with `x` to the file.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row.names`: 一个逻辑值，指示是否将`x`的行名与`x`一起写入文件。'
- en: '`append`: A logical value indicating whether `x` should be appended to an existing
    file. If `TRUE`, the file is read from disk. Otherwise, the file is created.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append`: 一个逻辑值，指示是否将`x`附加到现有文件。如果为`TRUE`，则从磁盘读取文件。否则，创建文件。'
- en: '`showNA`: A logical value. If set to `FALSE`, `NA` values will be left as empty
    cells.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showNA`: 一个逻辑值。如果设置为`FALSE`，`NA`值将保留为空单元格。'
- en: '`password`: A string containing the password.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: 包含密码的字符串。'
- en: 'A simple function call would take the following form:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的函数调用将采取以下形式：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have gone over the three different functions, it is important to
    see how each one writes – that is, how long they take to write to disk and how
    large the output file is. To do this, we are going to use the `rbenchmark` library
    for speed testing. We will also bring in the `dplyr` library to arrange the results
    by their relative order of speed. After this, we will see which file has the smallest
    size output.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了三个不同的函数，重要的是要看到每个函数是如何写入的——也就是说，它们写入磁盘所需的时间以及输出文件的大小。为此，我们将使用`rbenchmark`库进行速度测试。我们还将引入`dplyr`库，按速度的相对顺序排列结果。之后，我们将看到哪个文件具有最小的输出大小。
- en: 'Here is the code for doing this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完成这个任务的代码：
- en: '![Figure 2.1 – File write benchmark](img/B19142_02_1.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 文件写入基准测试](img/B19142_02_1.jpg)'
- en: Figure 2.1 – File write benchmark
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 文件写入基准测试
- en: 'This R code is used to compare the performance of three different packages
    for writing DataFrames to Excel files: `writexl`, `openxlsx`, and `xlsx`. Here’s
    a breakdown of what the code does:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这段R代码用于比较将DataFrame写入Excel文件的三个不同包的性能：`writexl`、`openxlsx`和`xlsx`。以下是代码的分解：
- en: The code starts by loading several libraries (`rbenchmark`, `xlsx`, `writexl`,
    `openxlsx`, and `dplyr`) using the `library()` function. These libraries provide
    functions that will be used later in the code. If you do not have them installed,
    you will need to use something such as `install.packaegs("package")` to do so.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码首先使用`library()`函数加载几个库（`rbenchmark`、`xlsx`、`writexl`、`openxlsx`和`dplyr`）。这些库提供了将在代码中稍后使用的函数。如果你没有安装它们，你需要使用类似`install.packages("package")`的命令来安装。
- en: The `n` variable is assigned a value of `5`. This variable represents the number
    of times the code will be executed for each package to measure performance.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`n`变量被赋予值为`5`。这个变量代表代码将为每个包执行多少次以衡量性能。'
- en: 'The `benchmark()` function is called to compare the performance of the three
    Excel-writing packages. It takes several arguments:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`benchmark()`函数来比较三个Excel写入包的性能。它接受几个参数：
- en: The first argument, `writexl`, is a name that’s assigned to the first test.
    Inside the curly braces, the `write_xlsx()` function from the `writexl` package
    is called to write the `iris` dataset to a temporary Excel file.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数 `writexl` 是分配给第一个测试的名称。在大括号内，调用 `writexl` 包中的 `write_xlsx()` 函数将 `iris`
    数据集写入临时 Excel 文件。
- en: The second argument, `openxlsx`, is a name that’s assigned to the second test.
    Inside the curly braces, the `write.xlsx()` function from the `openxlsx` package
    is called to write the `iris` dataset to a temporary Excel file.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数 `openxlsx` 是分配给第二个测试的名称。在大括号内，调用 `openxlsx` 包中的 `write.xlsx()` 函数将 `iris`
    数据集写入临时 Excel 文件。
- en: The third argument, `xlsx`, is a name that’s assigned to the third test. Inside
    the curly braces, the `write.xlsx()` function from the `xlsx` package is called
    to write the `iris` dataset to a temporary Excel file with an `.``xlsx` extension.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数 `xlsx` 是分配给第三个测试的名称。在大括号内，调用 `xlsx` 包中的 `write.xlsx()` 函数将 `iris` 数据集写入具有
    `.xlsx` 扩展名的临时 Excel 文件。
- en: The `replications` argument is set to `n`, indicating the number of times each
    test should be repeated.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replications` 参数设置为 `n`，表示每个测试应该重复的次数。'
- en: The `columns` argument specifies the columns to include in the output. It includes
    the names of the test, any replications, the elapsed time, relative performance,
    user time, and system time.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns` 参数指定要在输出中包含的列。它包括测试名称、任何重复项、经过的时间、相对性能、用户时间和系统时间。'
- en: The resulting benchmark results are then piped (`|>`) to the `arrange()` function
    from the `dplyr` package. The `arrange()` function is used to sort the results
    based on the relative performance column, arranging them in ascending order.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将生成的基准测试结果通过管道（`|>`）传递到 `dplyr` 包的 `arrange()` 函数。`arrange()` 函数用于根据相对性能列对结果进行排序，按升序排列。
- en: 'For the preceding benchmarking process, the results are as follows:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于前面的基准测试过程，结果如下：
- en: '[PRE6]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In summary, the preceding code loads the necessary libraries, performs benchmarks
    on three different Excel-writing packages (`writexl`, `openxlsx`, and `xlsx`),
    and sorts the results based on relative performance. The purpose is to compare
    the efficiency of these packages when writing the `iris` dataset to an Excel file.
    It is important to note that there are many factors at play here, such as the
    system and operating system, among others. Now, let’s see how the sizes measure
    up:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总结来说，前面的代码加载必要的库，对三个不同的 Excel 写入包（`writexl`、`openxlsx` 和 `xlsx`）进行基准测试，并根据相对性能对结果进行排序。目的是比较这些包在将
    `iris` 数据集写入 Excel 文件时的效率。需要注意的是，这里有许多因素在起作用，例如系统和操作系统等。现在，让我们看看文件大小如何：
- en: '![Figure 2.2 – File size comparison](img/B19142_02_2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 文件大小比较](img/B19142_02_2.jpg)'
- en: Figure 2.2 – File size comparison
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 文件大小比较
- en: 'This R code performs the following tasks using different packages to write
    the `iris` dataset to Excel files and then retrieves the sizes of those files,
    listed in bytes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 R 代码使用不同的包将 `iris` 数据集写入 Excel 文件，然后检索这些文件的大小（以字节为单位）：
- en: 'The `write_xlsx()` function from the `writexl` package is called with two arguments:
    the `iris` dataset and a temporary file path generated using the `tempfile()`
    function. The `write_xlsx()` function writes the `iris` dataset to the temporary
    Excel file.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writexl` 包中的 `write_xlsx()` 函数使用两个参数：`iris` 数据集和由 `tempfile()` 函数生成的临时文件路径。`write_xlsx()`
    函数将 `iris` 数据集写入临时 Excel 文件。'
- en: The `file.info()` function is called with the temporary file path, `(tmp1)`,
    as an argument. It retrieves information about the file, including its size. The
    `$size` attribute is used to extract the size of the file.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file.info()` 函数使用临时文件路径 `(tmp1)` 作为参数被调用。它检索有关文件的信息，包括其大小。使用 `$size` 属性来提取文件的大小。'
- en: 'The `write.xlsx()` function from the `openxlsx` package is called with two
    arguments: the `iris` dataset and another temporary file path generated using
    the `tempfile()` function. The `write.xlsx()` function writes the `iris` dataset
    to the temporary Excel file.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openxlsx` 包中的 `write.xlsx()` 函数使用两个参数：`iris` 数据集和由 `tempfile()` 函数生成的另一个临时文件路径。`write.xlsx()`
    函数将 `iris` 数据集写入临时 Excel 文件。'
- en: Similar to *the second point*, the `file.info()` function is called with the
    temporary file path, `(tmp2)`, as an argument to retrieve the size of the file.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与**第二点**类似，`file.info()` 函数使用临时文件路径 `(tmp2)` 作为参数来检索文件的大小。
- en: 'The `write.xlsx()` function from the `xlsx` package is called with two arguments:
    the `iris` dataset and a temporary file path generated using the combination of
    `tempfile()` and `paste0()` functions. The `write.xlsx()` function writes the
    `iris` dataset to the temporary Excel file with an `.xlsx` extension. For the
    `xlsx` package, we use `paste0()` and specify the file extension since this isn’t
    done by default in the function, so the user must be careful and specify this
    accordingly.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自`xlsx`包的`write.xlsx()`函数使用两个参数调用：`iris`数据集和由`tempfile()`和`paste0()`函数组合生成的临时文件路径。`write.xlsx()`函数将`iris`数据集写入具有`.xlsx`扩展名的临时Excel文件。对于`xlsx`包，我们使用`paste0()`并指定文件扩展名，因为这不是函数的默认行为，所以用户必须小心并相应地指定这一点。
- en: Again, the `file.info()` function is called with the temporary file path, `(tmp3)`,
    as an argument to retrieve the size of the file.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次，`file.info()`函数使用临时文件路径`(tmp3)`作为参数来检索文件大小。
- en: In summary, this code uses different packages (`writexl`, `openxlsx`, and `xlsx`)
    to write the `iris` dataset into three separate Excel files. Then, it retrieves
    the sizes of those files using the `file.info()` function. Its purpose is to compare
    the sizes of the resulting Excel files when using these different packages. Again,
    many factors that are outside the scope of this book could be affecting file sizes,
    but you must be aware the different systems and configurations could have an impact
    on this.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这段代码使用不同的包（`writexl`、`openxlsx`和`xlsx`）将`iris`数据集写入三个单独的Excel文件。然后，它使用`file.info()`函数检索这些文件的大小。其目的是比较使用这些不同包生成的Excel文件的大小。再次强调，许多超出本书范围的因素可能会影响文件大小，但你必须意识到不同的系统和配置可能会对此产生影响。
- en: A comprehensive recap and insights
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个全面的总结和洞察
- en: In the previous section, we learned how to write `data.frame` to Excel using
    three different packages. We learned that with these three different packages
    come differences in the speed of writing in a file and differences in the size
    of the output file itself. It is important to run these benchmarks as we might
    be trying to achieve speed, a small file size, or some combination thereof.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用三个不同的包（`data.table`、`dplyr`和`tidyr`）将`data.frame`写入Excel。我们了解到，这三个不同的包在文件写入速度和输出文件本身的大小上存在差异。运行这些基准测试很重要，因为我们可能试图实现速度、小文件大小或两者的组合。
- en: 'When it comes to speed, there are a few reasons why it is good to run benchmarks
    in R:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到速度时，有几个原因说明为什么在R中运行基准测试是好的：
- en: '**Accuracy**: Benchmarks can be used to accurately measure the speed of different
    functions. This is important because it can help you choose the fastest function
    for your task.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准确性**：基准测试可以用来准确测量不同函数的速度。这很重要，因为它可以帮助你选择最适合你任务的函数。'
- en: '**Consistency**: Benchmarks can be used to consistently measure the speed of
    different functions over time. This is important because it can help you identify
    any changes in performance that may have occurred.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：基准测试可以用来在一段时间内一致地测量不同函数的速度。这很重要，因为它可以帮助你识别任何可能发生的性能变化。'
- en: '**Reliability**: Benchmarks can be used to reliably measure the speed of different
    functions across different platforms. This is important because it can help you
    ensure that the results of your benchmarks are accurate and reproducible.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：基准测试可以用来在不同平台上可靠地测量不同函数的速度。这很重要，因为它可以帮助你确保基准测试的结果是准确和可重复的。'
- en: In addition to these advantages, benchmarks can also be used to identify bottlenecks
    in your code. This can help you improve the performance of your code as you can
    optimize the areas that are taking the most time to execute.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些优点之外，基准测试还可以用来识别代码中的瓶颈。这可以帮助你提高代码的性能，因为你可以在执行时间最长的区域进行优化。
- en: 'Here are some of the most popular R packages for benchmarking:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些最受欢迎的R基准测试包：
- en: '`microbenchmark`: This package provides a simple and convenient way to benchmark
    R code'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`microbenchmark`：这个包提供了一个简单方便的方式来基准测试R代码'
- en: '`rbenchmark`: This package provides a more comprehensive set of benchmarking
    features than `microbenchmark`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbenchmark`：这个包提供了比`microbenchmark`更全面的基准测试功能'
- en: '`rbenchmark2`: This package is a fork of `rbenchmark` that provides additional
    features, such as the ability to benchmark multiple cores'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbenchmark2`：这个包是`rbenchmark`的分支，提供了额外的功能，例如能够基准测试多个核心'
- en: When choosing a benchmarking package, it is important to consider your needs
    and the available features. For example, if you need to benchmark a large amount
    of code, you may want to choose a package that supports *parallel benchmarking*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择基准测试包时，考虑你的需求和可用功能非常重要。例如，如果你需要基准测试大量代码，你可能希望选择支持 *并行基准测试* 的包。
- en: Once you have chosen a benchmarking package, you can use it to compare the speed
    of different functions. To do this, you will need to create a benchmark object
    that contains the functions that you want to compare. You can then use the `benchmark`
    object to run the functions and measure their execution time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了基准测试包，你就可以用它来比较不同函数的速度。为此，你需要创建一个包含你想要比较的函数的基准测试对象。然后你可以使用 `benchmark`
    对象来运行这些函数并测量它们的执行时间。
- en: The results of the benchmark can be used to identify the fastest function for
    your task. You can then use this information to improve the performance of your
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试的结果可以用来确定适合你任务的最高效函数。然后你可以利用这些信息来提升你代码的性能。
- en: In this section, we learned not only how to write data to an Excel file, but
    also how to do so with different R libraries. This is important as it helps you
    explore different methods of achieving the same goal. This exercise also illustrated
    the differences in implementations, which we saw by checking the output file size
    and by benchmarking the time it took to write our data to Excel with each package.
    Next, we will conduct similar exercises using Python.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们不仅学习了如何将数据写入 Excel 文件，还学习了如何使用不同的 R 库来完成这一任务。这很重要，因为它帮助你探索实现同一目标的不同方法。这项练习还展示了实现方式之间的差异，我们通过检查输出文件大小以及通过基准测试每个包将数据写入
    Excel 所需的时间来观察到这些差异。接下来，我们将使用 Python 进行类似的练习。
- en: Creating and manipulating Excel sheets using Python
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 创建和操作 Excel 表格
- en: In this section, we will explore how to create and manipulate Excel sheets using
    Python.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用 Python 创建和操作 Excel 表格。
- en: Exporting data to Excel is a common requirement in various data analysis and
    reporting scenarios. Excel provides a familiar and widely used interface for data
    visualization, sharing, and further analysis.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种数据分析和报告场景中，将数据导出到 Excel 是一个常见需求。Excel 提供了一个熟悉且广泛使用的界面，用于数据可视化、共享和进一步分析。
- en: We’ll cover various tasks in the sections ahead, including creating new workbooks,
    adding sheets to existing workbooks, deleting sheets, and manipulating data within
    an Excel workbook. Python provides several libraries that make these tasks straightforward
    and efficient. But first, let’s understand why we need to export data to Excel.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将涵盖各种任务，包括创建新工作簿、向现有工作簿添加工作表、删除工作表以及在 Excel 工作簿中操作数据。Python 提供了几个库，使这些任务变得简单高效。但首先，让我们了解为什么我们需要将数据导出到
    Excel。
- en: Why export data to Excel?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要将数据导出到 Excel？
- en: Exporting data to Excel offers several benefits. Firstly, Excel provides a user-friendly
    environment for data exploration and visualization, allowing users to easily sort,
    filter, and analyze data. Additionally, Excel’s rich formatting capabilities make
    it suitable for generating professional reports or sharing data with stakeholders
    who may not have programming knowledge. Furthermore, Excel supports various formulas
    and functions, enabling users to perform calculations on the exported data easily.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据导出到 Excel 提供了几个好处。首先，Excel 提供了一个用户友好的环境，用于数据探索和可视化，使用户能够轻松地对数据进行排序、筛选和分析。此外，Excel
    丰富的格式化功能使其适合生成专业报告或与可能没有编程知识的利益相关者共享数据。此外，Excel 支持各种公式和函数，使用户能够轻松地对导出的数据进行计算。
- en: Let’s see how we can export data to Excel with Python!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Python 将数据导出到 Excel！
- en: Keeping it simple – exporting data to Excel with pandas
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持简单——使用 pandas 将数据导出到 Excel
- en: '`pandas` is a popular data manipulation library in Python that provides powerful
    tools for data analysis. It also offers excellent functionality for exporting
    data to Excel. Using `pandas`, you can effortlessly transform your data into Excel
    sheets or workbooks.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 是 Python 中一个流行的数据处理库，它提供了强大的数据分析工具，同时也提供了将数据导出到 Excel 的出色功能。使用 `pandas`，你可以轻松地将你的数据转换成
    Excel 表格或工作簿。'
- en: '`pandas` provides the `DataFrame.to_excel()` method, allowing you to export
    data to an Excel file with just a few lines of code. Here’s an example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 提供了 `DataFrame.to_excel()` 方法，允许你仅用几行代码就将数据导出到 Excel 文件。以下是一个示例：'
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The code doesn’t return anything, but it does have a side effect – it creates
    the `data.xlsx` file with the exported data:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不返回任何内容，但它确实有一个副作用 – 它创建了包含导出数据的 `data.xlsx` 文件：
- en: '![Figure 2.3 – Excel export with pandas](img/B19142_02_3.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 使用 pandas 导出 Excel](img/B19142_02_3.jpg)'
- en: Figure 2.3 – Excel export with pandas
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 使用 pandas 导出 Excel
- en: While `pandas` is good at simple data export, we may want to have more control
    over the Excel workbook. The next few subsections cover more advanced Excel manipulation
    using `openpyxl`. We will cover the capabilities of `openpyxl`, starting with
    the basics such as creating a new workbook by adding and deleting sheets up to
    and including manipulating data in an existing sheet.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `pandas` 在简单的数据导出方面做得很好，但我们可能希望对 Excel 工作簿有更多的控制。接下来的几个小节将涵盖使用 `openpyxl`
    的更高级 Excel 操作。我们将从创建和删除工作表等基础知识开始，包括在现有工作表中操作数据。
- en: Advanced mode – openpyxl for Excel manipulation
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级模式 – 使用 openpyxl 操作 Excel
- en: In this section, we will look at the `openpyxl` package, which allows for a
    more nuanced interaction with Excel when writing data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨 `openpyxl` 包，它允许在写入数据时与 Excel 进行更细致的交互。
- en: Creating a new workbook
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新工作簿
- en: 'To start working with Excel sheets in Python, we need to create a new workbook.
    `openpyxl` provides an intuitive API to create, modify, and save Excel workbooks.
    Here’s an example code snippet that demonstrates creating a new workbook:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中开始处理 Excel 工作表，我们需要创建一个新的工作簿。`openpyxl` 提供了一个直观的 API 来创建、修改和保存 Excel
    工作簿。以下是一个示例代码片段，演示了如何创建一个新的工作簿：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once again, the preceding code snippet doesn’t return anything but it does
    have a side effect – it creates the workbook:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，前面的代码片段不返回任何内容，但它确实有一个副作用 – 它创建了工作簿：
- en: '![Figure 2.4 – Creating a workbook with openpyxl](img/B19142_02_4.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 使用 openpyxl 创建工作簿](img/B19142_02_4.jpg)'
- en: Figure 2.4 – Creating a workbook with openpyxl
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 使用 openpyxl 创建工作簿
- en: Adding sheets to the workbook
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向工作簿中添加工作表
- en: 'Once we have a workbook, we can add sheets to it. Adding sheets allows us to
    organize data into separate sections or categories. `openpyxl` provides a simple
    method, `create_sheet()`, to add sheets to a workbook. Let’s see an example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了工作簿，我们就可以向其中添加工作表。添加工作表使我们能够将数据组织到单独的分区或类别中。`openpyxl` 提供了一个简单的方法 `create_sheet()`，用于向工作簿中添加工作表。让我们看看一个示例：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result is an `openpyxl` worksheet object we can use going forward. The resulting
    workbook can then be saved for future use.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个我们可以继续使用的 `openpyxl` 工作表对象。然后可以将结果工作簿保存以供将来使用。
- en: The preceding example attempts to save the workbook you are working with. If
    the workbook is open in Excel, the attempt will fail, with a hard-to-decipher
    error message about the COM systems. Make sure you close your Excel instance before
    attempting to save your work from the Python side! This warning will remain applicable
    to most of this book, so keep it in mind for later chapters as well.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例尝试保存您正在处理的工作簿。如果工作簿在 Excel 中打开，尝试将失败，并显示一个难以理解的关于 COM 系统的错误消息。在尝试从 Python
    端保存工作之前，请确保关闭 Excel 实例！这个警告将适用于本书的大部分内容，所以请记住在后面的章节中也要注意。
- en: Deleting a sheet
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除工作表
- en: 'At times, we may need to remove a sheet from a workbook. The `remove()` method
    in `openpyxl` allows us to delete a sheet by its name. The following is an example
    of how you can delete a sheet from a workbook. Please note that we will not save
    the result, so the stored version of the file remains unchanged:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能需要从工作簿中删除一个工作表。`openpyxl` 中的 `remove()` 方法允许我们通过名称删除工作表。以下是如何从工作簿中删除工作表的示例。请注意，我们不会保存结果，因此文件存储的版本保持不变：
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As before, the code has a side effect (the deleted sheet) but no return value:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，代码有一个副作用（被删除的工作表）但没有返回值：
- en: '![Figure 2.5 – Deleting a sheet with openpyxl](img/B19142_02_5.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 使用 openpyxl 删除工作表](img/B19142_02_5.jpg)'
- en: Figure 2.5 – Deleting a sheet with openpyxl
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 使用 openpyxl 删除工作表
- en: In this example, we used the sheet we created previously. The `load_workbook()`
    method from `openpyxl` is used to load the existing workbook, after which the
    `remove()` method is used to delete a sheet specified by name.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用了之前创建的工作表。使用 `openpyxl` 的 `load_workbook()` 方法来加载现有工作簿，之后使用 `remove()`
    方法删除指定名称的工作表。
- en: Manipulating an existing workbook
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作现有工作簿
- en: 'Python libraries such as `openpyxl` provide powerful methods to manipulate
    existing Excel workbooks. We can modify cells, apply formatting, insert formulas,
    and more. Let’s look at an example of how to update a cell value in an existing
    workbook:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python 库如 `openpyxl` 提供了强大的方法来操作现有的 Excel 工作簿。我们可以修改单元格、应用格式、插入公式等。让我们看看如何更新现有工作簿中单元格值的示例：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code snippet will directly change the value of a cell in the Excel sheet:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将直接更改 Excel 表格中单元格的值：
- en: '![Figure 2.6 – Updating the value of a cell with openpyxl](img/B19142_02_6.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 使用 openpyxl 更新单元格的值](img/B19142_02_6.jpg)'
- en: Figure 2.6 – Updating the value of a cell with openpyxl
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 使用 openpyxl 更新单元格的值
- en: 'The result is as we expect (keep in mind that the process of deleting the sheet
    was not saved):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 结果正如我们所预期（请注意，删除工作表的过程没有被保存）：
- en: "![Figure 2.7 – The fruit of our efforts – Hell\uFEFFo, World! in A1, Sheet1](img/B19142_02_7.jpg)"
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 我们努力的成果 – A1 单元格中的 Hello, World! 在 Sheet1 表格中](img/B19142_02_7.jpg)'
- en: Figure 2.7 – The fruit of our efforts – Hello, World! in A1, Sheet1
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 我们努力的成果 – A1 单元格中的 Hello, World! 在 Sheet1 表格中
- en: Choosing between openpyxl and pandas
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 openpyxl 和 pandas
- en: When it comes to exporting data to Excel, both `openpyxl` and `pandas` are excellent
    choices. `openpyxl` is a dedicated library for working with Excel files as it
    provides extensive functionality for creating, modifying, and saving Excel workbooks.
    On the other hand, `pandas` offers a high-level data manipulation interface with
    convenient methods for exporting data to Excel, which is ideal when a simple data
    dump is all you need.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到将数据导出到 Excel 时，`openpyxl` 和 `pandas` 都是极佳的选择。`openpyxl` 是一个专门用于处理 Excel
    文件的库，因为它提供了创建、修改和保存 Excel 工作簿的广泛功能。另一方面，`pandas` 提供了一个高级数据操作接口，并提供了方便的方法将数据导出到
    Excel，这在只需要简单的数据导出时非常理想。
- en: If you require fine-grained control over the Excel file’s structure, such as
    adding formatting, formulas, or charts, `openpyxl` is a suitable option. It allows
    you to work directly with the underlying Excel objects, providing more flexibility.
    On the other hand, if you primarily focus on data manipulation and want a simpler
    way to export DataFrames to Excel without worrying about Excel-specific features,
    `pandas` is a convenient choice. It abstracts away some of the lower-level details
    and provides a more straightforward interface for exporting data. While `openpyxl`
    provides a simple abstracted way of manipulating and controlling sheets, R also
    has this in packages such as `openxlsx` and `xlsx`, both of which provide their
    own form of these types of functionalities.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要精细控制 Excel 文件的结构，例如添加格式、公式或图表，`openpyxl` 是一个合适的选择。它允许您直接与底层的 Excel 对象工作，提供更多灵活性。另一方面，如果您主要关注数据操作，并希望以更简单的方式将
    DataFrame 导出到 Excel 而不必担心 Excel 特定功能，`pandas` 是一个方便的选择。它抽象了一些底层细节，并为导出数据提供了一个更直接的接口。虽然
    `openpyxl` 提供了一种简单的抽象方式来操作和控制工作表，R 语言也有类似的功能，例如在 `openxlsx` 和 `xlsx` 等包中，它们都提供了自己形式的这些功能。
- en: Other alternatives
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他替代方案
- en: Apart from `pandas` and `openpyxl`, there are other libraries available for
    exporting data to Excel from Python. Some popular alternatives include `XlsxWriter`,
    `xlrd`, and `xlwt`. These libraries offer different features and capabilities,
    and the choice depends on your specific requirements. `XlsxWriter`, for example,
    emphasizes performance and supports advanced Excel features, while `xlrd` and
    `xlwt` provide functionality for reading and writing older Excel file formats
    (`.xls`).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `pandas` 和 `openpyxl` 之外，还有其他库可以从 Python 将数据导出到 Excel。一些流行的替代方案包括 `XlsxWriter`、`xlrd`
    和 `xlwt`。这些库提供了不同的功能和能力，选择取决于您的具体需求。例如，`XlsxWriter` 强调性能并支持高级 Excel 功能，而 `xlrd`
    和 `xlwt` 提供了读取和写入旧版 Excel 文件格式（`.xls`）的功能。
- en: In this section, we explored the benefits of exporting data to Excel, demonstrated
    how to do so using `pandas`, went through the process of creating and manipulating
    Excel sheets using `openpyxl`, discussed the reasons for choosing `openpyxl` or
    `pandas` based on your needs, and mentioned other alternatives available. By leveraging
    the power of these libraries, you can seamlessly export your data from Python
    to Excel, enabling efficient analysis, reporting, and collaboration.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了将数据导出到 Excel 的好处，展示了如何使用 `pandas` 来实现这一操作，介绍了使用 `openpyxl` 创建和操作 Excel
    表格的过程，讨论了根据您的需求选择 `openpyxl` 或 `pandas` 的原因，并提到了其他可用的替代方案。通过利用这些库的强大功能，您可以从 Python
    无缝地将数据导出到 Excel，从而实现高效的分析、报告和协作。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In [*Chapter 2*](B19142_02.xhtml#_idTextAnchor036), we explored the process
    of writing data to Excel using different R and Python libraries and benchmarking
    their performance. We also discussed creating and manipulating Excel sheets from
    Python using `pandas` and `openpyxl`. By comparing their features and exploring
    alternatives, you have gained insights into the capabilities of both R and Python
    for Excel tasks.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第二章*](B19142_02.xhtml#_idTextAnchor036)，我们探讨了使用不同的 R 和 Python 库将数据写入 Excel
    的过程，并对它们的性能进行了基准测试。我们还讨论了使用 `pandas` 和 `openpyxl` 从 Python 创建和操作 Excel 工作表。通过比较它们的特性和探索替代方案，你已对
    R 和 Python 在 Excel 任务方面的能力有了深入了解。
- en: In the next chapter, we will learn how to execute VBA code with R and Python.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 R 和 Python 执行 VBA 代码。
