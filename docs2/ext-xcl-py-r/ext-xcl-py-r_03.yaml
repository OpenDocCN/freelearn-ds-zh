- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Executing VBA Code from R and Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 R 和 Python 中执行 VBA 代码
- en: Integrating different programming languages can unlock powerful capabilities
    and streamline workflows. When it comes to working with Excel files, **Visual
    Basic for Applications** (**VBA**) is a popular choice for automating tasks. However,
    there are scenarios where you may want to execute VBA code from within R or Python,
    harnessing the strengths of these languages for data manipulation, analysis, and
    visualization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 集成不同的编程语言可以解锁强大的功能并简化工作流程。当涉及到处理 Excel 文件时，**Visual Basic for Applications**
    (**VBA**) 是自动化任务的一个流行选择。然而，在某些情况下，您可能希望从 R 或 Python 中执行 VBA 代码，利用这些语言在数据处理、分析和可视化方面的优势。
- en: Executing VBA code from an Excel file through R or Python provides a flexible
    approach to leverage existing VBA macros or extend the functionalities of Excel.
    This integration enables data scientists, analysts, and developers to seamlessly
    incorporate Excel files into their workflows, combining the strengths of VBA with
    the analytical capabilities of R or Python.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 R 或 Python 从 Excel 文件中执行 VBA 代码提供了一种灵活的方法来利用现有的 VBA 宏或扩展 Excel 的功能。这种集成使数据科学家、分析师和开发者能够无缝地将
    Excel 文件纳入其工作流程，结合 VBA 的优势与 R 或 Python 的分析能力。
- en: By executing VBA code from R or Python, you can automate complex processes,
    perform data manipulations, generate reports, and interact with Excel’s features
    programmatically. This capability empowers users to handle large datasets, implement
    advanced data processing techniques, and produce customized outputs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从 R 或 Python 中执行 VBA 代码，您可以自动化复杂的过程，执行数据处理，生成报告，并以编程方式与 Excel 的功能交互。这种能力使用户能够处理大型数据集，实施高级数据处理技术，并生成定制化的输出。
- en: There are several libraries and packages available in R and Python that facilitate
    the execution of VBA code from an Excel file. These tools provide APIs and functions
    to communicate with Excel and execute VBA macros directly from your scripts, eliminating
    the need for manual intervention.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: R 和 Python 中有几种库和包可用于从 Excel 文件中执行 VBA 代码。这些工具提供 API 和函数，用于与 Excel 通信并直接从您的脚本中执行
    VBA 宏，从而消除手动干预的需要。
- en: In this chapter, we will explore different approaches to executing VBA code
    from an Excel file using R and Python. We will delve into practical examples,
    showcasing how to integrate these languages with Excel and leverage the combined
    power to automate tasks and enhance data analysis workflows.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨从 Excel 文件中执行 VBA 代码的不同方法，使用 R 和 Python。我们将深入实际示例，展示如何将这些语言与 Excel
    集成，并利用其结合的力量来自动化任务并增强数据分析工作流程。
- en: By unlocking the potential of VBA execution in conjunction with R or Python,
    users can take their Excel-based projects to the next level, driving efficiency,
    accuracy, and productivity. Stay tuned to learn more about this exciting integration
    and its wide-ranging applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合 R 或 Python 中的 VBA 执行功能，用户可以将基于 Excel 的项目提升到新的水平，提高效率、准确性和生产力。请继续关注，了解更多关于这个激动人心的集成及其广泛应用的详细信息。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Installing and explaining the R package, RDCOMClient
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并解释 R 包，RDCOMClient
- en: Executing sample VBA code with RDCOMClient
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RDCOMClient 执行示例 VBA 代码
- en: Python for VBA integration with `pywin32`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pywin32` 进行 VBA 集成的 Python
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this section, we will need to install one R library and one for Python:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们需要安装一个 R 库和一个 Python 库：
- en: The `RDCOMClient` R library
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` R 库'
- en: The `pywin32` Python library
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的 `pywin32` 库
- en: 'All relevant code for this chapter can be found in the GitHub repository here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有相关的代码都可以在以下 GitHub 仓库中找到：
- en: '[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/main/chapter3](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/main/chapter3)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/main/chapter3](https://github.com/PacktPublishing/Extending-Excel-with-Python-and-R/main/chapter3)'
- en: Installing and explaining the RDCOMClient R library
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装并解释 RDCOMClient R 库
- en: '`RDCOMClient` is an R package that provides a bridge between R and Microsoft’s
    **component object model** (**COM**) architecture, enabling users to interact
    with COM objects from within R. With RDCOMClient, users can harness the power
    of COM-based applications, such as Microsoft Excel, Word, PowerPoint, and Outlook,
    to automate tasks, manipulate data, and integrate R with other software systems.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 是一个 R 包，它为 R 和微软的 **组件对象模型** (**COM**) 架构之间提供了一个桥梁，使用户能够在 R 中与
    COM 对象交互。通过 RDCOMClient，用户可以利用基于 COM 的应用程序（如 Microsoft Excel、Word、PowerPoint 和
    Outlook）的力量来自动化任务、操作数据并将 R 与其他软件系统集成。'
- en: Before diving into RDCOMClient, it’s important to grasp the concept of COM objects.
    COM is a binary interface standard that allows different software components to
    interact and share functionality across various programming languages and platforms.
    In the context of RDCOMClient, COM objects refer to the application-specific objects
    exposed by COM-based applications that can be accessed and manipulated programmatically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 RDCOMClient 之前，理解 COM 对象的概念非常重要。COM 是一种二进制接口标准，允许不同的软件组件在多种编程语言和平台上相互交互并共享功能。在
    RDCOMClient 的上下文中，COM 对象是指由基于 COM 的应用程序公开的应用特定对象，这些对象可以通过编程方式访问和操作。
- en: 'RDCOMClient provides a set of functions and methods to interact with COM objects,
    making it easier to automate tasks and extract data from COM-based applications.
    Here are some key features:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RDCOMClient 提供了一套函数和方法来与 COM 对象交互，使自动化任务和从基于 COM 的应用程序中提取数据变得更加容易。以下是一些关键特性：
- en: '`RDCOMClient` allows users to create and connect to COM objects, establishing
    a communication channel between R and the target application. For instance, you
    can create an Excel application object and access its functionalities directly
    from R.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 允许用户创建和连接到 COM 对象，在 R 和目标应用程序之间建立通信通道。例如，您可以从 R 中直接创建 Excel 应用程序对象并访问其功能。'
- en: '`RDCOMClient` enables you to invoke methods and retrieve or modify object properties.
    This functionality allows you to automate complex tasks, manipulate data, and
    customize application behavior.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 允许您调用方法和检索或修改对象属性。这种功能使您能够自动化复杂任务，操作数据并自定义应用程序行为。'
- en: '`RDCOMClient`, you can access collections within COM objects, such as workbooks,
    worksheets, or ranges in Excel. This capability facilitates data extraction, manipulation,
    and analysis directly from R, leveraging the power of Excel’s built-in features.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 允许访问 COM 对象中的集合，例如 Excel 中的工作簿、工作表或范围。这种能力使您能够直接从 R 中提取、操作和分析数据，利用
    Excel 内置功能的强大功能。'
- en: '`RDCOMClient` supports event handling, allowing users to respond to events
    triggered by COM objects. For example, you can write R code that executes whenever
    a specific event occurs in Excel, such as a cell value change or a worksheet activation.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 支持事件处理，使用户能够对 COM 对象触发的事件做出响应。例如，您可以编写 R 代码，以便在 Excel 中发生特定事件（如单元格值更改或工作表激活）时执行。'
- en: '`RDCOMClient` provides mechanisms for handling errors that may occur during
    COM object interactions, ensuring robustness in your code. It also manages memory
    allocation and cleanup, preventing memory leaks and optimizing resource utilization.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 提供了处理 COM 对象交互过程中可能出现的错误机制，确保代码的健壮性。它还管理内存分配和清理，防止内存泄漏并优化资源利用。'
- en: 'The versatility of `RDCOMClient` opens up a wide range of applications. Here
    are a few examples:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 的多功能性为各种应用打开了广泛的可能性。以下是一些示例：'
- en: '`RDCOMClient` enables users to automate repetitive tasks in Excel, such as
    data extraction, formatting, chart creation, and report generation. This can significantly
    enhance productivity and accuracy in data analysis workflows.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 允许用户在 Excel 中自动化重复性任务，例如数据提取、格式化、图表创建和报告生成。这可以显著提高数据分析工作流程中的生产力和准确性。'
- en: '`RDCOMClient`, you can programmatically create, modify, and extract content
    from Word documents, allowing for automated document generation, formatting, and
    data integration.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient`，您可以通过编程方式创建、修改和从 Word 文档中提取内容，从而实现自动化文档生成、格式化和数据集成。'
- en: '`RDCOMClient` facilitates integration with Outlook, enabling users to automate
    email management, calendar scheduling, and contact synchronization, among other
    functionalities.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 促进与 Outlook 的集成，使用户能够自动化电子邮件管理、日历安排和联系人同步等功能。'
- en: '`RDCOMClient` to create and modify PowerPoint presentations dynamically, automating
    the generation of slides, formatting, and embedding charts or tables based on
    data analysis results.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `RDCOMClient` 动态创建和修改 PowerPoint 演示文稿，自动化生成幻灯片、格式化以及根据数据分析结果嵌入图表或表格。
- en: '`RDCOMClient` serves as a powerful tool for integrating R with COM-based applications,
    offering extensive capabilities for automation, data manipulation, and system
    integration. By bridging the gap between R and the COM architecture, `RDCOMClient`
    empowers users to leverage the strengths of both R and various COM applications,
    opening endless possibilities for enhanced productivity, data analysis, and task
    automation.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`RDCOMClient` 作为将 R 与基于 COM 的应用程序集成的强大工具，提供了自动化、数据处理和系统集成的大量功能。通过弥合 R 和 COM
    架构之间的差距，`RDCOMClient` 使用户能够利用 R 和各种 COM 应用程序的优势，为提高生产力、数据分析和工作自动化开辟无限可能。'
- en: Now that we have discussed what we can do with RDCOMClient, let’s go through
    the installation process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了我们可以使用 RDCOMClient 做什么，那么让我们来了解一下安装过程。
- en: Installing RDCOMClient
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 RDCOMClient
- en: To install packages in R, you would usually type in the command prompt something
    like `install.packages("dplyr")` if you wanted to install the `dplyr` library.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 R 中安装包，你通常会在命令提示符中输入类似 `install.packages("dplyr")` 的命令来安装 `dplyr` 库。
- en: For the `RDCOMClient` library, this is going to change a little bit. Typically,
    if you are using RStudio—your default repository from where you are going to get
    packages—it is going to default to the Global (CDN) RStudio repository, but for
    this package, we are going to give some special instructions to the installation
    command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `RDCOMClient` 库，这会有一些变化。通常情况下，如果你使用 RStudio——你获取包的默认仓库——它将默认使用全局（CDN）RStudio
    仓库，但针对这个包，我们将为安装命令提供一些特殊指令。
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: RDCOMClient is only available on Windows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: RDCOMClient 仅在 Windows 系统上可用。
- en: 'Here is how the command will look:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是命令的显示方式：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have installed `RDCOMClient`, we can move on to doing something
    with it. In the next section, we will go over some examples of how to use it.
    This library installation can be clunky and, for some, the following will work
    better:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 `RDCOMClient`，我们可以继续使用它做一些事情。在下一节中，我们将介绍如何使用它的几个示例。这个库的安装可能会有些繁琐，对于一些人来说，以下方法可能更有效：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Executing sample VBA with RDCOMClient
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行带有 RDCOMClient 的示例 VBA
- en: For this execution, the first thing we will need is a new workbook. Let’s call
    it `mult_by_rand_ch3`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这次执行，我们首先需要一个新的工作簿。让我们称它为 `mult_by_rand_ch3`。
- en: On `Record` and the other called `Value`. These columns will simply be the numbers
    1 through 10\. When that is done, we will need to go ahead and create a simple
    VBA script to execute from the `RDCOMClient` library.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Record` 和其他名为 `Value` 的列上。这些列将简单地是数字 1 到 10。完成这个步骤后，我们需要继续创建一个简单的 VBA 脚本来从
    `RDCOMClient` 库中执行。
- en: We are going to write a macro that will take the `Value` column and then multiply
    the number by a random number using the `RAND()` function.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个宏，该宏将获取 `Value` 列，然后使用 `RAND()` 函数将数字乘以一个随机数。
- en: 'Let’s go over the steps to make the macro and describe how it works. First,
    take a look at the following VBA code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下创建宏的步骤，并描述它是如何工作的。首先，看一下以下 VBA 代码：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to create this macro, you need to click on the **Developer** tab or
    press *Alt* + *F11* to open the Visual Basic editor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个宏，你需要点击 **开发者** 选项卡或按 *Alt* + *F11* 打开 Visual Basic 编辑器。
- en: Insert a new module by going to **Insert** | **Module**. Once you have done
    this, you can type the preceding code into the window and close the editor window.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问 **插入** | **模块** 来插入一个新模块。完成此操作后，您可以将前面的代码输入到窗口中，然后关闭编辑器窗口。
- en: 'To get some clarity, let’s go over what each line of the macro does:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得一些清晰度，让我们回顾一下宏的每一行都做了什么：
- en: '`Sub MultiplyByRandom()`: This line defines the start of a VBA subroutine named
    `MultiplyByRandom`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sub MultiplyByRandom()`: 这行定义了一个名为 `MultiplyByRandom` 的 VBA 子程序的开始。'
- en: '`Dim rng As Range` and `Dim cell As Range`: These lines declare two `Range`
    variables named `rng` and `cell`. These variables will be used to store ranges
    and individual cells, respectively.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dim rng As Range` 和 `Dim cell As Range`：这些行声明了两个名为 `rng` 和 `cell` 的 `Range`
    变量。这些变量将分别用于存储范围和单个单元格。'
- en: '`Set rng = Sheets("Sheet1").Range("B2:B11`: This line sets the `rng` variable
    to refer to the range of cells from B2 to B11 on `Sheet1`. It specifies the location
    where the numbers are stored.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set rng = Sheets("Sheet1").Range("B2:B11")`: 这行将 `rng` 变量设置为指向 `Sheet1` 上从
    B2 到 B11 的单元格范围。它指定了存储数字的位置。'
- en: '`For Each cell In rng`: This line starts a loop that will iterate through each
    cell in the `rng` range. It assigns the current cell to the `cell` variable for
    each iteration of the loop.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`For Each cell In rng`：这一行启动一个循环，该循环将遍历`rng`范围内的每个单元格。它将当前单元格分配给`cell`变量，每次循环迭代一次。'
- en: '`cell.Offset(0, 1).Value = cell.Value * Rnd()`: This line multiplies the value
    of the current cell by a randomly generated number using the `Rnd()` function.
    It then stores the result in the adjacent cell, which is obtained using the `Offset`
    method to shift the reference one column to the right (`0` rows, `1` column).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cell.Offset(0, 1).Value = cell.Value * Rnd()`：这一行使用`Rnd()`函数将当前单元格的值乘以一个随机生成的数字。然后将结果存储在相邻的单元格中，该单元格是通过使用`Offset`方法将引用向右移动一列（`0`行，`1`列）获得的。'
- en: '`Next cell`: This line signifies the end of the loop. It moves the loop to
    the next cell in the range and repeats the process until all cells have been processed.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Next cell`：这一行表示循环的结束。它将循环移动到范围内的下一个单元格并重复该过程，直到处理完所有单元格。'
- en: '`End Sub`: This line marks the end of the `MultiplyByRandom` VBA subroutine.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`End Sub`：这一行标志着`MultiplyByRandom` VBA子程序的结束。'
- en: In order to run this macro, we can write the R code that will execute it. We
    are going to do this with the `RDCOMClient` library and use the `$Run()` method
    from the Excel `Workbook` object we create.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行这个宏，我们可以编写将执行它的R代码。我们将使用`RDCOMClient`库，并使用我们创建的Excel `Workbook`对象中的`$Run()`方法来完成这项工作。
- en: Let’s go ahead and write that script now.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续编写这个脚本。
- en: The following is a breakdown of each line in the R code, explained in simple
    terms.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对R代码中每一行的简单解释。
- en: 'This line loads the `RDCOMClient` library, which provides functionality for
    interacting with Microsoft Office applications, such as Excel:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行加载了`RDCOMClient`库，该库提供了与Microsoft Office应用程序（如Excel）交互的功能：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following lines define variables for the file path and name of an Excel
    workbook. They will only work for the author and should be updated to reflect
    where you are working from. It is possible to be working in a project and use
    something like `paste0(getwd(), "/")`. The `f_path`, `f_chapter`, and `f_name`
    variables specify the directory path, subdirectory name, and filename, respectively.
    The `paste0()` function is used to concatenate these variables to create the complete
    file path:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行定义了Excel工作簿的文件路径和名称变量。它们仅适用于作者，并且应更新以反映您的工作位置。您可能在项目中工作并使用类似`paste0(getwd(),
    "/")`的东西。`f_path`、`f_chapter`和`f_name`变量分别指定目录路径、子目录名称和文件名。`paste0()`函数用于将这些变量连接起来以创建完整的文件路径：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next lines create an instance of the Excel application using the `COMCreate()`
    function. The `xl_app` variable represents the Excel application. Then, the specified
    workbook (`f`) is opened using the `Open()` method of the `Workbooks()` property
    of the Excel application. Finally, `xl_app[[''Visible'']] <- TRUE` sets the visibility
    of the Excel application to be visible:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几行使用`COMCreate()`函数创建Excel应用程序的一个实例。`xl_app`变量代表Excel应用程序。然后，使用Excel应用程序的`Workbooks()`属性的`Open()`方法打开指定的工作簿（`f`）。最后，`xl_app[['Visible']]
    <- TRUE`将Excel应用程序的可见性设置为可见：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This line assigns the name of the macro to be executed in Excel to the `macro_name`
    variable. The macro name is set as `MultiplyByRandom`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行将要在Excel中执行的宏的名称分配给`macro_name`变量。宏名称设置为`MultiplyByRandom`：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This line executes the `MultiplyByRandom` macro in the Excel application. The
    `Run()` method of the Excel application is used to run the specified macro:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行在Excel应用程序中执行`MultiplyByRandom`宏。使用Excel应用程序的`Run()`方法运行指定的宏：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These lines save the workbook and close it using the `close()` method of the
    `xl_wkbk` workbook object. The `TRUE` argument indicates that the changes should
    be saved before closing. Finally, the `Quit()` method of the `xl_app` Excel application
    is used to close the Excel application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行使用`xl_wkbk`工作簿对象的`close()`方法保存工作簿并关闭它。`TRUE`参数表示在关闭之前应保存更改。最后，使用`xl_app`
    Excel应用程序的`Quit()`方法关闭Excel应用程序：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In summary, the code opens an Excel workbook using `RDCOMClient`, runs a macro
    named `MultiplyByRandom` in the workbook, saves the changes, and closes the workbook
    and the Excel application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，代码使用`RDCOMClient`打开一个Excel工作簿，运行名为`MultiplyByRandom`的宏，保存更改，然后关闭工作簿和Excel应用程序。
- en: Let’s have a look at how this works in Python!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何在Python中工作的！
- en: Integrating VBA with Python using pywin32
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pywin32将VBA与Python集成
- en: In this section, we will dive into executing VBA code from Python, exploring
    the seamless integration between the two languages and the immense possibilities
    it unlocks for automating Excel tasks, extending functionality, and leveraging
    Excel’s power within Python workflows.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨从 Python 执行 VBA 代码，探索两种语言之间的无缝集成以及它为自动化 Excel 任务、扩展功能和在 Python 工作流程中利用
    Excel 的力量所开启的无限可能性。
- en: This section will cover the motivation to work with VBA from Python, how to
    set up the environment on Windows, and how to write and execute VBA code. Let’s
    dig in.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将涵盖从 Python 使用 VBA 的动机、如何在 Windows 上设置环境以及如何编写和执行 VBA 代码。让我们深入探讨。
- en: Why execute VBA code from Python?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要从 Python 执行 VBA 代码？
- en: Before delving into the details, let’s explore why executing VBA code from Python
    can be highly beneficial.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入细节之前，让我们探讨为什么从 Python 执行 VBA 代码可以非常有益。
- en: Excel, with its extensive set of features and capabilities, serves as a vital
    tool for data analysis, reporting, and automation. However, Excel’s built-in functionality
    may sometimes fall short when dealing with complex data manipulations or advanced
    calculations. This is where the integration of Python and VBA comes into play.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Excel，凭借其广泛的功能和特性，是数据分析、报告和自动化的关键工具。然而，当处理复杂的数据操作或高级计算时，Excel 的内置功能有时可能不足。这就是
    Python 和 VBA 集成发挥作用的地方。
- en: Python provides a rich ecosystem for data manipulation, analysis, and machine
    learning. Its libraries, such as `pandas`, `NumPy,` and `SciPy`, offer powerful
    tools for data processing, statistical analysis, and modeling. By leveraging Python’s
    flexibility and extensive libraries, you can enhance Excel’s capabilities and
    tackle complex data analysis tasks with ease.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Python 为数据处理、分析和机器学习提供了一个丰富的生态系统。其库，如 `pandas`、`NumPy` 和 `SciPy`，提供了强大的数据处理、统计分析建模工具。通过利用
    Python 的灵活性和丰富的库，您可以增强 Excel 的功能，轻松应对复杂的数据分析任务。
- en: By integrating Python with VBA, you can harness the strengths of both languages.
    Python provides a robust and versatile environment for data analysis, while VBA
    excels at automating Excel-specific tasks and accessing advanced Excel functionalities.
    This synergy allows you to extend Excel’s capabilities using Python’s extensive
    libraries, handle large datasets efficiently, and perform complex calculations
    and data transformations seamlessly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 Python 与 VBA 集成，您可以利用两种语言的优势。Python 提供了一个强大且灵活的数据分析环境，而 VBA 在自动化特定于 Excel
    的任务和访问高级 Excel 功能方面表现出色。这种协同作用允许您使用 Python 的丰富库扩展 Excel 的功能，高效地处理大型数据集，并无缝地进行复杂计算和数据转换。
- en: The benefits of executing VBA code from Python extend beyond data analysis.
    You can leverage Python’s broader ecosystem for tasks such as web scraping, text
    processing, machine learning, and integrating with external APIs. By combining
    Python’s versatility with VBA’s Excel-specific capabilities, you can create dynamic
    and efficient workflows that go beyond the limitations of Excel alone.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 执行 VBA 代码的好处不仅限于数据分析。您可以利用 Python 更广泛的生态系统来处理网络抓取、文本处理、机器学习和与外部 API
    集成等任务。通过结合 Python 的多功能性和 VBA 的特定于 Excel 的功能，您可以创建超越 Excel 单独限制的动态和高效的工作流程。
- en: Furthermore, integrating Python and VBA opens up opportunities for collaboration
    and sharing of code. Python’s popularity among data scientists, analysts, and
    developers ensures a vast community and a wealth of shared knowledge. By integrating
    Python with Excel through VBA, you can bridge the gap between these two worlds,
    allowing data analysts, developers, and Excel power users to collaborate and benefit
    from each other’s expertise.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将 Python 和 VBA 集成开辟了协作和代码共享的机会。Python 在数据科学家、分析师和开发者中的流行确保了一个庞大的社区和丰富的共享知识。通过通过
    VBA 将 Python 与 Excel 集成，您可以弥合这两个世界之间的差距，使数据分析师、开发人员和 Excel 高级用户能够协作并从彼此的专业知识中受益。
- en: 'In summary, executing VBA code from Python empowers you to do the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，从 Python 执行 VBA 代码使您能够做到以下事项：
- en: Leverage Python’s extensive libraries and tools for data analysis and manipulation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Python 丰富的库和工具进行数据分析和操作
- en: Automate repetitive tasks and build custom Excel applications using VBA
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VBA 自动化重复性任务并构建自定义 Excel 应用程序
- en: Perform complex calculations, data transformations, and statistical analysis
    with Python’s powerful ecosystem
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 强大的生态系统进行复杂计算、数据处理和统计分析
- en: Extend Excel’s functionality using Python’s versatility and access external
    data sources and APIs
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Python 的多功能性和访问外部数据源和 API 来扩展 Excel 的功能
- en: Collaborate and share code between Python data analysts, developers, and Excel
    power users
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 数据分析师、开发人员和 Excel 高级用户之间协作和共享代码
- en: The integration of Python and VBA enables you to unlock the full potential of
    Excel, leverage the strengths of both languages, and take your data analysis,
    reporting, and automation skills to new heights.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Python 和 VBA 的集成使您能够释放 Excel 的全部潜力，利用两种语言的优势，并将您的数据分析、报告和自动化技能提升到新的高度。
- en: Let’s proceed to set up the environment for executing VBA code from Python.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置从 Python 执行 VBA 代码的环境。
- en: Setting up the environment
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: To successfully execute VBA code from Python, we need to set up the environment
    by installing the required dependencies and configuring the necessary connections.
    This section will walk you through the steps to ensure a smooth setup process
    in three easy steps.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功从 Python 执行 VBA 代码，我们需要通过安装所需的依赖项和配置必要的连接来设置环境。本节将指导您通过三个简单步骤确保设置过程的顺利。
- en: Installing the pywin32 library
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 pywin32 库
- en: The `pywin32` library serves as a bridge between Python and the Windows API
    and COM objects. It enables Python to interact with Excel’s object model and execute
    VBA code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`pywin32` 库作为 Python 和 Windows API 以及 COM 对象之间的桥梁。它使 Python 能够与 Excel 的对象模型交互并执行
    VBA 代码。'
- en: 'To install `pywin32`, you can use a package manager such as `pip` by running
    the following command in your command prompt or terminal:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `pywin32`，您可以使用包管理器，如 `pip`，在您的命令提示符或终端中运行以下命令：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is how it runs:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的运行方式：
- en: '![Figure 3.1 – Installing pywin32 on Windows with pip](img/B19142_3_01.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 使用 pip 在 Windows 上安装 pywin32](img/B19142_3_01.jpg)'
- en: Figure 3.1 – Installing pywin32 on Windows with pip
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 使用 pip 在 Windows 上安装 pywin32
- en: This will install the `pywin32` package and its dependencies, allowing Python
    to communicate with Excel.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装 `pywin32` 包及其依赖项，使 Python 能够与 Excel 通信。
- en: Establishing a connection with Excel
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建立与 Excel 的连接
- en: Once `pywin32` is installed, we can establish a connection with Excel from Python.
    This connection allows us to access Excel’s workbooks, worksheets, ranges, and
    other Excel-specific functionalities programmatically.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 `pywin32`，我们就可以从 Python 建立与 Excel 的连接。此连接使我们能够以编程方式访问 Excel 的工作簿、工作表、范围和其他
    Excel 特定功能。
- en: 'To establish a connection, we can make use of the `win32com.client` module
    provided by `pywin32`. Here’s an example of how to create a connection with Excel:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立连接，我们可以利用 `pywin32` 提供的 `win32com.client` 模块。以下是如何创建与 Excel 连接的示例：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the environment is set up correctly, this code returns nothing. However,
    if the code returns `com_error`, please go to the *Error handling with the environmental*
    *setup* section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果环境设置正确，此代码将返回空值。然而，如果代码返回 `com_error`，请转到“环境设置错误处理”部分。
- en: '![Figure 3.2 – Testing the connection to Excel](img/B19142_3_02.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 测试与 Excel 的连接](img/B19142_3_02.jpg)'
- en: Figure 3.2 – Testing the connection to Excel
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 测试与 Excel 的连接
- en: In the preceding code snippet, we imported the `win32com.client` module and
    created a new instance of the Excel application using the `win32.Dispatch` method.
    This creates a connection between Python and Excel, allowing us to interact with
    Excel’s objects and execute VBA code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们导入了 `win32com.client` 模块，并使用 `win32.Dispatch` 方法创建了一个新的 Excel 应用程序实例。这创建了
    Python 和 Excel 之间的连接，使我们能够与 Excel 的对象交互并执行 VBA 代码。
- en: Creating an interface to interact with VBA code
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建与 VBA 代码交互的界面
- en: 'With the connection established, we can create an interface that enables us
    to execute VBA code from Python. This interface serves as a bridge between Python
    and VBA, allowing us to send commands, call VBA functions, and access VBA macros.
    To create an interface, we can use the `excel_app` object obtained from the previous
    step:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 连接建立后，我们可以创建一个界面，使我们能够从 Python 执行 VBA 代码。此界面作为 Python 和 VBA 之间的桥梁，使我们能够发送命令、调用
    VBA 函数和访问 VBA 宏。要创建一个界面，我们可以使用前一步骤中获得的 `excel_app` 对象：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may receive an error along the lines of *Programmatic access to Visual Basic
    Project is not trusted*. In that case, you can look up a solution at [https://stackoverflow.com/questions/17033526/programmatic-access-to-visual-basic-project-is-not-trusted-from-iis](https://stackoverflow.com/questions/17033526/programmatic-access-to-visual-basic-project-is-not-trusted-from-iis).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到类似“程序访问 Visual Basic 项目不受信任”的错误。在这种情况下，您可以在 [https://stackoverflow.com/questions/17033526/programmatic-access-to-visual-basic-project-is-not-trusted-from-iis](https://stackoverflow.com/questions/17033526/programmatic-access-to-visual-basic-project-is-not-trusted-from-iis)
    查找解决方案。
- en: In the preceding code, we access the `excel_app` object. This grants us access
    to VBA’s functionalities, including executing VBA code, manipulating modules,
    and interacting with Excel’s objects from Python.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们访问了 `excel_app` 对象。这使我们能够访问 VBA 的功能，包括执行 VBA 代码、操作模块以及从 Python 与 Excel
    的对象交互。
- en: By following these steps, we can set up the environment to execute VBA code
    from Python seamlessly. The installation of the `pywin32` library and the establishment
    of a connection with Excel create the foundation for executing VBA code and leveraging
    Excel’s capabilities programmatically. In the next sections, we’ll dive deeper
    into executing VBA code, interacting with Excel’s objects, and exploring various
    use cases for integrating Python and VBA.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，我们可以无缝地设置环境以执行 VBA 代码。`pywin32` 库的安装和与 Excel 的连接建立为执行 VBA 代码和利用 Excel
    功能的基础。在接下来的章节中，我们将更深入地探讨执行 VBA 代码、与 Excel 对象交互以及探索将 Python 和 VBA 集成的各种用例。
- en: Error handling with the environment setup
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置中的错误处理
- en: It is possible that the last line of code will give you the **Project is not
    trusted** error. As the error suggests, this is because VBA is not trusted in
    your Excel security settings. To programmatically access VBA, you will need to
    change the security settings.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条代码可能会给你显示“**项目不受信任**”的错误。正如错误提示的那样，这是因为你的 Excel 安全设置中 VBA 不受信任。要程序化访问 VBA，你需要更改安全设置。
- en: Note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This has security consequences beyond the scope of this book, so only change
    the settings if you are OK with the risks.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这超出了本书的范围，因此只有在你接受风险的情况下才更改设置。
- en: 'To change the security settings, you will need to create a new key in the registry
    and add a new property to it by running PowerShell as administrator. Run the following
    code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改安全设置，你需要创建一个新的注册表键并向其中添加一个新的属性，方法是作为管理员运行 PowerShell。运行以下代码：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After that, rerun the Python code to test that the environment is correctly
    set up.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新运行 Python 代码以测试环境是否正确设置。
- en: Now that we have the environment set up, let’s move on to executing VBA code
    from Python and exploring the possibilities it offers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了环境，让我们继续从 Python 执行 VBA 代码并探索它提供的可能性。
- en: Writing and executing VBA code
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写和执行 VBA 代码
- en: Once the environment is set up, we can dive into the process of writing and
    executing VBA code from Python. This section will introduce you to different approaches
    and techniques to interact with Excel, run VBA macros, and retrieve results back
    into Python.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦环境设置完成，我们就可以深入到从 Python 编写和执行 VBA 代码的过程。本节将介绍与 Excel 交互、运行 VBA 宏以及将结果检索回 Python
    的不同方法和技巧。
- en: Let’s explore some of the key aspects of writing and executing VBA code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索编写和执行 VBA 代码的一些关键方面。
- en: Using the win32com.client module
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 win32com.client 模块
- en: The `win32com.client` module, provided by the `pywin32` library, offers a convenient
    way to create a COM interface and interact with Excel from Python. With this module,
    you can access Excel’s objects, open workbooks, manipulate worksheets, and execute
    VBA macros.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `pywin32` 库提供的 `win32com.client` 模块提供了一种方便的方式来创建 COM 接口并从 Python 与 Excel 交互。使用此模块，你可以访问
    Excel 的对象、打开工作簿、操作工作表以及执行 VBA 宏。
- en: 'Here’s an example that demonstrates how to open an Excel workbook and execute
    a VBA macro using `win32com.client`. Before running this code, you can ensure
    `iris_data.xlsm` has the macro by going to **Developer** | **Macros** (or **Visual
    Basic**) to see that the macro exists:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，演示了如何使用 `win32com.client` 打开 Excel 工作簿并执行 VBA 宏。在运行此代码之前，你可以确保 `iris_data.xlsm`
    包含宏，方法是转到 **开发者** | **宏**（或 **Visual Basic**），查看是否存在宏：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: On a related note, here we use the `os` library to handle the working directory
    and the Windows-specific directory separator to make sure a correct absolute path
    is used. This was already commented on in previous chapters—either the file has
    to be in the same folder where Python is running (the working directory) or you
    need to provide an absolute path.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关方面，这里我们使用 `os` 库来处理工作目录和 Windows 特定的目录分隔符，以确保使用正确的绝对路径。这已经在之前的章节中进行了注释——文件必须位于
    Python 运行的同一文件夹中（工作目录）或者你需要提供一个绝对路径。
- en: 'The code returns nothing as the effect we get is on the Excel side of things:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码没有返回任何内容，因为我们得到的效果是在 Excel 一侧：
- en: '![Figure 3.3 – Running the VBA macro from Python](img/B19142_3_03.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 从 Python 运行 VBA 宏](img/B19142_3_03.jpg)'
- en: Figure 3.3 – Running the VBA macro from Python
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 从 Python 运行 VBA 宏
- en: In the preceding code, we create an instance of the Excel application using
    `win32.Dispatch` and open a workbook with the `Workbooks.Open` method. We then
    execute a VBA macro named `examplePythonVBA` using `excel_app.Run`. Finally, we
    close the workbook, without saving the changes, and quit the Excel application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `win32.Dispatch` 创建了 Excel 应用程序的实例，并使用 `Workbooks.Open` 方法打开了一个工作簿。然后，我们使用
    `excel_app.Run` 执行名为 `examplePythonVBA` 的 VBA 宏。最后，我们关闭工作簿，不保存更改，并退出 Excel 应用程序。
- en: The macro simply creates a new sheet with a short message in a cell.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 宏只是简单地在一个单元格中创建一个包含简短信息的新的工作表。
- en: You can open the `.xlsm` workbook after running this code to see that the macro
    actually worked.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码后，您可以打开 `.xlsm` 工作簿，查看宏是否实际工作。
- en: Interacting with Excel objects
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 Excel 对象交互
- en: 'With `win32com.client`, you have access to various Excel objects, such as worksheets,
    ranges, and charts, allowing you to manipulate them programmatically. For example,
    you can write data to a specific range, format cells, create charts, or perform
    calculations. Here’s an example that demonstrates how to write data to an Excel
    worksheet using Python:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `win32com.client`，您可以访问各种 Excel 对象，如工作表、范围和图表，允许您以编程方式操作它们。例如，您可以将数据写入特定范围，格式化单元格，创建图表或执行计算。以下是一个使用
    Python 将数据写入 Excel 工作表的示例：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code returns no output if successful:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，代码不会返回任何输出：
- en: '![Figure 3.4 – Output for the interacting cells](img/B19142_3_04.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 交互单元格的输出](img/B19142_3_04.jpg)'
- en: Figure 3.4 – Output for the interacting cells
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 交互单元格的输出
- en: In the preceding code, we open an Excel workbook, access a specific worksheet
    named **Sheet1**, and write data to the cells using the cells’ **property**. We
    iterate over the data and set the values in the corresponding cells.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们打开了一个 Excel 工作簿，访问名为 **Sheet1** 的特定工作表，并使用单元格的 **属性** 将数据写入单元格。我们遍历数据，并在相应的单元格中设置值。
- en: Retrieving results back into Python
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将结果返回到 Python
- en: After executing VBA code in Excel, you may want to retrieve the results back
    into Python for further analysis or processing. One way to accomplish this is
    by using Excel’s object model to access specific values or ranges and retrieve
    them into Python variables.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 中执行 VBA 代码后，您可能希望将结果返回到 Python 以进行进一步的分析或处理。完成此操作的一种方法是通过使用 Excel 的对象模型访问特定的值或范围，并将它们检索到
    Python 变量中。
- en: 'Here’s an example that demonstrates how to retrieve data from an Excel worksheet
    into a Python list:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 Python 从 Excel 工作表检索数据到 Python 列表的示例：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result of the code is a tuple of tuples:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的结果是一个元组的元组：
- en: '`((1.0, 2.0, 3.0), (4.0, 5.0, 6.0), (7.0,` `8.0, 9.0))`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`((1.0, 2.0, 3.0), (4.0, 5.0, 6.0), (7.0, 8.0, 9.0))`'
- en: '![Figure 3.5 – Retrieving data from Excel](img/B19142_3_05.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 从 Excel 中检索数据](img/B19142_3_05.jpg)'
- en: Figure 3.5 – Retrieving data from Excel
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 从 Excel 中检索数据
- en: In the preceding code, we define an Excel range of cells and retrieve their
    values using the `Value` property. We store the values in a Python list to further
    process or analyze them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个 Excel 单元格范围，并使用 `Value` 属性检索它们的值。我们将这些值存储在 Python 列表中，以便进一步处理或分析。
- en: By leveraging the `win32com.client` module and the Excel object model, you can
    write and execute VBA code from Python effectively.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 `win32com.client` 模块和 Excel 对象模型，你可以有效地从 Python 编写和执行 VBA 代码。
- en: The provided code examples illustrate how to interact with Excel, run VBA macros,
    and retrieve data back into Python for further manipulation. Experiment with these
    techniques, adapt them to your specific needs, and explore the possibilities of
    integrating Python and VBA for Excel automation and data processing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码示例说明了如何与 Excel 交互、运行 VBA 宏，并将数据返回到 Python 以进行进一步操作。尝试这些技术，根据您的具体需求进行修改，并探索将
    Python 和 VBA 集成到 Excel 自动化和数据处理中的可能性。
- en: Let’s see next how this setup helps with automating tasks.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个设置如何帮助自动化任务。
- en: Automating Excel tasks
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化 Excel 任务
- en: One of the major benefits of executing VBA code from Python is the automation
    of Excel tasks.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 执行 VBA 代码的主要好处之一是自动化 Excel 任务。
- en: This section will discuss practical examples of automating common Excel operations
    using VBA from Python. By seamlessly integrating Python and VBA, you can streamline
    your data analysis workflows and significantly enhance your productivity.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论使用 Python 中的 VBA 自动化常见 Excel 操作的实际示例。通过无缝集成 Python 和 VBA，您可以简化您的数据分析工作流程，并显著提高您的生产力。
- en: Let’s explore some of the tasks you can automate using this powerful combination.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些可以使用这种强大组合自动化的任务。
- en: Data manipulation
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据操作
- en: With Python and VBA integration, you can automate data manipulation tasks in
    Excel. This includes tasks such as sorting data, filtering records, merging datasets,
    and performing complex transformations. For example, you can use Python to retrieve
    data from external sources, process it using Python libraries such as `pandas`
    or `NumPy`, and then update the Excel worksheet with the transformed data using
    VBA. This integration allows you to automate repetitive data manipulation tasks
    and ensure data consistency across sources.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Python 和 VBA 的集成，您可以在 Excel 中自动化数据操作任务。这包括排序数据、筛选记录、合并数据集和执行复杂转换等任务。例如，您可以使用
    Python 从外部源检索数据，使用 Python 库如 `pandas` 或 `NumPy` 处理数据，然后使用 VBA 更新 Excel 工作表中的转换数据。这种集成允许您自动化重复的数据操作任务并确保数据来源的一致性。
- en: Formatting
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化
- en: Automating formatting tasks in Excel can save a significant amount of time and
    effort. With Python and VBA, you can define formatting rules and apply them to
    specific cells, ranges, or entire worksheets. This includes formatting options
    such as font styles, cell borders, background colors, and number formatting. By
    combining Python’s flexibility and VBA’s formatting capabilities, you can create
    dynamic and visually appealing Excel reports or dashboards with ease.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 中自动化格式化任务可以节省大量的时间和精力。通过 Python 和 VBA，您可以定义格式化规则并将它们应用到特定的单元格、范围或整个工作表中。这包括字体样式、单元格边框、背景颜色和数字格式等格式化选项。通过结合
    Python 的灵活性和 VBA 的格式化功能，您可以轻松地创建动态且视觉上吸引人的 Excel 报告或仪表板。
- en: Chart creation
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图表创建
- en: Excel’s charting capabilities can be effectively utilized by automating the
    creation of charts from Python. You can extract data from various sources, perform
    necessary calculations or aggregations in Python, and then generate charts dynamically
    using VBA. This automation allows you to create interactive and data-driven visualizations
    directly from your Python analysis, saving you time and providing you with more
    control over the charting process.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 的图表功能可以通过自动化从 Python 创建图表来有效利用。您可以从各种来源提取数据，在 Python 中进行必要的计算或汇总，然后使用
    VBA 动态生成图表。这种自动化允许您直接从 Python 分析创建交互式和数据驱动的可视化，节省您的时间并提供对图表过程的更多控制。
- en: As this topic is quite large and important, we will go into detail on it in
    a dedicated chapter later.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个主题相当庞大且重要，我们将在后面的专门章节中对其进行详细阐述。
- en: Complex calculations
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复杂计算
- en: Excel is well-known for its powerful built-in functions and formulas. By combining
    Python and VBA, you can extend Excel’s calculation capabilities even further.
    You can leverage Python’s libraries for advanced mathematical or statistical computations
    and integrate the results seamlessly into Excel using VBA. This integration enables
    you to perform complex calculations, simulations, or predictive modeling within
    the familiar Excel environment.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 以其强大的内置函数和公式而闻名。通过结合 Python 和 VBA，您可以进一步扩展 Excel 的计算能力。您可以利用 Python 的库进行高级数学或统计计算，并使用
    VBA 将结果无缝集成到 Excel 中。这种集成使您能够在熟悉的 Excel 环境中执行复杂的计算、模拟或预测建模。
- en: By automating Excel tasks through Python and VBA integration, you can save time,
    eliminate manual errors, and enhance the efficiency of your data analysis workflows.
    The provided code samples and explanations offer a starting point for exploring
    the vast possibilities of automation. Experiment with different scenarios, adapt
    the code to your specific requirements, and unlock the full potential of Python
    and VBA for Excel automation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Python 和 VBA 集成自动化 Excel 任务，您可以节省时间、消除手动错误并提高数据分析工作流程的效率。提供的代码示例和解释为您探索自动化的广泛可能性提供了一个起点。尝试不同的场景，根据您的具体需求调整代码，并充分发挥
    Python 和 VBA 在 Excel 自动化方面的潜力。
- en: We know now how we can automate Excel tasks from Python. We should also think
    about why (or why not) to do so.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何从 Python 自动化 Excel 任务。我们也应该考虑为什么（或为什么不）这样做。
- en: Pros and cons of executing VBA from Python
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行 VBA 从 Python 的优缺点
- en: In this section, we will delve into the pros and cons of executing VBA code
    from Python. By understanding the advantages and limitations of this approach,
    you can make informed decisions when selecting the appropriate tool for your specific
    requirements.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨从 Python 执行 VBA 代码的优缺点。通过了解这种方法的优点和局限性，您可以在选择适合您特定需求的工具时做出明智的决定。
- en: Let’s explore the benefits and considerations of executing VBA code from Python.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨从 Python 执行 VBA 代码的益处和考虑因素。
- en: 'Here are the benefits of executing VBA code from Python:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是从 Python 执行 VBA 代码的好处：
- en: '**Flexibility and power**: By combining Python and VBA, you gain access to
    the flexibility and power of both languages. Python offers a rich ecosystem of
    libraries and tools for data analysis, scientific computing, and automation. VBA,
    on the other hand, provides extensive functionalities within Excel, allowing you
    to leverage its built-in features, formulas, and macros. This combination empowers
    you to accomplish complex tasks and automate Excel operations efficiently.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性与强大功能**：通过结合 Python 和 VBA，您可以同时获得这两种语言的灵活性和强大功能。Python 提供了丰富的库和工具，用于数据分析、科学计算和自动化。另一方面，VBA
    在 Excel 中提供了广泛的功能，允许您利用其内置功能、公式和宏。这种组合使您能够高效地完成复杂任务并自动化 Excel 操作。'
- en: '**Integration with external data sources**: Python excels in connecting to
    external data sources such as databases, APIs, or web scraping. By executing VBA
    code from Python, you can seamlessly integrate these external data sources with
    Excel. Python can retrieve data, perform calculations or transformations, and
    then update the Excel workbook using VBA. This integration enables you to leverage
    the power of Python for data manipulation and analysis while harnessing Excel’s
    visualization and reporting capabilities.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与外部数据源的集成**：Python 在连接外部数据源方面表现出色，例如数据库、API 或网络爬取。通过从 Python 执行 VBA 代码，您可以无缝地将这些外部数据源与
    Excel 集成。Python 可以检索数据，执行计算或转换，然后使用 VBA 更新 Excel 工作簿。这种集成使您能够利用 Python 的数据处理和分析能力，同时利用
    Excel 的可视化和报告功能。'
- en: '**Automation and efficiency**: Executing VBA code from Python allows you to
    automate repetitive Excel tasks, leading to increased productivity and efficiency.
    You can streamline your workflows by automating data import/export, data cleaning,
    formatting, and report generation. This automation eliminates manual errors, reduces
    manual effort, and frees up your time for more critical analysis and decision-making
    tasks.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化与效率**：从 Python 执行 VBA 代码允许您自动化重复的 Excel 任务，从而提高生产力和效率。您可以通过自动化数据导入/导出、数据清理、格式化和报告生成来简化工作流程。这种自动化消除了手动错误，减少了手动工作量，并为您腾出更多时间进行更关键的分析和决策任务。'
- en: 'The following are the areas of improvement in executing VBA code from Python:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 Python 执行 VBA 代码的改进领域：
- en: '**Compatibility and platform dependency**: Executing VBA code from Python is
    primarily supported on Windows-based systems. If you are working on a different
    operating system, such as macOS or Linux, you may encounter compatibility issues.
    Additionally, compatibility with different versions of Excel or Office may vary,
    requiring careful consideration when sharing or distributing your Python and VBA
    integrated solutions.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性与平台依赖性**：从 Python 执行 VBA 代码主要支持基于 Windows 的系统。如果您在不同的操作系统上工作，例如 macOS
    或 Linux，可能会遇到兼容性问题。此外，与不同版本的 Excel 或 Office 的兼容性可能有所不同，因此在共享或分发您的 Python 和 VBA
    集成解决方案时需要仔细考虑。'
- en: '**Learning curve and skill requirements**: Successfully executing VBA code
    from Python requires familiarity with both languages. You need to understand the
    syntax and capabilities of VBA for Excel automation and Python for interacting
    with Excel and executing VBA code. This may require some learning and practice,
    especially if you are new to either language.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线和技能要求**：成功从 Python 执行 VBA 代码需要熟悉这两种语言。您需要了解 VBA 的语法和功能，以便进行 Excel 自动化，以及
    Python 的语法和功能，以便与 Excel 交互并执行 VBA 代码。这可能需要一些学习和实践，尤其是如果您对这两种语言中的任何一种都不熟悉。'
- en: '**Maintenance and updates**: As with any software integration, maintenance
    and updates can be a consideration. If there are changes or updates to the Excel
    or Python ecosystem, you may need to adapt your code accordingly. Additionally,
    ensuring compatibility and functionality across different versions of Excel and
    Python may require periodic updates and testing.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护和更新**：与任何软件集成一样，维护和更新可能需要考虑。如果 Excel 或 Python 生态系统有变化或更新，您可能需要相应地调整您的代码。此外，确保在不同版本的
    Excel 和 Python 之间的兼容性和功能可能需要定期更新和测试。'
- en: Despite these considerations, executing VBA code from Python offers a powerful
    approach to automate Excel tasks, leverages external data sources, and creates
    efficient data analysis workflows. By combining the strengths of Python and VBA,
    you can unlock the full potential of Excel within your Python projects and enhance
    your productivity and data manipulation capabilities.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些考虑，但从 Python 执行 VBA 代码提供了一种强大的方法来自动化 Excel 任务，利用外部数据源，并创建高效的数据分析工作流程。通过结合
    Python 和 VBA 的优势，你可以在 Python 项目中充分发挥 Excel 的潜力，并提高你的生产力和数据处理能力。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to integrate R and Python and VBA using
    `RDCOMClient` and `pywin32`, respectively. We have gained knowledge on executing
    VBA code from Python, setting up the environment, and automating Excel tasks,
    and understand the pros and cons of this integration.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何分别使用 `RDCOMClient` 和 `pywin32` 集成 R、Python 和 VBA。我们获得了从 Python 执行
    VBA 代码、设置环境以及自动化 Excel 任务的知识，并理解了这种集成的优缺点。
- en: This knowledge will empower you to enhance your Excel automation skills.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这项知识将使你能够提升你的 Excel 自动化技能。
- en: In the next chapter, we will delve into advanced topics, building upon your
    existing knowledge.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨高级主题，基于你现有的知识进行构建。
