- en: Chapter 6. Plotting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 绘图
- en: 'Plotting in Python can be done with the `pyplot` part of the matplotlib module.
    With matplotlib you can create high-quality figures and graphics and also plot
    and visualize your results. Matplotlib is open source and freely available software,
    [[21]](apa.html "Appendix . References"). The matplotlib website also contains
    excellent documentation with examples, [[35]](apa.html "Appendix . References").
    In this section, we will show you how to use the most common features. The examples
    in the upcoming sections assume that you have imported the module as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 绘图可以通过 matplotlib 模块的 `pyplot` 部分完成。使用 matplotlib，您可以创建高质量的图形和图形，并绘制和可视化您的结果。Matplotlib
    是开源软件，可以免费获得，[[21]](apa.html "附录 . 参考文献")。matplotlib 网站还包含带有示例的优秀文档，[[35]](apa.html
    "附录 . 参考文献")。在本节中，我们将向您展示如何使用最常用的功能。即将到来的章节中的示例假设您已导入模块，如下所示：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In case you want to use the plotting commands in IPython, it is recommended
    that you run the magic command `%matplotlib` directly after starting the IPython
    shell. This prepares IPython for interactive plotting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 IPython 中使用绘图命令，建议在启动 IPython shell 后直接运行 `%matplotlib` 魔法命令。这将为 IPython
    准备交互式绘图。
- en: Basic plotting
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本绘图
- en: The standard plotting function is `plot`. Calling `plot(x,y)` creates a figure
    window with a plot of *y* as a function of *x*. The input arguments are arrays
    (or lists) of equal length. It is also possible to use `plot(y)`, in which case
    the values in *y* will be plotted against their index, that is, `plot(y)` is a
    short form of `plot(range(len(y)),y)`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标准绘图函数是 `plot`。调用 `plot(x,y)` 会创建一个包含 *y* 作为 *x* 函数的图形窗口。输入参数是长度相等的数组（或列表）。也可以使用
    `plot(y)`，在这种情况下，*y* 中的值将与其索引相对应进行绘图，即 `plot(y)` 是 `plot(range(len(y)),y)` 的简写形式。
- en: 'Here is an example that shows how to plot sin(*x*) for *x* ϵ [-2π, 2π]  using
    200 sample points and sets markers at every fourth point:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示了如何使用 200 个样本点绘制 *x* ϵ [-2π, 2π] 的 sin(*x*)，并在每个第四个点设置标记：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result is shown in the following figure (*Figure 6.1*):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示（*图6.1*）：
- en: '![Basic plotting](img/plotting_sinexample.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![基本绘图](img/plotting_sinexample.jpg)'
- en: 'Figure 6.1: A plot of the function sin(x) with grid lines shown.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：函数 sin(x) 的绘图，显示了网格线。
- en: As you can see, the standard plot is a solid blue curve. Each axis gets automatically
    scaled to fit the values but can also be set manually. Color and plot options
    can be given after the first two input arguments. Here, `r*` indicates red star-shaped
    markers. Formatting is covered in more detail in the next section. The `title`
    command puts a title text string above the plot area.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，标准绘图是一个实心蓝色曲线。每个轴都会自动缩放以适应值，但也可以手动设置。颜色和绘图选项可以在前两个输入参数之后给出。这里，`r*` 表示红色星形标记。格式化将在下一节中更详细地介绍。`title`
    命令在绘图区域上方放置标题文本字符串。
- en: Calling `plot` multiple times will overlay the plots in the same window. To
    get a new clean figure window, use `figure()`. The `figure` command might contain
    an integer, for example, `figure(2)`, which can be used to switch between figure
    windows. If there is no figure window with that number, a new one is created,
    otherwise, the window is activated for plotting and all subsequent plotting commands
    apply to that window.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用 `plot` 将在同一窗口中叠加绘图。要获取一个新干净的图形窗口，请使用 `figure()`。`figure` 命令可能包含一个整数，例如
    `figure(2)`，这可以用来在图形窗口之间切换。如果没有带有该数字的图形窗口，将创建一个新的窗口，否则，该窗口将被激活以进行绘图，并且所有后续的绘图命令都将应用于该窗口。
- en: 'Multiple plots can be explained using the `legend` function, along with adding
    labels to each plot call. The following example fits polynomials to a set of points
    using the commands `polyfit` and `polyval`, and plots the result with a legend:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `legend` 函数以及为每个绘图调用添加标签来解释多个绘图。以下示例使用 `polyfit` 和 `polyval` 命令将多项式拟合到一组点，并带有图例进行绘图：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here you can also see how to manually set the range of the axis using `axis([xmin,xmax,ymin,ymax])`.
    The `legend` command takes optional arguments on placement and formatting; in
    this case the legend is put in the upper-left corner and typeset with a small
    font size, as shown in the following figure (*Figure 6.2*).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您还可以看到如何使用 `axis([xmin,xmax,ymin,ymax])` 手动设置轴的范围。`legend` 命令接受可选的放置和格式化参数；在这种情况下，图例放置在右上角，并以小字体格式化，如下所示（*图6.2*）。
- en: '![Basic plotting](img/plotting_polynomialfit.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![基本绘图](img/plotting_polynomialfit.jpg)'
- en: 'Figure 6.2: Two polynomials fitted to the same points.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：拟合到相同点的两个多项式。
- en: As final examples for basic plotting, we demonstrate how to do scatter plots and
    logarithmic plots in two dimensions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基本绘图的最终示例，我们演示如何在二维中执行散点图和对数图。
- en: 'Example of 2D point scatter plot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 2D点散点图的示例：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Basic plotting](img/plotting_scatterplot.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![基本绘图](img/plotting_scatterplot.jpg)'
- en: 'Figure 6.3(a): An example of a scatter plot'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3(a)：散点图的示例
- en: 'The following code is an example of a logarithmic plot using `loglog`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是使用`loglog`进行对数图的示例：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Basic plotting](img/plotting_loglogplot.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![基本绘图](img/plotting_loglogplot.jpg)'
- en: 'Figure 6.3(b): An example of a plot with logarithmic x and y axis'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3(b)：具有对数x和y轴的绘图示例
- en: The examples shown in the preceding figure (*Figure 6.3(a)* and *Figure 6.3(b)*)
    used some parameters of `plot` and `loglog` which allow special formatting. In
    the next section, we will explain the parameters in more detail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图表（*图6.3(a)*和*图6.3(b)*）中显示的示例使用了`plot`和`loglog`的一些参数，这些参数允许特殊格式化。在下一节中，我们将更详细地解释这些参数。
- en: Formatting
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化
- en: 'The appearance of figures and plots can be styled and customized to look how
    you want them to look. Some important variables are `linewidth`, which controls
    the thickness of plot lines; `xlabel`, `ylabel`, which set the axis labels, `color`
    for plot colors, and `transparent` for transparency. This section will tell you
    how to use some of them. The following is an example with more keywords:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图表和图形的外观可以风格化和自定义，以看起来像您想要的样子。一些重要的变量是`linewidth`，它控制图形线的粗细；`xlabel`、`ylabel`，它们设置轴标签，`color`用于图形颜色，`transparent`用于透明度。本节将告诉您如何使用其中的一些。以下是一个包含更多关键字的示例：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are short commands that can be used if you only need basic style changes,
    for example, setting the color and line style. The following table (*Table 6.1*)
    shows some examples of these formatting commands. You may use either the short
    string syntax `plot(...,'ro-')`, or the more explicit syntax `plot(..., marker='o',
    color='r', linestyle='-')`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要基本的样式更改，可以使用简短命令，例如设置颜色和线型。以下表格（*表6.1*）显示了这些格式化命令的一些示例。您可以使用简短的字符串语法`plot(...,'ro-')`，或者更明确的语法`plot(...,
    marker='o', color='r', linestyle='-')`。
- en: '![Formatting](img/table-6.1.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![格式化](img/table-6.1.jpg)'
- en: 'Table 6.1: Some common plot formatting arguments'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1：一些常见的绘图格式化参数
- en: 'To set the color to green with the `''o''` marker we write:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要将颜色设置为绿色并使用`'o'`标记，我们写入：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To plot histograms instead of regular plots, the `hist` command is used:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制直方图而不是常规图形，请使用`hist`命令：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Formatting](img/plotting_histexample.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![格式化](img/plotting_histexample.jpg)'
- en: Figure 6.4 normal distribution with 50 bins and a green curve indicating the
    true distribution
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：具有50个桶和表示真实分布的绿色曲线的正态分布
- en: The resulting plot looks similar to the preceding figure (*Figure 6.4*). The
    title, and any other text, can be formatted using LaTeX to show mathematical formulas.
    LaTeX formatting is enclosed within a pair of `$` signs. Also, note the string
    formatting done using the `format` method, refer to section *Strings* in [Chapter
    2](ch02.html "Chapter 2. Variables and Basic Types"), *Variables and Basic Types*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的图表看起来与前面的图（*图6.4*）相似。标题和任何其他文本都可以使用LaTeX进行格式化以显示数学公式。LaTeX格式化被包含在一对`$`符号内。此外，请注意使用`format`方法进行的字符串格式化，请参阅[第2章](ch02.html
    "第2章。变量和基本类型")中的*字符串*部分，*变量和基本类型*。
- en: Sometimes the brackets for the string formatting interfere with LaTeX bracket
    environments. If this occurs, replace the LaTeX bracket with a double bracket,
    for example, `x_{1}` should be replaced with `x_{{1}}`. The text might contain
    sequences that overlap with string escape sequences, for example, `\tau` will
    be interpreted as the tab character `\t`. An easy workaround  is to add `r` before
    the string, for example `r'\tau'`; this makes it a raw string.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有时字符串格式化的括号会与LaTeX括号环境冲突。如果发生这种情况，请将LaTeX括号替换为双括号，例如，`x_{1}`应替换为`x_{{1}}`。文本可能包含与字符串转义序列重叠的序列，例如，`\tau`将被解释为制表符`\t`。一个简单的解决方案是在字符串前添加`r`，例如`r'\tau'`；这使得它成为一个原始字符串。
- en: Placing several plots in one figure window can be done using the `subplot` command.
    Consider the following example, which iteratively averages out the noise on a
    sine curve.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`subplot`命令可以在一个图形窗口中放置多个图形。考虑以下示例，它迭代地平均正弦曲线上的噪声。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Formatting](img/plotting_sinsubplot.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![格式化](img/plotting_sinsubplot.jpg)'
- en: 'Figure 6.5: An example of plotting several times in the same figure window.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：在同一图形窗口中多次绘图的示例
- en: 'The function `avg`  uses a `roll` call to shift all values of the array. `subplot`
    takes three arguments: the number of vertical plots, the number of horizontal
    plots, and an index indicating which location to plot in (counted row-wise). Note
    that we used the `subplots_adjust` command to add extra space to adjust the distance
    between both the subplots.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `avg` 使用 `roll` 调用来移动数组中的所有值。`subplot` 接受三个参数：垂直图的数量、水平图的数量以及一个索引，指示要绘制的位置（按行计数）。请注意，我们使用了
    `subplots_adjust` 命令来添加额外空间以调整子图之间的距离。
- en: 'A useful command is `savefig` which lets you save a figure as an image (this
    can also be done from the figure window). Many image and file formats are supported
    by this command, they are specified by the filename''s extension as:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的命令是 `savefig`，它允许你将图形保存为图像（这也可以从图形窗口中完成）。此命令支持许多图像和文件格式，它们通过文件名的扩展名指定，如下所示：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: or
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can place the image against a non-white background, for example, a webpage.
    For this, the `transparent` parameter can be set to make the figure''s background
    transparent:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将图像放置在非白色背景上，例如，网页。为此，可以将 `transparent` 参数设置为使图形的背景透明：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you intend to embed a figure into a LaTeX document, it is recommended that
    you reduce the surrounding white space by setting the figure''s bounding box tight
    around the drawing, as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算将图形嵌入到 LaTeX 文档中，建议通过将图形的边界框紧贴绘图来减少周围的白空间，如图所示：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Meshgrid and contours
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格和等高线
- en: 'A common task is a graphical representation of a scalar function over a rectangle:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见任务是图形化表示矩形上的标量函数：
- en: '![Meshgrid and contours](img/function_meshgrid.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![网格和等高线](img/function_meshgrid.jpg)'
- en: 'For this, first we have to generate a grid on the rectangle [*a*,*b*] x [*c*,*d*].
    This is done using the `meshgrid` command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们首先必须在矩形 [*a*,*b*] x [*c*,*d*] 上生成一个网格。这是通过 `meshgrid` 命令完成的：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`X` and `Y` are arrays with `(n,m)` shape such that ![Meshgrid and contours](img/xijYij.jpg)
    contains the coordinates of the grid point ![Meshgrid and contours](img/PIJ.jpg)
    as shown in the next figure *(Figure 6.6)*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`X` 和 `Y` 是形状为 `(n,m)` 的数组，其中 ![网格和等高线](img/xijYij.jpg) 包含网格点 ![网格和等高线](img/PIJ.jpg)
    的坐标，如图中下一个图 *(图 6.6)* 所示：'
- en: '![Meshgrid and contours](img/meshgrid.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![网格和等高线](img/meshgrid.jpg)'
- en: 'Figure 6.6: A rectangle discretized by meshgrid'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6：由 meshgrid 离散化的矩形
- en: A rectangle discretized by `meshgrid` will be used  to visualize the behavior
    of an iteration. Bur first we will use it to plot level curves of a function.
    This is done by the command `contour`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `meshgrid` 离散化的矩形将用于可视化迭代的行性行为。但首先，我们将使用它来绘制函数的水平曲线。这是通过 `contour` 命令完成的。
- en: 'As an example we choose Rosenbrock''s banana function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例子，我们选择了 Rosenbrock 的香蕉函数：
- en: '![Meshgrid and contours](img/banana.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![网格和等高线](img/banana.jpg)'
- en: It is used to challenge optimization methods. The function values descend towards
    a banana-shaped valley, which itself decreases slowly towards the function’s global
    minimum at (1, 1).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于挑战优化方法。函数值下降到一个香蕉形状的谷地，而这个谷地本身又缓慢地下降到函数的全局最小值 (1, 1)。
- en: First we display the level curves using `contour`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `contour` 显示水平曲线。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This plots the level curve at the levels given by the fourth parameter and uses
    the colormap `gray`. Furthermore, we used logarithmically spaced steps from 10^(0.5)
    to 10³ using the function `logscale` to define the levels, as shown in the next
    figure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此图绘制了由第四个参数给出的水平曲线，并使用了 `gray` 色彩映射。此外，我们使用了从 10^(0.5) 到 10³ 的对数间隔步骤，通过 `logscale`
    函数定义水平，如图中下一个图所示。
- en: '![Meshgrid and contours](img/rosenbrock.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![网格和等高线](img/rosenbrock.jpg)'
- en: 'Figure 6.7: A contour plot of Rosenbrock function'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7：Rosenbrock 函数的等高线图
- en: In the preceding example, an anonymous function indicated by the keyword `lambda`
    is used to keep the code compact. Anonymous functions are explained in section *Anonymous
    functions - the lambda keyword* in [Chapter 7](ch07.html "Chapter 7. Functions"),
    *Functions*, *Anonymous functions*. If levels are not given as arguments to `contour`,
    the function chooses appropriate levels by itself .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，使用关键字 `lambda` 指示的匿名函数被用来使代码紧凑。匿名函数在 [第 7 章](ch07.html "第 7 章。函数") 的
    *匿名函数 - lambda 关键字* 部分中解释，*函数*，*匿名函数*。如果没有将水平作为参数传递给 `contour`，函数会自行选择适当的水平。
- en: The `contourf` function performs the same function as `contour` but fills the
    plot with colors according to different levels. Contour plots are ideal for visualizing
    the behavior of a numerical method. We illustrate this here by showing the iterations
    of an optimization method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`contourf` 函数执行与 `contour` 相同的功能，但根据不同的级别用颜色填充绘图。轮廓图非常适合可视化数值方法的行为。我们在这里通过展示优化方法的迭代来展示这一点。'
- en: 'We continue the preceding example and depict the steps towards the minimum
    of the Rosenbrock function generated by Powell''s method, [[27]](apa.html "Appendix . References"),
    which we will apply to find the minimum of the Rosenbrock function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续前面的例子，并描绘了由 Powell 方法生成的 Rosenbrock 函数最小值的步骤，[[27]](apa.html "附录 . 参考文献")，我们将应用它来找到
    Rosenbrock 函数的最小值：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The iterative method `fmin_powell` applies Powell's method to find a minimum.
    It is started by a given start value of *x[0]* and reports all iterates when the
    option `retall=True` is given. After sixteen iterations, the solution *x=*0*,
    y=*0 was found. The iterations are depicted as bullets in the following contour
    plot (*Figure 6.8*).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代方法 `fmin_powell` 将 Powell 方法应用于寻找最小值。它从一个给定的起始值 *x[0]* 开始，并在选项 `retall=True`
    被给出时报告所有迭代。经过十六次迭代后，找到了解 *x=*0*, y=*0*。这些迭代在下面的轮廓图中以项目符号的形式表示（*图6.8*）。
- en: '![Meshgrid and contours](img/rosenbrock_opt.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![网格和轮廓](img/rosenbrock_opt.jpg)'
- en: 'Figure 6.8: A contour plot of Rosenbrock function with a search path of an
    optimization method'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：Rosenbrock 函数的轮廓图，以及优化方法的搜索路径
- en: '`contour` also creates a contour set object that we assigned to the variable
    `cs`. This is then used by `clabel` to annotate the levels of the corresponding
    function values, as shown in the preceding figure (*Figure 6.8*).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`contour` 还创建了一个轮廓集对象，我们将其分配给变量 `cs`。然后，`clabel` 使用它来注释相应函数值的级别，如图中所示（*图6.8*）。'
- en: Images and contours
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像和轮廓
- en: 'Let us take a look at some examples of visualizing arrays as images. The following
    function will create a matrix of color values for the Mandelbrot fractal**.**
    Here we consider a fixed point iteration, that depends on a complex parameter
    *c*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些将数组可视化为例的例子。以下函数将创建 Mandelbrot 分形**的颜色值矩阵**。在这里，我们考虑一个依赖于复数参数 *c* 的定点迭代：
- en: '![Images and contours](img/B05511_06_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图像和轮廓](img/B05511_06_02.jpg)'
- en: Depending on the choice of this parameter it may or may not create a bounded
    sequence of complex values *z[n]*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个参数的选择，它可能或可能不会创建一个有界的复数值序列 *z[n]*。
- en: For every value of *c*, we check if *z[n]* exceeds a prescribed bound. If it
    remains below the bound within `maxit` iterations, we assume the sequence to be
    bounded.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个 *c* 的值，我们检查 *z[n]* 是否超过一个规定的界限。如果在 `maxit` 次迭代内保持低于该界限，我们假设该序列是有界的。
- en: Note how, in the following piece of code,`meshgrid` is used to generate a matrix
    of complex parameter values *c:*
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在下面的代码片段中，`meshgrid` 被用来生成一个复数参数值 *c:* 的矩阵。
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The command `imshow`  displays the matrix as an image. The selected color map
    shows the regions where the sequence appeared unbounded in white and others in
    black. Here we used `axis('off')` to turn off the axis as this might be not so
    useful for images.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `imshow` 显示矩阵作为图像。选定的颜色图显示了序列出现无界区域的白色和其他黑色。在这里，我们使用了 `axis('off')` 来关闭坐标轴，因为这可能对图像不是那么有用。
- en: '![Images and contours](img/plotting_mandelbrot_gray.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图像和轮廓](img/plotting_mandelbrot_gray.jpg)'
- en: 'Figure 6.9: An example of using imshow to visualize a matrix as an image.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：使用 imshow 将矩阵作为图像可视化的示例。
- en: 'By default, `imshow` uses interpolation to make the images look nicer. This
    is clearly seen when the matrices are small. The next figure shows the difference
    between using:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`imshow` 使用插值来使图像看起来更美观。当矩阵较小时，这一点很明显。下一个图显示了使用以下方法的差异：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: and
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the second example, pixel values are just replicated.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，像素值只是被复制。
- en: '![Images and contours](img/plotting_mandelbrot_small.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图像和轮廓](img/plotting_mandelbrot_small.jpg)'
- en: 'Figure 6.10: The difference between using the linear interpolation of imshow
    compared to using nearest neighbor interpolation'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：使用 imshow 的线性插值与使用最近邻插值之间的差异
- en: For more details on working and plotting with images using Python refer to [[30]](apa.html
    "Appendix . References").
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用 Python 处理和绘制图像的更多详细信息，请参阅 [[30]](apa.html "附录 . 参考文献")。
- en: Matplotlib objects
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 对象
- en: Till now, we have used the `pyplot` module of matplotlib. This module makes
    it easy for us to use the most important plot commands directly. Mostly, we are
    interested in creating a figure and display it immediately. Sometimes, though,
    we want to generate a figure that should be modified later by changing some of
    its attributes. This requires us to work with graphical objects in an object-oriented
    way. In this section, we will present some basic steps to modify figures. For
    a more sophisticated object oriented approach to plotting in Python, you have
    to leave `pyplot` and have to dive directly into `matplotlib` with its extensive
    documentation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了matplotlib的`pyplot`模块。此模块使我们能够直接使用最重要的绘图命令。通常，我们感兴趣的是创建一个图形并立即显示它。有时，尽管如此，我们想要生成一个稍后可以通过更改其一些属性进行修改的图形。这要求我们以面向对象的方式处理图形对象。在本节中，我们将介绍一些修改图形的基本步骤。对于更复杂的Python绘图面向对象方法，您必须离开`pyplot`并直接深入到具有广泛文档的`matplotlib`。
- en: The axes object
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标轴对象
- en: 'When creating a plot that should be modified later, we need references to a
    figure and an axes object. For this we have to create a figure first and then
    define some axes and their location in the figure. And we should not forget to
    assign these objects to a variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个稍后需要修改的图表时，我们需要引用一个图形对象和一个坐标轴对象。为此，我们首先需要创建一个图形，然后定义一些坐标轴及其在图形中的位置。我们不应忘记将这些对象分配给一个变量：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A figure can have several axes objects depending on the use of `subplot`. In
    a second step plots are associated with a given axes object:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据子图的使用，一个图形可以有几个坐标轴对象。在第二步中，将绘图与给定的坐标轴对象关联起来：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here we used an anonymous function indicated by the `lambda` keyword . We will
    explain this construct later in section *Anonymous functions - the lambda keyword*
    in [Chapter 7](ch07.html "Chapter 7. Functions"), *Functions*. In fact, these
    two plot commands fill the list `ax.lines` with two `Lines2D` objects:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用了一个由`lambda`关键字指示的匿名函数。我们将在第7章的*匿名函数 - lambda关键字*部分中解释这个结构，*函数*。实际上，这两个绘图命令将两个`Lines2D`对象填充到`ax.lines`列表中：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is a good practice to use labels so that we can later identify objects in
    an easy way:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标签是一个好习惯，这样我们就可以以后以简单的方式识别对象：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We set up now things in a way that allows further modifications. The figure
    we got so far is shown in preceding figure (*Figure 6.11, left*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在以允许进一步修改的方式设置了一些事情。到目前为止得到的图形在先前的图形中显示（图6.11，左）。
- en: Modifying line properties
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改线属性
- en: We just identified a particular line object by its label. It is an element of
    the list `ax.lines` list with the index  `il` . All its properties are collected
    in a dictionary
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是通过其标签识别了一个特定的线对象。它是`ax.lines`列表中的一个元素，索引为`il`。所有属性都收集在一个字典中
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'which can be obtained by the command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下命令获得：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'They can be changed by corresponding setter methods. Let us change the line
    style of the sine - curve:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以通过相应的设置方法进行更改。让我们更改正弦曲线的线型：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can even modify the data, as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以修改数据，如下所示：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result is shown in the next figure *(Figure 6.11, right)*:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果在下一幅图中显示（图6.11，右）：
- en: '![Modifying line properties](img/amp_mod_sin01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![修改线属性](img/amp_mod_sin01.jpg)'
- en: 'Figure 6.11: The amplitude modulated sine-function (left) and a curve with
    the last data point corrupted (right).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：调幅正弦函数（左）和最后一个数据点损坏的曲线（右）。
- en: Annotations
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'One useful axes method is `annotate`. It sets an annotation at a given position
    and points, with an arrow, to another position in the drawing. The arrow can be
    given properties in a dictionary:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的坐标轴方法是`annotate`。它在一个给定的位置设置注释，并用箭头指向绘图中的另一个位置。箭头可以在字典中指定属性：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the first annotation example above, the arrow points to a point with the
    coordinates (*2.1, 1.0*) and the left bottom coordinate of the text is (*3.2,
    0.5*). If not otherwise specified, the coordinates are given in the convenient
    data-coordinate system, which refers to the data used to generate the plots.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的第一个注释示例中，箭头指向坐标为(*2.1, 1.0*)的点，文本的左下角坐标是(*3.2, 0.5*)。如果不作其他说明，坐标以方便的数据坐标系给出，该坐标系指的是用于生成绘图的数据。
- en: Furthermore, we demonstrated a couple of arrow properties specified by the `arrowprop` 
    dictionary. You can scale the arrow by the `shrink` key. The setting `'shrink':0.05`
    reduces the arrow size by 5% to keep a distance to the curve it points to. You
    can let the arrow follow a spline arc or give it other shapes using the `connectionstyle`
    key.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还演示了由 `arrowprop` 字典指定的几个箭头属性。您可以通过 `shrink` 键来缩放箭头。设置 `'shrink':0.05`
    将箭头大小减少 5%，以保持与它指向的曲线的距离。您可以让箭头跟随样条弧线或使用 `connectionstyle` 键给出其他形状。
- en: 'Text properties or even a bounding box around the text can be made by extra
    keyword arguments to the annotate method, refer to the following figure (*Figure
    6.12, left*):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将额外的关键字参数传递给注释方法，可以创建文本属性或文本周围的边界框，请参考以下图（*图 6.12，左*）：
- en: 'Experimenting with annotations requires sometimes to remove attempts that we
    would like to reject. Therefore we assigned the annotate object to a variable,
    which allows us to remove the annotation by its `remove` method:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行注释实验时，有时需要移除我们希望拒绝的尝试。因此，我们将注释对象分配给一个变量，这使得我们可以通过其 `remove` 方法移除注释：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Filling areas between curves
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在曲线之间填充区域
- en: Filling is an ideal tool to highlight differences between curves, such as noise
    on top of expected data, approximations versus exact functions, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 填充是一个理想的工具，可以突出曲线之间的差异，例如预期数据上的噪声、近似与精确函数等。
- en: Filling is done by the axis method
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 填充是通过轴方法完成的
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the next figure we used:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一张图，我们使用了：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`where` is a very convenient parameter that needs a Boolean array to specify
    the additional filling conditions.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`where` 是一个非常方便的参数，需要一个布尔数组来指定额外的填充条件。'
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The Boolean array which selects the regions to fill is `amod_sin(x)-sin(x) >
    0`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 选择填充区域的布尔数组是 `amod_sin(x)-sin(x) > 0`。
- en: 'The next figure shows the curve with both variants of filling areas:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图显示了具有两种填充区域变体的曲线：
- en: '![Filling areas between curves](img/amp_mod_sin23.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![曲线之间的填充区域](img/amp_mod_sin23.jpg)'
- en: 'Figure 6.12: The amplitude modulated sin-function with annotations and filled
    areas(left) and a modified figure with only partially filled areas by using the
    where parameter (right).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12：带有注释和填充区域的振幅调制正弦函数（左）以及仅使用 `where` 参数部分填充区域的修改后的图形（右）。
- en: 'If you test these commands yourself, do not forget to remove the complete filling
    before you try out the partial filling, otherwise you will not see any change:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您亲自测试这些命令，不要忘记在尝试部分填充之前移除完整的填充，否则您将看不到任何变化：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Related filling commands are `fill` and `fill_betweenx`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的填充命令是 `fill` 和 `fill_betweenx`。
- en: Ticks and ticklabels
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刻度和刻度标签
- en: 'Figures in talks, posters, and publications look much nicer if they are not
    overloaded with unnecessary information. You want to direct the spectator to those
    parts that contain the message. In our example, we clean up the picture by removing
    ticks from the *x*-axis and *y*-axis and by introducing problem related tick labels:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在演讲、海报和出版物中的图形，如果不过度加载不必要的信息，看起来会更好。您希望引导观众关注包含信息的部分。在我们的例子中，我们通过移除 *x* 轴和 *y*
    轴上的刻度以及引入与问题相关的刻度标签来清理图片：
- en: '![Ticks and ticklabels](img/amp_mod_sin4.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![刻度和刻度标签](img/amp_mod_sin4.jpg)'
- en: 'Figure 6.13: The completed example of the amplitude modulated sine - function
    with annotations and filled areas and modified ticks and tick labels.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：带有注释和填充区域以及修改后的刻度和刻度标签的振幅调制正弦函数的完整示例。
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that we used LaTeX formatting in the strings to represent Greek letters,
    to set formulas correctly, and to use a LaTeX font. It is also a good practice
    to increase the font size so that the resulting figure can be scaled down into
    a text document without affecting the readability of the axes. The final result
    of this guiding example is shown in the previous figure (*Figure 6.13*).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在字符串中使用了 LaTeX 格式化来表示希腊字母，以正确设置公式，并使用 LaTeX 字体。将字体大小增加以使最终图形可以缩小到文本文档中而不影响轴的可读性也是一个好习惯。此引导示例的最终结果在上一张图中显示（*图
    6.13*）。
- en: Making 3D plots
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作 3D 图
- en: There are some useful `matplotlib` tool kits and modules that can be used for
    a variety of special purposes. In this section, we describe a method for producing
    3D-plots.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有用的 `matplotlib` 工具包和模块，可以用于各种特殊目的。在本节中，我们描述了一种生成 3D 图的方法。
- en: 'The `mplot3d` toolkit provides 3D plotting of points, lines, contours, surfaces,
    and all other basic components as well as 3D rotation and scaling. Making a 3D
    plot is done by adding the keyword `projection=''3d''` to the axes object as shown
    in the following example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`mplot3d`工具包提供了点、线、等高线、表面以及所有其他基本组件的3D绘图，以及3D旋转和缩放。通过在轴对象中添加关键字`projection=''3d''`来制作3D图，如下例所示：'
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you can see, you need to import the `axes3D` type from `mplot3d`. The resulting
    plot displays the scattered 3D-data which can be seen in the following figure
    (*Figure 6.14*)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您需要从`mplot3d`导入`axes3D`类型。生成的图像显示了以下图中的散点3D数据（*图6.14*）
- en: '![Making 3D plots](img/scatter3d.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![制作3D图](img/scatter3d.jpg)'
- en: 'Figure 6.14: Plotting 3D data using mplot3d toolkit'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：使用mplot3d工具包绘制3D数据
- en: Plotting surfaces is just as easy. The following example uses the built-in function
    `get_test_data` to create a sample data for plotting a surface. Consider the following
    example of a surface plot with transparency.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制表面与绘制图形一样简单。以下示例使用内置函数`get_test_data`创建用于绘制表面的样本数据。考虑以下具有透明度的表面图示例。
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The *alpha* value sets the transparency. The surface plot is shown in the following
    figure (*Figure 6.15*).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*alpha*值设置透明度。表面图如下所示（*图6.15*）。'
- en: '![Making 3D plots](img/surface_plot.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![制作3D图](img/surface_plot.jpg)'
- en: 'Figure 6.15: Example for plotting a surface mesh with three 2D projections.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15：绘制表面网格的三个2D投影示例
- en: You can also plot contours in any of the coordinate projections as in the next
    example.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在坐标投影中绘制等高线，如下一个示例所示。
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note the commands for setting the axis limits. The standard `matplotlib` commands
    for setting the axis limits are `axis([-40, 40, -40, 40])`, this works fine for
    2D plots. However, `axis([-40,40,-40,40,-40,40])` does not work. For 3D plots
    you need to use the object oriented version of the commands, `ax.set_xlim3d(-40,40)`
    and likewise. The same goes for labeling the axis; note the commands for setting
    the labels. For 2D plots you can do `xlabel(’X axis’)` and `ylabel(’Y axis’)`
    but there is no `zlabel` command. Instead, in 3D plots you need to use `ax.set_xlabel(’X
    axis’)` and likewise, as shown in the preceding example.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意设置轴限制的命令。设置轴限制的标准`matplotlib`命令是`axis([-40, 40, -40, 40])`，这对于2D图形来说效果很好。然而，`axis([-40,40,-40,40,-40,40])`不起作用。对于3D图形，您需要使用命令的对象化版本，例如`ax.set_xlim3d(-40,40)`以及类似的方法。对于标签轴也是如此；注意设置标签的命令。对于2D图形，您可以执行`xlabel('X轴')`和`ylabel('Y轴')`，但没有`zlabel`命令。相反，在3D图形中，您需要使用`ax.set_xlabel('X轴')`以及类似的方法，如前例所示。
- en: The resulting figure from this code is the following
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成的图像如下
- en: '![Making 3D plots](img/wireframe_contours.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![制作3D图](img/wireframe_contours.jpg)'
- en: There are many options for formatting the appearance of the plots, including
    color and transparency of surfaces. The `mplot3d` documentation website, [[23]](apa.html
    "Appendix . References"), has the details.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于格式化图形的外观有许多选项，包括表面的颜色和透明度。有关详细信息，请参阅`mplot3d`文档网站，[[23]](apa.html "附录. 参考文献")。
- en: Making movies from plots
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从图中制作电影
- en: If you have data that evolves, you might want to save it as a movie besides
    showing it in a figure window, similar to the `savefig` command. One way to do
    this is with the `visvis` module available at visvis (refer to [[37]](apa.html
    "Appendix . References") for more information).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一些演变的数据，你可能想将其保存为电影，除了在图窗口中显示之外，类似于`savefig`命令。一种方法是在visvis模块中这样做，该模块可在visvis（有关更多信息，请参阅[[37]](apa.html
    "附录. 参考文献")）中找到。
- en: Here is a simple example of evolving a circle using an implicit representation.
    Let the circle be represented by the zero level, ![Making movies from plots](img/math_circle.jpg),
    of a function ![Making movies from plots](img/2d_function-1.jpg). Alternatively,
    consider the disk ![Making movies from plots](img/disk_math.jpg) inside the zero
    set. If the value of *f* decreases at a rate *v* then the circle will move outward
    with rate ![Making movies from plots](img/nabla_math.jpg).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用隐式表示演变圆圈的简单示例。让圆由函数![从图中制作电影](img/math_circle.jpg)的零水平面表示。![从图中制作电影](img/2d_function-1.jpg)。或者，考虑零集内部的圆盘![从图中制作电影](img/disk_math.jpg)。如果*f*的值以速率*v*减少，则圆将以![从图中制作电影](img/nabla_math.jpg)的速率向外移动。
- en: 'This can be implemented as:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以实施如下：
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The result is a Flash movie (*.swf file) of a growing black circle, as shown
    in the next figure (*Figure 6.16)*:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个不断扩大的黑色圆圈Flash电影（*.swf文件），如图6.16所示：
- en: '![Making movies from plots](img/circle_evolution_0-new.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![从图中制作电影](img/circle_evolution_0-new.jpg)'
- en: 'Figure 6.16: An example of evolving a circle'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16：圆形演变的示例
- en: In this example, a list of arrays was used to create the movie. The `visvis`
    module can also save an GIF animation and on certain platforms an AVI animation
    (*.gif and *.avi files*)*, and there is also the possibility to capturing movie
    frames directly from the figure window. These options, however, require some more
    packages to be installed on your system (for example, `PyOpenGL` and `PIL`, the
    Python Imaging Library). See the documentation on the `visvis` webpage for more
    details.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用数组列表创建电影。`visvis`模块还可以保存GIF动画，在某些平台上还可以保存AVI动画（*.gif和*.avi文件），还可以直接从图形窗口捕获电影帧。然而，这些选项需要安装一些额外的系统包（例如，`PyOpenGL`和`PIL`，Python图像库）。有关更多详细信息，请参阅`visvis`网页上的文档。
- en: Another option is to use `savefig` to create images, one for each frame.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用`savefig`创建图像，每个帧一个。
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: These images can then be combined using a standard video editing software, for
    example, Mencoder or ImageMagick. This approach has the advantage that you can
    make high-resolution videos by saving high-resolution images.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用标准的视频编辑软件将这些图像组合起来，例如Mencoder或ImageMagick。这种方法的优势在于，您可以通过保存高分辨率图像来制作高分辨率视频。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: A graphical representation is the most compact form in which to present mathematical
    results or the behavior of an algorithm. This chapter provided you with the basic
    tools for plotting and introduced you to a more sophisticated way to work with
    graphical objects, such as figures, axes, and lines in an object-oriented way.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图形表示是呈现数学结果或算法行为最紧凑的形式。本章为您提供了绘图的基本工具，并介绍了以面向对象的方式处理图形对象（如图形、坐标轴和线条）的更复杂方法。
- en: In this chapter, you learned how to make plots, not only classical x/y-plots
    but also 3D-plots and histograms. We gave you an appetizer on making films. You
    also saw how to modify plots considering them to be graphical objects with related
    methods and attributes which can be set, deleted, or modified.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何制作图表，不仅包括经典的x/y图表，还包括3D图表和直方图。我们还为您提供了制作电影的入门知识。您还看到了如何将图表视为具有相关方法属性的图形对象，这些方法可以设置、删除或修改。
- en: Exercises
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '**Ex. 1** → Write a function that plots an ellipse given its center coordinates
    (*x,y*), the half axis *a* and *b* rotation angle θ.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**例1** → 编写一个函数，用于根据其中心坐标（*x,y*）、半轴*a*和*b*以及旋转角度θ绘制椭圆。'
- en: '**Ex. 2** → Write a short program that takes a 2D array, e.g., the preceding
    Mandelbrot contour image, and iteratively replace each value by the average of
    its neighbors. Update a contour plot of the array in a figure window to animate
    the evolution of the contours. Explain the behavior.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**例2** → 编写一个简短的程序，该程序接受一个二维数组，例如前面的Mandelbrot轮廓图像，并迭代地将每个值替换为其邻居的平均值。在一个图形窗口中更新数组的轮廓图，以动画化轮廓的演变。解释其行为。'
- en: '**Ex. 3** → Consider an *N × N* matrix or image with integer values. The mapping'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**例3** → 考虑一个*N × N*矩阵或具有整数值的图像。映射'
- en: '![Exercises](img/I_map_math.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![练习](img/I_map_math.jpg)'
- en: 'is an example of a mapping of a toroidal square grid of points onto itself.
    This has the interesting property that it distorts the image by shearing and then
    moving the pieces outside the image back using the modulu function `mod`. Applied
    iteratively, this results in randomizing the image in a way that eventually returns
    the original. Implement the following sequence:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 是将点阵的环面网格映射到其自身的一个示例。它有一个有趣的特点，即通过剪切和移动图像外的碎片来扭曲图像，然后使用模函数`mod`将它们移回图像内。迭代应用，这会导致图像随机化，最终返回原始图像。实现以下序列：
- en: '![Exercises](img/I_map_iter_math.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![练习](img/I_map_iter_math.jpg)'
- en: and save out the first N steps to files or plot them in a figure window.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 并将前N步保存到文件中或在一个图形窗口中绘制它们。
- en: As an example image, you can use the classic 512 *×* 512 Lena test image from
    `scipy.misc`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例图像，您可以使用来自`scipy.misc`的经典512 *×* 512 Lena测试图像。
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result should look like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像这样：
- en: '| ![Exercises](img/lena_cat_0.jpg) | ![Exercises](img/lena_cat_1.jpg) | … |
    ![Exercises](img/lena_cat_128.jpg) | … | ![Exercises](img/lena_cat_256.jpg) |
    … | ![Exercises](img/lena_cat_511.jpg) | ![Exercises](img/lena_cat_512.jpg) |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| ![练习](img/lena_cat_0.jpg) | ![练习](img/lena_cat_1.jpg) | … | ![练习](img/lena_cat_128.jpg)
    | … | ![练习](img/lena_cat_256.jpg) | … | ![练习](img/lena_cat_511.jpg) | ![练习](img/lena_cat_512.jpg)
    |'
- en: '| 0 | 1 |  | 128 |  | 256 |  | 511 | 512 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 |  | 128 |  | 256 |  | 511 | 512 |'
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Compute the *x* and *y* mappings and use array indexing (refer to section *Array
    Indexing* in [Chapter 5](ch05.html "Chapter 5. Advanced Array Concepts"), *Advance
    Array Concepts*) to copy the pixel values.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 计算映射的 *x* 和 *y*，并使用数组索引（参考 [第 5 章](ch05.html "第 5 章。高级数组概念") 中的 *数组索引* 部分，*高级数组概念*）来复制像素值。
- en: '**Ex. 4** → Reading and plotting on images. SciPy comes with the `imread` function
    (in the `scipy.misc` module) for reading images, (refer to section *Reading and
    Writing Images* in [Chapter 12](ch12.html "Chapter 12. Input and Output"), *Input
    and output*). Write a short program that reads an image from file and plots the
    image contour at a given gray level value overlaid on the original image.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**例 4** → 在图像上读取和绘图。SciPy 包含了 `imread` 函数（位于 `scipy.misc` 模块中），用于读取图像，（参考第
    12 章 *读取和写入图像* 部分，[第 12 章](ch12.html "第 12 章。输入和输出")，*输入和输出*）。编写一个简短的程序，从文件中读取图像，并在给定的灰度级别值上绘制原始图像的轮廓。'
- en: Tip
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can get a gray level version of the image by averaging the color channels
    like this: `mean(im,axis=2)`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过如下方式获取图像的灰度版本：`mean(im,axis=2)`
- en: '**Ex. 5** → Image edges. The zero crossings of the 2D Laplacian are a good
    indication of image edges. Modify the program in the previous exercise to use
    the `gaussian_laplace` or `laplace` function from the `scipy.ndimage` module to
    compute the 2D Laplacian and overlay the edges on top of the image.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**例 5** → 图像边缘。二维拉普拉斯算子的零交叉是图像边缘的良好指示。修改前一个练习中的程序，使用 `scipy.ndimage` 模块中的 `gaussian_laplace`
    或 `laplace` 函数来计算二维拉普拉斯算子，并将边缘叠加到图像上。'
- en: '**Ex. 6** → Reformulate the Mandelbrod fractal example (see section *Images
    and Contours)* by using `orgid` instead of `meshgrid,` see also the explanation
    `ogrid` in *Function of two variables* in [Chapter 5](ch05.html "Chapter 5. Advanced
    Array Concepts"), *Advanced Array Concepts*. What is the difference between `orgid`,
    `mgrid`, and `meshgrid`?'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**例 6** → 使用 `ogrid` 而不是 `meshgrid` 重新表述 Mandelbrot 分形示例（参见 *图像和轮廓* 部分），也请参阅
    [第 5 章](ch05.html "第 5 章。高级数组概念") 中 *两个变量的函数* 部分的 `ogrid` 解释，*高级数组概念*。`orgid`、`mgrid`
    和 `meshgrid` 之间有什么区别？'
