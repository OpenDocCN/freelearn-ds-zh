- en: Introduction to Geospatial Code Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理空间代码库简介
- en: This chapter will introduce the major code libraries used to process and analyze
    geospatial data. You will learn the characteristics of each library, how they
    are related to each other, how to install them, where to find additional documentation,
    and typical use cases. These instructions assume that the user has a recent (2.7
    or later) version of Python on their machine, and do not cover installing Python.
    Next, we'll discuss how all of these packages fit together and how they are covered
    in the rest of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍用于处理和分析地理空间数据的主要代码库。您将学习每个库的特点，它们之间的关系，如何安装它们，在哪里可以找到额外的文档，以及典型用例。这些说明假设用户在其机器上安装了较新的（2.7或更高版本）的Python，并且不涉及Python的安装。接下来，我们将讨论所有这些包是如何相互关联的，以及它们在本书的其余部分是如何被涵盖的。
- en: 'The following libraries will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下库：
- en: GDAL/OGR
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GDAL/OGR
- en: GEOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GEOS
- en: Shapely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shapely
- en: Fiona
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fiona
- en: Python Shapefile Library (`pyshp`)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Shapefile Library (`pyshp`)
- en: '`pyproj`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyproj`'
- en: Rasterio
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rasterio
- en: GeoPandas
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoPandas
- en: Geospatial Data Abstraction Library (GDAL) and the OGR Simple Features Library
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理空间数据抽象库（GDAL）和OGR简单特征库
- en: The **Geospatial Data Abstraction Library** (**GDAL**)/**OGR Simple Features
    Library **combines two separate libraries that are generally downloaded together
    as a GDAL. This means that installing the GDAL package also gives access to OGR
    functionality, which is why they're covered together here. The reason GDAL is
    covered first is that other packages were written after GDAL, so chronologically,
    it comes first. As you will notice, some of the packages covered in this chapter
    extend GDAL's functionality or use it under the hood.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**地理空间数据抽象库（Geospatial Data Abstraction Library）**（**GDAL**）和**OGR简单特征库（OGR
    Simple Features Library**）结合了两个通常一起作为GDAL下载的独立库。这意味着安装GDAL包也提供了对OGR功能的访问，这就是为什么它们在这里一起被介绍。GDAL被首先介绍的原因是其他包是在GDAL之后编写的，所以按时间顺序，它排在前面。您将注意到，本章中介绍的一些包扩展了GDAL的功能或在其底层使用它。'
- en: GDAL was created in the 1990s by Frank Warmerdam and saw its first release in
    June 2000\. Later, the development of GDAL was transferred to the **Open Source
    Geospatial Foundation **(**OSGeo**). Technically, GDAL is a little different than
    your average Python package as the GDAL package itself was written in C and C++,
    meaning that in order to be able to use it in Python, you need to compile GDAL
    and its associated Python bindings. However, using `conda` and Anaconda makes
    it relatively easy to get started quickly. Because it was written in C and C++,
    the online GDAL documentation is written in the C++ version of the libraries.
    For Python developers, this can be challenging, but many functions are documented
    and can be consulted with the built-in `pydoc` utility, or by using the `help`
    function within Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL是在20世纪90年代由Frank Warmerdam创建的，并于2000年6月首次发布。后来，GDAL的开发被转移到**开源地理空间基金会（Open
    Source Geospatial Foundation）**（**OSGeo**）。技术上讲，GDAL与普通的Python包略有不同，因为GDAL包本身是用C和C++编写的，这意味着为了能够在Python中使用它，您需要编译GDAL及其相关的Python绑定。然而，使用`conda`和Anaconda可以使快速开始变得相对容易。由于它是用C和C++编写的，因此在线GDAL文档是用库的C++版本编写的。对于Python开发者来说，这可能是一个挑战，但许多函数都有文档，并且可以使用内置的`pydoc`实用程序或通过在Python中使用`help`函数进行查阅。
- en: Because of its history, working with GDAL in Python also feels a lot like working
    in C++ rather than pure Python. For example, a naming convention in OGR is different
    than Python's since you use uppercase for functions instead of lowercase. These
    differences explain the choice for some of the other Python libraries such as
    Rasterio and Shapely, which are also covered in this chapter, that has been written
    from a Python developer's perspective but offer the same GDAL functionality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其历史原因，在Python中使用GDAL感觉更像是在C++中工作，而不是纯Python。例如，OGR中的命名约定与Python不同，因为您使用大写字母而不是小写字母来表示函数。这些差异解释了为什么其他一些Python库（如本章中也将涵盖的Rasterio和Shapely）的选择，这些库是从Python开发者的角度编写的，但提供了相同的GDAL功能。
- en: GDAL is a massive and widely used data library for raster data. It supports
    the reading and writing of many raster file formats, with the latest version counting
    up to 200 different file formats that are supported. Because of this, it is indispensable
    for geospatial data management and analysis. Used together with other Python libraries,
    GDAL enables some powerful remote sensing functionalities. It's also an industry
    standard and is present in commercial and open source GIS software.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL是一个用于栅格数据的庞大且广泛使用的数据库。它支持读取和写入许多栅格文件格式，最新版本支持多达200种不同的文件格式。正因为如此，它在地理空间数据管理和分析中是必不可少的。与Python的其他库一起使用，GDAL可以实现一些强大的遥感功能。它也是行业标准，存在于商业和开源GIS软件中。
- en: The OGR library is used to read and write vector-format geospatial data, supporting
    reading and writing data in many different formats. OGR uses a consistent model
    to be able to manage many different vector data formats. We'll discuss this model
    when working with vector data in [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml),
    *Vector Data Analysis*. You can use OGR to do vector reprojection, vector data
    format conversion, vector attribute data filtering, and more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OGR库用于读取和写入矢量格式地理空间数据，支持读取和写入多种不同的数据格式。OGR使用一个一致的模式来管理许多不同的矢量数据格式。我们将在[第5章](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml)“矢量数据分析”中讨论这个模型。你可以使用OGR进行矢量重投影、矢量数据格式转换、矢量属性数据过滤等操作。
- en: GDAL/OGR libraries are not only useful for Python programmers but are also used
    by many GIS vendors and open source projects. The latest GDAL version at the time
    of writing is 2.2.4, which was released in March 2018.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL/OGR库不仅对Python程序员有用，还被许多GIS供应商和开源项目使用。截至写作时，最新的GDAL版本是2.2.4，该版本于2018年3月发布。
- en: Installing GDAL
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GDAL
- en: The installation of GDAL for Python used to be quite complicated, requiring
    you to fiddle with system settings and path variables. It is still possible to
    install GDAL in various ways, however, we recommend that you use either Anaconda3
    or `conda`, as this is the quickest and easiest way to get started. Other options
    are using `pip` install, or using an online repository such as [http://gdal.org](http://gdal.org)
    or Tamas Szekeres Windows binaries ([http://www.gisinternals.com/release.php](http://www.gisinternals.com/release.php)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，Python版本的GDAL安装相当复杂，需要你调整系统设置和路径变量。然而，尽管如此，我们仍然建议你使用Anaconda3或`conda`，因为这是开始的最快和最简单的方式。其他选项包括使用`pip`安装，或者使用在线仓库，如[http://gdal.org](http://gdal.org)或Tamas
    Szekeres的Windows二进制文件([http://www.gisinternals.com/release.php](http://www.gisinternals.com/release.php))。
- en: However, this might be a little more involved than the options described here.
    The catch with installing GDAL is that a particular version of the library (that
    comes in the C language and is installed in a separate system directory from your
    local Python files) has an accompanying Python version, and needs to be compiled
    in order for you to use it in Python. In addition, GDAL for Python is dependent
    on some extra Python libraries that come with an installation. While it is possible
    to use multiple versions of GDAL on the same machine, the recommended approach
    here is to install it in a virtual environment, using Anaconda3, `conda`, or `pip`
    installations. This will keep your system settings clean of additional path variables
    or stop things from working.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这可能会比这里描述的选项复杂一些。安装GDAL的难点在于，库的特定版本（以C语言形式提供，并安装在你的本地Python文件之外的单独系统目录中）有一个相应的Python版本，并且需要编译才能在Python中使用。此外，Python版本的GDAL依赖于一些额外的Python库，这些库包含在安装中。虽然可以在同一台机器上使用多个GDAL版本，但这里推荐的方法是在虚拟环境中安装它，使用Anaconda3、`conda`或`pip`安装。这将保持你的系统设置干净，避免额外的路径变量或防止某些东西无法正常工作。
- en: Installing GDAL using Anaconda3
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Anaconda3安装GDAL
- en: If you're using Anaconda3, the easiest way to install GDAL is to create a virtual
    environment through Anaconda Navigator, choosing Python 3.6 as the preferred version.
    Then, choose `gdal` from the list of uninstalled Python packages. This will install
    `gdal` version 2.1.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Anaconda3，安装GDAL最简单的方法是通过Anaconda Navigator创建一个虚拟环境，选择Python 3.6作为首选版本。然后，从未安装的Python包列表中选择`gdal`。这将安装`gdal`版本2.1.0。
- en: 'After installation, you can check if everything works OK by entering a Python
    shell and typing:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你可以通过进入Python壳并输入以下命令来检查一切是否正常工作：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can check GDAL''s version number as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式检查GDAL的版本号：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This means you're running GDAL version 2.1.3.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你正在运行GDAL版本2.1.3。
- en: Installing GDAL using conda
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 conda 安装 GDAL
- en: 'Using `conda` to install GDAL gives you more flexibility in choosing a preferred
    Python version than Anaconda3\. If you open up a terminal, you can use the `conda
    search gdal` command to print a list of available `gdal` versions and the corresponding
    Python version. If you want to know the dependencies for each package, type `conda
    info gdal`. Particular versions of GDAL depend on a specific package version,
    which can be a problem if you have these already installed, for example, NumPy.
    Then, you can create a virtual environment to install and run GDAL and their dependencies
    with the accompanying Python version, for example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `conda` 安装 GDAL 比使用 Anaconda3 更灵活，因为它允许你选择一个首选的 Python 版本。如果你打开一个终端，可以使用
    `conda search gdal` 命令来打印可用的 `gdal` 版本及其对应的 Python 版本。如果你想了解每个软件包的依赖关系，请输入 `conda
    info gdal`。GDAL 的特定版本依赖于特定的软件包版本，如果你已经安装了这些软件包，例如 NumPy，这可能会成为一个问题。然后，你可以创建一个虚拟环境来使用相应的
    Python 版本安装和运行 GDAL 及其依赖项，例如：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will be asked to proceed or not. If you confirm with `y` and hit *Enter*,
    a set of additional packages will be installed. These are called **dependencies**,
    which are packages that GDAL requires in order to function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被询问是否继续。如果你确认使用 `y` 并按 *Enter* 键，将安装一组额外的软件包。这些被称为 **依赖项**，是 GDAL 为了正常运行所必需的软件包。
- en: As you can see, `conda` does not list the latest GDAL version, 2.2.2, when you
    type in `conda search gdal`. Remember that in [Chapter 1](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml), *Package
    Installation and Management, *we stated that `conda` does not always have the
    latest test versions of packages available for installation that are available
    in other ways. This is one such case.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当你输入 `conda search gdal` 时，`conda` 并不会列出最新的 GDAL 版本，2.2.2。记住，在 [第 1 章](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml)，*软件包安装和管理*中，我们提到
    `conda` 并不总是提供其他方式可用的最新测试版本的软件包。这是一个例子。
- en: Installing GDAL using pip
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pip 安装 GDAL
- en: The **Python Package Index** (PyPI) also offers GDAL, meaning you can use `pip` to
    install it on your machine. The installation is similar to the `conda` installation
    procedure described earlier, but this time using the `pip install` command. Again,
    it is recommended to use a virtual environment when installing GDAL instead of
    a root installation that requires you to create path variables in your system
    environment setting if you're using Windows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 软件包索引**（PyPI）也提供了 GDAL，这意味着你可以使用 `pip` 在你的机器上安装它。安装过程与前面描述的 `conda`
    安装过程类似，但这次使用 `pip install` 命令。再次提醒，如果你使用 Windows，建议使用虚拟环境安装 GDAL 而不是在系统环境设置中创建路径变量的根安装。'
- en: Installing a second GDAL version using pip
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pip 安装第二个 GDAL 版本
- en: 'If you have a Windows machine and already have a working version of GDAL on
    your machine, but would like to install an extra one using `pip`, you can use
    the following link to install the GDAL version of your choice and then run the
    following command from your activated virtual environment to install it correctly:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一台 Windows 机器，并且已经在你的机器上安装了一个可工作的 GDAL 版本，但想使用 `pip` 安装额外的版本，你可以使用以下链接安装你选择的
    GDAL 版本，然后从激活的虚拟环境中运行以下命令来正确安装它：
- en: 'GDAL download repository: [https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal](https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL 下载存储库：[https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal](https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal)
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`GDAL-2.1.3-cp27m-win32.whl` is the name of the downloaded GDAL repository.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`GDAL-2.1.3-cp27m-win32.whl` 是下载的 GDAL 存储库的名称。'
- en: Other recommended GDAL resources
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他推荐的 GDAL 资源
- en: The full documentation of the GDAL/OGR Python API is available at: [http://gdal.org/python/](http://gdal.org/python/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GDAL/OGR Python API 的完整文档可在以下网址找到：[http://gdal.org/python/](http://gdal.org/python/)。
- en: The homepage, [http://gdal.org](http://gdal.org), also offers download links
    to GDAL as well as extensive documentation for developers and users.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 主页 [http://gdal.org](http://gdal.org) 也提供了 GDAL 的下载链接以及针对开发者和用户的详尽文档。
- en: GEOS
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GEOS
- en: The **Geometry Engine Open Source** (**GEOS**) is the C/C++ port of a subset
    of the **Java Topology Suite** (**JTS**) and selected functions. GEOS aims to
    contain the complete functionality of JTS in C++. It can be compiled on many platforms,
    including Python. As you will see later on, the Shapely library uses functions
    from the GEOS library. In fact, there are many applications using GEOS, including
    PostGIS and QGIS. GeoDjango, covered in [Chapter 12](a91ad85f-494d-4cc3-952f-d39a8933758e.xhtml), *GeoDjango*,
    also uses GEOS, as well as GDAL, among other geospatial libraries. GEOS can also
    be compiled with GDAL, giving OGR all of its capabilities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**几何引擎开源**（**GEOS**）是**Java拓扑套件**（**JTS**）和所选功能的C/C++移植。GEOS旨在包含JTS在C++中的完整功能。它可以在包括Python在内的许多平台上编译。正如你将在后面看到的那样，Shapely库使用了GEOS库中的函数。实际上，有许多应用程序使用GEOS，包括PostGIS和QGIS。在第12章中介绍的GeoDjango，*GeoDjango*，也使用了GEOS，以及其他地理空间库，如GDAL。GEOS还可以与GDAL一起编译，为OGR提供所有功能。'
- en: The JTS is an open source geospatial computational geometry library written
    in Java. It provides various functionalities, including a geometry model, geometric
    functions, spatial structures and algorithms, and i/o capabilities. Using GEOS,
    you have access to the following capabilities—geospatial functions (such as `within`
    and `contains`), geospatial operations (union, intersection, and many more), spatial
    indexing, **Open Geospatial Consortium** (**OGC**) **well-known text** (**WKT**) and
    **w****ell-known binary** (**WKB**) input/output, the C and C++ APIs, and thread
    safety.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JTS是一个用Java编写的开源地理空间计算几何库。它提供了各种功能，包括几何模型、几何函数、空间结构和算法以及输入/输出能力。使用GEOS，你可以访问以下功能——地理空间函数（如`within`和`contains`）、地理空间操作（并集、交集等）、空间索引、**开放地理空间联盟**（**OGC**）的**已知文本**（**WKT**）和**已知二进制**（**WKB**）输入/输出、C和C++
    API以及线程安全性。
- en: Installing GEOS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GEOS
- en: 'GEOS can be installed using `pip` install, `conda`, and Anaconda3:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`pip` install、`conda`和Anaconda3来安装GEOS：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Detailed installation info about GEOS and other documentation is available
    here: [https://trac.osgeo.org/geos/](https://trac.osgeo.org/geos/)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GEOS和其他文档的详细安装信息可在此处获得：[https://trac.osgeo.org/geos/](https://trac.osgeo.org/geos/)
- en: Shapely
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shapely
- en: Shapely is a Python package for manipulation and analysis of planar features,
    using functions from the GEOS library (the engine of PostGIS) and a port of the
    JTS. Shapely is not concerned with data formats or coordinate systems but can
    be readily integrated with packages that are. Shapely only deals with analyzing
    geometries and offers no capabilities for reading and writing geospatial files.
    It was developed by Sean Gillies, who was also the person behind Fiona and Rasterio.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely是一个用于平面特征操作和分析的Python包，它使用GEOS库（PostGIS的引擎）和JTS的移植。Shapely不关心数据格式或坐标系，但可以轻松地与关心这些的包集成。Shapely只处理几何形状的分析，不提供读取和写入地理空间文件的能力。它是由Sean
    Gillies开发的，他也是Fiona和Rasterio背后的那个人。
- en: Shapely supports eight fundamental geometry types that are implemented as a
    class in the `shapely.geometry` module—points, multipoints, linestrings, multilinestrings,
    linearrings, multipolygons, polygons, and geometrycollections. Apart from representing
    these geometries, Shapely can be used to manipulate and analyze geometries through
    a number of methods and attributes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely支持在`shapely.geometry`模块中以类形式实现的八个基本几何类型——点、多点、线字符串、多线字符串、线串、多边形、多边形集合和几何集合。除了表示这些几何形状外，Shapely还可以通过多种方法和属性来操作和分析几何形状。
- en: Shapely has mainly the same classes and functions as OGR while dealing with
    geometries. The difference between Shapely and OGR is that Shapely has a more
    Pythonic and very intuitive interface, is better optimized, and has a well-developed
    documentation. With Shapely, you're writing pure Python, whereas with GEOS, you're
    writing C++ in Python. For **data munging**, a term used for data management and
    analysis, you're better off writing in pure Python rather than C++, which explains
    why these libraries were created.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely在处理几何形状时主要与OGR具有相同的类和函数。Shapely与OGR的区别在于，Shapely拥有一个更加Pythonic且非常直观的接口，优化得更好，并且拥有完善的文档。使用Shapely时，你是在编写纯Python代码，而使用GEOS时，你是在Python中编写C++代码。对于**数据整理**，这是一个用于数据管理和分析术语，你最好使用纯Python而不是C++来编写，这也解释了为什么创建了这些库。
- en: For more information on Shapely, consult the documentation at [https://toblerity.org/shapely/manual.html](https://toblerity.org/shapely/manual.html).
    This page also has detailed information on installing Shapely for different platforms
    and how to build Shapely from the source for compatibility with other modules
    that depend on GEOS. This refers to the fact that installing Shapely will require
    you to upgrade NumPy and GEOS if these are already installed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Shapely 的更多信息，请参阅 [https://toblerity.org/shapely/manual.html](https://toblerity.org/shapely/manual.html)
    的文档。此页面还提供了有关在不同平台上安装 Shapely 的详细信息以及如何从源代码构建 Shapely 以与其他依赖 GEOS 的模块兼容。这指的是安装
    Shapely 可能需要您升级已安装的 NumPy 和 GEOS。
- en: Installing Shapely
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Shapely
- en: 'Shapely can be installed using `pip` install, `conda`, and Anaconda3:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Shapely 可以使用 `pip` 安装、`conda` 和 Anaconda3 进行安装：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Windows users can also get the wheels at [http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely](http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely).
    A wheel is a built-package format for Python, containing a ZIP format archive
    with a specially formatted filename and the `.whl` extension. Shapely 1.6 requires
    a Python version higher than 2.6 and a GEOS version higher or equal to 3.3.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户也可以从 [http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely](http://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely)
    获取 wheels。wheel 是 Python 的预构建包格式，包含一个具有特殊格式文件名和 `.whl` 扩展名的 ZIP 格式存档。Shapely 1.6
    需要 Python 版本高于 2.6，以及 GEOS 版本高于或等于 3.3。
- en: Also look at [https://pypi.python.org/pypi/Shapely](https://pypi.python.org/pypi/Shapely)
    for more information on installing and using Shapely.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 还请查看 [https://pypi.python.org/pypi/Shapely](https://pypi.python.org/pypi/Shapely)
    以获取有关安装和使用 Shapely 的更多信息。
- en: Fiona
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fiona
- en: Fiona is the API of OGR. It can be used for reading and writing data formats.
    The main reason for using it instead of OGR is that it's closer to Python than
    OGR as well as more dependable and less error-prone. It makes use of two markup
    languages, WKT and WKB, for representing spatial information with regards to vector
    data. As such, it can be combined well with other Python libraries such as Shapely,
    you would use Fiona for input and output, and Shapely for creating and manipulating
    geospatial data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Fiona 是 OGR 的 API。它可以用于读取和写入数据格式。使用它的主要原因之一是它比 OGR 更接近 Python，同时更可靠且更少出错。它利用两种标记语言，WKT
    和 WKB，来表示矢量数据的空间信息。因此，它可以很好地与其他 Python 库（如 Shapely）结合使用，你将使用 Fiona 进行输入和输出，而使用
    Shapely 创建和操作地理空间数据。
- en: While Fiona is Python compatible and our recommendation, users should also be
    aware of some of the disadvantages. It is more dependable than OGR because it
    uses Python objects for copying vector data instead of C pointers, which also
    means that they use more memory, which affects the performance.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Fiona 与 Python 兼容且是我们的推荐，但用户也应了解一些缺点。它比 OGR 更可靠，因为它使用 Python 对象来复制矢量数据，而不是
    C 指针，这也意味着它们使用更多的内存，这会影响性能。
- en: Installing Fiona
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Fiona
- en: 'You can use `pip` install, `conda`, or Anaconda3 to install Fiona:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `pip` 安装、`conda` 或 Anaconda3 来安装 Fiona：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fiona requires Python 2.6, 2.7, 3.3, or 3.4 and GDAL/OGR 1.8+. Fiona depends
    on the modules `six`, `cligj`, `munch`, `argparse`, and `ordereddict` (the two
    latter modules are standard in Python 2.7+).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Fiona 需要 Python 2.6、2.7、3.3 或 3.4 以及 GDAL/OGR 1.8+。Fiona 依赖于模块 `six`、`cligj`、`munch`、`argparse`
    和 `ordereddict`（后两个模块是 Python 2.7+ 的标准模块）。
- en: Consult Fiona's readme page for more download info [https://toblerity.org/fiona/README.html](https://toblerity.org/fiona/README.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 更多下载信息，请参阅 Fiona 的 README 页面 [https://toblerity.org/fiona/README.html](https://toblerity.org/fiona/README.html)。
- en: Python shapefile library (pyshp)
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python shapefile 库（pyshp）
- en: The **Python shapefile library** (**pyshp**) is a pure Python library and is
    used to read and write shapefiles. The `pyshp` library's sole purpose is to work
    with shapefiles—it only uses the Python standard library. You cannot use it for
    geometric operations. If you're only working with shapefiles, this one-file-only
    library is simpler than using GDAL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python shapefile 库**（pyshp）是一个纯 Python 库，用于读取和写入 shapefiles。`pyshp` 库的唯一目的是与
    shapefiles 一起工作——它只使用 Python 标准库。您不能用它进行几何运算。如果您只处理 shapefiles，这个单文件库比使用 GDAL
    更简单。'
- en: Installing pyshp
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 pyshp
- en: 'You can use `pip` install, `conda`, and Anaconda3 to install `pyshp`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `pip` 安装、`conda` 和 Anaconda3 来安装 `pyshp`：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'More documentation is available at PyPi: [https://pypi.python.org/pypi/pyshp/1.2.3](https://pypi.python.org/pypi/pyshp/1.2.3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更多文档可在 PyPi 上找到：[https://pypi.python.org/pypi/pyshp/1.2.3](https://pypi.python.org/pypi/pyshp/1.2.3)
- en: The source code for `pyshp` is available at [https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyshp` 的源代码可在 [https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp)
    找到。'
- en: pyproj
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pyproj
- en: The `pyproj` is a Python package that performs cartographic transformations
    and geodetic computations. It is a Cython wrapper to provide Python interfaces
    to PROJ.4 functions, meaning you can access an existing library of C code in Python.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproj` 是一个 Python 包，执行地图投影变换和大地测量计算。它是一个 Cython 包装器，提供 Python 接口到 PROJ.4
    函数，这意味着你可以在 Python 中访问现有的 C 代码库。'
- en: 'PROJ.4 is a projection library that transforms data among many coordinate systems
    and is also available through GDAL and OGR. The reason that PROJ.4 is still popular
    and widely used is two-fold:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PROJ.4 是一个投影库，可以在许多坐标系之间转换数据，并且也通过 GDAL 和 OGR 提供。PROJ.4 仍然受欢迎和广泛使用的原因有两个：
- en: Firstly, because it supports so many different coordinate systems
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，因为它支持如此多的不同坐标系
- en: Secondly, because of the routes it provides to do this—Rasterio and GeoPandas,
    two Python libraries covered next, both use `pyproj` and thus PROJ.4 functionality
    under the hood
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，因为它提供了执行此操作的途径——Rasterio 和 GeoPandas，这两个 Python 库将在下一章介绍，都使用 `pyproj` 和 PROJ.4
    功能。
- en: The difference between using PROJ.4 separately instead of using it with a package
    such as GDAL is that it enables you to re-project individual points, and packages
    using PROJ.4 do not offer this functionality.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PROJ.4 单独而不是与 GDAL 等包一起使用时，其区别在于它允许你重新投影单个点，而使用 PROJ.4 的包不提供此功能。
- en: The `pyproj` package offers two classes—the `Proj` class and the `Geod` class.
    The `Proj` class performs cartographic computations, while the `Geod` class performs
    geodetic computations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproj` 包提供了两个类——`Proj` 类和 `Geod` 类。`Proj` 类执行地图计算，而 `Geod` 类执行大地测量计算。'
- en: Installing pyproj
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 pyproj
- en: 'Installation of `pyproj` can be done with `pip` install, `conda`, and Anaconda3:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyproj` 的安装可以通过 `pip install`、`conda` 和 Anaconda3 完成：'
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following link contains more information on `pyproj`: [https://jswhit.github.io/pyproj/](https://jswhit.github.io/pyproj/)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接包含有关 `pyproj` 的更多信息：[https://jswhit.github.io/pyproj/](https://jswhit.github.io/pyproj/)
- en: You can find more about PROJ.4 at [http://proj4.org/](http://proj4.org/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://proj4.org/](http://proj4.org/) 上找到更多关于 PROJ.4 的信息。
- en: Rasterio
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rasterio
- en: Rasterio is a GDAL and NumPy-based Python library for raster data, written with
    the Python developer in mind instead of C, using Python language types, protocols,
    and idioms. Rasterio aims to make GIS data more accessible to Python programmers
    and helps GIS analysts learn important Python standards. Rasterio relies on concepts
    of Python rather than GIS.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Rasterio 是一个基于 GDAL 和 NumPy 的 Python 库，用于处理栅格数据，它是以 Python 开发者为中心编写的，而不是 C 语言，使用
    Python 语言类型、协议和习惯用法。Rasterio 的目标是使 GIS 数据对 Python 程序员更加易于访问，并帮助 GIS 分析师学习重要的 Python
    标准。Rasterio 依赖于 Python 的概念，而不是 GIS。
- en: Rasterio is an open source project from the satellite team of Mapbox, a provider
    of custom online maps for websites and applications. The name of this library
    should be pronounced as *raster-i-o* rather than *ras-te-rio*. Rasterio came into
    being as a result of a project called the **Mapbox Cloudless Atlas**, which aimed
    to create a pretty-looking basemap from satellite imagery.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Rasterio 是来自 Mapbox 卫星团队的开源项目，Mapbox 是为网站和应用提供定制在线地图的服务商。这个库的名字应该读作 *raster-i-o*
    而不是 *ras-te-rio*。Rasterio 是在名为 **Mapbox Cloudless Atlas** 的项目的基础上诞生的，该项目旨在从卫星图像中创建一个看起来很漂亮的底图。
- en: One of the software requirements was to use open source software and a high-level
    language with handy multi-dimensional array syntax. Although GDAL offers proven
    algorithms and drivers, developing with GDAL's Python bindings feels a lot like
    C++.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的一个要求是使用开源软件和具有方便的多维数组语法的编程语言。尽管 GDAL 提供了经过验证的算法和驱动程序，但使用 GDAL 的 Python 绑定进行开发感觉就像是在使用
    C++。
- en: Therefore, Rasterio was designed to be a Python package at the top, with extension
    modules (using Cython) in the middle, and a GDAL shared library on the bottom.
    Other requirements for the raster library were being able to read and write NumPy
    ndarrays to and from data files, use Python types, protocols, and idioms instead
    of C or C++ to free programmers from having to code in two languages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Rasterio 被设计为最顶层的 Python 包，中间是扩展模块（使用 Cython），底部是 GDAL 共享库。对于栅格库的其他要求是能够读写
    NumPy ndarrays 到和从数据文件，使用 Python 类型、协议和习惯用法而不是 C 或 C++，以使程序员从必须使用两种语言编码中解放出来。
- en: For georeferencing, Rasterio follows the lead of `pyproj`. There are a couple
    of capabilities added on top of reading and writing, one of them being a features
    module. Reprojection of geospatial data can be done with the `rasterio.warp` module.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于地理参照，Rasterio遵循`pyproj`的先例。在读取和写入的基础上增加了一些功能，其中之一是功能模块。可以使用`rasterio.warp`模块对地理空间数据进行重投影。
- en: 'Rasterio''s project homepage can be found here: [https://github.com/mapbox/rasterio](https://github.com/mapbox/rasterio)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Rasterio的项目主页可在此处找到：[https://github.com/mapbox/rasterio](https://github.com/mapbox/rasterio)
- en: Rasterio dependencies
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rasterio依赖项
- en: As stated earlier, Rasterio uses GDAL, meaning it's one of its dependencies.
    Python package dependencies are `affine`, `cligj`, `click`, `enum34`, and `numpy`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Rasterio使用GDAL，这意味着它是其依赖项之一。Python包依赖项包括`affine`、`cligj`、`click`、`enum34`和`numpy`。
- en: 'The documentation for Rasterio can be found here: [https://mapbox.github.io/rasterio/](https://mapbox.github.io/rasterio/)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Rasterio的文档可在此处找到：[https://mapbox.github.io/rasterio/](https://mapbox.github.io/rasterio/)
- en: Installation of Rasterio
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rasterio的安装
- en: 'To install Rasterio on a Windows machine, you need to download the `rasterio`
    and GDAL binaries for your system and run:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows机器上安装Rasterio，您需要下载适用于您系统的`rasterio`和GDAL二进制文件，并运行：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using `conda`, you can install `rasterio` this way:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`conda`，您可以这样安装`rasterio`：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`conda-forge` is an additional channel from which packages may be installed.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda-forge`是一个额外的通道，您可以从该通道安装包。'
- en: 'Detailed installation instructions for different platforms are available here:
    [https://mapbox.github.io/rasterio/installation.html](https://mapbox.github.io/rasterio/installation.html)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不同平台的详细安装说明请在此处查看：[https://mapbox.github.io/rasterio/installation.html](https://mapbox.github.io/rasterio/installation.html)
- en: GeoPandas
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoPandas
- en: GeoPandas is a Python library for working with vector data. It is based on the
    `pandas` library that is part of the SciPy stack. SciPy is a popular library for
    data inspection and analysis, but unfortunately, it cannot read spatial data.
    GeoPandas was created to fill this gap, taking `pandas` data objects as a starting
    point. The library also adds functionality from geographical Python packages.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas是一个用于处理矢量数据的Python库。它是基于SciPy堆栈中的`pandas`库构建的。SciPy是一个流行的数据检查和分析库，但它无法读取空间数据。GeoPandas的创建是为了填补这一空白，以`pandas`数据对象为起点。该库还添加了来自地理Python包的功能。
- en: GeoPandas offers two data objects—a GeoSeries object that is based on a `pandas`
    Series object and a GeoDataFrame, based on a `pandas` DataFrame object, but adding
    a geometry column for each row. Both GeoSeries and GeoDataFrame objects can be
    used for spatial data processing, similar to spatial databases. Read and write
    functionality is provided for almost every vector data format. Also, because both
    Series and DataFrame objects are subclasses from pandas data objects, you can
    use the same properties to select or subset data, for example `.loc` or `.iloc`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas提供了两种数据对象——基于`pandas` Series对象的GeoSeries对象和基于`pandas` DataFrame对象的GeoDataFrame，为每一行添加一个几何列。GeoSeries和GeoDataFrame对象都可以用于空间数据处理，类似于空间数据库。几乎为每种矢量数据格式提供了读写功能。此外，由于Series和DataFrame对象都是pandas数据对象的子类，您可以使用相同的属性来选择或子集数据，例如`.loc`或`.iloc`。
- en: GeoPandas is a library that employs the capabilities of newer tools, such as
    Jupyter Notebooks, pretty well, whereas GDAL enables you to interact with data
    records inside of vector and raster datasets through Python code. GeoPandas takes
    a more visual approach by loading all records into a GeoDataFrame so that you
    can see them all together on your screen. The same goes for plotting data. These
    functionalities were lacking in Python 2 as developers were dependent on IDEs
    without extensive data visualization capabilities which are now available with
    Jupyter Notebooks.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas是一个利用Jupyter Notebooks等新工具功能的库，而GDAL则允许您通过Python代码与矢量数据和栅格数据集中的数据记录进行交互。GeoPandas通过将所有记录加载到GeoDataFrame中，以便您可以在屏幕上一起查看它们，采取了一种更直观的方法。数据绘图也是如此。这些功能在Python
    2中缺失，因为开发人员依赖于没有广泛数据可视化能力的IDE，而现在这些功能可以通过Jupyter Notebooks获得。
- en: GeoPandas installation
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoPandas安装
- en: 'There are various ways to install GeoPandas. You can use `pip` install, `conda` install,
    Anaconda3, or GitHub. Using a terminal window, you can install it as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 安装GeoPandas有多种方式。您可以使用`pip`安装、`conda`安装、Anaconda3或GitHub。使用终端窗口，您可以按照以下方式安装：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Detailed installation info is available here: [http://geopandas.org/install.html](http://geopandas.org/install.html)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 详细安装信息请在此处查看：[http://geopandas.org/install.html](http://geopandas.org/install.html)
- en: 'GeoPandas is also available through PyPi: [https://pypi.python.org/pypi/geopandas/0.3.0](https://pypi.python.org/pypi/geopandas/0.3.0)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas 也可以通过 PyPi 获取：[https://pypi.python.org/pypi/geopandas/0.3.0](https://pypi.python.org/pypi/geopandas/0.3.0)
- en: 'GeoPandas is also available through Anaconda Cloud: [https://anaconda.org/IOOS/geopandas](https://anaconda.org/IOOS/geopandas)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas 也可以通过 Anaconda Cloud 获取：[https://anaconda.org/IOOS/geopandas](https://anaconda.org/IOOS/geopandas)
- en: GeoPandas dependencies
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoPandas 依赖项
- en: GeoPandas depends on the following Python libraries, `pandas`, Shapely, Fiona,
    `pyproj`, NumPy, and `six`. These are either updated or installed when you install
    `GeoPandas`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas 依赖于以下 Python 库：`pandas`、Shapely、Fiona、`pyproj`、NumPy 和 `six`。这些库在安装
    `GeoPandas` 时会更新或安装。
- en: The `Geopandas` documentation is available at [http://geopandas.org](http://geopandas.org).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geopandas` 的文档可在 [http://geopandas.org](http://geopandas.org) 找到。'
- en: How it all works together
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它们是如何协同工作的
- en: We've provided an overview of the most important open source packages for processing
    and analyzing geospatial data**.** The question then becomes when to use a certain
    package and why. GDAL, OGR, and GEOS are indispensable for geospatial processing
    and analyzing, but were not written in Python, and so they require Python binaries
    for Python developers. Fiona, Shapely, and `pyproj` were written to solve these
    problems, as well as the newer Rasterio library. For a more Pythonic approach,
    these newer packages are preferable to the older C++ packages with Python binaries
    (although they're used under the hood).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们概述了处理和分析地理空间数据最重要的开源软件包**。**那么问题就变成了何时使用某个软件包以及为什么。GDAL、OGR 和 GEOS 对于地理空间处理和分析是必不可少的，但它们不是用
    Python 编写的，因此需要为 Python 开发者提供 Python 二进制文件。Fiona、Shapely 和 `pyproj` 是为了解决这些问题而编写的，以及较新的
    Rasterio 库。为了更 Pythonic 的方法，这些较新的软件包比带有 Python 二进制文件的较老 C++ 软件包更可取（尽管它们在底层使用）。
- en: However, it's good to know the origins and history of all of these packages
    as they're all so widely used (and for good reason). The next chapter, which will
    be discussing geospatial databases, will build on information from this chapter.
    [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector Data Analysis*,
    and [Chapter 6](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml), *Raster Data Processing,* will
    specifically deal with the libraries discussed here, getting deeper into the details
    of both raster and vector data processing using these libraries.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，了解所有这些软件包的起源和历史是有好处的，因为它们都被广泛使用（并且有很好的理由）。下一章，将讨论地理空间数据库，将基于本章的信息。[第五章](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml)，*矢量数据分析*，和[第六章](a5c9354e-8ea4-45f6-9e69-191375e171c3.xhtml)，*栅格数据处理*，将专门讨论这里讨论的库，更深入地探讨使用这些库进行栅格和矢量数据处理的细节。
- en: At this point, you should have a global overview of the most important packages
    for processing and analyzing, their history, and how they relate to each other.
    You should have an idea of what options are available for a certain use case and
    why one package is preferable over another. However, as is often the way in programming,
    there might be multiple solutions for one particular problem. For example, when
    dealing with shapefiles, you could use `pyshp`, GDAL, Shapely, or GeoPandas, depending
    on your preference and the problem at hand.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对处理和分析最重要的软件包有一个全局的了解，包括它们的历史以及它们之间的关系。你应该对特定用例可用的选项有所了解，以及为什么一个软件包比另一个软件包更可取。然而，正如编程中常见的情况，对于特定问题可能有多个解决方案。例如，处理
    shapefiles 时，你可以根据你的偏好和问题使用 `pyshp`、GDAL、Shapely 或 GeoPandas。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we introduced the major code libraries used to process and
    analyze geospatial data. You learned the characteristics of each library, how
    they are related or are distinct to each other, how to install them, where to
    find additional documentation, and typical use cases. GDAL is a major library
    that includes two separate libraries, OGR and GDAL. Many other libraries and software
    applications use GDAL functionality under the hood, examples are Fiona and Rasterio,
    which were both covered in this chapter. These were created to make it easier
    to work with GDAL and OGR in a more Pythonic way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用于处理和分析地理空间数据的主要代码库。你学习了每个库的特点，它们是如何相互关联或相互区别的，如何安装它们，在哪里可以找到额外的文档，以及典型的用例。GDAL
    是一个主要的库，包括两个独立的库，OGR 和 GDAL。许多其他库和软件应用程序在底层使用 GDAL 功能，例如 Fiona 和 Rasterio，这两者都在本章中进行了介绍。这些库是为了使与
    GDAL 和 OGR 一起以更 Pythonic 的方式工作而创建的。
- en: The next chapter will introduce spatial databases. These are used for data storage
    and analysis, with examples being SpatiaLite and PostGIS. You will also learn
    how to use different Python libraries to connect to these databases.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍空间数据库。这些数据库用于数据存储和分析，例如SpatiaLite和PostGIS。你还将学习如何使用不同的Python库来连接这些数据库。
