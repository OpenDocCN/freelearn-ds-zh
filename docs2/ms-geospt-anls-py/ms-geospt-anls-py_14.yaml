- en: Cloud Geodatabase Analysis and Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云地理数据库分析和可视化
- en: This chapter will cover **CARTOframes**, a Python package released by location
    intelligence software company CARTO in November 2017\. It offers a Python interface
    for working with the CARTO stack, enabling integration of CARTO maps, analysis,
    and data services into data science workflows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 **CARTOframes**，这是 CARTO 地理智能软件公司在 2017 年 11 月发布的一个 Python 包。它提供了一个用于与
    CARTO 堆栈一起工作的 Python 接口，使 CARTO 地图、分析和数据服务能够集成到数据科学工作流程中。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The specifics of the CARTOframes Python library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CARTOframes Python 库的详细信息
- en: Getting familiar with the CARTO stack and how CARTOframes interacts with different
    parts of it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉 CARTO 堆栈以及 CARTOframes 如何与它的不同部分交互
- en: How to install CARTOframes, its package requirements, and documentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装 CARTOframes、其包需求和文档
- en: The different package dependencies of CARTOframes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CARTOframes 的不同包依赖项
- en: How to get a CARTO API key
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何获取 CARTO API 密钥
- en: Setting up a CARTO Builder account
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 CARTO Builder 账户
- en: Virtual environments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟环境
- en: Using Jupyter Notebook
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jupyter Notebook
- en: Installing GeoPandas
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 GeoPandas
- en: A Python package created with data scientists in mind, CARTOframes is a data
    science tool that combines CARTO's SaaS offerings and web mapping tools with Python
    data science workflows. Released in late 2017 by CARTO ([www.carto.com)](https://carto.com),
    it is available for download through GitHub and the **Python Package Index** (**PyPI**)
    repository.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CARTOframes 是一个针对数据科学家创建的 Python 包，它将 CARTO 的 SaaS 提供和 Web 地图工具与 Python 数据科学工作流程相结合。由
    CARTO（[www.carto.com](https://carto.com)）在 2017 年末发布，可通过 GitHub 和 **Python 包索引**（**PyPI**）存储库下载。
- en: The package can be seen as a way to integrate CARTO elements with data science
    workflows, using Jupyter Notebooks as a working environment. This not only makes
    it attractive to use for data scientists, but also allows you to save and distribute
    code and workflows through Jupyter Notebooks. These data science workflows can
    be extended by using CARTO's services, such as hosted, dynamic, or static maps
    and datasets from CARTO's Data Observatory—all available through CARTO's cloud
    platform. This platform is accessed through an API key, which needs to be used
    when using CARTOframes in a Jupyter Notebook. We'll describe how to get an API
    key and how to install the CARTOframes package shortly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包可以被视为一种将 CARTO 元素与数据科学工作流程集成的方式，使用 Jupyter Notebooks 作为工作环境。这不仅使其对数据科学家具有吸引力，还允许您通过
    Jupyter Notebooks 保存和分发代码和工作流程。这些数据科学工作流程可以通过使用 CARTO 的服务进行扩展，例如来自 CARTO 数据观测站的托管、动态或静态地图和数据集——所有这些都可以通过
    CARTO 的云平台获得。此平台通过 API 密钥访问，当在 Jupyter Notebook 中使用 CARTOframes 时需要使用该密钥。我们将简要描述如何获取
    API 密钥以及如何安装 CARTOframes 软件包。
- en: The package offers functionality to read and write different types of spatial
    data. For instance, you can write `pandas` dataframes to CARTO tables, as well
    as read CARTO tables and queries into `pandas` dataframes. The CARTOframes package
    brings external data location data services from CARTO into the Jupyter Notebook,
    such as location data services, cloud-based data storage, CARTOColors (a set of
    custom color palettes built on top of well-known standards for color use on maps),
    PostGIS, and animated maps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包提供了读取和写入不同类型空间数据的功能。例如，您可以将 `pandas` 数据框写入 CARTO 表，也可以将 CARTO 表和查询读入 `pandas`
    数据框。CARTOframes 软件包将 CARTO 的外部数据位置数据服务引入 Jupyter Notebook，例如位置数据服务、基于云的数据存储、CARTOColors（一套基于地图上颜色使用标准的自定义调色板）、PostGIS
    和动画地图。
- en: One good reason for using CARTOframes is because of its plotting capabilities.
    It is a good alternative to other map-plotting packages such as GeoPandas, `matplotlib`,
    Folio, and GeoNotebook. All these packages have their advantages and disadvantages.
    For example, `matplotlib` is not an easy package to learn and requires a lot of
    code for basic maps. This is not the case with CARTOframes, and the results look
    impressive, especially because of the use of colors, combined with dynamic images
    (time-lapses) and easy commands to read, write, query, plot and delete data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CARTOframes 的一个很好的理由是其绘图功能。它是 GeoPandas、`matplotlib`、Folio 和 GeoNotebook
    等其他地图绘图包的良好替代品。所有这些包都有其优点和缺点。例如，`matplotlib` 是一个不易学习的包，需要大量代码来创建基本地图。CARTOframes
    的情况并非如此，而且结果看起来令人印象深刻，尤其是在使用颜色、结合动态图像（时间流逝）和易于阅读、写入、查询、绘图和删除数据的命令方面。
- en: How to install CARTOframes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安装 CARTOframes
- en: 'The CARTOframes library can be best installed by starting Anaconda Navigator
    and creating a new environment. From there, you can open a terminal and use `pip`
    install, which will install the library for you. This is currently the only way
    to install it (there''s no `conda` support yet). Use the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的安装CARTOframes的方法是启动Anaconda Navigator并创建一个新的环境。从那里，你可以打开一个终端并使用`pip install`，这将为你安装库。这是目前安装它的唯一方法（目前还没有`conda`支持）。使用以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Additional resources
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: CARTOframes documentation can be found, at: [http://CARTOframes.readthedocs.io/en/latest/](http://cartoframes.readthedocs.io/en/latest/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CARTOframes文档可以在以下位置找到：[http://CARTOframes.readthedocs.io/en/latest/](http://cartoframes.readthedocs.io/en/latest/)。
- en: 'The current version of CARTOframes is 0.5.5\. The PyPi repository for CARTOframes
    can be accessed here: [https://pypi.python.org/pypi/CARTOframes](https://pypi.python.org/pypi/cartoframes).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CARTOframes的当前版本是0.5.5。CARTOframes的PyPi仓库可以通过以下链接访问：[https://pypi.python.org/pypi/CARTOframes](https://pypi.python.org/pypi/cartoframes)。
- en: 'There''s also a GitHub repository with additional information, as one of the
    many CARTO GitHub repositories: [https://github.com/CARTODB/CARTOframes.](https://github.com/CartoDB/cartoframes)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个包含额外信息的GitHub仓库，它是许多CARTO GitHub仓库之一：[https://github.com/CARTODB/CARTOframes.](https://github.com/CartoDB/cartoframes)
- en: Jupyter Notebooks
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter Notebooks
- en: 'It is recommended to use CARTOframes in Jupyter Notebooks. In the example scripts
    later in this chapter, we''ll be using the CARTOframes package with other geospatial
    packages, so you might want to install it in a virtual environment together with
    GeoPandas, so that you''ll have access to its dependencies as well. Consult the
    installation guides for GeoPandas and other libraries in [Chapter 2](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml),
    *Introduction to Geospatial Code Libraries*. You can install the Jupyter Notebook
    app in a separate Python environment with the following command, in a terminal
    window:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在Jupyter Notebooks中使用CARTOframes。在本章后面的示例脚本中，我们将使用CARTOframes包与其他地理空间包一起使用，因此你可能希望与GeoPandas一起在虚拟环境中安装它，这样你就可以访问其依赖项。请参考[第2章](757a81a6-cc47-4f08-88d2-b50480eb32e6.xhtml)，*地理空间代码库简介*中的安装指南。你可以在单独的Python环境中使用以下命令安装Jupyter
    Notebook应用，在终端窗口中：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The CARTO API key
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CARTO API密钥
- en: 'After installing CARTOframes, we need to create a CARTO API key in order to
    be able to use the functionality from the library. The library interacts with
    the CARTO infrastructure, similarly to the ArcGIS API for Python in [Chapter 9](399c3041-569f-400a-83f0-e13020a177cf.xhtml),
    *ArcGIS API for Python and ArcGIS Online*. The API key can be used for writing
    dataframes to an account, reading from private tables, and visualizing data on
    maps. CARTO provides API keys for education and nonprofit uses, among others.
    If you''re a student, you can get access to an API key by signing up to GitHub''s
    student developer pack: [https://education.github.com/pack. ](https://education.github.com/pack)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装CARTOframes后，我们需要创建一个CARTO API密钥，以便能够使用库中的功能。该库与CARTO基础设施交互，类似于[第9章](399c3041-569f-400a-83f0-e13020a177cf.xhtml)，*Python
    ArcGIS API和ArcGIS Online*中的ArcGIS API for Python。API密钥可用于将数据帧写入账户、从私有表中读取以及将数据可视化在地图上。CARTO为教育和非营利用途等提供了API密钥。如果你是学生，你可以通过注册GitHub的学生开发者包来获取API密钥：[https://education.github.com/pack. ](https://education.github.com/pack)
- en: 'Another option is to become a CARTO ambassador:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是成为CARTO大使：
- en: '[https://carto.com/community/ambassadors/.](https://CARTO.com/community/ambassadors/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://carto.com/community/ambassadors/.](https://CARTO.com/community/ambassadors/)'
- en: Package dependencies
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包依赖
- en: 'CARTOframes depends on a number of Python libraries that are installed automatically
    once you run the `pip` install command. The following Python libraries are installed:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CARTOframes依赖于多个Python库，一旦运行`pip install`命令，这些库就会自动安装。以下Python库会被安装：
- en: '`ipython`: Provides a rich toolkit for using Python interactively'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipython`：提供了一套丰富的工具，用于交互式使用Python'
- en: '`appdirs`: A small Python module for determining appropriate platform-specific
    directories'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appdirs`：一个用于确定适当平台特定目录的小型Python模块'
- en: '`carto`: Provides an SDK around CARTO''s APIs'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`carto`：提供围绕CARTO API的SDK'
- en: '`chardet`: A universal encoding detector for Python 2 and 3'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chardet`：Python 2和3的通用编码检测器'
- en: '`colorama`: Enables colored terminal text and cursor positioning in MS Windows'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorama`：在MS Windows中启用彩色终端文本和光标定位'
- en: '`decorator`: Preserves the signature of decorated functions consistently across
    Python releases'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decorator`：在Python各个版本中一致地保留装饰函数的签名'
- en: '`future`: Offers a compatibility layer between Python 2 and Python 3'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future`: 提供 Python 2 和 Python 3 之间的兼容层'
- en: '`idna`: Offers support for **Internationalized Domain Names in Applications**
    (**IDNA**)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`idna`: 为应用程序中的**国际化域名**（**IDNA**）提供支持'
- en: '`ipython-genutils`: Vestigial utilities from IPython'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipython-genutils`: 来自 IPython 的遗迹工具'
- en: '`jedi`: An autocompletion tool for Python that can be used for text editors'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jedi`: 一个用于文本编辑器的自动完成工具'
- en: '`numpy`: Performs array processing for numbers, strings, records, and objects'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy`: 执行数字、字符串、记录和对象的数组处理'
- en: '`pandas`: Offers powerful data structures for data analysis, time series, and
    statistics'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas`: 提供强大的数据分析、时间序列和统计数据结构'
- en: '`parso`: A Python parser that supports error recovery for different Python
    versions, and more'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parso`: 一个支持不同 Python 版本错误恢复的 Python 解析器，以及更多'
- en: '`pickleshare`: A small shelve-like datastore with concurrency support'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pickleshare`: 一个具有并发支持的类似 shelve 的小型数据存储库'
- en: '`prompt-toolkit`: A library for building powerful interactive command lines
    in Python'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prompt-toolkit`: 用于在 Python 中构建强大交互式命令行的库'
- en: '`pygments`: A syntax highlighting package written in Python'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pygments`: 一个用 Python 编写的语法高亮包'
- en: '`pyrestcli`: A generic REST client for Python'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyrestcli`: Python 的通用 REST 客户端'
- en: '`python-dateutil`: Offers extensions to the standard Python `datetime` module'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-dateutil`: 为标准的 Python `datetime` 模块提供扩展'
- en: '`pytz`: Provides modern and historical world timezone definitions'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytz`: 提供现代和历史世界时区定义'
- en: '`requests`: An HTTP `requests` library'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`: 一个 HTTP `requests` 库'
- en: '`simplegeneric`: Lets you define simple single-dispatch generic functions'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simplegeneric`: 允许您定义简单的单分派泛型函数'
- en: '`six`: A Python 2 and 3 compatibility library'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`six`: 一个 Python 2 和 3 兼容库'
- en: '`tqdm`: Offers a fast, extensible progress meter'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tqdm`: 提供快速、可扩展的进度条'
- en: '`traitlets`: A configuration system for Python applications'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`traitlets`: Python 应用程序的配置系统'
- en: '`urllib3`: An HTTP library with thread-safe connection pooling, file post,
    and more'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib3`: 一个具有线程安全连接池、文件上传等功能的 HTTP 库'
- en: '`wcwidth`: Measures the number of terminal column cells of wide-character codes'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wcwidth`: 测量宽字符代码的终端列单元格数'
- en: '`webcolors`: A library for working with color names and color value formats
    defined by HTML and CSS'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webcolors`: 用于处理 HTML 和 CSS 定义的色彩名称和色彩值格式的库'
- en: The CARTO Data Observatory
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CARTO 数据观测站
- en: You can augment the CARTOframes library by using the CARTO Data Observatory,
    an online data service from CARTO. It provides three things—out-of-the-box location
    data, access to a catalog of analyzed data methods, and the opportunity to build
    location intelligence apps on top of fast APIs. This data service was created
    with the idea in mind that data available on the web has to be searchable, and
    therefore labeled well. To be able to find this data, provide a context to your
    data, and use it for spatial analysis is what is possible with this service.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 CARTO 数据观测站来增强 CARTOframes 库，CARTO 数据观测站是 CARTO 提供的在线数据服务。它提供三件事——即插即用的位置数据、访问分析数据方法的目录，以及基于快速
    API 构建位置智能应用的机会。这个数据服务是在这样的想法下创建的，即网络上的数据必须是可搜索的，因此需要良好的标签。为了能够找到这些数据，提供数据上下文，并使用该服务进行空间分析是可能的。
- en: The CARTO Data Observatory is available for CARTO enterprise users, which requires
    a paid subscription. In this chapter, we won't cover this option, but we mention
    it here as to give you an idea of what is possible with the CARTOframes library.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CARTO 数据观测站适用于 CARTO 企业用户，需要付费订阅。在本章中，我们不会介绍这个选项，但在这里提及它，以便让您了解 CARTOframes
    库可以实现的功能。
- en: Signing up for a CARTO account
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册 CARTO 账户
- en: To be able to use CARTOframes, and to interact with data stored in the cloud-based
    PostGIS database service that CARTO offers, it is necessary to sign up for a CARTO
    account. While free accounts are available, with limited storage capacity and
    access to existing data resources, it is necessary to have a paid account to use
    CARTOframes, as these accounts are provided API keys. The API key will be used
    by CARTOframes to identify the account, with each data request sent to the user's
    cloud geodatabase.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CARTOframes 并与 CARTO 提供的基于云的 PostGIS 数据库服务存储的数据进行交互，您需要注册一个 CARTO 账户。虽然提供免费账户，但存储容量有限，且对现有数据资源的访问有限，因此需要付费账户来使用
    CARTOframes，因为这些账户提供了 API 密钥。API 密钥将由 CARTOframes 用于识别账户，每个数据请求都将发送到用户的云地理数据库。
- en: A free trial of CARTO
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CARTO 的免费试用
- en: 'By signing up, the account is initially a paid account with access to all CARTO
    features. The paid account offers a free 30-day trial that can be used to for
    evaluation purposes. Go to the site [https://carto.com/signup](http://carto.com/signup)
    and create an account:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过注册，账户最初是一个付费账户，可以访问所有CARTO功能。付费账户提供免费30天试用期，可用于评估目的。请访问网站[https://carto.com/signup](http://carto.com/signup)并创建账户：
- en: '![](img/9dd2dcdb-9ab0-4a3d-9c24-bbf172f2b1c9.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9dd2dcdb-9ab0-4a3d-9c24-bbf172f2b1c9.png)'
- en: 'Once the account has been created, the 30-day trial period begins. This will
    allow you to add data to the cloud database, or to access publicly available data
    from the CARTO library. It also allows you to easily publish a map. Click on the
    NEW MAP button to get started:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建账户，30天的试用期就开始了。这将允许您向云数据库添加数据，或者从CARTO库访问公开可用的数据。它还允许您轻松发布地图。点击“新建地图”按钮开始：
- en: '![](img/72034ea5-69c4-483f-b163-1be4c3f298f5.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/72034ea5-69c4-483f-b163-1be4c3f298f5.png)'
- en: Adding a dataset
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据集
- en: 'Using the DATA LIBRARY tab, add the Portland building footprints to the map.
    Select the data set from the list, and then push Create Map. The dataset will
    be added to the account datasets tab, and to the map creation interface called
    Builder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DATA LIBRARY选项卡，将波特兰建筑足迹添加到地图中。从列表中选择数据集，然后点击创建地图。数据集将被添加到账户数据集选项卡和地图创建界面Builder中：
- en: '![](img/d1ab5f89-5baa-4c17-8e10-a7b56944b76a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1ab5f89-5baa-4c17-8e10-a7b56944b76a.png)'
- en: The dataset is added as a layer to the map. All aspects of the layer can be
    manipulated in the map editor, including the color of the layer, the attributes
    shown, the pop-up window, and more. The basemap can also be adjusted.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集被添加为地图的一层。地图编辑器中可以操纵层的所有方面，包括层的颜色、显示的属性、弹出窗口等。底图也可以进行调整。
- en: 'Widgets, representing live data from attributes, can be added as well. I''ve
    added the US Census Tracts layer from the DATA LIBRARY to the map, and added a
    graphing widget that will display values from a selected attribute field. This
    graph is dynamic, and will adjust the values displayed based on the specific census
    tracts which are shown in the map window:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加表示属性实时数据的控件。我已经将来自DATA LIBRARY的US Census Tracts层添加到地图中，并添加了一个显示所选属性字段值的图形控件。此图形是动态的，并将根据地图窗口中显示的具体人口普查区调整显示的值：
- en: '![](img/27049833-8a32-455e-97a9-2bcad929301f.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27049833-8a32-455e-97a9-2bcad929301f.png)'
- en: Check out the other tabs in Builder, including DATA, ANALYSIS, STYLE, POP-UP, and LEGEND,
    to further customize the map. There are a number of adjustments and widgets that
    will make the data interactive. The map can also be made either public or private,
    and can be published to the web by pushing the PUBLISH button. CARTO's editors
    and data ingestion interface make it really easy to create and share maps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Builder中的其他选项卡，包括DATA、ANALYSIS、STYLE、POP-UP和LEGEND，以进一步自定义地图。有许多调整和小部件可以使数据交互式。地图也可以设置为公开或私有，并且可以通过点击发布按钮发布到网络上。CARTO的编辑器和数据导入界面使得创建和共享地图变得非常容易。
- en: The API key
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API密钥
- en: 'To connect to the CARTO account using CARTOframes, an API key is required.
    To access it, go to the account dashboard, click on the image in the upper right,
    and select the Your API keys link from the drop-down menu:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用CARTOframes连接到CARTO账户，需要一个API密钥。要访问它，请转到账户仪表板，点击右上角的图片，然后从下拉菜单中选择“您的API密钥”链接：
- en: '![](img/4c3e11e3-b0e6-4aeb-92b8-404730089c84.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c3e11e3-b0e6-4aeb-92b8-404730089c84.png)'
- en: 'The API key is a long string of text used to ensure that the scripts we will
    write can have access to the account and the datasets associated with it. When
    it is time to write scripts, copy the key text and assign it to a variable as
    a Python string within the script:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: API密钥是一串用于确保我们将要编写的脚本可以访问账户及其相关数据集的文本。当编写脚本时，复制密钥文本并将其作为Python字符串分配给脚本中的变量：
- en: '![](img/a0c47392-c9d3-4715-83d2-f9451d440ed4.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a0c47392-c9d3-4715-83d2-f9451d440ed4.png)'
- en: Adding a dataset
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据集
- en: 'There is a handy method for adding data from your computer to the account.
    However, when adding shapefiles, all of the data files that make up the shapefile
    must be in a ZIP file. We''ll add the NBA arenas shapefile from [Chapter 11](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml), *Flask
    and GeoAlchemy2*, as a ZIP file to the account. Click on the NEW DATASET button
    in the DATASETS area of your dashboard:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的方法可以将您计算机上的数据添加到账户中。然而，当添加 shapefiles 时，构成 shapefile 的所有数据文件必须在一个 ZIP
    文件中。我们将从 [第 11 章](e483966e-f5c7-47dd-a40c-9b8b6f807107.xhtml)，*Flask 和 GeoAlchemy2*，将
    NBA 场馆 shapefile 作为 ZIP 文件添加到账户中。点击仪表板数据集区域中的“新建数据集”按钮：
- en: '![](img/d07aa76d-d9d7-432a-a995-e141a3ba494b.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d07aa76d-d9d7-432a-a995-e141a3ba494b.png)'
- en: 'Once the NEW DATASET button is pushed, and the CONNECT DATASET interface appears,
    click on BROWSE and navigate to the zipped file to upload it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按下“新建数据集”按钮，并出现“连接数据集”界面，点击“浏览”并导航到 ZIP 文件以上传它：
- en: '![](img/d141f6df-1a86-432f-9824-72c5c031b29b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d141f6df-1a86-432f-9824-72c5c031b29b.png)'
- en: Upon completion of the upload process, the data will be given a URL and can
    be edited using Builder. It can also be edited using CARTOframes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上传过程完成后，数据将被分配一个 URL，并可以使用 Builder 进行编辑。它也可以使用 CARTOframes 进行编辑。
- en: Now that the account is set up, and a dataset has been added from a local file
    as well as from the DATA LIBRARY, we need to set up the Python environment on
    our local machine to be able to connect to the data stored in the account.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在账户已经设置好了，并且已经从本地文件以及数据库中添加了一个数据集，我们需要在我们的本地机器上设置 Python 环境，以便能够连接到账户中存储的数据。
- en: Virtual environments
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟环境
- en: To manage the installation of CARTOframes and the other associated Python 3
    modules, we will be using the virtual environments package `virtualenv`. This
    Python module makes it easy to set up completely separate Python installations
    on the same computer. Using `virtualenv`, a copy of Python is created, and when
    activated, all modules that are installed are separate from the main Python installation
    (in other words, the modules installed inside a virtual environment will not be
    added to the main `site-packages` folder). This allows for a lot less package
    management headaches.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理 CARTOframes 和其他相关 Python 3 模块的安装，我们将使用虚拟环境包 `virtualenv`。这个 Python 模块使得在同一台计算机上设置完全独立的
    Python 安装变得非常容易。使用 `virtualenv`，会创建一个 Python 的副本，当激活时，所有安装的模块都将与主要的 Python 安装分开（换句话说，虚拟环境中安装的模块不会添加到主要的
    `site-packages` 文件夹中）。这大大减少了包管理的麻烦。
- en: Installing virtualenv
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 virtualenv
- en: 'Installation of the `virtualenv` package is easy when using `pip` from PyPI
    ([pypi.org](http://pypi.org)):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyPI 的 `pip` 安装 `virtualenv` 包非常简单 ([pypi.org](http://pypi.org))：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command will add `virtualenv` and its supporting modules. Make sure that
    the main Python installation has been added to the path Windows environment variables
    so that `virtualenv` can be called from the command line.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将添加 `virtualenv` 及其支持模块。请确保主要的 Python 安装已经被添加到 Windows 环境变量中，这样 `virtualenv`
    才能从命令行调用。
- en: Running virtualenv
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 virtualenv
- en: 'To create the virtual environment, open a command line and enter the following
    command structure, `virtualenv {environment name}`*.* In this case, the name of
    the environment is `cartoenv`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟环境，打开命令行并输入以下命令结构，`virtualenv {环境名称}`*.* 在这个例子中，环境名称是 `cartoenv`：
- en: '![](img/b9f8c0a8-f588-40ac-85d4-0d419eae77cb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9f8c0a8-f588-40ac-85d4-0d419eae77cb.png)'
- en: 'Inside the folder where `virtualenv` is created, a series of folders are generated
    with the code files necessary to support Python. There is also a `Lib` folder,
    which contains the `site-packages` folder that will hold all of the modules installed
    inside this virtual version of Python:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `virtualenv` 的文件夹内，会生成一系列包含支持 Python 的必要代码文件的文件夹。还有一个 `Lib` 文件夹，其中包含 `site-packages`
    文件夹，它将包含在这个 Python 版本中安装的所有模块：
- en: '![](img/bb44e0fd-ef8d-4500-86cf-51804eaf0c00.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb44e0fd-ef8d-4500-86cf-51804eaf0c00.png)'
- en: Activating the virtual environment
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: 'To start using the new virtual environment from the command line, pass the
    following argument inside the folder that holds the virtual environment. This
    will run the `activate` batch file, and will start the virtual environment:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行开始使用新的虚拟环境，在虚拟环境所在的文件夹中传递以下参数。这将运行 `activate` 批处理文件，并启动虚拟环境：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the virtual environment is activated, the name of the environment will
    appear before the folder name, indicating that the commands are being run inside
    the environment and any changes that are performed (such as installing modules)
    will not affect the main Python installation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活了虚拟环境，环境名称将出现在文件夹名称之前，这表明命令是在环境中运行的，并且任何执行的操作（如安装模块）都不会影响主要的 Python 安装：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In a Linux environment, the command source `{environment}/bin/activate` is
    used instead. When programming in Linux, the commands in the terminal would look
    like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 环境中，使用命令 `source {environment}/bin/activate` 代替。在 Linux 中编程时，终端中的命令将看起来像这样：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In either OS, to deactivate the virtual environment, pass the `deactivate`
    command. This will end the virtual session:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何操作系统上，要停止虚拟环境，传递 `deactivate` 命令。这将结束虚拟会话：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Installing modules in virtualenv
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 virtualenv 中安装模块
- en: Because each virtual environment is separate from the main Python installation,
    each environment must have the required modules installed. While this can seem
    like a pain, `pip` makes it quite easy. After setting up the first virtual environment,
    a `pip` command called `freeze` allows you to generate a file called `requirements.txt`.
    This file can be copied into a new virtual environment and using `pip` install,
    all of the listed modules will be added from PyPI.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个虚拟环境都与主要的 Python 安装分开，每个环境都必须安装所需的模块。虽然这可能会让人感到烦恼，但 `pip` 使得这个过程相当简单。在设置第一个虚拟环境之后，一个名为
    `freeze` 的 `pip` 命令允许你生成一个名为 `requirements.txt` 的文件。这个文件可以被复制到一个新的虚拟环境中，并使用 `pip
    install` 命令，所有列出的模块都将从 PyPI 添加。
- en: 'To generate a `requirements.txt` file in the current folder, use this command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在当前文件夹中生成 `requirements.txt` 文件，使用以下命令：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the file has been copied into a new virtual environment folder, activate
    the environment and pass the following command to read from the file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在将文件复制到新的虚拟环境文件夹后，激活环境并传递以下命令来读取文件：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Modules to use
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要使用的模块
- en: For this virtual environment, we will install the two modules CARTOframes and
    Jupyter. The second module will allow us to run Jupyter Notebooks, which are specialized
    browser-based coding environments.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个虚拟环境，我们将安装两个模块 CARTOframes 和 Jupyter。第二个模块将允许我们运行 Jupyter Notebooks，这些是专门的基于浏览器的编码环境。
- en: 'Activate the virtual environment, and install the modules within the virtual
    environment with the following commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境，并使用以下命令在虚拟环境中安装模块：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All of the required modules will also be downloaded and installed, along with
    the two that we are installing directly. Using `pip` and `virtualenv` makes package
    installation and management simple and quick.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的所有模块也将被下载并安装，包括我们直接安装的两个模块。使用 `pip` 和 `virtualenv` 使得包安装和管理变得简单快捷。
- en: Using Jupyter Notebook
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jupyter Notebook
- en: We have covered the basic installation of Jupyter Notebook in [Chapter 1](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml), *Package
    Installation and Management* and in the previous chapter at various instances
    to run code and get the desired output.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 [第 1 章](23e9b6f4-e43b-4bf7-bc80-2c1537d5f760.xhtml)，*包安装与管理* 以及前一章的多个实例中介绍了
    Jupyter Notebook 的基本安装。
- en: Here, we will be using Jupyter Notebook for CARTOframes to connect to an account
    and analyze geospatial data and display it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用 Jupyter Notebook for CARTOframes 来连接账户并分析地理空间数据以及展示它。
- en: Connecting to an account
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到账户
- en: 'In the first code box, we will import the CARTOframes module, and pass the
    API key string along with the base URL, which is generated from your CARTO username
    as `https://{username}.carto.com`. In this case, the URL is `https://lokiintelligent.carto.com`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码框中，我们将导入 CARTOframes 模块，并传递 API 密钥字符串以及基础 URL，该 URL 由你的 CARTO 用户名生成，格式为
    `https://{username}.carto.com`。在这种情况下，URL 是 `https://lokiintelligent.carto.com`：
- en: '![](img/591ae76b-2dd4-4178-8394-4f798f245af0.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/591ae76b-2dd4-4178-8394-4f798f245af0.png)'
- en: In this code block, the API key and the URL are passed to the `CartoContext`
    class, and a `CartoContext` connect object is returned and assigned to the variable
    `cc`. With this object, we can now interact with the datasets associated with
    our account, load datasets into the account, and even generate maps directly in
    the Jupyter Notebook.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，API 密钥和 URL 被传递给 `CartoContext` 类，并返回一个 `CartoContext` 连接对象，并将其分配给变量
    `cc`。有了这个对象，我们现在可以与我们的账户关联的数据集进行交互，将数据集加载到账户中，甚至可以直接在 Jupyter Notebook 中生成地图。
- en: Once the code has been entered into the section, push the Run button to execute
    the code in the current section. Any output will appear in an Out section, underneath
    the code run. This section can include maps, tables, and even graphs—Jupyter Notebooks
    are often used in scientific computing because of this ability to instantly produce
    graphs and to save them within the Notebook.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码输入到该部分，点击运行按钮以执行当前部分的代码。任何输出都将出现在代码运行的下方 Out 部分。此部分可以包括地图、表格，甚至图表——Jupyter
    Notebooks 常用于科学计算，因为它们能够即时生成图表并在笔记本中保存。
- en: Saving credentials
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存凭据
- en: 'The CARTO account credentials can be saved and accessed later by using the
    `Credentials` library:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Credentials` 库保存并稍后访问 CARTO 账户的凭据：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Accessing a dataset
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问数据集
- en: 'To access the NBA arenas dataset that we loaded into the account, we are going
    to use the `CartoContext` `read` method, passing the name of the dataset we want
    to interact with as a string. In a Jupyter Notebook In section, run the following
    code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问我们已加载到账户中的 NBA 场馆数据集，我们将使用 `CartoContext` 的 `read` 方法，将我们想要交互的数据集名称作为字符串传递。在
    Jupyter Notebook 部分，运行以下代码：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using `CartoContext`, the account is accessed. With the `cc` object, the `read`
    method creates a `DataFrame` object from the NBA `arenas` dataset. The `DataFrame`
    object is what is queried or updated.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `CartoContext` 访问账户。使用 `cc` 对象，`read` 方法从 NBA `arenas` 数据集创建一个 `DataFrame`
    对象。`DataFrame` 对象是查询或更新的对象。
- en: 'The `print` statement will produce a table with values from the NBA `arenas`
    dataset, which has been loaded into a CARTOframe object:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`print` 语句将生成一个包含 NBA `arenas` 数据集值的表格，这些数据已被加载到 CARTOframe 对象中：'
- en: '![](img/117be600-7f09-4f7d-a4f1-deef661e8c40.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/117be600-7f09-4f7d-a4f1-deef661e8c40.png)'
- en: 'Individual columns can be access using dot notation (for example, `df.address1`)
    or using keys (for example, `df[''address1'']`):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用点符号（例如，`df.address1`）或使用键（例如，`df['address1']`）来访问单个列：
- en: '![](img/75f11b12-f0e7-4df9-aad7-a5323119f728.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75f11b12-f0e7-4df9-aad7-a5323119f728.png)'
- en: Selecting individual rows
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择单个行
- en: 'To select a specific row within the Pandas dataframe derived from the CARTO
    account dataset, a conditional statement can be passed to the object in brackets.
    Here, the NBA `arenas` dataset''s team column is queried by passing the name of
    an NBA team as a parameter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择 Pandas 数据框中来自 CARTO 账户数据集的特定行，可以将条件语句传递到括号中的对象。在这里，通过传递 NBA 团队名称作为参数，查询
    NBA `arenas` 数据集的团队列：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Loading a CSV dataset
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载 CSV 数据集
- en: 'To load a dataset into the account using CARTOframes, we will use the `pandas` library
    again, which is installed with the Jupyter modules. Pandas allow us to read data
    from a CSV (and other file formats), loading it into a Pandas dataframe (a special
    data object that allows for a multitude of data-manipulation methods, as well
    as producing output). Then, using `CartoContext`, the dataframe is written (as
    a table) to the account:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CARTOframes 将数据集加载到账户中，我们将再次使用与 Jupyter 模块一起安装的 `pandas` 库。Pandas 允许我们从
    CSV（以及其他文件格式）中读取数据，将其加载到 Pandas 数据框（一个特殊的数据对象，允许进行多种数据操作，并生成输出）。然后，使用 `CartoContext`，将数据框（作为一个表）写入账户：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will write the CSV table, imported as a dataframe, into the CARTO account
    DATASETS section:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把作为数据框导入的 CSV 表写入 CARTO 账户的 DATASETS 部分：
- en: '![](img/30feff43-aea0-466e-9788-d380d7aa3c60.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30feff43-aea0-466e-9788-d380d7aa3c60.png)'
- en: The imported dataset will not be a geospatial table, but is instead a table
    that can be queried and joined to spatial data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 导入的数据集将不是一个地理空间表，而是一个可以查询并连接到空间数据的表。
- en: Loading a shapefile
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载 shapefile
- en: Loading geospatial data manually into CARTO is easy, as we explored earlier.
    It's even easier when using CARTOframes, as it makes automated data management
    possible. New, updated data files or data from REST APIs can be converted into
    dataframes and written into the CARTO account.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所探讨的，手动将地理空间数据加载到 CARTO 中很容易。当使用 CARTOframes 时，这甚至更容易，因为它使得自动化数据管理成为可能。新的、更新的数据文件或来自
    REST API 的数据可以转换为数据框并写入 CARTO 账户。
- en: Shapefiles require the installation of the GeoPandas library, as the geometry
    requires a GeoPandas `DataFrame` object for data management.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Shapefiles 需要安装 GeoPandas 库，因为几何形状需要 GeoPandas `DataFrame` 对象进行数据管理。
- en: Installing GeoPandas
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GeoPandas
- en: 'GeoPandas, as discussed in [Chapter 5](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml), *Vector
    Data Analysis*, is the geospatial compliment to Pandas. To be able to create dataframes
    objects from shapefiles, we have to make sure that GeoPandas is installed and
    added to the virtual environment. Use `pip install` to add the GeoPandas library:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: GeoPandas，如第5章[Vector Data Analysis](0b3a2208-3881-479a-83a8-78be85b9c1d6.xhtml)中讨论的，是Pandas的地理空间补充。为了能够从形状文件创建数据帧对象，我们必须确保GeoPandas已安装并添加到虚拟环境中。使用`pip
    install`添加GeoPandas库：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If there are installation issues on Windows, pre-built binaries for GeoPandas
    and Fiona (which powers GeoPandas) are available here, along with many other Python
    libraries: [https://www.lfd.uci.edu/~gohlke/pythonlibs](https://www.lfd.uci.edu/~gohlke/pythonlibs).
    Install Fiona and GeoPandas from the wheels by downloading them, copying them
    into a folder, and using `pip install` to install from the wheel. For example,
    here, Fiona is installed from the wheel file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在Windows上遇到安装问题，GeoPandas和Fiona（GeoPandas的驱动库）的预构建二进制文件可供在此处使用，以及许多其他Python库：[https://www.lfd.uci.edu/~gohlke/pythonlibs](https://www.lfd.uci.edu/~gohlke/pythonlibs)。通过下载它们，将它们复制到一个文件夹中，并使用`pip
    install`从轮子中安装Fiona和GeoPandas。例如，在这里，Fiona是从轮子文件安装的：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Writing to CARTO
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入CARTO
- en: 'Writing the shapefile to the CARTO account requires only a `CartoContext` object,
    a file path, and the usual URL and API key combination. With GeoPandas now installed,
    the MLB Stadiums shapefile can be loaded into a GeoPandas `DataFrame`, and then
    written to the CARTO account using the `CartoContext` `write` method:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将形状文件写入CARTO账户只需要一个`CartoContext`对象、一个文件路径以及常用的URL和API密钥组合。现在GeoPandas已安装，MLB
    Stadiums形状文件可以加载到GeoPandas `DataFrame`中，然后使用`CartoContext`的`write`方法写入CARTO账户：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Log in to the CARTO account to confirm that the dataset has been added.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到CARTO账户以确认数据集已被添加。
- en: Loading CSV with geometry
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载具有几何形状的CSV
- en: 'To ensure that a table (address data from OpenAddresses in this case) with
    latitude and longitude columns is imported as a geospatial dataset, we have to
    use the Shapely library''s `Point` class. Each `Point` geometry is generated from
    the `LON` and `LAT` fields of the address dataset which has been imported:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保具有纬度和经度列的表格（在这种情况下为OpenAddresses的地址数据）作为地理空间数据集导入，我们必须使用Shapely库的`Point`类。每个`Point`几何对象都是从已导入的地址数据集的`LON`和`LAT`字段生成的：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Ensure that the GeoPandas library is imported before CARTOframes to avoid import
    errors from the Fiona library.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入CARTOframes之前确保导入GeoPandas库，以避免从Fiona库中导入错误。
- en: Geospatial analysis
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理空间分析
- en: 'To perform geospatial analysis, using the cloud datasets, we can connect using
    CARTOframes and perform spatial queries using a combination of GeoPandas and Shapely.
    In this example, the NBA `arenas` dataset is compared against a US States shapefile
    using an intersects spatial query. If the `arena` object intersects with a state
    object, the name of the `arena` and the state are printed:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行地理空间分析，使用云数据集，我们可以通过CARTOframes连接，并使用GeoPandas和Shapely的组合进行空间查询。在这个例子中，NBA
    `arenas`数据集与US States形状文件使用相交空间查询进行比较。如果`arena`对象与州对象相交，则打印出`arena`和州的名称：
- en: '[PRE18]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Editing and updating datasets
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和更新数据集
- en: Because CARTOframes incorporates the Pandas dataframes objects, which can be
    edited in memory, and writes to the datasets stored in the CARTO account, we can
    create scripts that will automate the upload of geospatial data. Datasets can
    be updated entirely, or individual rows and values can be updated using Pandas
    data methods such as `replace`. This, coupled with Builder, the CARTO web-map
    deployment tool, makes it easy to create GIS with a web-map frontend and cloud
    data storage that can be managed using scripting.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因为CARTOframes集成了可以在内存中编辑的Pandas数据帧对象，并将写入存储在CARTO账户中的数据集，我们可以创建脚本来自动化地理空间数据的上传。数据集可以完全更新，或者可以使用Pandas数据方法（如`replace`）更新单个行和值。这，加上Builder，CARTO网络地图部署工具，使得创建具有网络地图前端和云数据存储的GIS变得容易，这些数据可以通过脚本进行管理。
- en: 'In this example code, the name of the state that contains the NBA `arena` is
    found using the `intersect` query. The names are added to a list, and the list
    is added to the `arena` dataframe as a new column called states. The geometry
    data stored in the `arenas` dataset are required to be converted into Shapely
    objects, using the `loads` module:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例代码中，使用`intersect`查询找到包含NBA `arena`的州的名称。这些名称被添加到一个列表中，然后该列表被添加到`arena` dataframe中作为名为states的新列。存储在`arenas`数据集中的几何数据需要使用`loads`模块转换为Shapely对象：
- en: '[PRE19]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: overwrite=True
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: overwrite=True
- en: 'With each update to the datasets, the changes must be written to the CARTO
    account. To overwrite data in the cloud database with new data, the `overwrite`
    parameter must be set to `True`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 每次更新数据集时，必须将更改写入 CARTO 账户。要使用新数据覆盖云数据库中的数据，必须将 `overwrite` 参数设置为 `True`：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating a map
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建地图
- en: 'Because of the interactivity of Jupyter Notebooks, code and code output exist
    together. This is great when dealing with geospatial data, as it makes it easy
    to create a map of the data. In this example, the NBA `arenas` and MLB stadiums
    datasets are added to a map over a `BaseMap` object:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Jupyter Notebooks 的交互性，代码和代码输出是同时存在的。当处理地理空间数据时，这非常棒，因为它使得创建数据地图变得容易。在这个例子中，NBA
    `arenas` 和 MLB 体育场数据集被添加到一个覆盖 `BaseMap` 对象的地图上：
- en: '[PRE21]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output produced is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的输出如下：
- en: '![](img/3a2534bd-e1eb-40d7-90bd-e46c4e72b82d.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a2534bd-e1eb-40d7-90bd-e46c4e72b82d.png)'
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the following topics. First, we introduced the CARTOframes
    Python library and discussed how it relates to other parts of the CARTO stack,
    such as CARTO Builder and CARTO Data Observatory. Next, we explained how to install
    the CARTOframes library, what other Python packages it depends on, and where to
    look for documentation. Because CARTOframes uses data from CARTO Builder, we explained
    how to set up a CARTO Builder account. In the example scripts that make up the
    rest of the chapter, we saw how the library integrates `pandas` dataframes, how
    to work with tables, and how to make maps and combine them with other geospatial
    libraries, such as Shapely and GeoPandas.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题。首先，我们介绍了 CARTOframes Python 库，并讨论了它与 CARTO 栈的其他部分（如 CARTO Builder
    和 CARTO Data Observatory）的关系。接下来，我们解释了如何安装 CARTOframes 库，它依赖于哪些其他 Python 包，以及在哪里查找文档。由于
    CARTOframes 使用 CARTO Builder 的数据，我们解释了如何设置 CARTO Builder 账户。在构成本章其余部分的示例脚本中，我们看到了如何将库与
    `pandas` 数据框集成，如何处理表格，以及如何制作地图并将它们与其他地理空间库（如 Shapely 和 GeoPandas）结合使用。
- en: In the next chapter, we will cover another module that utilizes Jupyter Notebooks
    and cartographic visualizations, MapboxGL—Jupyter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍另一个利用 Jupyter Notebooks 和地图可视化技术的模块，即 MapboxGL—Jupyter。
